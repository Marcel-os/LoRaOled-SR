
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  080050f0  080050f0  000150f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  08005ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a4  200001e4  08005ca4  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000788  08005ca4  00020788  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010a64  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002886  00000000  00000000  00030c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000840f  00000000  00000000  000334f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa0  00000000  00000000  0003b908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d8  00000000  00000000  0003c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00015017  00000000  00000000  0003d480  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000afff  00000000  00000000  00052497  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000754ba  00000000  00000000  0005d496  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000d2950  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e94  00000000  00000000  000d29cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080050d4 	.word	0x080050d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080050d4 	.word	0x080050d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_InitTick+0x3c>)
{
 8000acc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ace:	7818      	ldrb	r0, [r3, #0]
 8000ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <HAL_InitTick+0x40>)
 8000ada:	6810      	ldr	r0, [r2, #0]
 8000adc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae0:	f000 f9b2 	bl	8000e48 <HAL_SYSTICK_Config>
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	b958      	cbnz	r0, 8000b00 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	2d0f      	cmp	r5, #15
 8000aea:	d809      	bhi.n	8000b00 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	4602      	mov	r2, r0
 8000aee:	4629      	mov	r1, r5
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 f974 	bl	8000de0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4620      	mov	r0, r4
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_InitTick+0x44>)
 8000afc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
 8000b02:	e7fc      	b.n	8000afe <HAL_InitTick+0x36>
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000010 	.word	0x20000010
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x20>)
{
 8000b12:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	f000 f94d 	bl	8000dbc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffd0 	bl	8000ac8 <HAL_InitTick>
  HAL_MspInit();
 8000b28:	f001 fd72 	bl	8002610 <HAL_MspInit>
}
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	bd08      	pop	{r3, pc}
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x10>)
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_IncTick+0x14>)
 8000b38:	6811      	ldr	r1, [r2, #0]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000614 	.word	0x20000614
 8000b48:	20000000 	.word	0x20000000

08000b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_GetTick+0x8>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000614 	.word	0x20000614

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff6 	bl	8000b4c <HAL_GetTick>
 8000b60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b64:	bf1e      	ittt	ne
 8000b66:	4b04      	ldrne	r3, [pc, #16]	; (8000b78 <HAL_Delay+0x20>)
 8000b68:	781b      	ldrbne	r3, [r3, #0]
 8000b6a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	1b40      	subs	r0, r0, r5
 8000b72:	42a0      	cmp	r0, r4
 8000b74:	d3fa      	bcc.n	8000b6c <HAL_Delay+0x14>
  {
  }
}
 8000b76:	bd38      	pop	{r3, r4, r5, pc}
 8000b78:	20000000 	.word	0x20000000

08000b7c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000b7c:	2300      	movs	r3, #0
{ 
 8000b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b80:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b82:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d06d      	beq.n	8000c66 <HAL_ADC_ConfigChannel+0xea>
 8000b8a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b8c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b92:	2d06      	cmp	r5, #6
 8000b94:	6802      	ldr	r2, [r0, #0]
 8000b96:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000b9a:	680c      	ldr	r4, [r1, #0]
 8000b9c:	d823      	bhi.n	8000be6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b9e:	261f      	movs	r6, #31
 8000ba0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000ba2:	3b05      	subs	r3, #5
 8000ba4:	409e      	lsls	r6, r3
 8000ba6:	ea25 0506 	bic.w	r5, r5, r6
 8000baa:	fa04 f303 	lsl.w	r3, r4, r3
 8000bae:	432b      	orrs	r3, r5
 8000bb0:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bb2:	2c09      	cmp	r4, #9
 8000bb4:	688b      	ldr	r3, [r1, #8]
 8000bb6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000bba:	f04f 0107 	mov.w	r1, #7
 8000bbe:	d92a      	bls.n	8000c16 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bc0:	68d6      	ldr	r6, [r2, #12]
 8000bc2:	3d1e      	subs	r5, #30
 8000bc4:	40a9      	lsls	r1, r5
 8000bc6:	ea26 0101 	bic.w	r1, r6, r1
 8000bca:	40ab      	lsls	r3, r5
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bd0:	f1a4 0310 	sub.w	r3, r4, #16
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d926      	bls.n	8000c26 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	b002      	add	sp, #8
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000be6:	2d0c      	cmp	r5, #12
 8000be8:	f04f 051f 	mov.w	r5, #31
 8000bec:	d809      	bhi.n	8000c02 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bee:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000bf0:	3b23      	subs	r3, #35	; 0x23
 8000bf2:	409d      	lsls	r5, r3
 8000bf4:	ea26 0505 	bic.w	r5, r6, r5
 8000bf8:	fa04 f303 	lsl.w	r3, r4, r3
 8000bfc:	432b      	orrs	r3, r5
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	e7d7      	b.n	8000bb2 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c02:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000c04:	3b41      	subs	r3, #65	; 0x41
 8000c06:	409d      	lsls	r5, r3
 8000c08:	ea26 0505 	bic.w	r5, r6, r5
 8000c0c:	fa04 f303 	lsl.w	r3, r4, r3
 8000c10:	432b      	orrs	r3, r5
 8000c12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c14:	e7cd      	b.n	8000bb2 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c16:	6916      	ldr	r6, [r2, #16]
 8000c18:	40a9      	lsls	r1, r5
 8000c1a:	ea26 0101 	bic.w	r1, r6, r1
 8000c1e:	40ab      	lsls	r3, r5
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6113      	str	r3, [r2, #16]
 8000c24:	e7d4      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_ADC_ConfigChannel+0xf0>)
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d116      	bne.n	8000c5a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c2c:	6893      	ldr	r3, [r2, #8]
 8000c2e:	021b      	lsls	r3, r3, #8
 8000c30:	d4d2      	bmi.n	8000bd8 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c32:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c34:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c3a:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000c3c:	d1cc      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_ADC_ConfigChannel+0xf4>)
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <HAL_ADC_ConfigChannel+0xf8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c48:	230a      	movs	r3, #10
 8000c4a:	4353      	muls	r3, r2
            wait_loop_index--;
 8000c4c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000c4e:	9b01      	ldr	r3, [sp, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0c1      	beq.n	8000bd8 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000c54:	9b01      	ldr	r3, [sp, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	e7f8      	b.n	8000c4c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e7b9      	b.n	8000bda <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8000c66:	2302      	movs	r3, #2
 8000c68:	e7ba      	b.n	8000be0 <HAL_ADC_ConfigChannel+0x64>
 8000c6a:	bf00      	nop
 8000c6c:	40012400 	.word	0x40012400
 8000c70:	20000010 	.word	0x20000010
 8000c74:	000f4240 	.word	0x000f4240

08000c78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c78:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c7a:	6803      	ldr	r3, [r0, #0]
{
 8000c7c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	07d2      	lsls	r2, r2, #31
 8000c82:	d401      	bmi.n	8000c88 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c84:	2000      	movs	r0, #0
}
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000c90:	f7ff ff5c 	bl	8000b4c <HAL_GetTick>
 8000c94:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	07db      	lsls	r3, r3, #31
 8000c9c:	d5f2      	bpl.n	8000c84 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c9e:	f7ff ff55 	bl	8000b4c <HAL_GetTick>
 8000ca2:	1b40      	subs	r0, r0, r5
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9f6      	bls.n	8000c96 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000caa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cba:	e7e4      	b.n	8000c86 <ADC_ConversionStop_Disable+0xe>

08000cbc <HAL_ADC_Init>:
{
 8000cbc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d070      	beq.n	8000da6 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000cc6:	b923      	cbnz	r3, 8000cd2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000cca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000cce:	f001 fcc1 	bl	8002654 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cd2:	4620      	mov	r0, r4
 8000cd4:	f7ff ffd0 	bl	8000c78 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cda:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000cde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce0:	d163      	bne.n	8000daa <HAL_ADC_Init+0xee>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d161      	bne.n	8000daa <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ce6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000ce8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cec:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000cee:	f023 0302 	bic.w	r3, r3, #2
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cf8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000cfa:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cfc:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cfe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d02:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d06:	d037      	beq.n	8000d78 <HAL_ADC_Init+0xbc>
 8000d08:	2901      	cmp	r1, #1
 8000d0a:	bf14      	ite	ne
 8000d0c:	4606      	movne	r6, r0
 8000d0e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d12:	7d25      	ldrb	r5, [r4, #20]
 8000d14:	2d01      	cmp	r5, #1
 8000d16:	d106      	bne.n	8000d26 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d18:	bb83      	cbnz	r3, 8000d7c <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d1a:	69a3      	ldr	r3, [r4, #24]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000d22:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000d26:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d28:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000d2c:	685d      	ldr	r5, [r3, #4]
 8000d2e:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000d32:	ea45 0506 	orr.w	r5, r5, r6
 8000d36:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000d38:	689e      	ldr	r6, [r3, #8]
 8000d3a:	4d1e      	ldr	r5, [pc, #120]	; (8000db4 <HAL_ADC_Init+0xf8>)
 8000d3c:	ea05 0506 	and.w	r5, r5, r6
 8000d40:	ea45 0502 	orr.w	r5, r5, r2
 8000d44:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d46:	d001      	beq.n	8000d4c <HAL_ADC_Init+0x90>
 8000d48:	2901      	cmp	r1, #1
 8000d4a:	d120      	bne.n	8000d8e <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d4c:	6921      	ldr	r1, [r4, #16]
 8000d4e:	3901      	subs	r1, #1
 8000d50:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000d52:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000d54:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000d58:	4329      	orrs	r1, r5
 8000d5a:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d5c:	6899      	ldr	r1, [r3, #8]
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_ADC_Init+0xfc>)
 8000d60:	400b      	ands	r3, r1
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d115      	bne.n	8000d92 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	2300      	movs	r3, #0
 8000d68:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000d6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d6c:	f023 0303 	bic.w	r3, r3, #3
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d78:	460e      	mov	r6, r1
 8000d7a:	e7ca      	b.n	8000d12 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d7e:	f043 0320 	orr.w	r3, r3, #32
 8000d82:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d8c:	e7cb      	b.n	8000d26 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e7df      	b.n	8000d52 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d94:	f023 0312 	bic.w	r3, r3, #18
 8000d98:	f043 0310 	orr.w	r3, r3, #16
 8000d9c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
 8000da8:	e7e5      	b.n	8000d76 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	62a3      	str	r3, [r4, #40]	; 0x28
 8000db0:	e7f9      	b.n	8000da6 <HAL_ADC_Init+0xea>
 8000db2:	bf00      	nop
 8000db4:	ffe1f7fd 	.word	0xffe1f7fd
 8000db8:	ff1f0efe 	.word	0xff1f0efe

08000dbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbe:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dca:	041b      	lsls	r3, r3, #16
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dd6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000dd8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de2:	b570      	push	{r4, r5, r6, lr}
 8000de4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dea:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dee:	f1c4 0507 	rsb	r5, r4, #7
 8000df2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	bf28      	it	cs
 8000dfa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	bf98      	it	ls
 8000e00:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e02:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	bf88      	it	hi
 8000e08:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0a:	ea21 0303 	bic.w	r3, r1, r3
 8000e0e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	fa06 f404 	lsl.w	r4, r6, r4
 8000e14:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e18:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	bfa8      	it	ge
 8000e20:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e24:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	bfb8      	it	lt
 8000e2a:	4a06      	ldrlt	r2, [pc, #24]	; (8000e44 <HAL_NVIC_SetPriority+0x64>)
 8000e2c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	bfab      	itete	ge
 8000e30:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	e000ed14 	.word	0xe000ed14

08000e48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	3801      	subs	r0, #1
 8000e4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4e:	d20a      	bcs.n	8000e66 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e78:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000e7a:	4626      	mov	r6, r4
 8000e7c:	4b65      	ldr	r3, [pc, #404]	; (8001014 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001024 <HAL_GPIO_Init+0x1b0>
 8000e82:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001028 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e86:	680a      	ldr	r2, [r1, #0]
 8000e88:	fa32 f506 	lsrs.w	r5, r2, r6
 8000e8c:	d102      	bne.n	8000e94 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000e8e:	b003      	add	sp, #12
 8000e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000e94:	f04f 0801 	mov.w	r8, #1
 8000e98:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000ea0:	4590      	cmp	r8, r2
 8000ea2:	d17e      	bne.n	8000fa2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000ea4:	684d      	ldr	r5, [r1, #4]
 8000ea6:	2d12      	cmp	r5, #18
 8000ea8:	f000 80a9 	beq.w	8000ffe <HAL_GPIO_Init+0x18a>
 8000eac:	f200 8082 	bhi.w	8000fb4 <HAL_GPIO_Init+0x140>
 8000eb0:	2d02      	cmp	r5, #2
 8000eb2:	f000 80a1 	beq.w	8000ff8 <HAL_GPIO_Init+0x184>
 8000eb6:	d876      	bhi.n	8000fa6 <HAL_GPIO_Init+0x132>
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	f000 8088 	beq.w	8000fce <HAL_GPIO_Init+0x15a>
 8000ebe:	2d01      	cmp	r5, #1
 8000ec0:	f000 8098 	beq.w	8000ff4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ec8:	2aff      	cmp	r2, #255	; 0xff
 8000eca:	bf93      	iteet	ls
 8000ecc:	4682      	movls	sl, r0
 8000ece:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000ed2:	3d08      	subhi	r5, #8
 8000ed4:	f8d0 b000 	ldrls.w	fp, [r0]
 8000ed8:	bf92      	itee	ls
 8000eda:	00b5      	lslls	r5, r6, #2
 8000edc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ee0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ee2:	fa09 f805 	lsl.w	r8, r9, r5
 8000ee6:	ea2b 0808 	bic.w	r8, fp, r8
 8000eea:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eee:	bf88      	it	hi
 8000ef0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ef4:	ea48 0505 	orr.w	r5, r8, r5
 8000ef8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f00:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f04:	d04d      	beq.n	8000fa2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f06:	4f44      	ldr	r7, [pc, #272]	; (8001018 <HAL_GPIO_Init+0x1a4>)
 8000f08:	f026 0803 	bic.w	r8, r6, #3
 8000f0c:	69bd      	ldr	r5, [r7, #24]
 8000f0e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f12:	f045 0501 	orr.w	r5, r5, #1
 8000f16:	61bd      	str	r5, [r7, #24]
 8000f18:	69bd      	ldr	r5, [r7, #24]
 8000f1a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000f1e:	f005 0501 	and.w	r5, r5, #1
 8000f22:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f24:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f28:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000f2e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f32:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f36:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3a:	4d38      	ldr	r5, [pc, #224]	; (800101c <HAL_GPIO_Init+0x1a8>)
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	d063      	beq.n	8001008 <HAL_GPIO_Init+0x194>
 8000f40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f44:	42a8      	cmp	r0, r5
 8000f46:	d061      	beq.n	800100c <HAL_GPIO_Init+0x198>
 8000f48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4c:	42a8      	cmp	r0, r5
 8000f4e:	d05f      	beq.n	8001010 <HAL_GPIO_Init+0x19c>
 8000f50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	bf0c      	ite	eq
 8000f58:	2503      	moveq	r5, #3
 8000f5a:	2504      	movne	r5, #4
 8000f5c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f60:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000f64:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f6e:	bf14      	ite	ne
 8000f70:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f72:	4395      	biceq	r5, r2
 8000f74:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000f76:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f78:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f7c:	bf14      	ite	ne
 8000f7e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f80:	4395      	biceq	r5, r2
 8000f82:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f84:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f86:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8a:	bf14      	ite	ne
 8000f8c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f8e:	4395      	biceq	r5, r2
 8000f90:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f92:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f94:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f98:	bf14      	ite	ne
 8000f9a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9c:	ea25 0202 	biceq.w	r2, r5, r2
 8000fa0:	60da      	str	r2, [r3, #12]
	position++;
 8000fa2:	3601      	adds	r6, #1
 8000fa4:	e76f      	b.n	8000e86 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000fa6:	2d03      	cmp	r5, #3
 8000fa8:	d022      	beq.n	8000ff0 <HAL_GPIO_Init+0x17c>
 8000faa:	2d11      	cmp	r5, #17
 8000fac:	d18a      	bne.n	8000ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fae:	68cc      	ldr	r4, [r1, #12]
 8000fb0:	3404      	adds	r4, #4
          break;
 8000fb2:	e787      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fb4:	4f1a      	ldr	r7, [pc, #104]	; (8001020 <HAL_GPIO_Init+0x1ac>)
 8000fb6:	42bd      	cmp	r5, r7
 8000fb8:	d009      	beq.n	8000fce <HAL_GPIO_Init+0x15a>
 8000fba:	d812      	bhi.n	8000fe2 <HAL_GPIO_Init+0x16e>
 8000fbc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800102c <HAL_GPIO_Init+0x1b8>
 8000fc0:	454d      	cmp	r5, r9
 8000fc2:	d004      	beq.n	8000fce <HAL_GPIO_Init+0x15a>
 8000fc4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000fc8:	454d      	cmp	r5, r9
 8000fca:	f47f af7b 	bne.w	8000ec4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fce:	688c      	ldr	r4, [r1, #8]
 8000fd0:	b1c4      	cbz	r4, 8001004 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000fd4:	bf0c      	ite	eq
 8000fd6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000fda:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fde:	2408      	movs	r4, #8
 8000fe0:	e770      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fe2:	4565      	cmp	r5, ip
 8000fe4:	d0f3      	beq.n	8000fce <HAL_GPIO_Init+0x15a>
 8000fe6:	4575      	cmp	r5, lr
 8000fe8:	d0f1      	beq.n	8000fce <HAL_GPIO_Init+0x15a>
 8000fea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001030 <HAL_GPIO_Init+0x1bc>
 8000fee:	e7eb      	b.n	8000fc8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	e767      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	68cc      	ldr	r4, [r1, #12]
          break;
 8000ff6:	e765      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ff8:	68cc      	ldr	r4, [r1, #12]
 8000ffa:	3408      	adds	r4, #8
          break;
 8000ffc:	e762      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ffe:	68cc      	ldr	r4, [r1, #12]
 8001000:	340c      	adds	r4, #12
          break;
 8001002:	e75f      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001004:	2404      	movs	r4, #4
 8001006:	e75d      	b.n	8000ec4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001008:	2500      	movs	r5, #0
 800100a:	e7a7      	b.n	8000f5c <HAL_GPIO_Init+0xe8>
 800100c:	2501      	movs	r5, #1
 800100e:	e7a5      	b.n	8000f5c <HAL_GPIO_Init+0xe8>
 8001010:	2502      	movs	r5, #2
 8001012:	e7a3      	b.n	8000f5c <HAL_GPIO_Init+0xe8>
 8001014:	40010400 	.word	0x40010400
 8001018:	40021000 	.word	0x40021000
 800101c:	40010800 	.word	0x40010800
 8001020:	10210000 	.word	0x10210000
 8001024:	10310000 	.word	0x10310000
 8001028:	10320000 	.word	0x10320000
 800102c:	10110000 	.word	0x10110000
 8001030:	10220000 	.word	0x10220000

08001034 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	b10a      	cbz	r2, 800103a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001036:	6101      	str	r1, [r0, #16]
  }
}
 8001038:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103a:	0409      	lsls	r1, r1, #16
 800103c:	e7fb      	b.n	8001036 <HAL_GPIO_WritePin+0x2>

0800103e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800103e:	6801      	ldr	r1, [r0, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	694b      	ldr	r3, [r1, #20]
 8001044:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001048:	d010      	beq.n	800106c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800104a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800104e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001050:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001052:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001054:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001058:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800105c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
 800106a:	4770      	bx	lr
  }
  return HAL_OK;
 800106c:	4618      	mov	r0, r3
}
 800106e:	4770      	bx	lr

08001070 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001074:	4604      	mov	r4, r0
 8001076:	4616      	mov	r6, r2
 8001078:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800107a:	b28f      	uxth	r7, r1
 800107c:	6825      	ldr	r5, [r4, #0]
 800107e:	6968      	ldr	r0, [r5, #20]
 8001080:	ea37 0000 	bics.w	r0, r7, r0
 8001084:	d017      	beq.n	80010b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001086:	696b      	ldr	r3, [r5, #20]
 8001088:	055a      	lsls	r2, r3, #21
 800108a:	d516      	bpl.n	80010ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800108c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800108e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001094:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001096:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800109a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010aa:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80010ae:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010b0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80010ba:	1c73      	adds	r3, r6, #1
 80010bc:	d0df      	beq.n	800107e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010be:	f7ff fd45 	bl	8000b4c <HAL_GetTick>
 80010c2:	eba0 0008 	sub.w	r0, r0, r8
 80010c6:	42b0      	cmp	r0, r6
 80010c8:	d801      	bhi.n	80010ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d1d6      	bne.n	800107c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010ce:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80010d0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80010d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	e7e4      	b.n	80010ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080010e4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	075b      	lsls	r3, r3, #29
 80010f2:	d501      	bpl.n	80010f8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80010f4:	2000      	movs	r0, #0
}
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff ffa0 	bl	800103e <I2C_IsAcknowledgeFailed>
 80010fe:	b9a8      	cbnz	r0, 800112c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001100:	1c6a      	adds	r2, r5, #1
 8001102:	d0f3      	beq.n	80010ec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001104:	f7ff fd22 	bl	8000b4c <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	42a8      	cmp	r0, r5
 800110c:	d801      	bhi.n	8001112 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800110e:	2d00      	cmp	r5, #0
 8001110:	d1ec      	bne.n	80010ec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001112:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001114:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001116:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001118:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800111c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001120:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
 800112e:	e7e2      	b.n	80010f6 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08001130 <I2C_WaitOnFlagUntilTimeout>:
{
 8001130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001134:	4604      	mov	r4, r0
 8001136:	4690      	mov	r8, r2
 8001138:	461f      	mov	r7, r3
 800113a:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800113c:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8001140:	b28d      	uxth	r5, r1
 8001142:	6821      	ldr	r1, [r4, #0]
 8001144:	f1b9 0f01 	cmp.w	r9, #1
 8001148:	bf0c      	ite	eq
 800114a:	694b      	ldreq	r3, [r1, #20]
 800114c:	698b      	ldrne	r3, [r1, #24]
 800114e:	ea35 0303 	bics.w	r3, r5, r3
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	4598      	cmp	r8, r3
 800115a:	d001      	beq.n	8001160 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800115c:	2000      	movs	r0, #0
 800115e:	e016      	b.n	800118e <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001160:	1c7b      	adds	r3, r7, #1
 8001162:	d0ef      	beq.n	8001144 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001164:	f7ff fcf2 	bl	8000b4c <HAL_GetTick>
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	42b8      	cmp	r0, r7
 800116c:	d801      	bhi.n	8001172 <I2C_WaitOnFlagUntilTimeout+0x42>
 800116e:	2f00      	cmp	r7, #0
 8001170:	d1e7      	bne.n	8001142 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001172:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001174:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001176:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001178:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800117a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800117e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001182:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001184:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	6422      	str	r2, [r4, #64]	; 0x40
}
 800118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001192 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001192:	b570      	push	{r4, r5, r6, lr}
 8001194:	4604      	mov	r4, r0
 8001196:	460d      	mov	r5, r1
 8001198:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	061b      	lsls	r3, r3, #24
 80011a0:	d501      	bpl.n	80011a6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80011a2:	2000      	movs	r0, #0
}
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80011a6:	4620      	mov	r0, r4
 80011a8:	f7ff ff49 	bl	800103e <I2C_IsAcknowledgeFailed>
 80011ac:	b9a8      	cbnz	r0, 80011da <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80011ae:	1c6a      	adds	r2, r5, #1
 80011b0:	d0f3      	beq.n	800119a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011b2:	f7ff fccb 	bl	8000b4c <HAL_GetTick>
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	42a8      	cmp	r0, r5
 80011ba:	d801      	bhi.n	80011c0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80011bc:	2d00      	cmp	r5, #0
 80011be:	d1ec      	bne.n	800119a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011c0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80011c2:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011c4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e7e2      	b.n	80011a4 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080011e0 <I2C_RequestMemoryWrite>:
{
 80011e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80011e4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011e6:	6802      	ldr	r2, [r0, #0]
{
 80011e8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011ea:	6813      	ldr	r3, [r2, #0]
{
 80011ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
{
 80011f4:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011f6:	9600      	str	r6, [sp, #0]
 80011f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011fa:	2200      	movs	r2, #0
 80011fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001200:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001202:	f7ff ff95 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 8001206:	b118      	cbz	r0, 8001210 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8001208:	2001      	movs	r0, #1
}
 800120a:	b004      	add	sp, #16
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001216:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800121a:	4633      	mov	r3, r6
 800121c:	4916      	ldr	r1, [pc, #88]	; (8001278 <I2C_RequestMemoryWrite+0x98>)
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff26 	bl	8001070 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1ef      	bne.n	8001208 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	9003      	str	r0, [sp, #12]
 800122c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800122e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001230:	9203      	str	r2, [sp, #12]
 8001232:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001234:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001236:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001238:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800123a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800123c:	f7ff ffa9 	bl	8001192 <I2C_WaitOnTXEFlagUntilTimeout>
 8001240:	b140      	cbz	r0, 8001254 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001244:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001246:	bf01      	itttt	eq
 8001248:	6822      	ldreq	r2, [r4, #0]
 800124a:	6813      	ldreq	r3, [r2, #0]
 800124c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001250:	6013      	streq	r3, [r2, #0]
 8001252:	e7d9      	b.n	8001208 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001254:	f1b8 0f01 	cmp.w	r8, #1
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	d102      	bne.n	8001262 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800125c:	b2ed      	uxtb	r5, r5
 800125e:	611d      	str	r5, [r3, #16]
 8001260:	e7d3      	b.n	800120a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001262:	0a2a      	lsrs	r2, r5, #8
 8001264:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001268:	4632      	mov	r2, r6
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ff91 	bl	8001192 <I2C_WaitOnTXEFlagUntilTimeout>
 8001270:	2800      	cmp	r0, #0
 8001272:	d1e6      	bne.n	8001242 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	e7f1      	b.n	800125c <I2C_RequestMemoryWrite+0x7c>
 8001278:	00010002 	.word	0x00010002

0800127c <HAL_I2C_Init>:
{
 800127c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800127e:	4604      	mov	r4, r0
 8001280:	b908      	cbnz	r0, 8001286 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
}
 8001284:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001286:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800128a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800128e:	b91b      	cbnz	r3, 8001298 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001290:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001294:	f001 fa0c 	bl	80026b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800129a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800129c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012a8:	f000 fb90 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	4a41      	ldr	r2, [pc, #260]	; (80013b4 <HAL_I2C_Init+0x138>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d84d      	bhi.n	8001350 <HAL_I2C_Init+0xd4>
 80012b4:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_I2C_Init+0x13c>)
 80012b6:	4290      	cmp	r0, r2
 80012b8:	d9e3      	bls.n	8001282 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80012ba:	4940      	ldr	r1, [pc, #256]	; (80013bc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012bc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012be:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c2:	6855      	ldr	r5, [r2, #4]
 80012c4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80012c8:	430d      	orrs	r5, r1
 80012ca:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012cc:	6a15      	ldr	r5, [r2, #32]
 80012ce:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80012d2:	3101      	adds	r1, #1
 80012d4:	4329      	orrs	r1, r5
 80012d6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012d8:	69d1      	ldr	r1, [r2, #28]
 80012da:	4d36      	ldr	r5, [pc, #216]	; (80013b4 <HAL_I2C_Init+0x138>)
 80012dc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80012e0:	42ab      	cmp	r3, r5
 80012e2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80012e6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80012ea:	d848      	bhi.n	800137e <HAL_I2C_Init+0x102>
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80012f2:	1c43      	adds	r3, r0, #1
 80012f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	bf38      	it	cc
 80012fc:	2304      	movcc	r3, #4
 80012fe:	430b      	orrs	r3, r1
 8001300:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001302:	6811      	ldr	r1, [r2, #0]
 8001304:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001308:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800130c:	4303      	orrs	r3, r0
 800130e:	430b      	orrs	r3, r1
 8001310:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001312:	6891      	ldr	r1, [r2, #8]
 8001314:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001318:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800131c:	4303      	orrs	r3, r0
 800131e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001322:	430b      	orrs	r3, r1
 8001324:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001326:	68d1      	ldr	r1, [r2, #12]
 8001328:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800132c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001330:	4303      	orrs	r3, r0
 8001332:	430b      	orrs	r3, r1
 8001334:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001336:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001340:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001342:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001344:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001348:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800134a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800134e:	e799      	b.n	8001284 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_I2C_Init+0x144>)
 8001352:	4290      	cmp	r0, r2
 8001354:	d995      	bls.n	8001282 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	4e19      	ldr	r6, [pc, #100]	; (80013bc <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001358:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800135c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001360:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001362:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001364:	6855      	ldr	r5, [r2, #4]
 8001366:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800136a:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001370:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001372:	6a15      	ldr	r5, [r2, #32]
 8001374:	fbb1 f1f6 	udiv	r1, r1, r6
 8001378:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800137c:	e7a9      	b.n	80012d2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800137e:	68a5      	ldr	r5, [r4, #8]
 8001380:	b955      	cbnz	r5, 8001398 <HAL_I2C_Init+0x11c>
 8001382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001386:	fbb0 f0f3 	udiv	r0, r0, r3
 800138a:	1c43      	adds	r3, r0, #1
 800138c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001390:	b16b      	cbz	r3, 80013ae <HAL_I2C_Init+0x132>
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	e7b2      	b.n	80012fe <HAL_I2C_Init+0x82>
 8001398:	2519      	movs	r5, #25
 800139a:	436b      	muls	r3, r5
 800139c:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a6:	b113      	cbz	r3, 80013ae <HAL_I2C_Init+0x132>
 80013a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ac:	e7a7      	b.n	80012fe <HAL_I2C_Init+0x82>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e7a5      	b.n	80012fe <HAL_I2C_Init+0x82>
 80013b2:	bf00      	nop
 80013b4:	000186a0 	.word	0x000186a0
 80013b8:	001e847f 	.word	0x001e847f
 80013bc:	000f4240 	.word	0x000f4240
 80013c0:	003d08ff 	.word	0x003d08ff

080013c4 <HAL_I2C_Mem_Write>:
{
 80013c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	4699      	mov	r9, r3
 80013cc:	460f      	mov	r7, r1
 80013ce:	4690      	mov	r8, r2
 80013d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80013d2:	f7ff fbbb 	bl	8000b4c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80013da:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d003      	beq.n	80013e8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80013e0:	2002      	movs	r0, #2
}
 80013e2:	b003      	add	sp, #12
 80013e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013e8:	9000      	str	r0, [sp, #0]
 80013ea:	2319      	movs	r3, #25
 80013ec:	2201      	movs	r2, #1
 80013ee:	493b      	ldr	r1, [pc, #236]	; (80014dc <HAL_I2C_Mem_Write+0x118>)
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fe9d 	bl	8001130 <I2C_WaitOnFlagUntilTimeout>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d1f2      	bne.n	80013e0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80013fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d0ee      	beq.n	80013e0 <HAL_I2C_Mem_Write+0x1c>
 8001402:	2301      	movs	r3, #1
 8001404:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001408:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800140a:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001410:	bf58      	it	pl
 8001412:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001414:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001416:	bf5c      	itt	pl
 8001418:	f042 0201 	orrpl.w	r2, r2, #1
 800141c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001424:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001426:	2321      	movs	r3, #33	; 0x21
 8001428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800142c:	2340      	movs	r3, #64	; 0x40
 800142e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001438:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 800143c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800143e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001442:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001444:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001448:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800144a:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_I2C_Mem_Write+0x11c>)
 800144c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800144e:	464b      	mov	r3, r9
 8001450:	f7ff fec6 	bl	80011e0 <I2C_RequestMemoryWrite>
 8001454:	2800      	cmp	r0, #0
 8001456:	d02a      	beq.n	80014ae <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001458:	2001      	movs	r0, #1
 800145a:	e7c2      	b.n	80013e2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800145c:	f7ff fe99 	bl	8001192 <I2C_WaitOnTXEFlagUntilTimeout>
 8001460:	b140      	cbz	r0, 8001474 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001464:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001466:	bf01      	itttt	eq
 8001468:	6822      	ldreq	r2, [r4, #0]
 800146a:	6813      	ldreq	r3, [r2, #0]
 800146c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001470:	6013      	streq	r3, [r2, #0]
 8001472:	e7f1      	b.n	8001458 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001476:	6827      	ldr	r7, [r4, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800147e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001480:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001482:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001484:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001486:	3a01      	subs	r2, #1
 8001488:	b292      	uxth	r2, r2
 800148a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800148c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800148e:	1e48      	subs	r0, r1, #1
 8001490:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001492:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001494:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001496:	d50a      	bpl.n	80014ae <HAL_I2C_Mem_Write+0xea>
 8001498:	b148      	cbz	r0, 80014ae <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800149a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 800149c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800149e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80014a0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80014a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80014a4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80014aa:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80014ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014b0:	462a      	mov	r2, r5
 80014b2:	4631      	mov	r1, r6
 80014b4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1d0      	bne.n	800145c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ba:	f7ff fe13 	bl	80010e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d1cf      	bne.n	8001462 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c2:	6822      	ldr	r2, [r4, #0]
 80014c4:	6813      	ldr	r3, [r2, #0]
 80014c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80014ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80014da:	e782      	b.n	80013e2 <HAL_I2C_Mem_Write+0x1e>
 80014dc:	00100002 	.word	0x00100002
 80014e0:	ffff0000 	.word	0xffff0000

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e8:	4605      	mov	r5, r0
 80014ea:	b908      	cbnz	r0, 80014f0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
 80014ee:	e03c      	b.n	800156a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	6803      	ldr	r3, [r0, #0]
 80014f2:	07db      	lsls	r3, r3, #31
 80014f4:	d410      	bmi.n	8001518 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	079f      	lsls	r7, r3, #30
 80014fa:	d45d      	bmi.n	80015b8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	0719      	lsls	r1, r3, #28
 8001500:	f100 8094 	bmi.w	800162c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	682b      	ldr	r3, [r5, #0]
 8001506:	075a      	lsls	r2, r3, #29
 8001508:	f100 80be 	bmi.w	8001688 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150c:	69e8      	ldr	r0, [r5, #28]
 800150e:	2800      	cmp	r0, #0
 8001510:	f040 812c 	bne.w	800176c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001514:	2000      	movs	r0, #0
 8001516:	e028      	b.n	800156a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001518:	4c8f      	ldr	r4, [pc, #572]	; (8001758 <HAL_RCC_OscConfig+0x274>)
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b04      	cmp	r3, #4
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001524:	6863      	ldr	r3, [r4, #4]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d109      	bne.n	8001542 <HAL_RCC_OscConfig+0x5e>
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	03de      	lsls	r6, r3, #15
 8001532:	d506      	bpl.n	8001542 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	6823      	ldr	r3, [r4, #0]
 8001536:	039c      	lsls	r4, r3, #14
 8001538:	d5dd      	bpl.n	80014f6 <HAL_RCC_OscConfig+0x12>
 800153a:	686b      	ldr	r3, [r5, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1da      	bne.n	80014f6 <HAL_RCC_OscConfig+0x12>
 8001540:	e7d4      	b.n	80014ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001542:	686b      	ldr	r3, [r5, #4]
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x8c>
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001552:	f7ff fafb 	bl	8000b4c <HAL_GetTick>
 8001556:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	0398      	lsls	r0, r3, #14
 800155c:	d4cb      	bmi.n	80014f6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff faf5 	bl	8000b4c <HAL_GetTick>
 8001562:	1b80      	subs	r0, r0, r6
 8001564:	2864      	cmp	r0, #100	; 0x64
 8001566:	d9f7      	bls.n	8001558 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
}
 800156a:	b002      	add	sp, #8
 800156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	b99b      	cbnz	r3, 800159a <HAL_RCC_OscConfig+0xb6>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff fae3 	bl	8000b4c <HAL_GetTick>
 8001586:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	0399      	lsls	r1, r3, #14
 800158c:	d5b3      	bpl.n	80014f6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff fadd 	bl	8000b4c <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	2864      	cmp	r0, #100	; 0x64
 8001596:	d9f7      	bls.n	8001588 <HAL_RCC_OscConfig+0xa4>
 8001598:	e7e6      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	d103      	bne.n	80015aa <HAL_RCC_OscConfig+0xc6>
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	e7cf      	b.n	800154a <HAL_RCC_OscConfig+0x66>
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	e7cb      	b.n	8001550 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b8:	4c67      	ldr	r4, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x274>)
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	f013 0f0c 	tst.w	r3, #12
 80015c0:	d007      	beq.n	80015d2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d110      	bne.n	80015ee <HAL_RCC_OscConfig+0x10a>
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	03da      	lsls	r2, r3, #15
 80015d0:	d40d      	bmi.n	80015ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	079b      	lsls	r3, r3, #30
 80015d6:	d502      	bpl.n	80015de <HAL_RCC_OscConfig+0xfa>
 80015d8:	692b      	ldr	r3, [r5, #16]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d186      	bne.n	80014ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	696a      	ldr	r2, [r5, #20]
 80015e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ea:	6023      	str	r3, [r4, #0]
 80015ec:	e786      	b.n	80014fc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ee:	692a      	ldr	r2, [r5, #16]
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x278>)
 80015f2:	b16a      	cbz	r2, 8001610 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f8:	f7ff faa8 	bl	8000b4c <HAL_GetTick>
 80015fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	079f      	lsls	r7, r3, #30
 8001602:	d4ec      	bmi.n	80015de <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001604:	f7ff faa2 	bl	8000b4c <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f7      	bls.n	80015fe <HAL_RCC_OscConfig+0x11a>
 800160e:	e7ab      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001612:	f7ff fa9b 	bl	8000b4c <HAL_GetTick>
 8001616:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	0798      	lsls	r0, r3, #30
 800161c:	f57f af6e 	bpl.w	80014fc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fa94 	bl	8000b4c <HAL_GetTick>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f6      	bls.n	8001618 <HAL_RCC_OscConfig+0x134>
 800162a:	e79d      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162c:	69aa      	ldr	r2, [r5, #24]
 800162e:	4c4a      	ldr	r4, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x274>)
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <HAL_RCC_OscConfig+0x27c>)
 8001632:	b1da      	cbz	r2, 800166c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001638:	f7ff fa88 	bl	8000b4c <HAL_GetTick>
 800163c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001640:	079b      	lsls	r3, r3, #30
 8001642:	d50d      	bpl.n	8001660 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001644:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x280>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001650:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001652:	bf00      	nop
  }
  while (Delay --);
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f9      	bne.n	8001652 <HAL_RCC_OscConfig+0x16e>
 800165e:	e751      	b.n	8001504 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fa74 	bl	8000b4c <HAL_GetTick>
 8001664:	1b80      	subs	r0, r0, r6
 8001666:	2802      	cmp	r0, #2
 8001668:	d9e9      	bls.n	800163e <HAL_RCC_OscConfig+0x15a>
 800166a:	e77d      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800166c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800166e:	f7ff fa6d 	bl	8000b4c <HAL_GetTick>
 8001672:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001676:	079f      	lsls	r7, r3, #30
 8001678:	f57f af44 	bpl.w	8001504 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fa66 	bl	8000b4c <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x190>
 8001686:	e76f      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4c33      	ldr	r4, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x274>)
 800168a:	69e3      	ldr	r3, [r4, #28]
 800168c:	00d8      	lsls	r0, r3, #3
 800168e:	d424      	bmi.n	80016da <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001690:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	69e3      	ldr	r3, [r4, #28]
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61e3      	str	r3, [r4, #28]
 800169a:	69e3      	ldr	r3, [r4, #28]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4e30      	ldr	r6, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x284>)
 80016a6:	6833      	ldr	r3, [r6, #0]
 80016a8:	05d9      	lsls	r1, r3, #23
 80016aa:	d518      	bpl.n	80016de <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	68eb      	ldr	r3, [r5, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d126      	bne.n	8001700 <HAL_RCC_OscConfig+0x21c>
 80016b2:	6a23      	ldr	r3, [r4, #32]
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa47 	bl	8000b4c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016c2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	6a23      	ldr	r3, [r4, #32]
 80016c6:	079b      	lsls	r3, r3, #30
 80016c8:	d53f      	bpl.n	800174a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80016ca:	2f00      	cmp	r7, #0
 80016cc:	f43f af1e 	beq.w	800150c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	69e3      	ldr	r3, [r4, #28]
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	61e3      	str	r3, [r4, #28]
 80016d8:	e718      	b.n	800150c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2700      	movs	r7, #0
 80016dc:	e7e2      	b.n	80016a4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa31 	bl	8000b4c <HAL_GetTick>
 80016ea:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	6833      	ldr	r3, [r6, #0]
 80016ee:	05da      	lsls	r2, r3, #23
 80016f0:	d4dc      	bmi.n	80016ac <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fa2b 	bl	8000b4c <HAL_GetTick>
 80016f6:	eba0 0008 	sub.w	r0, r0, r8
 80016fa:	2864      	cmp	r0, #100	; 0x64
 80016fc:	d9f6      	bls.n	80016ec <HAL_RCC_OscConfig+0x208>
 80016fe:	e733      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	b9ab      	cbnz	r3, 800172e <HAL_RCC_OscConfig+0x24a>
 8001702:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6223      	str	r3, [r4, #32]
 800170e:	6a23      	ldr	r3, [r4, #32]
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001716:	f7ff fa19 	bl	8000b4c <HAL_GetTick>
 800171a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	0798      	lsls	r0, r3, #30
 8001720:	d5d3      	bpl.n	80016ca <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fa13 	bl	8000b4c <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	4540      	cmp	r0, r8
 800172a:	d9f7      	bls.n	800171c <HAL_RCC_OscConfig+0x238>
 800172c:	e71c      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172e:	2b05      	cmp	r3, #5
 8001730:	6a23      	ldr	r3, [r4, #32]
 8001732:	d103      	bne.n	800173c <HAL_RCC_OscConfig+0x258>
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6223      	str	r3, [r4, #32]
 800173a:	e7ba      	b.n	80016b2 <HAL_RCC_OscConfig+0x1ce>
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6223      	str	r3, [r4, #32]
 8001742:	6a23      	ldr	r3, [r4, #32]
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	e7b6      	b.n	80016b8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f9ff 	bl	8000b4c <HAL_GetTick>
 800174e:	eba0 0008 	sub.w	r0, r0, r8
 8001752:	42b0      	cmp	r0, r6
 8001754:	d9b6      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1e0>
 8001756:	e707      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
 8001758:	40021000 	.word	0x40021000
 800175c:	42420000 	.word	0x42420000
 8001760:	42420480 	.word	0x42420480
 8001764:	20000010 	.word	0x20000010
 8001768:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x334>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	461c      	mov	r4, r3
 8001772:	f002 020c 	and.w	r2, r2, #12
 8001776:	2a08      	cmp	r2, #8
 8001778:	d03d      	beq.n	80017f6 <HAL_RCC_OscConfig+0x312>
 800177a:	2300      	movs	r3, #0
 800177c:	4e27      	ldr	r6, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001780:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001782:	d12b      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001784:	f7ff f9e2 	bl	8000b4c <HAL_GetTick>
 8001788:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	0199      	lsls	r1, r3, #6
 800178e:	d41f      	bmi.n	80017d0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001790:	6a2b      	ldr	r3, [r5, #32]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001798:	6862      	ldr	r2, [r4, #4]
 800179a:	68a9      	ldr	r1, [r5, #8]
 800179c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017a0:	430a      	orrs	r2, r1
 80017a2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017ae:	4313      	orrs	r3, r2
 80017b0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80017b2:	2301      	movs	r3, #1
 80017b4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80017b6:	f7ff f9c9 	bl	8000b4c <HAL_GetTick>
 80017ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	019a      	lsls	r2, r3, #6
 80017c0:	f53f aea8 	bmi.w	8001514 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f9c2 	bl	8000b4c <HAL_GetTick>
 80017c8:	1b40      	subs	r0, r0, r5
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9f6      	bls.n	80017bc <HAL_RCC_OscConfig+0x2d8>
 80017ce:	e6cb      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f9bc 	bl	8000b4c <HAL_GetTick>
 80017d4:	1bc0      	subs	r0, r0, r7
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d9d7      	bls.n	800178a <HAL_RCC_OscConfig+0x2a6>
 80017da:	e6c5      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9b6 	bl	8000b4c <HAL_GetTick>
 80017e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	f57f ae95 	bpl.w	8001514 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f9af 	bl	8000b4c <HAL_GetTick>
 80017ee:	1b40      	subs	r0, r0, r5
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9f6      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2fe>
 80017f4:	e6b8      	b.n	8001568 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	2801      	cmp	r0, #1
 80017f8:	f43f aeb7 	beq.w	800156a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80017fc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	6a2b      	ldr	r3, [r5, #32]
 8001800:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001804:	429a      	cmp	r2, r3
 8001806:	f47f ae71 	bne.w	80014ec <HAL_RCC_OscConfig+0x8>
 800180a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800180c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001810:	1ac0      	subs	r0, r0, r3
 8001812:	bf18      	it	ne
 8001814:	2001      	movne	r0, #1
 8001816:	e6a8      	b.n	800156a <HAL_RCC_OscConfig+0x86>
 8001818:	40021000 	.word	0x40021000
 800181c:	42420060 	.word	0x42420060

08001820 <HAL_RCC_GetSysClockFreq>:
{
 8001820:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001824:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001826:	ac02      	add	r4, sp, #8
 8001828:	f103 0510 	add.w	r5, r3, #16
 800182c:	4622      	mov	r2, r4
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	3308      	adds	r3, #8
 8001834:	c203      	stmia	r2!, {r0, r1}
 8001836:	42ab      	cmp	r3, r5
 8001838:	4614      	mov	r4, r2
 800183a:	d1f7      	bne.n	800182c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800183c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001840:	4911      	ldr	r1, [pc, #68]	; (8001888 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001842:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001846:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001848:	f003 020c 	and.w	r2, r3, #12
 800184c:	2a08      	cmp	r2, #8
 800184e:	d117      	bne.n	8001880 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001850:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001854:	a806      	add	r0, sp, #24
 8001856:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001858:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800185a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800185e:	d50c      	bpl.n	800187a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001860:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001862:	480a      	ldr	r0, [pc, #40]	; (800188c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001864:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001868:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800186a:	aa06      	add	r2, sp, #24
 800186c:	4413      	add	r3, r2
 800186e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001872:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001876:	b007      	add	sp, #28
 8001878:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_RCC_GetSysClockFreq+0x70>)
 800187c:	4350      	muls	r0, r2
 800187e:	e7fa      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001882:	e7f8      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x56>
 8001884:	080050f0 	.word	0x080050f0
 8001888:	40021000 	.word	0x40021000
 800188c:	007a1200 	.word	0x007a1200
 8001890:	003d0900 	.word	0x003d0900

08001894 <HAL_RCC_ClockConfig>:
{
 8001894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001898:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800189a:	4604      	mov	r4, r0
 800189c:	b910      	cbnz	r0, 80018a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
}
 80018a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_RCC_ClockConfig+0x124>)
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	428b      	cmp	r3, r1
 80018ae:	d328      	bcc.n	8001902 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b0:	6821      	ldr	r1, [r4, #0]
 80018b2:	078e      	lsls	r6, r1, #30
 80018b4:	d430      	bmi.n	8001918 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	07ca      	lsls	r2, r1, #31
 80018b8:	d443      	bmi.n	8001942 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ba:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <HAL_RCC_ClockConfig+0x124>)
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	42ab      	cmp	r3, r5
 80018c4:	d865      	bhi.n	8001992 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	4d3c      	ldr	r5, [pc, #240]	; (80019bc <HAL_RCC_ClockConfig+0x128>)
 80018ca:	f012 0f04 	tst.w	r2, #4
 80018ce:	d16c      	bne.n	80019aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	0713      	lsls	r3, r2, #28
 80018d2:	d506      	bpl.n	80018e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018d4:	686b      	ldr	r3, [r5, #4]
 80018d6:	6922      	ldr	r2, [r4, #16]
 80018d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80018dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f7ff ff9d 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80018e6:	686b      	ldr	r3, [r5, #4]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <HAL_RCC_ClockConfig+0x12c>)
 80018ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	40d8      	lsrs	r0, r3
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x130>)
 80018f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x134>)
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	f7ff f8e5 	bl	8000ac8 <HAL_InitTick>
  return HAL_OK;
 80018fe:	2000      	movs	r0, #0
 8001900:	e7ce      	b.n	80018a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	f023 0307 	bic.w	r3, r3, #7
 8001908:	430b      	orrs	r3, r1
 800190a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	428b      	cmp	r3, r1
 8001914:	d1c3      	bne.n	800189e <HAL_RCC_ClockConfig+0xa>
 8001916:	e7cb      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1c>
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191e:	bf1e      	ittt	ne
 8001920:	685a      	ldrne	r2, [r3, #4]
 8001922:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001926:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192a:	bf42      	ittt	mi
 800192c:	685a      	ldrmi	r2, [r3, #4]
 800192e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001932:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68a0      	ldr	r0, [r4, #8]
 8001938:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800193c:	4302      	orrs	r2, r0
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	e7b9      	b.n	80018b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	6862      	ldr	r2, [r4, #4]
 8001944:	4e1d      	ldr	r6, [pc, #116]	; (80019bc <HAL_RCC_ClockConfig+0x128>)
 8001946:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001948:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	d11a      	bne.n	8001982 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	d0a5      	beq.n	800189e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	4313      	orrs	r3, r2
 800195e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001960:	f7ff f8f4 	bl	8000b4c <HAL_GetTick>
 8001964:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	6873      	ldr	r3, [r6, #4]
 8001968:	6862      	ldr	r2, [r4, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001972:	d0a2      	beq.n	80018ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f8ea 	bl	8000b4c <HAL_GetTick>
 8001978:	1bc0      	subs	r0, r0, r7
 800197a:	4540      	cmp	r0, r8
 800197c:	d9f3      	bls.n	8001966 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800197e:	2003      	movs	r0, #3
 8001980:	e78e      	b.n	80018a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	2a02      	cmp	r2, #2
 8001984:	d102      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198a:	e7e1      	b.n	8001950 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	f013 0f02 	tst.w	r3, #2
 8001990:	e7de      	b.n	8001950 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	6813      	ldr	r3, [r2, #0]
 8001994:	f023 0307 	bic.w	r3, r3, #7
 8001998:	432b      	orrs	r3, r5
 800199a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199c:	6813      	ldr	r3, [r2, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	42ab      	cmp	r3, r5
 80019a4:	f47f af7b 	bne.w	800189e <HAL_RCC_ClockConfig+0xa>
 80019a8:	e78d      	b.n	80018c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019aa:	686b      	ldr	r3, [r5, #4]
 80019ac:	68e1      	ldr	r1, [r4, #12]
 80019ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019b2:	430b      	orrs	r3, r1
 80019b4:	606b      	str	r3, [r5, #4]
 80019b6:	e78b      	b.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	080057da 	.word	0x080057da
 80019c4:	20000010 	.word	0x20000010
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80019da:	6810      	ldr	r0, [r2, #0]
}
 80019dc:	40d8      	lsrs	r0, r3
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	080057ea 	.word	0x080057ea
 80019e8:	20000010 	.word	0x20000010

080019ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x18>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019fa:	6810      	ldr	r0, [r2, #0]
}
 80019fc:	40d8      	lsrs	r0, r3
 80019fe:	4770      	bx	lr
 8001a00:	40021000 	.word	0x40021000
 8001a04:	080057ea 	.word	0x080057ea
 8001a08:	20000010 	.word	0x20000010

08001a0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a0c:	6803      	ldr	r3, [r0, #0]
{
 8001a0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a12:	07d9      	lsls	r1, r3, #31
{
 8001a14:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a16:	d520      	bpl.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a18:	4c35      	ldr	r4, [pc, #212]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a1a:	69e3      	ldr	r3, [r4, #28]
 8001a1c:	00da      	lsls	r2, r3, #3
 8001a1e:	d432      	bmi.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001a20:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	69e3      	ldr	r3, [r4, #28]
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	61e3      	str	r3, [r4, #28]
 8001a2a:	69e3      	ldr	r3, [r4, #28]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4e2f      	ldr	r6, [pc, #188]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001a36:	6833      	ldr	r3, [r6, #0]
 8001a38:	05db      	lsls	r3, r3, #23
 8001a3a:	d526      	bpl.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a3c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a3e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a42:	d136      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a44:	6a23      	ldr	r3, [r4, #32]
 8001a46:	686a      	ldr	r2, [r5, #4]
 8001a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	b11f      	cbz	r7, 8001a5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a52:	69e3      	ldr	r3, [r4, #28]
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a5a:	6828      	ldr	r0, [r5, #0]
 8001a5c:	0783      	lsls	r3, r0, #30
 8001a5e:	d506      	bpl.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a60:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a62:	68a9      	ldr	r1, [r5, #8]
 8001a64:	6853      	ldr	r3, [r2, #4]
 8001a66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a6e:	f010 0010 	ands.w	r0, r0, #16
 8001a72:	d01b      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a74:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a76:	68e9      	ldr	r1, [r5, #12]
 8001a78:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a7a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6053      	str	r3, [r2, #4]
 8001a84:	e012      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2700      	movs	r7, #0
 8001a88:	e7d4      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a8a:	6833      	ldr	r3, [r6, #0]
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a92:	f7ff f85b 	bl	8000b4c <HAL_GetTick>
 8001a96:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	6833      	ldr	r3, [r6, #0]
 8001a9a:	05d8      	lsls	r0, r3, #23
 8001a9c:	d4ce      	bmi.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9e:	f7ff f855 	bl	8000b4c <HAL_GetTick>
 8001aa2:	eba0 0008 	sub.w	r0, r0, r8
 8001aa6:	2864      	cmp	r0, #100	; 0x64
 8001aa8:	d9f6      	bls.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001aaa:	2003      	movs	r0, #3
}
 8001aac:	b002      	add	sp, #8
 8001aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ab2:	686a      	ldr	r2, [r5, #4]
 8001ab4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d0c3      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001abc:	2001      	movs	r0, #1
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aca:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001acc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ace:	07d9      	lsls	r1, r3, #31
 8001ad0:	d5b8      	bpl.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f83b 	bl	8000b4c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ada:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	6a23      	ldr	r3, [r4, #32]
 8001ade:	079a      	lsls	r2, r3, #30
 8001ae0:	d4b0      	bmi.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff f833 	bl	8000b4c <HAL_GetTick>
 8001ae6:	1b80      	subs	r0, r0, r6
 8001ae8:	4540      	cmp	r0, r8
 8001aea:	d9f7      	bls.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001aec:	e7dd      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	42420440 	.word	0x42420440

08001afc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001afc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001afe:	4604      	mov	r4, r0
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d034      	beq.n	8001b6e <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b08:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001b0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b10:	b91b      	cbnz	r3, 8001b1a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b12:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b16:	f000 fe07 	bl	8002728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b1a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b1c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001b22:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b24:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b2a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b2c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001b30:	4303      	orrs	r3, r0
 8001b32:	68e0      	ldr	r0, [r4, #12]
 8001b34:	4303      	orrs	r3, r0
 8001b36:	6920      	ldr	r0, [r4, #16]
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	6960      	ldr	r0, [r4, #20]
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	69e0      	ldr	r0, [r4, #28]
 8001b40:	4303      	orrs	r3, r0
 8001b42:	6a20      	ldr	r0, [r4, #32]
 8001b44:	4303      	orrs	r3, r0
 8001b46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b4e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b50:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b52:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b56:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b58:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b5a:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b5c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b62:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001b64:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b66:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8001b6c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e7fc      	b.n	8001b6c <HAL_SPI_Init+0x70>
	...

08001b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	68c1      	ldr	r1, [r0, #12]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	2419      	movs	r4, #25
 8001b80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b84:	430a      	orrs	r2, r1
 8001b86:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b88:	6882      	ldr	r2, [r0, #8]
 8001b8a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001b8c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001b92:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001b96:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b9a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	69a9      	ldr	r1, [r5, #24]
 8001ba4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <UART_SetConfig+0x70>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d114      	bne.n	8001bdc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bb2:	f7ff ff1b 	bl	80019ec <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bb6:	4360      	muls	r0, r4
 8001bb8:	686c      	ldr	r4, [r5, #4]
 8001bba:	2264      	movs	r2, #100	; 0x64
 8001bbc:	00a4      	lsls	r4, r4, #2
 8001bbe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001bc2:	fbb0 f1f2 	udiv	r1, r0, r2
 8001bc6:	fb02 0311 	mls	r3, r2, r1, r0
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	3332      	adds	r3, #50	; 0x32
 8001bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bd2:	682c      	ldr	r4, [r5, #0]
 8001bd4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001bd8:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bdc:	f7ff fef6 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 8001be0:	e7e9      	b.n	8001bb6 <UART_SetConfig+0x42>
 8001be2:	bf00      	nop
 8001be4:	40013800 	.word	0x40013800

08001be8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	4604      	mov	r4, r0
 8001bec:	460e      	mov	r6, r1
 8001bee:	4617      	mov	r7, r2
 8001bf0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf2:	6821      	ldr	r1, [r4, #0]
 8001bf4:	680b      	ldr	r3, [r1, #0]
 8001bf6:	ea36 0303 	bics.w	r3, r6, r3
 8001bfa:	d101      	bne.n	8001c00 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	e014      	b.n	8001c2a <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001c00:	1c6b      	adds	r3, r5, #1
 8001c02:	d0f7      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c04:	b995      	cbnz	r5, 8001c2c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c06:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001c08:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c20:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c2c:	f7fe ff8e 	bl	8000b4c <HAL_GetTick>
 8001c30:	1bc0      	subs	r0, r0, r7
 8001c32:	4285      	cmp	r5, r0
 8001c34:	d2dd      	bcs.n	8001bf2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c36:	e7e6      	b.n	8001c06 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c38 <HAL_UART_Init>:
{
 8001c38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	b340      	cbz	r0, 8001c90 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c46:	b91b      	cbnz	r3, 8001c50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c4c:	f000 fdc6 	bl	80027dc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001c52:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c58:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c5a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c60:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c62:	f7ff ff87 	bl	8001b74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c66:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c68:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c80:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001c82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c84:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c8a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
 8001c92:	e7fc      	b.n	8001c8e <HAL_UART_Init+0x56>

08001c94 <HAL_UART_Transmit>:
{
 8001c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c98:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001c9e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca0:	2b20      	cmp	r3, #32
{
 8001ca2:	460d      	mov	r5, r1
 8001ca4:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ca6:	d14c      	bne.n	8001d42 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8001ca8:	2900      	cmp	r1, #0
 8001caa:	d048      	beq.n	8001d3e <HAL_UART_Transmit+0xaa>
 8001cac:	2a00      	cmp	r2, #0
 8001cae:	d046      	beq.n	8001d3e <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001cb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d044      	beq.n	8001d42 <HAL_UART_Transmit+0xae>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cc2:	2321      	movs	r3, #33	; 0x21
 8001cc4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cc8:	f7fe ff40 	bl	8000b4c <HAL_GetTick>
 8001ccc:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001cce:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cd2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cd6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b963      	cbnz	r3, 8001cf6 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4632      	mov	r2, r6
 8001ce0:	2140      	movs	r1, #64	; 0x40
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff ff80 	bl	8001be8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ce8:	b9a0      	cbnz	r0, 8001d14 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001cea:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001cec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001cf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001cf4:	e00f      	b.n	8001d16 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001cf6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf8:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d00:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d08:	4620      	mov	r0, r4
 8001d0a:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d0c:	d10e      	bne.n	8001d2c <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d0e:	f7ff ff6b 	bl	8001be8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d12:	b110      	cbz	r0, 8001d1a <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8001d14:	2003      	movs	r0, #3
}
 8001d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d1a:	882b      	ldrh	r3, [r5, #0]
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d22:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d24:	6923      	ldr	r3, [r4, #16]
 8001d26:	b943      	cbnz	r3, 8001d3a <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8001d28:	3502      	adds	r5, #2
 8001d2a:	e7d4      	b.n	8001cd6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d2c:	f7ff ff5c 	bl	8001be8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d1ef      	bne.n	8001d14 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	782a      	ldrb	r2, [r5, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	3501      	adds	r5, #1
 8001d3c:	e7cb      	b.n	8001cd6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	e7e9      	b.n	8001d16 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001d42:	2002      	movs	r0, #2
 8001d44:	e7e7      	b.n	8001d16 <HAL_UART_Transmit+0x82>

08001d46 <loop>:
/*  w formacie SSSS/DDDD/WWWW/PPPP zwraca   */
/*  wartosc zwracana przez funkcje pritf.    */
int writeUART(float latitude, float longitude, float altitude, float velocity);

void loop() {
	HAL_Delay(100);
 8001d46:	2064      	movs	r0, #100	; 0x64
 8001d48:	f7fe bf06 	b.w	8000b58 <HAL_Delay>

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	2414      	movs	r4, #20
{
 8001d50:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	4622      	mov	r2, r4
 8001d54:	2100      	movs	r1, #0
 8001d56:	a80c      	add	r0, sp, #48	; 0x30
 8001d58:	f000 fe39 	bl	80029ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	eb0d 0004 	add.w	r0, sp, r4
 8001d62:	2100      	movs	r1, #0
 8001d64:	f000 fe33 	bl	80029ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	a801      	add	r0, sp, #4
 8001d6e:	f000 fe2e 	bl	80029ce <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d72:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d7e:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d82:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d86:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d88:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d8a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	f7ff fbaa 	bl	80014e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d96:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da6:	f7ff fd75 	bl	8001894 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dae:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001db0:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001db2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db4:	f7ff fe2a 	bl	8001a0c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001db8:	b014      	add	sp, #80	; 0x50
 8001dba:	bd10      	pop	{r4, pc}

08001dbc <LED_blink>:

}

/* USER CODE BEGIN 4 */

void LED_blink(int blink_times, int time){
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	4607      	mov	r7, r0
 8001dc0:	460d      	mov	r5, r1

    for(int i = 0; i < blink_times; i++){
 8001dc2:	2400      	movs	r4, #0
        //blue pill set-wyłączona, reset-włączona
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001dc4:	4e0e      	ldr	r6, [pc, #56]	; (8001e00 <LED_blink+0x44>)
    for(int i = 0; i < blink_times; i++){
 8001dc6:	42bc      	cmp	r4, r7
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001dc8:	f04f 0201 	mov.w	r2, #1
 8001dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    for(int i = 0; i < blink_times; i++){
 8001dd0:	db04      	blt.n	8001ddc <LED_blink+0x20>
        HAL_Delay(time);
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8001dd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001dd6:	480a      	ldr	r0, [pc, #40]	; (8001e00 <LED_blink+0x44>)
 8001dd8:	f7ff b92c 	b.w	8001034 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7ff f929 	bl	8001034 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 8001de2:	4628      	mov	r0, r5
 8001de4:	f7fe feb8 	bl	8000b58 <HAL_Delay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff f920 	bl	8001034 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 8001df4:	4628      	mov	r0, r5
 8001df6:	f7fe feaf 	bl	8000b58 <HAL_Delay>
    for(int i = 0; i < blink_times; i++){
 8001dfa:	3401      	adds	r4, #1
 8001dfc:	e7e3      	b.n	8001dc6 <LED_blink+0xa>
 8001dfe:	bf00      	nop
 8001e00:	40011000 	.word	0x40011000

08001e04 <Beep>:

void Beep(int time_delay){
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001e08:	4c07      	ldr	r4, [pc, #28]	; (8001e28 <Beep+0x24>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f7ff f910 	bl	8001034 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7fe fe9f 	bl	8000b58 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e1a:	4620      	mov	r0, r4
}
 8001e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2102      	movs	r1, #2
 8001e24:	f7ff b906 	b.w	8001034 <HAL_GPIO_WritePin>
 8001e28:	40010800 	.word	0x40010800

08001e2c <_write>:

int _write(int file, char *ptr, int len){
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8001e30:	2332      	movs	r3, #50	; 0x32
 8001e32:	b292      	uxth	r2, r2
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <_write+0x14>)
 8001e36:	f7ff ff2d 	bl	8001c94 <HAL_UART_Transmit>
    return len;
}
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000073c 	.word	0x2000073c

08001e44 <writeUART>:

int writeUART(float latitude, float longitude, float altitude, float velocity){
 8001e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	4617      	mov	r7, r2
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	460e      	mov	r6, r1
    return printf("%f/%f/%f/%f\n\r", latitude, longitude, altitude, velocity);
 8001e50:	f7fe faea 	bl	8000428 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	4640      	mov	r0, r8
 8001e58:	460d      	mov	r5, r1
 8001e5a:	f7fe fae5 	bl	8000428 <__aeabi_f2d>
 8001e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e62:	4638      	mov	r0, r7
 8001e64:	f7fe fae0 	bl	8000428 <__aeabi_f2d>
 8001e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f7fe fadb 	bl	8000428 <__aeabi_f2d>
 8001e72:	4622      	mov	r2, r4
 8001e74:	e9cd 0100 	strd	r0, r1, [sp]
 8001e78:	462b      	mov	r3, r5
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <writeUART+0x44>)
 8001e7c:	f001 f9fe 	bl	800327c <iprintf>
}
 8001e80:	b006      	add	sp, #24
 8001e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e86:	bf00      	nop
 8001e88:	08005158 	.word	0x08005158

08001e8c <main>:
{
 8001e8c:	b500      	push	{lr}
 8001e8e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001e90:	f7fe fe3e 	bl	8000b10 <HAL_Init>
  SystemClock_Config();
 8001e94:	f7ff ff5a 	bl	8001d4c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	2210      	movs	r2, #16
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	eb0d 0002 	add.w	r0, sp, r2
 8001ea0:	f000 fd95 	bl	80029ce <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea4:	4b70      	ldr	r3, [pc, #448]	; (8002068 <main+0x1dc>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001eac:	486f      	ldr	r0, [pc, #444]	; (800206c <main+0x1e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eae:	f042 0210 	orr.w	r2, r2, #16
 8001eb2:	619a      	str	r2, [r3, #24]
 8001eb4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	f002 0210 	and.w	r2, r2, #16
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ece:	f002 0220 	and.w	r2, r2, #32
 8001ed2:	9201      	str	r2, [sp, #4]
 8001ed4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	f042 0204 	orr.w	r2, r2, #4
 8001edc:	619a      	str	r2, [r3, #24]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	f002 0204 	and.w	r2, r2, #4
 8001ee4:	9202      	str	r2, [sp, #8]
 8001ee6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	9303      	str	r3, [sp, #12]
 8001efa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001efc:	f7ff f89a 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2102      	movs	r1, #2
 8001f04:	485a      	ldr	r0, [pc, #360]	; (8002070 <main+0x1e4>)
 8001f06:	f7ff f895 	bl	8001034 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|DO_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f241 0181 	movw	r1, #4225	; 0x1081
 8001f10:	4858      	ldr	r0, [pc, #352]	; (8002074 <main+0x1e8>)
 8001f12:	f7ff f88f 	bl	8001034 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	a904      	add	r1, sp, #16
 8001f1c:	4853      	ldr	r0, [pc, #332]	; (800206c <main+0x1e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f7fe ffa5 	bl	8000e74 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	a904      	add	r1, sp, #16
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f7fe ff9d 	bl	8000e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|DO_RF_Pin|D_C_Pin;
 8001f3a:	f241 0381 	movw	r3, #4225	; 0x1081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	a904      	add	r1, sp, #16
 8001f40:	484c      	ldr	r0, [pc, #304]	; (8002074 <main+0x1e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f7fe ff93 	bl	8000e74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FIRE_Pin;
 8001f4e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8001f50:	a904      	add	r1, sp, #16
 8001f52:	4848      	ldr	r0, [pc, #288]	; (8002074 <main+0x1e8>)
  hadc1.Instance = ADC1;
 8001f54:	4d48      	ldr	r5, [pc, #288]	; (8002078 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f56:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f7fe ff8a 	bl	8000e74 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <main+0x1f0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f62:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8001f64:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f66:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f6a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f6c:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f6e:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f70:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f72:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f74:	612e      	str	r6, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f76:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f7a:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7c:	f7fe fe9e 	bl	8000cbc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	a904      	add	r1, sp, #16
 8001f82:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f84:	e9cd 4604 	strd	r4, r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f88:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f8a:	f7fe fdf7 	bl	8000b7c <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8001f8e:	483c      	ldr	r0, [pc, #240]	; (8002080 <main+0x1f4>)
  hi2c1.Init.ClockSpeed = 100000;
 8001f90:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <main+0x1f8>)
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <main+0x1fc>)
  hi2c1.Init.OwnAddress1 = 0;
 8001f94:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001f98:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa4:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa8:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001faa:	f7ff f967 	bl	800127c <HAL_I2C_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fae:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001fb2:	4836      	ldr	r0, [pc, #216]	; (800208c <main+0x200>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb4:	4936      	ldr	r1, [pc, #216]	; (8002090 <main+0x204>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fb6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fba:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001fc4:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fca:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fd6:	f7ff fd91 	bl	8001afc <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8001fda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001fde:	482d      	ldr	r0, [pc, #180]	; (8002094 <main+0x208>)
  huart2.Init.BaudRate = 115200;
 8001fe0:	4e2d      	ldr	r6, [pc, #180]	; (8002098 <main+0x20c>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001fe6:	e9c0 6300 	strd	r6, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fea:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fec:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff4:	f7ff fe20 	bl	8001c38 <HAL_UART_Init>
  ssd1306_Init();
 8001ff8:	f000 f992 	bl	8002320 <ssd1306_Init>
	printf("Odbiornik/nadajnik radia LoRa\r\n");
 8001ffc:	4827      	ldr	r0, [pc, #156]	; (800209c <main+0x210>)
 8001ffe:	f001 f9b1 	bl	8003364 <puts>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 8002002:	4e27      	ldr	r6, [pc, #156]	; (80020a0 <main+0x214>)
 8002004:	4d27      	ldr	r5, [pc, #156]	; (80020a4 <main+0x218>)
 8002006:	4c28      	ldr	r4, [pc, #160]	; (80020a8 <main+0x21c>)
	    loop();
 8002008:	f7ff fe9d 	bl	8001d46 <loop>
		printf("Test przesylu danych UART: \r\n");
 800200c:	4827      	ldr	r0, [pc, #156]	; (80020ac <main+0x220>)
 800200e:	f001 f9a9 	bl	8003364 <puts>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 8002012:	4633      	mov	r3, r6
 8002014:	462a      	mov	r2, r5
 8002016:	4621      	mov	r1, r4
 8002018:	4825      	ldr	r0, [pc, #148]	; (80020b0 <main+0x224>)
 800201a:	f7ff ff13 	bl	8001e44 <writeUART>
		ssd1306_Print((float)51.12, (float)17.12, (float)360.12, (float)150.1);
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <main+0x228>)
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <main+0x22c>)
 8002022:	4926      	ldr	r1, [pc, #152]	; (80020bc <main+0x230>)
 8002024:	4826      	ldr	r0, [pc, #152]	; (80020c0 <main+0x234>)
 8002026:	f000 fa67 	bl	80024f8 <ssd1306_Print>
		printf("Test LED: \r\n");
 800202a:	4826      	ldr	r0, [pc, #152]	; (80020c4 <main+0x238>)
 800202c:	f001 f99a 	bl	8003364 <puts>
		LED_blink(10, 100);
 8002030:	2164      	movs	r1, #100	; 0x64
 8002032:	200a      	movs	r0, #10
 8002034:	f7ff fec2 	bl	8001dbc <LED_blink>
		printf("Test buzzera: \r\n");
 8002038:	4823      	ldr	r0, [pc, #140]	; (80020c8 <main+0x23c>)
 800203a:	f001 f993 	bl	8003364 <puts>
		Beep(100);
 800203e:	2064      	movs	r0, #100	; 0x64
 8002040:	f7ff fee0 	bl	8001e04 <Beep>
		HAL_Delay(200);
 8002044:	20c8      	movs	r0, #200	; 0xc8
 8002046:	f7fe fd87 	bl	8000b58 <HAL_Delay>
		Beep(200);
 800204a:	20c8      	movs	r0, #200	; 0xc8
 800204c:	f7ff feda 	bl	8001e04 <Beep>
		HAL_Delay(200);
 8002050:	20c8      	movs	r0, #200	; 0xc8
 8002052:	f7fe fd81 	bl	8000b58 <HAL_Delay>
		Beep(1000);
 8002056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800205a:	f7ff fed3 	bl	8001e04 <Beep>
		HAL_Delay(200);
 800205e:	20c8      	movs	r0, #200	; 0xc8
 8002060:	f7fe fd7a 	bl	8000b58 <HAL_Delay>
 8002064:	e7d0      	b.n	8002008 <main+0x17c>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40011000 	.word	0x40011000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	20000674 	.word	0x20000674
 800207c:	40012400 	.word	0x40012400
 8002080:	2000061c 	.word	0x2000061c
 8002084:	40005400 	.word	0x40005400
 8002088:	000186a0 	.word	0x000186a0
 800208c:	200006e4 	.word	0x200006e4
 8002090:	40013000 	.word	0x40013000
 8002094:	2000073c 	.word	0x2000073c
 8002098:	40004400 	.word	0x40004400
 800209c:	08005100 	.word	0x08005100
 80020a0:	43161f9b 	.word	0x43161f9b
 80020a4:	43b40fcd 	.word	0x43b40fcd
 80020a8:	4188fcd6 	.word	0x4188fcd6
 80020ac:	0800511f 	.word	0x0800511f
 80020b0:	424c7e6b 	.word	0x424c7e6b
 80020b4:	4316199a 	.word	0x4316199a
 80020b8:	43b40f5c 	.word	0x43b40f5c
 80020bc:	4188f5c3 	.word	0x4188f5c3
 80020c0:	424c7ae1 	.word	0x424c7ae1
 80020c4:	0800513c 	.word	0x0800513c
 80020c8:	08005148 	.word	0x08005148
 80020cc:	00000000 	.word	0x00000000

080020d0 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 80020d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d4:	461c      	mov	r4, r3
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80020d6:	2c0a      	cmp	r4, #10
{
 80020d8:	4692      	mov	sl, r2
 80020da:	4607      	mov	r7, r0
 80020dc:	460e      	mov	r6, r1
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
	if (precision > MAX_PRECISION)
 80020e6:	f300 80b1 	bgt.w	800224c <ftoa+0x17c>
	if (f < 0)
 80020ea:	f7fe fc67 	bl	80009bc <__aeabi_dcmplt>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d063      	beq.n	80021ba <ftoa+0xea>
	{
		f = -f;
		*ptr++ = '-';
 80020f2:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 80020f4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 80020f8:	f10a 0801 	add.w	r8, sl, #1
 80020fc:	f88a 3000 	strb.w	r3, [sl]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8002100:	2c00      	cmp	r4, #0
 8002102:	da5c      	bge.n	80021be <ftoa+0xee>
	{
		if (f < 1.0) precision = 6;
 8002104:	2200      	movs	r2, #0
 8002106:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <ftoa+0x1a0>)
 8002108:	4638      	mov	r0, r7
 800210a:	4631      	mov	r1, r6
 800210c:	f7fe fc56 	bl	80009bc <__aeabi_dcmplt>
 8002110:	2800      	cmp	r0, #0
 8002112:	d161      	bne.n	80021d8 <ftoa+0x108>
		else if (f < 10.0) precision = 5;
 8002114:	2200      	movs	r2, #0
 8002116:	4b57      	ldr	r3, [pc, #348]	; (8002274 <ftoa+0x1a4>)
 8002118:	4638      	mov	r0, r7
 800211a:	4631      	mov	r1, r6
 800211c:	f7fe fc4e 	bl	80009bc <__aeabi_dcmplt>
 8002120:	2800      	cmp	r0, #0
 8002122:	d15b      	bne.n	80021dc <ftoa+0x10c>
		else if (f < 100.0) precision = 4;
 8002124:	2200      	movs	r2, #0
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <ftoa+0x1a8>)
 8002128:	4638      	mov	r0, r7
 800212a:	4631      	mov	r1, r6
 800212c:	f7fe fc46 	bl	80009bc <__aeabi_dcmplt>
 8002130:	2800      	cmp	r0, #0
 8002132:	d155      	bne.n	80021e0 <ftoa+0x110>
		else if (f < 1000.0) precision = 3;
 8002134:	2200      	movs	r2, #0
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <ftoa+0x1ac>)
 8002138:	4638      	mov	r0, r7
 800213a:	4631      	mov	r1, r6
 800213c:	f7fe fc3e 	bl	80009bc <__aeabi_dcmplt>
 8002140:	2800      	cmp	r0, #0
 8002142:	d14f      	bne.n	80021e4 <ftoa+0x114>
		else if (f < 10000.0) precision = 2;
 8002144:	a346      	add	r3, pc, #280	; (adr r3, 8002260 <ftoa+0x190>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	4638      	mov	r0, r7
 800214c:	4631      	mov	r1, r6
 800214e:	f7fe fc35 	bl	80009bc <__aeabi_dcmplt>
 8002152:	2800      	cmp	r0, #0
 8002154:	d148      	bne.n	80021e8 <ftoa+0x118>
		else if (f < 100000.0) precision = 1;
 8002156:	a344      	add	r3, pc, #272	; (adr r3, 8002268 <ftoa+0x198>)
 8002158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215c:	4638      	mov	r0, r7
 800215e:	4631      	mov	r1, r6
 8002160:	f7fe fc2c 	bl	80009bc <__aeabi_dcmplt>
 8002164:	2800      	cmp	r0, #0
 8002166:	d141      	bne.n	80021ec <ftoa+0x11c>
		else precision = 0;
 8002168:	4604      	mov	r4, r0
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 800216a:	4638      	mov	r0, r7
 800216c:	4631      	mov	r1, r6
 800216e:	f7fe fc63 	bl	8000a38 <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 8002172:	2800      	cmp	r0, #0
 8002174:	d13c      	bne.n	80021f0 <ftoa+0x120>
		*ptr++ = '0';
 8002176:	2330      	movs	r3, #48	; 0x30
 8002178:	f108 0501 	add.w	r5, r8, #1
 800217c:	f888 3000 	strb.w	r3, [r8]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8002180:	b19c      	cbz	r4, 80021aa <ftoa+0xda>
	f -= intPart;
 8002182:	f7fe f93f 	bl	8000404 <__aeabi_i2d>
 8002186:	460b      	mov	r3, r1
 8002188:	4602      	mov	r2, r0
 800218a:	4631      	mov	r1, r6
 800218c:	4638      	mov	r0, r7
 800218e:	f7fd ffeb 	bl	8000168 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 8002192:	232e      	movs	r3, #46	; 0x2e
 8002194:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 8002196:	2600      	movs	r6, #0
		*ptr++ = '.';
 8002198:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 800219a:	4f36      	ldr	r7, [pc, #216]	; (8002274 <ftoa+0x1a4>)
 800219c:	192b      	adds	r3, r5, r4
 800219e:	9301      	str	r3, [sp, #4]
		while (precision--)
 80021a0:	9b01      	ldr	r3, [sp, #4]
 80021a2:	455b      	cmp	r3, fp
 80021a4:	d13c      	bne.n	8002220 <ftoa+0x150>
 80021a6:	3401      	adds	r4, #1
 80021a8:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 80021aa:	2300      	movs	r3, #0

	return buf;
}
 80021ac:	4650      	mov	r0, sl
	*ptr = 0;
 80021ae:	702b      	strb	r3, [r5, #0]
}
 80021b0:	b003      	add	sp, #12
 80021b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		precision = MAX_PRECISION;
 80021b6:	240a      	movs	r4, #10
 80021b8:	e79b      	b.n	80020f2 <ftoa+0x22>
 80021ba:	46d0      	mov	r8, sl
 80021bc:	e7a0      	b.n	8002100 <ftoa+0x30>
	if (precision)
 80021be:	d0d4      	beq.n	800216a <ftoa+0x9a>
		f += rounders[precision];
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <ftoa+0x1b0>)
 80021c2:	4638      	mov	r0, r7
 80021c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80021c8:	4631      	mov	r1, r6
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fd ffcd 	bl	800016c <__adddf3>
 80021d2:	4607      	mov	r7, r0
 80021d4:	460e      	mov	r6, r1
 80021d6:	e7c8      	b.n	800216a <ftoa+0x9a>
		if (f < 1.0) precision = 6;
 80021d8:	2406      	movs	r4, #6
 80021da:	e7f1      	b.n	80021c0 <ftoa+0xf0>
		else if (f < 10.0) precision = 5;
 80021dc:	2405      	movs	r4, #5
 80021de:	e7ef      	b.n	80021c0 <ftoa+0xf0>
		else if (f < 100.0) precision = 4;
 80021e0:	2404      	movs	r4, #4
 80021e2:	e7ed      	b.n	80021c0 <ftoa+0xf0>
		else if (f < 1000.0) precision = 3;
 80021e4:	2403      	movs	r4, #3
 80021e6:	e7eb      	b.n	80021c0 <ftoa+0xf0>
		else if (f < 10000.0) precision = 2;
 80021e8:	2402      	movs	r4, #2
 80021ea:	e7e9      	b.n	80021c0 <ftoa+0xf0>
		else if (f < 100000.0) precision = 1;
 80021ec:	2401      	movs	r4, #1
 80021ee:	e7e7      	b.n	80021c0 <ftoa+0xf0>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 80021f4:	210a      	movs	r1, #10
 80021f6:	fb93 f2f1 	sdiv	r2, r3, r1
 80021fa:	fb01 3312 	mls	r3, r1, r2, r3
 80021fe:	3330      	adds	r3, #48	; 0x30
 8002200:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 8002204:	4613      	mov	r3, r2
 8002206:	2a00      	cmp	r2, #0
 8002208:	d1f5      	bne.n	80021f6 <ftoa+0x126>
			*p++ = '0' + intPart % 10;
 800220a:	462b      	mov	r3, r5
		while (p > ptr)
 800220c:	4598      	cmp	r8, r3
 800220e:	d2b7      	bcs.n	8002180 <ftoa+0xb0>
			c = *--p;
 8002210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 8002214:	f898 1000 	ldrb.w	r1, [r8]
 8002218:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 800221a:	f808 2b01 	strb.w	r2, [r8], #1
 800221e:	e7f5      	b.n	800220c <ftoa+0x13c>
			f *= 10.0;
 8002220:	4632      	mov	r2, r6
 8002222:	463b      	mov	r3, r7
 8002224:	f7fe f958 	bl	80004d8 <__aeabi_dmul>
 8002228:	4689      	mov	r9, r1
 800222a:	4680      	mov	r8, r0
			c = f;
 800222c:	f7fe fc2c 	bl	8000a88 <__aeabi_d2uiz>
 8002230:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 8002232:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002236:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 800223a:	f7fe f8e3 	bl	8000404 <__aeabi_i2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4640      	mov	r0, r8
 8002244:	4649      	mov	r1, r9
 8002246:	f7fd ff8f 	bl	8000168 <__aeabi_dsub>
 800224a:	e7a9      	b.n	80021a0 <ftoa+0xd0>
	if (f < 0)
 800224c:	f7fe fbb6 	bl	80009bc <__aeabi_dcmplt>
 8002250:	2800      	cmp	r0, #0
 8002252:	d1b0      	bne.n	80021b6 <ftoa+0xe6>
 8002254:	46d0      	mov	r8, sl
		precision = MAX_PRECISION;
 8002256:	240a      	movs	r4, #10
 8002258:	e7b2      	b.n	80021c0 <ftoa+0xf0>
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	00000000 	.word	0x00000000
 8002264:	40c38800 	.word	0x40c38800
 8002268:	00000000 	.word	0x00000000
 800226c:	40f86a00 	.word	0x40f86a00
 8002270:	3ff00000 	.word	0x3ff00000
 8002274:	40240000 	.word	0x40240000
 8002278:	40590000 	.word	0x40590000
 800227c:	408f4000 	.word	0x408f4000
 8002280:	08005168 	.word	0x08005168

08002284 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002286:	2301      	movs	r3, #1
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void ssd1306_WriteCommand(uint8_t byte) {
 800228c:	aa06      	add	r2, sp, #24
 800228e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	2178      	movs	r1, #120	; 0x78
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <ssd1306_WriteCommand+0x24>)
 800229e:	f7ff f891 	bl	80013c4 <HAL_I2C_Mem_Write>
}
 80022a2:	b007      	add	sp, #28
 80022a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a8:	2000061c 	.word	0x2000061c

080022ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80022ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b2:	b289      	uxth	r1, r1
 80022b4:	e9cd 0100 	strd	r0, r1, [sp]
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	2301      	movs	r3, #1
 80022be:	2178      	movs	r1, #120	; 0x78
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <ssd1306_WriteData+0x20>)
 80022c2:	f7ff f87f 	bl	80013c4 <HAL_I2C_Mem_Write>
}
 80022c6:	b005      	add	sp, #20
 80022c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022cc:	2000061c 	.word	0x2000061c

080022d0 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022d0:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022d2:	4905      	ldr	r1, [pc, #20]	; (80022e8 <ssd1306_Fill+0x18>)
 80022d4:	1c02      	adds	r2, r0, #0
 80022d6:	bf18      	it	ne
 80022d8:	2201      	movne	r2, #1
 80022da:	4252      	negs	r2, r2
 80022dc:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022de:	3301      	adds	r3, #1
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	d1f6      	bne.n	80022d4 <ssd1306_Fill+0x4>
    }
}
 80022e6:	4770      	bx	lr
 80022e8:	20000206 	.word	0x20000206

080022ec <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80022f0:	4d0a      	ldr	r5, [pc, #40]	; (800231c <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80022f2:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80022f6:	b2c0      	uxtb	r0, r0
 80022f8:	f7ff ffc4 	bl	8002284 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff ffc1 	bl	8002284 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002302:	2010      	movs	r0, #16
 8002304:	f7ff ffbe 	bl	8002284 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002308:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	3401      	adds	r4, #1
 8002310:	f7ff ffcc 	bl	80022ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002314:	2c08      	cmp	r4, #8
 8002316:	d1ec      	bne.n	80022f2 <ssd1306_UpdateScreen+0x6>
    }
}
 8002318:	bd38      	pop	{r3, r4, r5, pc}
 800231a:	bf00      	nop
 800231c:	20000206 	.word	0x20000206

08002320 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002320:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8002322:	2064      	movs	r0, #100	; 0x64
 8002324:	f7fe fc18 	bl	8000b58 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8002328:	20ae      	movs	r0, #174	; 0xae
 800232a:	f7ff ffab 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800232e:	2020      	movs	r0, #32
 8002330:	f7ff ffa8 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff ffa5 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800233a:	20b0      	movs	r0, #176	; 0xb0
 800233c:	f7ff ffa2 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002340:	20c8      	movs	r0, #200	; 0xc8
 8002342:	f7ff ff9f 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ff9c 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800234c:	2010      	movs	r0, #16
 800234e:	f7ff ff99 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002352:	2040      	movs	r0, #64	; 0x40
 8002354:	f7ff ff96 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8002358:	2081      	movs	r0, #129	; 0x81
 800235a:	f7ff ff93 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800235e:	20ff      	movs	r0, #255	; 0xff
 8002360:	f7ff ff90 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002364:	20a1      	movs	r0, #161	; 0xa1
 8002366:	f7ff ff8d 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800236a:	20a6      	movs	r0, #166	; 0xa6
 800236c:	f7ff ff8a 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002370:	20a8      	movs	r0, #168	; 0xa8
 8002372:	f7ff ff87 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002376:	203f      	movs	r0, #63	; 0x3f
 8002378:	f7ff ff84 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800237c:	20a4      	movs	r0, #164	; 0xa4
 800237e:	f7ff ff81 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002382:	20d3      	movs	r0, #211	; 0xd3
 8002384:	f7ff ff7e 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ff7b 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800238e:	20d5      	movs	r0, #213	; 0xd5
 8002390:	f7ff ff78 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002394:	20f0      	movs	r0, #240	; 0xf0
 8002396:	f7ff ff75 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800239a:	20d9      	movs	r0, #217	; 0xd9
 800239c:	f7ff ff72 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023a0:	2022      	movs	r0, #34	; 0x22
 80023a2:	f7ff ff6f 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023a6:	20da      	movs	r0, #218	; 0xda
 80023a8:	f7ff ff6c 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80023ac:	2012      	movs	r0, #18
 80023ae:	f7ff ff69 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80023b2:	20db      	movs	r0, #219	; 0xdb
 80023b4:	f7ff ff66 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80023b8:	2020      	movs	r0, #32
 80023ba:	f7ff ff63 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80023be:	208d      	movs	r0, #141	; 0x8d
 80023c0:	f7ff ff60 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80023c4:	2014      	movs	r0, #20
 80023c6:	f7ff ff5d 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80023ca:	20af      	movs	r0, #175	; 0xaf
 80023cc:	f7ff ff5a 	bl	8002284 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff ff7d 	bl	80022d0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80023d6:	f7ff ff89 	bl	80022ec <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80023da:	2200      	movs	r2, #0
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <ssd1306_Init+0xc8>)
 80023de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80023e0:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80023e2:	2201      	movs	r2, #1
 80023e4:	715a      	strb	r2, [r3, #5]
}
 80023e6:	bd08      	pop	{r3, pc}
 80023e8:	20000200 	.word	0x20000200

080023ec <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023ec:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80023ee:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80023f0:	d416      	bmi.n	8002420 <ssd1306_DrawPixel+0x34>
 80023f2:	293f      	cmp	r1, #63	; 0x3f
 80023f4:	d814      	bhi.n	8002420 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <ssd1306_DrawPixel+0x38>)
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	b113      	cbz	r3, 8002402 <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	0952      	lsrs	r2, r2, #5
 8002402:	08cb      	lsrs	r3, r1, #3
 8002404:	f001 0407 	and.w	r4, r1, #7
 8002408:	2101      	movs	r1, #1
 800240a:	4d07      	ldr	r5, [pc, #28]	; (8002428 <ssd1306_DrawPixel+0x3c>)
 800240c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002410:	562b      	ldrsb	r3, [r5, r0]
 8002412:	40a1      	lsls	r1, r4
 8002414:	b249      	sxtb	r1, r1
    }
    
    // Draw in the right color
    if(color == White) {
 8002416:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002418:	bf0c      	ite	eq
 800241a:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800241c:	438b      	bicne	r3, r1
 800241e:	542b      	strb	r3, [r5, r0]
    }
}
 8002420:	bd30      	pop	{r4, r5, pc}
 8002422:	bf00      	nop
 8002424:	20000200 	.word	0x20000200
 8002428:	20000206 	.word	0x20000206

0800242c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002430:	4604      	mov	r4, r0
 8002432:	b087      	sub	sp, #28
 8002434:	a806      	add	r0, sp, #24
 8002436:	e900 0006 	stmdb	r0, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800243a:	f1a4 0220 	sub.w	r2, r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800243e:	469b      	mov	fp, r3
    if (ch < 32 || ch > 126)
 8002440:	b2d3      	uxtb	r3, r2
 8002442:	2b5e      	cmp	r3, #94	; 0x5e
 8002444:	d83e      	bhi.n	80024c4 <ssd1306_WriteChar+0x98>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <ssd1306_WriteChar+0x9c>)
 8002448:	f89d 9010 	ldrb.w	r9, [sp, #16]
 800244c:	881d      	ldrh	r5, [r3, #0]
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	eb05 0109 	add.w	r1, r5, r9
 8002454:	2980      	cmp	r1, #128	; 0x80
 8002456:	dc35      	bgt.n	80024c4 <ssd1306_WriteChar+0x98>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002458:	885b      	ldrh	r3, [r3, #2]
 800245a:	f89d a011 	ldrb.w	sl, [sp, #17]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	eb03 010a 	add.w	r1, r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002464:	2940      	cmp	r1, #64	; 0x40
 8002466:	dc2d      	bgt.n	80024c4 <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002468:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800246a:	fb0a f302 	mul.w	r3, sl, r2
 800246e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8002470:	45b2      	cmp	sl, r6
 8002472:	d806      	bhi.n	8002482 <ssd1306_WriteChar+0x56>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	444d      	add	r5, r9
 8002478:	801d      	strh	r5, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 800247a:	4620      	mov	r0, r4
 800247c:	b007      	add	sp, #28
 800247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8002482:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002484:	9b02      	ldr	r3, [sp, #8]
 8002486:	9905      	ldr	r1, [sp, #20]
 8002488:	199a      	adds	r2, r3, r6
 800248a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	9b00      	ldr	r3, [sp, #0]
 8002492:	eb06 0803 	add.w	r8, r6, r3
 8002496:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 800249a:	45b9      	cmp	r9, r7
 800249c:	d801      	bhi.n	80024a2 <ssd1306_WriteChar+0x76>
    for(i = 0; i < Font.FontHeight; i++) {
 800249e:	3601      	adds	r6, #1
 80024a0:	e7e6      	b.n	8002470 <ssd1306_WriteChar+0x44>
            if((b << j) & 0x8000)  {
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	1978      	adds	r0, r7, r5
 80024a6:	fa03 f207 	lsl.w	r2, r3, r7
 80024aa:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024ac:	bf58      	it	pl
 80024ae:	fabb f28b 	clzpl	r2, fp
 80024b2:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024b4:	bf4c      	ite	mi
 80024b6:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024b8:	0952      	lsrpl	r2, r2, #5
 80024ba:	4641      	mov	r1, r8
 80024bc:	f7ff ff96 	bl	80023ec <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024c0:	3701      	adds	r7, #1
 80024c2:	e7ea      	b.n	800249a <ssd1306_WriteChar+0x6e>
        return 0;
 80024c4:	2400      	movs	r4, #0
 80024c6:	e7d8      	b.n	800247a <ssd1306_WriteChar+0x4e>
 80024c8:	20000200 	.word	0x20000200

080024cc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80024cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024ce:	466d      	mov	r5, sp
 80024d0:	461f      	mov	r7, r3
 80024d2:	e885 0006 	stmia.w	r5, {r1, r2}
 80024d6:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 80024d8:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80024dc:	b144      	cbz	r4, 80024f0 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80024de:	e895 0006 	ldmia.w	r5, {r1, r2}
 80024e2:	4620      	mov	r0, r4
 80024e4:	463b      	mov	r3, r7
 80024e6:	f7ff ffa1 	bl	800242c <ssd1306_WriteChar>
 80024ea:	7834      	ldrb	r4, [r6, #0]
 80024ec:	42a0      	cmp	r0, r4
 80024ee:	d0f3      	beq.n	80024d8 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80024f0:	4620      	mov	r0, r4
 80024f2:	b003      	add	sp, #12
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024f8 <ssd1306_Print>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_Print(float latitude, float longitude, float altitude, float velocity){
 80024f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fc:	460e      	mov	r6, r1
 80024fe:	4615      	mov	r5, r2
 8002500:	461c      	mov	r4, r3
 8002502:	b08c      	sub	sp, #48	; 0x30
	char lati[10], longi[10], alti[10], velo[10];
	ftoa((double)latitude, lati, 6);
 8002504:	f7fd ff90 	bl	8000428 <__aeabi_f2d>
 8002508:	466a      	mov	r2, sp
 800250a:	2306      	movs	r3, #6
 800250c:	f7ff fde0 	bl	80020d0 <ftoa>
    SSD1306.CurrentY = y;
 8002510:	f04f 0800 	mov.w	r8, #0
	ftoa((double)longitude, longi, 6);
 8002514:	4630      	mov	r0, r6
    SSD1306.CurrentX = x;
 8002516:	2602      	movs	r6, #2
	ftoa((double)longitude, longi, 6);
 8002518:	f7fd ff86 	bl	8000428 <__aeabi_f2d>
 800251c:	aa03      	add	r2, sp, #12
 800251e:	2306      	movs	r3, #6
 8002520:	f7ff fdd6 	bl	80020d0 <ftoa>
	ftoa((double)altitude, alti, 6);
 8002524:	4628      	mov	r0, r5
 8002526:	f7fd ff7f 	bl	8000428 <__aeabi_f2d>
 800252a:	aa06      	add	r2, sp, #24
 800252c:	2306      	movs	r3, #6
 800252e:	f7ff fdcf 	bl	80020d0 <ftoa>
	ftoa((double)velocity, velo, 6);
 8002532:	4620      	mov	r0, r4
 8002534:	f7fd ff78 	bl	8000428 <__aeabi_f2d>
    ssd1306_Fill(Black);
    ssd1306_SetCursor(2, 0);
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8002538:	4c2f      	ldr	r4, [pc, #188]	; (80025f8 <ssd1306_Print+0x100>)
	ftoa((double)velocity, velo, 6);
 800253a:	aa09      	add	r2, sp, #36	; 0x24
 800253c:	2306      	movs	r3, #6
    SSD1306.CurrentX = x;
 800253e:	4d2f      	ldr	r5, [pc, #188]	; (80025fc <ssd1306_Print+0x104>)
	ftoa((double)velocity, velo, 6);
 8002540:	f7ff fdc6 	bl	80020d0 <ftoa>
    ssd1306_Fill(Black);
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff fec3 	bl	80022d0 <ssd1306_Fill>
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800254a:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800254e:	2738      	movs	r7, #56	; 0x38
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8002550:	2301      	movs	r3, #1
 8002552:	482b      	ldr	r0, [pc, #172]	; (8002600 <ssd1306_Print+0x108>)
    SSD1306.CurrentX = x;
 8002554:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 8002556:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800255a:	f7ff ffb7 	bl	80024cc <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 0);
    ssd1306_WriteChar(*lati, Font_6x8, White);
 800255e:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8002562:	f8a5 8002 	strh.w	r8, [r5, #2]
 8002566:	f04f 080c 	mov.w	r8, #12
    ssd1306_WriteChar(*lati, Font_6x8, White);
 800256a:	2301      	movs	r3, #1
 800256c:	f89d 0000 	ldrb.w	r0, [sp]
    SSD1306.CurrentX = x;
 8002570:	802f      	strh	r7, [r5, #0]
    ssd1306_WriteChar(*lati, Font_6x8, White);
 8002572:	f7ff ff5b 	bl	800242c <ssd1306_WriteChar>
    ssd1306_SetCursor(2, 4+8);
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8002576:	e894 0006 	ldmia.w	r4, {r1, r2}
 800257a:	2301      	movs	r3, #1
 800257c:	4821      	ldr	r0, [pc, #132]	; (8002604 <ssd1306_Print+0x10c>)
    SSD1306.CurrentX = x;
 800257e:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 8002580:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8002584:	f7ff ffa2 	bl	80024cc <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 4+8);
    ssd1306_WriteChar(*longi, Font_6x8, White);
 8002588:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800258c:	233e      	movs	r3, #62	; 0x3e
    SSD1306.CurrentY = y;
 800258e:	f8a5 8002 	strh.w	r8, [r5, #2]
 8002592:	f04f 0818 	mov.w	r8, #24
    SSD1306.CurrentX = x;
 8002596:	802b      	strh	r3, [r5, #0]
    ssd1306_WriteChar(*longi, Font_6x8, White);
 8002598:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800259c:	2301      	movs	r3, #1
 800259e:	f7ff ff45 	bl	800242c <ssd1306_WriteChar>
    ssd1306_SetCursor(2, 2*(4+8));
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 80025a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80025a6:	2301      	movs	r3, #1
 80025a8:	4817      	ldr	r0, [pc, #92]	; (8002608 <ssd1306_Print+0x110>)
    SSD1306.CurrentX = x;
 80025aa:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 80025ac:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 80025b0:	f7ff ff8c 	bl	80024cc <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 2*(4+8));
    ssd1306_WriteChar(*alti, Font_6x8, White);
 80025b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80025b8:	2301      	movs	r3, #1
 80025ba:	f89d 0018 	ldrb.w	r0, [sp, #24]
    SSD1306.CurrentX = x;
 80025be:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 80025c0:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteChar(*alti, Font_6x8, White);
 80025c4:	f7ff ff32 	bl	800242c <ssd1306_WriteChar>
    ssd1306_SetCursor(2, 3*(4+8));
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80025c8:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 80025cc:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 80025ce:	2624      	movs	r6, #36	; 0x24
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80025d0:	2301      	movs	r3, #1
 80025d2:	480e      	ldr	r0, [pc, #56]	; (800260c <ssd1306_Print+0x114>)
    SSD1306.CurrentY = y;
 80025d4:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80025d6:	f7ff ff79 	bl	80024cc <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 3*(4+8));
    ssd1306_WriteChar(*velo, Font_6x8, White);
 80025da:	e894 0006 	ldmia.w	r4, {r1, r2}
 80025de:	2301      	movs	r3, #1
 80025e0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    SSD1306.CurrentX = x;
 80025e4:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 80025e6:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteChar(*velo, Font_6x8, White);
 80025e8:	f7ff ff20 	bl	800242c <ssd1306_WriteChar>
    ssd1306_UpdateScreen();
 80025ec:	f7ff fe7e 	bl	80022ec <ssd1306_UpdateScreen>
}
 80025f0:	b00c      	add	sp, #48	; 0x30
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008
 80025fc:	20000200 	.word	0x20000200
 8002600:	080051c0 	.word	0x080051c0
 8002604:	080051ca 	.word	0x080051ca
 8002608:	080051d5 	.word	0x080051d5
 800260c:	080051df 	.word	0x080051df

08002610 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_MspInit+0x3c>)
{
 8002612:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	f002 0201 	and.w	r2, r2, #1
 8002622:	9200      	str	r2, [sp, #0]
 8002624:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800262c:	61da      	str	r2, [r3, #28]
 800262e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	b002      	add	sp, #8
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000

08002654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002654:	b510      	push	{r4, lr}
 8002656:	4604      	mov	r4, r0
 8002658:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265a:	2210      	movs	r2, #16
 800265c:	2100      	movs	r1, #0
 800265e:	a802      	add	r0, sp, #8
 8002660:	f000 f9b5 	bl	80029ce <memset>
  if(hadc->Instance==ADC1)
 8002664:	6822      	ldr	r2, [r4, #0]
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_ADC_MspInit+0x54>)
 8002668:	429a      	cmp	r2, r3
 800266a:	d11b      	bne.n	80026a4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002670:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002672:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800267e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002682:	9200      	str	r2, [sp, #0]
 8002684:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	f042 0204 	orr.w	r2, r2, #4
 800268c:	619a      	str	r2, [r3, #24]
 800268e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002690:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800269a:	2303      	movs	r3, #3
 800269c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f7fe fbe8 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a4:	b006      	add	sp, #24
 80026a6:	bd10      	pop	{r4, pc}
 80026a8:	40012400 	.word	0x40012400
 80026ac:	40010800 	.word	0x40010800

080026b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b510      	push	{r4, lr}
 80026b2:	4604      	mov	r4, r0
 80026b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	2210      	movs	r2, #16
 80026b8:	2100      	movs	r1, #0
 80026ba:	a802      	add	r0, sp, #8
 80026bc:	f000 f987 	bl	80029ce <memset>
  if(hi2c->Instance==I2C1)
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_I2C_MspInit+0x68>)
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d124      	bne.n	8002712 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4c14      	ldr	r4, [pc, #80]	; (800271c <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ca:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ce:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	61a3      	str	r3, [r4, #24]
 80026d8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	4811      	ldr	r0, [pc, #68]	; (8002720 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e4:	2312      	movs	r3, #18
 80026e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f7fe fbc1 	bl	8000e74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_I2C_MspInit+0x74>)
 80026f4:	6853      	ldr	r3, [r2, #4]
 80026f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	69e3      	ldr	r3, [r4, #28]
 8002702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002706:	61e3      	str	r3, [r4, #28]
 8002708:	69e3      	ldr	r3, [r4, #28]
 800270a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002712:	b006      	add	sp, #24
 8002714:	bd10      	pop	{r4, pc}
 8002716:	bf00      	nop
 8002718:	40005400 	.word	0x40005400
 800271c:	40021000 	.word	0x40021000
 8002720:	40010c00 	.word	0x40010c00
 8002724:	40010000 	.word	0x40010000

08002728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002728:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272a:	2410      	movs	r4, #16
{
 800272c:	4605      	mov	r5, r0
 800272e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	4622      	mov	r2, r4
 8002732:	2100      	movs	r1, #0
 8002734:	eb0d 0004 	add.w	r0, sp, r4
 8002738:	f000 f949 	bl	80029ce <memset>
  if(hspi->Instance==SPI1)
 800273c:	682a      	ldr	r2, [r5, #0]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_SPI_MspInit+0xa4>)
 8002740:	429a      	cmp	r2, r3
 8002742:	d141      	bne.n	80027c8 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002744:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002748:	699a      	ldr	r2, [r3, #24]
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = CS_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2602      	movs	r6, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 800274c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002750:	619a      	str	r2, [r3, #24]
 8002752:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002754:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002756:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800275a:	9201      	str	r2, [sp, #4]
 800275c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8002760:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	619a      	str	r2, [r3, #24]
 800276a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 800276c:	4818      	ldr	r0, [pc, #96]	; (80027d0 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	f002 0204 	and.w	r2, r2, #4
 8002772:	9202      	str	r2, [sp, #8]
 8002774:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	f042 0208 	orr.w	r2, r2, #8
 800277c:	619a      	str	r2, [r3, #24]
 800277e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002780:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8002792:	f7fe fb6f 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
 8002796:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	eb0d 0104 	add.w	r1, sp, r4
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f7fe fb66 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 80027aa:	eb0d 0104 	add.w	r1, sp, r4
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 80027b4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f7fe fb5d 	bl	8000e74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_SPI_MspInit+0xb0>)
 80027bc:	6853      	ldr	r3, [r2, #4]
 80027be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027c8:	b008      	add	sp, #32
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	40013000 	.word	0x40013000
 80027d0:	40010800 	.word	0x40010800
 80027d4:	40010c00 	.word	0x40010c00
 80027d8:	40010000 	.word	0x40010000

080027dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027dc:	b510      	push	{r4, lr}
 80027de:	4604      	mov	r4, r0
 80027e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e2:	2210      	movs	r2, #16
 80027e4:	2100      	movs	r1, #0
 80027e6:	a802      	add	r0, sp, #8
 80027e8:	f000 f8f1 	bl	80029ce <memset>
  if(huart->Instance==USART2)
 80027ec:	6822      	ldr	r2, [r4, #0]
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_UART_MspInit+0x6c>)
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d126      	bne.n	8002842 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80027f8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80027fa:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002800:	61da      	str	r2, [r3, #28]
 8002802:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8002804:	4811      	ldr	r0, [pc, #68]	; (800284c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002806:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800280a:	9200      	str	r2, [sp, #0]
 800280c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	f042 0204 	orr.w	r2, r2, #4
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 800282c:	f7fe fb22 	bl	8000e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002830:	2108      	movs	r1, #8
 8002832:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002836:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800283a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800283e:	f7fe fb19 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002842:	b006      	add	sp, #24
 8002844:	bd10      	pop	{r4, pc}
 8002846:	bf00      	nop
 8002848:	40004400 	.word	0x40004400
 800284c:	40010800 	.word	0x40010800

08002850 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002850:	4770      	bx	lr

08002852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002852:	e7fe      	b.n	8002852 <HardFault_Handler>

08002854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002854:	e7fe      	b.n	8002854 <MemManage_Handler>

08002856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002856:	e7fe      	b.n	8002856 <BusFault_Handler>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler>

0800285a <SVC_Handler>:
 800285a:	4770      	bx	lr

0800285c <DebugMon_Handler>:
 800285c:	4770      	bx	lr

0800285e <PendSV_Handler>:
 800285e:	4770      	bx	lr

08002860 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f7fe b968 	b.w	8000b34 <HAL_IncTick>

08002864 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	460e      	mov	r6, r1
 8002868:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	460c      	mov	r4, r1
 800286c:	1ba3      	subs	r3, r4, r6
 800286e:	429d      	cmp	r5, r3
 8002870:	dc01      	bgt.n	8002876 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002872:	4628      	mov	r0, r5
 8002874:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	f804 0b01 	strb.w	r0, [r4], #1
 800287e:	e7f5      	b.n	800286c <_read+0x8>

08002880 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002880:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <_sbrk+0x2c>)
{
 8002884:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	b909      	cbnz	r1, 800288e <_sbrk+0xe>
		heap_end = &end;
 800288a:	4909      	ldr	r1, [pc, #36]	; (80028b0 <_sbrk+0x30>)
 800288c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800288e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002890:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002892:	4402      	add	r2, r0
 8002894:	428a      	cmp	r2, r1
 8002896:	d906      	bls.n	80028a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002898:	f000 f864 	bl	8002964 <__errno>
 800289c:	230c      	movs	r3, #12
 800289e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80028a4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80028a6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80028a8:	e7fc      	b.n	80028a4 <_sbrk+0x24>
 80028aa:	bf00      	nop
 80028ac:	20000608 	.word	0x20000608
 80028b0:	20000788 	.word	0x20000788

080028b4 <_close>:

int _close(int file)
{
	return -1;
}
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b8:	4770      	bx	lr

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80028be:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80028c0:	604b      	str	r3, [r1, #4]
}
 80028c2:	4770      	bx	lr

080028c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028c4:	2001      	movs	r0, #1
 80028c6:	4770      	bx	lr

080028c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028c8:	2000      	movs	r0, #0
 80028ca:	4770      	bx	lr

080028cc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <SystemInit+0x40>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <SystemInit+0x44>)
 80028da:	400a      	ands	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80028f8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002900:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <SystemInit+0x48>)
 8002906:	609a      	str	r2, [r3, #8]
#endif 
}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	f8ff0000 	.word	0xf8ff0000
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002918:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800291e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002920:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002924:	480a      	ldr	r0, [pc, #40]	; (8002950 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002928:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800292a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800293a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ffc5 	bl	80028cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f000 f815 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002946:	f7ff faa1 	bl	8001e8c <main>
  bx lr
 800294a:	4770      	bx	lr
  ldr r3, =_sidata
 800294c:	08005ac0 	.word	0x08005ac0
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002954:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002958:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 800295c:	20000788 	.word	0x20000788

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000014 	.word	0x20000014

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	2500      	movs	r5, #0
 8002974:	4e0c      	ldr	r6, [pc, #48]	; (80029a8 <__libc_init_array+0x38>)
 8002976:	4c0d      	ldr	r4, [pc, #52]	; (80029ac <__libc_init_array+0x3c>)
 8002978:	1ba4      	subs	r4, r4, r6
 800297a:	10a4      	asrs	r4, r4, #2
 800297c:	42a5      	cmp	r5, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	f002 fba8 	bl	80050d4 <_init>
 8002984:	2500      	movs	r5, #0
 8002986:	4e0a      	ldr	r6, [pc, #40]	; (80029b0 <__libc_init_array+0x40>)
 8002988:	4c0a      	ldr	r4, [pc, #40]	; (80029b4 <__libc_init_array+0x44>)
 800298a:	1ba4      	subs	r4, r4, r6
 800298c:	10a4      	asrs	r4, r4, #2
 800298e:	42a5      	cmp	r5, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002998:	4798      	blx	r3
 800299a:	3501      	adds	r5, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029a2:	4798      	blx	r3
 80029a4:	3501      	adds	r5, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	08005ab8 	.word	0x08005ab8
 80029ac:	08005ab8 	.word	0x08005ab8
 80029b0:	08005ab8 	.word	0x08005ab8
 80029b4:	08005abc 	.word	0x08005abc

080029b8 <memcpy>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	1e43      	subs	r3, r0, #1
 80029bc:	440a      	add	r2, r1
 80029be:	4291      	cmp	r1, r2
 80029c0:	d100      	bne.n	80029c4 <memcpy+0xc>
 80029c2:	bd10      	pop	{r4, pc}
 80029c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029cc:	e7f7      	b.n	80029be <memcpy+0x6>

080029ce <memset>:
 80029ce:	4603      	mov	r3, r0
 80029d0:	4402      	add	r2, r0
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d100      	bne.n	80029d8 <memset+0xa>
 80029d6:	4770      	bx	lr
 80029d8:	f803 1b01 	strb.w	r1, [r3], #1
 80029dc:	e7f9      	b.n	80029d2 <memset+0x4>

080029de <__cvt>:
 80029de:	2b00      	cmp	r3, #0
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	461e      	mov	r6, r3
 80029e6:	bfbb      	ittet	lt
 80029e8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80029ec:	461e      	movlt	r6, r3
 80029ee:	2300      	movge	r3, #0
 80029f0:	232d      	movlt	r3, #45	; 0x2d
 80029f2:	b088      	sub	sp, #32
 80029f4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80029f6:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80029fa:	f027 0720 	bic.w	r7, r7, #32
 80029fe:	2f46      	cmp	r7, #70	; 0x46
 8002a00:	4614      	mov	r4, r2
 8002a02:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a04:	700b      	strb	r3, [r1, #0]
 8002a06:	d004      	beq.n	8002a12 <__cvt+0x34>
 8002a08:	2f45      	cmp	r7, #69	; 0x45
 8002a0a:	d100      	bne.n	8002a0e <__cvt+0x30>
 8002a0c:	3501      	adds	r5, #1
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e000      	b.n	8002a14 <__cvt+0x36>
 8002a12:	2303      	movs	r3, #3
 8002a14:	aa07      	add	r2, sp, #28
 8002a16:	9204      	str	r2, [sp, #16]
 8002a18:	aa06      	add	r2, sp, #24
 8002a1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002a1e:	e9cd 3500 	strd	r3, r5, [sp]
 8002a22:	4622      	mov	r2, r4
 8002a24:	4633      	mov	r3, r6
 8002a26:	f000 fdf3 	bl	8003610 <_dtoa_r>
 8002a2a:	2f47      	cmp	r7, #71	; 0x47
 8002a2c:	4680      	mov	r8, r0
 8002a2e:	d102      	bne.n	8002a36 <__cvt+0x58>
 8002a30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a32:	07db      	lsls	r3, r3, #31
 8002a34:	d526      	bpl.n	8002a84 <__cvt+0xa6>
 8002a36:	2f46      	cmp	r7, #70	; 0x46
 8002a38:	eb08 0905 	add.w	r9, r8, r5
 8002a3c:	d111      	bne.n	8002a62 <__cvt+0x84>
 8002a3e:	f898 3000 	ldrb.w	r3, [r8]
 8002a42:	2b30      	cmp	r3, #48	; 0x30
 8002a44:	d10a      	bne.n	8002a5c <__cvt+0x7e>
 8002a46:	2200      	movs	r2, #0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	f7fd ffab 	bl	80009a8 <__aeabi_dcmpeq>
 8002a52:	b918      	cbnz	r0, 8002a5c <__cvt+0x7e>
 8002a54:	f1c5 0501 	rsb	r5, r5, #1
 8002a58:	f8ca 5000 	str.w	r5, [sl]
 8002a5c:	f8da 3000 	ldr.w	r3, [sl]
 8002a60:	4499      	add	r9, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	2300      	movs	r3, #0
 8002a66:	4620      	mov	r0, r4
 8002a68:	4631      	mov	r1, r6
 8002a6a:	f7fd ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 8002a6e:	b938      	cbnz	r0, 8002a80 <__cvt+0xa2>
 8002a70:	2230      	movs	r2, #48	; 0x30
 8002a72:	9b07      	ldr	r3, [sp, #28]
 8002a74:	454b      	cmp	r3, r9
 8002a76:	d205      	bcs.n	8002a84 <__cvt+0xa6>
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	9107      	str	r1, [sp, #28]
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e7f8      	b.n	8002a72 <__cvt+0x94>
 8002a80:	f8cd 901c 	str.w	r9, [sp, #28]
 8002a84:	4640      	mov	r0, r8
 8002a86:	9b07      	ldr	r3, [sp, #28]
 8002a88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002a8a:	eba3 0308 	sub.w	r3, r3, r8
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	b008      	add	sp, #32
 8002a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a96 <__exponent>:
 8002a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	bfb4      	ite	lt
 8002a9c:	232d      	movlt	r3, #45	; 0x2d
 8002a9e:	232b      	movge	r3, #43	; 0x2b
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	bfb8      	it	lt
 8002aa4:	4249      	neglt	r1, r1
 8002aa6:	2909      	cmp	r1, #9
 8002aa8:	f804 2b02 	strb.w	r2, [r4], #2
 8002aac:	7043      	strb	r3, [r0, #1]
 8002aae:	dd21      	ble.n	8002af4 <__exponent+0x5e>
 8002ab0:	f10d 0307 	add.w	r3, sp, #7
 8002ab4:	461f      	mov	r7, r3
 8002ab6:	260a      	movs	r6, #10
 8002ab8:	fb91 f5f6 	sdiv	r5, r1, r6
 8002abc:	fb06 1115 	mls	r1, r6, r5, r1
 8002ac0:	2d09      	cmp	r5, #9
 8002ac2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002ac6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002aca:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002ace:	4629      	mov	r1, r5
 8002ad0:	dc09      	bgt.n	8002ae6 <__exponent+0x50>
 8002ad2:	3130      	adds	r1, #48	; 0x30
 8002ad4:	3b02      	subs	r3, #2
 8002ad6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ada:	42bb      	cmp	r3, r7
 8002adc:	4622      	mov	r2, r4
 8002ade:	d304      	bcc.n	8002aea <__exponent+0x54>
 8002ae0:	1a10      	subs	r0, r2, r0
 8002ae2:	b003      	add	sp, #12
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	e7e6      	b.n	8002ab8 <__exponent+0x22>
 8002aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aee:	f804 2b01 	strb.w	r2, [r4], #1
 8002af2:	e7f2      	b.n	8002ada <__exponent+0x44>
 8002af4:	2330      	movs	r3, #48	; 0x30
 8002af6:	4419      	add	r1, r3
 8002af8:	7083      	strb	r3, [r0, #2]
 8002afa:	1d02      	adds	r2, r0, #4
 8002afc:	70c1      	strb	r1, [r0, #3]
 8002afe:	e7ef      	b.n	8002ae0 <__exponent+0x4a>

08002b00 <_printf_float>:
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b04:	b091      	sub	sp, #68	; 0x44
 8002b06:	460c      	mov	r4, r1
 8002b08:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002b0a:	4693      	mov	fp, r2
 8002b0c:	461e      	mov	r6, r3
 8002b0e:	4605      	mov	r5, r0
 8002b10:	f001 fcac 	bl	800446c <_localeconv_r>
 8002b14:	6803      	ldr	r3, [r0, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1a:	f7fd fb19 	bl	8000150 <strlen>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	930e      	str	r3, [sp, #56]	; 0x38
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	900a      	str	r0, [sp, #40]	; 0x28
 8002b26:	3307      	adds	r3, #7
 8002b28:	f023 0307 	bic.w	r3, r3, #7
 8002b2c:	f103 0208 	add.w	r2, r3, #8
 8002b30:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002b34:	f8d4 a000 	ldr.w	sl, [r4]
 8002b38:	603a      	str	r2, [r7, #0]
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b42:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b50:	4ba6      	ldr	r3, [pc, #664]	; (8002dec <_printf_float+0x2ec>)
 8002b52:	4638      	mov	r0, r7
 8002b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b56:	f7fd ff59 	bl	8000a0c <__aeabi_dcmpun>
 8002b5a:	bb68      	cbnz	r0, 8002bb8 <_printf_float+0xb8>
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b60:	4ba2      	ldr	r3, [pc, #648]	; (8002dec <_printf_float+0x2ec>)
 8002b62:	4638      	mov	r0, r7
 8002b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b66:	f7fd ff33 	bl	80009d0 <__aeabi_dcmple>
 8002b6a:	bb28      	cbnz	r0, 8002bb8 <_printf_float+0xb8>
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4638      	mov	r0, r7
 8002b72:	4649      	mov	r1, r9
 8002b74:	f7fd ff22 	bl	80009bc <__aeabi_dcmplt>
 8002b78:	b110      	cbz	r0, 8002b80 <_printf_float+0x80>
 8002b7a:	232d      	movs	r3, #45	; 0x2d
 8002b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b80:	4f9b      	ldr	r7, [pc, #620]	; (8002df0 <_printf_float+0x2f0>)
 8002b82:	4b9c      	ldr	r3, [pc, #624]	; (8002df4 <_printf_float+0x2f4>)
 8002b84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b88:	bf98      	it	ls
 8002b8a:	461f      	movls	r7, r3
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	f04f 0900 	mov.w	r9, #0
 8002b92:	6123      	str	r3, [r4, #16]
 8002b94:	f02a 0304 	bic.w	r3, sl, #4
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	9600      	str	r6, [sp, #0]
 8002b9c:	465b      	mov	r3, fp
 8002b9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f000 f9e2 	bl	8002f6c <_printf_common>
 8002ba8:	3001      	adds	r0, #1
 8002baa:	f040 8090 	bne.w	8002cce <_printf_float+0x1ce>
 8002bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb2:	b011      	add	sp, #68	; 0x44
 8002bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb8:	463a      	mov	r2, r7
 8002bba:	464b      	mov	r3, r9
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	f7fd ff24 	bl	8000a0c <__aeabi_dcmpun>
 8002bc4:	b110      	cbz	r0, 8002bcc <_printf_float+0xcc>
 8002bc6:	4f8c      	ldr	r7, [pc, #560]	; (8002df8 <_printf_float+0x2f8>)
 8002bc8:	4b8c      	ldr	r3, [pc, #560]	; (8002dfc <_printf_float+0x2fc>)
 8002bca:	e7db      	b.n	8002b84 <_printf_float+0x84>
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	a80d      	add	r0, sp, #52	; 0x34
 8002bd6:	a90e      	add	r1, sp, #56	; 0x38
 8002bd8:	d140      	bne.n	8002c5c <_printf_float+0x15c>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	f04f 0c00 	mov.w	ip, #0
 8002be2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002be6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	6022      	str	r2, [r4, #0]
 8002bee:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	463a      	mov	r2, r7
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f7ff feee 	bl	80029de <__cvt>
 8002c02:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002c06:	2b47      	cmp	r3, #71	; 0x47
 8002c08:	4607      	mov	r7, r0
 8002c0a:	d109      	bne.n	8002c20 <_printf_float+0x120>
 8002c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c0e:	1cd8      	adds	r0, r3, #3
 8002c10:	db02      	blt.n	8002c18 <_printf_float+0x118>
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	4293      	cmp	r3, r2
 8002c16:	dd47      	ble.n	8002ca8 <_printf_float+0x1a8>
 8002c18:	f1a8 0802 	sub.w	r8, r8, #2
 8002c1c:	fa5f f888 	uxtb.w	r8, r8
 8002c20:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002c24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c26:	d824      	bhi.n	8002c72 <_printf_float+0x172>
 8002c28:	3901      	subs	r1, #1
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c30:	910d      	str	r1, [sp, #52]	; 0x34
 8002c32:	f7ff ff30 	bl	8002a96 <__exponent>
 8002c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c38:	4681      	mov	r9, r0
 8002c3a:	1813      	adds	r3, r2, r0
 8002c3c:	2a01      	cmp	r2, #1
 8002c3e:	6123      	str	r3, [r4, #16]
 8002c40:	dc02      	bgt.n	8002c48 <_printf_float+0x148>
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	07d1      	lsls	r1, r2, #31
 8002c46:	d501      	bpl.n	8002c4c <_printf_float+0x14c>
 8002c48:	3301      	adds	r3, #1
 8002c4a:	6123      	str	r3, [r4, #16]
 8002c4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0a2      	beq.n	8002b9a <_printf_float+0x9a>
 8002c54:	232d      	movs	r3, #45	; 0x2d
 8002c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c5a:	e79e      	b.n	8002b9a <_printf_float+0x9a>
 8002c5c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002c60:	f000 816e 	beq.w	8002f40 <_printf_float+0x440>
 8002c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c68:	d1b9      	bne.n	8002bde <_printf_float+0xde>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1b7      	bne.n	8002bde <_printf_float+0xde>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e7b4      	b.n	8002bdc <_printf_float+0xdc>
 8002c72:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002c76:	d119      	bne.n	8002cac <_printf_float+0x1ac>
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	6863      	ldr	r3, [r4, #4]
 8002c7c:	dd0c      	ble.n	8002c98 <_printf_float+0x198>
 8002c7e:	6121      	str	r1, [r4, #16]
 8002c80:	b913      	cbnz	r3, 8002c88 <_printf_float+0x188>
 8002c82:	6822      	ldr	r2, [r4, #0]
 8002c84:	07d2      	lsls	r2, r2, #31
 8002c86:	d502      	bpl.n	8002c8e <_printf_float+0x18e>
 8002c88:	3301      	adds	r3, #1
 8002c8a:	440b      	add	r3, r1
 8002c8c:	6123      	str	r3, [r4, #16]
 8002c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c90:	f04f 0900 	mov.w	r9, #0
 8002c94:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c96:	e7d9      	b.n	8002c4c <_printf_float+0x14c>
 8002c98:	b913      	cbnz	r3, 8002ca0 <_printf_float+0x1a0>
 8002c9a:	6822      	ldr	r2, [r4, #0]
 8002c9c:	07d0      	lsls	r0, r2, #31
 8002c9e:	d501      	bpl.n	8002ca4 <_printf_float+0x1a4>
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	e7f3      	b.n	8002c8c <_printf_float+0x18c>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e7f1      	b.n	8002c8c <_printf_float+0x18c>
 8002ca8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002cac:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	db05      	blt.n	8002cc0 <_printf_float+0x1c0>
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	07d1      	lsls	r1, r2, #31
 8002cba:	d5e8      	bpl.n	8002c8e <_printf_float+0x18e>
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	e7e5      	b.n	8002c8c <_printf_float+0x18c>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bfcc      	ite	gt
 8002cc4:	2301      	movgt	r3, #1
 8002cc6:	f1c3 0302 	rsble	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	e7de      	b.n	8002c8c <_printf_float+0x18c>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	055a      	lsls	r2, r3, #21
 8002cd2:	d407      	bmi.n	8002ce4 <_printf_float+0x1e4>
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	463a      	mov	r2, r7
 8002cd8:	4659      	mov	r1, fp
 8002cda:	4628      	mov	r0, r5
 8002cdc:	47b0      	blx	r6
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d129      	bne.n	8002d36 <_printf_float+0x236>
 8002ce2:	e764      	b.n	8002bae <_printf_float+0xae>
 8002ce4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002ce8:	f240 80d7 	bls.w	8002e9a <_printf_float+0x39a>
 8002cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f7fd fe58 	bl	80009a8 <__aeabi_dcmpeq>
 8002cf8:	b388      	cbz	r0, 8002d5e <_printf_float+0x25e>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <_printf_float+0x300>)
 8002cfe:	4659      	mov	r1, fp
 8002d00:	4628      	mov	r0, r5
 8002d02:	47b0      	blx	r6
 8002d04:	3001      	adds	r0, #1
 8002d06:	f43f af52 	beq.w	8002bae <_printf_float+0xae>
 8002d0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	db02      	blt.n	8002d18 <_printf_float+0x218>
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	07d8      	lsls	r0, r3, #31
 8002d16:	d50e      	bpl.n	8002d36 <_printf_float+0x236>
 8002d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d1c:	4659      	mov	r1, fp
 8002d1e:	4628      	mov	r0, r5
 8002d20:	47b0      	blx	r6
 8002d22:	3001      	adds	r0, #1
 8002d24:	f43f af43 	beq.w	8002bae <_printf_float+0xae>
 8002d28:	2700      	movs	r7, #0
 8002d2a:	f104 081a 	add.w	r8, r4, #26
 8002d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d30:	3b01      	subs	r3, #1
 8002d32:	42bb      	cmp	r3, r7
 8002d34:	dc09      	bgt.n	8002d4a <_printf_float+0x24a>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	079f      	lsls	r7, r3, #30
 8002d3a:	f100 80fd 	bmi.w	8002f38 <_printf_float+0x438>
 8002d3e:	68e0      	ldr	r0, [r4, #12]
 8002d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d42:	4298      	cmp	r0, r3
 8002d44:	bfb8      	it	lt
 8002d46:	4618      	movlt	r0, r3
 8002d48:	e733      	b.n	8002bb2 <_printf_float+0xb2>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	4642      	mov	r2, r8
 8002d4e:	4659      	mov	r1, fp
 8002d50:	4628      	mov	r0, r5
 8002d52:	47b0      	blx	r6
 8002d54:	3001      	adds	r0, #1
 8002d56:	f43f af2a 	beq.w	8002bae <_printf_float+0xae>
 8002d5a:	3701      	adds	r7, #1
 8002d5c:	e7e7      	b.n	8002d2e <_printf_float+0x22e>
 8002d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	dc2b      	bgt.n	8002dbc <_printf_float+0x2bc>
 8002d64:	2301      	movs	r3, #1
 8002d66:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <_printf_float+0x300>)
 8002d68:	4659      	mov	r1, fp
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b0      	blx	r6
 8002d6e:	3001      	adds	r0, #1
 8002d70:	f43f af1d 	beq.w	8002bae <_printf_float+0xae>
 8002d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d76:	b923      	cbnz	r3, 8002d82 <_printf_float+0x282>
 8002d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d7a:	b913      	cbnz	r3, 8002d82 <_printf_float+0x282>
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	07d9      	lsls	r1, r3, #31
 8002d80:	d5d9      	bpl.n	8002d36 <_printf_float+0x236>
 8002d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d86:	4659      	mov	r1, fp
 8002d88:	4628      	mov	r0, r5
 8002d8a:	47b0      	blx	r6
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	f43f af0e 	beq.w	8002bae <_printf_float+0xae>
 8002d92:	f04f 0800 	mov.w	r8, #0
 8002d96:	f104 091a 	add.w	r9, r4, #26
 8002d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d9c:	425b      	negs	r3, r3
 8002d9e:	4543      	cmp	r3, r8
 8002da0:	dc01      	bgt.n	8002da6 <_printf_float+0x2a6>
 8002da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002da4:	e797      	b.n	8002cd6 <_printf_float+0x1d6>
 8002da6:	2301      	movs	r3, #1
 8002da8:	464a      	mov	r2, r9
 8002daa:	4659      	mov	r1, fp
 8002dac:	4628      	mov	r0, r5
 8002dae:	47b0      	blx	r6
 8002db0:	3001      	adds	r0, #1
 8002db2:	f43f aefc 	beq.w	8002bae <_printf_float+0xae>
 8002db6:	f108 0801 	add.w	r8, r8, #1
 8002dba:	e7ee      	b.n	8002d9a <_printf_float+0x29a>
 8002dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	bfa8      	it	ge
 8002dc4:	461a      	movge	r2, r3
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	4690      	mov	r8, r2
 8002dca:	dd07      	ble.n	8002ddc <_printf_float+0x2dc>
 8002dcc:	4613      	mov	r3, r2
 8002dce:	4659      	mov	r1, fp
 8002dd0:	463a      	mov	r2, r7
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	47b0      	blx	r6
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	f43f aee9 	beq.w	8002bae <_printf_float+0xae>
 8002ddc:	f104 031a 	add.w	r3, r4, #26
 8002de0:	f04f 0a00 	mov.w	sl, #0
 8002de4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002dea:	e015      	b.n	8002e18 <_printf_float+0x318>
 8002dec:	7fefffff 	.word	0x7fefffff
 8002df0:	080057fc 	.word	0x080057fc
 8002df4:	080057f8 	.word	0x080057f8
 8002df8:	08005804 	.word	0x08005804
 8002dfc:	08005800 	.word	0x08005800
 8002e00:	08005808 	.word	0x08005808
 8002e04:	2301      	movs	r3, #1
 8002e06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e08:	4659      	mov	r1, fp
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	47b0      	blx	r6
 8002e0e:	3001      	adds	r0, #1
 8002e10:	f43f aecd 	beq.w	8002bae <_printf_float+0xae>
 8002e14:	f10a 0a01 	add.w	sl, sl, #1
 8002e18:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002e1c:	eba9 0308 	sub.w	r3, r9, r8
 8002e20:	4553      	cmp	r3, sl
 8002e22:	dcef      	bgt.n	8002e04 <_printf_float+0x304>
 8002e24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	444f      	add	r7, r9
 8002e2c:	db14      	blt.n	8002e58 <_printf_float+0x358>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	07da      	lsls	r2, r3, #31
 8002e32:	d411      	bmi.n	8002e58 <_printf_float+0x358>
 8002e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e38:	eba3 0209 	sub.w	r2, r3, r9
 8002e3c:	eba3 0901 	sub.w	r9, r3, r1
 8002e40:	4591      	cmp	r9, r2
 8002e42:	bfa8      	it	ge
 8002e44:	4691      	movge	r9, r2
 8002e46:	f1b9 0f00 	cmp.w	r9, #0
 8002e4a:	dc0d      	bgt.n	8002e68 <_printf_float+0x368>
 8002e4c:	2700      	movs	r7, #0
 8002e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e52:	f104 081a 	add.w	r8, r4, #26
 8002e56:	e018      	b.n	8002e8a <_printf_float+0x38a>
 8002e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	4628      	mov	r0, r5
 8002e60:	47b0      	blx	r6
 8002e62:	3001      	adds	r0, #1
 8002e64:	d1e6      	bne.n	8002e34 <_printf_float+0x334>
 8002e66:	e6a2      	b.n	8002bae <_printf_float+0xae>
 8002e68:	464b      	mov	r3, r9
 8002e6a:	463a      	mov	r2, r7
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	4628      	mov	r0, r5
 8002e70:	47b0      	blx	r6
 8002e72:	3001      	adds	r0, #1
 8002e74:	d1ea      	bne.n	8002e4c <_printf_float+0x34c>
 8002e76:	e69a      	b.n	8002bae <_printf_float+0xae>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	4628      	mov	r0, r5
 8002e80:	47b0      	blx	r6
 8002e82:	3001      	adds	r0, #1
 8002e84:	f43f ae93 	beq.w	8002bae <_printf_float+0xae>
 8002e88:	3701      	adds	r7, #1
 8002e8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	eba3 0309 	sub.w	r3, r3, r9
 8002e94:	42bb      	cmp	r3, r7
 8002e96:	dcef      	bgt.n	8002e78 <_printf_float+0x378>
 8002e98:	e74d      	b.n	8002d36 <_printf_float+0x236>
 8002e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e9c:	2a01      	cmp	r2, #1
 8002e9e:	dc01      	bgt.n	8002ea4 <_printf_float+0x3a4>
 8002ea0:	07db      	lsls	r3, r3, #31
 8002ea2:	d538      	bpl.n	8002f16 <_printf_float+0x416>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	463a      	mov	r2, r7
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	4628      	mov	r0, r5
 8002eac:	47b0      	blx	r6
 8002eae:	3001      	adds	r0, #1
 8002eb0:	f43f ae7d 	beq.w	8002bae <_printf_float+0xae>
 8002eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002eb8:	4659      	mov	r1, fp
 8002eba:	4628      	mov	r0, r5
 8002ebc:	47b0      	blx	r6
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	f107 0701 	add.w	r7, r7, #1
 8002ec4:	f43f ae73 	beq.w	8002bae <_printf_float+0xae>
 8002ec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f7fd fd67 	bl	80009a8 <__aeabi_dcmpeq>
 8002eda:	b9c0      	cbnz	r0, 8002f0e <_printf_float+0x40e>
 8002edc:	4643      	mov	r3, r8
 8002ede:	463a      	mov	r2, r7
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	47b0      	blx	r6
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d10d      	bne.n	8002f06 <_printf_float+0x406>
 8002eea:	e660      	b.n	8002bae <_printf_float+0xae>
 8002eec:	2301      	movs	r3, #1
 8002eee:	4642      	mov	r2, r8
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	47b0      	blx	r6
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	f43f ae59 	beq.w	8002bae <_printf_float+0xae>
 8002efc:	3701      	adds	r7, #1
 8002efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f00:	3b01      	subs	r3, #1
 8002f02:	42bb      	cmp	r3, r7
 8002f04:	dcf2      	bgt.n	8002eec <_printf_float+0x3ec>
 8002f06:	464b      	mov	r3, r9
 8002f08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f0c:	e6e4      	b.n	8002cd8 <_printf_float+0x1d8>
 8002f0e:	2700      	movs	r7, #0
 8002f10:	f104 081a 	add.w	r8, r4, #26
 8002f14:	e7f3      	b.n	8002efe <_printf_float+0x3fe>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e7e1      	b.n	8002ede <_printf_float+0x3de>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	4659      	mov	r1, fp
 8002f20:	4628      	mov	r0, r5
 8002f22:	47b0      	blx	r6
 8002f24:	3001      	adds	r0, #1
 8002f26:	f43f ae42 	beq.w	8002bae <_printf_float+0xae>
 8002f2a:	3701      	adds	r7, #1
 8002f2c:	68e3      	ldr	r3, [r4, #12]
 8002f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	42bb      	cmp	r3, r7
 8002f34:	dcf1      	bgt.n	8002f1a <_printf_float+0x41a>
 8002f36:	e702      	b.n	8002d3e <_printf_float+0x23e>
 8002f38:	2700      	movs	r7, #0
 8002f3a:	f104 0819 	add.w	r8, r4, #25
 8002f3e:	e7f5      	b.n	8002f2c <_printf_float+0x42c>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f43f ae94 	beq.w	8002c6e <_printf_float+0x16e>
 8002f46:	f04f 0c00 	mov.w	ip, #0
 8002f4a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002f4e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002f52:	6022      	str	r2, [r4, #0]
 8002f54:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002f58:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	463a      	mov	r2, r7
 8002f60:	464b      	mov	r3, r9
 8002f62:	4628      	mov	r0, r5
 8002f64:	f7ff fd3b 	bl	80029de <__cvt>
 8002f68:	4607      	mov	r7, r0
 8002f6a:	e64f      	b.n	8002c0c <_printf_float+0x10c>

08002f6c <_printf_common>:
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	4691      	mov	r9, r2
 8002f72:	461f      	mov	r7, r3
 8002f74:	688a      	ldr	r2, [r1, #8]
 8002f76:	690b      	ldr	r3, [r1, #16]
 8002f78:	4606      	mov	r6, r0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	bfb8      	it	lt
 8002f7e:	4613      	movlt	r3, r2
 8002f80:	f8c9 3000 	str.w	r3, [r9]
 8002f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f88:	460c      	mov	r4, r1
 8002f8a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f8e:	b112      	cbz	r2, 8002f96 <_printf_common+0x2a>
 8002f90:	3301      	adds	r3, #1
 8002f92:	f8c9 3000 	str.w	r3, [r9]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	0699      	lsls	r1, r3, #26
 8002f9a:	bf42      	ittt	mi
 8002f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fa0:	3302      	addmi	r3, #2
 8002fa2:	f8c9 3000 	strmi.w	r3, [r9]
 8002fa6:	6825      	ldr	r5, [r4, #0]
 8002fa8:	f015 0506 	ands.w	r5, r5, #6
 8002fac:	d107      	bne.n	8002fbe <_printf_common+0x52>
 8002fae:	f104 0a19 	add.w	sl, r4, #25
 8002fb2:	68e3      	ldr	r3, [r4, #12]
 8002fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	42ab      	cmp	r3, r5
 8002fbc:	dc29      	bgt.n	8003012 <_printf_common+0xa6>
 8002fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	3300      	adds	r3, #0
 8002fc6:	bf18      	it	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	0692      	lsls	r2, r2, #26
 8002fcc:	d42e      	bmi.n	800302c <_printf_common+0xc0>
 8002fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd2:	4639      	mov	r1, r7
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	47c0      	blx	r8
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d021      	beq.n	8003020 <_printf_common+0xb4>
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	68e5      	ldr	r5, [r4, #12]
 8002fe0:	f003 0306 	and.w	r3, r3, #6
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	bf18      	it	ne
 8002fe8:	2500      	movne	r5, #0
 8002fea:	f8d9 2000 	ldr.w	r2, [r9]
 8002fee:	f04f 0900 	mov.w	r9, #0
 8002ff2:	bf08      	it	eq
 8002ff4:	1aad      	subeq	r5, r5, r2
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	6922      	ldr	r2, [r4, #16]
 8002ffa:	bf08      	it	eq
 8002ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003000:	4293      	cmp	r3, r2
 8003002:	bfc4      	itt	gt
 8003004:	1a9b      	subgt	r3, r3, r2
 8003006:	18ed      	addgt	r5, r5, r3
 8003008:	341a      	adds	r4, #26
 800300a:	454d      	cmp	r5, r9
 800300c:	d11a      	bne.n	8003044 <_printf_common+0xd8>
 800300e:	2000      	movs	r0, #0
 8003010:	e008      	b.n	8003024 <_printf_common+0xb8>
 8003012:	2301      	movs	r3, #1
 8003014:	4652      	mov	r2, sl
 8003016:	4639      	mov	r1, r7
 8003018:	4630      	mov	r0, r6
 800301a:	47c0      	blx	r8
 800301c:	3001      	adds	r0, #1
 800301e:	d103      	bne.n	8003028 <_printf_common+0xbc>
 8003020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003028:	3501      	adds	r5, #1
 800302a:	e7c2      	b.n	8002fb2 <_printf_common+0x46>
 800302c:	2030      	movs	r0, #48	; 0x30
 800302e:	18e1      	adds	r1, r4, r3
 8003030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800303a:	4422      	add	r2, r4
 800303c:	3302      	adds	r3, #2
 800303e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003042:	e7c4      	b.n	8002fce <_printf_common+0x62>
 8003044:	2301      	movs	r3, #1
 8003046:	4622      	mov	r2, r4
 8003048:	4639      	mov	r1, r7
 800304a:	4630      	mov	r0, r6
 800304c:	47c0      	blx	r8
 800304e:	3001      	adds	r0, #1
 8003050:	d0e6      	beq.n	8003020 <_printf_common+0xb4>
 8003052:	f109 0901 	add.w	r9, r9, #1
 8003056:	e7d8      	b.n	800300a <_printf_common+0x9e>

08003058 <_printf_i>:
 8003058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800305c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003060:	460c      	mov	r4, r1
 8003062:	7e09      	ldrb	r1, [r1, #24]
 8003064:	b085      	sub	sp, #20
 8003066:	296e      	cmp	r1, #110	; 0x6e
 8003068:	4617      	mov	r7, r2
 800306a:	4606      	mov	r6, r0
 800306c:	4698      	mov	r8, r3
 800306e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003070:	f000 80b3 	beq.w	80031da <_printf_i+0x182>
 8003074:	d822      	bhi.n	80030bc <_printf_i+0x64>
 8003076:	2963      	cmp	r1, #99	; 0x63
 8003078:	d036      	beq.n	80030e8 <_printf_i+0x90>
 800307a:	d80a      	bhi.n	8003092 <_printf_i+0x3a>
 800307c:	2900      	cmp	r1, #0
 800307e:	f000 80b9 	beq.w	80031f4 <_printf_i+0x19c>
 8003082:	2958      	cmp	r1, #88	; 0x58
 8003084:	f000 8083 	beq.w	800318e <_printf_i+0x136>
 8003088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800308c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003090:	e032      	b.n	80030f8 <_printf_i+0xa0>
 8003092:	2964      	cmp	r1, #100	; 0x64
 8003094:	d001      	beq.n	800309a <_printf_i+0x42>
 8003096:	2969      	cmp	r1, #105	; 0x69
 8003098:	d1f6      	bne.n	8003088 <_printf_i+0x30>
 800309a:	6820      	ldr	r0, [r4, #0]
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	0605      	lsls	r5, r0, #24
 80030a0:	f103 0104 	add.w	r1, r3, #4
 80030a4:	d52a      	bpl.n	80030fc <_printf_i+0xa4>
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da03      	bge.n	80030b6 <_printf_i+0x5e>
 80030ae:	222d      	movs	r2, #45	; 0x2d
 80030b0:	425b      	negs	r3, r3
 80030b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030b6:	486f      	ldr	r0, [pc, #444]	; (8003274 <_printf_i+0x21c>)
 80030b8:	220a      	movs	r2, #10
 80030ba:	e039      	b.n	8003130 <_printf_i+0xd8>
 80030bc:	2973      	cmp	r1, #115	; 0x73
 80030be:	f000 809d 	beq.w	80031fc <_printf_i+0x1a4>
 80030c2:	d808      	bhi.n	80030d6 <_printf_i+0x7e>
 80030c4:	296f      	cmp	r1, #111	; 0x6f
 80030c6:	d020      	beq.n	800310a <_printf_i+0xb2>
 80030c8:	2970      	cmp	r1, #112	; 0x70
 80030ca:	d1dd      	bne.n	8003088 <_printf_i+0x30>
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	f043 0320 	orr.w	r3, r3, #32
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	e003      	b.n	80030de <_printf_i+0x86>
 80030d6:	2975      	cmp	r1, #117	; 0x75
 80030d8:	d017      	beq.n	800310a <_printf_i+0xb2>
 80030da:	2978      	cmp	r1, #120	; 0x78
 80030dc:	d1d4      	bne.n	8003088 <_printf_i+0x30>
 80030de:	2378      	movs	r3, #120	; 0x78
 80030e0:	4865      	ldr	r0, [pc, #404]	; (8003278 <_printf_i+0x220>)
 80030e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030e6:	e055      	b.n	8003194 <_printf_i+0x13c>
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ee:	1d19      	adds	r1, r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6011      	str	r1, [r2, #0]
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e08c      	b.n	8003216 <_printf_i+0x1be>
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003102:	6011      	str	r1, [r2, #0]
 8003104:	bf18      	it	ne
 8003106:	b21b      	sxthne	r3, r3
 8003108:	e7cf      	b.n	80030aa <_printf_i+0x52>
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	6825      	ldr	r5, [r4, #0]
 800310e:	1d18      	adds	r0, r3, #4
 8003110:	6010      	str	r0, [r2, #0]
 8003112:	0628      	lsls	r0, r5, #24
 8003114:	d501      	bpl.n	800311a <_printf_i+0xc2>
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	e002      	b.n	8003120 <_printf_i+0xc8>
 800311a:	0668      	lsls	r0, r5, #25
 800311c:	d5fb      	bpl.n	8003116 <_printf_i+0xbe>
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	296f      	cmp	r1, #111	; 0x6f
 8003122:	bf14      	ite	ne
 8003124:	220a      	movne	r2, #10
 8003126:	2208      	moveq	r2, #8
 8003128:	4852      	ldr	r0, [pc, #328]	; (8003274 <_printf_i+0x21c>)
 800312a:	2100      	movs	r1, #0
 800312c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003130:	6865      	ldr	r5, [r4, #4]
 8003132:	2d00      	cmp	r5, #0
 8003134:	60a5      	str	r5, [r4, #8]
 8003136:	f2c0 8095 	blt.w	8003264 <_printf_i+0x20c>
 800313a:	6821      	ldr	r1, [r4, #0]
 800313c:	f021 0104 	bic.w	r1, r1, #4
 8003140:	6021      	str	r1, [r4, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d13d      	bne.n	80031c2 <_printf_i+0x16a>
 8003146:	2d00      	cmp	r5, #0
 8003148:	f040 808e 	bne.w	8003268 <_printf_i+0x210>
 800314c:	4665      	mov	r5, ip
 800314e:	2a08      	cmp	r2, #8
 8003150:	d10b      	bne.n	800316a <_printf_i+0x112>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	07db      	lsls	r3, r3, #31
 8003156:	d508      	bpl.n	800316a <_printf_i+0x112>
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	6862      	ldr	r2, [r4, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	bfde      	ittt	le
 8003160:	2330      	movle	r3, #48	; 0x30
 8003162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003166:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800316a:	ebac 0305 	sub.w	r3, ip, r5
 800316e:	6123      	str	r3, [r4, #16]
 8003170:	f8cd 8000 	str.w	r8, [sp]
 8003174:	463b      	mov	r3, r7
 8003176:	aa03      	add	r2, sp, #12
 8003178:	4621      	mov	r1, r4
 800317a:	4630      	mov	r0, r6
 800317c:	f7ff fef6 	bl	8002f6c <_printf_common>
 8003180:	3001      	adds	r0, #1
 8003182:	d14d      	bne.n	8003220 <_printf_i+0x1c8>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003188:	b005      	add	sp, #20
 800318a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800318e:	4839      	ldr	r0, [pc, #228]	; (8003274 <_printf_i+0x21c>)
 8003190:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	6821      	ldr	r1, [r4, #0]
 8003198:	1d1d      	adds	r5, r3, #4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6015      	str	r5, [r2, #0]
 800319e:	060a      	lsls	r2, r1, #24
 80031a0:	d50b      	bpl.n	80031ba <_printf_i+0x162>
 80031a2:	07ca      	lsls	r2, r1, #31
 80031a4:	bf44      	itt	mi
 80031a6:	f041 0120 	orrmi.w	r1, r1, #32
 80031aa:	6021      	strmi	r1, [r4, #0]
 80031ac:	b91b      	cbnz	r3, 80031b6 <_printf_i+0x15e>
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	f022 0220 	bic.w	r2, r2, #32
 80031b4:	6022      	str	r2, [r4, #0]
 80031b6:	2210      	movs	r2, #16
 80031b8:	e7b7      	b.n	800312a <_printf_i+0xd2>
 80031ba:	064d      	lsls	r5, r1, #25
 80031bc:	bf48      	it	mi
 80031be:	b29b      	uxthmi	r3, r3
 80031c0:	e7ef      	b.n	80031a2 <_printf_i+0x14a>
 80031c2:	4665      	mov	r5, ip
 80031c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80031c8:	fb02 3311 	mls	r3, r2, r1, r3
 80031cc:	5cc3      	ldrb	r3, [r0, r3]
 80031ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031d2:	460b      	mov	r3, r1
 80031d4:	2900      	cmp	r1, #0
 80031d6:	d1f5      	bne.n	80031c4 <_printf_i+0x16c>
 80031d8:	e7b9      	b.n	800314e <_printf_i+0xf6>
 80031da:	6813      	ldr	r3, [r2, #0]
 80031dc:	6825      	ldr	r5, [r4, #0]
 80031de:	1d18      	adds	r0, r3, #4
 80031e0:	6961      	ldr	r1, [r4, #20]
 80031e2:	6010      	str	r0, [r2, #0]
 80031e4:	0628      	lsls	r0, r5, #24
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	d501      	bpl.n	80031ee <_printf_i+0x196>
 80031ea:	6019      	str	r1, [r3, #0]
 80031ec:	e002      	b.n	80031f4 <_printf_i+0x19c>
 80031ee:	066a      	lsls	r2, r5, #25
 80031f0:	d5fb      	bpl.n	80031ea <_printf_i+0x192>
 80031f2:	8019      	strh	r1, [r3, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	4665      	mov	r5, ip
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	e7b9      	b.n	8003170 <_printf_i+0x118>
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	1d19      	adds	r1, r3, #4
 8003200:	6011      	str	r1, [r2, #0]
 8003202:	681d      	ldr	r5, [r3, #0]
 8003204:	6862      	ldr	r2, [r4, #4]
 8003206:	2100      	movs	r1, #0
 8003208:	4628      	mov	r0, r5
 800320a:	f001 f9a9 	bl	8004560 <memchr>
 800320e:	b108      	cbz	r0, 8003214 <_printf_i+0x1bc>
 8003210:	1b40      	subs	r0, r0, r5
 8003212:	6060      	str	r0, [r4, #4]
 8003214:	6863      	ldr	r3, [r4, #4]
 8003216:	6123      	str	r3, [r4, #16]
 8003218:	2300      	movs	r3, #0
 800321a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321e:	e7a7      	b.n	8003170 <_printf_i+0x118>
 8003220:	6923      	ldr	r3, [r4, #16]
 8003222:	462a      	mov	r2, r5
 8003224:	4639      	mov	r1, r7
 8003226:	4630      	mov	r0, r6
 8003228:	47c0      	blx	r8
 800322a:	3001      	adds	r0, #1
 800322c:	d0aa      	beq.n	8003184 <_printf_i+0x12c>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	079b      	lsls	r3, r3, #30
 8003232:	d413      	bmi.n	800325c <_printf_i+0x204>
 8003234:	68e0      	ldr	r0, [r4, #12]
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	4298      	cmp	r0, r3
 800323a:	bfb8      	it	lt
 800323c:	4618      	movlt	r0, r3
 800323e:	e7a3      	b.n	8003188 <_printf_i+0x130>
 8003240:	2301      	movs	r3, #1
 8003242:	464a      	mov	r2, r9
 8003244:	4639      	mov	r1, r7
 8003246:	4630      	mov	r0, r6
 8003248:	47c0      	blx	r8
 800324a:	3001      	adds	r0, #1
 800324c:	d09a      	beq.n	8003184 <_printf_i+0x12c>
 800324e:	3501      	adds	r5, #1
 8003250:	68e3      	ldr	r3, [r4, #12]
 8003252:	9a03      	ldr	r2, [sp, #12]
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	42ab      	cmp	r3, r5
 8003258:	dcf2      	bgt.n	8003240 <_printf_i+0x1e8>
 800325a:	e7eb      	b.n	8003234 <_printf_i+0x1dc>
 800325c:	2500      	movs	r5, #0
 800325e:	f104 0919 	add.w	r9, r4, #25
 8003262:	e7f5      	b.n	8003250 <_printf_i+0x1f8>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ac      	bne.n	80031c2 <_printf_i+0x16a>
 8003268:	7803      	ldrb	r3, [r0, #0]
 800326a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800326e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003272:	e76c      	b.n	800314e <_printf_i+0xf6>
 8003274:	0800580a 	.word	0x0800580a
 8003278:	0800581b 	.word	0x0800581b

0800327c <iprintf>:
 800327c:	b40f      	push	{r0, r1, r2, r3}
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <iprintf+0x2c>)
 8003280:	b513      	push	{r0, r1, r4, lr}
 8003282:	681c      	ldr	r4, [r3, #0]
 8003284:	b124      	cbz	r4, 8003290 <iprintf+0x14>
 8003286:	69a3      	ldr	r3, [r4, #24]
 8003288:	b913      	cbnz	r3, 8003290 <iprintf+0x14>
 800328a:	4620      	mov	r0, r4
 800328c:	f001 f864 	bl	8004358 <__sinit>
 8003290:	ab05      	add	r3, sp, #20
 8003292:	9a04      	ldr	r2, [sp, #16]
 8003294:	68a1      	ldr	r1, [r4, #8]
 8003296:	4620      	mov	r0, r4
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	f001 fd27 	bl	8004cec <_vfiprintf_r>
 800329e:	b002      	add	sp, #8
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	b004      	add	sp, #16
 80032a6:	4770      	bx	lr
 80032a8:	20000014 	.word	0x20000014

080032ac <_puts_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	460e      	mov	r6, r1
 80032b0:	4605      	mov	r5, r0
 80032b2:	b118      	cbz	r0, 80032bc <_puts_r+0x10>
 80032b4:	6983      	ldr	r3, [r0, #24]
 80032b6:	b90b      	cbnz	r3, 80032bc <_puts_r+0x10>
 80032b8:	f001 f84e 	bl	8004358 <__sinit>
 80032bc:	69ab      	ldr	r3, [r5, #24]
 80032be:	68ac      	ldr	r4, [r5, #8]
 80032c0:	b913      	cbnz	r3, 80032c8 <_puts_r+0x1c>
 80032c2:	4628      	mov	r0, r5
 80032c4:	f001 f848 	bl	8004358 <__sinit>
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <_puts_r+0xac>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d117      	bne.n	80032fe <_puts_r+0x52>
 80032ce:	686c      	ldr	r4, [r5, #4]
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	071b      	lsls	r3, r3, #28
 80032d4:	d51d      	bpl.n	8003312 <_puts_r+0x66>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	b1db      	cbz	r3, 8003312 <_puts_r+0x66>
 80032da:	3e01      	subs	r6, #1
 80032dc:	68a3      	ldr	r3, [r4, #8]
 80032de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	b9e9      	cbnz	r1, 8003324 <_puts_r+0x78>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da2e      	bge.n	800334a <_puts_r+0x9e>
 80032ec:	4622      	mov	r2, r4
 80032ee:	210a      	movs	r1, #10
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 f83f 	bl	8003374 <__swbuf_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	d011      	beq.n	800331e <_puts_r+0x72>
 80032fa:	200a      	movs	r0, #10
 80032fc:	e011      	b.n	8003322 <_puts_r+0x76>
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <_puts_r+0xb0>)
 8003300:	429c      	cmp	r4, r3
 8003302:	d101      	bne.n	8003308 <_puts_r+0x5c>
 8003304:	68ac      	ldr	r4, [r5, #8]
 8003306:	e7e3      	b.n	80032d0 <_puts_r+0x24>
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <_puts_r+0xb4>)
 800330a:	429c      	cmp	r4, r3
 800330c:	bf08      	it	eq
 800330e:	68ec      	ldreq	r4, [r5, #12]
 8003310:	e7de      	b.n	80032d0 <_puts_r+0x24>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f000 f87f 	bl	8003418 <__swsetup_r>
 800331a:	2800      	cmp	r0, #0
 800331c:	d0dd      	beq.n	80032da <_puts_r+0x2e>
 800331e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	2b00      	cmp	r3, #0
 8003326:	da04      	bge.n	8003332 <_puts_r+0x86>
 8003328:	69a2      	ldr	r2, [r4, #24]
 800332a:	429a      	cmp	r2, r3
 800332c:	dc06      	bgt.n	800333c <_puts_r+0x90>
 800332e:	290a      	cmp	r1, #10
 8003330:	d004      	beq.n	800333c <_puts_r+0x90>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	6022      	str	r2, [r4, #0]
 8003338:	7019      	strb	r1, [r3, #0]
 800333a:	e7cf      	b.n	80032dc <_puts_r+0x30>
 800333c:	4622      	mov	r2, r4
 800333e:	4628      	mov	r0, r5
 8003340:	f000 f818 	bl	8003374 <__swbuf_r>
 8003344:	3001      	adds	r0, #1
 8003346:	d1c9      	bne.n	80032dc <_puts_r+0x30>
 8003348:	e7e9      	b.n	800331e <_puts_r+0x72>
 800334a:	200a      	movs	r0, #10
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	6022      	str	r2, [r4, #0]
 8003352:	7018      	strb	r0, [r3, #0]
 8003354:	e7e5      	b.n	8003322 <_puts_r+0x76>
 8003356:	bf00      	nop
 8003358:	0800585c 	.word	0x0800585c
 800335c:	0800587c 	.word	0x0800587c
 8003360:	0800583c 	.word	0x0800583c

08003364 <puts>:
 8003364:	4b02      	ldr	r3, [pc, #8]	; (8003370 <puts+0xc>)
 8003366:	4601      	mov	r1, r0
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	f7ff bf9f 	b.w	80032ac <_puts_r>
 800336e:	bf00      	nop
 8003370:	20000014 	.word	0x20000014

08003374 <__swbuf_r>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	460e      	mov	r6, r1
 8003378:	4614      	mov	r4, r2
 800337a:	4605      	mov	r5, r0
 800337c:	b118      	cbz	r0, 8003386 <__swbuf_r+0x12>
 800337e:	6983      	ldr	r3, [r0, #24]
 8003380:	b90b      	cbnz	r3, 8003386 <__swbuf_r+0x12>
 8003382:	f000 ffe9 	bl	8004358 <__sinit>
 8003386:	4b21      	ldr	r3, [pc, #132]	; (800340c <__swbuf_r+0x98>)
 8003388:	429c      	cmp	r4, r3
 800338a:	d12a      	bne.n	80033e2 <__swbuf_r+0x6e>
 800338c:	686c      	ldr	r4, [r5, #4]
 800338e:	69a3      	ldr	r3, [r4, #24]
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	89a3      	ldrh	r3, [r4, #12]
 8003394:	071a      	lsls	r2, r3, #28
 8003396:	d52e      	bpl.n	80033f6 <__swbuf_r+0x82>
 8003398:	6923      	ldr	r3, [r4, #16]
 800339a:	b363      	cbz	r3, 80033f6 <__swbuf_r+0x82>
 800339c:	6923      	ldr	r3, [r4, #16]
 800339e:	6820      	ldr	r0, [r4, #0]
 80033a0:	b2f6      	uxtb	r6, r6
 80033a2:	1ac0      	subs	r0, r0, r3
 80033a4:	6963      	ldr	r3, [r4, #20]
 80033a6:	4637      	mov	r7, r6
 80033a8:	4283      	cmp	r3, r0
 80033aa:	dc04      	bgt.n	80033b6 <__swbuf_r+0x42>
 80033ac:	4621      	mov	r1, r4
 80033ae:	4628      	mov	r0, r5
 80033b0:	f000 ff68 	bl	8004284 <_fflush_r>
 80033b4:	bb28      	cbnz	r0, 8003402 <__swbuf_r+0x8e>
 80033b6:	68a3      	ldr	r3, [r4, #8]
 80033b8:	3001      	adds	r0, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60a3      	str	r3, [r4, #8]
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	6022      	str	r2, [r4, #0]
 80033c4:	701e      	strb	r6, [r3, #0]
 80033c6:	6963      	ldr	r3, [r4, #20]
 80033c8:	4283      	cmp	r3, r0
 80033ca:	d004      	beq.n	80033d6 <__swbuf_r+0x62>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	07db      	lsls	r3, r3, #31
 80033d0:	d519      	bpl.n	8003406 <__swbuf_r+0x92>
 80033d2:	2e0a      	cmp	r6, #10
 80033d4:	d117      	bne.n	8003406 <__swbuf_r+0x92>
 80033d6:	4621      	mov	r1, r4
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 ff53 	bl	8004284 <_fflush_r>
 80033de:	b190      	cbz	r0, 8003406 <__swbuf_r+0x92>
 80033e0:	e00f      	b.n	8003402 <__swbuf_r+0x8e>
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <__swbuf_r+0x9c>)
 80033e4:	429c      	cmp	r4, r3
 80033e6:	d101      	bne.n	80033ec <__swbuf_r+0x78>
 80033e8:	68ac      	ldr	r4, [r5, #8]
 80033ea:	e7d0      	b.n	800338e <__swbuf_r+0x1a>
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <__swbuf_r+0xa0>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	bf08      	it	eq
 80033f2:	68ec      	ldreq	r4, [r5, #12]
 80033f4:	e7cb      	b.n	800338e <__swbuf_r+0x1a>
 80033f6:	4621      	mov	r1, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 f80d 	bl	8003418 <__swsetup_r>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d0cc      	beq.n	800339c <__swbuf_r+0x28>
 8003402:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003406:	4638      	mov	r0, r7
 8003408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340a:	bf00      	nop
 800340c:	0800585c 	.word	0x0800585c
 8003410:	0800587c 	.word	0x0800587c
 8003414:	0800583c 	.word	0x0800583c

08003418 <__swsetup_r>:
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <__swsetup_r+0xcc>)
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	681d      	ldr	r5, [r3, #0]
 800341e:	4606      	mov	r6, r0
 8003420:	460c      	mov	r4, r1
 8003422:	b125      	cbz	r5, 800342e <__swsetup_r+0x16>
 8003424:	69ab      	ldr	r3, [r5, #24]
 8003426:	b913      	cbnz	r3, 800342e <__swsetup_r+0x16>
 8003428:	4628      	mov	r0, r5
 800342a:	f000 ff95 	bl	8004358 <__sinit>
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <__swsetup_r+0xd0>)
 8003430:	429c      	cmp	r4, r3
 8003432:	d10f      	bne.n	8003454 <__swsetup_r+0x3c>
 8003434:	686c      	ldr	r4, [r5, #4]
 8003436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800343a:	b29a      	uxth	r2, r3
 800343c:	0715      	lsls	r5, r2, #28
 800343e:	d42c      	bmi.n	800349a <__swsetup_r+0x82>
 8003440:	06d0      	lsls	r0, r2, #27
 8003442:	d411      	bmi.n	8003468 <__swsetup_r+0x50>
 8003444:	2209      	movs	r2, #9
 8003446:	6032      	str	r2, [r6, #0]
 8003448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003452:	e03e      	b.n	80034d2 <__swsetup_r+0xba>
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <__swsetup_r+0xd4>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d101      	bne.n	800345e <__swsetup_r+0x46>
 800345a:	68ac      	ldr	r4, [r5, #8]
 800345c:	e7eb      	b.n	8003436 <__swsetup_r+0x1e>
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <__swsetup_r+0xd8>)
 8003460:	429c      	cmp	r4, r3
 8003462:	bf08      	it	eq
 8003464:	68ec      	ldreq	r4, [r5, #12]
 8003466:	e7e6      	b.n	8003436 <__swsetup_r+0x1e>
 8003468:	0751      	lsls	r1, r2, #29
 800346a:	d512      	bpl.n	8003492 <__swsetup_r+0x7a>
 800346c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800346e:	b141      	cbz	r1, 8003482 <__swsetup_r+0x6a>
 8003470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003474:	4299      	cmp	r1, r3
 8003476:	d002      	beq.n	800347e <__swsetup_r+0x66>
 8003478:	4630      	mov	r0, r6
 800347a:	f001 fb69 	bl	8004b50 <_free_r>
 800347e:	2300      	movs	r3, #0
 8003480:	6363      	str	r3, [r4, #52]	; 0x34
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	2300      	movs	r3, #0
 800348c:	6063      	str	r3, [r4, #4]
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	81a3      	strh	r3, [r4, #12]
 800349a:	6923      	ldr	r3, [r4, #16]
 800349c:	b94b      	cbnz	r3, 80034b2 <__swsetup_r+0x9a>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d003      	beq.n	80034b2 <__swsetup_r+0x9a>
 80034aa:	4621      	mov	r1, r4
 80034ac:	4630      	mov	r0, r6
 80034ae:	f001 f80f 	bl	80044d0 <__smakebuf_r>
 80034b2:	89a2      	ldrh	r2, [r4, #12]
 80034b4:	f012 0301 	ands.w	r3, r2, #1
 80034b8:	d00c      	beq.n	80034d4 <__swsetup_r+0xbc>
 80034ba:	2300      	movs	r3, #0
 80034bc:	60a3      	str	r3, [r4, #8]
 80034be:	6963      	ldr	r3, [r4, #20]
 80034c0:	425b      	negs	r3, r3
 80034c2:	61a3      	str	r3, [r4, #24]
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	b953      	cbnz	r3, 80034de <__swsetup_r+0xc6>
 80034c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80034d0:	d1ba      	bne.n	8003448 <__swsetup_r+0x30>
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
 80034d4:	0792      	lsls	r2, r2, #30
 80034d6:	bf58      	it	pl
 80034d8:	6963      	ldrpl	r3, [r4, #20]
 80034da:	60a3      	str	r3, [r4, #8]
 80034dc:	e7f2      	b.n	80034c4 <__swsetup_r+0xac>
 80034de:	2000      	movs	r0, #0
 80034e0:	e7f7      	b.n	80034d2 <__swsetup_r+0xba>
 80034e2:	bf00      	nop
 80034e4:	20000014 	.word	0x20000014
 80034e8:	0800585c 	.word	0x0800585c
 80034ec:	0800587c 	.word	0x0800587c
 80034f0:	0800583c 	.word	0x0800583c

080034f4 <quorem>:
 80034f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	6903      	ldr	r3, [r0, #16]
 80034fa:	690c      	ldr	r4, [r1, #16]
 80034fc:	4680      	mov	r8, r0
 80034fe:	42a3      	cmp	r3, r4
 8003500:	f2c0 8084 	blt.w	800360c <quorem+0x118>
 8003504:	3c01      	subs	r4, #1
 8003506:	f101 0714 	add.w	r7, r1, #20
 800350a:	f100 0614 	add.w	r6, r0, #20
 800350e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003512:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003516:	3501      	adds	r5, #1
 8003518:	fbb0 f5f5 	udiv	r5, r0, r5
 800351c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003520:	eb06 030c 	add.w	r3, r6, ip
 8003524:	eb07 090c 	add.w	r9, r7, ip
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	b39d      	cbz	r5, 8003594 <quorem+0xa0>
 800352c:	f04f 0a00 	mov.w	sl, #0
 8003530:	4638      	mov	r0, r7
 8003532:	46b6      	mov	lr, r6
 8003534:	46d3      	mov	fp, sl
 8003536:	f850 2b04 	ldr.w	r2, [r0], #4
 800353a:	b293      	uxth	r3, r2
 800353c:	fb05 a303 	mla	r3, r5, r3, sl
 8003540:	0c12      	lsrs	r2, r2, #16
 8003542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003546:	fb05 a202 	mla	r2, r5, r2, sl
 800354a:	b29b      	uxth	r3, r3
 800354c:	ebab 0303 	sub.w	r3, fp, r3
 8003550:	f8de b000 	ldr.w	fp, [lr]
 8003554:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003558:	fa1f fb8b 	uxth.w	fp, fp
 800355c:	445b      	add	r3, fp
 800355e:	fa1f fb82 	uxth.w	fp, r2
 8003562:	f8de 2000 	ldr.w	r2, [lr]
 8003566:	4581      	cmp	r9, r0
 8003568:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800356c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003570:	b29b      	uxth	r3, r3
 8003572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003576:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800357a:	f84e 3b04 	str.w	r3, [lr], #4
 800357e:	d2da      	bcs.n	8003536 <quorem+0x42>
 8003580:	f856 300c 	ldr.w	r3, [r6, ip]
 8003584:	b933      	cbnz	r3, 8003594 <quorem+0xa0>
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	3b04      	subs	r3, #4
 800358a:	429e      	cmp	r6, r3
 800358c:	461a      	mov	r2, r3
 800358e:	d331      	bcc.n	80035f4 <quorem+0x100>
 8003590:	f8c8 4010 	str.w	r4, [r8, #16]
 8003594:	4640      	mov	r0, r8
 8003596:	f001 fa05 	bl	80049a4 <__mcmp>
 800359a:	2800      	cmp	r0, #0
 800359c:	db26      	blt.n	80035ec <quorem+0xf8>
 800359e:	4630      	mov	r0, r6
 80035a0:	f04f 0c00 	mov.w	ip, #0
 80035a4:	3501      	adds	r5, #1
 80035a6:	f857 1b04 	ldr.w	r1, [r7], #4
 80035aa:	f8d0 e000 	ldr.w	lr, [r0]
 80035ae:	b28b      	uxth	r3, r1
 80035b0:	ebac 0303 	sub.w	r3, ip, r3
 80035b4:	fa1f f28e 	uxth.w	r2, lr
 80035b8:	4413      	add	r3, r2
 80035ba:	0c0a      	lsrs	r2, r1, #16
 80035bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80035c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035ca:	45b9      	cmp	r9, r7
 80035cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80035d0:	f840 3b04 	str.w	r3, [r0], #4
 80035d4:	d2e7      	bcs.n	80035a6 <quorem+0xb2>
 80035d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80035da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80035de:	b92a      	cbnz	r2, 80035ec <quorem+0xf8>
 80035e0:	3b04      	subs	r3, #4
 80035e2:	429e      	cmp	r6, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	d30b      	bcc.n	8003600 <quorem+0x10c>
 80035e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80035ec:	4628      	mov	r0, r5
 80035ee:	b003      	add	sp, #12
 80035f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d1c9      	bne.n	8003590 <quorem+0x9c>
 80035fc:	3c01      	subs	r4, #1
 80035fe:	e7c4      	b.n	800358a <quorem+0x96>
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	3b04      	subs	r3, #4
 8003604:	2a00      	cmp	r2, #0
 8003606:	d1ef      	bne.n	80035e8 <quorem+0xf4>
 8003608:	3c01      	subs	r4, #1
 800360a:	e7ea      	b.n	80035e2 <quorem+0xee>
 800360c:	2000      	movs	r0, #0
 800360e:	e7ee      	b.n	80035ee <quorem+0xfa>

08003610 <_dtoa_r>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	4616      	mov	r6, r2
 8003616:	461f      	mov	r7, r3
 8003618:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800361a:	b095      	sub	sp, #84	; 0x54
 800361c:	4604      	mov	r4, r0
 800361e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003622:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003626:	b93d      	cbnz	r5, 8003638 <_dtoa_r+0x28>
 8003628:	2010      	movs	r0, #16
 800362a:	f000 ff91 	bl	8004550 <malloc>
 800362e:	6260      	str	r0, [r4, #36]	; 0x24
 8003630:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003634:	6005      	str	r5, [r0, #0]
 8003636:	60c5      	str	r5, [r0, #12]
 8003638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800363a:	6819      	ldr	r1, [r3, #0]
 800363c:	b151      	cbz	r1, 8003654 <_dtoa_r+0x44>
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	2301      	movs	r3, #1
 8003642:	4093      	lsls	r3, r2
 8003644:	604a      	str	r2, [r1, #4]
 8003646:	608b      	str	r3, [r1, #8]
 8003648:	4620      	mov	r0, r4
 800364a:	f000 ffcb 	bl	80045e4 <_Bfree>
 800364e:	2200      	movs	r2, #0
 8003650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	1e3b      	subs	r3, r7, #0
 8003656:	bfaf      	iteee	ge
 8003658:	2300      	movge	r3, #0
 800365a:	2201      	movlt	r2, #1
 800365c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003660:	9303      	strlt	r3, [sp, #12]
 8003662:	bfac      	ite	ge
 8003664:	f8c8 3000 	strge.w	r3, [r8]
 8003668:	f8c8 2000 	strlt.w	r2, [r8]
 800366c:	4bae      	ldr	r3, [pc, #696]	; (8003928 <_dtoa_r+0x318>)
 800366e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003672:	ea33 0308 	bics.w	r3, r3, r8
 8003676:	d11b      	bne.n	80036b0 <_dtoa_r+0xa0>
 8003678:	f242 730f 	movw	r3, #9999	; 0x270f
 800367c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	9b02      	ldr	r3, [sp, #8]
 8003682:	b923      	cbnz	r3, 800368e <_dtoa_r+0x7e>
 8003684:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003688:	2800      	cmp	r0, #0
 800368a:	f000 8545 	beq.w	8004118 <_dtoa_r+0xb08>
 800368e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003690:	b953      	cbnz	r3, 80036a8 <_dtoa_r+0x98>
 8003692:	4ba6      	ldr	r3, [pc, #664]	; (800392c <_dtoa_r+0x31c>)
 8003694:	e021      	b.n	80036da <_dtoa_r+0xca>
 8003696:	4ba6      	ldr	r3, [pc, #664]	; (8003930 <_dtoa_r+0x320>)
 8003698:	9306      	str	r3, [sp, #24]
 800369a:	3308      	adds	r3, #8
 800369c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	9806      	ldr	r0, [sp, #24]
 80036a2:	b015      	add	sp, #84	; 0x54
 80036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a8:	4ba0      	ldr	r3, [pc, #640]	; (800392c <_dtoa_r+0x31c>)
 80036aa:	9306      	str	r3, [sp, #24]
 80036ac:	3303      	adds	r3, #3
 80036ae:	e7f5      	b.n	800369c <_dtoa_r+0x8c>
 80036b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	4630      	mov	r0, r6
 80036ba:	4639      	mov	r1, r7
 80036bc:	f7fd f974 	bl	80009a8 <__aeabi_dcmpeq>
 80036c0:	4682      	mov	sl, r0
 80036c2:	b160      	cbz	r0, 80036de <_dtoa_r+0xce>
 80036c4:	2301      	movs	r3, #1
 80036c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8520 	beq.w	8004112 <_dtoa_r+0xb02>
 80036d2:	4b98      	ldr	r3, [pc, #608]	; (8003934 <_dtoa_r+0x324>)
 80036d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	9306      	str	r3, [sp, #24]
 80036dc:	e7e0      	b.n	80036a0 <_dtoa_r+0x90>
 80036de:	ab12      	add	r3, sp, #72	; 0x48
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	ab13      	add	r3, sp, #76	; 0x4c
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4632      	mov	r2, r6
 80036e8:	463b      	mov	r3, r7
 80036ea:	4620      	mov	r0, r4
 80036ec:	f001 f9d2 	bl	8004a94 <__d2b>
 80036f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80036f4:	4683      	mov	fp, r0
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	d07d      	beq.n	80037f6 <_dtoa_r+0x1e6>
 80036fa:	46b0      	mov	r8, r6
 80036fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003700:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003704:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003708:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800370c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003710:	2200      	movs	r2, #0
 8003712:	4b89      	ldr	r3, [pc, #548]	; (8003938 <_dtoa_r+0x328>)
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fc fd26 	bl	8000168 <__aeabi_dsub>
 800371c:	a37c      	add	r3, pc, #496	; (adr r3, 8003910 <_dtoa_r+0x300>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc fed9 	bl	80004d8 <__aeabi_dmul>
 8003726:	a37c      	add	r3, pc, #496	; (adr r3, 8003918 <_dtoa_r+0x308>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f7fc fd1e 	bl	800016c <__adddf3>
 8003730:	4606      	mov	r6, r0
 8003732:	4628      	mov	r0, r5
 8003734:	460f      	mov	r7, r1
 8003736:	f7fc fe65 	bl	8000404 <__aeabi_i2d>
 800373a:	a379      	add	r3, pc, #484	; (adr r3, 8003920 <_dtoa_r+0x310>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fc feca 	bl	80004d8 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4630      	mov	r0, r6
 800374a:	4639      	mov	r1, r7
 800374c:	f7fc fd0e 	bl	800016c <__adddf3>
 8003750:	4606      	mov	r6, r0
 8003752:	460f      	mov	r7, r1
 8003754:	f7fd f970 	bl	8000a38 <__aeabi_d2iz>
 8003758:	2200      	movs	r2, #0
 800375a:	4682      	mov	sl, r0
 800375c:	2300      	movs	r3, #0
 800375e:	4630      	mov	r0, r6
 8003760:	4639      	mov	r1, r7
 8003762:	f7fd f92b 	bl	80009bc <__aeabi_dcmplt>
 8003766:	b148      	cbz	r0, 800377c <_dtoa_r+0x16c>
 8003768:	4650      	mov	r0, sl
 800376a:	f7fc fe4b 	bl	8000404 <__aeabi_i2d>
 800376e:	4632      	mov	r2, r6
 8003770:	463b      	mov	r3, r7
 8003772:	f7fd f919 	bl	80009a8 <__aeabi_dcmpeq>
 8003776:	b908      	cbnz	r0, 800377c <_dtoa_r+0x16c>
 8003778:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800377c:	f1ba 0f16 	cmp.w	sl, #22
 8003780:	d85a      	bhi.n	8003838 <_dtoa_r+0x228>
 8003782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003786:	496d      	ldr	r1, [pc, #436]	; (800393c <_dtoa_r+0x32c>)
 8003788:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800378c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003790:	f7fd f932 	bl	80009f8 <__aeabi_dcmpgt>
 8003794:	2800      	cmp	r0, #0
 8003796:	d051      	beq.n	800383c <_dtoa_r+0x22c>
 8003798:	2300      	movs	r3, #0
 800379a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800379e:	930d      	str	r3, [sp, #52]	; 0x34
 80037a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037a2:	1b5d      	subs	r5, r3, r5
 80037a4:	1e6b      	subs	r3, r5, #1
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	bf43      	ittte	mi
 80037aa:	2300      	movmi	r3, #0
 80037ac:	f1c5 0901 	rsbmi	r9, r5, #1
 80037b0:	9307      	strmi	r3, [sp, #28]
 80037b2:	f04f 0900 	movpl.w	r9, #0
 80037b6:	f1ba 0f00 	cmp.w	sl, #0
 80037ba:	db41      	blt.n	8003840 <_dtoa_r+0x230>
 80037bc:	9b07      	ldr	r3, [sp, #28]
 80037be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80037c2:	4453      	add	r3, sl
 80037c4:	9307      	str	r3, [sp, #28]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9308      	str	r3, [sp, #32]
 80037ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	f200 808f 	bhi.w	80038f0 <_dtoa_r+0x2e0>
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	bfc4      	itt	gt
 80037d6:	3b04      	subgt	r3, #4
 80037d8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80037da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80037dc:	bfc8      	it	gt
 80037de:	2500      	movgt	r5, #0
 80037e0:	f1a3 0302 	sub.w	r3, r3, #2
 80037e4:	bfd8      	it	le
 80037e6:	2501      	movle	r5, #1
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	f200 808d 	bhi.w	8003908 <_dtoa_r+0x2f8>
 80037ee:	e8df f003 	tbb	[pc, r3]
 80037f2:	7d7b      	.short	0x7d7b
 80037f4:	6f2f      	.short	0x6f2f
 80037f6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80037fa:	441d      	add	r5, r3
 80037fc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003800:	2820      	cmp	r0, #32
 8003802:	dd13      	ble.n	800382c <_dtoa_r+0x21c>
 8003804:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003808:	9b02      	ldr	r3, [sp, #8]
 800380a:	fa08 f800 	lsl.w	r8, r8, r0
 800380e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003812:	fa23 f000 	lsr.w	r0, r3, r0
 8003816:	ea48 0000 	orr.w	r0, r8, r0
 800381a:	f7fc fde3 	bl	80003e4 <__aeabi_ui2d>
 800381e:	2301      	movs	r3, #1
 8003820:	4680      	mov	r8, r0
 8003822:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003826:	3d01      	subs	r5, #1
 8003828:	9310      	str	r3, [sp, #64]	; 0x40
 800382a:	e771      	b.n	8003710 <_dtoa_r+0x100>
 800382c:	9b02      	ldr	r3, [sp, #8]
 800382e:	f1c0 0020 	rsb	r0, r0, #32
 8003832:	fa03 f000 	lsl.w	r0, r3, r0
 8003836:	e7f0      	b.n	800381a <_dtoa_r+0x20a>
 8003838:	2301      	movs	r3, #1
 800383a:	e7b0      	b.n	800379e <_dtoa_r+0x18e>
 800383c:	900d      	str	r0, [sp, #52]	; 0x34
 800383e:	e7af      	b.n	80037a0 <_dtoa_r+0x190>
 8003840:	f1ca 0300 	rsb	r3, sl, #0
 8003844:	9308      	str	r3, [sp, #32]
 8003846:	2300      	movs	r3, #0
 8003848:	eba9 090a 	sub.w	r9, r9, sl
 800384c:	930c      	str	r3, [sp, #48]	; 0x30
 800384e:	e7bc      	b.n	80037ca <_dtoa_r+0x1ba>
 8003850:	2301      	movs	r3, #1
 8003852:	9309      	str	r3, [sp, #36]	; 0x24
 8003854:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003856:	2b00      	cmp	r3, #0
 8003858:	dd74      	ble.n	8003944 <_dtoa_r+0x334>
 800385a:	4698      	mov	r8, r3
 800385c:	9304      	str	r3, [sp, #16]
 800385e:	2200      	movs	r2, #0
 8003860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003862:	6072      	str	r2, [r6, #4]
 8003864:	2204      	movs	r2, #4
 8003866:	f102 0014 	add.w	r0, r2, #20
 800386a:	4298      	cmp	r0, r3
 800386c:	6871      	ldr	r1, [r6, #4]
 800386e:	d96e      	bls.n	800394e <_dtoa_r+0x33e>
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fe83 	bl	800457c <_Balloc>
 8003876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003878:	6030      	str	r0, [r6, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b8 0f0e 	cmp.w	r8, #14
 8003880:	9306      	str	r3, [sp, #24]
 8003882:	f200 80ed 	bhi.w	8003a60 <_dtoa_r+0x450>
 8003886:	2d00      	cmp	r5, #0
 8003888:	f000 80ea 	beq.w	8003a60 <_dtoa_r+0x450>
 800388c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003890:	f1ba 0f00 	cmp.w	sl, #0
 8003894:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003898:	dd77      	ble.n	800398a <_dtoa_r+0x37a>
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <_dtoa_r+0x32c>)
 800389c:	f00a 030f 	and.w	r3, sl, #15
 80038a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80038a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80038a8:	06f0      	lsls	r0, r6, #27
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80038b2:	d568      	bpl.n	8003986 <_dtoa_r+0x376>
 80038b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <_dtoa_r+0x330>)
 80038ba:	2503      	movs	r5, #3
 80038bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038c0:	f7fc ff34 	bl	800072c <__aeabi_ddiv>
 80038c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038c8:	f006 060f 	and.w	r6, r6, #15
 80038cc:	4f1c      	ldr	r7, [pc, #112]	; (8003940 <_dtoa_r+0x330>)
 80038ce:	e04f      	b.n	8003970 <_dtoa_r+0x360>
 80038d0:	2301      	movs	r3, #1
 80038d2:	9309      	str	r3, [sp, #36]	; 0x24
 80038d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038d6:	4453      	add	r3, sl
 80038d8:	f103 0801 	add.w	r8, r3, #1
 80038dc:	9304      	str	r3, [sp, #16]
 80038de:	4643      	mov	r3, r8
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	bfb8      	it	lt
 80038e4:	2301      	movlt	r3, #1
 80038e6:	e7ba      	b.n	800385e <_dtoa_r+0x24e>
 80038e8:	2300      	movs	r3, #0
 80038ea:	e7b2      	b.n	8003852 <_dtoa_r+0x242>
 80038ec:	2300      	movs	r3, #0
 80038ee:	e7f0      	b.n	80038d2 <_dtoa_r+0x2c2>
 80038f0:	2501      	movs	r5, #1
 80038f2:	2300      	movs	r3, #0
 80038f4:	9509      	str	r5, [sp, #36]	; 0x24
 80038f6:	931e      	str	r3, [sp, #120]	; 0x78
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fc:	2200      	movs	r2, #0
 80038fe:	9304      	str	r3, [sp, #16]
 8003900:	4698      	mov	r8, r3
 8003902:	2312      	movs	r3, #18
 8003904:	921f      	str	r2, [sp, #124]	; 0x7c
 8003906:	e7aa      	b.n	800385e <_dtoa_r+0x24e>
 8003908:	2301      	movs	r3, #1
 800390a:	9309      	str	r3, [sp, #36]	; 0x24
 800390c:	e7f4      	b.n	80038f8 <_dtoa_r+0x2e8>
 800390e:	bf00      	nop
 8003910:	636f4361 	.word	0x636f4361
 8003914:	3fd287a7 	.word	0x3fd287a7
 8003918:	8b60c8b3 	.word	0x8b60c8b3
 800391c:	3fc68a28 	.word	0x3fc68a28
 8003920:	509f79fb 	.word	0x509f79fb
 8003924:	3fd34413 	.word	0x3fd34413
 8003928:	7ff00000 	.word	0x7ff00000
 800392c:	08005835 	.word	0x08005835
 8003930:	0800582c 	.word	0x0800582c
 8003934:	08005809 	.word	0x08005809
 8003938:	3ff80000 	.word	0x3ff80000
 800393c:	080058c8 	.word	0x080058c8
 8003940:	080058a0 	.word	0x080058a0
 8003944:	2301      	movs	r3, #1
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	4698      	mov	r8, r3
 800394a:	461a      	mov	r2, r3
 800394c:	e7da      	b.n	8003904 <_dtoa_r+0x2f4>
 800394e:	3101      	adds	r1, #1
 8003950:	6071      	str	r1, [r6, #4]
 8003952:	0052      	lsls	r2, r2, #1
 8003954:	e787      	b.n	8003866 <_dtoa_r+0x256>
 8003956:	07f1      	lsls	r1, r6, #31
 8003958:	d508      	bpl.n	800396c <_dtoa_r+0x35c>
 800395a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800395e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003962:	f7fc fdb9 	bl	80004d8 <__aeabi_dmul>
 8003966:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800396a:	3501      	adds	r5, #1
 800396c:	1076      	asrs	r6, r6, #1
 800396e:	3708      	adds	r7, #8
 8003970:	2e00      	cmp	r6, #0
 8003972:	d1f0      	bne.n	8003956 <_dtoa_r+0x346>
 8003974:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800397c:	f7fc fed6 	bl	800072c <__aeabi_ddiv>
 8003980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003984:	e01b      	b.n	80039be <_dtoa_r+0x3ae>
 8003986:	2502      	movs	r5, #2
 8003988:	e7a0      	b.n	80038cc <_dtoa_r+0x2bc>
 800398a:	f000 80a4 	beq.w	8003ad6 <_dtoa_r+0x4c6>
 800398e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003992:	f1ca 0600 	rsb	r6, sl, #0
 8003996:	4ba0      	ldr	r3, [pc, #640]	; (8003c18 <_dtoa_r+0x608>)
 8003998:	f006 020f 	and.w	r2, r6, #15
 800399c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fd98 	bl	80004d8 <__aeabi_dmul>
 80039a8:	2502      	movs	r5, #2
 80039aa:	2300      	movs	r3, #0
 80039ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039b0:	4f9a      	ldr	r7, [pc, #616]	; (8003c1c <_dtoa_r+0x60c>)
 80039b2:	1136      	asrs	r6, r6, #4
 80039b4:	2e00      	cmp	r6, #0
 80039b6:	f040 8083 	bne.w	8003ac0 <_dtoa_r+0x4b0>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e0      	bne.n	8003980 <_dtoa_r+0x370>
 80039be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 808a 	beq.w	8003ada <_dtoa_r+0x4ca>
 80039c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80039ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039d2:	2200      	movs	r2, #0
 80039d4:	4b92      	ldr	r3, [pc, #584]	; (8003c20 <_dtoa_r+0x610>)
 80039d6:	f7fc fff1 	bl	80009bc <__aeabi_dcmplt>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d07d      	beq.n	8003ada <_dtoa_r+0x4ca>
 80039de:	f1b8 0f00 	cmp.w	r8, #0
 80039e2:	d07a      	beq.n	8003ada <_dtoa_r+0x4ca>
 80039e4:	9b04      	ldr	r3, [sp, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	dd36      	ble.n	8003a58 <_dtoa_r+0x448>
 80039ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039ee:	2200      	movs	r2, #0
 80039f0:	4b8c      	ldr	r3, [pc, #560]	; (8003c24 <_dtoa_r+0x614>)
 80039f2:	f7fc fd71 	bl	80004d8 <__aeabi_dmul>
 80039f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039fa:	9e04      	ldr	r6, [sp, #16]
 80039fc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8003a00:	3501      	adds	r5, #1
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7fc fcfe 	bl	8000404 <__aeabi_i2d>
 8003a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a0c:	f7fc fd64 	bl	80004d8 <__aeabi_dmul>
 8003a10:	2200      	movs	r2, #0
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <_dtoa_r+0x618>)
 8003a14:	f7fc fbaa 	bl	800016c <__adddf3>
 8003a18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003a1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a20:	950b      	str	r5, [sp, #44]	; 0x2c
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d15c      	bne.n	8003ae0 <_dtoa_r+0x4d0>
 8003a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <_dtoa_r+0x61c>)
 8003a2e:	f7fc fb9b 	bl	8000168 <__aeabi_dsub>
 8003a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a34:	462b      	mov	r3, r5
 8003a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a3a:	f7fc ffdd 	bl	80009f8 <__aeabi_dcmpgt>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	f040 8281 	bne.w	8003f46 <_dtoa_r+0x936>
 8003a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003a4e:	f7fc ffb5 	bl	80009bc <__aeabi_dcmplt>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	f040 8275 	bne.w	8003f42 <_dtoa_r+0x932>
 8003a58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003a5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f2c0 814b 	blt.w	8003cfe <_dtoa_r+0x6ee>
 8003a68:	f1ba 0f0e 	cmp.w	sl, #14
 8003a6c:	f300 8147 	bgt.w	8003cfe <_dtoa_r+0x6ee>
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <_dtoa_r+0x608>)
 8003a72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f280 80d7 	bge.w	8003c34 <_dtoa_r+0x624>
 8003a86:	f1b8 0f00 	cmp.w	r8, #0
 8003a8a:	f300 80d3 	bgt.w	8003c34 <_dtoa_r+0x624>
 8003a8e:	f040 8257 	bne.w	8003f40 <_dtoa_r+0x930>
 8003a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a96:	2200      	movs	r2, #0
 8003a98:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <_dtoa_r+0x61c>)
 8003a9a:	f7fc fd1d 	bl	80004d8 <__aeabi_dmul>
 8003a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003aa2:	f7fc ff9f 	bl	80009e4 <__aeabi_dcmpge>
 8003aa6:	4646      	mov	r6, r8
 8003aa8:	4647      	mov	r7, r8
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	f040 822d 	bne.w	8003f0a <_dtoa_r+0x8fa>
 8003ab0:	9b06      	ldr	r3, [sp, #24]
 8003ab2:	9a06      	ldr	r2, [sp, #24]
 8003ab4:	1c5d      	adds	r5, r3, #1
 8003ab6:	2331      	movs	r3, #49	; 0x31
 8003ab8:	f10a 0a01 	add.w	sl, sl, #1
 8003abc:	7013      	strb	r3, [r2, #0]
 8003abe:	e228      	b.n	8003f12 <_dtoa_r+0x902>
 8003ac0:	07f2      	lsls	r2, r6, #31
 8003ac2:	d505      	bpl.n	8003ad0 <_dtoa_r+0x4c0>
 8003ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac8:	f7fc fd06 	bl	80004d8 <__aeabi_dmul>
 8003acc:	2301      	movs	r3, #1
 8003ace:	3501      	adds	r5, #1
 8003ad0:	1076      	asrs	r6, r6, #1
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	e76e      	b.n	80039b4 <_dtoa_r+0x3a4>
 8003ad6:	2502      	movs	r5, #2
 8003ad8:	e771      	b.n	80039be <_dtoa_r+0x3ae>
 8003ada:	4657      	mov	r7, sl
 8003adc:	4646      	mov	r6, r8
 8003ade:	e790      	b.n	8003a02 <_dtoa_r+0x3f2>
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <_dtoa_r+0x608>)
 8003ae2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ae6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d048      	beq.n	8003b82 <_dtoa_r+0x572>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	2000      	movs	r0, #0
 8003af6:	494e      	ldr	r1, [pc, #312]	; (8003c30 <_dtoa_r+0x620>)
 8003af8:	f7fc fe18 	bl	800072c <__aeabi_ddiv>
 8003afc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b00:	f7fc fb32 	bl	8000168 <__aeabi_dsub>
 8003b04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b08:	9d06      	ldr	r5, [sp, #24]
 8003b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b0e:	f7fc ff93 	bl	8000a38 <__aeabi_d2iz>
 8003b12:	9011      	str	r0, [sp, #68]	; 0x44
 8003b14:	f7fc fc76 	bl	8000404 <__aeabi_i2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b20:	f7fc fb22 	bl	8000168 <__aeabi_dsub>
 8003b24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b2a:	3330      	adds	r3, #48	; 0x30
 8003b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8003b30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b34:	f7fc ff42 	bl	80009bc <__aeabi_dcmplt>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d163      	bne.n	8003c04 <_dtoa_r+0x5f4>
 8003b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b40:	2000      	movs	r0, #0
 8003b42:	4937      	ldr	r1, [pc, #220]	; (8003c20 <_dtoa_r+0x610>)
 8003b44:	f7fc fb10 	bl	8000168 <__aeabi_dsub>
 8003b48:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b4c:	f7fc ff36 	bl	80009bc <__aeabi_dcmplt>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f040 80b5 	bne.w	8003cc0 <_dtoa_r+0x6b0>
 8003b56:	9b06      	ldr	r3, [sp, #24]
 8003b58:	1aeb      	subs	r3, r5, r3
 8003b5a:	429e      	cmp	r6, r3
 8003b5c:	f77f af7c 	ble.w	8003a58 <_dtoa_r+0x448>
 8003b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b64:	2200      	movs	r2, #0
 8003b66:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <_dtoa_r+0x614>)
 8003b68:	f7fc fcb6 	bl	80004d8 <__aeabi_dmul>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <_dtoa_r+0x614>)
 8003b78:	f7fc fcae 	bl	80004d8 <__aeabi_dmul>
 8003b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b80:	e7c3      	b.n	8003b0a <_dtoa_r+0x4fa>
 8003b82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003b86:	f7fc fca7 	bl	80004d8 <__aeabi_dmul>
 8003b8a:	9b06      	ldr	r3, [sp, #24]
 8003b8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b90:	199d      	adds	r5, r3, r6
 8003b92:	461e      	mov	r6, r3
 8003b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b98:	f7fc ff4e 	bl	8000a38 <__aeabi_d2iz>
 8003b9c:	9011      	str	r0, [sp, #68]	; 0x44
 8003b9e:	f7fc fc31 	bl	8000404 <__aeabi_i2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003baa:	f7fc fadd 	bl	8000168 <__aeabi_dsub>
 8003bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bb4:	3330      	adds	r3, #48	; 0x30
 8003bb6:	f806 3b01 	strb.w	r3, [r6], #1
 8003bba:	42ae      	cmp	r6, r5
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	d124      	bne.n	8003c0c <_dtoa_r+0x5fc>
 8003bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <_dtoa_r+0x620>)
 8003bc8:	f7fc fad0 	bl	800016c <__adddf3>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bd4:	f7fc ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d171      	bne.n	8003cc0 <_dtoa_r+0x6b0>
 8003bdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003be0:	2000      	movs	r0, #0
 8003be2:	4913      	ldr	r1, [pc, #76]	; (8003c30 <_dtoa_r+0x620>)
 8003be4:	f7fc fac0 	bl	8000168 <__aeabi_dsub>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bf0:	f7fc fee4 	bl	80009bc <__aeabi_dcmplt>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f43f af2f 	beq.w	8003a58 <_dtoa_r+0x448>
 8003bfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003bfe:	1e6a      	subs	r2, r5, #1
 8003c00:	2b30      	cmp	r3, #48	; 0x30
 8003c02:	d001      	beq.n	8003c08 <_dtoa_r+0x5f8>
 8003c04:	46ba      	mov	sl, r7
 8003c06:	e04a      	b.n	8003c9e <_dtoa_r+0x68e>
 8003c08:	4615      	mov	r5, r2
 8003c0a:	e7f6      	b.n	8003bfa <_dtoa_r+0x5ea>
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <_dtoa_r+0x614>)
 8003c0e:	f7fc fc63 	bl	80004d8 <__aeabi_dmul>
 8003c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c16:	e7bd      	b.n	8003b94 <_dtoa_r+0x584>
 8003c18:	080058c8 	.word	0x080058c8
 8003c1c:	080058a0 	.word	0x080058a0
 8003c20:	3ff00000 	.word	0x3ff00000
 8003c24:	40240000 	.word	0x40240000
 8003c28:	401c0000 	.word	0x401c0000
 8003c2c:	40140000 	.word	0x40140000
 8003c30:	3fe00000 	.word	0x3fe00000
 8003c34:	9d06      	ldr	r5, [sp, #24]
 8003c36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c3e:	4630      	mov	r0, r6
 8003c40:	4639      	mov	r1, r7
 8003c42:	f7fc fd73 	bl	800072c <__aeabi_ddiv>
 8003c46:	f7fc fef7 	bl	8000a38 <__aeabi_d2iz>
 8003c4a:	4681      	mov	r9, r0
 8003c4c:	f7fc fbda 	bl	8000404 <__aeabi_i2d>
 8003c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c54:	f7fc fc40 	bl	80004d8 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	4639      	mov	r1, r7
 8003c60:	f7fc fa82 	bl	8000168 <__aeabi_dsub>
 8003c64:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003c68:	f805 6b01 	strb.w	r6, [r5], #1
 8003c6c:	9e06      	ldr	r6, [sp, #24]
 8003c6e:	4602      	mov	r2, r0
 8003c70:	1bae      	subs	r6, r5, r6
 8003c72:	45b0      	cmp	r8, r6
 8003c74:	460b      	mov	r3, r1
 8003c76:	d135      	bne.n	8003ce4 <_dtoa_r+0x6d4>
 8003c78:	f7fc fa78 	bl	800016c <__adddf3>
 8003c7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c80:	4606      	mov	r6, r0
 8003c82:	460f      	mov	r7, r1
 8003c84:	f7fc feb8 	bl	80009f8 <__aeabi_dcmpgt>
 8003c88:	b9c8      	cbnz	r0, 8003cbe <_dtoa_r+0x6ae>
 8003c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	4639      	mov	r1, r7
 8003c92:	f7fc fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8003c96:	b110      	cbz	r0, 8003c9e <_dtoa_r+0x68e>
 8003c98:	f019 0f01 	tst.w	r9, #1
 8003c9c:	d10f      	bne.n	8003cbe <_dtoa_r+0x6ae>
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 fc9f 	bl	80045e4 <_Bfree>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003caa:	702b      	strb	r3, [r5, #0]
 8003cac:	f10a 0301 	add.w	r3, sl, #1
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f43f acf3 	beq.w	80036a0 <_dtoa_r+0x90>
 8003cba:	601d      	str	r5, [r3, #0]
 8003cbc:	e4f0      	b.n	80036a0 <_dtoa_r+0x90>
 8003cbe:	4657      	mov	r7, sl
 8003cc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003cc4:	1e6b      	subs	r3, r5, #1
 8003cc6:	2a39      	cmp	r2, #57	; 0x39
 8003cc8:	d106      	bne.n	8003cd8 <_dtoa_r+0x6c8>
 8003cca:	9a06      	ldr	r2, [sp, #24]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <_dtoa_r+0x6d0>
 8003cd0:	2330      	movs	r3, #48	; 0x30
 8003cd2:	7013      	strb	r3, [r2, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	3701      	adds	r7, #1
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	3201      	adds	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e791      	b.n	8003c04 <_dtoa_r+0x5f4>
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	e7ed      	b.n	8003cc0 <_dtoa_r+0x6b0>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <_dtoa_r+0x93c>)
 8003ce8:	f7fc fbf6 	bl	80004d8 <__aeabi_dmul>
 8003cec:	2200      	movs	r2, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	4606      	mov	r6, r0
 8003cf2:	460f      	mov	r7, r1
 8003cf4:	f7fc fe58 	bl	80009a8 <__aeabi_dcmpeq>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d09e      	beq.n	8003c3a <_dtoa_r+0x62a>
 8003cfc:	e7cf      	b.n	8003c9e <_dtoa_r+0x68e>
 8003cfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d00:	2a00      	cmp	r2, #0
 8003d02:	f000 8088 	beq.w	8003e16 <_dtoa_r+0x806>
 8003d06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d08:	2a01      	cmp	r2, #1
 8003d0a:	dc6d      	bgt.n	8003de8 <_dtoa_r+0x7d8>
 8003d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d066      	beq.n	8003de0 <_dtoa_r+0x7d0>
 8003d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d16:	464d      	mov	r5, r9
 8003d18:	9e08      	ldr	r6, [sp, #32]
 8003d1a:	9a07      	ldr	r2, [sp, #28]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	441a      	add	r2, r3
 8003d20:	4620      	mov	r0, r4
 8003d22:	4499      	add	r9, r3
 8003d24:	9207      	str	r2, [sp, #28]
 8003d26:	f000 fcfd 	bl	8004724 <__i2b>
 8003d2a:	4607      	mov	r7, r0
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	dd0b      	ble.n	8003d48 <_dtoa_r+0x738>
 8003d30:	9b07      	ldr	r3, [sp, #28]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dd08      	ble.n	8003d48 <_dtoa_r+0x738>
 8003d36:	42ab      	cmp	r3, r5
 8003d38:	bfa8      	it	ge
 8003d3a:	462b      	movge	r3, r5
 8003d3c:	9a07      	ldr	r2, [sp, #28]
 8003d3e:	eba9 0903 	sub.w	r9, r9, r3
 8003d42:	1aed      	subs	r5, r5, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	9307      	str	r3, [sp, #28]
 8003d48:	9b08      	ldr	r3, [sp, #32]
 8003d4a:	b1eb      	cbz	r3, 8003d88 <_dtoa_r+0x778>
 8003d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d065      	beq.n	8003e1e <_dtoa_r+0x80e>
 8003d52:	b18e      	cbz	r6, 8003d78 <_dtoa_r+0x768>
 8003d54:	4639      	mov	r1, r7
 8003d56:	4632      	mov	r2, r6
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 fd81 	bl	8004860 <__pow5mult>
 8003d5e:	465a      	mov	r2, fp
 8003d60:	4601      	mov	r1, r0
 8003d62:	4607      	mov	r7, r0
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 fce6 	bl	8004736 <__multiply>
 8003d6a:	4659      	mov	r1, fp
 8003d6c:	900a      	str	r0, [sp, #40]	; 0x28
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 fc38 	bl	80045e4 <_Bfree>
 8003d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d76:	469b      	mov	fp, r3
 8003d78:	9b08      	ldr	r3, [sp, #32]
 8003d7a:	1b9a      	subs	r2, r3, r6
 8003d7c:	d004      	beq.n	8003d88 <_dtoa_r+0x778>
 8003d7e:	4659      	mov	r1, fp
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 fd6d 	bl	8004860 <__pow5mult>
 8003d86:	4683      	mov	fp, r0
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f000 fcca 	bl	8004724 <__i2b>
 8003d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d92:	4606      	mov	r6, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 81c6 	beq.w	8004126 <_dtoa_r+0xb16>
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f000 fd5e 	bl	8004860 <__pow5mult>
 8003da4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003da6:	4606      	mov	r6, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	dc3e      	bgt.n	8003e2a <_dtoa_r+0x81a>
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d137      	bne.n	8003e22 <_dtoa_r+0x812>
 8003db2:	9b03      	ldr	r3, [sp, #12]
 8003db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d134      	bne.n	8003e26 <_dtoa_r+0x816>
 8003dbc:	9b03      	ldr	r3, [sp, #12]
 8003dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	0d1b      	lsrs	r3, r3, #20
 8003dc4:	051b      	lsls	r3, r3, #20
 8003dc6:	b12b      	cbz	r3, 8003dd4 <_dtoa_r+0x7c4>
 8003dc8:	9b07      	ldr	r3, [sp, #28]
 8003dca:	f109 0901 	add.w	r9, r9, #1
 8003dce:	3301      	adds	r3, #1
 8003dd0:	9307      	str	r3, [sp, #28]
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	9308      	str	r3, [sp, #32]
 8003dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d128      	bne.n	8003e2e <_dtoa_r+0x81e>
 8003ddc:	2001      	movs	r0, #1
 8003dde:	e02e      	b.n	8003e3e <_dtoa_r+0x82e>
 8003de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003de2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003de6:	e796      	b.n	8003d16 <_dtoa_r+0x706>
 8003de8:	9b08      	ldr	r3, [sp, #32]
 8003dea:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003dee:	42b3      	cmp	r3, r6
 8003df0:	bfb7      	itett	lt
 8003df2:	9b08      	ldrlt	r3, [sp, #32]
 8003df4:	1b9e      	subge	r6, r3, r6
 8003df6:	1af2      	sublt	r2, r6, r3
 8003df8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003dfa:	bfbf      	itttt	lt
 8003dfc:	9608      	strlt	r6, [sp, #32]
 8003dfe:	189b      	addlt	r3, r3, r2
 8003e00:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003e02:	2600      	movlt	r6, #0
 8003e04:	f1b8 0f00 	cmp.w	r8, #0
 8003e08:	bfb9      	ittee	lt
 8003e0a:	eba9 0508 	sublt.w	r5, r9, r8
 8003e0e:	2300      	movlt	r3, #0
 8003e10:	464d      	movge	r5, r9
 8003e12:	4643      	movge	r3, r8
 8003e14:	e781      	b.n	8003d1a <_dtoa_r+0x70a>
 8003e16:	9e08      	ldr	r6, [sp, #32]
 8003e18:	464d      	mov	r5, r9
 8003e1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e1c:	e786      	b.n	8003d2c <_dtoa_r+0x71c>
 8003e1e:	9a08      	ldr	r2, [sp, #32]
 8003e20:	e7ad      	b.n	8003d7e <_dtoa_r+0x76e>
 8003e22:	2300      	movs	r3, #0
 8003e24:	e7d6      	b.n	8003dd4 <_dtoa_r+0x7c4>
 8003e26:	9b02      	ldr	r3, [sp, #8]
 8003e28:	e7d4      	b.n	8003dd4 <_dtoa_r+0x7c4>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9308      	str	r3, [sp, #32]
 8003e2e:	6933      	ldr	r3, [r6, #16]
 8003e30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003e34:	6918      	ldr	r0, [r3, #16]
 8003e36:	f000 fc27 	bl	8004688 <__hi0bits>
 8003e3a:	f1c0 0020 	rsb	r0, r0, #32
 8003e3e:	9b07      	ldr	r3, [sp, #28]
 8003e40:	4418      	add	r0, r3
 8003e42:	f010 001f 	ands.w	r0, r0, #31
 8003e46:	d047      	beq.n	8003ed8 <_dtoa_r+0x8c8>
 8003e48:	f1c0 0320 	rsb	r3, r0, #32
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	dd3b      	ble.n	8003ec8 <_dtoa_r+0x8b8>
 8003e50:	9b07      	ldr	r3, [sp, #28]
 8003e52:	f1c0 001c 	rsb	r0, r0, #28
 8003e56:	4481      	add	r9, r0
 8003e58:	4405      	add	r5, r0
 8003e5a:	4403      	add	r3, r0
 8003e5c:	9307      	str	r3, [sp, #28]
 8003e5e:	f1b9 0f00 	cmp.w	r9, #0
 8003e62:	dd05      	ble.n	8003e70 <_dtoa_r+0x860>
 8003e64:	4659      	mov	r1, fp
 8003e66:	464a      	mov	r2, r9
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f000 fd47 	bl	80048fc <__lshift>
 8003e6e:	4683      	mov	fp, r0
 8003e70:	9b07      	ldr	r3, [sp, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dd05      	ble.n	8003e82 <_dtoa_r+0x872>
 8003e76:	4631      	mov	r1, r6
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 fd3e 	bl	80048fc <__lshift>
 8003e80:	4606      	mov	r6, r0
 8003e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e84:	b353      	cbz	r3, 8003edc <_dtoa_r+0x8cc>
 8003e86:	4631      	mov	r1, r6
 8003e88:	4658      	mov	r0, fp
 8003e8a:	f000 fd8b 	bl	80049a4 <__mcmp>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	da24      	bge.n	8003edc <_dtoa_r+0x8cc>
 8003e92:	2300      	movs	r3, #0
 8003e94:	4659      	mov	r1, fp
 8003e96:	220a      	movs	r2, #10
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 fbba 	bl	8004612 <__multadd>
 8003e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ea4:	4683      	mov	fp, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8144 	beq.w	8004134 <_dtoa_r+0xb24>
 8003eac:	2300      	movs	r3, #0
 8003eae:	4639      	mov	r1, r7
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f000 fbad 	bl	8004612 <__multadd>
 8003eb8:	9b04      	ldr	r3, [sp, #16]
 8003eba:	4607      	mov	r7, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dc4d      	bgt.n	8003f5c <_dtoa_r+0x94c>
 8003ec0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	dd4a      	ble.n	8003f5c <_dtoa_r+0x94c>
 8003ec6:	e011      	b.n	8003eec <_dtoa_r+0x8dc>
 8003ec8:	d0c9      	beq.n	8003e5e <_dtoa_r+0x84e>
 8003eca:	9a07      	ldr	r2, [sp, #28]
 8003ecc:	331c      	adds	r3, #28
 8003ece:	441a      	add	r2, r3
 8003ed0:	4499      	add	r9, r3
 8003ed2:	441d      	add	r5, r3
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	e7c1      	b.n	8003e5c <_dtoa_r+0x84c>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e7f6      	b.n	8003eca <_dtoa_r+0x8ba>
 8003edc:	f1b8 0f00 	cmp.w	r8, #0
 8003ee0:	dc36      	bgt.n	8003f50 <_dtoa_r+0x940>
 8003ee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	dd33      	ble.n	8003f50 <_dtoa_r+0x940>
 8003ee8:	f8cd 8010 	str.w	r8, [sp, #16]
 8003eec:	9b04      	ldr	r3, [sp, #16]
 8003eee:	b963      	cbnz	r3, 8003f0a <_dtoa_r+0x8fa>
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f000 fb8c 	bl	8004612 <__multadd>
 8003efa:	4601      	mov	r1, r0
 8003efc:	4606      	mov	r6, r0
 8003efe:	4658      	mov	r0, fp
 8003f00:	f000 fd50 	bl	80049a4 <__mcmp>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	f73f add3 	bgt.w	8003ab0 <_dtoa_r+0x4a0>
 8003f0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f0c:	9d06      	ldr	r5, [sp, #24]
 8003f0e:	ea6f 0a03 	mvn.w	sl, r3
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	4631      	mov	r1, r6
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 fb63 	bl	80045e4 <_Bfree>
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	f43f aebd 	beq.w	8003c9e <_dtoa_r+0x68e>
 8003f24:	f1b9 0f00 	cmp.w	r9, #0
 8003f28:	d005      	beq.n	8003f36 <_dtoa_r+0x926>
 8003f2a:	45b9      	cmp	r9, r7
 8003f2c:	d003      	beq.n	8003f36 <_dtoa_r+0x926>
 8003f2e:	4649      	mov	r1, r9
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 fb57 	bl	80045e4 <_Bfree>
 8003f36:	4639      	mov	r1, r7
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fb53 	bl	80045e4 <_Bfree>
 8003f3e:	e6ae      	b.n	8003c9e <_dtoa_r+0x68e>
 8003f40:	2600      	movs	r6, #0
 8003f42:	4637      	mov	r7, r6
 8003f44:	e7e1      	b.n	8003f0a <_dtoa_r+0x8fa>
 8003f46:	46ba      	mov	sl, r7
 8003f48:	4637      	mov	r7, r6
 8003f4a:	e5b1      	b.n	8003ab0 <_dtoa_r+0x4a0>
 8003f4c:	40240000 	.word	0x40240000
 8003f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f52:	f8cd 8010 	str.w	r8, [sp, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80f3 	beq.w	8004142 <_dtoa_r+0xb32>
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	dd05      	ble.n	8003f6c <_dtoa_r+0x95c>
 8003f60:	4639      	mov	r1, r7
 8003f62:	462a      	mov	r2, r5
 8003f64:	4620      	mov	r0, r4
 8003f66:	f000 fcc9 	bl	80048fc <__lshift>
 8003f6a:	4607      	mov	r7, r0
 8003f6c:	9b08      	ldr	r3, [sp, #32]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04c      	beq.n	800400c <_dtoa_r+0x9fc>
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 fb01 	bl	800457c <_Balloc>
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	f107 010c 	add.w	r1, r7, #12
 8003f82:	3202      	adds	r2, #2
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	300c      	adds	r0, #12
 8003f88:	f7fe fd16 	bl	80029b8 <memcpy>
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fcb3 	bl	80048fc <__lshift>
 8003f96:	46b9      	mov	r9, r7
 8003f98:	4607      	mov	r7, r0
 8003f9a:	9b06      	ldr	r3, [sp, #24]
 8003f9c:	9307      	str	r3, [sp, #28]
 8003f9e:	9b02      	ldr	r3, [sp, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	9308      	str	r3, [sp, #32]
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4658      	mov	r0, fp
 8003faa:	f7ff faa3 	bl	80034f4 <quorem>
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003fb6:	4658      	mov	r0, fp
 8003fb8:	f000 fcf4 	bl	80049a4 <__mcmp>
 8003fbc:	463a      	mov	r2, r7
 8003fbe:	9002      	str	r0, [sp, #8]
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f000 fd08 	bl	80049d8 <__mdiff>
 8003fc8:	68c3      	ldr	r3, [r0, #12]
 8003fca:	4602      	mov	r2, r0
 8003fcc:	bb03      	cbnz	r3, 8004010 <_dtoa_r+0xa00>
 8003fce:	4601      	mov	r1, r0
 8003fd0:	9009      	str	r0, [sp, #36]	; 0x24
 8003fd2:	4658      	mov	r0, fp
 8003fd4:	f000 fce6 	bl	80049a4 <__mcmp>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4620      	mov	r0, r4
 8003fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fe2:	f000 faff 	bl	80045e4 <_Bfree>
 8003fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fe8:	b9a3      	cbnz	r3, 8004014 <_dtoa_r+0xa04>
 8003fea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003fec:	b992      	cbnz	r2, 8004014 <_dtoa_r+0xa04>
 8003fee:	9a08      	ldr	r2, [sp, #32]
 8003ff0:	b982      	cbnz	r2, 8004014 <_dtoa_r+0xa04>
 8003ff2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003ff6:	d029      	beq.n	800404c <_dtoa_r+0xa3c>
 8003ff8:	9b02      	ldr	r3, [sp, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	dd01      	ble.n	8004002 <_dtoa_r+0x9f2>
 8003ffe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004002:	9b07      	ldr	r3, [sp, #28]
 8004004:	1c5d      	adds	r5, r3, #1
 8004006:	f883 8000 	strb.w	r8, [r3]
 800400a:	e784      	b.n	8003f16 <_dtoa_r+0x906>
 800400c:	4638      	mov	r0, r7
 800400e:	e7c2      	b.n	8003f96 <_dtoa_r+0x986>
 8004010:	2301      	movs	r3, #1
 8004012:	e7e3      	b.n	8003fdc <_dtoa_r+0x9cc>
 8004014:	9a02      	ldr	r2, [sp, #8]
 8004016:	2a00      	cmp	r2, #0
 8004018:	db04      	blt.n	8004024 <_dtoa_r+0xa14>
 800401a:	d123      	bne.n	8004064 <_dtoa_r+0xa54>
 800401c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800401e:	bb0a      	cbnz	r2, 8004064 <_dtoa_r+0xa54>
 8004020:	9a08      	ldr	r2, [sp, #32]
 8004022:	b9fa      	cbnz	r2, 8004064 <_dtoa_r+0xa54>
 8004024:	2b00      	cmp	r3, #0
 8004026:	ddec      	ble.n	8004002 <_dtoa_r+0x9f2>
 8004028:	4659      	mov	r1, fp
 800402a:	2201      	movs	r2, #1
 800402c:	4620      	mov	r0, r4
 800402e:	f000 fc65 	bl	80048fc <__lshift>
 8004032:	4631      	mov	r1, r6
 8004034:	4683      	mov	fp, r0
 8004036:	f000 fcb5 	bl	80049a4 <__mcmp>
 800403a:	2800      	cmp	r0, #0
 800403c:	dc03      	bgt.n	8004046 <_dtoa_r+0xa36>
 800403e:	d1e0      	bne.n	8004002 <_dtoa_r+0x9f2>
 8004040:	f018 0f01 	tst.w	r8, #1
 8004044:	d0dd      	beq.n	8004002 <_dtoa_r+0x9f2>
 8004046:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800404a:	d1d8      	bne.n	8003ffe <_dtoa_r+0x9ee>
 800404c:	9b07      	ldr	r3, [sp, #28]
 800404e:	9a07      	ldr	r2, [sp, #28]
 8004050:	1c5d      	adds	r5, r3, #1
 8004052:	2339      	movs	r3, #57	; 0x39
 8004054:	7013      	strb	r3, [r2, #0]
 8004056:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800405a:	1e6a      	subs	r2, r5, #1
 800405c:	2b39      	cmp	r3, #57	; 0x39
 800405e:	d04d      	beq.n	80040fc <_dtoa_r+0xaec>
 8004060:	3301      	adds	r3, #1
 8004062:	e052      	b.n	800410a <_dtoa_r+0xafa>
 8004064:	9a07      	ldr	r2, [sp, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f102 0501 	add.w	r5, r2, #1
 800406c:	dd06      	ble.n	800407c <_dtoa_r+0xa6c>
 800406e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004072:	d0eb      	beq.n	800404c <_dtoa_r+0xa3c>
 8004074:	f108 0801 	add.w	r8, r8, #1
 8004078:	9b07      	ldr	r3, [sp, #28]
 800407a:	e7c4      	b.n	8004006 <_dtoa_r+0x9f6>
 800407c:	9b06      	ldr	r3, [sp, #24]
 800407e:	9a04      	ldr	r2, [sp, #16]
 8004080:	1aeb      	subs	r3, r5, r3
 8004082:	4293      	cmp	r3, r2
 8004084:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004088:	d021      	beq.n	80040ce <_dtoa_r+0xabe>
 800408a:	4659      	mov	r1, fp
 800408c:	2300      	movs	r3, #0
 800408e:	220a      	movs	r2, #10
 8004090:	4620      	mov	r0, r4
 8004092:	f000 fabe 	bl	8004612 <__multadd>
 8004096:	45b9      	cmp	r9, r7
 8004098:	4683      	mov	fp, r0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	f04f 020a 	mov.w	r2, #10
 80040a2:	4649      	mov	r1, r9
 80040a4:	4620      	mov	r0, r4
 80040a6:	d105      	bne.n	80040b4 <_dtoa_r+0xaa4>
 80040a8:	f000 fab3 	bl	8004612 <__multadd>
 80040ac:	4681      	mov	r9, r0
 80040ae:	4607      	mov	r7, r0
 80040b0:	9507      	str	r5, [sp, #28]
 80040b2:	e778      	b.n	8003fa6 <_dtoa_r+0x996>
 80040b4:	f000 faad 	bl	8004612 <__multadd>
 80040b8:	4639      	mov	r1, r7
 80040ba:	4681      	mov	r9, r0
 80040bc:	2300      	movs	r3, #0
 80040be:	220a      	movs	r2, #10
 80040c0:	4620      	mov	r0, r4
 80040c2:	f000 faa6 	bl	8004612 <__multadd>
 80040c6:	4607      	mov	r7, r0
 80040c8:	e7f2      	b.n	80040b0 <_dtoa_r+0xaa0>
 80040ca:	f04f 0900 	mov.w	r9, #0
 80040ce:	4659      	mov	r1, fp
 80040d0:	2201      	movs	r2, #1
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 fc12 	bl	80048fc <__lshift>
 80040d8:	4631      	mov	r1, r6
 80040da:	4683      	mov	fp, r0
 80040dc:	f000 fc62 	bl	80049a4 <__mcmp>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	dcb8      	bgt.n	8004056 <_dtoa_r+0xa46>
 80040e4:	d102      	bne.n	80040ec <_dtoa_r+0xadc>
 80040e6:	f018 0f01 	tst.w	r8, #1
 80040ea:	d1b4      	bne.n	8004056 <_dtoa_r+0xa46>
 80040ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040f0:	1e6a      	subs	r2, r5, #1
 80040f2:	2b30      	cmp	r3, #48	; 0x30
 80040f4:	f47f af0f 	bne.w	8003f16 <_dtoa_r+0x906>
 80040f8:	4615      	mov	r5, r2
 80040fa:	e7f7      	b.n	80040ec <_dtoa_r+0xadc>
 80040fc:	9b06      	ldr	r3, [sp, #24]
 80040fe:	4293      	cmp	r3, r2
 8004100:	d105      	bne.n	800410e <_dtoa_r+0xafe>
 8004102:	2331      	movs	r3, #49	; 0x31
 8004104:	9a06      	ldr	r2, [sp, #24]
 8004106:	f10a 0a01 	add.w	sl, sl, #1
 800410a:	7013      	strb	r3, [r2, #0]
 800410c:	e703      	b.n	8003f16 <_dtoa_r+0x906>
 800410e:	4615      	mov	r5, r2
 8004110:	e7a1      	b.n	8004056 <_dtoa_r+0xa46>
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <_dtoa_r+0xb60>)
 8004114:	f7ff bae1 	b.w	80036da <_dtoa_r+0xca>
 8004118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800411a:	2b00      	cmp	r3, #0
 800411c:	f47f aabb 	bne.w	8003696 <_dtoa_r+0x86>
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <_dtoa_r+0xb64>)
 8004122:	f7ff bada 	b.w	80036da <_dtoa_r+0xca>
 8004126:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004128:	2b01      	cmp	r3, #1
 800412a:	f77f ae3f 	ble.w	8003dac <_dtoa_r+0x79c>
 800412e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004130:	9308      	str	r3, [sp, #32]
 8004132:	e653      	b.n	8003ddc <_dtoa_r+0x7cc>
 8004134:	9b04      	ldr	r3, [sp, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	dc03      	bgt.n	8004142 <_dtoa_r+0xb32>
 800413a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800413c:	2b02      	cmp	r3, #2
 800413e:	f73f aed5 	bgt.w	8003eec <_dtoa_r+0x8dc>
 8004142:	9d06      	ldr	r5, [sp, #24]
 8004144:	4631      	mov	r1, r6
 8004146:	4658      	mov	r0, fp
 8004148:	f7ff f9d4 	bl	80034f4 <quorem>
 800414c:	9b06      	ldr	r3, [sp, #24]
 800414e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004152:	f805 8b01 	strb.w	r8, [r5], #1
 8004156:	9a04      	ldr	r2, [sp, #16]
 8004158:	1aeb      	subs	r3, r5, r3
 800415a:	429a      	cmp	r2, r3
 800415c:	ddb5      	ble.n	80040ca <_dtoa_r+0xaba>
 800415e:	4659      	mov	r1, fp
 8004160:	2300      	movs	r3, #0
 8004162:	220a      	movs	r2, #10
 8004164:	4620      	mov	r0, r4
 8004166:	f000 fa54 	bl	8004612 <__multadd>
 800416a:	4683      	mov	fp, r0
 800416c:	e7ea      	b.n	8004144 <_dtoa_r+0xb34>
 800416e:	bf00      	nop
 8004170:	08005808 	.word	0x08005808
 8004174:	0800582c 	.word	0x0800582c

08004178 <__sflush_r>:
 8004178:	898a      	ldrh	r2, [r1, #12]
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	0710      	lsls	r0, r2, #28
 8004182:	460c      	mov	r4, r1
 8004184:	d458      	bmi.n	8004238 <__sflush_r+0xc0>
 8004186:	684b      	ldr	r3, [r1, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dc05      	bgt.n	8004198 <__sflush_r+0x20>
 800418c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	dc02      	bgt.n	8004198 <__sflush_r+0x20>
 8004192:	2000      	movs	r0, #0
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800419a:	2e00      	cmp	r6, #0
 800419c:	d0f9      	beq.n	8004192 <__sflush_r+0x1a>
 800419e:	2300      	movs	r3, #0
 80041a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041a4:	682f      	ldr	r7, [r5, #0]
 80041a6:	6a21      	ldr	r1, [r4, #32]
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	d032      	beq.n	8004212 <__sflush_r+0x9a>
 80041ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	075a      	lsls	r2, r3, #29
 80041b2:	d505      	bpl.n	80041c0 <__sflush_r+0x48>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041ba:	b10b      	cbz	r3, 80041c0 <__sflush_r+0x48>
 80041bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041be:	1ac0      	subs	r0, r0, r3
 80041c0:	2300      	movs	r3, #0
 80041c2:	4602      	mov	r2, r0
 80041c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041c6:	6a21      	ldr	r1, [r4, #32]
 80041c8:	4628      	mov	r0, r5
 80041ca:	47b0      	blx	r6
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	d106      	bne.n	80041e0 <__sflush_r+0x68>
 80041d2:	6829      	ldr	r1, [r5, #0]
 80041d4:	291d      	cmp	r1, #29
 80041d6:	d848      	bhi.n	800426a <__sflush_r+0xf2>
 80041d8:	4a29      	ldr	r2, [pc, #164]	; (8004280 <__sflush_r+0x108>)
 80041da:	40ca      	lsrs	r2, r1
 80041dc:	07d6      	lsls	r6, r2, #31
 80041de:	d544      	bpl.n	800426a <__sflush_r+0xf2>
 80041e0:	2200      	movs	r2, #0
 80041e2:	6062      	str	r2, [r4, #4]
 80041e4:	6922      	ldr	r2, [r4, #16]
 80041e6:	04d9      	lsls	r1, r3, #19
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	d504      	bpl.n	80041f6 <__sflush_r+0x7e>
 80041ec:	1c42      	adds	r2, r0, #1
 80041ee:	d101      	bne.n	80041f4 <__sflush_r+0x7c>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b903      	cbnz	r3, 80041f6 <__sflush_r+0x7e>
 80041f4:	6560      	str	r0, [r4, #84]	; 0x54
 80041f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f8:	602f      	str	r7, [r5, #0]
 80041fa:	2900      	cmp	r1, #0
 80041fc:	d0c9      	beq.n	8004192 <__sflush_r+0x1a>
 80041fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004202:	4299      	cmp	r1, r3
 8004204:	d002      	beq.n	800420c <__sflush_r+0x94>
 8004206:	4628      	mov	r0, r5
 8004208:	f000 fca2 	bl	8004b50 <_free_r>
 800420c:	2000      	movs	r0, #0
 800420e:	6360      	str	r0, [r4, #52]	; 0x34
 8004210:	e7c0      	b.n	8004194 <__sflush_r+0x1c>
 8004212:	2301      	movs	r3, #1
 8004214:	4628      	mov	r0, r5
 8004216:	47b0      	blx	r6
 8004218:	1c41      	adds	r1, r0, #1
 800421a:	d1c8      	bne.n	80041ae <__sflush_r+0x36>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0c5      	beq.n	80041ae <__sflush_r+0x36>
 8004222:	2b1d      	cmp	r3, #29
 8004224:	d001      	beq.n	800422a <__sflush_r+0xb2>
 8004226:	2b16      	cmp	r3, #22
 8004228:	d101      	bne.n	800422e <__sflush_r+0xb6>
 800422a:	602f      	str	r7, [r5, #0]
 800422c:	e7b1      	b.n	8004192 <__sflush_r+0x1a>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004234:	81a3      	strh	r3, [r4, #12]
 8004236:	e7ad      	b.n	8004194 <__sflush_r+0x1c>
 8004238:	690f      	ldr	r7, [r1, #16]
 800423a:	2f00      	cmp	r7, #0
 800423c:	d0a9      	beq.n	8004192 <__sflush_r+0x1a>
 800423e:	0793      	lsls	r3, r2, #30
 8004240:	bf18      	it	ne
 8004242:	2300      	movne	r3, #0
 8004244:	680e      	ldr	r6, [r1, #0]
 8004246:	bf08      	it	eq
 8004248:	694b      	ldreq	r3, [r1, #20]
 800424a:	eba6 0807 	sub.w	r8, r6, r7
 800424e:	600f      	str	r7, [r1, #0]
 8004250:	608b      	str	r3, [r1, #8]
 8004252:	f1b8 0f00 	cmp.w	r8, #0
 8004256:	dd9c      	ble.n	8004192 <__sflush_r+0x1a>
 8004258:	4643      	mov	r3, r8
 800425a:	463a      	mov	r2, r7
 800425c:	6a21      	ldr	r1, [r4, #32]
 800425e:	4628      	mov	r0, r5
 8004260:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004262:	47b0      	blx	r6
 8004264:	2800      	cmp	r0, #0
 8004266:	dc06      	bgt.n	8004276 <__sflush_r+0xfe>
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004274:	e78e      	b.n	8004194 <__sflush_r+0x1c>
 8004276:	4407      	add	r7, r0
 8004278:	eba8 0800 	sub.w	r8, r8, r0
 800427c:	e7e9      	b.n	8004252 <__sflush_r+0xda>
 800427e:	bf00      	nop
 8004280:	20400001 	.word	0x20400001

08004284 <_fflush_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	690b      	ldr	r3, [r1, #16]
 8004288:	4605      	mov	r5, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b1db      	cbz	r3, 80042c6 <_fflush_r+0x42>
 800428e:	b118      	cbz	r0, 8004298 <_fflush_r+0x14>
 8004290:	6983      	ldr	r3, [r0, #24]
 8004292:	b90b      	cbnz	r3, 8004298 <_fflush_r+0x14>
 8004294:	f000 f860 	bl	8004358 <__sinit>
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <_fflush_r+0x48>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d109      	bne.n	80042b2 <_fflush_r+0x2e>
 800429e:	686c      	ldr	r4, [r5, #4]
 80042a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a4:	b17b      	cbz	r3, 80042c6 <_fflush_r+0x42>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ae:	f7ff bf63 	b.w	8004178 <__sflush_r>
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <_fflush_r+0x4c>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d101      	bne.n	80042bc <_fflush_r+0x38>
 80042b8:	68ac      	ldr	r4, [r5, #8]
 80042ba:	e7f1      	b.n	80042a0 <_fflush_r+0x1c>
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <_fflush_r+0x50>)
 80042be:	429c      	cmp	r4, r3
 80042c0:	bf08      	it	eq
 80042c2:	68ec      	ldreq	r4, [r5, #12]
 80042c4:	e7ec      	b.n	80042a0 <_fflush_r+0x1c>
 80042c6:	2000      	movs	r0, #0
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
 80042ca:	bf00      	nop
 80042cc:	0800585c 	.word	0x0800585c
 80042d0:	0800587c 	.word	0x0800587c
 80042d4:	0800583c 	.word	0x0800583c

080042d8 <std>:
 80042d8:	2300      	movs	r3, #0
 80042da:	b510      	push	{r4, lr}
 80042dc:	4604      	mov	r4, r0
 80042de:	e9c0 3300 	strd	r3, r3, [r0]
 80042e2:	6083      	str	r3, [r0, #8]
 80042e4:	8181      	strh	r1, [r0, #12]
 80042e6:	6643      	str	r3, [r0, #100]	; 0x64
 80042e8:	81c2      	strh	r2, [r0, #14]
 80042ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ee:	6183      	str	r3, [r0, #24]
 80042f0:	4619      	mov	r1, r3
 80042f2:	2208      	movs	r2, #8
 80042f4:	305c      	adds	r0, #92	; 0x5c
 80042f6:	f7fe fb6a 	bl	80029ce <memset>
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <std+0x38>)
 80042fc:	6224      	str	r4, [r4, #32]
 80042fe:	6263      	str	r3, [r4, #36]	; 0x24
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <std+0x3c>)
 8004302:	62a3      	str	r3, [r4, #40]	; 0x28
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <std+0x40>)
 8004306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <std+0x44>)
 800430a:	6323      	str	r3, [r4, #48]	; 0x30
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	08004f39 	.word	0x08004f39
 8004314:	08004f5b 	.word	0x08004f5b
 8004318:	08004f93 	.word	0x08004f93
 800431c:	08004fb7 	.word	0x08004fb7

08004320 <_cleanup_r>:
 8004320:	4901      	ldr	r1, [pc, #4]	; (8004328 <_cleanup_r+0x8>)
 8004322:	f000 b885 	b.w	8004430 <_fwalk_reent>
 8004326:	bf00      	nop
 8004328:	08004285 	.word	0x08004285

0800432c <__sfmoreglue>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	2568      	movs	r5, #104	; 0x68
 8004330:	1e4a      	subs	r2, r1, #1
 8004332:	4355      	muls	r5, r2
 8004334:	460e      	mov	r6, r1
 8004336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800433a:	f000 fc55 	bl	8004be8 <_malloc_r>
 800433e:	4604      	mov	r4, r0
 8004340:	b140      	cbz	r0, 8004354 <__sfmoreglue+0x28>
 8004342:	2100      	movs	r1, #0
 8004344:	e9c0 1600 	strd	r1, r6, [r0]
 8004348:	300c      	adds	r0, #12
 800434a:	60a0      	str	r0, [r4, #8]
 800434c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004350:	f7fe fb3d 	bl	80029ce <memset>
 8004354:	4620      	mov	r0, r4
 8004356:	bd70      	pop	{r4, r5, r6, pc}

08004358 <__sinit>:
 8004358:	6983      	ldr	r3, [r0, #24]
 800435a:	b510      	push	{r4, lr}
 800435c:	4604      	mov	r4, r0
 800435e:	bb33      	cbnz	r3, 80043ae <__sinit+0x56>
 8004360:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004364:	6503      	str	r3, [r0, #80]	; 0x50
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <__sinit+0x58>)
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <__sinit+0x5c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6282      	str	r2, [r0, #40]	; 0x28
 800436e:	4298      	cmp	r0, r3
 8004370:	bf04      	itt	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	6183      	streq	r3, [r0, #24]
 8004376:	f000 f81f 	bl	80043b8 <__sfp>
 800437a:	6060      	str	r0, [r4, #4]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 f81b 	bl	80043b8 <__sfp>
 8004382:	60a0      	str	r0, [r4, #8]
 8004384:	4620      	mov	r0, r4
 8004386:	f000 f817 	bl	80043b8 <__sfp>
 800438a:	2200      	movs	r2, #0
 800438c:	60e0      	str	r0, [r4, #12]
 800438e:	2104      	movs	r1, #4
 8004390:	6860      	ldr	r0, [r4, #4]
 8004392:	f7ff ffa1 	bl	80042d8 <std>
 8004396:	2201      	movs	r2, #1
 8004398:	2109      	movs	r1, #9
 800439a:	68a0      	ldr	r0, [r4, #8]
 800439c:	f7ff ff9c 	bl	80042d8 <std>
 80043a0:	2202      	movs	r2, #2
 80043a2:	2112      	movs	r1, #18
 80043a4:	68e0      	ldr	r0, [r4, #12]
 80043a6:	f7ff ff97 	bl	80042d8 <std>
 80043aa:	2301      	movs	r3, #1
 80043ac:	61a3      	str	r3, [r4, #24]
 80043ae:	bd10      	pop	{r4, pc}
 80043b0:	080057f4 	.word	0x080057f4
 80043b4:	08004321 	.word	0x08004321

080043b8 <__sfp>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <__sfp+0x70>)
 80043bc:	4607      	mov	r7, r0
 80043be:	681e      	ldr	r6, [r3, #0]
 80043c0:	69b3      	ldr	r3, [r6, #24]
 80043c2:	b913      	cbnz	r3, 80043ca <__sfp+0x12>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f7ff ffc7 	bl	8004358 <__sinit>
 80043ca:	3648      	adds	r6, #72	; 0x48
 80043cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	d503      	bpl.n	80043dc <__sfp+0x24>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	b133      	cbz	r3, 80043e6 <__sfp+0x2e>
 80043d8:	6836      	ldr	r6, [r6, #0]
 80043da:	e7f7      	b.n	80043cc <__sfp+0x14>
 80043dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043e0:	b16d      	cbz	r5, 80043fe <__sfp+0x46>
 80043e2:	3468      	adds	r4, #104	; 0x68
 80043e4:	e7f4      	b.n	80043d0 <__sfp+0x18>
 80043e6:	2104      	movs	r1, #4
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7ff ff9f 	bl	800432c <__sfmoreglue>
 80043ee:	6030      	str	r0, [r6, #0]
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d1f1      	bne.n	80043d8 <__sfp+0x20>
 80043f4:	230c      	movs	r3, #12
 80043f6:	4604      	mov	r4, r0
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4620      	mov	r0, r4
 80043fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <__sfp+0x74>)
 8004400:	6665      	str	r5, [r4, #100]	; 0x64
 8004402:	e9c4 5500 	strd	r5, r5, [r4]
 8004406:	60a5      	str	r5, [r4, #8]
 8004408:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800440c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004410:	2208      	movs	r2, #8
 8004412:	4629      	mov	r1, r5
 8004414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004418:	f7fe fad9 	bl	80029ce <memset>
 800441c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004424:	e7e9      	b.n	80043fa <__sfp+0x42>
 8004426:	bf00      	nop
 8004428:	080057f4 	.word	0x080057f4
 800442c:	ffff0001 	.word	0xffff0001

08004430 <_fwalk_reent>:
 8004430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004434:	4680      	mov	r8, r0
 8004436:	4689      	mov	r9, r1
 8004438:	2600      	movs	r6, #0
 800443a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800443e:	b914      	cbnz	r4, 8004446 <_fwalk_reent+0x16>
 8004440:	4630      	mov	r0, r6
 8004442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004446:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800444a:	3f01      	subs	r7, #1
 800444c:	d501      	bpl.n	8004452 <_fwalk_reent+0x22>
 800444e:	6824      	ldr	r4, [r4, #0]
 8004450:	e7f5      	b.n	800443e <_fwalk_reent+0xe>
 8004452:	89ab      	ldrh	r3, [r5, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d907      	bls.n	8004468 <_fwalk_reent+0x38>
 8004458:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800445c:	3301      	adds	r3, #1
 800445e:	d003      	beq.n	8004468 <_fwalk_reent+0x38>
 8004460:	4629      	mov	r1, r5
 8004462:	4640      	mov	r0, r8
 8004464:	47c8      	blx	r9
 8004466:	4306      	orrs	r6, r0
 8004468:	3568      	adds	r5, #104	; 0x68
 800446a:	e7ee      	b.n	800444a <_fwalk_reent+0x1a>

0800446c <_localeconv_r>:
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <_localeconv_r+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a18      	ldr	r0, [r3, #32]
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <_localeconv_r+0x18>)
 8004474:	2800      	cmp	r0, #0
 8004476:	bf08      	it	eq
 8004478:	4618      	moveq	r0, r3
 800447a:	30f0      	adds	r0, #240	; 0xf0
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000014 	.word	0x20000014
 8004484:	20000078 	.word	0x20000078

08004488 <__swhatbuf_r>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	460e      	mov	r6, r1
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	b096      	sub	sp, #88	; 0x58
 8004492:	2900      	cmp	r1, #0
 8004494:	4614      	mov	r4, r2
 8004496:	461d      	mov	r5, r3
 8004498:	da07      	bge.n	80044aa <__swhatbuf_r+0x22>
 800449a:	2300      	movs	r3, #0
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	89b3      	ldrh	r3, [r6, #12]
 80044a0:	061a      	lsls	r2, r3, #24
 80044a2:	d410      	bmi.n	80044c6 <__swhatbuf_r+0x3e>
 80044a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a8:	e00e      	b.n	80044c8 <__swhatbuf_r+0x40>
 80044aa:	466a      	mov	r2, sp
 80044ac:	f000 fdaa 	bl	8005004 <_fstat_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	dbf2      	blt.n	800449a <__swhatbuf_r+0x12>
 80044b4:	9a01      	ldr	r2, [sp, #4]
 80044b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044be:	425a      	negs	r2, r3
 80044c0:	415a      	adcs	r2, r3
 80044c2:	602a      	str	r2, [r5, #0]
 80044c4:	e7ee      	b.n	80044a4 <__swhatbuf_r+0x1c>
 80044c6:	2340      	movs	r3, #64	; 0x40
 80044c8:	2000      	movs	r0, #0
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	b016      	add	sp, #88	; 0x58
 80044ce:	bd70      	pop	{r4, r5, r6, pc}

080044d0 <__smakebuf_r>:
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044d4:	079d      	lsls	r5, r3, #30
 80044d6:	4606      	mov	r6, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	d507      	bpl.n	80044ec <__smakebuf_r+0x1c>
 80044dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2301      	movs	r3, #1
 80044e6:	6163      	str	r3, [r4, #20]
 80044e8:	b002      	add	sp, #8
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	ab01      	add	r3, sp, #4
 80044ee:	466a      	mov	r2, sp
 80044f0:	f7ff ffca 	bl	8004488 <__swhatbuf_r>
 80044f4:	9900      	ldr	r1, [sp, #0]
 80044f6:	4605      	mov	r5, r0
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 fb75 	bl	8004be8 <_malloc_r>
 80044fe:	b948      	cbnz	r0, 8004514 <__smakebuf_r+0x44>
 8004500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004504:	059a      	lsls	r2, r3, #22
 8004506:	d4ef      	bmi.n	80044e8 <__smakebuf_r+0x18>
 8004508:	f023 0303 	bic.w	r3, r3, #3
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	e7e3      	b.n	80044dc <__smakebuf_r+0xc>
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <__smakebuf_r+0x7c>)
 8004516:	62b3      	str	r3, [r6, #40]	; 0x28
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	6020      	str	r0, [r4, #0]
 800451c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	9b00      	ldr	r3, [sp, #0]
 8004524:	6120      	str	r0, [r4, #16]
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	9b01      	ldr	r3, [sp, #4]
 800452a:	b15b      	cbz	r3, 8004544 <__smakebuf_r+0x74>
 800452c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004530:	4630      	mov	r0, r6
 8004532:	f000 fd79 	bl	8005028 <_isatty_r>
 8004536:	b128      	cbz	r0, 8004544 <__smakebuf_r+0x74>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	431d      	orrs	r5, r3
 8004548:	81a5      	strh	r5, [r4, #12]
 800454a:	e7cd      	b.n	80044e8 <__smakebuf_r+0x18>
 800454c:	08004321 	.word	0x08004321

08004550 <malloc>:
 8004550:	4b02      	ldr	r3, [pc, #8]	; (800455c <malloc+0xc>)
 8004552:	4601      	mov	r1, r0
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	f000 bb47 	b.w	8004be8 <_malloc_r>
 800455a:	bf00      	nop
 800455c:	20000014 	.word	0x20000014

08004560 <memchr>:
 8004560:	b510      	push	{r4, lr}
 8004562:	b2c9      	uxtb	r1, r1
 8004564:	4402      	add	r2, r0
 8004566:	4290      	cmp	r0, r2
 8004568:	4603      	mov	r3, r0
 800456a:	d101      	bne.n	8004570 <memchr+0x10>
 800456c:	2300      	movs	r3, #0
 800456e:	e003      	b.n	8004578 <memchr+0x18>
 8004570:	781c      	ldrb	r4, [r3, #0]
 8004572:	3001      	adds	r0, #1
 8004574:	428c      	cmp	r4, r1
 8004576:	d1f6      	bne.n	8004566 <memchr+0x6>
 8004578:	4618      	mov	r0, r3
 800457a:	bd10      	pop	{r4, pc}

0800457c <_Balloc>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004580:	4604      	mov	r4, r0
 8004582:	460e      	mov	r6, r1
 8004584:	b93d      	cbnz	r5, 8004596 <_Balloc+0x1a>
 8004586:	2010      	movs	r0, #16
 8004588:	f7ff ffe2 	bl	8004550 <malloc>
 800458c:	6260      	str	r0, [r4, #36]	; 0x24
 800458e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004592:	6005      	str	r5, [r0, #0]
 8004594:	60c5      	str	r5, [r0, #12]
 8004596:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004598:	68eb      	ldr	r3, [r5, #12]
 800459a:	b183      	cbz	r3, 80045be <_Balloc+0x42>
 800459c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80045a4:	b9b8      	cbnz	r0, 80045d6 <_Balloc+0x5a>
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f506 	lsl.w	r5, r1, r6
 80045ac:	1d6a      	adds	r2, r5, #5
 80045ae:	0092      	lsls	r2, r2, #2
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 fabe 	bl	8004b32 <_calloc_r>
 80045b6:	b160      	cbz	r0, 80045d2 <_Balloc+0x56>
 80045b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80045bc:	e00e      	b.n	80045dc <_Balloc+0x60>
 80045be:	2221      	movs	r2, #33	; 0x21
 80045c0:	2104      	movs	r1, #4
 80045c2:	4620      	mov	r0, r4
 80045c4:	f000 fab5 	bl	8004b32 <_calloc_r>
 80045c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045ca:	60e8      	str	r0, [r5, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e4      	bne.n	800459c <_Balloc+0x20>
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
 80045d6:	6802      	ldr	r2, [r0, #0]
 80045d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80045dc:	2300      	movs	r3, #0
 80045de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80045e2:	e7f7      	b.n	80045d4 <_Balloc+0x58>

080045e4 <_Bfree>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80045e8:	4606      	mov	r6, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	b93c      	cbnz	r4, 80045fe <_Bfree+0x1a>
 80045ee:	2010      	movs	r0, #16
 80045f0:	f7ff ffae 	bl	8004550 <malloc>
 80045f4:	6270      	str	r0, [r6, #36]	; 0x24
 80045f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045fa:	6004      	str	r4, [r0, #0]
 80045fc:	60c4      	str	r4, [r0, #12]
 80045fe:	b13d      	cbz	r5, 8004610 <_Bfree+0x2c>
 8004600:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004602:	686a      	ldr	r2, [r5, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800460a:	6029      	str	r1, [r5, #0]
 800460c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004610:	bd70      	pop	{r4, r5, r6, pc}

08004612 <__multadd>:
 8004612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004616:	461f      	mov	r7, r3
 8004618:	4606      	mov	r6, r0
 800461a:	460c      	mov	r4, r1
 800461c:	2300      	movs	r3, #0
 800461e:	690d      	ldr	r5, [r1, #16]
 8004620:	f101 0c14 	add.w	ip, r1, #20
 8004624:	f8dc 0000 	ldr.w	r0, [ip]
 8004628:	3301      	adds	r3, #1
 800462a:	b281      	uxth	r1, r0
 800462c:	fb02 7101 	mla	r1, r2, r1, r7
 8004630:	0c00      	lsrs	r0, r0, #16
 8004632:	0c0f      	lsrs	r7, r1, #16
 8004634:	fb02 7000 	mla	r0, r2, r0, r7
 8004638:	b289      	uxth	r1, r1
 800463a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800463e:	429d      	cmp	r5, r3
 8004640:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004644:	f84c 1b04 	str.w	r1, [ip], #4
 8004648:	dcec      	bgt.n	8004624 <__multadd+0x12>
 800464a:	b1d7      	cbz	r7, 8004682 <__multadd+0x70>
 800464c:	68a3      	ldr	r3, [r4, #8]
 800464e:	42ab      	cmp	r3, r5
 8004650:	dc12      	bgt.n	8004678 <__multadd+0x66>
 8004652:	6861      	ldr	r1, [r4, #4]
 8004654:	4630      	mov	r0, r6
 8004656:	3101      	adds	r1, #1
 8004658:	f7ff ff90 	bl	800457c <_Balloc>
 800465c:	4680      	mov	r8, r0
 800465e:	6922      	ldr	r2, [r4, #16]
 8004660:	f104 010c 	add.w	r1, r4, #12
 8004664:	3202      	adds	r2, #2
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	300c      	adds	r0, #12
 800466a:	f7fe f9a5 	bl	80029b8 <memcpy>
 800466e:	4621      	mov	r1, r4
 8004670:	4630      	mov	r0, r6
 8004672:	f7ff ffb7 	bl	80045e4 <_Bfree>
 8004676:	4644      	mov	r4, r8
 8004678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800467c:	3501      	adds	r5, #1
 800467e:	615f      	str	r7, [r3, #20]
 8004680:	6125      	str	r5, [r4, #16]
 8004682:	4620      	mov	r0, r4
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004688 <__hi0bits>:
 8004688:	0c02      	lsrs	r2, r0, #16
 800468a:	0412      	lsls	r2, r2, #16
 800468c:	4603      	mov	r3, r0
 800468e:	b9b2      	cbnz	r2, 80046be <__hi0bits+0x36>
 8004690:	0403      	lsls	r3, r0, #16
 8004692:	2010      	movs	r0, #16
 8004694:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004698:	bf04      	itt	eq
 800469a:	021b      	lsleq	r3, r3, #8
 800469c:	3008      	addeq	r0, #8
 800469e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80046a2:	bf04      	itt	eq
 80046a4:	011b      	lsleq	r3, r3, #4
 80046a6:	3004      	addeq	r0, #4
 80046a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80046ac:	bf04      	itt	eq
 80046ae:	009b      	lsleq	r3, r3, #2
 80046b0:	3002      	addeq	r0, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db06      	blt.n	80046c4 <__hi0bits+0x3c>
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	d503      	bpl.n	80046c2 <__hi0bits+0x3a>
 80046ba:	3001      	adds	r0, #1
 80046bc:	4770      	bx	lr
 80046be:	2000      	movs	r0, #0
 80046c0:	e7e8      	b.n	8004694 <__hi0bits+0xc>
 80046c2:	2020      	movs	r0, #32
 80046c4:	4770      	bx	lr

080046c6 <__lo0bits>:
 80046c6:	6803      	ldr	r3, [r0, #0]
 80046c8:	4601      	mov	r1, r0
 80046ca:	f013 0207 	ands.w	r2, r3, #7
 80046ce:	d00b      	beq.n	80046e8 <__lo0bits+0x22>
 80046d0:	07da      	lsls	r2, r3, #31
 80046d2:	d423      	bmi.n	800471c <__lo0bits+0x56>
 80046d4:	0798      	lsls	r0, r3, #30
 80046d6:	bf49      	itett	mi
 80046d8:	085b      	lsrmi	r3, r3, #1
 80046da:	089b      	lsrpl	r3, r3, #2
 80046dc:	2001      	movmi	r0, #1
 80046de:	600b      	strmi	r3, [r1, #0]
 80046e0:	bf5c      	itt	pl
 80046e2:	600b      	strpl	r3, [r1, #0]
 80046e4:	2002      	movpl	r0, #2
 80046e6:	4770      	bx	lr
 80046e8:	b298      	uxth	r0, r3
 80046ea:	b9a8      	cbnz	r0, 8004718 <__lo0bits+0x52>
 80046ec:	2010      	movs	r0, #16
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046f4:	bf04      	itt	eq
 80046f6:	0a1b      	lsreq	r3, r3, #8
 80046f8:	3008      	addeq	r0, #8
 80046fa:	071a      	lsls	r2, r3, #28
 80046fc:	bf04      	itt	eq
 80046fe:	091b      	lsreq	r3, r3, #4
 8004700:	3004      	addeq	r0, #4
 8004702:	079a      	lsls	r2, r3, #30
 8004704:	bf04      	itt	eq
 8004706:	089b      	lsreq	r3, r3, #2
 8004708:	3002      	addeq	r0, #2
 800470a:	07da      	lsls	r2, r3, #31
 800470c:	d402      	bmi.n	8004714 <__lo0bits+0x4e>
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	d006      	beq.n	8004720 <__lo0bits+0x5a>
 8004712:	3001      	adds	r0, #1
 8004714:	600b      	str	r3, [r1, #0]
 8004716:	4770      	bx	lr
 8004718:	4610      	mov	r0, r2
 800471a:	e7e9      	b.n	80046f0 <__lo0bits+0x2a>
 800471c:	2000      	movs	r0, #0
 800471e:	4770      	bx	lr
 8004720:	2020      	movs	r0, #32
 8004722:	4770      	bx	lr

08004724 <__i2b>:
 8004724:	b510      	push	{r4, lr}
 8004726:	460c      	mov	r4, r1
 8004728:	2101      	movs	r1, #1
 800472a:	f7ff ff27 	bl	800457c <_Balloc>
 800472e:	2201      	movs	r2, #1
 8004730:	6144      	str	r4, [r0, #20]
 8004732:	6102      	str	r2, [r0, #16]
 8004734:	bd10      	pop	{r4, pc}

08004736 <__multiply>:
 8004736:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	4614      	mov	r4, r2
 800473c:	690a      	ldr	r2, [r1, #16]
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	4688      	mov	r8, r1
 8004742:	429a      	cmp	r2, r3
 8004744:	bfbe      	ittt	lt
 8004746:	460b      	movlt	r3, r1
 8004748:	46a0      	movlt	r8, r4
 800474a:	461c      	movlt	r4, r3
 800474c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004750:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004754:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004758:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800475c:	eb07 0609 	add.w	r6, r7, r9
 8004760:	42b3      	cmp	r3, r6
 8004762:	bfb8      	it	lt
 8004764:	3101      	addlt	r1, #1
 8004766:	f7ff ff09 	bl	800457c <_Balloc>
 800476a:	f100 0514 	add.w	r5, r0, #20
 800476e:	462b      	mov	r3, r5
 8004770:	2200      	movs	r2, #0
 8004772:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004776:	4573      	cmp	r3, lr
 8004778:	d316      	bcc.n	80047a8 <__multiply+0x72>
 800477a:	f104 0214 	add.w	r2, r4, #20
 800477e:	f108 0114 	add.w	r1, r8, #20
 8004782:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004786:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	9201      	str	r2, [sp, #4]
 8004790:	4293      	cmp	r3, r2
 8004792:	d80c      	bhi.n	80047ae <__multiply+0x78>
 8004794:	2e00      	cmp	r6, #0
 8004796:	dd03      	ble.n	80047a0 <__multiply+0x6a>
 8004798:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05d      	beq.n	800485c <__multiply+0x126>
 80047a0:	6106      	str	r6, [r0, #16]
 80047a2:	b003      	add	sp, #12
 80047a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a8:	f843 2b04 	str.w	r2, [r3], #4
 80047ac:	e7e3      	b.n	8004776 <__multiply+0x40>
 80047ae:	f8b2 b000 	ldrh.w	fp, [r2]
 80047b2:	f1bb 0f00 	cmp.w	fp, #0
 80047b6:	d023      	beq.n	8004800 <__multiply+0xca>
 80047b8:	4689      	mov	r9, r1
 80047ba:	46ac      	mov	ip, r5
 80047bc:	f04f 0800 	mov.w	r8, #0
 80047c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80047c4:	f8dc a000 	ldr.w	sl, [ip]
 80047c8:	b2a3      	uxth	r3, r4
 80047ca:	fa1f fa8a 	uxth.w	sl, sl
 80047ce:	fb0b a303 	mla	r3, fp, r3, sl
 80047d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80047d6:	f8dc 4000 	ldr.w	r4, [ip]
 80047da:	4443      	add	r3, r8
 80047dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80047e0:	fb0b 840a 	mla	r4, fp, sl, r8
 80047e4:	46e2      	mov	sl, ip
 80047e6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80047f0:	454f      	cmp	r7, r9
 80047f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80047f6:	f84a 3b04 	str.w	r3, [sl], #4
 80047fa:	d82b      	bhi.n	8004854 <__multiply+0x11e>
 80047fc:	f8cc 8004 	str.w	r8, [ip, #4]
 8004800:	9b01      	ldr	r3, [sp, #4]
 8004802:	3204      	adds	r2, #4
 8004804:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004808:	f1ba 0f00 	cmp.w	sl, #0
 800480c:	d020      	beq.n	8004850 <__multiply+0x11a>
 800480e:	4689      	mov	r9, r1
 8004810:	46a8      	mov	r8, r5
 8004812:	f04f 0b00 	mov.w	fp, #0
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	f8b9 c000 	ldrh.w	ip, [r9]
 800481c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004820:	b29b      	uxth	r3, r3
 8004822:	fb0a 440c 	mla	r4, sl, ip, r4
 8004826:	46c4      	mov	ip, r8
 8004828:	445c      	add	r4, fp
 800482a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800482e:	f84c 3b04 	str.w	r3, [ip], #4
 8004832:	f859 3b04 	ldr.w	r3, [r9], #4
 8004836:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	fb0a b303 	mla	r3, sl, r3, fp
 8004840:	454f      	cmp	r7, r9
 8004842:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004846:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800484a:	d805      	bhi.n	8004858 <__multiply+0x122>
 800484c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004850:	3504      	adds	r5, #4
 8004852:	e79b      	b.n	800478c <__multiply+0x56>
 8004854:	46d4      	mov	ip, sl
 8004856:	e7b3      	b.n	80047c0 <__multiply+0x8a>
 8004858:	46e0      	mov	r8, ip
 800485a:	e7dd      	b.n	8004818 <__multiply+0xe2>
 800485c:	3e01      	subs	r6, #1
 800485e:	e799      	b.n	8004794 <__multiply+0x5e>

08004860 <__pow5mult>:
 8004860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004864:	4615      	mov	r5, r2
 8004866:	f012 0203 	ands.w	r2, r2, #3
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	d007      	beq.n	8004880 <__pow5mult+0x20>
 8004870:	4c21      	ldr	r4, [pc, #132]	; (80048f8 <__pow5mult+0x98>)
 8004872:	3a01      	subs	r2, #1
 8004874:	2300      	movs	r3, #0
 8004876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800487a:	f7ff feca 	bl	8004612 <__multadd>
 800487e:	4607      	mov	r7, r0
 8004880:	10ad      	asrs	r5, r5, #2
 8004882:	d035      	beq.n	80048f0 <__pow5mult+0x90>
 8004884:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004886:	b93c      	cbnz	r4, 8004898 <__pow5mult+0x38>
 8004888:	2010      	movs	r0, #16
 800488a:	f7ff fe61 	bl	8004550 <malloc>
 800488e:	6270      	str	r0, [r6, #36]	; 0x24
 8004890:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004894:	6004      	str	r4, [r0, #0]
 8004896:	60c4      	str	r4, [r0, #12]
 8004898:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800489c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048a0:	b94c      	cbnz	r4, 80048b6 <__pow5mult+0x56>
 80048a2:	f240 2171 	movw	r1, #625	; 0x271
 80048a6:	4630      	mov	r0, r6
 80048a8:	f7ff ff3c 	bl	8004724 <__i2b>
 80048ac:	2300      	movs	r3, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80048b4:	6003      	str	r3, [r0, #0]
 80048b6:	f04f 0800 	mov.w	r8, #0
 80048ba:	07eb      	lsls	r3, r5, #31
 80048bc:	d50a      	bpl.n	80048d4 <__pow5mult+0x74>
 80048be:	4639      	mov	r1, r7
 80048c0:	4622      	mov	r2, r4
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ff37 	bl	8004736 <__multiply>
 80048c8:	4681      	mov	r9, r0
 80048ca:	4639      	mov	r1, r7
 80048cc:	4630      	mov	r0, r6
 80048ce:	f7ff fe89 	bl	80045e4 <_Bfree>
 80048d2:	464f      	mov	r7, r9
 80048d4:	106d      	asrs	r5, r5, #1
 80048d6:	d00b      	beq.n	80048f0 <__pow5mult+0x90>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	b938      	cbnz	r0, 80048ec <__pow5mult+0x8c>
 80048dc:	4622      	mov	r2, r4
 80048de:	4621      	mov	r1, r4
 80048e0:	4630      	mov	r0, r6
 80048e2:	f7ff ff28 	bl	8004736 <__multiply>
 80048e6:	6020      	str	r0, [r4, #0]
 80048e8:	f8c0 8000 	str.w	r8, [r0]
 80048ec:	4604      	mov	r4, r0
 80048ee:	e7e4      	b.n	80048ba <__pow5mult+0x5a>
 80048f0:	4638      	mov	r0, r7
 80048f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048f6:	bf00      	nop
 80048f8:	08005990 	.word	0x08005990

080048fc <__lshift>:
 80048fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004900:	460c      	mov	r4, r1
 8004902:	4607      	mov	r7, r0
 8004904:	4616      	mov	r6, r2
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800490c:	eb0a 0903 	add.w	r9, sl, r3
 8004910:	6849      	ldr	r1, [r1, #4]
 8004912:	68a3      	ldr	r3, [r4, #8]
 8004914:	f109 0501 	add.w	r5, r9, #1
 8004918:	42ab      	cmp	r3, r5
 800491a:	db32      	blt.n	8004982 <__lshift+0x86>
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff fe2d 	bl	800457c <_Balloc>
 8004922:	2300      	movs	r3, #0
 8004924:	4680      	mov	r8, r0
 8004926:	461a      	mov	r2, r3
 8004928:	f100 0114 	add.w	r1, r0, #20
 800492c:	4553      	cmp	r3, sl
 800492e:	db2b      	blt.n	8004988 <__lshift+0x8c>
 8004930:	6920      	ldr	r0, [r4, #16]
 8004932:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004936:	f104 0314 	add.w	r3, r4, #20
 800493a:	f016 021f 	ands.w	r2, r6, #31
 800493e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004942:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004946:	d025      	beq.n	8004994 <__lshift+0x98>
 8004948:	2000      	movs	r0, #0
 800494a:	f1c2 0e20 	rsb	lr, r2, #32
 800494e:	468a      	mov	sl, r1
 8004950:	681e      	ldr	r6, [r3, #0]
 8004952:	4096      	lsls	r6, r2
 8004954:	4330      	orrs	r0, r6
 8004956:	f84a 0b04 	str.w	r0, [sl], #4
 800495a:	f853 0b04 	ldr.w	r0, [r3], #4
 800495e:	459c      	cmp	ip, r3
 8004960:	fa20 f00e 	lsr.w	r0, r0, lr
 8004964:	d814      	bhi.n	8004990 <__lshift+0x94>
 8004966:	6048      	str	r0, [r1, #4]
 8004968:	b108      	cbz	r0, 800496e <__lshift+0x72>
 800496a:	f109 0502 	add.w	r5, r9, #2
 800496e:	3d01      	subs	r5, #1
 8004970:	4638      	mov	r0, r7
 8004972:	f8c8 5010 	str.w	r5, [r8, #16]
 8004976:	4621      	mov	r1, r4
 8004978:	f7ff fe34 	bl	80045e4 <_Bfree>
 800497c:	4640      	mov	r0, r8
 800497e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004982:	3101      	adds	r1, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	e7c7      	b.n	8004918 <__lshift+0x1c>
 8004988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800498c:	3301      	adds	r3, #1
 800498e:	e7cd      	b.n	800492c <__lshift+0x30>
 8004990:	4651      	mov	r1, sl
 8004992:	e7dc      	b.n	800494e <__lshift+0x52>
 8004994:	3904      	subs	r1, #4
 8004996:	f853 2b04 	ldr.w	r2, [r3], #4
 800499a:	459c      	cmp	ip, r3
 800499c:	f841 2f04 	str.w	r2, [r1, #4]!
 80049a0:	d8f9      	bhi.n	8004996 <__lshift+0x9a>
 80049a2:	e7e4      	b.n	800496e <__lshift+0x72>

080049a4 <__mcmp>:
 80049a4:	6903      	ldr	r3, [r0, #16]
 80049a6:	690a      	ldr	r2, [r1, #16]
 80049a8:	b530      	push	{r4, r5, lr}
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	d10c      	bne.n	80049c8 <__mcmp+0x24>
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	3014      	adds	r0, #20
 80049b2:	3114      	adds	r1, #20
 80049b4:	1884      	adds	r4, r0, r2
 80049b6:	4411      	add	r1, r2
 80049b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80049bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80049c0:	4295      	cmp	r5, r2
 80049c2:	d003      	beq.n	80049cc <__mcmp+0x28>
 80049c4:	d305      	bcc.n	80049d2 <__mcmp+0x2e>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd30      	pop	{r4, r5, pc}
 80049cc:	42a0      	cmp	r0, r4
 80049ce:	d3f3      	bcc.n	80049b8 <__mcmp+0x14>
 80049d0:	e7fa      	b.n	80049c8 <__mcmp+0x24>
 80049d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049d6:	e7f7      	b.n	80049c8 <__mcmp+0x24>

080049d8 <__mdiff>:
 80049d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	460d      	mov	r5, r1
 80049de:	4607      	mov	r7, r0
 80049e0:	4611      	mov	r1, r2
 80049e2:	4628      	mov	r0, r5
 80049e4:	4614      	mov	r4, r2
 80049e6:	f7ff ffdd 	bl	80049a4 <__mcmp>
 80049ea:	1e06      	subs	r6, r0, #0
 80049ec:	d108      	bne.n	8004a00 <__mdiff+0x28>
 80049ee:	4631      	mov	r1, r6
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff fdc3 	bl	800457c <_Balloc>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80049fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a00:	bfa4      	itt	ge
 8004a02:	4623      	movge	r3, r4
 8004a04:	462c      	movge	r4, r5
 8004a06:	4638      	mov	r0, r7
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	bfa6      	itte	ge
 8004a0c:	461d      	movge	r5, r3
 8004a0e:	2600      	movge	r6, #0
 8004a10:	2601      	movlt	r6, #1
 8004a12:	f7ff fdb3 	bl	800457c <_Balloc>
 8004a16:	f04f 0e00 	mov.w	lr, #0
 8004a1a:	60c6      	str	r6, [r0, #12]
 8004a1c:	692b      	ldr	r3, [r5, #16]
 8004a1e:	6926      	ldr	r6, [r4, #16]
 8004a20:	f104 0214 	add.w	r2, r4, #20
 8004a24:	f105 0914 	add.w	r9, r5, #20
 8004a28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004a2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004a30:	f100 0114 	add.w	r1, r0, #20
 8004a34:	f852 ab04 	ldr.w	sl, [r2], #4
 8004a38:	f859 5b04 	ldr.w	r5, [r9], #4
 8004a3c:	fa1f f38a 	uxth.w	r3, sl
 8004a40:	4473      	add	r3, lr
 8004a42:	b2ac      	uxth	r4, r5
 8004a44:	1b1b      	subs	r3, r3, r4
 8004a46:	0c2c      	lsrs	r4, r5, #16
 8004a48:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004a4c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004a56:	45c8      	cmp	r8, r9
 8004a58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004a5c:	4694      	mov	ip, r2
 8004a5e:	f841 4b04 	str.w	r4, [r1], #4
 8004a62:	d8e7      	bhi.n	8004a34 <__mdiff+0x5c>
 8004a64:	45bc      	cmp	ip, r7
 8004a66:	d304      	bcc.n	8004a72 <__mdiff+0x9a>
 8004a68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004a6c:	b183      	cbz	r3, 8004a90 <__mdiff+0xb8>
 8004a6e:	6106      	str	r6, [r0, #16]
 8004a70:	e7c4      	b.n	80049fc <__mdiff+0x24>
 8004a72:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004a76:	b2a2      	uxth	r2, r4
 8004a78:	4472      	add	r2, lr
 8004a7a:	1413      	asrs	r3, r2, #16
 8004a7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004a80:	b292      	uxth	r2, r2
 8004a82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a86:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004a8a:	f841 2b04 	str.w	r2, [r1], #4
 8004a8e:	e7e9      	b.n	8004a64 <__mdiff+0x8c>
 8004a90:	3e01      	subs	r6, #1
 8004a92:	e7e9      	b.n	8004a68 <__mdiff+0x90>

08004a94 <__d2b>:
 8004a94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004a98:	461c      	mov	r4, r3
 8004a9a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4690      	mov	r8, r2
 8004aa2:	f7ff fd6b 	bl	800457c <_Balloc>
 8004aa6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004aaa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004aae:	4607      	mov	r7, r0
 8004ab0:	bb34      	cbnz	r4, 8004b00 <__d2b+0x6c>
 8004ab2:	9201      	str	r2, [sp, #4]
 8004ab4:	f1b8 0200 	subs.w	r2, r8, #0
 8004ab8:	d027      	beq.n	8004b0a <__d2b+0x76>
 8004aba:	a802      	add	r0, sp, #8
 8004abc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004ac0:	f7ff fe01 	bl	80046c6 <__lo0bits>
 8004ac4:	9900      	ldr	r1, [sp, #0]
 8004ac6:	b1f0      	cbz	r0, 8004b06 <__d2b+0x72>
 8004ac8:	9a01      	ldr	r2, [sp, #4]
 8004aca:	f1c0 0320 	rsb	r3, r0, #32
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	40c2      	lsrs	r2, r0
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	9201      	str	r2, [sp, #4]
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	2102      	movne	r1, #2
 8004ae2:	2101      	moveq	r1, #1
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	6139      	str	r1, [r7, #16]
 8004ae8:	b1c4      	cbz	r4, 8004b1c <__d2b+0x88>
 8004aea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004aee:	4404      	add	r4, r0
 8004af0:	6034      	str	r4, [r6, #0]
 8004af2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004af6:	6028      	str	r0, [r5, #0]
 8004af8:	4638      	mov	r0, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b04:	e7d5      	b.n	8004ab2 <__d2b+0x1e>
 8004b06:	6179      	str	r1, [r7, #20]
 8004b08:	e7e7      	b.n	8004ada <__d2b+0x46>
 8004b0a:	a801      	add	r0, sp, #4
 8004b0c:	f7ff fddb 	bl	80046c6 <__lo0bits>
 8004b10:	2101      	movs	r1, #1
 8004b12:	9b01      	ldr	r3, [sp, #4]
 8004b14:	6139      	str	r1, [r7, #16]
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	3020      	adds	r0, #32
 8004b1a:	e7e5      	b.n	8004ae8 <__d2b+0x54>
 8004b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004b24:	6030      	str	r0, [r6, #0]
 8004b26:	6918      	ldr	r0, [r3, #16]
 8004b28:	f7ff fdae 	bl	8004688 <__hi0bits>
 8004b2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004b30:	e7e1      	b.n	8004af6 <__d2b+0x62>

08004b32 <_calloc_r>:
 8004b32:	b538      	push	{r3, r4, r5, lr}
 8004b34:	fb02 f401 	mul.w	r4, r2, r1
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f000 f855 	bl	8004be8 <_malloc_r>
 8004b3e:	4605      	mov	r5, r0
 8004b40:	b118      	cbz	r0, 8004b4a <_calloc_r+0x18>
 8004b42:	4622      	mov	r2, r4
 8004b44:	2100      	movs	r1, #0
 8004b46:	f7fd ff42 	bl	80029ce <memset>
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004b50 <_free_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4605      	mov	r5, r0
 8004b54:	2900      	cmp	r1, #0
 8004b56:	d043      	beq.n	8004be0 <_free_r+0x90>
 8004b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5c:	1f0c      	subs	r4, r1, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bfb8      	it	lt
 8004b62:	18e4      	addlt	r4, r4, r3
 8004b64:	f000 fa94 	bl	8005090 <__malloc_lock>
 8004b68:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <_free_r+0x94>)
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	b933      	cbnz	r3, 8004b7e <_free_r+0x2e>
 8004b70:	6063      	str	r3, [r4, #4]
 8004b72:	6014      	str	r4, [r2, #0]
 8004b74:	4628      	mov	r0, r5
 8004b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b7a:	f000 ba8a 	b.w	8005092 <__malloc_unlock>
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	d90b      	bls.n	8004b9a <_free_r+0x4a>
 8004b82:	6821      	ldr	r1, [r4, #0]
 8004b84:	1862      	adds	r2, r4, r1
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bf01      	itttt	eq
 8004b8a:	681a      	ldreq	r2, [r3, #0]
 8004b8c:	685b      	ldreq	r3, [r3, #4]
 8004b8e:	1852      	addeq	r2, r2, r1
 8004b90:	6022      	streq	r2, [r4, #0]
 8004b92:	6063      	str	r3, [r4, #4]
 8004b94:	6004      	str	r4, [r0, #0]
 8004b96:	e7ed      	b.n	8004b74 <_free_r+0x24>
 8004b98:	4613      	mov	r3, r2
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	b10a      	cbz	r2, 8004ba2 <_free_r+0x52>
 8004b9e:	42a2      	cmp	r2, r4
 8004ba0:	d9fa      	bls.n	8004b98 <_free_r+0x48>
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	1858      	adds	r0, r3, r1
 8004ba6:	42a0      	cmp	r0, r4
 8004ba8:	d10b      	bne.n	8004bc2 <_free_r+0x72>
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	4401      	add	r1, r0
 8004bae:	1858      	adds	r0, r3, r1
 8004bb0:	4282      	cmp	r2, r0
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	d1de      	bne.n	8004b74 <_free_r+0x24>
 8004bb6:	6810      	ldr	r0, [r2, #0]
 8004bb8:	6852      	ldr	r2, [r2, #4]
 8004bba:	4401      	add	r1, r0
 8004bbc:	6019      	str	r1, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	e7d8      	b.n	8004b74 <_free_r+0x24>
 8004bc2:	d902      	bls.n	8004bca <_free_r+0x7a>
 8004bc4:	230c      	movs	r3, #12
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	e7d4      	b.n	8004b74 <_free_r+0x24>
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	1821      	adds	r1, r4, r0
 8004bce:	428a      	cmp	r2, r1
 8004bd0:	bf01      	itttt	eq
 8004bd2:	6811      	ldreq	r1, [r2, #0]
 8004bd4:	6852      	ldreq	r2, [r2, #4]
 8004bd6:	1809      	addeq	r1, r1, r0
 8004bd8:	6021      	streq	r1, [r4, #0]
 8004bda:	6062      	str	r2, [r4, #4]
 8004bdc:	605c      	str	r4, [r3, #4]
 8004bde:	e7c9      	b.n	8004b74 <_free_r+0x24>
 8004be0:	bd38      	pop	{r3, r4, r5, pc}
 8004be2:	bf00      	nop
 8004be4:	2000060c 	.word	0x2000060c

08004be8 <_malloc_r>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	1ccd      	adds	r5, r1, #3
 8004bec:	f025 0503 	bic.w	r5, r5, #3
 8004bf0:	3508      	adds	r5, #8
 8004bf2:	2d0c      	cmp	r5, #12
 8004bf4:	bf38      	it	cc
 8004bf6:	250c      	movcc	r5, #12
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	db01      	blt.n	8004c02 <_malloc_r+0x1a>
 8004bfe:	42a9      	cmp	r1, r5
 8004c00:	d903      	bls.n	8004c0a <_malloc_r+0x22>
 8004c02:	230c      	movs	r3, #12
 8004c04:	6033      	str	r3, [r6, #0]
 8004c06:	2000      	movs	r0, #0
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	f000 fa41 	bl	8005090 <__malloc_lock>
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <_malloc_r+0xac>)
 8004c10:	6814      	ldr	r4, [r2, #0]
 8004c12:	4621      	mov	r1, r4
 8004c14:	b991      	cbnz	r1, 8004c3c <_malloc_r+0x54>
 8004c16:	4c20      	ldr	r4, [pc, #128]	; (8004c98 <_malloc_r+0xb0>)
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	b91b      	cbnz	r3, 8004c24 <_malloc_r+0x3c>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f000 f97b 	bl	8004f18 <_sbrk_r>
 8004c22:	6020      	str	r0, [r4, #0]
 8004c24:	4629      	mov	r1, r5
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 f976 	bl	8004f18 <_sbrk_r>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d124      	bne.n	8004c7a <_malloc_r+0x92>
 8004c30:	230c      	movs	r3, #12
 8004c32:	4630      	mov	r0, r6
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	f000 fa2c 	bl	8005092 <__malloc_unlock>
 8004c3a:	e7e4      	b.n	8004c06 <_malloc_r+0x1e>
 8004c3c:	680b      	ldr	r3, [r1, #0]
 8004c3e:	1b5b      	subs	r3, r3, r5
 8004c40:	d418      	bmi.n	8004c74 <_malloc_r+0x8c>
 8004c42:	2b0b      	cmp	r3, #11
 8004c44:	d90f      	bls.n	8004c66 <_malloc_r+0x7e>
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	18cc      	adds	r4, r1, r3
 8004c4a:	50cd      	str	r5, [r1, r3]
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 fa20 	bl	8005092 <__malloc_unlock>
 8004c52:	f104 000b 	add.w	r0, r4, #11
 8004c56:	1d23      	adds	r3, r4, #4
 8004c58:	f020 0007 	bic.w	r0, r0, #7
 8004c5c:	1ac3      	subs	r3, r0, r3
 8004c5e:	d0d3      	beq.n	8004c08 <_malloc_r+0x20>
 8004c60:	425a      	negs	r2, r3
 8004c62:	50e2      	str	r2, [r4, r3]
 8004c64:	e7d0      	b.n	8004c08 <_malloc_r+0x20>
 8004c66:	684b      	ldr	r3, [r1, #4]
 8004c68:	428c      	cmp	r4, r1
 8004c6a:	bf16      	itet	ne
 8004c6c:	6063      	strne	r3, [r4, #4]
 8004c6e:	6013      	streq	r3, [r2, #0]
 8004c70:	460c      	movne	r4, r1
 8004c72:	e7eb      	b.n	8004c4c <_malloc_r+0x64>
 8004c74:	460c      	mov	r4, r1
 8004c76:	6849      	ldr	r1, [r1, #4]
 8004c78:	e7cc      	b.n	8004c14 <_malloc_r+0x2c>
 8004c7a:	1cc4      	adds	r4, r0, #3
 8004c7c:	f024 0403 	bic.w	r4, r4, #3
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	d005      	beq.n	8004c90 <_malloc_r+0xa8>
 8004c84:	1a21      	subs	r1, r4, r0
 8004c86:	4630      	mov	r0, r6
 8004c88:	f000 f946 	bl	8004f18 <_sbrk_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d0cf      	beq.n	8004c30 <_malloc_r+0x48>
 8004c90:	6025      	str	r5, [r4, #0]
 8004c92:	e7db      	b.n	8004c4c <_malloc_r+0x64>
 8004c94:	2000060c 	.word	0x2000060c
 8004c98:	20000610 	.word	0x20000610

08004c9c <__sfputc_r>:
 8004c9c:	6893      	ldr	r3, [r2, #8]
 8004c9e:	b410      	push	{r4}
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	6093      	str	r3, [r2, #8]
 8004ca6:	da07      	bge.n	8004cb8 <__sfputc_r+0x1c>
 8004ca8:	6994      	ldr	r4, [r2, #24]
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	db01      	blt.n	8004cb2 <__sfputc_r+0x16>
 8004cae:	290a      	cmp	r1, #10
 8004cb0:	d102      	bne.n	8004cb8 <__sfputc_r+0x1c>
 8004cb2:	bc10      	pop	{r4}
 8004cb4:	f7fe bb5e 	b.w	8003374 <__swbuf_r>
 8004cb8:	6813      	ldr	r3, [r2, #0]
 8004cba:	1c58      	adds	r0, r3, #1
 8004cbc:	6010      	str	r0, [r2, #0]
 8004cbe:	7019      	strb	r1, [r3, #0]
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	bc10      	pop	{r4}
 8004cc4:	4770      	bx	lr

08004cc6 <__sfputs_r>:
 8004cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc8:	4606      	mov	r6, r0
 8004cca:	460f      	mov	r7, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	18d5      	adds	r5, r2, r3
 8004cd0:	42ac      	cmp	r4, r5
 8004cd2:	d101      	bne.n	8004cd8 <__sfputs_r+0x12>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e007      	b.n	8004ce8 <__sfputs_r+0x22>
 8004cd8:	463a      	mov	r2, r7
 8004cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff ffdc 	bl	8004c9c <__sfputc_r>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d1f3      	bne.n	8004cd0 <__sfputs_r+0xa>
 8004ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cec <_vfiprintf_r>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b09d      	sub	sp, #116	; 0x74
 8004cf4:	4617      	mov	r7, r2
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <_vfiprintf_r+0x18>
 8004cfc:	6983      	ldr	r3, [r0, #24]
 8004cfe:	b90b      	cbnz	r3, 8004d04 <_vfiprintf_r+0x18>
 8004d00:	f7ff fb2a 	bl	8004358 <__sinit>
 8004d04:	4b7c      	ldr	r3, [pc, #496]	; (8004ef8 <_vfiprintf_r+0x20c>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d158      	bne.n	8004dbc <_vfiprintf_r+0xd0>
 8004d0a:	6874      	ldr	r4, [r6, #4]
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	0718      	lsls	r0, r3, #28
 8004d10:	d55e      	bpl.n	8004dd0 <_vfiprintf_r+0xe4>
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05b      	beq.n	8004dd0 <_vfiprintf_r+0xe4>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d22:	2330      	movs	r3, #48	; 0x30
 8004d24:	f04f 0b01 	mov.w	fp, #1
 8004d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d2c:	9503      	str	r5, [sp, #12]
 8004d2e:	46b8      	mov	r8, r7
 8004d30:	4645      	mov	r5, r8
 8004d32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d36:	b10b      	cbz	r3, 8004d3c <_vfiprintf_r+0x50>
 8004d38:	2b25      	cmp	r3, #37	; 0x25
 8004d3a:	d154      	bne.n	8004de6 <_vfiprintf_r+0xfa>
 8004d3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d40:	d00b      	beq.n	8004d5a <_vfiprintf_r+0x6e>
 8004d42:	4653      	mov	r3, sl
 8004d44:	463a      	mov	r2, r7
 8004d46:	4621      	mov	r1, r4
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff ffbc 	bl	8004cc6 <__sfputs_r>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f000 80c2 	beq.w	8004ed8 <_vfiprintf_r+0x1ec>
 8004d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d56:	4453      	add	r3, sl
 8004d58:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5a:	f898 3000 	ldrb.w	r3, [r8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80ba 	beq.w	8004ed8 <_vfiprintf_r+0x1ec>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	9307      	str	r3, [sp, #28]
 8004d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d76:	931a      	str	r3, [sp, #104]	; 0x68
 8004d78:	46a8      	mov	r8, r5
 8004d7a:	2205      	movs	r2, #5
 8004d7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004d80:	485e      	ldr	r0, [pc, #376]	; (8004efc <_vfiprintf_r+0x210>)
 8004d82:	f7ff fbed 	bl	8004560 <memchr>
 8004d86:	9b04      	ldr	r3, [sp, #16]
 8004d88:	bb78      	cbnz	r0, 8004dea <_vfiprintf_r+0xfe>
 8004d8a:	06d9      	lsls	r1, r3, #27
 8004d8c:	bf44      	itt	mi
 8004d8e:	2220      	movmi	r2, #32
 8004d90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d94:	071a      	lsls	r2, r3, #28
 8004d96:	bf44      	itt	mi
 8004d98:	222b      	movmi	r2, #43	; 0x2b
 8004d9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d9e:	782a      	ldrb	r2, [r5, #0]
 8004da0:	2a2a      	cmp	r2, #42	; 0x2a
 8004da2:	d02a      	beq.n	8004dfa <_vfiprintf_r+0x10e>
 8004da4:	46a8      	mov	r8, r5
 8004da6:	2000      	movs	r0, #0
 8004da8:	250a      	movs	r5, #10
 8004daa:	9a07      	ldr	r2, [sp, #28]
 8004dac:	4641      	mov	r1, r8
 8004dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db2:	3b30      	subs	r3, #48	; 0x30
 8004db4:	2b09      	cmp	r3, #9
 8004db6:	d969      	bls.n	8004e8c <_vfiprintf_r+0x1a0>
 8004db8:	b360      	cbz	r0, 8004e14 <_vfiprintf_r+0x128>
 8004dba:	e024      	b.n	8004e06 <_vfiprintf_r+0x11a>
 8004dbc:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <_vfiprintf_r+0x214>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <_vfiprintf_r+0xda>
 8004dc2:	68b4      	ldr	r4, [r6, #8]
 8004dc4:	e7a2      	b.n	8004d0c <_vfiprintf_r+0x20>
 8004dc6:	4b4f      	ldr	r3, [pc, #316]	; (8004f04 <_vfiprintf_r+0x218>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68f4      	ldreq	r4, [r6, #12]
 8004dce:	e79d      	b.n	8004d0c <_vfiprintf_r+0x20>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f7fe fb20 	bl	8003418 <__swsetup_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d09d      	beq.n	8004d18 <_vfiprintf_r+0x2c>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de0:	b01d      	add	sp, #116	; 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	46a8      	mov	r8, r5
 8004de8:	e7a2      	b.n	8004d30 <_vfiprintf_r+0x44>
 8004dea:	4a44      	ldr	r2, [pc, #272]	; (8004efc <_vfiprintf_r+0x210>)
 8004dec:	4645      	mov	r5, r8
 8004dee:	1a80      	subs	r0, r0, r2
 8004df0:	fa0b f000 	lsl.w	r0, fp, r0
 8004df4:	4318      	orrs	r0, r3
 8004df6:	9004      	str	r0, [sp, #16]
 8004df8:	e7be      	b.n	8004d78 <_vfiprintf_r+0x8c>
 8004dfa:	9a03      	ldr	r2, [sp, #12]
 8004dfc:	1d11      	adds	r1, r2, #4
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	9103      	str	r1, [sp, #12]
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	db01      	blt.n	8004e0a <_vfiprintf_r+0x11e>
 8004e06:	9207      	str	r2, [sp, #28]
 8004e08:	e004      	b.n	8004e14 <_vfiprintf_r+0x128>
 8004e0a:	4252      	negs	r2, r2
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	9207      	str	r2, [sp, #28]
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	f898 3000 	ldrb.w	r3, [r8]
 8004e18:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1a:	d10e      	bne.n	8004e3a <_vfiprintf_r+0x14e>
 8004e1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e20:	2b2a      	cmp	r3, #42	; 0x2a
 8004e22:	d138      	bne.n	8004e96 <_vfiprintf_r+0x1aa>
 8004e24:	9b03      	ldr	r3, [sp, #12]
 8004e26:	f108 0802 	add.w	r8, r8, #2
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9203      	str	r2, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfb8      	it	lt
 8004e34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	4d33      	ldr	r5, [pc, #204]	; (8004f08 <_vfiprintf_r+0x21c>)
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f898 1000 	ldrb.w	r1, [r8]
 8004e42:	4628      	mov	r0, r5
 8004e44:	f7ff fb8c 	bl	8004560 <memchr>
 8004e48:	b140      	cbz	r0, 8004e5c <_vfiprintf_r+0x170>
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	1b40      	subs	r0, r0, r5
 8004e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	f108 0801 	add.w	r8, r8, #1
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	9304      	str	r3, [sp, #16]
 8004e5c:	f898 1000 	ldrb.w	r1, [r8]
 8004e60:	2206      	movs	r2, #6
 8004e62:	482a      	ldr	r0, [pc, #168]	; (8004f0c <_vfiprintf_r+0x220>)
 8004e64:	f108 0701 	add.w	r7, r8, #1
 8004e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6c:	f7ff fb78 	bl	8004560 <memchr>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d037      	beq.n	8004ee4 <_vfiprintf_r+0x1f8>
 8004e74:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <_vfiprintf_r+0x224>)
 8004e76:	bb1b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x1d4>
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	3308      	adds	r3, #8
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	444b      	add	r3, r9
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	e750      	b.n	8004d2e <_vfiprintf_r+0x42>
 8004e8c:	fb05 3202 	mla	r2, r5, r2, r3
 8004e90:	2001      	movs	r0, #1
 8004e92:	4688      	mov	r8, r1
 8004e94:	e78a      	b.n	8004dac <_vfiprintf_r+0xc0>
 8004e96:	2300      	movs	r3, #0
 8004e98:	250a      	movs	r5, #10
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f108 0801 	add.w	r8, r8, #1
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea8:	3a30      	subs	r2, #48	; 0x30
 8004eaa:	2a09      	cmp	r2, #9
 8004eac:	d903      	bls.n	8004eb6 <_vfiprintf_r+0x1ca>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0c3      	beq.n	8004e3a <_vfiprintf_r+0x14e>
 8004eb2:	9105      	str	r1, [sp, #20]
 8004eb4:	e7c1      	b.n	8004e3a <_vfiprintf_r+0x14e>
 8004eb6:	fb05 2101 	mla	r1, r5, r1, r2
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	e7f0      	b.n	8004ea2 <_vfiprintf_r+0x1b6>
 8004ec0:	ab03      	add	r3, sp, #12
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <_vfiprintf_r+0x228>)
 8004ec8:	a904      	add	r1, sp, #16
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fd fe18 	bl	8002b00 <_printf_float>
 8004ed0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ed4:	4681      	mov	r9, r0
 8004ed6:	d1d5      	bne.n	8004e84 <_vfiprintf_r+0x198>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	065b      	lsls	r3, r3, #25
 8004edc:	f53f af7e 	bmi.w	8004ddc <_vfiprintf_r+0xf0>
 8004ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ee2:	e77d      	b.n	8004de0 <_vfiprintf_r+0xf4>
 8004ee4:	ab03      	add	r3, sp, #12
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <_vfiprintf_r+0x228>)
 8004eec:	a904      	add	r1, sp, #16
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f7fe f8b2 	bl	8003058 <_printf_i>
 8004ef4:	e7ec      	b.n	8004ed0 <_vfiprintf_r+0x1e4>
 8004ef6:	bf00      	nop
 8004ef8:	0800585c 	.word	0x0800585c
 8004efc:	0800599c 	.word	0x0800599c
 8004f00:	0800587c 	.word	0x0800587c
 8004f04:	0800583c 	.word	0x0800583c
 8004f08:	080059a2 	.word	0x080059a2
 8004f0c:	080059a6 	.word	0x080059a6
 8004f10:	08002b01 	.word	0x08002b01
 8004f14:	08004cc7 	.word	0x08004cc7

08004f18 <_sbrk_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4c05      	ldr	r4, [pc, #20]	; (8004f34 <_sbrk_r+0x1c>)
 8004f1e:	4605      	mov	r5, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	6023      	str	r3, [r4, #0]
 8004f24:	f7fd fcac 	bl	8002880 <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_sbrk_r+0x1a>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_sbrk_r+0x1a>
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	20000784 	.word	0x20000784

08004f38 <__sread>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	f000 f8a8 	bl	8005094 <_read_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	bfab      	itete	ge
 8004f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f4c:	181b      	addge	r3, r3, r0
 8004f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f52:	bfac      	ite	ge
 8004f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f56:	81a3      	strhlt	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__swrite>:
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	461f      	mov	r7, r3
 8004f60:	898b      	ldrh	r3, [r1, #12]
 8004f62:	4605      	mov	r5, r0
 8004f64:	05db      	lsls	r3, r3, #23
 8004f66:	460c      	mov	r4, r1
 8004f68:	4616      	mov	r6, r2
 8004f6a:	d505      	bpl.n	8004f78 <__swrite+0x1e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	f000 f868 	bl	8005048 <_lseek_r>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f86:	463b      	mov	r3, r7
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f000 b817 	b.w	8004fc0 <_write_r>

08004f92 <__sseek>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 f855 	bl	8005048 <_lseek_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	bf15      	itete	ne
 8004fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fae:	81a3      	strheq	r3, [r4, #12]
 8004fb0:	bf18      	it	ne
 8004fb2:	81a3      	strhne	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__sclose>:
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 b813 	b.w	8004fe4 <_close_r>
	...

08004fc0 <_write_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4c05      	ldr	r4, [pc, #20]	; (8004fe0 <_write_r+0x20>)
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fc ff2c 	bl	8001e2c <_write>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_write_r+0x1e>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_write_r+0x1e>
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000784 	.word	0x20000784

08004fe4 <_close_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4c05      	ldr	r4, [pc, #20]	; (8005000 <_close_r+0x1c>)
 8004fea:	4605      	mov	r5, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	f7fd fc60 	bl	80028b4 <_close>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_close_r+0x1a>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_close_r+0x1a>
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000784 	.word	0x20000784

08005004 <_fstat_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	2300      	movs	r3, #0
 8005008:	4c06      	ldr	r4, [pc, #24]	; (8005024 <_fstat_r+0x20>)
 800500a:	4605      	mov	r5, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	f7fd fc52 	bl	80028ba <_fstat>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_fstat_r+0x1c>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	b103      	cbz	r3, 8005020 <_fstat_r+0x1c>
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000784 	.word	0x20000784

08005028 <_isatty_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	2300      	movs	r3, #0
 800502c:	4c05      	ldr	r4, [pc, #20]	; (8005044 <_isatty_r+0x1c>)
 800502e:	4605      	mov	r5, r0
 8005030:	4608      	mov	r0, r1
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	f7fd fc46 	bl	80028c4 <_isatty>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_isatty_r+0x1a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	b103      	cbz	r3, 8005042 <_isatty_r+0x1a>
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000784 	.word	0x20000784

08005048 <_lseek_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	2200      	movs	r2, #0
 8005052:	4c05      	ldr	r4, [pc, #20]	; (8005068 <_lseek_r+0x20>)
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fd fc36 	bl	80028c8 <_lseek>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_lseek_r+0x1e>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	b103      	cbz	r3, 8005066 <_lseek_r+0x1e>
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000784 	.word	0x20000784

0800506c <__ascii_mbtowc>:
 800506c:	b082      	sub	sp, #8
 800506e:	b901      	cbnz	r1, 8005072 <__ascii_mbtowc+0x6>
 8005070:	a901      	add	r1, sp, #4
 8005072:	b142      	cbz	r2, 8005086 <__ascii_mbtowc+0x1a>
 8005074:	b14b      	cbz	r3, 800508a <__ascii_mbtowc+0x1e>
 8005076:	7813      	ldrb	r3, [r2, #0]
 8005078:	600b      	str	r3, [r1, #0]
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	1c10      	adds	r0, r2, #0
 800507e:	bf18      	it	ne
 8005080:	2001      	movne	r0, #1
 8005082:	b002      	add	sp, #8
 8005084:	4770      	bx	lr
 8005086:	4610      	mov	r0, r2
 8005088:	e7fb      	b.n	8005082 <__ascii_mbtowc+0x16>
 800508a:	f06f 0001 	mvn.w	r0, #1
 800508e:	e7f8      	b.n	8005082 <__ascii_mbtowc+0x16>

08005090 <__malloc_lock>:
 8005090:	4770      	bx	lr

08005092 <__malloc_unlock>:
 8005092:	4770      	bx	lr

08005094 <_read_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4605      	mov	r5, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	2200      	movs	r2, #0
 800509e:	4c05      	ldr	r4, [pc, #20]	; (80050b4 <_read_r+0x20>)
 80050a0:	6022      	str	r2, [r4, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7fd fbde 	bl	8002864 <_read>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_read_r+0x1e>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_read_r+0x1e>
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000784 	.word	0x20000784

080050b8 <__ascii_wctomb>:
 80050b8:	b149      	cbz	r1, 80050ce <__ascii_wctomb+0x16>
 80050ba:	2aff      	cmp	r2, #255	; 0xff
 80050bc:	bf8b      	itete	hi
 80050be:	238a      	movhi	r3, #138	; 0x8a
 80050c0:	700a      	strbls	r2, [r1, #0]
 80050c2:	6003      	strhi	r3, [r0, #0]
 80050c4:	2001      	movls	r0, #1
 80050c6:	bf88      	it	hi
 80050c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80050cc:	4770      	bx	lr
 80050ce:	4608      	mov	r0, r1
 80050d0:	4770      	bx	lr
	...

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
