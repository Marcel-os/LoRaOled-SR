
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c0  08004fd0  08004fd0  00014fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006094  08006094  00016094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  08006098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a4  200001e4  0800627c  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000788  0800627c  00020788  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011df8  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000295a  00000000  00000000  00032005  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b68  00000000  00000000  0003495f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af8  00000000  00000000  0003d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d0  00000000  00000000  0003dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00014fe7  00000000  00000000  0003f090  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b507  00000000  00000000  00054077  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00074e50  00000000  00000000  0005f57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000d43ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ff4  00000000  00000000  000d444c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fb4 	.word	0x08004fb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08004fb4 	.word	0x08004fb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_InitTick+0x3c>)
{
 8000a8c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8e:	7818      	ldrb	r0, [r3, #0]
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_InitTick+0x40>)
 8000a9a:	6810      	ldr	r0, [r2, #0]
 8000a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000aa0:	f000 f9b2 	bl	8000e08 <HAL_SYSTICK_Config>
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	b958      	cbnz	r0, 8000ac0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa8:	2d0f      	cmp	r5, #15
 8000aaa:	d809      	bhi.n	8000ac0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	4602      	mov	r2, r0
 8000aae:	4629      	mov	r1, r5
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 f974 	bl	8000da0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4620      	mov	r0, r4
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_InitTick+0x44>)
 8000abc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000abe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	e7fc      	b.n	8000abe <HAL_InitTick+0x36>
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x20>)
{
 8000ad2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ade:	f000 f94d 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ffd0 	bl	8000a88 <HAL_InitTick>
  HAL_MspInit();
 8000ae8:	f001 fd00 	bl	80024ec <HAL_MspInit>
}
 8000aec:	2000      	movs	r0, #0
 8000aee:	bd08      	pop	{r3, pc}
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x10>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_IncTick+0x14>)
 8000af8:	6811      	ldr	r1, [r2, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	440b      	add	r3, r1
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000614 	.word	0x20000614
 8000b08:	20000000 	.word	0x20000000

08000b0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <HAL_GetTick+0x8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000614 	.word	0x20000614

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b538      	push	{r3, r4, r5, lr}
 8000b1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff6 	bl	8000b0c <HAL_GetTick>
 8000b20:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b24:	bf1e      	ittt	ne
 8000b26:	4b04      	ldrne	r3, [pc, #16]	; (8000b38 <HAL_Delay+0x20>)
 8000b28:	781b      	ldrbne	r3, [r3, #0]
 8000b2a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	1b40      	subs	r0, r0, r5
 8000b32:	42a0      	cmp	r0, r4
 8000b34:	d3fa      	bcc.n	8000b2c <HAL_Delay+0x14>
  {
  }
}
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
 8000b38:	20000000 	.word	0x20000000

08000b3c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000b3c:	2300      	movs	r3, #0
{ 
 8000b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b40:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d06d      	beq.n	8000c26 <HAL_ADC_ConfigChannel+0xea>
 8000b4a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b4c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b4e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b52:	2d06      	cmp	r5, #6
 8000b54:	6802      	ldr	r2, [r0, #0]
 8000b56:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000b5a:	680c      	ldr	r4, [r1, #0]
 8000b5c:	d823      	bhi.n	8000ba6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b5e:	261f      	movs	r6, #31
 8000b60:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000b62:	3b05      	subs	r3, #5
 8000b64:	409e      	lsls	r6, r3
 8000b66:	ea25 0506 	bic.w	r5, r5, r6
 8000b6a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b6e:	432b      	orrs	r3, r5
 8000b70:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b72:	2c09      	cmp	r4, #9
 8000b74:	688b      	ldr	r3, [r1, #8]
 8000b76:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000b7a:	f04f 0107 	mov.w	r1, #7
 8000b7e:	d92a      	bls.n	8000bd6 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b80:	68d6      	ldr	r6, [r2, #12]
 8000b82:	3d1e      	subs	r5, #30
 8000b84:	40a9      	lsls	r1, r5
 8000b86:	ea26 0101 	bic.w	r1, r6, r1
 8000b8a:	40ab      	lsls	r3, r5
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b90:	f1a4 0310 	sub.w	r3, r4, #16
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d926      	bls.n	8000be6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000ba6:	2d0c      	cmp	r5, #12
 8000ba8:	f04f 051f 	mov.w	r5, #31
 8000bac:	d809      	bhi.n	8000bc2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bae:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000bb0:	3b23      	subs	r3, #35	; 0x23
 8000bb2:	409d      	lsls	r5, r3
 8000bb4:	ea26 0505 	bic.w	r5, r6, r5
 8000bb8:	fa04 f303 	lsl.w	r3, r4, r3
 8000bbc:	432b      	orrs	r3, r5
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	e7d7      	b.n	8000b72 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bc2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000bc4:	3b41      	subs	r3, #65	; 0x41
 8000bc6:	409d      	lsls	r5, r3
 8000bc8:	ea26 0505 	bic.w	r5, r6, r5
 8000bcc:	fa04 f303 	lsl.w	r3, r4, r3
 8000bd0:	432b      	orrs	r3, r5
 8000bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bd4:	e7cd      	b.n	8000b72 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bd6:	6916      	ldr	r6, [r2, #16]
 8000bd8:	40a9      	lsls	r1, r5
 8000bda:	ea26 0101 	bic.w	r1, r6, r1
 8000bde:	40ab      	lsls	r3, r5
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6113      	str	r3, [r2, #16]
 8000be4:	e7d4      	b.n	8000b90 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_ADC_ConfigChannel+0xf0>)
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d116      	bne.n	8000c1a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bec:	6893      	ldr	r3, [r2, #8]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	d4d2      	bmi.n	8000b98 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bf2:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bf4:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bfa:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bfc:	d1cc      	bne.n	8000b98 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_ADC_ConfigChannel+0xf4>)
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <HAL_ADC_ConfigChannel+0xf8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c08:	230a      	movs	r3, #10
 8000c0a:	4353      	muls	r3, r2
            wait_loop_index--;
 8000c0c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0c1      	beq.n	8000b98 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000c14:	9b01      	ldr	r3, [sp, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	e7f8      	b.n	8000c0c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e7b9      	b.n	8000b9a <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8000c26:	2302      	movs	r3, #2
 8000c28:	e7ba      	b.n	8000ba0 <HAL_ADC_ConfigChannel+0x64>
 8000c2a:	bf00      	nop
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	20000010 	.word	0x20000010
 8000c34:	000f4240 	.word	0x000f4240

08000c38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c38:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c3a:	6803      	ldr	r3, [r0, #0]
{
 8000c3c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	07d2      	lsls	r2, r2, #31
 8000c42:	d401      	bmi.n	8000c48 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c44:	2000      	movs	r0, #0
}
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000c50:	f7ff ff5c 	bl	8000b0c <HAL_GetTick>
 8000c54:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	07db      	lsls	r3, r3, #31
 8000c5c:	d5f2      	bpl.n	8000c44 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c5e:	f7ff ff55 	bl	8000b0c <HAL_GetTick>
 8000c62:	1b40      	subs	r0, r0, r5
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d9f6      	bls.n	8000c56 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c7a:	e7e4      	b.n	8000c46 <ADC_ConversionStop_Disable+0xe>

08000c7c <HAL_ADC_Init>:
{
 8000c7c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000c7e:	4604      	mov	r4, r0
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d070      	beq.n	8000d66 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c84:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c86:	b923      	cbnz	r3, 8000c92 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000c8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000c8e:	f001 fc4f 	bl	8002530 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff ffd0 	bl	8000c38 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c9a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ca0:	d163      	bne.n	8000d6a <HAL_ADC_Init+0xee>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d161      	bne.n	8000d6a <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ca6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cac:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	f023 0302 	bic.w	r3, r3, #2
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cb6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cb8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000cba:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cbc:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cbe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cc6:	d037      	beq.n	8000d38 <HAL_ADC_Init+0xbc>
 8000cc8:	2901      	cmp	r1, #1
 8000cca:	bf14      	ite	ne
 8000ccc:	4606      	movne	r6, r0
 8000cce:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cd2:	7d25      	ldrb	r5, [r4, #20]
 8000cd4:	2d01      	cmp	r5, #1
 8000cd6:	d106      	bne.n	8000ce6 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cd8:	bb83      	cbnz	r3, 8000d3c <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cda:	69a3      	ldr	r3, [r4, #24]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000ce2:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000ce6:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ce8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000cec:	685d      	ldr	r5, [r3, #4]
 8000cee:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000cf2:	ea45 0506 	orr.w	r5, r5, r6
 8000cf6:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000cf8:	689e      	ldr	r6, [r3, #8]
 8000cfa:	4d1e      	ldr	r5, [pc, #120]	; (8000d74 <HAL_ADC_Init+0xf8>)
 8000cfc:	ea05 0506 	and.w	r5, r5, r6
 8000d00:	ea45 0502 	orr.w	r5, r5, r2
 8000d04:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d06:	d001      	beq.n	8000d0c <HAL_ADC_Init+0x90>
 8000d08:	2901      	cmp	r1, #1
 8000d0a:	d120      	bne.n	8000d4e <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d0c:	6921      	ldr	r1, [r4, #16]
 8000d0e:	3901      	subs	r1, #1
 8000d10:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000d12:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000d14:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000d18:	4329      	orrs	r1, r5
 8000d1a:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d1c:	6899      	ldr	r1, [r3, #8]
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_ADC_Init+0xfc>)
 8000d20:	400b      	ands	r3, r1
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d115      	bne.n	8000d52 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8000d26:	2300      	movs	r3, #0
 8000d28:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d38:	460e      	mov	r6, r1
 8000d3a:	e7ca      	b.n	8000cd2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d4c:	e7cb      	b.n	8000ce6 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e7df      	b.n	8000d12 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d54:	f023 0312 	bic.w	r3, r3, #18
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000d66:	2001      	movs	r0, #1
 8000d68:	e7e5      	b.n	8000d36 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d70:	e7f9      	b.n	8000d66 <HAL_ADC_Init+0xea>
 8000d72:	bf00      	nop
 8000d74:	ffe1f7fd 	.word	0xffe1f7fd
 8000d78:	ff1f0efe 	.word	0xff1f0efe

08000d7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d7e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d82:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	0c1b      	lsrs	r3, r3, #16
 8000d8e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d98:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b570      	push	{r4, r5, r6, lr}
 8000da4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000daa:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dae:	f1c4 0507 	rsb	r5, r4, #7
 8000db2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db4:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	bf28      	it	cs
 8000dba:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	bf98      	it	ls
 8000dc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc2:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	bf88      	it	hi
 8000dc8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dca:	ea21 0303 	bic.w	r3, r1, r3
 8000dce:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	fa06 f404 	lsl.w	r4, r6, r4
 8000dd4:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dda:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	bfa8      	it	ge
 8000de0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000de4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	bfb8      	it	lt
 8000dea:	4a06      	ldrlt	r2, [pc, #24]	; (8000e04 <HAL_NVIC_SetPriority+0x64>)
 8000dec:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	bfab      	itete	ge
 8000df0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	e000ed00 	.word	0xe000ed00
 8000e04:	e000ed14 	.word	0xe000ed14

08000e08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e08:	3801      	subs	r0, #1
 8000e0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e0e:	d20a      	bcs.n	8000e26 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e16:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e38:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000e3a:	4626      	mov	r6, r4
 8000e3c:	4b65      	ldr	r3, [pc, #404]	; (8000fd4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e3e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000fe4 <HAL_GPIO_Init+0x1b0>
 8000e42:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000fe8 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	680a      	ldr	r2, [r1, #0]
 8000e48:	fa32 f506 	lsrs.w	r5, r2, r6
 8000e4c:	d102      	bne.n	8000e54 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000e4e:	b003      	add	sp, #12
 8000e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000e54:	f04f 0801 	mov.w	r8, #1
 8000e58:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000e60:	4590      	cmp	r8, r2
 8000e62:	d17e      	bne.n	8000f62 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000e64:	684d      	ldr	r5, [r1, #4]
 8000e66:	2d12      	cmp	r5, #18
 8000e68:	f000 80a9 	beq.w	8000fbe <HAL_GPIO_Init+0x18a>
 8000e6c:	f200 8082 	bhi.w	8000f74 <HAL_GPIO_Init+0x140>
 8000e70:	2d02      	cmp	r5, #2
 8000e72:	f000 80a1 	beq.w	8000fb8 <HAL_GPIO_Init+0x184>
 8000e76:	d876      	bhi.n	8000f66 <HAL_GPIO_Init+0x132>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	f000 8088 	beq.w	8000f8e <HAL_GPIO_Init+0x15a>
 8000e7e:	2d01      	cmp	r5, #1
 8000e80:	f000 8098 	beq.w	8000fb4 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e84:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e88:	2aff      	cmp	r2, #255	; 0xff
 8000e8a:	bf93      	iteet	ls
 8000e8c:	4682      	movls	sl, r0
 8000e8e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000e92:	3d08      	subhi	r5, #8
 8000e94:	f8d0 b000 	ldrls.w	fp, [r0]
 8000e98:	bf92      	itee	ls
 8000e9a:	00b5      	lslls	r5, r6, #2
 8000e9c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000ea0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea2:	fa09 f805 	lsl.w	r8, r9, r5
 8000ea6:	ea2b 0808 	bic.w	r8, fp, r8
 8000eaa:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eae:	bf88      	it	hi
 8000eb0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb4:	ea48 0505 	orr.w	r5, r8, r5
 8000eb8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ebc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000ec0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000ec4:	d04d      	beq.n	8000f62 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec6:	4f44      	ldr	r7, [pc, #272]	; (8000fd8 <HAL_GPIO_Init+0x1a4>)
 8000ec8:	f026 0803 	bic.w	r8, r6, #3
 8000ecc:	69bd      	ldr	r5, [r7, #24]
 8000ece:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000ed2:	f045 0501 	orr.w	r5, r5, #1
 8000ed6:	61bd      	str	r5, [r7, #24]
 8000ed8:	69bd      	ldr	r5, [r7, #24]
 8000eda:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000ede:	f005 0501 	and.w	r5, r5, #1
 8000ee2:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000eee:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef2:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ef6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000efa:	4d38      	ldr	r5, [pc, #224]	; (8000fdc <HAL_GPIO_Init+0x1a8>)
 8000efc:	42a8      	cmp	r0, r5
 8000efe:	d063      	beq.n	8000fc8 <HAL_GPIO_Init+0x194>
 8000f00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f04:	42a8      	cmp	r0, r5
 8000f06:	d061      	beq.n	8000fcc <HAL_GPIO_Init+0x198>
 8000f08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f0c:	42a8      	cmp	r0, r5
 8000f0e:	d05f      	beq.n	8000fd0 <HAL_GPIO_Init+0x19c>
 8000f10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f14:	42a8      	cmp	r0, r5
 8000f16:	bf0c      	ite	eq
 8000f18:	2503      	moveq	r5, #3
 8000f1a:	2504      	movne	r5, #4
 8000f1c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000f20:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000f24:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000f28:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f2e:	bf14      	ite	ne
 8000f30:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f32:	4395      	biceq	r5, r2
 8000f34:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000f36:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f3c:	bf14      	ite	ne
 8000f3e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f40:	4395      	biceq	r5, r2
 8000f42:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f44:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f46:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f4a:	bf14      	ite	ne
 8000f4c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4e:	4395      	biceq	r5, r2
 8000f50:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f52:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f54:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f58:	bf14      	ite	ne
 8000f5a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5c:	ea25 0202 	biceq.w	r2, r5, r2
 8000f60:	60da      	str	r2, [r3, #12]
	position++;
 8000f62:	3601      	adds	r6, #1
 8000f64:	e76f      	b.n	8000e46 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000f66:	2d03      	cmp	r5, #3
 8000f68:	d022      	beq.n	8000fb0 <HAL_GPIO_Init+0x17c>
 8000f6a:	2d11      	cmp	r5, #17
 8000f6c:	d18a      	bne.n	8000e84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6e:	68cc      	ldr	r4, [r1, #12]
 8000f70:	3404      	adds	r4, #4
          break;
 8000f72:	e787      	b.n	8000e84 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000f74:	4f1a      	ldr	r7, [pc, #104]	; (8000fe0 <HAL_GPIO_Init+0x1ac>)
 8000f76:	42bd      	cmp	r5, r7
 8000f78:	d009      	beq.n	8000f8e <HAL_GPIO_Init+0x15a>
 8000f7a:	d812      	bhi.n	8000fa2 <HAL_GPIO_Init+0x16e>
 8000f7c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000fec <HAL_GPIO_Init+0x1b8>
 8000f80:	454d      	cmp	r5, r9
 8000f82:	d004      	beq.n	8000f8e <HAL_GPIO_Init+0x15a>
 8000f84:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000f88:	454d      	cmp	r5, r9
 8000f8a:	f47f af7b 	bne.w	8000e84 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8e:	688c      	ldr	r4, [r1, #8]
 8000f90:	b1c4      	cbz	r4, 8000fc4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f92:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000f94:	bf0c      	ite	eq
 8000f96:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000f9a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9e:	2408      	movs	r4, #8
 8000fa0:	e770      	b.n	8000e84 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000fa2:	4565      	cmp	r5, ip
 8000fa4:	d0f3      	beq.n	8000f8e <HAL_GPIO_Init+0x15a>
 8000fa6:	4575      	cmp	r5, lr
 8000fa8:	d0f1      	beq.n	8000f8e <HAL_GPIO_Init+0x15a>
 8000faa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000ff0 <HAL_GPIO_Init+0x1bc>
 8000fae:	e7eb      	b.n	8000f88 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	e767      	b.n	8000e84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	68cc      	ldr	r4, [r1, #12]
          break;
 8000fb6:	e765      	b.n	8000e84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb8:	68cc      	ldr	r4, [r1, #12]
 8000fba:	3408      	adds	r4, #8
          break;
 8000fbc:	e762      	b.n	8000e84 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fbe:	68cc      	ldr	r4, [r1, #12]
 8000fc0:	340c      	adds	r4, #12
          break;
 8000fc2:	e75f      	b.n	8000e84 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc4:	2404      	movs	r4, #4
 8000fc6:	e75d      	b.n	8000e84 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fc8:	2500      	movs	r5, #0
 8000fca:	e7a7      	b.n	8000f1c <HAL_GPIO_Init+0xe8>
 8000fcc:	2501      	movs	r5, #1
 8000fce:	e7a5      	b.n	8000f1c <HAL_GPIO_Init+0xe8>
 8000fd0:	2502      	movs	r5, #2
 8000fd2:	e7a3      	b.n	8000f1c <HAL_GPIO_Init+0xe8>
 8000fd4:	40010400 	.word	0x40010400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	10210000 	.word	0x10210000
 8000fe4:	10310000 	.word	0x10310000
 8000fe8:	10320000 	.word	0x10320000
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	10220000 	.word	0x10220000

08000ff4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	b10a      	cbz	r2, 8000ffa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff6:	6101      	str	r1, [r0, #16]
  }
}
 8000ff8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffa:	0409      	lsls	r1, r1, #16
 8000ffc:	e7fb      	b.n	8000ff6 <HAL_GPIO_WritePin+0x2>

08000ffe <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ffe:	6801      	ldr	r1, [r0, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	694b      	ldr	r3, [r1, #20]
 8001004:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001008:	d010      	beq.n	800102c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800100a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800100e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001010:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001012:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001014:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001018:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800101c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800101e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
 800102a:	4770      	bx	lr
  }
  return HAL_OK;
 800102c:	4618      	mov	r0, r3
}
 800102e:	4770      	bx	lr

08001030 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	4616      	mov	r6, r2
 8001038:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800103a:	b28f      	uxth	r7, r1
 800103c:	6825      	ldr	r5, [r4, #0]
 800103e:	6968      	ldr	r0, [r5, #20]
 8001040:	ea37 0000 	bics.w	r0, r7, r0
 8001044:	d017      	beq.n	8001076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001046:	696b      	ldr	r3, [r5, #20]
 8001048:	055a      	lsls	r2, r3, #21
 800104a:	d516      	bpl.n	800107a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800104e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001050:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001054:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001056:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800105a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001060:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001064:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001068:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800106a:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800106e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001070:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001072:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800107a:	1c73      	adds	r3, r6, #1
 800107c:	d0df      	beq.n	800103e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800107e:	f7ff fd45 	bl	8000b0c <HAL_GetTick>
 8001082:	eba0 0008 	sub.w	r0, r0, r8
 8001086:	42b0      	cmp	r0, r6
 8001088:	d801      	bhi.n	800108e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 800108a:	2e00      	cmp	r6, #0
 800108c:	d1d6      	bne.n	800103c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800108e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001090:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001092:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001094:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001098:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800109c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800109e:	f042 0220 	orr.w	r2, r2, #32
 80010a2:	e7e4      	b.n	800106e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

080010a4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	460d      	mov	r5, r1
 80010aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	075b      	lsls	r3, r3, #29
 80010b2:	d501      	bpl.n	80010b8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80010b4:	2000      	movs	r0, #0
}
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f7ff ffa0 	bl	8000ffe <I2C_IsAcknowledgeFailed>
 80010be:	b9a8      	cbnz	r0, 80010ec <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80010c0:	1c6a      	adds	r2, r5, #1
 80010c2:	d0f3      	beq.n	80010ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010c4:	f7ff fd22 	bl	8000b0c <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	42a8      	cmp	r0, r5
 80010cc:	d801      	bhi.n	80010d2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d1ec      	bne.n	80010ac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80010d2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80010d4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80010d6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80010d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80010dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80010e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80010e6:	f042 0220 	orr.w	r2, r2, #32
 80010ea:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80010ec:	2001      	movs	r0, #1
 80010ee:	e7e2      	b.n	80010b6 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080010f0 <I2C_WaitOnFlagUntilTimeout>:
{
 80010f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f4:	4604      	mov	r4, r0
 80010f6:	4690      	mov	r8, r2
 80010f8:	461f      	mov	r7, r3
 80010fa:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010fc:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8001100:	b28d      	uxth	r5, r1
 8001102:	6821      	ldr	r1, [r4, #0]
 8001104:	f1b9 0f01 	cmp.w	r9, #1
 8001108:	bf0c      	ite	eq
 800110a:	694b      	ldreq	r3, [r1, #20]
 800110c:	698b      	ldrne	r3, [r1, #24]
 800110e:	ea35 0303 	bics.w	r3, r5, r3
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	4598      	cmp	r8, r3
 800111a:	d001      	beq.n	8001120 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800111c:	2000      	movs	r0, #0
 800111e:	e016      	b.n	800114e <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001120:	1c7b      	adds	r3, r7, #1
 8001122:	d0ef      	beq.n	8001104 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001124:	f7ff fcf2 	bl	8000b0c <HAL_GetTick>
 8001128:	1b80      	subs	r0, r0, r6
 800112a:	42b8      	cmp	r0, r7
 800112c:	d801      	bhi.n	8001132 <I2C_WaitOnFlagUntilTimeout+0x42>
 800112e:	2f00      	cmp	r7, #0
 8001130:	d1e7      	bne.n	8001102 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001132:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001134:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001136:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001138:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800113a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800113e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001142:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001144:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	6422      	str	r2, [r4, #64]	; 0x40
}
 800114e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001152 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001152:	b570      	push	{r4, r5, r6, lr}
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	061b      	lsls	r3, r3, #24
 8001160:	d501      	bpl.n	8001166 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001162:	2000      	movs	r0, #0
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001166:	4620      	mov	r0, r4
 8001168:	f7ff ff49 	bl	8000ffe <I2C_IsAcknowledgeFailed>
 800116c:	b9a8      	cbnz	r0, 800119a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800116e:	1c6a      	adds	r2, r5, #1
 8001170:	d0f3      	beq.n	800115a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001172:	f7ff fccb 	bl	8000b0c <HAL_GetTick>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	42a8      	cmp	r0, r5
 800117a:	d801      	bhi.n	8001180 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800117c:	2d00      	cmp	r5, #0
 800117e:	d1ec      	bne.n	800115a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001180:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001182:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001184:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001186:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800118a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800118e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001190:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001194:	f042 0220 	orr.w	r2, r2, #32
 8001198:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800119a:	2001      	movs	r0, #1
 800119c:	e7e2      	b.n	8001164 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080011a0 <HAL_I2C_Init>:
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80011a2:	4604      	mov	r4, r0
 80011a4:	b908      	cbnz	r0, 80011aa <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80011a6:	2001      	movs	r0, #1
}
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011b2:	b91b      	cbnz	r3, 80011bc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80011b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80011b8:	f001 f9e8 	bl	800258c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011bc:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80011be:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011cc:	f000 fc78 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	4a41      	ldr	r2, [pc, #260]	; (80012d8 <HAL_I2C_Init+0x138>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d84d      	bhi.n	8001274 <HAL_I2C_Init+0xd4>
 80011d8:	4a40      	ldr	r2, [pc, #256]	; (80012dc <HAL_I2C_Init+0x13c>)
 80011da:	4290      	cmp	r0, r2
 80011dc:	d9e3      	bls.n	80011a6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80011de:	4940      	ldr	r1, [pc, #256]	; (80012e0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011e0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80011e2:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011e6:	6855      	ldr	r5, [r2, #4]
 80011e8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80011ec:	430d      	orrs	r5, r1
 80011ee:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011f0:	6a15      	ldr	r5, [r2, #32]
 80011f2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80011f6:	3101      	adds	r1, #1
 80011f8:	4329      	orrs	r1, r5
 80011fa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011fc:	69d1      	ldr	r1, [r2, #28]
 80011fe:	4d36      	ldr	r5, [pc, #216]	; (80012d8 <HAL_I2C_Init+0x138>)
 8001200:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001204:	42ab      	cmp	r3, r5
 8001206:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800120a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800120e:	d848      	bhi.n	80012a2 <HAL_I2C_Init+0x102>
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fbb0 f0f3 	udiv	r0, r0, r3
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b04      	cmp	r3, #4
 800121e:	bf38      	it	cc
 8001220:	2304      	movcc	r3, #4
 8001222:	430b      	orrs	r3, r1
 8001224:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001226:	6811      	ldr	r1, [r2, #0]
 8001228:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800122c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001230:	4303      	orrs	r3, r0
 8001232:	430b      	orrs	r3, r1
 8001234:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001236:	6891      	ldr	r1, [r2, #8]
 8001238:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800123c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001240:	4303      	orrs	r3, r0
 8001242:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001246:	430b      	orrs	r3, r1
 8001248:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800124a:	68d1      	ldr	r1, [r2, #12]
 800124c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001250:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001254:	4303      	orrs	r3, r0
 8001256:	430b      	orrs	r3, r1
 8001258:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800125a:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800125c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001264:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001266:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001268:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800126c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001272:	e799      	b.n	80011a8 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_I2C_Init+0x144>)
 8001276:	4290      	cmp	r0, r2
 8001278:	d995      	bls.n	80011a6 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800127a:	4e19      	ldr	r6, [pc, #100]	; (80012e0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001280:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001284:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001286:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001288:	6855      	ldr	r5, [r2, #4]
 800128a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800128e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001290:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001294:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001296:	6a15      	ldr	r5, [r2, #32]
 8001298:	fbb1 f1f6 	udiv	r1, r1, r6
 800129c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80012a0:	e7a9      	b.n	80011f6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a2:	68a5      	ldr	r5, [r4, #8]
 80012a4:	b955      	cbnz	r5, 80012bc <HAL_I2C_Init+0x11c>
 80012a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ae:	1c43      	adds	r3, r0, #1
 80012b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b4:	b16b      	cbz	r3, 80012d2 <HAL_I2C_Init+0x132>
 80012b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ba:	e7b2      	b.n	8001222 <HAL_I2C_Init+0x82>
 80012bc:	2519      	movs	r5, #25
 80012be:	436b      	muls	r3, r5
 80012c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ca:	b113      	cbz	r3, 80012d2 <HAL_I2C_Init+0x132>
 80012cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d0:	e7a7      	b.n	8001222 <HAL_I2C_Init+0x82>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e7a5      	b.n	8001222 <HAL_I2C_Init+0x82>
 80012d6:	bf00      	nop
 80012d8:	000186a0 	.word	0x000186a0
 80012dc:	001e847f 	.word	0x001e847f
 80012e0:	000f4240 	.word	0x000f4240
 80012e4:	003d08ff 	.word	0x003d08ff

080012e8 <HAL_I2C_Master_Transmit>:
{
 80012e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80012ec:	4604      	mov	r4, r0
 80012ee:	461f      	mov	r7, r3
 80012f0:	460d      	mov	r5, r1
 80012f2:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80012f4:	f7ff fc0a 	bl	8000b0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80012fc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d004      	beq.n	800130c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001302:	2502      	movs	r5, #2
}
 8001304:	4628      	mov	r0, r5
 8001306:	b004      	add	sp, #16
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	2319      	movs	r3, #25
 8001310:	2201      	movs	r2, #1
 8001312:	4958      	ldr	r1, [pc, #352]	; (8001474 <HAL_I2C_Master_Transmit+0x18c>)
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff feeb 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 800131a:	2800      	cmp	r0, #0
 800131c:	d1f1      	bne.n	8001302 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800131e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001322:	2b01      	cmp	r3, #1
 8001324:	d0ed      	beq.n	8001302 <HAL_I2C_Master_Transmit+0x1a>
 8001326:	2301      	movs	r3, #1
 8001328:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001332:	bf5e      	ittt	pl
 8001334:	681a      	ldrpl	r2, [r3, #0]
 8001336:	f042 0201 	orrpl.w	r2, r2, #1
 800133a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001342:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001344:	2221      	movs	r2, #33	; 0x21
 8001346:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800134a:	2210      	movs	r2, #16
 800134c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001350:	2200      	movs	r2, #0
 8001352:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001354:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001356:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001358:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800135c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_I2C_Master_Transmit+0x190>)
 8001360:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001362:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001364:	2a08      	cmp	r2, #8
 8001366:	d004      	beq.n	8001372 <HAL_I2C_Master_Transmit+0x8a>
 8001368:	2a01      	cmp	r2, #1
 800136a:	d002      	beq.n	8001372 <HAL_I2C_Master_Transmit+0x8a>
 800136c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001370:	d104      	bne.n	800137c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e002      	b.n	8001382 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800137c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800137e:	2a12      	cmp	r2, #18
 8001380:	d0f7      	beq.n	8001372 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001382:	9600      	str	r6, [sp, #0]
 8001384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff feaf 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 8001392:	b108      	cbz	r0, 8001398 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001394:	2501      	movs	r5, #1
 8001396:	e7b5      	b.n	8001304 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	6822      	ldr	r2, [r4, #0]
 800139c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013a0:	d121      	bne.n	80013e6 <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80013a2:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80013a6:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013a8:	4633      	mov	r3, r6
 80013aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013ac:	4933      	ldr	r1, [pc, #204]	; (800147c <HAL_I2C_Master_Transmit+0x194>)
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff fe3e 	bl	8001030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013b4:	4605      	mov	r5, r0
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d1ec      	bne.n	8001394 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	9003      	str	r0, [sp, #12]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	9203      	str	r2, [sp, #12]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80013c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013ca:	b9f3      	cbnz	r3, 800140a <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013cc:	6821      	ldr	r1, [r4, #0]
 80013ce:	680a      	ldr	r2, [r1, #0]
 80013d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d4:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80013d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80013e4:	e78e      	b.n	8001304 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80013e6:	11eb      	asrs	r3, r5, #7
 80013e8:	f003 0306 	and.w	r3, r3, #6
 80013ec:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80013f0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80013f2:	4923      	ldr	r1, [pc, #140]	; (8001480 <HAL_I2C_Master_Transmit+0x198>)
 80013f4:	4633      	mov	r3, r6
 80013f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fe19 	bl	8001030 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1c8      	bne.n	8001394 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	b2ed      	uxtb	r5, r5
 8001406:	611d      	str	r5, [r3, #16]
 8001408:	e7ce      	b.n	80013a8 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140a:	4632      	mov	r2, r6
 800140c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800140e:	4620      	mov	r0, r4
 8001410:	f7ff fe9f 	bl	8001152 <I2C_WaitOnTXEFlagUntilTimeout>
 8001414:	b140      	cbz	r0, 8001428 <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001418:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141a:	bf01      	itttt	eq
 800141c:	6822      	ldreq	r2, [r4, #0]
 800141e:	6813      	ldreq	r3, [r2, #0]
 8001420:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001424:	6013      	streq	r3, [r2, #0]
 8001426:	e7b5      	b.n	8001394 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800142a:	6820      	ldr	r0, [r4, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001432:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001434:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001436:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001438:	3a01      	subs	r2, #1
 800143a:	b292      	uxth	r2, r2
 800143c:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800143e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001440:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001442:	1e51      	subs	r1, r2, #1
 8001444:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001446:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001448:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800144a:	d50a      	bpl.n	8001462 <HAL_I2C_Master_Transmit+0x17a>
 800144c:	b149      	cbz	r1, 8001462 <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144e:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8001450:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001452:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001454:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001456:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001458:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800145a:	3b01      	subs	r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001460:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001462:	4632      	mov	r2, r6
 8001464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fe1c 	bl	80010a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800146c:	2800      	cmp	r0, #0
 800146e:	d0ab      	beq.n	80013c8 <HAL_I2C_Master_Transmit+0xe0>
 8001470:	e7d1      	b.n	8001416 <HAL_I2C_Master_Transmit+0x12e>
 8001472:	bf00      	nop
 8001474:	00100002 	.word	0x00100002
 8001478:	ffff0000 	.word	0xffff0000
 800147c:	00010002 	.word	0x00010002
 8001480:	00010008 	.word	0x00010008

08001484 <HAL_I2C_IsDeviceReady>:
{
 8001484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001488:	4604      	mov	r4, r0
 800148a:	b085      	sub	sp, #20
 800148c:	4698      	mov	r8, r3
 800148e:	4689      	mov	r9, r1
 8001490:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8001492:	f7ff fb3b 	bl	8000b0c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001496:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 800149a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800149c:	2b20      	cmp	r3, #32
 800149e:	d003      	beq.n	80014a8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80014a0:	2002      	movs	r0, #2
}
 80014a2:	b005      	add	sp, #20
 80014a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a8:	9000      	str	r0, [sp, #0]
 80014aa:	2319      	movs	r3, #25
 80014ac:	2201      	movs	r2, #1
 80014ae:	4949      	ldr	r1, [pc, #292]	; (80015d4 <HAL_I2C_IsDeviceReady+0x150>)
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff fe1d 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	d1f2      	bne.n	80014a0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80014ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d0ee      	beq.n	80014a0 <HAL_I2C_IsDeviceReady+0x1c>
 80014c2:	2301      	movs	r3, #1
 80014c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c8:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 80014ca:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014cc:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ce:	f8df b104 	ldr.w	fp, [pc, #260]	; 80015d4 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d2:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014d4:	bf58      	it	pl
 80014d6:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014d8:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80014dc:	bf5c      	itt	pl
 80014de:	f042 0201 	orrpl.w	r2, r2, #1
 80014e2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ea:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	2324      	movs	r3, #36	; 0x24
 80014ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014f6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80014fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014fc:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80014fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001502:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001504:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800150c:	9500      	str	r5, [sp, #0]
 800150e:	4643      	mov	r3, r8
 8001510:	2200      	movs	r2, #0
 8001512:	f7ff fded 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 8001516:	b108      	cbz	r0, 800151c <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8001518:	2001      	movs	r0, #1
 800151a:	e7c2      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800151c:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800151e:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001520:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001524:	f7ff faf2 	bl	8000b0c <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800152e:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001530:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001534:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001538:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800153c:	29a0      	cmp	r1, #160	; 0xa0
 800153e:	d001      	beq.n	8001544 <HAL_I2C_IsDeviceReady+0xc0>
 8001540:	b902      	cbnz	r2, 8001544 <HAL_I2C_IsDeviceReady+0xc0>
 8001542:	b303      	cbz	r3, 8001586 <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8001544:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001546:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001548:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001558:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800155a:	d026      	beq.n	80015aa <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155c:	2200      	movs	r2, #0
 800155e:	9203      	str	r2, [sp, #12]
 8001560:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001562:	491c      	ldr	r1, [pc, #112]	; (80015d4 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001564:	9203      	str	r2, [sp, #12]
 8001566:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001568:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800156e:	9500      	str	r5, [sp, #0]
 8001570:	2319      	movs	r3, #25
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff fdbc 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 8001578:	2800      	cmp	r0, #0
 800157a:	d1cd      	bne.n	8001518 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 800157c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001580:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001584:	e78d      	b.n	80014a2 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff fac1 	bl	8000b0c <HAL_GetTick>
 800158a:	1b40      	subs	r0, r0, r5
 800158c:	4540      	cmp	r0, r8
 800158e:	d802      	bhi.n	8001596 <HAL_I2C_IsDeviceReady+0x112>
 8001590:	f1b8 0f00 	cmp.w	r8, #0
 8001594:	d101      	bne.n	800159a <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001596:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800159e:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015a4:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80015a8:	e7c6      	b.n	8001538 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015ae:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b0:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b2:	4620      	mov	r0, r4
 80015b4:	9500      	str	r5, [sp, #0]
 80015b6:	2319      	movs	r3, #25
 80015b8:	2201      	movs	r2, #1
 80015ba:	f7ff fd99 	bl	80010f0 <I2C_WaitOnFlagUntilTimeout>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1aa      	bne.n	8001518 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 80015c2:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80015c4:	4557      	cmp	r7, sl
 80015c6:	d399      	bcc.n	80014fc <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 80015c8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80015cc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80015d0:	e7a2      	b.n	8001518 <HAL_I2C_IsDeviceReady+0x94>
 80015d2:	bf00      	nop
 80015d4:	00100002 	.word	0x00100002

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	4605      	mov	r5, r0
 80015de:	b908      	cbnz	r0, 80015e4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e03c      	b.n	800165e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e4:	6803      	ldr	r3, [r0, #0]
 80015e6:	07db      	lsls	r3, r3, #31
 80015e8:	d410      	bmi.n	800160c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	079f      	lsls	r7, r3, #30
 80015ee:	d45d      	bmi.n	80016ac <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	0719      	lsls	r1, r3, #28
 80015f4:	f100 8094 	bmi.w	8001720 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	075a      	lsls	r2, r3, #29
 80015fc:	f100 80be 	bmi.w	800177c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001600:	69e8      	ldr	r0, [r5, #28]
 8001602:	2800      	cmp	r0, #0
 8001604:	f040 812c 	bne.w	8001860 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001608:	2000      	movs	r0, #0
 800160a:	e028      	b.n	800165e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800160c:	4c8f      	ldr	r4, [pc, #572]	; (800184c <HAL_RCC_OscConfig+0x274>)
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b04      	cmp	r3, #4
 8001616:	d007      	beq.n	8001628 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d109      	bne.n	8001636 <HAL_RCC_OscConfig+0x5e>
 8001622:	6863      	ldr	r3, [r4, #4]
 8001624:	03de      	lsls	r6, r3, #15
 8001626:	d506      	bpl.n	8001636 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	039c      	lsls	r4, r3, #14
 800162c:	d5dd      	bpl.n	80015ea <HAL_RCC_OscConfig+0x12>
 800162e:	686b      	ldr	r3, [r5, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1da      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
 8001634:	e7d4      	b.n	80015e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	686b      	ldr	r3, [r5, #4]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d112      	bne.n	8001664 <HAL_RCC_OscConfig+0x8c>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001646:	f7ff fa61 	bl	8000b0c <HAL_GetTick>
 800164a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	0398      	lsls	r0, r3, #14
 8001650:	d4cb      	bmi.n	80015ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001652:	f7ff fa5b 	bl	8000b0c <HAL_GetTick>
 8001656:	1b80      	subs	r0, r0, r6
 8001658:	2864      	cmp	r0, #100	; 0x64
 800165a:	d9f7      	bls.n	800164c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
}
 800165e:	b002      	add	sp, #8
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001664:	b99b      	cbnz	r3, 800168e <HAL_RCC_OscConfig+0xb6>
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001676:	f7ff fa49 	bl	8000b0c <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	0399      	lsls	r1, r3, #14
 8001680:	d5b3      	bpl.n	80015ea <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fa43 	bl	8000b0c <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	2864      	cmp	r0, #100	; 0x64
 800168a:	d9f7      	bls.n	800167c <HAL_RCC_OscConfig+0xa4>
 800168c:	e7e6      	b.n	800165c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	d103      	bne.n	800169e <HAL_RCC_OscConfig+0xc6>
 8001696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169a:	6023      	str	r3, [r4, #0]
 800169c:	e7cf      	b.n	800163e <HAL_RCC_OscConfig+0x66>
 800169e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a2:	6023      	str	r3, [r4, #0]
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	e7cb      	b.n	8001644 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ac:	4c67      	ldr	r4, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x274>)
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	f013 0f0c 	tst.w	r3, #12
 80016b4:	d007      	beq.n	80016c6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016b6:	6863      	ldr	r3, [r4, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d110      	bne.n	80016e2 <HAL_RCC_OscConfig+0x10a>
 80016c0:	6863      	ldr	r3, [r4, #4]
 80016c2:	03da      	lsls	r2, r3, #15
 80016c4:	d40d      	bmi.n	80016e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	079b      	lsls	r3, r3, #30
 80016ca:	d502      	bpl.n	80016d2 <HAL_RCC_OscConfig+0xfa>
 80016cc:	692b      	ldr	r3, [r5, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d186      	bne.n	80015e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	696a      	ldr	r2, [r5, #20]
 80016d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016de:	6023      	str	r3, [r4, #0]
 80016e0:	e786      	b.n	80015f0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e2:	692a      	ldr	r2, [r5, #16]
 80016e4:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <HAL_RCC_OscConfig+0x278>)
 80016e6:	b16a      	cbz	r2, 8001704 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa0e 	bl	8000b0c <HAL_GetTick>
 80016f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	079f      	lsls	r7, r3, #30
 80016f6:	d4ec      	bmi.n	80016d2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fa08 	bl	8000b0c <HAL_GetTick>
 80016fc:	1b80      	subs	r0, r0, r6
 80016fe:	2802      	cmp	r0, #2
 8001700:	d9f7      	bls.n	80016f2 <HAL_RCC_OscConfig+0x11a>
 8001702:	e7ab      	b.n	800165c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001704:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001706:	f7ff fa01 	bl	8000b0c <HAL_GetTick>
 800170a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	0798      	lsls	r0, r3, #30
 8001710:	f57f af6e 	bpl.w	80015f0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff f9fa 	bl	8000b0c <HAL_GetTick>
 8001718:	1b80      	subs	r0, r0, r6
 800171a:	2802      	cmp	r0, #2
 800171c:	d9f6      	bls.n	800170c <HAL_RCC_OscConfig+0x134>
 800171e:	e79d      	b.n	800165c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001720:	69aa      	ldr	r2, [r5, #24]
 8001722:	4c4a      	ldr	r4, [pc, #296]	; (800184c <HAL_RCC_OscConfig+0x274>)
 8001724:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <HAL_RCC_OscConfig+0x27c>)
 8001726:	b1da      	cbz	r2, 8001760 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800172c:	f7ff f9ee 	bl	8000b0c <HAL_GetTick>
 8001730:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001734:	079b      	lsls	r3, r3, #30
 8001736:	d50d      	bpl.n	8001754 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001738:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800173c:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_RCC_OscConfig+0x280>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fbb3 f3f2 	udiv	r3, r3, r2
 8001744:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001746:	bf00      	nop
  }
  while (Delay --);
 8001748:	9b01      	ldr	r3, [sp, #4]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	9201      	str	r2, [sp, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_RCC_OscConfig+0x16e>
 8001752:	e751      	b.n	80015f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff f9da 	bl	8000b0c <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	2802      	cmp	r0, #2
 800175c:	d9e9      	bls.n	8001732 <HAL_RCC_OscConfig+0x15a>
 800175e:	e77d      	b.n	800165c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001760:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001762:	f7ff f9d3 	bl	8000b0c <HAL_GetTick>
 8001766:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800176a:	079f      	lsls	r7, r3, #30
 800176c:	f57f af44 	bpl.w	80015f8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff f9cc 	bl	8000b0c <HAL_GetTick>
 8001774:	1b80      	subs	r0, r0, r6
 8001776:	2802      	cmp	r0, #2
 8001778:	d9f6      	bls.n	8001768 <HAL_RCC_OscConfig+0x190>
 800177a:	e76f      	b.n	800165c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177c:	4c33      	ldr	r4, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x274>)
 800177e:	69e3      	ldr	r3, [r4, #28]
 8001780:	00d8      	lsls	r0, r3, #3
 8001782:	d424      	bmi.n	80017ce <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001784:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	69e3      	ldr	r3, [r4, #28]
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	61e3      	str	r3, [r4, #28]
 800178e:	69e3      	ldr	r3, [r4, #28]
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4e30      	ldr	r6, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x284>)
 800179a:	6833      	ldr	r3, [r6, #0]
 800179c:	05d9      	lsls	r1, r3, #23
 800179e:	d518      	bpl.n	80017d2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	68eb      	ldr	r3, [r5, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d126      	bne.n	80017f4 <HAL_RCC_OscConfig+0x21c>
 80017a6:	6a23      	ldr	r3, [r4, #32]
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9ad 	bl	8000b0c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017b6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	6a23      	ldr	r3, [r4, #32]
 80017ba:	079b      	lsls	r3, r3, #30
 80017bc:	d53f      	bpl.n	800183e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80017be:	2f00      	cmp	r7, #0
 80017c0:	f43f af1e 	beq.w	8001600 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	69e3      	ldr	r3, [r4, #28]
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	61e3      	str	r3, [r4, #28]
 80017cc:	e718      	b.n	8001600 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80017ce:	2700      	movs	r7, #0
 80017d0:	e7e2      	b.n	8001798 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	6833      	ldr	r3, [r6, #0]
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80017da:	f7ff f997 	bl	8000b0c <HAL_GetTick>
 80017de:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	6833      	ldr	r3, [r6, #0]
 80017e2:	05da      	lsls	r2, r3, #23
 80017e4:	d4dc      	bmi.n	80017a0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff f991 	bl	8000b0c <HAL_GetTick>
 80017ea:	eba0 0008 	sub.w	r0, r0, r8
 80017ee:	2864      	cmp	r0, #100	; 0x64
 80017f0:	d9f6      	bls.n	80017e0 <HAL_RCC_OscConfig+0x208>
 80017f2:	e733      	b.n	800165c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f4:	b9ab      	cbnz	r3, 8001822 <HAL_RCC_OscConfig+0x24a>
 80017f6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6223      	str	r3, [r4, #32]
 8001802:	6a23      	ldr	r3, [r4, #32]
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800180a:	f7ff f97f 	bl	8000b0c <HAL_GetTick>
 800180e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	6a23      	ldr	r3, [r4, #32]
 8001812:	0798      	lsls	r0, r3, #30
 8001814:	d5d3      	bpl.n	80017be <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff f979 	bl	8000b0c <HAL_GetTick>
 800181a:	1b80      	subs	r0, r0, r6
 800181c:	4540      	cmp	r0, r8
 800181e:	d9f7      	bls.n	8001810 <HAL_RCC_OscConfig+0x238>
 8001820:	e71c      	b.n	800165c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001822:	2b05      	cmp	r3, #5
 8001824:	6a23      	ldr	r3, [r4, #32]
 8001826:	d103      	bne.n	8001830 <HAL_RCC_OscConfig+0x258>
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	6223      	str	r3, [r4, #32]
 800182e:	e7ba      	b.n	80017a6 <HAL_RCC_OscConfig+0x1ce>
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6223      	str	r3, [r4, #32]
 8001836:	6a23      	ldr	r3, [r4, #32]
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	e7b6      	b.n	80017ac <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f965 	bl	8000b0c <HAL_GetTick>
 8001842:	eba0 0008 	sub.w	r0, r0, r8
 8001846:	42b0      	cmp	r0, r6
 8001848:	d9b6      	bls.n	80017b8 <HAL_RCC_OscConfig+0x1e0>
 800184a:	e707      	b.n	800165c <HAL_RCC_OscConfig+0x84>
 800184c:	40021000 	.word	0x40021000
 8001850:	42420000 	.word	0x42420000
 8001854:	42420480 	.word	0x42420480
 8001858:	20000010 	.word	0x20000010
 800185c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	461c      	mov	r4, r3
 8001866:	f002 020c 	and.w	r2, r2, #12
 800186a:	2a08      	cmp	r2, #8
 800186c:	d03d      	beq.n	80018ea <HAL_RCC_OscConfig+0x312>
 800186e:	2300      	movs	r3, #0
 8001870:	4e27      	ldr	r6, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001874:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	d12b      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001878:	f7ff f948 	bl	8000b0c <HAL_GetTick>
 800187c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	0199      	lsls	r1, r3, #6
 8001882:	d41f      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001884:	6a2b      	ldr	r3, [r5, #32]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800188c:	6862      	ldr	r2, [r4, #4]
 800188e:	68a9      	ldr	r1, [r5, #8]
 8001890:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001894:	430a      	orrs	r2, r1
 8001896:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001898:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800189a:	6862      	ldr	r2, [r4, #4]
 800189c:	430b      	orrs	r3, r1
 800189e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018a6:	2301      	movs	r3, #1
 80018a8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018aa:	f7ff f92f 	bl	8000b0c <HAL_GetTick>
 80018ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	019a      	lsls	r2, r3, #6
 80018b4:	f53f aea8 	bmi.w	8001608 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f928 	bl	8000b0c <HAL_GetTick>
 80018bc:	1b40      	subs	r0, r0, r5
 80018be:	2802      	cmp	r0, #2
 80018c0:	d9f6      	bls.n	80018b0 <HAL_RCC_OscConfig+0x2d8>
 80018c2:	e6cb      	b.n	800165c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f922 	bl	8000b0c <HAL_GetTick>
 80018c8:	1bc0      	subs	r0, r0, r7
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9d7      	bls.n	800187e <HAL_RCC_OscConfig+0x2a6>
 80018ce:	e6c5      	b.n	800165c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80018d0:	f7ff f91c 	bl	8000b0c <HAL_GetTick>
 80018d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	f57f ae95 	bpl.w	8001608 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f915 	bl	8000b0c <HAL_GetTick>
 80018e2:	1b40      	subs	r0, r0, r5
 80018e4:	2802      	cmp	r0, #2
 80018e6:	d9f6      	bls.n	80018d6 <HAL_RCC_OscConfig+0x2fe>
 80018e8:	e6b8      	b.n	800165c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ea:	2801      	cmp	r0, #1
 80018ec:	f43f aeb7 	beq.w	800165e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80018f0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	6a2b      	ldr	r3, [r5, #32]
 80018f4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f47f ae71 	bne.w	80015e0 <HAL_RCC_OscConfig+0x8>
 80018fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001900:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001904:	1ac0      	subs	r0, r0, r3
 8001906:	bf18      	it	ne
 8001908:	2001      	movne	r0, #1
 800190a:	e6a8      	b.n	800165e <HAL_RCC_OscConfig+0x86>
 800190c:	40021000 	.word	0x40021000
 8001910:	42420060 	.word	0x42420060

08001914 <HAL_RCC_GetSysClockFreq>:
{
 8001914:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001918:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191a:	ac02      	add	r4, sp, #8
 800191c:	f103 0510 	add.w	r5, r3, #16
 8001920:	4622      	mov	r2, r4
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	3308      	adds	r3, #8
 8001928:	c203      	stmia	r2!, {r0, r1}
 800192a:	42ab      	cmp	r3, r5
 800192c:	4614      	mov	r4, r2
 800192e:	d1f7      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001930:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001936:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800193a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800193c:	f003 020c 	and.w	r2, r3, #12
 8001940:	2a08      	cmp	r2, #8
 8001942:	d117      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001944:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001948:	a806      	add	r0, sp, #24
 800194a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800194c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800194e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001952:	d50c      	bpl.n	800196e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001954:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001956:	480a      	ldr	r0, [pc, #40]	; (8001980 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001958:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800195e:	aa06      	add	r2, sp, #24
 8001960:	4413      	add	r3, r2
 8001962:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001966:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800196a:	b007      	add	sp, #28
 800196c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_RCC_GetSysClockFreq+0x70>)
 8001970:	4350      	muls	r0, r2
 8001972:	e7fa      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001976:	e7f8      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x56>
 8001978:	08004fd0 	.word	0x08004fd0
 800197c:	40021000 	.word	0x40021000
 8001980:	007a1200 	.word	0x007a1200
 8001984:	003d0900 	.word	0x003d0900

08001988 <HAL_RCC_ClockConfig>:
{
 8001988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800198c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800198e:	4604      	mov	r4, r0
 8001990:	b910      	cbnz	r0, 8001998 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001992:	2001      	movs	r0, #1
}
 8001994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4a44      	ldr	r2, [pc, #272]	; (8001aac <HAL_RCC_ClockConfig+0x124>)
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	428b      	cmp	r3, r1
 80019a2:	d328      	bcc.n	80019f6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	6821      	ldr	r1, [r4, #0]
 80019a6:	078e      	lsls	r6, r1, #30
 80019a8:	d430      	bmi.n	8001a0c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	07ca      	lsls	r2, r1, #31
 80019ac:	d443      	bmi.n	8001a36 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ae:	4a3f      	ldr	r2, [pc, #252]	; (8001aac <HAL_RCC_ClockConfig+0x124>)
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	42ab      	cmp	r3, r5
 80019b8:	d865      	bhi.n	8001a86 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	4d3c      	ldr	r5, [pc, #240]	; (8001ab0 <HAL_RCC_ClockConfig+0x128>)
 80019be:	f012 0f04 	tst.w	r2, #4
 80019c2:	d16c      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	0713      	lsls	r3, r2, #28
 80019c6:	d506      	bpl.n	80019d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c8:	686b      	ldr	r3, [r5, #4]
 80019ca:	6922      	ldr	r2, [r4, #16]
 80019cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019d4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f7ff ff9d 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80019da:	686b      	ldr	r3, [r5, #4]
 80019dc:	4a35      	ldr	r2, [pc, #212]	; (8001ab4 <HAL_RCC_ClockConfig+0x12c>)
 80019de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	40d8      	lsrs	r0, r3
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_RCC_ClockConfig+0x130>)
 80019e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_ClockConfig+0x134>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f7ff f84b 	bl	8000a88 <HAL_InitTick>
  return HAL_OK;
 80019f2:	2000      	movs	r0, #0
 80019f4:	e7ce      	b.n	8001994 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f023 0307 	bic.w	r3, r3, #7
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a00:	6813      	ldr	r3, [r2, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	428b      	cmp	r3, r1
 8001a08:	d1c3      	bne.n	8001992 <HAL_RCC_ClockConfig+0xa>
 8001a0a:	e7cb      	b.n	80019a4 <HAL_RCC_ClockConfig+0x1c>
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a12:	bf1e      	ittt	ne
 8001a14:	685a      	ldrne	r2, [r3, #4]
 8001a16:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a1a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a1e:	bf42      	ittt	mi
 8001a20:	685a      	ldrmi	r2, [r3, #4]
 8001a22:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a26:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	68a0      	ldr	r0, [r4, #8]
 8001a2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a30:	4302      	orrs	r2, r0
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	e7b9      	b.n	80019aa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a36:	6862      	ldr	r2, [r4, #4]
 8001a38:	4e1d      	ldr	r6, [pc, #116]	; (8001ab0 <HAL_RCC_ClockConfig+0x128>)
 8001a3a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	d11a      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	d0a5      	beq.n	8001992 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4c:	f023 0303 	bic.w	r3, r3, #3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a54:	f7ff f85a 	bl	8000b0c <HAL_GetTick>
 8001a58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	6873      	ldr	r3, [r6, #4]
 8001a5c:	6862      	ldr	r2, [r4, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a66:	d0a2      	beq.n	80019ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f850 	bl	8000b0c <HAL_GetTick>
 8001a6c:	1bc0      	subs	r0, r0, r7
 8001a6e:	4540      	cmp	r0, r8
 8001a70:	d9f3      	bls.n	8001a5a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001a72:	2003      	movs	r0, #3
 8001a74:	e78e      	b.n	8001994 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a76:	2a02      	cmp	r2, #2
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a7e:	e7e1      	b.n	8001a44 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	f013 0f02 	tst.w	r3, #2
 8001a84:	e7de      	b.n	8001a44 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	f023 0307 	bic.w	r3, r3, #7
 8001a8c:	432b      	orrs	r3, r5
 8001a8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	42ab      	cmp	r3, r5
 8001a98:	f47f af7b 	bne.w	8001992 <HAL_RCC_ClockConfig+0xa>
 8001a9c:	e78d      	b.n	80019ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9e:	686b      	ldr	r3, [r5, #4]
 8001aa0:	68e1      	ldr	r1, [r4, #12]
 8001aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	606b      	str	r3, [r5, #4]
 8001aaa:	e78b      	b.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	08005db4 	.word	0x08005db4
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ace:	6810      	ldr	r0, [r2, #0]
}
 8001ad0:	40d8      	lsrs	r0, r3
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	08005dc4 	.word	0x08005dc4
 8001adc:	20000010 	.word	0x20000010

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001aee:	6810      	ldr	r0, [r2, #0]
}
 8001af0:	40d8      	lsrs	r0, r3
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08005dc4 	.word	0x08005dc4
 8001afc:	20000010 	.word	0x20000010

08001b00 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b00:	6803      	ldr	r3, [r0, #0]
{
 8001b02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b06:	07d9      	lsls	r1, r3, #31
{
 8001b08:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b0a:	d520      	bpl.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0c:	4c35      	ldr	r4, [pc, #212]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b0e:	69e3      	ldr	r3, [r4, #28]
 8001b10:	00da      	lsls	r2, r3, #3
 8001b12:	d432      	bmi.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b14:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	69e3      	ldr	r3, [r4, #28]
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61e3      	str	r3, [r4, #28]
 8001b1e:	69e3      	ldr	r3, [r4, #28]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4e2f      	ldr	r6, [pc, #188]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b2a:	6833      	ldr	r3, [r6, #0]
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	d526      	bpl.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b30:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b32:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b36:	d136      	bne.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b38:	6a23      	ldr	r3, [r4, #32]
 8001b3a:	686a      	ldr	r2, [r5, #4]
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	4313      	orrs	r3, r2
 8001b42:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b44:	b11f      	cbz	r7, 8001b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b46:	69e3      	ldr	r3, [r4, #28]
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b4e:	6828      	ldr	r0, [r5, #0]
 8001b50:	0783      	lsls	r3, r0, #30
 8001b52:	d506      	bpl.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b56:	68a9      	ldr	r1, [r5, #8]
 8001b58:	6853      	ldr	r3, [r2, #4]
 8001b5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b62:	f010 0010 	ands.w	r0, r0, #16
 8001b66:	d01b      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b68:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b6a:	68e9      	ldr	r1, [r5, #12]
 8001b6c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b6e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6053      	str	r3, [r2, #4]
 8001b78:	e012      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2700      	movs	r7, #0
 8001b7c:	e7d4      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	6833      	ldr	r3, [r6, #0]
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001b86:	f7fe ffc1 	bl	8000b0c <HAL_GetTick>
 8001b8a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	6833      	ldr	r3, [r6, #0]
 8001b8e:	05d8      	lsls	r0, r3, #23
 8001b90:	d4ce      	bmi.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7fe ffbb 	bl	8000b0c <HAL_GetTick>
 8001b96:	eba0 0008 	sub.w	r0, r0, r8
 8001b9a:	2864      	cmp	r0, #100	; 0x64
 8001b9c:	d9f6      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
}
 8001ba0:	b002      	add	sp, #8
 8001ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ba6:	686a      	ldr	r2, [r5, #4]
 8001ba8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d0c3      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bb6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bbe:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001bc0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bc2:	07d9      	lsls	r1, r3, #31
 8001bc4:	d5b8      	bpl.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffa1 	bl	8000b0c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	6a23      	ldr	r3, [r4, #32]
 8001bd2:	079a      	lsls	r2, r3, #30
 8001bd4:	d4b0      	bmi.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ff99 	bl	8000b0c <HAL_GetTick>
 8001bda:	1b80      	subs	r0, r0, r6
 8001bdc:	4540      	cmp	r0, r8
 8001bde:	d9f7      	bls.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001be0:	e7dd      	b.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40007000 	.word	0x40007000
 8001bec:	42420440 	.word	0x42420440

08001bf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bf0:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d034      	beq.n	8001c62 <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bfc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001c00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c04:	b91b      	cbnz	r3, 8001c0e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c06:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c0a:	f000 fcfb 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c0e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c10:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c12:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001c16:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c18:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c1e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c20:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001c24:	4303      	orrs	r3, r0
 8001c26:	68e0      	ldr	r0, [r4, #12]
 8001c28:	4303      	orrs	r3, r0
 8001c2a:	6920      	ldr	r0, [r4, #16]
 8001c2c:	4303      	orrs	r3, r0
 8001c2e:	6960      	ldr	r0, [r4, #20]
 8001c30:	4303      	orrs	r3, r0
 8001c32:	69e0      	ldr	r0, [r4, #28]
 8001c34:	4303      	orrs	r3, r0
 8001c36:	6a20      	ldr	r0, [r4, #32]
 8001c38:	4303      	orrs	r3, r0
 8001c3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c3c:	4303      	orrs	r3, r0
 8001c3e:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c42:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c44:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c46:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c4a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c4c:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c4e:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c56:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c58:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c5a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8001c60:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c62:	2001      	movs	r0, #1
 8001c64:	e7fc      	b.n	8001c60 <HAL_SPI_Init+0x70>
	...

08001c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c68:	b538      	push	{r3, r4, r5, lr}
 8001c6a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c6c:	6803      	ldr	r3, [r0, #0]
 8001c6e:	68c1      	ldr	r1, [r0, #12]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	2419      	movs	r4, #25
 8001c74:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c7c:	6882      	ldr	r2, [r0, #8]
 8001c7e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001c80:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c82:	4302      	orrs	r2, r0
 8001c84:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001c86:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001c8a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c8e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	69a9      	ldr	r1, [r5, #24]
 8001c98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <UART_SetConfig+0x70>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ca6:	f7ff ff1b 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001caa:	4360      	muls	r0, r4
 8001cac:	686c      	ldr	r4, [r5, #4]
 8001cae:	2264      	movs	r2, #100	; 0x64
 8001cb0:	00a4      	lsls	r4, r4, #2
 8001cb2:	fbb0 f0f4 	udiv	r0, r0, r4
 8001cb6:	fbb0 f1f2 	udiv	r1, r0, r2
 8001cba:	fb02 0311 	mls	r3, r2, r1, r0
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	3332      	adds	r3, #50	; 0x32
 8001cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cc6:	682c      	ldr	r4, [r5, #0]
 8001cc8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001ccc:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cd0:	f7ff fef6 	bl	8001ac0 <HAL_RCC_GetPCLK1Freq>
 8001cd4:	e7e9      	b.n	8001caa <UART_SetConfig+0x42>
 8001cd6:	bf00      	nop
 8001cd8:	40013800 	.word	0x40013800

08001cdc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	4604      	mov	r4, r0
 8001ce0:	460e      	mov	r6, r1
 8001ce2:	4617      	mov	r7, r2
 8001ce4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce6:	6821      	ldr	r1, [r4, #0]
 8001ce8:	680b      	ldr	r3, [r1, #0]
 8001cea:	ea36 0303 	bics.w	r3, r6, r3
 8001cee:	d101      	bne.n	8001cf4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e014      	b.n	8001d1e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001cf4:	1c6b      	adds	r3, r5, #1
 8001cf6:	d0f7      	beq.n	8001ce8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cf8:	b995      	cbnz	r5, 8001d20 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cfa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001cfc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d04:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001d0e:	2320      	movs	r3, #32
 8001d10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d14:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d20:	f7fe fef4 	bl	8000b0c <HAL_GetTick>
 8001d24:	1bc0      	subs	r0, r0, r7
 8001d26:	4285      	cmp	r5, r0
 8001d28:	d2dd      	bcs.n	8001ce6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001d2a:	e7e6      	b.n	8001cfa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001d2c <HAL_UART_Init>:
{
 8001d2c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d2e:	4604      	mov	r4, r0
 8001d30:	b340      	cbz	r0, 8001d84 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d3a:	b91b      	cbnz	r3, 8001d44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d40:	f000 fcba 	bl	80026b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d44:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d46:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d4c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d54:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d56:	f7ff ff87 	bl	8001c68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d5a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d6c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d74:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001d82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d84:	2001      	movs	r0, #1
 8001d86:	e7fc      	b.n	8001d82 <HAL_UART_Init+0x56>

08001d88 <HAL_UART_Transmit>:
{
 8001d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d8e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001d92:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001d94:	2b20      	cmp	r3, #32
{
 8001d96:	460d      	mov	r5, r1
 8001d98:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d9a:	d14c      	bne.n	8001e36 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	d048      	beq.n	8001e32 <HAL_UART_Transmit+0xaa>
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d046      	beq.n	8001e32 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001da4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d044      	beq.n	8001e36 <HAL_UART_Transmit+0xae>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001db6:	2321      	movs	r3, #33	; 0x21
 8001db8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fea6 	bl	8000b0c <HAL_GetTick>
 8001dc0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001dc2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dc6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b963      	cbnz	r3, 8001dea <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	4632      	mov	r2, r6
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ff80 	bl	8001cdc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ddc:	b9a0      	cbnz	r0, 8001e08 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001dde:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001de0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001de4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001de8:	e00f      	b.n	8001e0a <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001dea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001df4:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001df6:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e00:	d10e      	bne.n	8001e20 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e02:	f7ff ff6b 	bl	8001cdc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e06:	b110      	cbz	r0, 8001e0e <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8001e08:	2003      	movs	r0, #3
}
 8001e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e0e:	882b      	ldrh	r3, [r5, #0]
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e16:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e18:	6923      	ldr	r3, [r4, #16]
 8001e1a:	b943      	cbnz	r3, 8001e2e <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8001e1c:	3502      	adds	r5, #2
 8001e1e:	e7d4      	b.n	8001dca <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e20:	f7ff ff5c 	bl	8001cdc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d1ef      	bne.n	8001e08 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	782a      	ldrb	r2, [r5, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	3501      	adds	r5, #1
 8001e30:	e7cb      	b.n	8001dca <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
 8001e34:	e7e9      	b.n	8001e0a <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001e36:	2002      	movs	r0, #2
 8001e38:	e7e7      	b.n	8001e0a <HAL_UART_Transmit+0x82>

08001e3a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3a:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3c:	2414      	movs	r4, #20
{
 8001e3e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e40:	4622      	mov	r2, r4
 8001e42:	2100      	movs	r1, #0
 8001e44:	a80c      	add	r0, sp, #48	; 0x30
 8001e46:	f000 fd30 	bl	80028aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	eb0d 0004 	add.w	r0, sp, r4
 8001e50:	2100      	movs	r1, #0
 8001e52:	f000 fd2a 	bl	80028aa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e56:	2100      	movs	r1, #0
 8001e58:	2210      	movs	r2, #16
 8001e5a:	a801      	add	r0, sp, #4
 8001e5c:	f000 fd25 	bl	80028aa <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6c:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e74:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e76:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e78:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	f7ff fbad 	bl	80015d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e84:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e88:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8e:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e92:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e94:	f7ff fd78 	bl	8001988 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e9e:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ea0:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea2:	f7ff fe2d 	bl	8001b00 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001ea6:	b014      	add	sp, #80	; 0x50
 8001ea8:	bd10      	pop	{r4, pc}
	...

08001eac <LED_blink>:

}

/* USER CODE BEGIN 4 */

void LED_blink(int blink_times, int time){
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	4607      	mov	r7, r0
 8001eb0:	460d      	mov	r5, r1

    for(int i = 0; i < blink_times; i++){
 8001eb2:	2400      	movs	r4, #0
        //blue pill set-wyłączona, reset-włączona
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001eb4:	4e0e      	ldr	r6, [pc, #56]	; (8001ef0 <LED_blink+0x44>)
    for(int i = 0; i < blink_times; i++){
 8001eb6:	42bc      	cmp	r4, r7
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001eb8:	f04f 0201 	mov.w	r2, #1
 8001ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    for(int i = 0; i < blink_times; i++){
 8001ec0:	db04      	blt.n	8001ecc <LED_blink+0x20>
        HAL_Delay(time);
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8001ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <LED_blink+0x44>)
 8001ec8:	f7ff b894 	b.w	8000ff4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ecc:	4630      	mov	r0, r6
 8001ece:	f7ff f891 	bl	8000ff4 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f7fe fe20 	bl	8000b18 <HAL_Delay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ede:	4630      	mov	r0, r6
 8001ee0:	f7ff f888 	bl	8000ff4 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	f7fe fe17 	bl	8000b18 <HAL_Delay>
    for(int i = 0; i < blink_times; i++){
 8001eea:	3401      	adds	r4, #1
 8001eec:	e7e3      	b.n	8001eb6 <LED_blink+0xa>
 8001eee:	bf00      	nop
 8001ef0:	40011000 	.word	0x40011000

08001ef4 <Beep>:

void Beep(int time_delay){
 8001ef4:	b538      	push	{r3, r4, r5, lr}
 8001ef6:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001ef8:	4c07      	ldr	r4, [pc, #28]	; (8001f18 <Beep+0x24>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	2102      	movs	r1, #2
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff f878 	bl	8000ff4 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8001f04:	4628      	mov	r0, r5
 8001f06:	f7fe fe07 	bl	8000b18 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001f0a:	4620      	mov	r0, r4
}
 8001f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2102      	movs	r1, #2
 8001f14:	f7ff b86e 	b.w	8000ff4 <HAL_GPIO_WritePin>
 8001f18:	40010800 	.word	0x40010800

08001f1c <_write>:

int _write(int file, char *ptr, int len){
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8001f20:	2332      	movs	r3, #50	; 0x32
 8001f22:	b292      	uxth	r2, r2
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <_write+0x14>)
 8001f26:	f7ff ff2f 	bl	8001d88 <HAL_UART_Transmit>
    return len;
}
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000073c 	.word	0x2000073c

08001f34 <writeUART>:

int writeUART(float latitude, float longitude, float altitude, float velocity){
 8001f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	4617      	mov	r7, r2
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	460e      	mov	r6, r1
    return printf("%f/%f/%f/%f\n\r", latitude, longitude, altitude, velocity);
 8001f40:	f7fe fa72 	bl	8000428 <__aeabi_f2d>
 8001f44:	4604      	mov	r4, r0
 8001f46:	4640      	mov	r0, r8
 8001f48:	460d      	mov	r5, r1
 8001f4a:	f7fe fa6d 	bl	8000428 <__aeabi_f2d>
 8001f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f52:	4638      	mov	r0, r7
 8001f54:	f7fe fa68 	bl	8000428 <__aeabi_f2d>
 8001f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f7fe fa63 	bl	8000428 <__aeabi_f2d>
 8001f62:	4622      	mov	r2, r4
 8001f64:	e9cd 0100 	strd	r0, r1, [sp]
 8001f68:	462b      	mov	r3, r5
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <writeUART+0x44>)
 8001f6c:	f001 f8f4 	bl	8003158 <iprintf>
}
 8001f70:	b006      	add	sp, #24
 8001f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f76:	bf00      	nop
 8001f78:	08005da6 	.word	0x08005da6

08001f7c <main>:
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001f80:	f7fe fda6 	bl	8000ad0 <HAL_Init>
  SystemClock_Config();
 8001f84:	f7ff ff59 	bl	8001e3a <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	2210      	movs	r2, #16
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	eb0d 0002 	add.w	r0, sp, r2
 8001f90:	f000 fc8b 	bl	80028aa <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <main+0x1f4>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f9c:	4875      	ldr	r0, [pc, #468]	; (8002174 <main+0x1f8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	f042 0210 	orr.w	r2, r2, #16
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa8:	f002 0210 	and.w	r2, r2, #16
 8001fac:	9200      	str	r2, [sp, #0]
 8001fae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	619a      	str	r2, [r3, #24]
 8001fba:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fbe:	f002 0220 	and.w	r2, r2, #32
 8001fc2:	9201      	str	r2, [sp, #4]
 8001fc4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	f042 0204 	orr.w	r2, r2, #4
 8001fcc:	619a      	str	r2, [r3, #24]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	f002 0204 	and.w	r2, r2, #4
 8001fd4:	9202      	str	r2, [sp, #8]
 8001fd6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	f042 0208 	orr.w	r2, r2, #8
 8001fde:	619a      	str	r2, [r3, #24]
 8001fe0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	9303      	str	r3, [sp, #12]
 8001fea:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001fec:	f7ff f802 	bl	8000ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	4860      	ldr	r0, [pc, #384]	; (8002178 <main+0x1fc>)
 8001ff6:	f7fe fffd 	bl	8000ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|DO_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f241 0181 	movw	r1, #4225	; 0x1081
 8002000:	485e      	ldr	r0, [pc, #376]	; (800217c <main+0x200>)
 8002002:	f7fe fff7 	bl	8000ff4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800200a:	a904      	add	r1, sp, #16
 800200c:	4859      	ldr	r0, [pc, #356]	; (8002174 <main+0x1f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002016:	f7fe ff0d 	bl	8000e34 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800201a:	a904      	add	r1, sp, #16
 800201c:	4856      	ldr	r0, [pc, #344]	; (8002178 <main+0x1fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002026:	f7fe ff05 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|DO_RF_Pin|D_C_Pin;
 800202a:	f241 0381 	movw	r3, #4225	; 0x1081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	a904      	add	r1, sp, #16
 8002030:	4852      	ldr	r0, [pc, #328]	; (800217c <main+0x200>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f7fe fefb 	bl	8000e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FIRE_Pin;
 800203e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002040:	a904      	add	r1, sp, #16
 8002042:	484e      	ldr	r0, [pc, #312]	; (800217c <main+0x200>)
  hadc1.Instance = ADC1;
 8002044:	4d4e      	ldr	r5, [pc, #312]	; (8002180 <main+0x204>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 800204c:	f7fe fef2 	bl	8000e34 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <main+0x208>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002052:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8002054:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002056:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800205a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800205c:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800205e:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002060:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002062:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002064:	612e      	str	r6, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002066:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800206a:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800206c:	f7fe fe06 	bl	8000c7c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002070:	a904      	add	r1, sp, #16
 8002072:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002074:	e9cd 4604 	strd	r4, r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002078:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207a:	f7fe fd5f 	bl	8000b3c <HAL_ADC_ConfigChannel>
  hi2c1.Init.ClockSpeed = 100000;
 800207e:	4a42      	ldr	r2, [pc, #264]	; (8002188 <main+0x20c>)
  hi2c1.Instance = I2C1;
 8002080:	4842      	ldr	r0, [pc, #264]	; (800218c <main+0x210>)
  hi2c1.Init.ClockSpeed = 100000;
 8002082:	4b43      	ldr	r3, [pc, #268]	; (8002190 <main+0x214>)
  hi2c1.Init.OwnAddress1 = 0;
 8002084:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002088:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002090:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002094:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002098:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800209a:	f7ff f881 	bl	80011a0 <HAL_I2C_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800209e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80020a2:	483c      	ldr	r0, [pc, #240]	; (8002194 <main+0x218>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020a4:	493c      	ldr	r1, [pc, #240]	; (8002198 <main+0x21c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020a6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020aa:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020ae:	2308      	movs	r3, #8
 80020b0:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80020b4:	250a      	movs	r5, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020be:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020c4:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020c6:	f7ff fd93 	bl	8001bf0 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80020ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80020ce:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80021cc <main+0x250>
  huart2.Instance = USART2;
 80020d2:	4832      	ldr	r0, [pc, #200]	; (800219c <main+0x220>)
  huart2.Init.BaudRate = 115200;
 80020d4:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d8:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020da:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020e2:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e6:	f7ff fe21 	bl	8001d2c <HAL_UART_Init>
	printf("Odbiornik/nadajnik  radia LoRa\r\n");
 80020ea:	482d      	ldr	r0, [pc, #180]	; (80021a0 <main+0x224>)
 80020ec:	f001 f8a8 	bl	8003240 <puts>
	SSD1306_Init();  // initialise
 80020f0:	f000 f94e 	bl	8002390 <SSD1306_Init>
	    SSD1306_GotoXY (0,0);
 80020f4:	4621      	mov	r1, r4
 80020f6:	4620      	mov	r0, r4
 80020f8:	f000 f896 	bl	8002228 <SSD1306_GotoXY>
	    SSD1306_Puts ("HELLO", &Font_11x18, 1);
 80020fc:	4632      	mov	r2, r6
 80020fe:	4929      	ldr	r1, [pc, #164]	; (80021a4 <main+0x228>)
 8002100:	4829      	ldr	r0, [pc, #164]	; (80021a8 <main+0x22c>)
 8002102:	f000 f8e3 	bl	80022cc <SSD1306_Puts>
	    SSD1306_GotoXY (10, 30);
 8002106:	4628      	mov	r0, r5
 8002108:	211e      	movs	r1, #30
 800210a:	f000 f88d 	bl	8002228 <SSD1306_GotoXY>
	    SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 800210e:	4632      	mov	r2, r6
 8002110:	4924      	ldr	r1, [pc, #144]	; (80021a4 <main+0x228>)
 8002112:	4826      	ldr	r0, [pc, #152]	; (80021ac <main+0x230>)
 8002114:	f000 f8da 	bl	80022cc <SSD1306_Puts>
	    SSD1306_UpdateScreen(); //display
 8002118:	f000 f918 	bl	800234c <SSD1306_UpdateScreen>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 800211c:	4e24      	ldr	r6, [pc, #144]	; (80021b0 <main+0x234>)
 800211e:	4d25      	ldr	r5, [pc, #148]	; (80021b4 <main+0x238>)
 8002120:	4c25      	ldr	r4, [pc, #148]	; (80021b8 <main+0x23c>)
		printf("Test przesylu danych UART: \r\n");
 8002122:	4826      	ldr	r0, [pc, #152]	; (80021bc <main+0x240>)
 8002124:	f001 f88c 	bl	8003240 <puts>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 8002128:	4633      	mov	r3, r6
 800212a:	462a      	mov	r2, r5
 800212c:	4621      	mov	r1, r4
 800212e:	4824      	ldr	r0, [pc, #144]	; (80021c0 <main+0x244>)
 8002130:	f7ff ff00 	bl	8001f34 <writeUART>
		printf("Test LED: \r\n");
 8002134:	4823      	ldr	r0, [pc, #140]	; (80021c4 <main+0x248>)
 8002136:	f001 f883 	bl	8003240 <puts>
		LED_blink(10, 100);
 800213a:	2164      	movs	r1, #100	; 0x64
 800213c:	200a      	movs	r0, #10
 800213e:	f7ff feb5 	bl	8001eac <LED_blink>
		printf("Test buzzera: \r\n");
 8002142:	4821      	ldr	r0, [pc, #132]	; (80021c8 <main+0x24c>)
 8002144:	f001 f87c 	bl	8003240 <puts>
		Beep(100);
 8002148:	2064      	movs	r0, #100	; 0x64
 800214a:	f7ff fed3 	bl	8001ef4 <Beep>
		HAL_Delay(200);
 800214e:	20c8      	movs	r0, #200	; 0xc8
 8002150:	f7fe fce2 	bl	8000b18 <HAL_Delay>
		Beep(200);
 8002154:	20c8      	movs	r0, #200	; 0xc8
 8002156:	f7ff fecd 	bl	8001ef4 <Beep>
		HAL_Delay(200);
 800215a:	20c8      	movs	r0, #200	; 0xc8
 800215c:	f7fe fcdc 	bl	8000b18 <HAL_Delay>
		Beep(1000);
 8002160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002164:	f7ff fec6 	bl	8001ef4 <Beep>
		HAL_Delay(200);
 8002168:	20c8      	movs	r0, #200	; 0xc8
 800216a:	f7fe fcd5 	bl	8000b18 <HAL_Delay>
 800216e:	e7d8      	b.n	8002122 <main+0x1a6>
 8002170:	40021000 	.word	0x40021000
 8002174:	40011000 	.word	0x40011000
 8002178:	40010800 	.word	0x40010800
 800217c:	40010c00 	.word	0x40010c00
 8002180:	20000674 	.word	0x20000674
 8002184:	40012400 	.word	0x40012400
 8002188:	40005400 	.word	0x40005400
 800218c:	2000061c 	.word	0x2000061c
 8002190:	000186a0 	.word	0x000186a0
 8002194:	200006e4 	.word	0x200006e4
 8002198:	40013000 	.word	0x40013000
 800219c:	2000073c 	.word	0x2000073c
 80021a0:	08005d3c 	.word	0x08005d3c
 80021a4:	20000008 	.word	0x20000008
 80021a8:	08005d5c 	.word	0x08005d5c
 80021ac:	08005d62 	.word	0x08005d62
 80021b0:	43161f9b 	.word	0x43161f9b
 80021b4:	43b40fcd 	.word	0x43b40fcd
 80021b8:	4188fcd6 	.word	0x4188fcd6
 80021bc:	08005d6d 	.word	0x08005d6d
 80021c0:	424c7e6b 	.word	0x424c7e6b
 80021c4:	08005d8a 	.word	0x08005d8a
 80021c8:	08005d96 	.word	0x08005d96
 80021cc:	40004400 	.word	0x40004400

080021d0 <SSD1306_Fill>:
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021d0:	2800      	cmp	r0, #0
 80021d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d6:	bf14      	ite	ne
 80021d8:	21ff      	movne	r1, #255	; 0xff
 80021da:	2100      	moveq	r1, #0
 80021dc:	4801      	ldr	r0, [pc, #4]	; (80021e4 <SSD1306_Fill+0x14>)
 80021de:	f000 bb64 	b.w	80028aa <memset>
 80021e2:	bf00      	nop
 80021e4:	20000206 	.word	0x20000206

080021e8 <SSD1306_DrawPixel>:
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80021e8:	287f      	cmp	r0, #127	; 0x7f
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80021ea:	b530      	push	{r4, r5, lr}
	if (
 80021ec:	d816      	bhi.n	800221c <SSD1306_DrawPixel+0x34>
		x >= SSD1306_WIDTH ||
 80021ee:	293f      	cmp	r1, #63	; 0x3f
 80021f0:	d814      	bhi.n	800221c <SSD1306_DrawPixel+0x34>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <SSD1306_DrawPixel+0x38>)
 80021f4:	791b      	ldrb	r3, [r3, #4]
 80021f6:	b113      	cbz	r3, 80021fe <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	0952      	lsrs	r2, r2, #5
 80021fe:	08cb      	lsrs	r3, r1, #3
 8002200:	f001 0407 	and.w	r4, r1, #7
 8002204:	2101      	movs	r1, #1
 8002206:	4d07      	ldr	r5, [pc, #28]	; (8002224 <SSD1306_DrawPixel+0x3c>)
 8002208:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800220c:	562b      	ldrsb	r3, [r5, r0]
 800220e:	40a1      	lsls	r1, r4
 8002210:	b249      	sxtb	r1, r1
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002212:	2a01      	cmp	r2, #1
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002214:	bf0c      	ite	eq
 8002216:	430b      	orreq	r3, r1
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002218:	438b      	bicne	r3, r1
 800221a:	542b      	strb	r3, [r5, r0]
	}
}
 800221c:	bd30      	pop	{r4, r5, pc}
 800221e:	bf00      	nop
 8002220:	20000200 	.word	0x20000200
 8002224:	20000206 	.word	0x20000206

08002228 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002228:	4b01      	ldr	r3, [pc, #4]	; (8002230 <SSD1306_GotoXY+0x8>)
 800222a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 800222c:	8059      	strh	r1, [r3, #2]
}
 800222e:	4770      	bx	lr
 8002230:	20000200 	.word	0x20000200

08002234 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002238:	4d23      	ldr	r5, [pc, #140]	; (80022c8 <SSD1306_Putc+0x94>)
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800223a:	4693      	mov	fp, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800223c:	882e      	ldrh	r6, [r5, #0]
 800223e:	780a      	ldrb	r2, [r1, #0]
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002240:	b085      	sub	sp, #20
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002242:	4432      	add	r2, r6
	if (
 8002244:	2a7f      	cmp	r2, #127	; 0x7f
char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002246:	4682      	mov	sl, r0
 8002248:	460c      	mov	r4, r1
	if (
 800224a:	dc39      	bgt.n	80022c0 <SSD1306_Putc+0x8c>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800224c:	886b      	ldrh	r3, [r5, #2]
 800224e:	784a      	ldrb	r2, [r1, #1]
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	441a      	add	r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002254:	2a3f      	cmp	r2, #63	; 0x3f
 8002256:	dc33      	bgt.n	80022c0 <SSD1306_Putc+0x8c>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002258:	2700      	movs	r7, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800225a:	f1a0 0320 	sub.w	r3, r0, #32
 800225e:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font->FontHeight; i++) {
 8002260:	7862      	ldrb	r2, [r4, #1]
 8002262:	4297      	cmp	r7, r2
 8002264:	d306      	bcc.n	8002274 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002266:	7822      	ldrb	r2, [r4, #0]
 8002268:	4416      	add	r6, r2
 800226a:	802e      	strh	r6, [r5, #0]
	
	/* Return character written */
	return ch;
}
 800226c:	4650      	mov	r0, sl
 800226e:	b005      	add	sp, #20
 8002270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font->FontWidth; j++) {
 8002274:	f04f 0800 	mov.w	r8, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002278:	9b03      	ldr	r3, [sp, #12]
 800227a:	6861      	ldr	r1, [r4, #4]
 800227c:	fb02 7203 	mla	r2, r2, r3, r7
 8002280:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8002284:	9302      	str	r3, [sp, #8]
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	eb03 0907 	add.w	r9, r3, r7
 800228c:	fa1f f989 	uxth.w	r9, r9
		for (j = 0; j < Font->FontWidth; j++) {
 8002290:	7822      	ldrb	r2, [r4, #0]
 8002292:	4590      	cmp	r8, r2
 8002294:	d301      	bcc.n	800229a <SSD1306_Putc+0x66>
	for (i = 0; i < Font->FontHeight; i++) {
 8002296:	3701      	adds	r7, #1
 8002298:	e7e2      	b.n	8002260 <SSD1306_Putc+0x2c>
			if ((b << j) & 0x8000) {
 800229a:	9b02      	ldr	r3, [sp, #8]
 800229c:	eb06 0008 	add.w	r0, r6, r8
 80022a0:	fa03 f208 	lsl.w	r2, r3, r8
 80022a4:	0413      	lsls	r3, r2, #16
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022a6:	bf58      	it	pl
 80022a8:	fabb f28b 	clzpl	r2, fp
 80022ac:	b280      	uxth	r0, r0
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022ae:	bf4c      	ite	mi
 80022b0:	465a      	movmi	r2, fp
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022b2:	0952      	lsrpl	r2, r2, #5
 80022b4:	4649      	mov	r1, r9
 80022b6:	f7ff ff97 	bl	80021e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022ba:	f108 0801 	add.w	r8, r8, #1
 80022be:	e7e7      	b.n	8002290 <SSD1306_Putc+0x5c>
		return 0;
 80022c0:	f04f 0a00 	mov.w	sl, #0
 80022c4:	e7d2      	b.n	800226c <SSD1306_Putc+0x38>
 80022c6:	bf00      	nop
 80022c8:	20000200 	.word	0x20000200

080022cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	460d      	mov	r5, r1
 80022d0:	4616      	mov	r6, r2
 80022d2:	1e44      	subs	r4, r0, #1
	/* Write characters */
	while (*str) {
 80022d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80022d8:	b13b      	cbz	r3, 80022ea <SSD1306_Puts+0x1e>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80022da:	4618      	mov	r0, r3
 80022dc:	4632      	mov	r2, r6
 80022de:	4629      	mov	r1, r5
 80022e0:	f7ff ffa8 	bl	8002234 <SSD1306_Putc>
 80022e4:	7823      	ldrb	r3, [r4, #0]
 80022e6:	4298      	cmp	r0, r3
 80022e8:	d0f4      	beq.n	80022d4 <SSD1306_Puts+0x8>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080022f0 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80022f0:	b530      	push	{r4, r5, lr}
 80022f2:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 80022f4:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80022f8:	2100      	movs	r1, #0
 80022fa:	1c4c      	adds	r4, r1, #1
 80022fc:	b2c9      	uxtb	r1, r1
 80022fe:	4299      	cmp	r1, r3
 8002300:	d30a      	bcc.n	8002318 <ssd1306_I2C_WriteMulti+0x28>
dt[i+1] = data[i];
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002302:	220a      	movs	r2, #10
 8002304:	3301      	adds	r3, #1
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	4601      	mov	r1, r0
 800230a:	b29b      	uxth	r3, r3
 800230c:	aa02      	add	r2, sp, #8
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <ssd1306_I2C_WriteMulti+0x34>)
 8002310:	f7fe ffea 	bl	80012e8 <HAL_I2C_Master_Transmit>
}
 8002314:	b043      	add	sp, #268	; 0x10c
 8002316:	bd30      	pop	{r4, r5, pc}
dt[i+1] = data[i];
 8002318:	ad02      	add	r5, sp, #8
 800231a:	440d      	add	r5, r1
 800231c:	5c51      	ldrb	r1, [r2, r1]
 800231e:	7069      	strb	r1, [r5, #1]
 8002320:	4621      	mov	r1, r4
 8002322:	e7ea      	b.n	80022fa <ssd1306_I2C_WriteMulti+0xa>
 8002324:	2000061c 	.word	0x2000061c

08002328 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dt[2];
	dt[0] = reg;
	dt[1] = data;
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800232a:	230a      	movs	r3, #10
	dt[0] = reg;
 800232c:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002330:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4601      	mov	r1, r0
 8002338:	2302      	movs	r3, #2
 800233a:	aa03      	add	r2, sp, #12
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <ssd1306_I2C_Write+0x20>)
 800233e:	f7fe ffd3 	bl	80012e8 <HAL_I2C_Master_Transmit>
}
 8002342:	b005      	add	sp, #20
 8002344:	f85d fb04 	ldr.w	pc, [sp], #4
 8002348:	2000061c 	.word	0x2000061c

0800234c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	2400      	movs	r4, #0
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002350:	4d0e      	ldr	r5, [pc, #56]	; (800238c <SSD1306_UpdateScreen+0x40>)
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002352:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	2100      	movs	r1, #0
 800235a:	2078      	movs	r0, #120	; 0x78
 800235c:	f7ff ffe4 	bl	8002328 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002360:	2200      	movs	r2, #0
 8002362:	2078      	movs	r0, #120	; 0x78
 8002364:	4611      	mov	r1, r2
 8002366:	f7ff ffdf 	bl	8002328 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800236a:	2210      	movs	r2, #16
 800236c:	2100      	movs	r1, #0
 800236e:	2078      	movs	r0, #120	; 0x78
 8002370:	f7ff ffda 	bl	8002328 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002374:	eb05 12c4 	add.w	r2, r5, r4, lsl #7
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	2078      	movs	r0, #120	; 0x78
 800237e:	3401      	adds	r4, #1
 8002380:	f7ff ffb6 	bl	80022f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002384:	2c08      	cmp	r4, #8
 8002386:	d1e4      	bne.n	8002352 <SSD1306_UpdateScreen+0x6>
}
 8002388:	bd38      	pop	{r3, r4, r5, pc}
 800238a:	bf00      	nop
 800238c:	20000206 	.word	0x20000206

08002390 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002390:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002392:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002396:	2201      	movs	r2, #1
 8002398:	2178      	movs	r1, #120	; 0x78
 800239a:	4852      	ldr	r0, [pc, #328]	; (80024e4 <SSD1306_Init+0x154>)
 800239c:	f7ff f872 	bl	8001484 <HAL_I2C_IsDeviceReady>
 80023a0:	4604      	mov	r4, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	f040 809c 	bne.w	80024e0 <SSD1306_Init+0x150>
	SSD1306_WRITECOMMAND(0xAE); //display off
 80023a8:	4601      	mov	r1, r0
 80023aa:	22ae      	movs	r2, #174	; 0xae
 80023ac:	2078      	movs	r0, #120	; 0x78
 80023ae:	f7ff ffbb 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80023b2:	2220      	movs	r2, #32
 80023b4:	4621      	mov	r1, r4
 80023b6:	2078      	movs	r0, #120	; 0x78
 80023b8:	f7ff ffb6 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80023bc:	2210      	movs	r2, #16
 80023be:	4621      	mov	r1, r4
 80023c0:	2078      	movs	r0, #120	; 0x78
 80023c2:	f7ff ffb1 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80023c6:	22b0      	movs	r2, #176	; 0xb0
 80023c8:	4621      	mov	r1, r4
 80023ca:	2078      	movs	r0, #120	; 0x78
 80023cc:	f7ff ffac 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80023d0:	22c8      	movs	r2, #200	; 0xc8
 80023d2:	4621      	mov	r1, r4
 80023d4:	2078      	movs	r0, #120	; 0x78
 80023d6:	f7ff ffa7 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80023da:	4622      	mov	r2, r4
 80023dc:	4621      	mov	r1, r4
 80023de:	2078      	movs	r0, #120	; 0x78
 80023e0:	f7ff ffa2 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80023e4:	2210      	movs	r2, #16
 80023e6:	4621      	mov	r1, r4
 80023e8:	2078      	movs	r0, #120	; 0x78
 80023ea:	f7ff ff9d 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80023ee:	2240      	movs	r2, #64	; 0x40
 80023f0:	4621      	mov	r1, r4
 80023f2:	2078      	movs	r0, #120	; 0x78
 80023f4:	f7ff ff98 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80023f8:	2281      	movs	r2, #129	; 0x81
 80023fa:	4621      	mov	r1, r4
 80023fc:	2078      	movs	r0, #120	; 0x78
 80023fe:	f7ff ff93 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	4621      	mov	r1, r4
 8002406:	2078      	movs	r0, #120	; 0x78
 8002408:	f7ff ff8e 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800240c:	22a1      	movs	r2, #161	; 0xa1
 800240e:	4621      	mov	r1, r4
 8002410:	2078      	movs	r0, #120	; 0x78
 8002412:	f7ff ff89 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002416:	22a6      	movs	r2, #166	; 0xa6
 8002418:	4621      	mov	r1, r4
 800241a:	2078      	movs	r0, #120	; 0x78
 800241c:	f7ff ff84 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002420:	22a8      	movs	r2, #168	; 0xa8
 8002422:	4621      	mov	r1, r4
 8002424:	2078      	movs	r0, #120	; 0x78
 8002426:	f7ff ff7f 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800242a:	223f      	movs	r2, #63	; 0x3f
 800242c:	4621      	mov	r1, r4
 800242e:	2078      	movs	r0, #120	; 0x78
 8002430:	f7ff ff7a 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002434:	22a4      	movs	r2, #164	; 0xa4
 8002436:	4621      	mov	r1, r4
 8002438:	2078      	movs	r0, #120	; 0x78
 800243a:	f7ff ff75 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800243e:	22d3      	movs	r2, #211	; 0xd3
 8002440:	4621      	mov	r1, r4
 8002442:	2078      	movs	r0, #120	; 0x78
 8002444:	f7ff ff70 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002448:	4622      	mov	r2, r4
 800244a:	4621      	mov	r1, r4
 800244c:	2078      	movs	r0, #120	; 0x78
 800244e:	f7ff ff6b 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002452:	22d5      	movs	r2, #213	; 0xd5
 8002454:	4621      	mov	r1, r4
 8002456:	2078      	movs	r0, #120	; 0x78
 8002458:	f7ff ff66 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800245c:	22f0      	movs	r2, #240	; 0xf0
 800245e:	4621      	mov	r1, r4
 8002460:	2078      	movs	r0, #120	; 0x78
 8002462:	f7ff ff61 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002466:	22d9      	movs	r2, #217	; 0xd9
 8002468:	4621      	mov	r1, r4
 800246a:	2078      	movs	r0, #120	; 0x78
 800246c:	f7ff ff5c 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002470:	2222      	movs	r2, #34	; 0x22
 8002472:	4621      	mov	r1, r4
 8002474:	2078      	movs	r0, #120	; 0x78
 8002476:	f7ff ff57 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800247a:	22da      	movs	r2, #218	; 0xda
 800247c:	4621      	mov	r1, r4
 800247e:	2078      	movs	r0, #120	; 0x78
 8002480:	f7ff ff52 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002484:	2212      	movs	r2, #18
 8002486:	4621      	mov	r1, r4
 8002488:	2078      	movs	r0, #120	; 0x78
 800248a:	f7ff ff4d 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800248e:	22db      	movs	r2, #219	; 0xdb
 8002490:	4621      	mov	r1, r4
 8002492:	2078      	movs	r0, #120	; 0x78
 8002494:	f7ff ff48 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002498:	2220      	movs	r2, #32
 800249a:	4621      	mov	r1, r4
 800249c:	2078      	movs	r0, #120	; 0x78
 800249e:	f7ff ff43 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80024a2:	228d      	movs	r2, #141	; 0x8d
 80024a4:	4621      	mov	r1, r4
 80024a6:	2078      	movs	r0, #120	; 0x78
 80024a8:	f7ff ff3e 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80024ac:	2214      	movs	r2, #20
 80024ae:	4621      	mov	r1, r4
 80024b0:	2078      	movs	r0, #120	; 0x78
 80024b2:	f7ff ff39 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80024b6:	22af      	movs	r2, #175	; 0xaf
 80024b8:	4621      	mov	r1, r4
 80024ba:	2078      	movs	r0, #120	; 0x78
 80024bc:	f7ff ff34 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80024c0:	222e      	movs	r2, #46	; 0x2e
 80024c2:	4621      	mov	r1, r4
 80024c4:	2078      	movs	r0, #120	; 0x78
 80024c6:	f7ff ff2f 	bl	8002328 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff fe80 	bl	80021d0 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80024d0:	f7ff ff3c 	bl	800234c <SSD1306_UpdateScreen>
	SSD1306.Initialized = 1;
 80024d4:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SSD1306_Init+0x158>)
 80024d8:	801c      	strh	r4, [r3, #0]
	SSD1306.CurrentY = 0;
 80024da:	805c      	strh	r4, [r3, #2]
	SSD1306.Initialized = 1;
 80024dc:	7158      	strb	r0, [r3, #5]
}
 80024de:	bd10      	pop	{r4, pc}
		return 0;
 80024e0:	2000      	movs	r0, #0
 80024e2:	e7fc      	b.n	80024de <SSD1306_Init+0x14e>
 80024e4:	2000061c 	.word	0x2000061c
 80024e8:	20000200 	.word	0x20000200

080024ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_MspInit+0x3c>)
{
 80024ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	f002 0201 	and.w	r2, r2, #1
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002508:	61da      	str	r2, [r3, #28]
 800250a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002516:	6853      	ldr	r3, [r2, #4]
 8002518:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800251c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002522:	b002      	add	sp, #8
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000

08002530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002530:	b510      	push	{r4, lr}
 8002532:	4604      	mov	r4, r0
 8002534:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	2210      	movs	r2, #16
 8002538:	2100      	movs	r1, #0
 800253a:	a802      	add	r0, sp, #8
 800253c:	f000 f9b5 	bl	80028aa <memset>
  if(hadc->Instance==ADC1)
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <HAL_ADC_MspInit+0x54>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d11b      	bne.n	8002580 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002548:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800254c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800254e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800255a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800255e:	9200      	str	r2, [sp, #0]
 8002560:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	f042 0204 	orr.w	r2, r2, #4
 8002568:	619a      	str	r2, [r3, #24]
 800256a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002576:	2303      	movs	r3, #3
 8002578:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800257c:	f7fe fc5a 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002580:	b006      	add	sp, #24
 8002582:	bd10      	pop	{r4, pc}
 8002584:	40012400 	.word	0x40012400
 8002588:	40010800 	.word	0x40010800

0800258c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800258c:	b510      	push	{r4, lr}
 800258e:	4604      	mov	r4, r0
 8002590:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002592:	2210      	movs	r2, #16
 8002594:	2100      	movs	r1, #0
 8002596:	a802      	add	r0, sp, #8
 8002598:	f000 f987 	bl	80028aa <memset>
  if(hi2c->Instance==I2C1)
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_I2C_MspInit+0x68>)
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d124      	bne.n	80025ee <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4c14      	ldr	r4, [pc, #80]	; (80025f8 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a6:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	61a3      	str	r3, [r4, #24]
 80025b4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b6:	4811      	ldr	r0, [pc, #68]	; (80025fc <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f7fe fc33 	bl	8000e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_I2C_MspInit+0x74>)
 80025d0:	6853      	ldr	r3, [r2, #4]
 80025d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025d6:	f043 0302 	orr.w	r3, r3, #2
 80025da:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025dc:	69e3      	ldr	r3, [r4, #28]
 80025de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e2:	61e3      	str	r3, [r4, #28]
 80025e4:	69e3      	ldr	r3, [r4, #28]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025ee:	b006      	add	sp, #24
 80025f0:	bd10      	pop	{r4, pc}
 80025f2:	bf00      	nop
 80025f4:	40005400 	.word	0x40005400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	40010000 	.word	0x40010000

08002604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002604:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	2410      	movs	r4, #16
{
 8002608:	4605      	mov	r5, r0
 800260a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	4622      	mov	r2, r4
 800260e:	2100      	movs	r1, #0
 8002610:	eb0d 0004 	add.w	r0, sp, r4
 8002614:	f000 f949 	bl	80028aa <memset>
  if(hspi->Instance==SPI1)
 8002618:	682a      	ldr	r2, [r5, #0]
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_SPI_MspInit+0xa4>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d141      	bne.n	80026a4 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002620:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002624:	699a      	ldr	r2, [r3, #24]
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = CS_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2602      	movs	r6, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800262c:	619a      	str	r2, [r3, #24]
 800262e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002630:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002632:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002636:	9201      	str	r2, [sp, #4]
 8002638:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 800263c:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	f042 0204 	orr.w	r2, r2, #4
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8002648:	4818      	ldr	r0, [pc, #96]	; (80026ac <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	f002 0204 	and.w	r2, r2, #4
 800264e:	9202      	str	r2, [sp, #8]
 8002650:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	f042 0208 	orr.w	r2, r2, #8
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800265c:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	9303      	str	r3, [sp, #12]
 8002664:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800266a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 800266e:	f7fe fbe1 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
 8002672:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002674:	eb0d 0104 	add.w	r1, sp, r4
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002680:	f7fe fbd8 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002684:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8002686:	eb0d 0104 	add.w	r1, sp, r4
 800268a:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8002690:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8002692:	f7fe fbcf 	bl	8000e34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_SPI_MspInit+0xb0>)
 8002698:	6853      	ldr	r3, [r2, #4]
 800269a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026a4:	b008      	add	sp, #32
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	40013000 	.word	0x40013000
 80026ac:	40010800 	.word	0x40010800
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40010000 	.word	0x40010000

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b510      	push	{r4, lr}
 80026ba:	4604      	mov	r4, r0
 80026bc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026be:	2210      	movs	r2, #16
 80026c0:	2100      	movs	r1, #0
 80026c2:	a802      	add	r0, sp, #8
 80026c4:	f000 f8f1 	bl	80028aa <memset>
  if(huart->Instance==USART2)
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_UART_MspInit+0x6c>)
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d126      	bne.n	800271e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80026d4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80026d6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026dc:	61da      	str	r2, [r3, #28]
 80026de:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80026e0:	4811      	ldr	r0, [pc, #68]	; (8002728 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80026e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026e6:	9200      	str	r2, [sp, #0]
 80026e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	f042 0204 	orr.w	r2, r2, #4
 80026f0:	619a      	str	r2, [r3, #24]
 80026f2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8002708:	f7fe fb94 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	2108      	movs	r1, #8
 800270e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002712:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8002716:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800271a:	f7fe fb8b 	bl	8000e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800271e:	b006      	add	sp, #24
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	40004400 	.word	0x40004400
 8002728:	40010800 	.word	0x40010800

0800272c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800272c:	4770      	bx	lr

0800272e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272e:	e7fe      	b.n	800272e <HardFault_Handler>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	e7fe      	b.n	8002732 <BusFault_Handler>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	e7fe      	b.n	8002734 <UsageFault_Handler>

08002736 <SVC_Handler>:
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:
 8002738:	4770      	bx	lr

0800273a <PendSV_Handler>:
 800273a:	4770      	bx	lr

0800273c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273c:	f7fe b9da 	b.w	8000af4 <HAL_IncTick>

08002740 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	460e      	mov	r6, r1
 8002744:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	460c      	mov	r4, r1
 8002748:	1ba3      	subs	r3, r4, r6
 800274a:	429d      	cmp	r5, r3
 800274c:	dc01      	bgt.n	8002752 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800274e:	4628      	mov	r0, r5
 8002750:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002752:	f3af 8000 	nop.w
 8002756:	f804 0b01 	strb.w	r0, [r4], #1
 800275a:	e7f5      	b.n	8002748 <_read+0x8>

0800275c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800275c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <_sbrk+0x2c>)
{
 8002760:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	b909      	cbnz	r1, 800276a <_sbrk+0xe>
		heap_end = &end;
 8002766:	4909      	ldr	r1, [pc, #36]	; (800278c <_sbrk+0x30>)
 8002768:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800276a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800276c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800276e:	4402      	add	r2, r0
 8002770:	428a      	cmp	r2, r1
 8002772:	d906      	bls.n	8002782 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002774:	f000 f864 	bl	8002840 <__errno>
 8002778:	230c      	movs	r3, #12
 800277a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800277c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002780:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002782:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002784:	e7fc      	b.n	8002780 <_sbrk+0x24>
 8002786:	bf00      	nop
 8002788:	20000608 	.word	0x20000608
 800278c:	20000788 	.word	0x20000788

08002790 <_close>:

int _close(int file)
{
	return -1;
}
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800279a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800279c:	604b      	str	r3, [r1, #4]
}
 800279e:	4770      	bx	lr

080027a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80027a0:	2001      	movs	r0, #1
 80027a2:	4770      	bx	lr

080027a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80027a4:	2000      	movs	r0, #0
 80027a6:	4770      	bx	lr

080027a8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <SystemInit+0x40>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <SystemInit+0x44>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027c4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027cc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80027d4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80027d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80027da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80027dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <SystemInit+0x48>)
 80027e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	f8ff0000 	.word	0xf8ff0000
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027f6:	e003      	b.n	8002800 <LoopCopyDataInit>

080027f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027fe:	3104      	adds	r1, #4

08002800 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002804:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002806:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002808:	d3f6      	bcc.n	80027f8 <CopyDataInit>
  ldr r2, =_sbss
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800280c:	e002      	b.n	8002814 <LoopFillZerobss>

0800280e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002810:	f842 3b04 	str.w	r3, [r2], #4

08002814 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002816:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002818:	d3f9      	bcc.n	800280e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800281a:	f7ff ffc5 	bl	80027a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281e:	f000 f815 	bl	800284c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002822:	f7ff fbab 	bl	8001f7c <main>
  bx lr
 8002826:	4770      	bx	lr
  ldr r3, =_sidata
 8002828:	08006098 	.word	0x08006098
  ldr r0, =_sdata
 800282c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002830:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8002834:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8002838:	20000788 	.word	0x20000788

0800283c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC1_2_IRQHandler>
	...

08002840 <__errno>:
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <__errno+0x8>)
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000014 	.word	0x20000014

0800284c <__libc_init_array>:
 800284c:	b570      	push	{r4, r5, r6, lr}
 800284e:	2500      	movs	r5, #0
 8002850:	4e0c      	ldr	r6, [pc, #48]	; (8002884 <__libc_init_array+0x38>)
 8002852:	4c0d      	ldr	r4, [pc, #52]	; (8002888 <__libc_init_array+0x3c>)
 8002854:	1ba4      	subs	r4, r4, r6
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	42a5      	cmp	r5, r4
 800285a:	d109      	bne.n	8002870 <__libc_init_array+0x24>
 800285c:	f002 fbaa 	bl	8004fb4 <_init>
 8002860:	2500      	movs	r5, #0
 8002862:	4e0a      	ldr	r6, [pc, #40]	; (800288c <__libc_init_array+0x40>)
 8002864:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <__libc_init_array+0x44>)
 8002866:	1ba4      	subs	r4, r4, r6
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	42a5      	cmp	r5, r4
 800286c:	d105      	bne.n	800287a <__libc_init_array+0x2e>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002874:	4798      	blx	r3
 8002876:	3501      	adds	r5, #1
 8002878:	e7ee      	b.n	8002858 <__libc_init_array+0xc>
 800287a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287e:	4798      	blx	r3
 8002880:	3501      	adds	r5, #1
 8002882:	e7f2      	b.n	800286a <__libc_init_array+0x1e>
 8002884:	08006090 	.word	0x08006090
 8002888:	08006090 	.word	0x08006090
 800288c:	08006090 	.word	0x08006090
 8002890:	08006094 	.word	0x08006094

08002894 <memcpy>:
 8002894:	b510      	push	{r4, lr}
 8002896:	1e43      	subs	r3, r0, #1
 8002898:	440a      	add	r2, r1
 800289a:	4291      	cmp	r1, r2
 800289c:	d100      	bne.n	80028a0 <memcpy+0xc>
 800289e:	bd10      	pop	{r4, pc}
 80028a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028a8:	e7f7      	b.n	800289a <memcpy+0x6>

080028aa <memset>:
 80028aa:	4603      	mov	r3, r0
 80028ac:	4402      	add	r2, r0
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d100      	bne.n	80028b4 <memset+0xa>
 80028b2:	4770      	bx	lr
 80028b4:	f803 1b01 	strb.w	r1, [r3], #1
 80028b8:	e7f9      	b.n	80028ae <memset+0x4>

080028ba <__cvt>:
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c0:	461e      	mov	r6, r3
 80028c2:	bfbb      	ittet	lt
 80028c4:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	461e      	movlt	r6, r3
 80028ca:	2300      	movge	r3, #0
 80028cc:	232d      	movlt	r3, #45	; 0x2d
 80028ce:	b088      	sub	sp, #32
 80028d0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80028d2:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80028d6:	f027 0720 	bic.w	r7, r7, #32
 80028da:	2f46      	cmp	r7, #70	; 0x46
 80028dc:	4614      	mov	r4, r2
 80028de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80028e0:	700b      	strb	r3, [r1, #0]
 80028e2:	d004      	beq.n	80028ee <__cvt+0x34>
 80028e4:	2f45      	cmp	r7, #69	; 0x45
 80028e6:	d100      	bne.n	80028ea <__cvt+0x30>
 80028e8:	3501      	adds	r5, #1
 80028ea:	2302      	movs	r3, #2
 80028ec:	e000      	b.n	80028f0 <__cvt+0x36>
 80028ee:	2303      	movs	r3, #3
 80028f0:	aa07      	add	r2, sp, #28
 80028f2:	9204      	str	r2, [sp, #16]
 80028f4:	aa06      	add	r2, sp, #24
 80028f6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80028fa:	e9cd 3500 	strd	r3, r5, [sp]
 80028fe:	4622      	mov	r2, r4
 8002900:	4633      	mov	r3, r6
 8002902:	f000 fdf5 	bl	80034f0 <_dtoa_r>
 8002906:	2f47      	cmp	r7, #71	; 0x47
 8002908:	4680      	mov	r8, r0
 800290a:	d102      	bne.n	8002912 <__cvt+0x58>
 800290c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800290e:	07db      	lsls	r3, r3, #31
 8002910:	d526      	bpl.n	8002960 <__cvt+0xa6>
 8002912:	2f46      	cmp	r7, #70	; 0x46
 8002914:	eb08 0905 	add.w	r9, r8, r5
 8002918:	d111      	bne.n	800293e <__cvt+0x84>
 800291a:	f898 3000 	ldrb.w	r3, [r8]
 800291e:	2b30      	cmp	r3, #48	; 0x30
 8002920:	d10a      	bne.n	8002938 <__cvt+0x7e>
 8002922:	2200      	movs	r2, #0
 8002924:	2300      	movs	r3, #0
 8002926:	4620      	mov	r0, r4
 8002928:	4631      	mov	r1, r6
 800292a:	f7fe f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800292e:	b918      	cbnz	r0, 8002938 <__cvt+0x7e>
 8002930:	f1c5 0501 	rsb	r5, r5, #1
 8002934:	f8ca 5000 	str.w	r5, [sl]
 8002938:	f8da 3000 	ldr.w	r3, [sl]
 800293c:	4499      	add	r9, r3
 800293e:	2200      	movs	r2, #0
 8002940:	2300      	movs	r3, #0
 8002942:	4620      	mov	r0, r4
 8002944:	4631      	mov	r1, r6
 8002946:	f7fe f82f 	bl	80009a8 <__aeabi_dcmpeq>
 800294a:	b938      	cbnz	r0, 800295c <__cvt+0xa2>
 800294c:	2230      	movs	r2, #48	; 0x30
 800294e:	9b07      	ldr	r3, [sp, #28]
 8002950:	454b      	cmp	r3, r9
 8002952:	d205      	bcs.n	8002960 <__cvt+0xa6>
 8002954:	1c59      	adds	r1, r3, #1
 8002956:	9107      	str	r1, [sp, #28]
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e7f8      	b.n	800294e <__cvt+0x94>
 800295c:	f8cd 901c 	str.w	r9, [sp, #28]
 8002960:	4640      	mov	r0, r8
 8002962:	9b07      	ldr	r3, [sp, #28]
 8002964:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002966:	eba3 0308 	sub.w	r3, r3, r8
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	b008      	add	sp, #32
 800296e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002972 <__exponent>:
 8002972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002974:	2900      	cmp	r1, #0
 8002976:	bfb4      	ite	lt
 8002978:	232d      	movlt	r3, #45	; 0x2d
 800297a:	232b      	movge	r3, #43	; 0x2b
 800297c:	4604      	mov	r4, r0
 800297e:	bfb8      	it	lt
 8002980:	4249      	neglt	r1, r1
 8002982:	2909      	cmp	r1, #9
 8002984:	f804 2b02 	strb.w	r2, [r4], #2
 8002988:	7043      	strb	r3, [r0, #1]
 800298a:	dd21      	ble.n	80029d0 <__exponent+0x5e>
 800298c:	f10d 0307 	add.w	r3, sp, #7
 8002990:	461f      	mov	r7, r3
 8002992:	260a      	movs	r6, #10
 8002994:	fb91 f5f6 	sdiv	r5, r1, r6
 8002998:	fb06 1115 	mls	r1, r6, r5, r1
 800299c:	2d09      	cmp	r5, #9
 800299e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80029a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80029a6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80029aa:	4629      	mov	r1, r5
 80029ac:	dc09      	bgt.n	80029c2 <__exponent+0x50>
 80029ae:	3130      	adds	r1, #48	; 0x30
 80029b0:	3b02      	subs	r3, #2
 80029b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80029b6:	42bb      	cmp	r3, r7
 80029b8:	4622      	mov	r2, r4
 80029ba:	d304      	bcc.n	80029c6 <__exponent+0x54>
 80029bc:	1a10      	subs	r0, r2, r0
 80029be:	b003      	add	sp, #12
 80029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c2:	4613      	mov	r3, r2
 80029c4:	e7e6      	b.n	8002994 <__exponent+0x22>
 80029c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ca:	f804 2b01 	strb.w	r2, [r4], #1
 80029ce:	e7f2      	b.n	80029b6 <__exponent+0x44>
 80029d0:	2330      	movs	r3, #48	; 0x30
 80029d2:	4419      	add	r1, r3
 80029d4:	7083      	strb	r3, [r0, #2]
 80029d6:	1d02      	adds	r2, r0, #4
 80029d8:	70c1      	strb	r1, [r0, #3]
 80029da:	e7ef      	b.n	80029bc <__exponent+0x4a>

080029dc <_printf_float>:
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	b091      	sub	sp, #68	; 0x44
 80029e2:	460c      	mov	r4, r1
 80029e4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80029e6:	4693      	mov	fp, r2
 80029e8:	461e      	mov	r6, r3
 80029ea:	4605      	mov	r5, r0
 80029ec:	f001 fcae 	bl	800434c <_localeconv_r>
 80029f0:	6803      	ldr	r3, [r0, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	9309      	str	r3, [sp, #36]	; 0x24
 80029f6:	f7fd fbab 	bl	8000150 <strlen>
 80029fa:	2300      	movs	r3, #0
 80029fc:	930e      	str	r3, [sp, #56]	; 0x38
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	900a      	str	r0, [sp, #40]	; 0x28
 8002a02:	3307      	adds	r3, #7
 8002a04:	f023 0307 	bic.w	r3, r3, #7
 8002a08:	f103 0208 	add.w	r2, r3, #8
 8002a0c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002a10:	f8d4 a000 	ldr.w	sl, [r4]
 8002a14:	603a      	str	r2, [r7, #0]
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a1e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002a22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a26:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a2c:	4ba6      	ldr	r3, [pc, #664]	; (8002cc8 <_printf_float+0x2ec>)
 8002a2e:	4638      	mov	r0, r7
 8002a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a32:	f7fd ffeb 	bl	8000a0c <__aeabi_dcmpun>
 8002a36:	bb68      	cbnz	r0, 8002a94 <_printf_float+0xb8>
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a3c:	4ba2      	ldr	r3, [pc, #648]	; (8002cc8 <_printf_float+0x2ec>)
 8002a3e:	4638      	mov	r0, r7
 8002a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a42:	f7fd ffc5 	bl	80009d0 <__aeabi_dcmple>
 8002a46:	bb28      	cbnz	r0, 8002a94 <_printf_float+0xb8>
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4638      	mov	r0, r7
 8002a4e:	4649      	mov	r1, r9
 8002a50:	f7fd ffb4 	bl	80009bc <__aeabi_dcmplt>
 8002a54:	b110      	cbz	r0, 8002a5c <_printf_float+0x80>
 8002a56:	232d      	movs	r3, #45	; 0x2d
 8002a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a5c:	4f9b      	ldr	r7, [pc, #620]	; (8002ccc <_printf_float+0x2f0>)
 8002a5e:	4b9c      	ldr	r3, [pc, #624]	; (8002cd0 <_printf_float+0x2f4>)
 8002a60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002a64:	bf98      	it	ls
 8002a66:	461f      	movls	r7, r3
 8002a68:	2303      	movs	r3, #3
 8002a6a:	f04f 0900 	mov.w	r9, #0
 8002a6e:	6123      	str	r3, [r4, #16]
 8002a70:	f02a 0304 	bic.w	r3, sl, #4
 8002a74:	6023      	str	r3, [r4, #0]
 8002a76:	9600      	str	r6, [sp, #0]
 8002a78:	465b      	mov	r3, fp
 8002a7a:	aa0f      	add	r2, sp, #60	; 0x3c
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f000 f9e2 	bl	8002e48 <_printf_common>
 8002a84:	3001      	adds	r0, #1
 8002a86:	f040 8090 	bne.w	8002baa <_printf_float+0x1ce>
 8002a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a8e:	b011      	add	sp, #68	; 0x44
 8002a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a94:	463a      	mov	r2, r7
 8002a96:	464b      	mov	r3, r9
 8002a98:	4638      	mov	r0, r7
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	f7fd ffb6 	bl	8000a0c <__aeabi_dcmpun>
 8002aa0:	b110      	cbz	r0, 8002aa8 <_printf_float+0xcc>
 8002aa2:	4f8c      	ldr	r7, [pc, #560]	; (8002cd4 <_printf_float+0x2f8>)
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <_printf_float+0x2fc>)
 8002aa6:	e7db      	b.n	8002a60 <_printf_float+0x84>
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	a80d      	add	r0, sp, #52	; 0x34
 8002ab2:	a90e      	add	r1, sp, #56	; 0x38
 8002ab4:	d140      	bne.n	8002b38 <_printf_float+0x15c>
 8002ab6:	2306      	movs	r3, #6
 8002ab8:	6063      	str	r3, [r4, #4]
 8002aba:	f04f 0c00 	mov.w	ip, #0
 8002abe:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002ac2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	6022      	str	r2, [r4, #0]
 8002aca:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	463a      	mov	r2, r7
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f7ff feee 	bl	80028ba <__cvt>
 8002ade:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002ae2:	2b47      	cmp	r3, #71	; 0x47
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	d109      	bne.n	8002afc <_printf_float+0x120>
 8002ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aea:	1cd8      	adds	r0, r3, #3
 8002aec:	db02      	blt.n	8002af4 <_printf_float+0x118>
 8002aee:	6862      	ldr	r2, [r4, #4]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	dd47      	ble.n	8002b84 <_printf_float+0x1a8>
 8002af4:	f1a8 0802 	sub.w	r8, r8, #2
 8002af8:	fa5f f888 	uxtb.w	r8, r8
 8002afc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b02:	d824      	bhi.n	8002b4e <_printf_float+0x172>
 8002b04:	3901      	subs	r1, #1
 8002b06:	4642      	mov	r2, r8
 8002b08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b0c:	910d      	str	r1, [sp, #52]	; 0x34
 8002b0e:	f7ff ff30 	bl	8002972 <__exponent>
 8002b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b14:	4681      	mov	r9, r0
 8002b16:	1813      	adds	r3, r2, r0
 8002b18:	2a01      	cmp	r2, #1
 8002b1a:	6123      	str	r3, [r4, #16]
 8002b1c:	dc02      	bgt.n	8002b24 <_printf_float+0x148>
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	07d1      	lsls	r1, r2, #31
 8002b22:	d501      	bpl.n	8002b28 <_printf_float+0x14c>
 8002b24:	3301      	adds	r3, #1
 8002b26:	6123      	str	r3, [r4, #16]
 8002b28:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0a2      	beq.n	8002a76 <_printf_float+0x9a>
 8002b30:	232d      	movs	r3, #45	; 0x2d
 8002b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b36:	e79e      	b.n	8002a76 <_printf_float+0x9a>
 8002b38:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002b3c:	f000 816e 	beq.w	8002e1c <_printf_float+0x440>
 8002b40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b44:	d1b9      	bne.n	8002aba <_printf_float+0xde>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1b7      	bne.n	8002aba <_printf_float+0xde>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e7b4      	b.n	8002ab8 <_printf_float+0xdc>
 8002b4e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002b52:	d119      	bne.n	8002b88 <_printf_float+0x1ac>
 8002b54:	2900      	cmp	r1, #0
 8002b56:	6863      	ldr	r3, [r4, #4]
 8002b58:	dd0c      	ble.n	8002b74 <_printf_float+0x198>
 8002b5a:	6121      	str	r1, [r4, #16]
 8002b5c:	b913      	cbnz	r3, 8002b64 <_printf_float+0x188>
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	07d2      	lsls	r2, r2, #31
 8002b62:	d502      	bpl.n	8002b6a <_printf_float+0x18e>
 8002b64:	3301      	adds	r3, #1
 8002b66:	440b      	add	r3, r1
 8002b68:	6123      	str	r3, [r4, #16]
 8002b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b6c:	f04f 0900 	mov.w	r9, #0
 8002b70:	65a3      	str	r3, [r4, #88]	; 0x58
 8002b72:	e7d9      	b.n	8002b28 <_printf_float+0x14c>
 8002b74:	b913      	cbnz	r3, 8002b7c <_printf_float+0x1a0>
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	07d0      	lsls	r0, r2, #31
 8002b7a:	d501      	bpl.n	8002b80 <_printf_float+0x1a4>
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	e7f3      	b.n	8002b68 <_printf_float+0x18c>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e7f1      	b.n	8002b68 <_printf_float+0x18c>
 8002b84:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002b88:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	db05      	blt.n	8002b9c <_printf_float+0x1c0>
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	6123      	str	r3, [r4, #16]
 8002b94:	07d1      	lsls	r1, r2, #31
 8002b96:	d5e8      	bpl.n	8002b6a <_printf_float+0x18e>
 8002b98:	3301      	adds	r3, #1
 8002b9a:	e7e5      	b.n	8002b68 <_printf_float+0x18c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bfcc      	ite	gt
 8002ba0:	2301      	movgt	r3, #1
 8002ba2:	f1c3 0302 	rsble	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	e7de      	b.n	8002b68 <_printf_float+0x18c>
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	055a      	lsls	r2, r3, #21
 8002bae:	d407      	bmi.n	8002bc0 <_printf_float+0x1e4>
 8002bb0:	6923      	ldr	r3, [r4, #16]
 8002bb2:	463a      	mov	r2, r7
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	47b0      	blx	r6
 8002bba:	3001      	adds	r0, #1
 8002bbc:	d129      	bne.n	8002c12 <_printf_float+0x236>
 8002bbe:	e764      	b.n	8002a8a <_printf_float+0xae>
 8002bc0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002bc4:	f240 80d7 	bls.w	8002d76 <_printf_float+0x39a>
 8002bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f7fd feea 	bl	80009a8 <__aeabi_dcmpeq>
 8002bd4:	b388      	cbz	r0, 8002c3a <_printf_float+0x25e>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <_printf_float+0x300>)
 8002bda:	4659      	mov	r1, fp
 8002bdc:	4628      	mov	r0, r5
 8002bde:	47b0      	blx	r6
 8002be0:	3001      	adds	r0, #1
 8002be2:	f43f af52 	beq.w	8002a8a <_printf_float+0xae>
 8002be6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002bea:	429a      	cmp	r2, r3
 8002bec:	db02      	blt.n	8002bf4 <_printf_float+0x218>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	07d8      	lsls	r0, r3, #31
 8002bf2:	d50e      	bpl.n	8002c12 <_printf_float+0x236>
 8002bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bf8:	4659      	mov	r1, fp
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	47b0      	blx	r6
 8002bfe:	3001      	adds	r0, #1
 8002c00:	f43f af43 	beq.w	8002a8a <_printf_float+0xae>
 8002c04:	2700      	movs	r7, #0
 8002c06:	f104 081a 	add.w	r8, r4, #26
 8002c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	42bb      	cmp	r3, r7
 8002c10:	dc09      	bgt.n	8002c26 <_printf_float+0x24a>
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	079f      	lsls	r7, r3, #30
 8002c16:	f100 80fd 	bmi.w	8002e14 <_printf_float+0x438>
 8002c1a:	68e0      	ldr	r0, [r4, #12]
 8002c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	bfb8      	it	lt
 8002c22:	4618      	movlt	r0, r3
 8002c24:	e733      	b.n	8002a8e <_printf_float+0xb2>
 8002c26:	2301      	movs	r3, #1
 8002c28:	4642      	mov	r2, r8
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	47b0      	blx	r6
 8002c30:	3001      	adds	r0, #1
 8002c32:	f43f af2a 	beq.w	8002a8a <_printf_float+0xae>
 8002c36:	3701      	adds	r7, #1
 8002c38:	e7e7      	b.n	8002c0a <_printf_float+0x22e>
 8002c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	dc2b      	bgt.n	8002c98 <_printf_float+0x2bc>
 8002c40:	2301      	movs	r3, #1
 8002c42:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <_printf_float+0x300>)
 8002c44:	4659      	mov	r1, fp
 8002c46:	4628      	mov	r0, r5
 8002c48:	47b0      	blx	r6
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	f43f af1d 	beq.w	8002a8a <_printf_float+0xae>
 8002c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c52:	b923      	cbnz	r3, 8002c5e <_printf_float+0x282>
 8002c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c56:	b913      	cbnz	r3, 8002c5e <_printf_float+0x282>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	07d9      	lsls	r1, r3, #31
 8002c5c:	d5d9      	bpl.n	8002c12 <_printf_float+0x236>
 8002c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c62:	4659      	mov	r1, fp
 8002c64:	4628      	mov	r0, r5
 8002c66:	47b0      	blx	r6
 8002c68:	3001      	adds	r0, #1
 8002c6a:	f43f af0e 	beq.w	8002a8a <_printf_float+0xae>
 8002c6e:	f04f 0800 	mov.w	r8, #0
 8002c72:	f104 091a 	add.w	r9, r4, #26
 8002c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c78:	425b      	negs	r3, r3
 8002c7a:	4543      	cmp	r3, r8
 8002c7c:	dc01      	bgt.n	8002c82 <_printf_float+0x2a6>
 8002c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c80:	e797      	b.n	8002bb2 <_printf_float+0x1d6>
 8002c82:	2301      	movs	r3, #1
 8002c84:	464a      	mov	r2, r9
 8002c86:	4659      	mov	r1, fp
 8002c88:	4628      	mov	r0, r5
 8002c8a:	47b0      	blx	r6
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	f43f aefc 	beq.w	8002a8a <_printf_float+0xae>
 8002c92:	f108 0801 	add.w	r8, r8, #1
 8002c96:	e7ee      	b.n	8002c76 <_printf_float+0x29a>
 8002c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bfa8      	it	ge
 8002ca0:	461a      	movge	r2, r3
 8002ca2:	2a00      	cmp	r2, #0
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	dd07      	ble.n	8002cb8 <_printf_float+0x2dc>
 8002ca8:	4613      	mov	r3, r2
 8002caa:	4659      	mov	r1, fp
 8002cac:	463a      	mov	r2, r7
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b0      	blx	r6
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	f43f aee9 	beq.w	8002a8a <_printf_float+0xae>
 8002cb8:	f104 031a 	add.w	r3, r4, #26
 8002cbc:	f04f 0a00 	mov.w	sl, #0
 8002cc0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002cc6:	e015      	b.n	8002cf4 <_printf_float+0x318>
 8002cc8:	7fefffff 	.word	0x7fefffff
 8002ccc:	08005dd4 	.word	0x08005dd4
 8002cd0:	08005dd0 	.word	0x08005dd0
 8002cd4:	08005ddc 	.word	0x08005ddc
 8002cd8:	08005dd8 	.word	0x08005dd8
 8002cdc:	08005de0 	.word	0x08005de0
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	47b0      	blx	r6
 8002cea:	3001      	adds	r0, #1
 8002cec:	f43f aecd 	beq.w	8002a8a <_printf_float+0xae>
 8002cf0:	f10a 0a01 	add.w	sl, sl, #1
 8002cf4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002cf8:	eba9 0308 	sub.w	r3, r9, r8
 8002cfc:	4553      	cmp	r3, sl
 8002cfe:	dcef      	bgt.n	8002ce0 <_printf_float+0x304>
 8002d00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d04:	429a      	cmp	r2, r3
 8002d06:	444f      	add	r7, r9
 8002d08:	db14      	blt.n	8002d34 <_printf_float+0x358>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	07da      	lsls	r2, r3, #31
 8002d0e:	d411      	bmi.n	8002d34 <_printf_float+0x358>
 8002d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d14:	eba3 0209 	sub.w	r2, r3, r9
 8002d18:	eba3 0901 	sub.w	r9, r3, r1
 8002d1c:	4591      	cmp	r9, r2
 8002d1e:	bfa8      	it	ge
 8002d20:	4691      	movge	r9, r2
 8002d22:	f1b9 0f00 	cmp.w	r9, #0
 8002d26:	dc0d      	bgt.n	8002d44 <_printf_float+0x368>
 8002d28:	2700      	movs	r7, #0
 8002d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d2e:	f104 081a 	add.w	r8, r4, #26
 8002d32:	e018      	b.n	8002d66 <_printf_float+0x38a>
 8002d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d38:	4659      	mov	r1, fp
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	47b0      	blx	r6
 8002d3e:	3001      	adds	r0, #1
 8002d40:	d1e6      	bne.n	8002d10 <_printf_float+0x334>
 8002d42:	e6a2      	b.n	8002a8a <_printf_float+0xae>
 8002d44:	464b      	mov	r3, r9
 8002d46:	463a      	mov	r2, r7
 8002d48:	4659      	mov	r1, fp
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	47b0      	blx	r6
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d1ea      	bne.n	8002d28 <_printf_float+0x34c>
 8002d52:	e69a      	b.n	8002a8a <_printf_float+0xae>
 8002d54:	2301      	movs	r3, #1
 8002d56:	4642      	mov	r2, r8
 8002d58:	4659      	mov	r1, fp
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	47b0      	blx	r6
 8002d5e:	3001      	adds	r0, #1
 8002d60:	f43f ae93 	beq.w	8002a8a <_printf_float+0xae>
 8002d64:	3701      	adds	r7, #1
 8002d66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	eba3 0309 	sub.w	r3, r3, r9
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	dcef      	bgt.n	8002d54 <_printf_float+0x378>
 8002d74:	e74d      	b.n	8002c12 <_printf_float+0x236>
 8002d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	dc01      	bgt.n	8002d80 <_printf_float+0x3a4>
 8002d7c:	07db      	lsls	r3, r3, #31
 8002d7e:	d538      	bpl.n	8002df2 <_printf_float+0x416>
 8002d80:	2301      	movs	r3, #1
 8002d82:	463a      	mov	r2, r7
 8002d84:	4659      	mov	r1, fp
 8002d86:	4628      	mov	r0, r5
 8002d88:	47b0      	blx	r6
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	f43f ae7d 	beq.w	8002a8a <_printf_float+0xae>
 8002d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d94:	4659      	mov	r1, fp
 8002d96:	4628      	mov	r0, r5
 8002d98:	47b0      	blx	r6
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	f107 0701 	add.w	r7, r7, #1
 8002da0:	f43f ae73 	beq.w	8002a8a <_printf_float+0xae>
 8002da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002daa:	2200      	movs	r2, #0
 8002dac:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002db0:	2300      	movs	r3, #0
 8002db2:	f7fd fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8002db6:	b9c0      	cbnz	r0, 8002dea <_printf_float+0x40e>
 8002db8:	4643      	mov	r3, r8
 8002dba:	463a      	mov	r2, r7
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b0      	blx	r6
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d10d      	bne.n	8002de2 <_printf_float+0x406>
 8002dc6:	e660      	b.n	8002a8a <_printf_float+0xae>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	4642      	mov	r2, r8
 8002dcc:	4659      	mov	r1, fp
 8002dce:	4628      	mov	r0, r5
 8002dd0:	47b0      	blx	r6
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	f43f ae59 	beq.w	8002a8a <_printf_float+0xae>
 8002dd8:	3701      	adds	r7, #1
 8002dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	42bb      	cmp	r3, r7
 8002de0:	dcf2      	bgt.n	8002dc8 <_printf_float+0x3ec>
 8002de2:	464b      	mov	r3, r9
 8002de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002de8:	e6e4      	b.n	8002bb4 <_printf_float+0x1d8>
 8002dea:	2700      	movs	r7, #0
 8002dec:	f104 081a 	add.w	r8, r4, #26
 8002df0:	e7f3      	b.n	8002dda <_printf_float+0x3fe>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e7e1      	b.n	8002dba <_printf_float+0x3de>
 8002df6:	2301      	movs	r3, #1
 8002df8:	4642      	mov	r2, r8
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	47b0      	blx	r6
 8002e00:	3001      	adds	r0, #1
 8002e02:	f43f ae42 	beq.w	8002a8a <_printf_float+0xae>
 8002e06:	3701      	adds	r7, #1
 8002e08:	68e3      	ldr	r3, [r4, #12]
 8002e0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	42bb      	cmp	r3, r7
 8002e10:	dcf1      	bgt.n	8002df6 <_printf_float+0x41a>
 8002e12:	e702      	b.n	8002c1a <_printf_float+0x23e>
 8002e14:	2700      	movs	r7, #0
 8002e16:	f104 0819 	add.w	r8, r4, #25
 8002e1a:	e7f5      	b.n	8002e08 <_printf_float+0x42c>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f43f ae94 	beq.w	8002b4a <_printf_float+0x16e>
 8002e22:	f04f 0c00 	mov.w	ip, #0
 8002e26:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002e2a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002e2e:	6022      	str	r2, [r4, #0]
 8002e30:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002e34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	463a      	mov	r2, r7
 8002e3c:	464b      	mov	r3, r9
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7ff fd3b 	bl	80028ba <__cvt>
 8002e44:	4607      	mov	r7, r0
 8002e46:	e64f      	b.n	8002ae8 <_printf_float+0x10c>

08002e48 <_printf_common>:
 8002e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e4c:	4691      	mov	r9, r2
 8002e4e:	461f      	mov	r7, r3
 8002e50:	688a      	ldr	r2, [r1, #8]
 8002e52:	690b      	ldr	r3, [r1, #16]
 8002e54:	4606      	mov	r6, r0
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bfb8      	it	lt
 8002e5a:	4613      	movlt	r3, r2
 8002e5c:	f8c9 3000 	str.w	r3, [r9]
 8002e60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e64:	460c      	mov	r4, r1
 8002e66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e6a:	b112      	cbz	r2, 8002e72 <_printf_common+0x2a>
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c9 3000 	str.w	r3, [r9]
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	0699      	lsls	r1, r3, #26
 8002e76:	bf42      	ittt	mi
 8002e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e7c:	3302      	addmi	r3, #2
 8002e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	f015 0506 	ands.w	r5, r5, #6
 8002e88:	d107      	bne.n	8002e9a <_printf_common+0x52>
 8002e8a:	f104 0a19 	add.w	sl, r4, #25
 8002e8e:	68e3      	ldr	r3, [r4, #12]
 8002e90:	f8d9 2000 	ldr.w	r2, [r9]
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	42ab      	cmp	r3, r5
 8002e98:	dc29      	bgt.n	8002eee <_printf_common+0xa6>
 8002e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	3300      	adds	r3, #0
 8002ea2:	bf18      	it	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	0692      	lsls	r2, r2, #26
 8002ea8:	d42e      	bmi.n	8002f08 <_printf_common+0xc0>
 8002eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eae:	4639      	mov	r1, r7
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	47c0      	blx	r8
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d021      	beq.n	8002efc <_printf_common+0xb4>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	68e5      	ldr	r5, [r4, #12]
 8002ebc:	f003 0306 	and.w	r3, r3, #6
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	bf18      	it	ne
 8002ec4:	2500      	movne	r5, #0
 8002ec6:	f8d9 2000 	ldr.w	r2, [r9]
 8002eca:	f04f 0900 	mov.w	r9, #0
 8002ece:	bf08      	it	eq
 8002ed0:	1aad      	subeq	r5, r5, r2
 8002ed2:	68a3      	ldr	r3, [r4, #8]
 8002ed4:	6922      	ldr	r2, [r4, #16]
 8002ed6:	bf08      	it	eq
 8002ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bfc4      	itt	gt
 8002ee0:	1a9b      	subgt	r3, r3, r2
 8002ee2:	18ed      	addgt	r5, r5, r3
 8002ee4:	341a      	adds	r4, #26
 8002ee6:	454d      	cmp	r5, r9
 8002ee8:	d11a      	bne.n	8002f20 <_printf_common+0xd8>
 8002eea:	2000      	movs	r0, #0
 8002eec:	e008      	b.n	8002f00 <_printf_common+0xb8>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4652      	mov	r2, sl
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	47c0      	blx	r8
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d103      	bne.n	8002f04 <_printf_common+0xbc>
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f04:	3501      	adds	r5, #1
 8002f06:	e7c2      	b.n	8002e8e <_printf_common+0x46>
 8002f08:	2030      	movs	r0, #48	; 0x30
 8002f0a:	18e1      	adds	r1, r4, r3
 8002f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f16:	4422      	add	r2, r4
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f1e:	e7c4      	b.n	8002eaa <_printf_common+0x62>
 8002f20:	2301      	movs	r3, #1
 8002f22:	4622      	mov	r2, r4
 8002f24:	4639      	mov	r1, r7
 8002f26:	4630      	mov	r0, r6
 8002f28:	47c0      	blx	r8
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d0e6      	beq.n	8002efc <_printf_common+0xb4>
 8002f2e:	f109 0901 	add.w	r9, r9, #1
 8002f32:	e7d8      	b.n	8002ee6 <_printf_common+0x9e>

08002f34 <_printf_i>:
 8002f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	7e09      	ldrb	r1, [r1, #24]
 8002f40:	b085      	sub	sp, #20
 8002f42:	296e      	cmp	r1, #110	; 0x6e
 8002f44:	4617      	mov	r7, r2
 8002f46:	4606      	mov	r6, r0
 8002f48:	4698      	mov	r8, r3
 8002f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f4c:	f000 80b3 	beq.w	80030b6 <_printf_i+0x182>
 8002f50:	d822      	bhi.n	8002f98 <_printf_i+0x64>
 8002f52:	2963      	cmp	r1, #99	; 0x63
 8002f54:	d036      	beq.n	8002fc4 <_printf_i+0x90>
 8002f56:	d80a      	bhi.n	8002f6e <_printf_i+0x3a>
 8002f58:	2900      	cmp	r1, #0
 8002f5a:	f000 80b9 	beq.w	80030d0 <_printf_i+0x19c>
 8002f5e:	2958      	cmp	r1, #88	; 0x58
 8002f60:	f000 8083 	beq.w	800306a <_printf_i+0x136>
 8002f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f6c:	e032      	b.n	8002fd4 <_printf_i+0xa0>
 8002f6e:	2964      	cmp	r1, #100	; 0x64
 8002f70:	d001      	beq.n	8002f76 <_printf_i+0x42>
 8002f72:	2969      	cmp	r1, #105	; 0x69
 8002f74:	d1f6      	bne.n	8002f64 <_printf_i+0x30>
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	0605      	lsls	r5, r0, #24
 8002f7c:	f103 0104 	add.w	r1, r3, #4
 8002f80:	d52a      	bpl.n	8002fd8 <_printf_i+0xa4>
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da03      	bge.n	8002f92 <_printf_i+0x5e>
 8002f8a:	222d      	movs	r2, #45	; 0x2d
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f92:	486f      	ldr	r0, [pc, #444]	; (8003150 <_printf_i+0x21c>)
 8002f94:	220a      	movs	r2, #10
 8002f96:	e039      	b.n	800300c <_printf_i+0xd8>
 8002f98:	2973      	cmp	r1, #115	; 0x73
 8002f9a:	f000 809d 	beq.w	80030d8 <_printf_i+0x1a4>
 8002f9e:	d808      	bhi.n	8002fb2 <_printf_i+0x7e>
 8002fa0:	296f      	cmp	r1, #111	; 0x6f
 8002fa2:	d020      	beq.n	8002fe6 <_printf_i+0xb2>
 8002fa4:	2970      	cmp	r1, #112	; 0x70
 8002fa6:	d1dd      	bne.n	8002f64 <_printf_i+0x30>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f043 0320 	orr.w	r3, r3, #32
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	e003      	b.n	8002fba <_printf_i+0x86>
 8002fb2:	2975      	cmp	r1, #117	; 0x75
 8002fb4:	d017      	beq.n	8002fe6 <_printf_i+0xb2>
 8002fb6:	2978      	cmp	r1, #120	; 0x78
 8002fb8:	d1d4      	bne.n	8002f64 <_printf_i+0x30>
 8002fba:	2378      	movs	r3, #120	; 0x78
 8002fbc:	4865      	ldr	r0, [pc, #404]	; (8003154 <_printf_i+0x220>)
 8002fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fc2:	e055      	b.n	8003070 <_printf_i+0x13c>
 8002fc4:	6813      	ldr	r3, [r2, #0]
 8002fc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fca:	1d19      	adds	r1, r3, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6011      	str	r1, [r2, #0]
 8002fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e08c      	b.n	80030f2 <_printf_i+0x1be>
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fde:	6011      	str	r1, [r2, #0]
 8002fe0:	bf18      	it	ne
 8002fe2:	b21b      	sxthne	r3, r3
 8002fe4:	e7cf      	b.n	8002f86 <_printf_i+0x52>
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	6825      	ldr	r5, [r4, #0]
 8002fea:	1d18      	adds	r0, r3, #4
 8002fec:	6010      	str	r0, [r2, #0]
 8002fee:	0628      	lsls	r0, r5, #24
 8002ff0:	d501      	bpl.n	8002ff6 <_printf_i+0xc2>
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e002      	b.n	8002ffc <_printf_i+0xc8>
 8002ff6:	0668      	lsls	r0, r5, #25
 8002ff8:	d5fb      	bpl.n	8002ff2 <_printf_i+0xbe>
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	296f      	cmp	r1, #111	; 0x6f
 8002ffe:	bf14      	ite	ne
 8003000:	220a      	movne	r2, #10
 8003002:	2208      	moveq	r2, #8
 8003004:	4852      	ldr	r0, [pc, #328]	; (8003150 <_printf_i+0x21c>)
 8003006:	2100      	movs	r1, #0
 8003008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800300c:	6865      	ldr	r5, [r4, #4]
 800300e:	2d00      	cmp	r5, #0
 8003010:	60a5      	str	r5, [r4, #8]
 8003012:	f2c0 8095 	blt.w	8003140 <_printf_i+0x20c>
 8003016:	6821      	ldr	r1, [r4, #0]
 8003018:	f021 0104 	bic.w	r1, r1, #4
 800301c:	6021      	str	r1, [r4, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d13d      	bne.n	800309e <_printf_i+0x16a>
 8003022:	2d00      	cmp	r5, #0
 8003024:	f040 808e 	bne.w	8003144 <_printf_i+0x210>
 8003028:	4665      	mov	r5, ip
 800302a:	2a08      	cmp	r2, #8
 800302c:	d10b      	bne.n	8003046 <_printf_i+0x112>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	07db      	lsls	r3, r3, #31
 8003032:	d508      	bpl.n	8003046 <_printf_i+0x112>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	6862      	ldr	r2, [r4, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	bfde      	ittt	le
 800303c:	2330      	movle	r3, #48	; 0x30
 800303e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003042:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003046:	ebac 0305 	sub.w	r3, ip, r5
 800304a:	6123      	str	r3, [r4, #16]
 800304c:	f8cd 8000 	str.w	r8, [sp]
 8003050:	463b      	mov	r3, r7
 8003052:	aa03      	add	r2, sp, #12
 8003054:	4621      	mov	r1, r4
 8003056:	4630      	mov	r0, r6
 8003058:	f7ff fef6 	bl	8002e48 <_printf_common>
 800305c:	3001      	adds	r0, #1
 800305e:	d14d      	bne.n	80030fc <_printf_i+0x1c8>
 8003060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003064:	b005      	add	sp, #20
 8003066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800306a:	4839      	ldr	r0, [pc, #228]	; (8003150 <_printf_i+0x21c>)
 800306c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	6821      	ldr	r1, [r4, #0]
 8003074:	1d1d      	adds	r5, r3, #4
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6015      	str	r5, [r2, #0]
 800307a:	060a      	lsls	r2, r1, #24
 800307c:	d50b      	bpl.n	8003096 <_printf_i+0x162>
 800307e:	07ca      	lsls	r2, r1, #31
 8003080:	bf44      	itt	mi
 8003082:	f041 0120 	orrmi.w	r1, r1, #32
 8003086:	6021      	strmi	r1, [r4, #0]
 8003088:	b91b      	cbnz	r3, 8003092 <_printf_i+0x15e>
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	f022 0220 	bic.w	r2, r2, #32
 8003090:	6022      	str	r2, [r4, #0]
 8003092:	2210      	movs	r2, #16
 8003094:	e7b7      	b.n	8003006 <_printf_i+0xd2>
 8003096:	064d      	lsls	r5, r1, #25
 8003098:	bf48      	it	mi
 800309a:	b29b      	uxthmi	r3, r3
 800309c:	e7ef      	b.n	800307e <_printf_i+0x14a>
 800309e:	4665      	mov	r5, ip
 80030a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030a4:	fb02 3311 	mls	r3, r2, r1, r3
 80030a8:	5cc3      	ldrb	r3, [r0, r3]
 80030aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030ae:	460b      	mov	r3, r1
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d1f5      	bne.n	80030a0 <_printf_i+0x16c>
 80030b4:	e7b9      	b.n	800302a <_printf_i+0xf6>
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	6825      	ldr	r5, [r4, #0]
 80030ba:	1d18      	adds	r0, r3, #4
 80030bc:	6961      	ldr	r1, [r4, #20]
 80030be:	6010      	str	r0, [r2, #0]
 80030c0:	0628      	lsls	r0, r5, #24
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	d501      	bpl.n	80030ca <_printf_i+0x196>
 80030c6:	6019      	str	r1, [r3, #0]
 80030c8:	e002      	b.n	80030d0 <_printf_i+0x19c>
 80030ca:	066a      	lsls	r2, r5, #25
 80030cc:	d5fb      	bpl.n	80030c6 <_printf_i+0x192>
 80030ce:	8019      	strh	r1, [r3, #0]
 80030d0:	2300      	movs	r3, #0
 80030d2:	4665      	mov	r5, ip
 80030d4:	6123      	str	r3, [r4, #16]
 80030d6:	e7b9      	b.n	800304c <_printf_i+0x118>
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	1d19      	adds	r1, r3, #4
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	681d      	ldr	r5, [r3, #0]
 80030e0:	6862      	ldr	r2, [r4, #4]
 80030e2:	2100      	movs	r1, #0
 80030e4:	4628      	mov	r0, r5
 80030e6:	f001 f9ab 	bl	8004440 <memchr>
 80030ea:	b108      	cbz	r0, 80030f0 <_printf_i+0x1bc>
 80030ec:	1b40      	subs	r0, r0, r5
 80030ee:	6060      	str	r0, [r4, #4]
 80030f0:	6863      	ldr	r3, [r4, #4]
 80030f2:	6123      	str	r3, [r4, #16]
 80030f4:	2300      	movs	r3, #0
 80030f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030fa:	e7a7      	b.n	800304c <_printf_i+0x118>
 80030fc:	6923      	ldr	r3, [r4, #16]
 80030fe:	462a      	mov	r2, r5
 8003100:	4639      	mov	r1, r7
 8003102:	4630      	mov	r0, r6
 8003104:	47c0      	blx	r8
 8003106:	3001      	adds	r0, #1
 8003108:	d0aa      	beq.n	8003060 <_printf_i+0x12c>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	079b      	lsls	r3, r3, #30
 800310e:	d413      	bmi.n	8003138 <_printf_i+0x204>
 8003110:	68e0      	ldr	r0, [r4, #12]
 8003112:	9b03      	ldr	r3, [sp, #12]
 8003114:	4298      	cmp	r0, r3
 8003116:	bfb8      	it	lt
 8003118:	4618      	movlt	r0, r3
 800311a:	e7a3      	b.n	8003064 <_printf_i+0x130>
 800311c:	2301      	movs	r3, #1
 800311e:	464a      	mov	r2, r9
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	47c0      	blx	r8
 8003126:	3001      	adds	r0, #1
 8003128:	d09a      	beq.n	8003060 <_printf_i+0x12c>
 800312a:	3501      	adds	r5, #1
 800312c:	68e3      	ldr	r3, [r4, #12]
 800312e:	9a03      	ldr	r2, [sp, #12]
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	42ab      	cmp	r3, r5
 8003134:	dcf2      	bgt.n	800311c <_printf_i+0x1e8>
 8003136:	e7eb      	b.n	8003110 <_printf_i+0x1dc>
 8003138:	2500      	movs	r5, #0
 800313a:	f104 0919 	add.w	r9, r4, #25
 800313e:	e7f5      	b.n	800312c <_printf_i+0x1f8>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ac      	bne.n	800309e <_printf_i+0x16a>
 8003144:	7803      	ldrb	r3, [r0, #0]
 8003146:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800314a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800314e:	e76c      	b.n	800302a <_printf_i+0xf6>
 8003150:	08005de2 	.word	0x08005de2
 8003154:	08005df3 	.word	0x08005df3

08003158 <iprintf>:
 8003158:	b40f      	push	{r0, r1, r2, r3}
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <iprintf+0x2c>)
 800315c:	b513      	push	{r0, r1, r4, lr}
 800315e:	681c      	ldr	r4, [r3, #0]
 8003160:	b124      	cbz	r4, 800316c <iprintf+0x14>
 8003162:	69a3      	ldr	r3, [r4, #24]
 8003164:	b913      	cbnz	r3, 800316c <iprintf+0x14>
 8003166:	4620      	mov	r0, r4
 8003168:	f001 f866 	bl	8004238 <__sinit>
 800316c:	ab05      	add	r3, sp, #20
 800316e:	9a04      	ldr	r2, [sp, #16]
 8003170:	68a1      	ldr	r1, [r4, #8]
 8003172:	4620      	mov	r0, r4
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	f001 fd29 	bl	8004bcc <_vfiprintf_r>
 800317a:	b002      	add	sp, #8
 800317c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003180:	b004      	add	sp, #16
 8003182:	4770      	bx	lr
 8003184:	20000014 	.word	0x20000014

08003188 <_puts_r>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	460e      	mov	r6, r1
 800318c:	4605      	mov	r5, r0
 800318e:	b118      	cbz	r0, 8003198 <_puts_r+0x10>
 8003190:	6983      	ldr	r3, [r0, #24]
 8003192:	b90b      	cbnz	r3, 8003198 <_puts_r+0x10>
 8003194:	f001 f850 	bl	8004238 <__sinit>
 8003198:	69ab      	ldr	r3, [r5, #24]
 800319a:	68ac      	ldr	r4, [r5, #8]
 800319c:	b913      	cbnz	r3, 80031a4 <_puts_r+0x1c>
 800319e:	4628      	mov	r0, r5
 80031a0:	f001 f84a 	bl	8004238 <__sinit>
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <_puts_r+0xac>)
 80031a6:	429c      	cmp	r4, r3
 80031a8:	d117      	bne.n	80031da <_puts_r+0x52>
 80031aa:	686c      	ldr	r4, [r5, #4]
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	071b      	lsls	r3, r3, #28
 80031b0:	d51d      	bpl.n	80031ee <_puts_r+0x66>
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	b1db      	cbz	r3, 80031ee <_puts_r+0x66>
 80031b6:	3e01      	subs	r6, #1
 80031b8:	68a3      	ldr	r3, [r4, #8]
 80031ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031be:	3b01      	subs	r3, #1
 80031c0:	60a3      	str	r3, [r4, #8]
 80031c2:	b9e9      	cbnz	r1, 8003200 <_puts_r+0x78>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da2e      	bge.n	8003226 <_puts_r+0x9e>
 80031c8:	4622      	mov	r2, r4
 80031ca:	210a      	movs	r1, #10
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 f83f 	bl	8003250 <__swbuf_r>
 80031d2:	3001      	adds	r0, #1
 80031d4:	d011      	beq.n	80031fa <_puts_r+0x72>
 80031d6:	200a      	movs	r0, #10
 80031d8:	e011      	b.n	80031fe <_puts_r+0x76>
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <_puts_r+0xb0>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	d101      	bne.n	80031e4 <_puts_r+0x5c>
 80031e0:	68ac      	ldr	r4, [r5, #8]
 80031e2:	e7e3      	b.n	80031ac <_puts_r+0x24>
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <_puts_r+0xb4>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	bf08      	it	eq
 80031ea:	68ec      	ldreq	r4, [r5, #12]
 80031ec:	e7de      	b.n	80031ac <_puts_r+0x24>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f87f 	bl	80032f4 <__swsetup_r>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d0dd      	beq.n	80031b6 <_puts_r+0x2e>
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	2b00      	cmp	r3, #0
 8003202:	da04      	bge.n	800320e <_puts_r+0x86>
 8003204:	69a2      	ldr	r2, [r4, #24]
 8003206:	429a      	cmp	r2, r3
 8003208:	dc06      	bgt.n	8003218 <_puts_r+0x90>
 800320a:	290a      	cmp	r1, #10
 800320c:	d004      	beq.n	8003218 <_puts_r+0x90>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	6022      	str	r2, [r4, #0]
 8003214:	7019      	strb	r1, [r3, #0]
 8003216:	e7cf      	b.n	80031b8 <_puts_r+0x30>
 8003218:	4622      	mov	r2, r4
 800321a:	4628      	mov	r0, r5
 800321c:	f000 f818 	bl	8003250 <__swbuf_r>
 8003220:	3001      	adds	r0, #1
 8003222:	d1c9      	bne.n	80031b8 <_puts_r+0x30>
 8003224:	e7e9      	b.n	80031fa <_puts_r+0x72>
 8003226:	200a      	movs	r0, #10
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	6022      	str	r2, [r4, #0]
 800322e:	7018      	strb	r0, [r3, #0]
 8003230:	e7e5      	b.n	80031fe <_puts_r+0x76>
 8003232:	bf00      	nop
 8003234:	08005e34 	.word	0x08005e34
 8003238:	08005e54 	.word	0x08005e54
 800323c:	08005e14 	.word	0x08005e14

08003240 <puts>:
 8003240:	4b02      	ldr	r3, [pc, #8]	; (800324c <puts+0xc>)
 8003242:	4601      	mov	r1, r0
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	f7ff bf9f 	b.w	8003188 <_puts_r>
 800324a:	bf00      	nop
 800324c:	20000014 	.word	0x20000014

08003250 <__swbuf_r>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	460e      	mov	r6, r1
 8003254:	4614      	mov	r4, r2
 8003256:	4605      	mov	r5, r0
 8003258:	b118      	cbz	r0, 8003262 <__swbuf_r+0x12>
 800325a:	6983      	ldr	r3, [r0, #24]
 800325c:	b90b      	cbnz	r3, 8003262 <__swbuf_r+0x12>
 800325e:	f000 ffeb 	bl	8004238 <__sinit>
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <__swbuf_r+0x98>)
 8003264:	429c      	cmp	r4, r3
 8003266:	d12a      	bne.n	80032be <__swbuf_r+0x6e>
 8003268:	686c      	ldr	r4, [r5, #4]
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	071a      	lsls	r2, r3, #28
 8003272:	d52e      	bpl.n	80032d2 <__swbuf_r+0x82>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	b363      	cbz	r3, 80032d2 <__swbuf_r+0x82>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	b2f6      	uxtb	r6, r6
 800327e:	1ac0      	subs	r0, r0, r3
 8003280:	6963      	ldr	r3, [r4, #20]
 8003282:	4637      	mov	r7, r6
 8003284:	4283      	cmp	r3, r0
 8003286:	dc04      	bgt.n	8003292 <__swbuf_r+0x42>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f000 ff6a 	bl	8004164 <_fflush_r>
 8003290:	bb28      	cbnz	r0, 80032de <__swbuf_r+0x8e>
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	3001      	adds	r0, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	60a3      	str	r3, [r4, #8]
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	6022      	str	r2, [r4, #0]
 80032a0:	701e      	strb	r6, [r3, #0]
 80032a2:	6963      	ldr	r3, [r4, #20]
 80032a4:	4283      	cmp	r3, r0
 80032a6:	d004      	beq.n	80032b2 <__swbuf_r+0x62>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	07db      	lsls	r3, r3, #31
 80032ac:	d519      	bpl.n	80032e2 <__swbuf_r+0x92>
 80032ae:	2e0a      	cmp	r6, #10
 80032b0:	d117      	bne.n	80032e2 <__swbuf_r+0x92>
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 ff55 	bl	8004164 <_fflush_r>
 80032ba:	b190      	cbz	r0, 80032e2 <__swbuf_r+0x92>
 80032bc:	e00f      	b.n	80032de <__swbuf_r+0x8e>
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <__swbuf_r+0x9c>)
 80032c0:	429c      	cmp	r4, r3
 80032c2:	d101      	bne.n	80032c8 <__swbuf_r+0x78>
 80032c4:	68ac      	ldr	r4, [r5, #8]
 80032c6:	e7d0      	b.n	800326a <__swbuf_r+0x1a>
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <__swbuf_r+0xa0>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	bf08      	it	eq
 80032ce:	68ec      	ldreq	r4, [r5, #12]
 80032d0:	e7cb      	b.n	800326a <__swbuf_r+0x1a>
 80032d2:	4621      	mov	r1, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	f000 f80d 	bl	80032f4 <__swsetup_r>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d0cc      	beq.n	8003278 <__swbuf_r+0x28>
 80032de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80032e2:	4638      	mov	r0, r7
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	08005e34 	.word	0x08005e34
 80032ec:	08005e54 	.word	0x08005e54
 80032f0:	08005e14 	.word	0x08005e14

080032f4 <__swsetup_r>:
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <__swsetup_r+0xcc>)
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	681d      	ldr	r5, [r3, #0]
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	b125      	cbz	r5, 800330a <__swsetup_r+0x16>
 8003300:	69ab      	ldr	r3, [r5, #24]
 8003302:	b913      	cbnz	r3, 800330a <__swsetup_r+0x16>
 8003304:	4628      	mov	r0, r5
 8003306:	f000 ff97 	bl	8004238 <__sinit>
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <__swsetup_r+0xd0>)
 800330c:	429c      	cmp	r4, r3
 800330e:	d10f      	bne.n	8003330 <__swsetup_r+0x3c>
 8003310:	686c      	ldr	r4, [r5, #4]
 8003312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003316:	b29a      	uxth	r2, r3
 8003318:	0715      	lsls	r5, r2, #28
 800331a:	d42c      	bmi.n	8003376 <__swsetup_r+0x82>
 800331c:	06d0      	lsls	r0, r2, #27
 800331e:	d411      	bmi.n	8003344 <__swsetup_r+0x50>
 8003320:	2209      	movs	r2, #9
 8003322:	6032      	str	r2, [r6, #0]
 8003324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003328:	81a3      	strh	r3, [r4, #12]
 800332a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332e:	e03e      	b.n	80033ae <__swsetup_r+0xba>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <__swsetup_r+0xd4>)
 8003332:	429c      	cmp	r4, r3
 8003334:	d101      	bne.n	800333a <__swsetup_r+0x46>
 8003336:	68ac      	ldr	r4, [r5, #8]
 8003338:	e7eb      	b.n	8003312 <__swsetup_r+0x1e>
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <__swsetup_r+0xd8>)
 800333c:	429c      	cmp	r4, r3
 800333e:	bf08      	it	eq
 8003340:	68ec      	ldreq	r4, [r5, #12]
 8003342:	e7e6      	b.n	8003312 <__swsetup_r+0x1e>
 8003344:	0751      	lsls	r1, r2, #29
 8003346:	d512      	bpl.n	800336e <__swsetup_r+0x7a>
 8003348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334a:	b141      	cbz	r1, 800335e <__swsetup_r+0x6a>
 800334c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__swsetup_r+0x66>
 8003354:	4630      	mov	r0, r6
 8003356:	f001 fb6b 	bl	8004a30 <_free_r>
 800335a:	2300      	movs	r3, #0
 800335c:	6363      	str	r3, [r4, #52]	; 0x34
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	b94b      	cbnz	r3, 800338e <__swsetup_r+0x9a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d003      	beq.n	800338e <__swsetup_r+0x9a>
 8003386:	4621      	mov	r1, r4
 8003388:	4630      	mov	r0, r6
 800338a:	f001 f811 	bl	80043b0 <__smakebuf_r>
 800338e:	89a2      	ldrh	r2, [r4, #12]
 8003390:	f012 0301 	ands.w	r3, r2, #1
 8003394:	d00c      	beq.n	80033b0 <__swsetup_r+0xbc>
 8003396:	2300      	movs	r3, #0
 8003398:	60a3      	str	r3, [r4, #8]
 800339a:	6963      	ldr	r3, [r4, #20]
 800339c:	425b      	negs	r3, r3
 800339e:	61a3      	str	r3, [r4, #24]
 80033a0:	6923      	ldr	r3, [r4, #16]
 80033a2:	b953      	cbnz	r3, 80033ba <__swsetup_r+0xc6>
 80033a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80033ac:	d1ba      	bne.n	8003324 <__swsetup_r+0x30>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	0792      	lsls	r2, r2, #30
 80033b2:	bf58      	it	pl
 80033b4:	6963      	ldrpl	r3, [r4, #20]
 80033b6:	60a3      	str	r3, [r4, #8]
 80033b8:	e7f2      	b.n	80033a0 <__swsetup_r+0xac>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e7f7      	b.n	80033ae <__swsetup_r+0xba>
 80033be:	bf00      	nop
 80033c0:	20000014 	.word	0x20000014
 80033c4:	08005e34 	.word	0x08005e34
 80033c8:	08005e54 	.word	0x08005e54
 80033cc:	08005e14 	.word	0x08005e14

080033d0 <quorem>:
 80033d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d4:	6903      	ldr	r3, [r0, #16]
 80033d6:	690c      	ldr	r4, [r1, #16]
 80033d8:	4680      	mov	r8, r0
 80033da:	42a3      	cmp	r3, r4
 80033dc:	f2c0 8084 	blt.w	80034e8 <quorem+0x118>
 80033e0:	3c01      	subs	r4, #1
 80033e2:	f101 0714 	add.w	r7, r1, #20
 80033e6:	f100 0614 	add.w	r6, r0, #20
 80033ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80033ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80033f2:	3501      	adds	r5, #1
 80033f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80033f8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80033fc:	eb06 030c 	add.w	r3, r6, ip
 8003400:	eb07 090c 	add.w	r9, r7, ip
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	b39d      	cbz	r5, 8003470 <quorem+0xa0>
 8003408:	f04f 0a00 	mov.w	sl, #0
 800340c:	4638      	mov	r0, r7
 800340e:	46b6      	mov	lr, r6
 8003410:	46d3      	mov	fp, sl
 8003412:	f850 2b04 	ldr.w	r2, [r0], #4
 8003416:	b293      	uxth	r3, r2
 8003418:	fb05 a303 	mla	r3, r5, r3, sl
 800341c:	0c12      	lsrs	r2, r2, #16
 800341e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003422:	fb05 a202 	mla	r2, r5, r2, sl
 8003426:	b29b      	uxth	r3, r3
 8003428:	ebab 0303 	sub.w	r3, fp, r3
 800342c:	f8de b000 	ldr.w	fp, [lr]
 8003430:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003434:	fa1f fb8b 	uxth.w	fp, fp
 8003438:	445b      	add	r3, fp
 800343a:	fa1f fb82 	uxth.w	fp, r2
 800343e:	f8de 2000 	ldr.w	r2, [lr]
 8003442:	4581      	cmp	r9, r0
 8003444:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800344c:	b29b      	uxth	r3, r3
 800344e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003452:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003456:	f84e 3b04 	str.w	r3, [lr], #4
 800345a:	d2da      	bcs.n	8003412 <quorem+0x42>
 800345c:	f856 300c 	ldr.w	r3, [r6, ip]
 8003460:	b933      	cbnz	r3, 8003470 <quorem+0xa0>
 8003462:	9b01      	ldr	r3, [sp, #4]
 8003464:	3b04      	subs	r3, #4
 8003466:	429e      	cmp	r6, r3
 8003468:	461a      	mov	r2, r3
 800346a:	d331      	bcc.n	80034d0 <quorem+0x100>
 800346c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003470:	4640      	mov	r0, r8
 8003472:	f001 fa07 	bl	8004884 <__mcmp>
 8003476:	2800      	cmp	r0, #0
 8003478:	db26      	blt.n	80034c8 <quorem+0xf8>
 800347a:	4630      	mov	r0, r6
 800347c:	f04f 0c00 	mov.w	ip, #0
 8003480:	3501      	adds	r5, #1
 8003482:	f857 1b04 	ldr.w	r1, [r7], #4
 8003486:	f8d0 e000 	ldr.w	lr, [r0]
 800348a:	b28b      	uxth	r3, r1
 800348c:	ebac 0303 	sub.w	r3, ip, r3
 8003490:	fa1f f28e 	uxth.w	r2, lr
 8003494:	4413      	add	r3, r2
 8003496:	0c0a      	lsrs	r2, r1, #16
 8003498:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800349c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034a6:	45b9      	cmp	r9, r7
 80034a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80034ac:	f840 3b04 	str.w	r3, [r0], #4
 80034b0:	d2e7      	bcs.n	8003482 <quorem+0xb2>
 80034b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80034b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80034ba:	b92a      	cbnz	r2, 80034c8 <quorem+0xf8>
 80034bc:	3b04      	subs	r3, #4
 80034be:	429e      	cmp	r6, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	d30b      	bcc.n	80034dc <quorem+0x10c>
 80034c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80034c8:	4628      	mov	r0, r5
 80034ca:	b003      	add	sp, #12
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d1c9      	bne.n	800346c <quorem+0x9c>
 80034d8:	3c01      	subs	r4, #1
 80034da:	e7c4      	b.n	8003466 <quorem+0x96>
 80034dc:	6812      	ldr	r2, [r2, #0]
 80034de:	3b04      	subs	r3, #4
 80034e0:	2a00      	cmp	r2, #0
 80034e2:	d1ef      	bne.n	80034c4 <quorem+0xf4>
 80034e4:	3c01      	subs	r4, #1
 80034e6:	e7ea      	b.n	80034be <quorem+0xee>
 80034e8:	2000      	movs	r0, #0
 80034ea:	e7ee      	b.n	80034ca <quorem+0xfa>
 80034ec:	0000      	movs	r0, r0
	...

080034f0 <_dtoa_r>:
 80034f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f4:	4616      	mov	r6, r2
 80034f6:	461f      	mov	r7, r3
 80034f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80034fa:	b095      	sub	sp, #84	; 0x54
 80034fc:	4604      	mov	r4, r0
 80034fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003502:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003506:	b93d      	cbnz	r5, 8003518 <_dtoa_r+0x28>
 8003508:	2010      	movs	r0, #16
 800350a:	f000 ff91 	bl	8004430 <malloc>
 800350e:	6260      	str	r0, [r4, #36]	; 0x24
 8003510:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003514:	6005      	str	r5, [r0, #0]
 8003516:	60c5      	str	r5, [r0, #12]
 8003518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	b151      	cbz	r1, 8003534 <_dtoa_r+0x44>
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	2301      	movs	r3, #1
 8003522:	4093      	lsls	r3, r2
 8003524:	604a      	str	r2, [r1, #4]
 8003526:	608b      	str	r3, [r1, #8]
 8003528:	4620      	mov	r0, r4
 800352a:	f000 ffcb 	bl	80044c4 <_Bfree>
 800352e:	2200      	movs	r2, #0
 8003530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	1e3b      	subs	r3, r7, #0
 8003536:	bfaf      	iteee	ge
 8003538:	2300      	movge	r3, #0
 800353a:	2201      	movlt	r2, #1
 800353c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003540:	9303      	strlt	r3, [sp, #12]
 8003542:	bfac      	ite	ge
 8003544:	f8c8 3000 	strge.w	r3, [r8]
 8003548:	f8c8 2000 	strlt.w	r2, [r8]
 800354c:	4bae      	ldr	r3, [pc, #696]	; (8003808 <_dtoa_r+0x318>)
 800354e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003552:	ea33 0308 	bics.w	r3, r3, r8
 8003556:	d11b      	bne.n	8003590 <_dtoa_r+0xa0>
 8003558:	f242 730f 	movw	r3, #9999	; 0x270f
 800355c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	9b02      	ldr	r3, [sp, #8]
 8003562:	b923      	cbnz	r3, 800356e <_dtoa_r+0x7e>
 8003564:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003568:	2800      	cmp	r0, #0
 800356a:	f000 8545 	beq.w	8003ff8 <_dtoa_r+0xb08>
 800356e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003570:	b953      	cbnz	r3, 8003588 <_dtoa_r+0x98>
 8003572:	4ba6      	ldr	r3, [pc, #664]	; (800380c <_dtoa_r+0x31c>)
 8003574:	e021      	b.n	80035ba <_dtoa_r+0xca>
 8003576:	4ba6      	ldr	r3, [pc, #664]	; (8003810 <_dtoa_r+0x320>)
 8003578:	9306      	str	r3, [sp, #24]
 800357a:	3308      	adds	r3, #8
 800357c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	9806      	ldr	r0, [sp, #24]
 8003582:	b015      	add	sp, #84	; 0x54
 8003584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003588:	4ba0      	ldr	r3, [pc, #640]	; (800380c <_dtoa_r+0x31c>)
 800358a:	9306      	str	r3, [sp, #24]
 800358c:	3303      	adds	r3, #3
 800358e:	e7f5      	b.n	800357c <_dtoa_r+0x8c>
 8003590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	2300      	movs	r3, #0
 8003598:	4630      	mov	r0, r6
 800359a:	4639      	mov	r1, r7
 800359c:	f7fd fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80035a0:	4682      	mov	sl, r0
 80035a2:	b160      	cbz	r0, 80035be <_dtoa_r+0xce>
 80035a4:	2301      	movs	r3, #1
 80035a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 8520 	beq.w	8003ff2 <_dtoa_r+0xb02>
 80035b2:	4b98      	ldr	r3, [pc, #608]	; (8003814 <_dtoa_r+0x324>)
 80035b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	9306      	str	r3, [sp, #24]
 80035bc:	e7e0      	b.n	8003580 <_dtoa_r+0x90>
 80035be:	ab12      	add	r3, sp, #72	; 0x48
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	ab13      	add	r3, sp, #76	; 0x4c
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4632      	mov	r2, r6
 80035c8:	463b      	mov	r3, r7
 80035ca:	4620      	mov	r0, r4
 80035cc:	f001 f9d2 	bl	8004974 <__d2b>
 80035d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80035d4:	4683      	mov	fp, r0
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d07d      	beq.n	80036d6 <_dtoa_r+0x1e6>
 80035da:	46b0      	mov	r8, r6
 80035dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80035e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80035e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80035e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80035ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80035f0:	2200      	movs	r2, #0
 80035f2:	4b89      	ldr	r3, [pc, #548]	; (8003818 <_dtoa_r+0x328>)
 80035f4:	4640      	mov	r0, r8
 80035f6:	4649      	mov	r1, r9
 80035f8:	f7fc fdb6 	bl	8000168 <__aeabi_dsub>
 80035fc:	a37c      	add	r3, pc, #496	; (adr r3, 80037f0 <_dtoa_r+0x300>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc ff69 	bl	80004d8 <__aeabi_dmul>
 8003606:	a37c      	add	r3, pc, #496	; (adr r3, 80037f8 <_dtoa_r+0x308>)
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f7fc fdae 	bl	800016c <__adddf3>
 8003610:	4606      	mov	r6, r0
 8003612:	4628      	mov	r0, r5
 8003614:	460f      	mov	r7, r1
 8003616:	f7fc fef5 	bl	8000404 <__aeabi_i2d>
 800361a:	a379      	add	r3, pc, #484	; (adr r3, 8003800 <_dtoa_r+0x310>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ff5a 	bl	80004d8 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4630      	mov	r0, r6
 800362a:	4639      	mov	r1, r7
 800362c:	f7fc fd9e 	bl	800016c <__adddf3>
 8003630:	4606      	mov	r6, r0
 8003632:	460f      	mov	r7, r1
 8003634:	f7fd fa00 	bl	8000a38 <__aeabi_d2iz>
 8003638:	2200      	movs	r2, #0
 800363a:	4682      	mov	sl, r0
 800363c:	2300      	movs	r3, #0
 800363e:	4630      	mov	r0, r6
 8003640:	4639      	mov	r1, r7
 8003642:	f7fd f9bb 	bl	80009bc <__aeabi_dcmplt>
 8003646:	b148      	cbz	r0, 800365c <_dtoa_r+0x16c>
 8003648:	4650      	mov	r0, sl
 800364a:	f7fc fedb 	bl	8000404 <__aeabi_i2d>
 800364e:	4632      	mov	r2, r6
 8003650:	463b      	mov	r3, r7
 8003652:	f7fd f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 8003656:	b908      	cbnz	r0, 800365c <_dtoa_r+0x16c>
 8003658:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800365c:	f1ba 0f16 	cmp.w	sl, #22
 8003660:	d85a      	bhi.n	8003718 <_dtoa_r+0x228>
 8003662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003666:	496d      	ldr	r1, [pc, #436]	; (800381c <_dtoa_r+0x32c>)
 8003668:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800366c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003670:	f7fd f9c2 	bl	80009f8 <__aeabi_dcmpgt>
 8003674:	2800      	cmp	r0, #0
 8003676:	d051      	beq.n	800371c <_dtoa_r+0x22c>
 8003678:	2300      	movs	r3, #0
 800367a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800367e:	930d      	str	r3, [sp, #52]	; 0x34
 8003680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003682:	1b5d      	subs	r5, r3, r5
 8003684:	1e6b      	subs	r3, r5, #1
 8003686:	9307      	str	r3, [sp, #28]
 8003688:	bf43      	ittte	mi
 800368a:	2300      	movmi	r3, #0
 800368c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003690:	9307      	strmi	r3, [sp, #28]
 8003692:	f04f 0900 	movpl.w	r9, #0
 8003696:	f1ba 0f00 	cmp.w	sl, #0
 800369a:	db41      	blt.n	8003720 <_dtoa_r+0x230>
 800369c:	9b07      	ldr	r3, [sp, #28]
 800369e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80036a2:	4453      	add	r3, sl
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9308      	str	r3, [sp, #32]
 80036aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	f200 808f 	bhi.w	80037d0 <_dtoa_r+0x2e0>
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	bfc4      	itt	gt
 80036b6:	3b04      	subgt	r3, #4
 80036b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80036ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80036bc:	bfc8      	it	gt
 80036be:	2500      	movgt	r5, #0
 80036c0:	f1a3 0302 	sub.w	r3, r3, #2
 80036c4:	bfd8      	it	le
 80036c6:	2501      	movle	r5, #1
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	f200 808d 	bhi.w	80037e8 <_dtoa_r+0x2f8>
 80036ce:	e8df f003 	tbb	[pc, r3]
 80036d2:	7d7b      	.short	0x7d7b
 80036d4:	6f2f      	.short	0x6f2f
 80036d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80036da:	441d      	add	r5, r3
 80036dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80036e0:	2820      	cmp	r0, #32
 80036e2:	dd13      	ble.n	800370c <_dtoa_r+0x21c>
 80036e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80036e8:	9b02      	ldr	r3, [sp, #8]
 80036ea:	fa08 f800 	lsl.w	r8, r8, r0
 80036ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80036f2:	fa23 f000 	lsr.w	r0, r3, r0
 80036f6:	ea48 0000 	orr.w	r0, r8, r0
 80036fa:	f7fc fe73 	bl	80003e4 <__aeabi_ui2d>
 80036fe:	2301      	movs	r3, #1
 8003700:	4680      	mov	r8, r0
 8003702:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003706:	3d01      	subs	r5, #1
 8003708:	9310      	str	r3, [sp, #64]	; 0x40
 800370a:	e771      	b.n	80035f0 <_dtoa_r+0x100>
 800370c:	9b02      	ldr	r3, [sp, #8]
 800370e:	f1c0 0020 	rsb	r0, r0, #32
 8003712:	fa03 f000 	lsl.w	r0, r3, r0
 8003716:	e7f0      	b.n	80036fa <_dtoa_r+0x20a>
 8003718:	2301      	movs	r3, #1
 800371a:	e7b0      	b.n	800367e <_dtoa_r+0x18e>
 800371c:	900d      	str	r0, [sp, #52]	; 0x34
 800371e:	e7af      	b.n	8003680 <_dtoa_r+0x190>
 8003720:	f1ca 0300 	rsb	r3, sl, #0
 8003724:	9308      	str	r3, [sp, #32]
 8003726:	2300      	movs	r3, #0
 8003728:	eba9 090a 	sub.w	r9, r9, sl
 800372c:	930c      	str	r3, [sp, #48]	; 0x30
 800372e:	e7bc      	b.n	80036aa <_dtoa_r+0x1ba>
 8003730:	2301      	movs	r3, #1
 8003732:	9309      	str	r3, [sp, #36]	; 0x24
 8003734:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003736:	2b00      	cmp	r3, #0
 8003738:	dd74      	ble.n	8003824 <_dtoa_r+0x334>
 800373a:	4698      	mov	r8, r3
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	2200      	movs	r2, #0
 8003740:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003742:	6072      	str	r2, [r6, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	f102 0014 	add.w	r0, r2, #20
 800374a:	4298      	cmp	r0, r3
 800374c:	6871      	ldr	r1, [r6, #4]
 800374e:	d96e      	bls.n	800382e <_dtoa_r+0x33e>
 8003750:	4620      	mov	r0, r4
 8003752:	f000 fe83 	bl	800445c <_Balloc>
 8003756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003758:	6030      	str	r0, [r6, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b8 0f0e 	cmp.w	r8, #14
 8003760:	9306      	str	r3, [sp, #24]
 8003762:	f200 80ed 	bhi.w	8003940 <_dtoa_r+0x450>
 8003766:	2d00      	cmp	r5, #0
 8003768:	f000 80ea 	beq.w	8003940 <_dtoa_r+0x450>
 800376c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003770:	f1ba 0f00 	cmp.w	sl, #0
 8003774:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003778:	dd77      	ble.n	800386a <_dtoa_r+0x37a>
 800377a:	4a28      	ldr	r2, [pc, #160]	; (800381c <_dtoa_r+0x32c>)
 800377c:	f00a 030f 	and.w	r3, sl, #15
 8003780:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003784:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003788:	06f0      	lsls	r0, r6, #27
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003792:	d568      	bpl.n	8003866 <_dtoa_r+0x376>
 8003794:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <_dtoa_r+0x330>)
 800379a:	2503      	movs	r5, #3
 800379c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037a0:	f7fc ffc4 	bl	800072c <__aeabi_ddiv>
 80037a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037a8:	f006 060f 	and.w	r6, r6, #15
 80037ac:	4f1c      	ldr	r7, [pc, #112]	; (8003820 <_dtoa_r+0x330>)
 80037ae:	e04f      	b.n	8003850 <_dtoa_r+0x360>
 80037b0:	2301      	movs	r3, #1
 80037b2:	9309      	str	r3, [sp, #36]	; 0x24
 80037b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80037b6:	4453      	add	r3, sl
 80037b8:	f103 0801 	add.w	r8, r3, #1
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	4643      	mov	r3, r8
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	bfb8      	it	lt
 80037c4:	2301      	movlt	r3, #1
 80037c6:	e7ba      	b.n	800373e <_dtoa_r+0x24e>
 80037c8:	2300      	movs	r3, #0
 80037ca:	e7b2      	b.n	8003732 <_dtoa_r+0x242>
 80037cc:	2300      	movs	r3, #0
 80037ce:	e7f0      	b.n	80037b2 <_dtoa_r+0x2c2>
 80037d0:	2501      	movs	r5, #1
 80037d2:	2300      	movs	r3, #0
 80037d4:	9509      	str	r5, [sp, #36]	; 0x24
 80037d6:	931e      	str	r3, [sp, #120]	; 0x78
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037dc:	2200      	movs	r2, #0
 80037de:	9304      	str	r3, [sp, #16]
 80037e0:	4698      	mov	r8, r3
 80037e2:	2312      	movs	r3, #18
 80037e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80037e6:	e7aa      	b.n	800373e <_dtoa_r+0x24e>
 80037e8:	2301      	movs	r3, #1
 80037ea:	9309      	str	r3, [sp, #36]	; 0x24
 80037ec:	e7f4      	b.n	80037d8 <_dtoa_r+0x2e8>
 80037ee:	bf00      	nop
 80037f0:	636f4361 	.word	0x636f4361
 80037f4:	3fd287a7 	.word	0x3fd287a7
 80037f8:	8b60c8b3 	.word	0x8b60c8b3
 80037fc:	3fc68a28 	.word	0x3fc68a28
 8003800:	509f79fb 	.word	0x509f79fb
 8003804:	3fd34413 	.word	0x3fd34413
 8003808:	7ff00000 	.word	0x7ff00000
 800380c:	08005e0d 	.word	0x08005e0d
 8003810:	08005e04 	.word	0x08005e04
 8003814:	08005de1 	.word	0x08005de1
 8003818:	3ff80000 	.word	0x3ff80000
 800381c:	08005ea0 	.word	0x08005ea0
 8003820:	08005e78 	.word	0x08005e78
 8003824:	2301      	movs	r3, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	4698      	mov	r8, r3
 800382a:	461a      	mov	r2, r3
 800382c:	e7da      	b.n	80037e4 <_dtoa_r+0x2f4>
 800382e:	3101      	adds	r1, #1
 8003830:	6071      	str	r1, [r6, #4]
 8003832:	0052      	lsls	r2, r2, #1
 8003834:	e787      	b.n	8003746 <_dtoa_r+0x256>
 8003836:	07f1      	lsls	r1, r6, #31
 8003838:	d508      	bpl.n	800384c <_dtoa_r+0x35c>
 800383a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800383e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003842:	f7fc fe49 	bl	80004d8 <__aeabi_dmul>
 8003846:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800384a:	3501      	adds	r5, #1
 800384c:	1076      	asrs	r6, r6, #1
 800384e:	3708      	adds	r7, #8
 8003850:	2e00      	cmp	r6, #0
 8003852:	d1f0      	bne.n	8003836 <_dtoa_r+0x346>
 8003854:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800385c:	f7fc ff66 	bl	800072c <__aeabi_ddiv>
 8003860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003864:	e01b      	b.n	800389e <_dtoa_r+0x3ae>
 8003866:	2502      	movs	r5, #2
 8003868:	e7a0      	b.n	80037ac <_dtoa_r+0x2bc>
 800386a:	f000 80a4 	beq.w	80039b6 <_dtoa_r+0x4c6>
 800386e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003872:	f1ca 0600 	rsb	r6, sl, #0
 8003876:	4ba0      	ldr	r3, [pc, #640]	; (8003af8 <_dtoa_r+0x608>)
 8003878:	f006 020f 	and.w	r2, r6, #15
 800387c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fe28 	bl	80004d8 <__aeabi_dmul>
 8003888:	2502      	movs	r5, #2
 800388a:	2300      	movs	r3, #0
 800388c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003890:	4f9a      	ldr	r7, [pc, #616]	; (8003afc <_dtoa_r+0x60c>)
 8003892:	1136      	asrs	r6, r6, #4
 8003894:	2e00      	cmp	r6, #0
 8003896:	f040 8083 	bne.w	80039a0 <_dtoa_r+0x4b0>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e0      	bne.n	8003860 <_dtoa_r+0x370>
 800389e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 808a 	beq.w	80039ba <_dtoa_r+0x4ca>
 80038a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80038ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038b2:	2200      	movs	r2, #0
 80038b4:	4b92      	ldr	r3, [pc, #584]	; (8003b00 <_dtoa_r+0x610>)
 80038b6:	f7fd f881 	bl	80009bc <__aeabi_dcmplt>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	d07d      	beq.n	80039ba <_dtoa_r+0x4ca>
 80038be:	f1b8 0f00 	cmp.w	r8, #0
 80038c2:	d07a      	beq.n	80039ba <_dtoa_r+0x4ca>
 80038c4:	9b04      	ldr	r3, [sp, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	dd36      	ble.n	8003938 <_dtoa_r+0x448>
 80038ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80038ce:	2200      	movs	r2, #0
 80038d0:	4b8c      	ldr	r3, [pc, #560]	; (8003b04 <_dtoa_r+0x614>)
 80038d2:	f7fc fe01 	bl	80004d8 <__aeabi_dmul>
 80038d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038da:	9e04      	ldr	r6, [sp, #16]
 80038dc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80038e0:	3501      	adds	r5, #1
 80038e2:	4628      	mov	r0, r5
 80038e4:	f7fc fd8e 	bl	8000404 <__aeabi_i2d>
 80038e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038ec:	f7fc fdf4 	bl	80004d8 <__aeabi_dmul>
 80038f0:	2200      	movs	r2, #0
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <_dtoa_r+0x618>)
 80038f4:	f7fc fc3a 	bl	800016c <__adddf3>
 80038f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80038fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003900:	950b      	str	r5, [sp, #44]	; 0x2c
 8003902:	2e00      	cmp	r6, #0
 8003904:	d15c      	bne.n	80039c0 <_dtoa_r+0x4d0>
 8003906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <_dtoa_r+0x61c>)
 800390e:	f7fc fc2b 	bl	8000168 <__aeabi_dsub>
 8003912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003914:	462b      	mov	r3, r5
 8003916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800391a:	f7fd f86d 	bl	80009f8 <__aeabi_dcmpgt>
 800391e:	2800      	cmp	r0, #0
 8003920:	f040 8281 	bne.w	8003e26 <_dtoa_r+0x936>
 8003924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800392a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800392e:	f7fd f845 	bl	80009bc <__aeabi_dcmplt>
 8003932:	2800      	cmp	r0, #0
 8003934:	f040 8275 	bne.w	8003e22 <_dtoa_r+0x932>
 8003938:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800393c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003942:	2b00      	cmp	r3, #0
 8003944:	f2c0 814b 	blt.w	8003bde <_dtoa_r+0x6ee>
 8003948:	f1ba 0f0e 	cmp.w	sl, #14
 800394c:	f300 8147 	bgt.w	8003bde <_dtoa_r+0x6ee>
 8003950:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <_dtoa_r+0x608>)
 8003952:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800395e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003960:	2b00      	cmp	r3, #0
 8003962:	f280 80d7 	bge.w	8003b14 <_dtoa_r+0x624>
 8003966:	f1b8 0f00 	cmp.w	r8, #0
 800396a:	f300 80d3 	bgt.w	8003b14 <_dtoa_r+0x624>
 800396e:	f040 8257 	bne.w	8003e20 <_dtoa_r+0x930>
 8003972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003976:	2200      	movs	r2, #0
 8003978:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <_dtoa_r+0x61c>)
 800397a:	f7fc fdad 	bl	80004d8 <__aeabi_dmul>
 800397e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003982:	f7fd f82f 	bl	80009e4 <__aeabi_dcmpge>
 8003986:	4646      	mov	r6, r8
 8003988:	4647      	mov	r7, r8
 800398a:	2800      	cmp	r0, #0
 800398c:	f040 822d 	bne.w	8003dea <_dtoa_r+0x8fa>
 8003990:	9b06      	ldr	r3, [sp, #24]
 8003992:	9a06      	ldr	r2, [sp, #24]
 8003994:	1c5d      	adds	r5, r3, #1
 8003996:	2331      	movs	r3, #49	; 0x31
 8003998:	f10a 0a01 	add.w	sl, sl, #1
 800399c:	7013      	strb	r3, [r2, #0]
 800399e:	e228      	b.n	8003df2 <_dtoa_r+0x902>
 80039a0:	07f2      	lsls	r2, r6, #31
 80039a2:	d505      	bpl.n	80039b0 <_dtoa_r+0x4c0>
 80039a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a8:	f7fc fd96 	bl	80004d8 <__aeabi_dmul>
 80039ac:	2301      	movs	r3, #1
 80039ae:	3501      	adds	r5, #1
 80039b0:	1076      	asrs	r6, r6, #1
 80039b2:	3708      	adds	r7, #8
 80039b4:	e76e      	b.n	8003894 <_dtoa_r+0x3a4>
 80039b6:	2502      	movs	r5, #2
 80039b8:	e771      	b.n	800389e <_dtoa_r+0x3ae>
 80039ba:	4657      	mov	r7, sl
 80039bc:	4646      	mov	r6, r8
 80039be:	e790      	b.n	80038e2 <_dtoa_r+0x3f2>
 80039c0:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <_dtoa_r+0x608>)
 80039c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80039c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80039ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d048      	beq.n	8003a62 <_dtoa_r+0x572>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	2000      	movs	r0, #0
 80039d6:	494e      	ldr	r1, [pc, #312]	; (8003b10 <_dtoa_r+0x620>)
 80039d8:	f7fc fea8 	bl	800072c <__aeabi_ddiv>
 80039dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039e0:	f7fc fbc2 	bl	8000168 <__aeabi_dsub>
 80039e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039e8:	9d06      	ldr	r5, [sp, #24]
 80039ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039ee:	f7fd f823 	bl	8000a38 <__aeabi_d2iz>
 80039f2:	9011      	str	r0, [sp, #68]	; 0x44
 80039f4:	f7fc fd06 	bl	8000404 <__aeabi_i2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a00:	f7fc fbb2 	bl	8000168 <__aeabi_dsub>
 8003a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a0a:	3330      	adds	r3, #48	; 0x30
 8003a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8003a10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a14:	f7fc ffd2 	bl	80009bc <__aeabi_dcmplt>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d163      	bne.n	8003ae4 <_dtoa_r+0x5f4>
 8003a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a20:	2000      	movs	r0, #0
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <_dtoa_r+0x610>)
 8003a24:	f7fc fba0 	bl	8000168 <__aeabi_dsub>
 8003a28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a2c:	f7fc ffc6 	bl	80009bc <__aeabi_dcmplt>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	f040 80b5 	bne.w	8003ba0 <_dtoa_r+0x6b0>
 8003a36:	9b06      	ldr	r3, [sp, #24]
 8003a38:	1aeb      	subs	r3, r5, r3
 8003a3a:	429e      	cmp	r6, r3
 8003a3c:	f77f af7c 	ble.w	8003938 <_dtoa_r+0x448>
 8003a40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a44:	2200      	movs	r2, #0
 8003a46:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <_dtoa_r+0x614>)
 8003a48:	f7fc fd46 	bl	80004d8 <__aeabi_dmul>
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a56:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <_dtoa_r+0x614>)
 8003a58:	f7fc fd3e 	bl	80004d8 <__aeabi_dmul>
 8003a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a60:	e7c3      	b.n	80039ea <_dtoa_r+0x4fa>
 8003a62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a66:	f7fc fd37 	bl	80004d8 <__aeabi_dmul>
 8003a6a:	9b06      	ldr	r3, [sp, #24]
 8003a6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a70:	199d      	adds	r5, r3, r6
 8003a72:	461e      	mov	r6, r3
 8003a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a78:	f7fc ffde 	bl	8000a38 <__aeabi_d2iz>
 8003a7c:	9011      	str	r0, [sp, #68]	; 0x44
 8003a7e:	f7fc fcc1 	bl	8000404 <__aeabi_i2d>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a8a:	f7fc fb6d 	bl	8000168 <__aeabi_dsub>
 8003a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	f806 3b01 	strb.w	r3, [r6], #1
 8003a9a:	42ae      	cmp	r6, r5
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	d124      	bne.n	8003aec <_dtoa_r+0x5fc>
 8003aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <_dtoa_r+0x620>)
 8003aa8:	f7fc fb60 	bl	800016c <__adddf3>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ab4:	f7fc ffa0 	bl	80009f8 <__aeabi_dcmpgt>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d171      	bne.n	8003ba0 <_dtoa_r+0x6b0>
 8003abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4913      	ldr	r1, [pc, #76]	; (8003b10 <_dtoa_r+0x620>)
 8003ac4:	f7fc fb50 	bl	8000168 <__aeabi_dsub>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ad0:	f7fc ff74 	bl	80009bc <__aeabi_dcmplt>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f43f af2f 	beq.w	8003938 <_dtoa_r+0x448>
 8003ada:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ade:	1e6a      	subs	r2, r5, #1
 8003ae0:	2b30      	cmp	r3, #48	; 0x30
 8003ae2:	d001      	beq.n	8003ae8 <_dtoa_r+0x5f8>
 8003ae4:	46ba      	mov	sl, r7
 8003ae6:	e04a      	b.n	8003b7e <_dtoa_r+0x68e>
 8003ae8:	4615      	mov	r5, r2
 8003aea:	e7f6      	b.n	8003ada <_dtoa_r+0x5ea>
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <_dtoa_r+0x614>)
 8003aee:	f7fc fcf3 	bl	80004d8 <__aeabi_dmul>
 8003af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003af6:	e7bd      	b.n	8003a74 <_dtoa_r+0x584>
 8003af8:	08005ea0 	.word	0x08005ea0
 8003afc:	08005e78 	.word	0x08005e78
 8003b00:	3ff00000 	.word	0x3ff00000
 8003b04:	40240000 	.word	0x40240000
 8003b08:	401c0000 	.word	0x401c0000
 8003b0c:	40140000 	.word	0x40140000
 8003b10:	3fe00000 	.word	0x3fe00000
 8003b14:	9d06      	ldr	r5, [sp, #24]
 8003b16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b1e:	4630      	mov	r0, r6
 8003b20:	4639      	mov	r1, r7
 8003b22:	f7fc fe03 	bl	800072c <__aeabi_ddiv>
 8003b26:	f7fc ff87 	bl	8000a38 <__aeabi_d2iz>
 8003b2a:	4681      	mov	r9, r0
 8003b2c:	f7fc fc6a 	bl	8000404 <__aeabi_i2d>
 8003b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b34:	f7fc fcd0 	bl	80004d8 <__aeabi_dmul>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	4639      	mov	r1, r7
 8003b40:	f7fc fb12 	bl	8000168 <__aeabi_dsub>
 8003b44:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003b48:	f805 6b01 	strb.w	r6, [r5], #1
 8003b4c:	9e06      	ldr	r6, [sp, #24]
 8003b4e:	4602      	mov	r2, r0
 8003b50:	1bae      	subs	r6, r5, r6
 8003b52:	45b0      	cmp	r8, r6
 8003b54:	460b      	mov	r3, r1
 8003b56:	d135      	bne.n	8003bc4 <_dtoa_r+0x6d4>
 8003b58:	f7fc fb08 	bl	800016c <__adddf3>
 8003b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b60:	4606      	mov	r6, r0
 8003b62:	460f      	mov	r7, r1
 8003b64:	f7fc ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8003b68:	b9c8      	cbnz	r0, 8003b9e <_dtoa_r+0x6ae>
 8003b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b6e:	4630      	mov	r0, r6
 8003b70:	4639      	mov	r1, r7
 8003b72:	f7fc ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8003b76:	b110      	cbz	r0, 8003b7e <_dtoa_r+0x68e>
 8003b78:	f019 0f01 	tst.w	r9, #1
 8003b7c:	d10f      	bne.n	8003b9e <_dtoa_r+0x6ae>
 8003b7e:	4659      	mov	r1, fp
 8003b80:	4620      	mov	r0, r4
 8003b82:	f000 fc9f 	bl	80044c4 <_Bfree>
 8003b86:	2300      	movs	r3, #0
 8003b88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b8a:	702b      	strb	r3, [r5, #0]
 8003b8c:	f10a 0301 	add.w	r3, sl, #1
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f43f acf3 	beq.w	8003580 <_dtoa_r+0x90>
 8003b9a:	601d      	str	r5, [r3, #0]
 8003b9c:	e4f0      	b.n	8003580 <_dtoa_r+0x90>
 8003b9e:	4657      	mov	r7, sl
 8003ba0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003ba4:	1e6b      	subs	r3, r5, #1
 8003ba6:	2a39      	cmp	r2, #57	; 0x39
 8003ba8:	d106      	bne.n	8003bb8 <_dtoa_r+0x6c8>
 8003baa:	9a06      	ldr	r2, [sp, #24]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <_dtoa_r+0x6d0>
 8003bb0:	2330      	movs	r3, #48	; 0x30
 8003bb2:	7013      	strb	r3, [r2, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	3701      	adds	r7, #1
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	3201      	adds	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	e791      	b.n	8003ae4 <_dtoa_r+0x5f4>
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	e7ed      	b.n	8003ba0 <_dtoa_r+0x6b0>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4b99      	ldr	r3, [pc, #612]	; (8003e2c <_dtoa_r+0x93c>)
 8003bc8:	f7fc fc86 	bl	80004d8 <__aeabi_dmul>
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	f7fc fee8 	bl	80009a8 <__aeabi_dcmpeq>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d09e      	beq.n	8003b1a <_dtoa_r+0x62a>
 8003bdc:	e7cf      	b.n	8003b7e <_dtoa_r+0x68e>
 8003bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003be0:	2a00      	cmp	r2, #0
 8003be2:	f000 8088 	beq.w	8003cf6 <_dtoa_r+0x806>
 8003be6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003be8:	2a01      	cmp	r2, #1
 8003bea:	dc6d      	bgt.n	8003cc8 <_dtoa_r+0x7d8>
 8003bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d066      	beq.n	8003cc0 <_dtoa_r+0x7d0>
 8003bf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003bf6:	464d      	mov	r5, r9
 8003bf8:	9e08      	ldr	r6, [sp, #32]
 8003bfa:	9a07      	ldr	r2, [sp, #28]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	441a      	add	r2, r3
 8003c00:	4620      	mov	r0, r4
 8003c02:	4499      	add	r9, r3
 8003c04:	9207      	str	r2, [sp, #28]
 8003c06:	f000 fcfd 	bl	8004604 <__i2b>
 8003c0a:	4607      	mov	r7, r0
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	dd0b      	ble.n	8003c28 <_dtoa_r+0x738>
 8003c10:	9b07      	ldr	r3, [sp, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	dd08      	ble.n	8003c28 <_dtoa_r+0x738>
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	bfa8      	it	ge
 8003c1a:	462b      	movge	r3, r5
 8003c1c:	9a07      	ldr	r2, [sp, #28]
 8003c1e:	eba9 0903 	sub.w	r9, r9, r3
 8003c22:	1aed      	subs	r5, r5, r3
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	9b08      	ldr	r3, [sp, #32]
 8003c2a:	b1eb      	cbz	r3, 8003c68 <_dtoa_r+0x778>
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d065      	beq.n	8003cfe <_dtoa_r+0x80e>
 8003c32:	b18e      	cbz	r6, 8003c58 <_dtoa_r+0x768>
 8003c34:	4639      	mov	r1, r7
 8003c36:	4632      	mov	r2, r6
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f000 fd81 	bl	8004740 <__pow5mult>
 8003c3e:	465a      	mov	r2, fp
 8003c40:	4601      	mov	r1, r0
 8003c42:	4607      	mov	r7, r0
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 fce6 	bl	8004616 <__multiply>
 8003c4a:	4659      	mov	r1, fp
 8003c4c:	900a      	str	r0, [sp, #40]	; 0x28
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 fc38 	bl	80044c4 <_Bfree>
 8003c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c56:	469b      	mov	fp, r3
 8003c58:	9b08      	ldr	r3, [sp, #32]
 8003c5a:	1b9a      	subs	r2, r3, r6
 8003c5c:	d004      	beq.n	8003c68 <_dtoa_r+0x778>
 8003c5e:	4659      	mov	r1, fp
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 fd6d 	bl	8004740 <__pow5mult>
 8003c66:	4683      	mov	fp, r0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 fcca 	bl	8004604 <__i2b>
 8003c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c72:	4606      	mov	r6, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 81c6 	beq.w	8004006 <_dtoa_r+0xb16>
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 fd5e 	bl	8004740 <__pow5mult>
 8003c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c86:	4606      	mov	r6, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	dc3e      	bgt.n	8003d0a <_dtoa_r+0x81a>
 8003c8c:	9b02      	ldr	r3, [sp, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d137      	bne.n	8003d02 <_dtoa_r+0x812>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d134      	bne.n	8003d06 <_dtoa_r+0x816>
 8003c9c:	9b03      	ldr	r3, [sp, #12]
 8003c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca2:	0d1b      	lsrs	r3, r3, #20
 8003ca4:	051b      	lsls	r3, r3, #20
 8003ca6:	b12b      	cbz	r3, 8003cb4 <_dtoa_r+0x7c4>
 8003ca8:	9b07      	ldr	r3, [sp, #28]
 8003caa:	f109 0901 	add.w	r9, r9, #1
 8003cae:	3301      	adds	r3, #1
 8003cb0:	9307      	str	r3, [sp, #28]
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	9308      	str	r3, [sp, #32]
 8003cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d128      	bne.n	8003d0e <_dtoa_r+0x81e>
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	e02e      	b.n	8003d1e <_dtoa_r+0x82e>
 8003cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cc2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003cc6:	e796      	b.n	8003bf6 <_dtoa_r+0x706>
 8003cc8:	9b08      	ldr	r3, [sp, #32]
 8003cca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8003cce:	42b3      	cmp	r3, r6
 8003cd0:	bfb7      	itett	lt
 8003cd2:	9b08      	ldrlt	r3, [sp, #32]
 8003cd4:	1b9e      	subge	r6, r3, r6
 8003cd6:	1af2      	sublt	r2, r6, r3
 8003cd8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003cda:	bfbf      	itttt	lt
 8003cdc:	9608      	strlt	r6, [sp, #32]
 8003cde:	189b      	addlt	r3, r3, r2
 8003ce0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003ce2:	2600      	movlt	r6, #0
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	bfb9      	ittee	lt
 8003cea:	eba9 0508 	sublt.w	r5, r9, r8
 8003cee:	2300      	movlt	r3, #0
 8003cf0:	464d      	movge	r5, r9
 8003cf2:	4643      	movge	r3, r8
 8003cf4:	e781      	b.n	8003bfa <_dtoa_r+0x70a>
 8003cf6:	9e08      	ldr	r6, [sp, #32]
 8003cf8:	464d      	mov	r5, r9
 8003cfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003cfc:	e786      	b.n	8003c0c <_dtoa_r+0x71c>
 8003cfe:	9a08      	ldr	r2, [sp, #32]
 8003d00:	e7ad      	b.n	8003c5e <_dtoa_r+0x76e>
 8003d02:	2300      	movs	r3, #0
 8003d04:	e7d6      	b.n	8003cb4 <_dtoa_r+0x7c4>
 8003d06:	9b02      	ldr	r3, [sp, #8]
 8003d08:	e7d4      	b.n	8003cb4 <_dtoa_r+0x7c4>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9308      	str	r3, [sp, #32]
 8003d0e:	6933      	ldr	r3, [r6, #16]
 8003d10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d14:	6918      	ldr	r0, [r3, #16]
 8003d16:	f000 fc27 	bl	8004568 <__hi0bits>
 8003d1a:	f1c0 0020 	rsb	r0, r0, #32
 8003d1e:	9b07      	ldr	r3, [sp, #28]
 8003d20:	4418      	add	r0, r3
 8003d22:	f010 001f 	ands.w	r0, r0, #31
 8003d26:	d047      	beq.n	8003db8 <_dtoa_r+0x8c8>
 8003d28:	f1c0 0320 	rsb	r3, r0, #32
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	dd3b      	ble.n	8003da8 <_dtoa_r+0x8b8>
 8003d30:	9b07      	ldr	r3, [sp, #28]
 8003d32:	f1c0 001c 	rsb	r0, r0, #28
 8003d36:	4481      	add	r9, r0
 8003d38:	4405      	add	r5, r0
 8003d3a:	4403      	add	r3, r0
 8003d3c:	9307      	str	r3, [sp, #28]
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	dd05      	ble.n	8003d50 <_dtoa_r+0x860>
 8003d44:	4659      	mov	r1, fp
 8003d46:	464a      	mov	r2, r9
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f000 fd47 	bl	80047dc <__lshift>
 8003d4e:	4683      	mov	fp, r0
 8003d50:	9b07      	ldr	r3, [sp, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	dd05      	ble.n	8003d62 <_dtoa_r+0x872>
 8003d56:	4631      	mov	r1, r6
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fd3e 	bl	80047dc <__lshift>
 8003d60:	4606      	mov	r6, r0
 8003d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d64:	b353      	cbz	r3, 8003dbc <_dtoa_r+0x8cc>
 8003d66:	4631      	mov	r1, r6
 8003d68:	4658      	mov	r0, fp
 8003d6a:	f000 fd8b 	bl	8004884 <__mcmp>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	da24      	bge.n	8003dbc <_dtoa_r+0x8cc>
 8003d72:	2300      	movs	r3, #0
 8003d74:	4659      	mov	r1, fp
 8003d76:	220a      	movs	r2, #10
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 fbba 	bl	80044f2 <__multadd>
 8003d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003d84:	4683      	mov	fp, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8144 	beq.w	8004014 <_dtoa_r+0xb24>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4639      	mov	r1, r7
 8003d90:	220a      	movs	r2, #10
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 fbad 	bl	80044f2 <__multadd>
 8003d98:	9b04      	ldr	r3, [sp, #16]
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	dc4d      	bgt.n	8003e3c <_dtoa_r+0x94c>
 8003da0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	dd4a      	ble.n	8003e3c <_dtoa_r+0x94c>
 8003da6:	e011      	b.n	8003dcc <_dtoa_r+0x8dc>
 8003da8:	d0c9      	beq.n	8003d3e <_dtoa_r+0x84e>
 8003daa:	9a07      	ldr	r2, [sp, #28]
 8003dac:	331c      	adds	r3, #28
 8003dae:	441a      	add	r2, r3
 8003db0:	4499      	add	r9, r3
 8003db2:	441d      	add	r5, r3
 8003db4:	4613      	mov	r3, r2
 8003db6:	e7c1      	b.n	8003d3c <_dtoa_r+0x84c>
 8003db8:	4603      	mov	r3, r0
 8003dba:	e7f6      	b.n	8003daa <_dtoa_r+0x8ba>
 8003dbc:	f1b8 0f00 	cmp.w	r8, #0
 8003dc0:	dc36      	bgt.n	8003e30 <_dtoa_r+0x940>
 8003dc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	dd33      	ble.n	8003e30 <_dtoa_r+0x940>
 8003dc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	b963      	cbnz	r3, 8003dea <_dtoa_r+0x8fa>
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	2205      	movs	r2, #5
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fb8c 	bl	80044f2 <__multadd>
 8003dda:	4601      	mov	r1, r0
 8003ddc:	4606      	mov	r6, r0
 8003dde:	4658      	mov	r0, fp
 8003de0:	f000 fd50 	bl	8004884 <__mcmp>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	f73f add3 	bgt.w	8003990 <_dtoa_r+0x4a0>
 8003dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003dec:	9d06      	ldr	r5, [sp, #24]
 8003dee:	ea6f 0a03 	mvn.w	sl, r3
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	4631      	mov	r1, r6
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 fb63 	bl	80044c4 <_Bfree>
 8003dfe:	2f00      	cmp	r7, #0
 8003e00:	f43f aebd 	beq.w	8003b7e <_dtoa_r+0x68e>
 8003e04:	f1b9 0f00 	cmp.w	r9, #0
 8003e08:	d005      	beq.n	8003e16 <_dtoa_r+0x926>
 8003e0a:	45b9      	cmp	r9, r7
 8003e0c:	d003      	beq.n	8003e16 <_dtoa_r+0x926>
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4620      	mov	r0, r4
 8003e12:	f000 fb57 	bl	80044c4 <_Bfree>
 8003e16:	4639      	mov	r1, r7
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 fb53 	bl	80044c4 <_Bfree>
 8003e1e:	e6ae      	b.n	8003b7e <_dtoa_r+0x68e>
 8003e20:	2600      	movs	r6, #0
 8003e22:	4637      	mov	r7, r6
 8003e24:	e7e1      	b.n	8003dea <_dtoa_r+0x8fa>
 8003e26:	46ba      	mov	sl, r7
 8003e28:	4637      	mov	r7, r6
 8003e2a:	e5b1      	b.n	8003990 <_dtoa_r+0x4a0>
 8003e2c:	40240000 	.word	0x40240000
 8003e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e32:	f8cd 8010 	str.w	r8, [sp, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80f3 	beq.w	8004022 <_dtoa_r+0xb32>
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	dd05      	ble.n	8003e4c <_dtoa_r+0x95c>
 8003e40:	4639      	mov	r1, r7
 8003e42:	462a      	mov	r2, r5
 8003e44:	4620      	mov	r0, r4
 8003e46:	f000 fcc9 	bl	80047dc <__lshift>
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	9b08      	ldr	r3, [sp, #32]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04c      	beq.n	8003eec <_dtoa_r+0x9fc>
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4620      	mov	r0, r4
 8003e56:	f000 fb01 	bl	800445c <_Balloc>
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	f107 010c 	add.w	r1, r7, #12
 8003e62:	3202      	adds	r2, #2
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	300c      	adds	r0, #12
 8003e68:	f7fe fd14 	bl	8002894 <memcpy>
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4629      	mov	r1, r5
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fcb3 	bl	80047dc <__lshift>
 8003e76:	46b9      	mov	r9, r7
 8003e78:	4607      	mov	r7, r0
 8003e7a:	9b06      	ldr	r3, [sp, #24]
 8003e7c:	9307      	str	r3, [sp, #28]
 8003e7e:	9b02      	ldr	r3, [sp, #8]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	9308      	str	r3, [sp, #32]
 8003e86:	4631      	mov	r1, r6
 8003e88:	4658      	mov	r0, fp
 8003e8a:	f7ff faa1 	bl	80033d0 <quorem>
 8003e8e:	4649      	mov	r1, r9
 8003e90:	4605      	mov	r5, r0
 8003e92:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003e96:	4658      	mov	r0, fp
 8003e98:	f000 fcf4 	bl	8004884 <__mcmp>
 8003e9c:	463a      	mov	r2, r7
 8003e9e:	9002      	str	r0, [sp, #8]
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 fd08 	bl	80048b8 <__mdiff>
 8003ea8:	68c3      	ldr	r3, [r0, #12]
 8003eaa:	4602      	mov	r2, r0
 8003eac:	bb03      	cbnz	r3, 8003ef0 <_dtoa_r+0xa00>
 8003eae:	4601      	mov	r1, r0
 8003eb0:	9009      	str	r0, [sp, #36]	; 0x24
 8003eb2:	4658      	mov	r0, fp
 8003eb4:	f000 fce6 	bl	8004884 <__mcmp>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec2:	f000 faff 	bl	80044c4 <_Bfree>
 8003ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec8:	b9a3      	cbnz	r3, 8003ef4 <_dtoa_r+0xa04>
 8003eca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ecc:	b992      	cbnz	r2, 8003ef4 <_dtoa_r+0xa04>
 8003ece:	9a08      	ldr	r2, [sp, #32]
 8003ed0:	b982      	cbnz	r2, 8003ef4 <_dtoa_r+0xa04>
 8003ed2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003ed6:	d029      	beq.n	8003f2c <_dtoa_r+0xa3c>
 8003ed8:	9b02      	ldr	r3, [sp, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	dd01      	ble.n	8003ee2 <_dtoa_r+0x9f2>
 8003ede:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003ee2:	9b07      	ldr	r3, [sp, #28]
 8003ee4:	1c5d      	adds	r5, r3, #1
 8003ee6:	f883 8000 	strb.w	r8, [r3]
 8003eea:	e784      	b.n	8003df6 <_dtoa_r+0x906>
 8003eec:	4638      	mov	r0, r7
 8003eee:	e7c2      	b.n	8003e76 <_dtoa_r+0x986>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e7e3      	b.n	8003ebc <_dtoa_r+0x9cc>
 8003ef4:	9a02      	ldr	r2, [sp, #8]
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	db04      	blt.n	8003f04 <_dtoa_r+0xa14>
 8003efa:	d123      	bne.n	8003f44 <_dtoa_r+0xa54>
 8003efc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003efe:	bb0a      	cbnz	r2, 8003f44 <_dtoa_r+0xa54>
 8003f00:	9a08      	ldr	r2, [sp, #32]
 8003f02:	b9fa      	cbnz	r2, 8003f44 <_dtoa_r+0xa54>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	ddec      	ble.n	8003ee2 <_dtoa_r+0x9f2>
 8003f08:	4659      	mov	r1, fp
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 fc65 	bl	80047dc <__lshift>
 8003f12:	4631      	mov	r1, r6
 8003f14:	4683      	mov	fp, r0
 8003f16:	f000 fcb5 	bl	8004884 <__mcmp>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	dc03      	bgt.n	8003f26 <_dtoa_r+0xa36>
 8003f1e:	d1e0      	bne.n	8003ee2 <_dtoa_r+0x9f2>
 8003f20:	f018 0f01 	tst.w	r8, #1
 8003f24:	d0dd      	beq.n	8003ee2 <_dtoa_r+0x9f2>
 8003f26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f2a:	d1d8      	bne.n	8003ede <_dtoa_r+0x9ee>
 8003f2c:	9b07      	ldr	r3, [sp, #28]
 8003f2e:	9a07      	ldr	r2, [sp, #28]
 8003f30:	1c5d      	adds	r5, r3, #1
 8003f32:	2339      	movs	r3, #57	; 0x39
 8003f34:	7013      	strb	r3, [r2, #0]
 8003f36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f3a:	1e6a      	subs	r2, r5, #1
 8003f3c:	2b39      	cmp	r3, #57	; 0x39
 8003f3e:	d04d      	beq.n	8003fdc <_dtoa_r+0xaec>
 8003f40:	3301      	adds	r3, #1
 8003f42:	e052      	b.n	8003fea <_dtoa_r+0xafa>
 8003f44:	9a07      	ldr	r2, [sp, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f102 0501 	add.w	r5, r2, #1
 8003f4c:	dd06      	ble.n	8003f5c <_dtoa_r+0xa6c>
 8003f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003f52:	d0eb      	beq.n	8003f2c <_dtoa_r+0xa3c>
 8003f54:	f108 0801 	add.w	r8, r8, #1
 8003f58:	9b07      	ldr	r3, [sp, #28]
 8003f5a:	e7c4      	b.n	8003ee6 <_dtoa_r+0x9f6>
 8003f5c:	9b06      	ldr	r3, [sp, #24]
 8003f5e:	9a04      	ldr	r2, [sp, #16]
 8003f60:	1aeb      	subs	r3, r5, r3
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003f68:	d021      	beq.n	8003fae <_dtoa_r+0xabe>
 8003f6a:	4659      	mov	r1, fp
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	220a      	movs	r2, #10
 8003f70:	4620      	mov	r0, r4
 8003f72:	f000 fabe 	bl	80044f2 <__multadd>
 8003f76:	45b9      	cmp	r9, r7
 8003f78:	4683      	mov	fp, r0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	f04f 020a 	mov.w	r2, #10
 8003f82:	4649      	mov	r1, r9
 8003f84:	4620      	mov	r0, r4
 8003f86:	d105      	bne.n	8003f94 <_dtoa_r+0xaa4>
 8003f88:	f000 fab3 	bl	80044f2 <__multadd>
 8003f8c:	4681      	mov	r9, r0
 8003f8e:	4607      	mov	r7, r0
 8003f90:	9507      	str	r5, [sp, #28]
 8003f92:	e778      	b.n	8003e86 <_dtoa_r+0x996>
 8003f94:	f000 faad 	bl	80044f2 <__multadd>
 8003f98:	4639      	mov	r1, r7
 8003f9a:	4681      	mov	r9, r0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	220a      	movs	r2, #10
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f000 faa6 	bl	80044f2 <__multadd>
 8003fa6:	4607      	mov	r7, r0
 8003fa8:	e7f2      	b.n	8003f90 <_dtoa_r+0xaa0>
 8003faa:	f04f 0900 	mov.w	r9, #0
 8003fae:	4659      	mov	r1, fp
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 fc12 	bl	80047dc <__lshift>
 8003fb8:	4631      	mov	r1, r6
 8003fba:	4683      	mov	fp, r0
 8003fbc:	f000 fc62 	bl	8004884 <__mcmp>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	dcb8      	bgt.n	8003f36 <_dtoa_r+0xa46>
 8003fc4:	d102      	bne.n	8003fcc <_dtoa_r+0xadc>
 8003fc6:	f018 0f01 	tst.w	r8, #1
 8003fca:	d1b4      	bne.n	8003f36 <_dtoa_r+0xa46>
 8003fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003fd0:	1e6a      	subs	r2, r5, #1
 8003fd2:	2b30      	cmp	r3, #48	; 0x30
 8003fd4:	f47f af0f 	bne.w	8003df6 <_dtoa_r+0x906>
 8003fd8:	4615      	mov	r5, r2
 8003fda:	e7f7      	b.n	8003fcc <_dtoa_r+0xadc>
 8003fdc:	9b06      	ldr	r3, [sp, #24]
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d105      	bne.n	8003fee <_dtoa_r+0xafe>
 8003fe2:	2331      	movs	r3, #49	; 0x31
 8003fe4:	9a06      	ldr	r2, [sp, #24]
 8003fe6:	f10a 0a01 	add.w	sl, sl, #1
 8003fea:	7013      	strb	r3, [r2, #0]
 8003fec:	e703      	b.n	8003df6 <_dtoa_r+0x906>
 8003fee:	4615      	mov	r5, r2
 8003ff0:	e7a1      	b.n	8003f36 <_dtoa_r+0xa46>
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <_dtoa_r+0xb60>)
 8003ff4:	f7ff bae1 	b.w	80035ba <_dtoa_r+0xca>
 8003ff8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f aabb 	bne.w	8003576 <_dtoa_r+0x86>
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <_dtoa_r+0xb64>)
 8004002:	f7ff bada 	b.w	80035ba <_dtoa_r+0xca>
 8004006:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004008:	2b01      	cmp	r3, #1
 800400a:	f77f ae3f 	ble.w	8003c8c <_dtoa_r+0x79c>
 800400e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004010:	9308      	str	r3, [sp, #32]
 8004012:	e653      	b.n	8003cbc <_dtoa_r+0x7cc>
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	dc03      	bgt.n	8004022 <_dtoa_r+0xb32>
 800401a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800401c:	2b02      	cmp	r3, #2
 800401e:	f73f aed5 	bgt.w	8003dcc <_dtoa_r+0x8dc>
 8004022:	9d06      	ldr	r5, [sp, #24]
 8004024:	4631      	mov	r1, r6
 8004026:	4658      	mov	r0, fp
 8004028:	f7ff f9d2 	bl	80033d0 <quorem>
 800402c:	9b06      	ldr	r3, [sp, #24]
 800402e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004032:	f805 8b01 	strb.w	r8, [r5], #1
 8004036:	9a04      	ldr	r2, [sp, #16]
 8004038:	1aeb      	subs	r3, r5, r3
 800403a:	429a      	cmp	r2, r3
 800403c:	ddb5      	ble.n	8003faa <_dtoa_r+0xaba>
 800403e:	4659      	mov	r1, fp
 8004040:	2300      	movs	r3, #0
 8004042:	220a      	movs	r2, #10
 8004044:	4620      	mov	r0, r4
 8004046:	f000 fa54 	bl	80044f2 <__multadd>
 800404a:	4683      	mov	fp, r0
 800404c:	e7ea      	b.n	8004024 <_dtoa_r+0xb34>
 800404e:	bf00      	nop
 8004050:	08005de0 	.word	0x08005de0
 8004054:	08005e04 	.word	0x08005e04

08004058 <__sflush_r>:
 8004058:	898a      	ldrh	r2, [r1, #12]
 800405a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405e:	4605      	mov	r5, r0
 8004060:	0710      	lsls	r0, r2, #28
 8004062:	460c      	mov	r4, r1
 8004064:	d458      	bmi.n	8004118 <__sflush_r+0xc0>
 8004066:	684b      	ldr	r3, [r1, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	dc05      	bgt.n	8004078 <__sflush_r+0x20>
 800406c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	dc02      	bgt.n	8004078 <__sflush_r+0x20>
 8004072:	2000      	movs	r0, #0
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800407a:	2e00      	cmp	r6, #0
 800407c:	d0f9      	beq.n	8004072 <__sflush_r+0x1a>
 800407e:	2300      	movs	r3, #0
 8004080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004084:	682f      	ldr	r7, [r5, #0]
 8004086:	6a21      	ldr	r1, [r4, #32]
 8004088:	602b      	str	r3, [r5, #0]
 800408a:	d032      	beq.n	80040f2 <__sflush_r+0x9a>
 800408c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	075a      	lsls	r2, r3, #29
 8004092:	d505      	bpl.n	80040a0 <__sflush_r+0x48>
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	1ac0      	subs	r0, r0, r3
 8004098:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409a:	b10b      	cbz	r3, 80040a0 <__sflush_r+0x48>
 800409c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800409e:	1ac0      	subs	r0, r0, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	4602      	mov	r2, r0
 80040a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040a6:	6a21      	ldr	r1, [r4, #32]
 80040a8:	4628      	mov	r0, r5
 80040aa:	47b0      	blx	r6
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	d106      	bne.n	80040c0 <__sflush_r+0x68>
 80040b2:	6829      	ldr	r1, [r5, #0]
 80040b4:	291d      	cmp	r1, #29
 80040b6:	d848      	bhi.n	800414a <__sflush_r+0xf2>
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <__sflush_r+0x108>)
 80040ba:	40ca      	lsrs	r2, r1
 80040bc:	07d6      	lsls	r6, r2, #31
 80040be:	d544      	bpl.n	800414a <__sflush_r+0xf2>
 80040c0:	2200      	movs	r2, #0
 80040c2:	6062      	str	r2, [r4, #4]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	04d9      	lsls	r1, r3, #19
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	d504      	bpl.n	80040d6 <__sflush_r+0x7e>
 80040cc:	1c42      	adds	r2, r0, #1
 80040ce:	d101      	bne.n	80040d4 <__sflush_r+0x7c>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b903      	cbnz	r3, 80040d6 <__sflush_r+0x7e>
 80040d4:	6560      	str	r0, [r4, #84]	; 0x54
 80040d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d8:	602f      	str	r7, [r5, #0]
 80040da:	2900      	cmp	r1, #0
 80040dc:	d0c9      	beq.n	8004072 <__sflush_r+0x1a>
 80040de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e2:	4299      	cmp	r1, r3
 80040e4:	d002      	beq.n	80040ec <__sflush_r+0x94>
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fca2 	bl	8004a30 <_free_r>
 80040ec:	2000      	movs	r0, #0
 80040ee:	6360      	str	r0, [r4, #52]	; 0x34
 80040f0:	e7c0      	b.n	8004074 <__sflush_r+0x1c>
 80040f2:	2301      	movs	r3, #1
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b0      	blx	r6
 80040f8:	1c41      	adds	r1, r0, #1
 80040fa:	d1c8      	bne.n	800408e <__sflush_r+0x36>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0c5      	beq.n	800408e <__sflush_r+0x36>
 8004102:	2b1d      	cmp	r3, #29
 8004104:	d001      	beq.n	800410a <__sflush_r+0xb2>
 8004106:	2b16      	cmp	r3, #22
 8004108:	d101      	bne.n	800410e <__sflush_r+0xb6>
 800410a:	602f      	str	r7, [r5, #0]
 800410c:	e7b1      	b.n	8004072 <__sflush_r+0x1a>
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	e7ad      	b.n	8004074 <__sflush_r+0x1c>
 8004118:	690f      	ldr	r7, [r1, #16]
 800411a:	2f00      	cmp	r7, #0
 800411c:	d0a9      	beq.n	8004072 <__sflush_r+0x1a>
 800411e:	0793      	lsls	r3, r2, #30
 8004120:	bf18      	it	ne
 8004122:	2300      	movne	r3, #0
 8004124:	680e      	ldr	r6, [r1, #0]
 8004126:	bf08      	it	eq
 8004128:	694b      	ldreq	r3, [r1, #20]
 800412a:	eba6 0807 	sub.w	r8, r6, r7
 800412e:	600f      	str	r7, [r1, #0]
 8004130:	608b      	str	r3, [r1, #8]
 8004132:	f1b8 0f00 	cmp.w	r8, #0
 8004136:	dd9c      	ble.n	8004072 <__sflush_r+0x1a>
 8004138:	4643      	mov	r3, r8
 800413a:	463a      	mov	r2, r7
 800413c:	6a21      	ldr	r1, [r4, #32]
 800413e:	4628      	mov	r0, r5
 8004140:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004142:	47b0      	blx	r6
 8004144:	2800      	cmp	r0, #0
 8004146:	dc06      	bgt.n	8004156 <__sflush_r+0xfe>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004154:	e78e      	b.n	8004074 <__sflush_r+0x1c>
 8004156:	4407      	add	r7, r0
 8004158:	eba8 0800 	sub.w	r8, r8, r0
 800415c:	e7e9      	b.n	8004132 <__sflush_r+0xda>
 800415e:	bf00      	nop
 8004160:	20400001 	.word	0x20400001

08004164 <_fflush_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	690b      	ldr	r3, [r1, #16]
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	b1db      	cbz	r3, 80041a6 <_fflush_r+0x42>
 800416e:	b118      	cbz	r0, 8004178 <_fflush_r+0x14>
 8004170:	6983      	ldr	r3, [r0, #24]
 8004172:	b90b      	cbnz	r3, 8004178 <_fflush_r+0x14>
 8004174:	f000 f860 	bl	8004238 <__sinit>
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <_fflush_r+0x48>)
 800417a:	429c      	cmp	r4, r3
 800417c:	d109      	bne.n	8004192 <_fflush_r+0x2e>
 800417e:	686c      	ldr	r4, [r5, #4]
 8004180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004184:	b17b      	cbz	r3, 80041a6 <_fflush_r+0x42>
 8004186:	4621      	mov	r1, r4
 8004188:	4628      	mov	r0, r5
 800418a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800418e:	f7ff bf63 	b.w	8004058 <__sflush_r>
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <_fflush_r+0x4c>)
 8004194:	429c      	cmp	r4, r3
 8004196:	d101      	bne.n	800419c <_fflush_r+0x38>
 8004198:	68ac      	ldr	r4, [r5, #8]
 800419a:	e7f1      	b.n	8004180 <_fflush_r+0x1c>
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <_fflush_r+0x50>)
 800419e:	429c      	cmp	r4, r3
 80041a0:	bf08      	it	eq
 80041a2:	68ec      	ldreq	r4, [r5, #12]
 80041a4:	e7ec      	b.n	8004180 <_fflush_r+0x1c>
 80041a6:	2000      	movs	r0, #0
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
 80041aa:	bf00      	nop
 80041ac:	08005e34 	.word	0x08005e34
 80041b0:	08005e54 	.word	0x08005e54
 80041b4:	08005e14 	.word	0x08005e14

080041b8 <std>:
 80041b8:	2300      	movs	r3, #0
 80041ba:	b510      	push	{r4, lr}
 80041bc:	4604      	mov	r4, r0
 80041be:	e9c0 3300 	strd	r3, r3, [r0]
 80041c2:	6083      	str	r3, [r0, #8]
 80041c4:	8181      	strh	r1, [r0, #12]
 80041c6:	6643      	str	r3, [r0, #100]	; 0x64
 80041c8:	81c2      	strh	r2, [r0, #14]
 80041ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ce:	6183      	str	r3, [r0, #24]
 80041d0:	4619      	mov	r1, r3
 80041d2:	2208      	movs	r2, #8
 80041d4:	305c      	adds	r0, #92	; 0x5c
 80041d6:	f7fe fb68 	bl	80028aa <memset>
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <std+0x38>)
 80041dc:	6224      	str	r4, [r4, #32]
 80041de:	6263      	str	r3, [r4, #36]	; 0x24
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <std+0x3c>)
 80041e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <std+0x40>)
 80041e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <std+0x44>)
 80041ea:	6323      	str	r3, [r4, #48]	; 0x30
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	bf00      	nop
 80041f0:	08004e19 	.word	0x08004e19
 80041f4:	08004e3b 	.word	0x08004e3b
 80041f8:	08004e73 	.word	0x08004e73
 80041fc:	08004e97 	.word	0x08004e97

08004200 <_cleanup_r>:
 8004200:	4901      	ldr	r1, [pc, #4]	; (8004208 <_cleanup_r+0x8>)
 8004202:	f000 b885 	b.w	8004310 <_fwalk_reent>
 8004206:	bf00      	nop
 8004208:	08004165 	.word	0x08004165

0800420c <__sfmoreglue>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	2568      	movs	r5, #104	; 0x68
 8004210:	1e4a      	subs	r2, r1, #1
 8004212:	4355      	muls	r5, r2
 8004214:	460e      	mov	r6, r1
 8004216:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800421a:	f000 fc55 	bl	8004ac8 <_malloc_r>
 800421e:	4604      	mov	r4, r0
 8004220:	b140      	cbz	r0, 8004234 <__sfmoreglue+0x28>
 8004222:	2100      	movs	r1, #0
 8004224:	e9c0 1600 	strd	r1, r6, [r0]
 8004228:	300c      	adds	r0, #12
 800422a:	60a0      	str	r0, [r4, #8]
 800422c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004230:	f7fe fb3b 	bl	80028aa <memset>
 8004234:	4620      	mov	r0, r4
 8004236:	bd70      	pop	{r4, r5, r6, pc}

08004238 <__sinit>:
 8004238:	6983      	ldr	r3, [r0, #24]
 800423a:	b510      	push	{r4, lr}
 800423c:	4604      	mov	r4, r0
 800423e:	bb33      	cbnz	r3, 800428e <__sinit+0x56>
 8004240:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004244:	6503      	str	r3, [r0, #80]	; 0x50
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <__sinit+0x58>)
 8004248:	4a12      	ldr	r2, [pc, #72]	; (8004294 <__sinit+0x5c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6282      	str	r2, [r0, #40]	; 0x28
 800424e:	4298      	cmp	r0, r3
 8004250:	bf04      	itt	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	6183      	streq	r3, [r0, #24]
 8004256:	f000 f81f 	bl	8004298 <__sfp>
 800425a:	6060      	str	r0, [r4, #4]
 800425c:	4620      	mov	r0, r4
 800425e:	f000 f81b 	bl	8004298 <__sfp>
 8004262:	60a0      	str	r0, [r4, #8]
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f817 	bl	8004298 <__sfp>
 800426a:	2200      	movs	r2, #0
 800426c:	60e0      	str	r0, [r4, #12]
 800426e:	2104      	movs	r1, #4
 8004270:	6860      	ldr	r0, [r4, #4]
 8004272:	f7ff ffa1 	bl	80041b8 <std>
 8004276:	2201      	movs	r2, #1
 8004278:	2109      	movs	r1, #9
 800427a:	68a0      	ldr	r0, [r4, #8]
 800427c:	f7ff ff9c 	bl	80041b8 <std>
 8004280:	2202      	movs	r2, #2
 8004282:	2112      	movs	r1, #18
 8004284:	68e0      	ldr	r0, [r4, #12]
 8004286:	f7ff ff97 	bl	80041b8 <std>
 800428a:	2301      	movs	r3, #1
 800428c:	61a3      	str	r3, [r4, #24]
 800428e:	bd10      	pop	{r4, pc}
 8004290:	08005dcc 	.word	0x08005dcc
 8004294:	08004201 	.word	0x08004201

08004298 <__sfp>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <__sfp+0x70>)
 800429c:	4607      	mov	r7, r0
 800429e:	681e      	ldr	r6, [r3, #0]
 80042a0:	69b3      	ldr	r3, [r6, #24]
 80042a2:	b913      	cbnz	r3, 80042aa <__sfp+0x12>
 80042a4:	4630      	mov	r0, r6
 80042a6:	f7ff ffc7 	bl	8004238 <__sinit>
 80042aa:	3648      	adds	r6, #72	; 0x48
 80042ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	d503      	bpl.n	80042bc <__sfp+0x24>
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	b133      	cbz	r3, 80042c6 <__sfp+0x2e>
 80042b8:	6836      	ldr	r6, [r6, #0]
 80042ba:	e7f7      	b.n	80042ac <__sfp+0x14>
 80042bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042c0:	b16d      	cbz	r5, 80042de <__sfp+0x46>
 80042c2:	3468      	adds	r4, #104	; 0x68
 80042c4:	e7f4      	b.n	80042b0 <__sfp+0x18>
 80042c6:	2104      	movs	r1, #4
 80042c8:	4638      	mov	r0, r7
 80042ca:	f7ff ff9f 	bl	800420c <__sfmoreglue>
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d1f1      	bne.n	80042b8 <__sfp+0x20>
 80042d4:	230c      	movs	r3, #12
 80042d6:	4604      	mov	r4, r0
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4620      	mov	r0, r4
 80042dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <__sfp+0x74>)
 80042e0:	6665      	str	r5, [r4, #100]	; 0x64
 80042e2:	e9c4 5500 	strd	r5, r5, [r4]
 80042e6:	60a5      	str	r5, [r4, #8]
 80042e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80042ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80042f0:	2208      	movs	r2, #8
 80042f2:	4629      	mov	r1, r5
 80042f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042f8:	f7fe fad7 	bl	80028aa <memset>
 80042fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004300:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004304:	e7e9      	b.n	80042da <__sfp+0x42>
 8004306:	bf00      	nop
 8004308:	08005dcc 	.word	0x08005dcc
 800430c:	ffff0001 	.word	0xffff0001

08004310 <_fwalk_reent>:
 8004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004314:	4680      	mov	r8, r0
 8004316:	4689      	mov	r9, r1
 8004318:	2600      	movs	r6, #0
 800431a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800431e:	b914      	cbnz	r4, 8004326 <_fwalk_reent+0x16>
 8004320:	4630      	mov	r0, r6
 8004322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004326:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800432a:	3f01      	subs	r7, #1
 800432c:	d501      	bpl.n	8004332 <_fwalk_reent+0x22>
 800432e:	6824      	ldr	r4, [r4, #0]
 8004330:	e7f5      	b.n	800431e <_fwalk_reent+0xe>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d907      	bls.n	8004348 <_fwalk_reent+0x38>
 8004338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800433c:	3301      	adds	r3, #1
 800433e:	d003      	beq.n	8004348 <_fwalk_reent+0x38>
 8004340:	4629      	mov	r1, r5
 8004342:	4640      	mov	r0, r8
 8004344:	47c8      	blx	r9
 8004346:	4306      	orrs	r6, r0
 8004348:	3568      	adds	r5, #104	; 0x68
 800434a:	e7ee      	b.n	800432a <_fwalk_reent+0x1a>

0800434c <_localeconv_r>:
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <_localeconv_r+0x14>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6a18      	ldr	r0, [r3, #32]
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <_localeconv_r+0x18>)
 8004354:	2800      	cmp	r0, #0
 8004356:	bf08      	it	eq
 8004358:	4618      	moveq	r0, r3
 800435a:	30f0      	adds	r0, #240	; 0xf0
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000014 	.word	0x20000014
 8004364:	20000078 	.word	0x20000078

08004368 <__swhatbuf_r>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	460e      	mov	r6, r1
 800436c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004370:	b096      	sub	sp, #88	; 0x58
 8004372:	2900      	cmp	r1, #0
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	da07      	bge.n	800438a <__swhatbuf_r+0x22>
 800437a:	2300      	movs	r3, #0
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	89b3      	ldrh	r3, [r6, #12]
 8004380:	061a      	lsls	r2, r3, #24
 8004382:	d410      	bmi.n	80043a6 <__swhatbuf_r+0x3e>
 8004384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004388:	e00e      	b.n	80043a8 <__swhatbuf_r+0x40>
 800438a:	466a      	mov	r2, sp
 800438c:	f000 fdaa 	bl	8004ee4 <_fstat_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	dbf2      	blt.n	800437a <__swhatbuf_r+0x12>
 8004394:	9a01      	ldr	r2, [sp, #4]
 8004396:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800439a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800439e:	425a      	negs	r2, r3
 80043a0:	415a      	adcs	r2, r3
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	e7ee      	b.n	8004384 <__swhatbuf_r+0x1c>
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	2000      	movs	r0, #0
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	b016      	add	sp, #88	; 0x58
 80043ae:	bd70      	pop	{r4, r5, r6, pc}

080043b0 <__smakebuf_r>:
 80043b0:	898b      	ldrh	r3, [r1, #12]
 80043b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043b4:	079d      	lsls	r5, r3, #30
 80043b6:	4606      	mov	r6, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	d507      	bpl.n	80043cc <__smakebuf_r+0x1c>
 80043bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	6123      	str	r3, [r4, #16]
 80043c4:	2301      	movs	r3, #1
 80043c6:	6163      	str	r3, [r4, #20]
 80043c8:	b002      	add	sp, #8
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	ab01      	add	r3, sp, #4
 80043ce:	466a      	mov	r2, sp
 80043d0:	f7ff ffca 	bl	8004368 <__swhatbuf_r>
 80043d4:	9900      	ldr	r1, [sp, #0]
 80043d6:	4605      	mov	r5, r0
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 fb75 	bl	8004ac8 <_malloc_r>
 80043de:	b948      	cbnz	r0, 80043f4 <__smakebuf_r+0x44>
 80043e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e4:	059a      	lsls	r2, r3, #22
 80043e6:	d4ef      	bmi.n	80043c8 <__smakebuf_r+0x18>
 80043e8:	f023 0303 	bic.w	r3, r3, #3
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	e7e3      	b.n	80043bc <__smakebuf_r+0xc>
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <__smakebuf_r+0x7c>)
 80043f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	6020      	str	r0, [r4, #0]
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	81a3      	strh	r3, [r4, #12]
 8004402:	9b00      	ldr	r3, [sp, #0]
 8004404:	6120      	str	r0, [r4, #16]
 8004406:	6163      	str	r3, [r4, #20]
 8004408:	9b01      	ldr	r3, [sp, #4]
 800440a:	b15b      	cbz	r3, 8004424 <__smakebuf_r+0x74>
 800440c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004410:	4630      	mov	r0, r6
 8004412:	f000 fd79 	bl	8004f08 <_isatty_r>
 8004416:	b128      	cbz	r0, 8004424 <__smakebuf_r+0x74>
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	81a3      	strh	r3, [r4, #12]
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	431d      	orrs	r5, r3
 8004428:	81a5      	strh	r5, [r4, #12]
 800442a:	e7cd      	b.n	80043c8 <__smakebuf_r+0x18>
 800442c:	08004201 	.word	0x08004201

08004430 <malloc>:
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <malloc+0xc>)
 8004432:	4601      	mov	r1, r0
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	f000 bb47 	b.w	8004ac8 <_malloc_r>
 800443a:	bf00      	nop
 800443c:	20000014 	.word	0x20000014

08004440 <memchr>:
 8004440:	b510      	push	{r4, lr}
 8004442:	b2c9      	uxtb	r1, r1
 8004444:	4402      	add	r2, r0
 8004446:	4290      	cmp	r0, r2
 8004448:	4603      	mov	r3, r0
 800444a:	d101      	bne.n	8004450 <memchr+0x10>
 800444c:	2300      	movs	r3, #0
 800444e:	e003      	b.n	8004458 <memchr+0x18>
 8004450:	781c      	ldrb	r4, [r3, #0]
 8004452:	3001      	adds	r0, #1
 8004454:	428c      	cmp	r4, r1
 8004456:	d1f6      	bne.n	8004446 <memchr+0x6>
 8004458:	4618      	mov	r0, r3
 800445a:	bd10      	pop	{r4, pc}

0800445c <_Balloc>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004460:	4604      	mov	r4, r0
 8004462:	460e      	mov	r6, r1
 8004464:	b93d      	cbnz	r5, 8004476 <_Balloc+0x1a>
 8004466:	2010      	movs	r0, #16
 8004468:	f7ff ffe2 	bl	8004430 <malloc>
 800446c:	6260      	str	r0, [r4, #36]	; 0x24
 800446e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004472:	6005      	str	r5, [r0, #0]
 8004474:	60c5      	str	r5, [r0, #12]
 8004476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004478:	68eb      	ldr	r3, [r5, #12]
 800447a:	b183      	cbz	r3, 800449e <_Balloc+0x42>
 800447c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004484:	b9b8      	cbnz	r0, 80044b6 <_Balloc+0x5a>
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f506 	lsl.w	r5, r1, r6
 800448c:	1d6a      	adds	r2, r5, #5
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fabe 	bl	8004a12 <_calloc_r>
 8004496:	b160      	cbz	r0, 80044b2 <_Balloc+0x56>
 8004498:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800449c:	e00e      	b.n	80044bc <_Balloc+0x60>
 800449e:	2221      	movs	r2, #33	; 0x21
 80044a0:	2104      	movs	r1, #4
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fab5 	bl	8004a12 <_calloc_r>
 80044a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044aa:	60e8      	str	r0, [r5, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e4      	bne.n	800447c <_Balloc+0x20>
 80044b2:	2000      	movs	r0, #0
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	6802      	ldr	r2, [r0, #0]
 80044b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80044bc:	2300      	movs	r3, #0
 80044be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80044c2:	e7f7      	b.n	80044b4 <_Balloc+0x58>

080044c4 <_Bfree>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80044c8:	4606      	mov	r6, r0
 80044ca:	460d      	mov	r5, r1
 80044cc:	b93c      	cbnz	r4, 80044de <_Bfree+0x1a>
 80044ce:	2010      	movs	r0, #16
 80044d0:	f7ff ffae 	bl	8004430 <malloc>
 80044d4:	6270      	str	r0, [r6, #36]	; 0x24
 80044d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044da:	6004      	str	r4, [r0, #0]
 80044dc:	60c4      	str	r4, [r0, #12]
 80044de:	b13d      	cbz	r5, 80044f0 <_Bfree+0x2c>
 80044e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80044e2:	686a      	ldr	r2, [r5, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044ea:	6029      	str	r1, [r5, #0]
 80044ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80044f0:	bd70      	pop	{r4, r5, r6, pc}

080044f2 <__multadd>:
 80044f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f6:	461f      	mov	r7, r3
 80044f8:	4606      	mov	r6, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	2300      	movs	r3, #0
 80044fe:	690d      	ldr	r5, [r1, #16]
 8004500:	f101 0c14 	add.w	ip, r1, #20
 8004504:	f8dc 0000 	ldr.w	r0, [ip]
 8004508:	3301      	adds	r3, #1
 800450a:	b281      	uxth	r1, r0
 800450c:	fb02 7101 	mla	r1, r2, r1, r7
 8004510:	0c00      	lsrs	r0, r0, #16
 8004512:	0c0f      	lsrs	r7, r1, #16
 8004514:	fb02 7000 	mla	r0, r2, r0, r7
 8004518:	b289      	uxth	r1, r1
 800451a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800451e:	429d      	cmp	r5, r3
 8004520:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004524:	f84c 1b04 	str.w	r1, [ip], #4
 8004528:	dcec      	bgt.n	8004504 <__multadd+0x12>
 800452a:	b1d7      	cbz	r7, 8004562 <__multadd+0x70>
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	42ab      	cmp	r3, r5
 8004530:	dc12      	bgt.n	8004558 <__multadd+0x66>
 8004532:	6861      	ldr	r1, [r4, #4]
 8004534:	4630      	mov	r0, r6
 8004536:	3101      	adds	r1, #1
 8004538:	f7ff ff90 	bl	800445c <_Balloc>
 800453c:	4680      	mov	r8, r0
 800453e:	6922      	ldr	r2, [r4, #16]
 8004540:	f104 010c 	add.w	r1, r4, #12
 8004544:	3202      	adds	r2, #2
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	300c      	adds	r0, #12
 800454a:	f7fe f9a3 	bl	8002894 <memcpy>
 800454e:	4621      	mov	r1, r4
 8004550:	4630      	mov	r0, r6
 8004552:	f7ff ffb7 	bl	80044c4 <_Bfree>
 8004556:	4644      	mov	r4, r8
 8004558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800455c:	3501      	adds	r5, #1
 800455e:	615f      	str	r7, [r3, #20]
 8004560:	6125      	str	r5, [r4, #16]
 8004562:	4620      	mov	r0, r4
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004568 <__hi0bits>:
 8004568:	0c02      	lsrs	r2, r0, #16
 800456a:	0412      	lsls	r2, r2, #16
 800456c:	4603      	mov	r3, r0
 800456e:	b9b2      	cbnz	r2, 800459e <__hi0bits+0x36>
 8004570:	0403      	lsls	r3, r0, #16
 8004572:	2010      	movs	r0, #16
 8004574:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004578:	bf04      	itt	eq
 800457a:	021b      	lsleq	r3, r3, #8
 800457c:	3008      	addeq	r0, #8
 800457e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004582:	bf04      	itt	eq
 8004584:	011b      	lsleq	r3, r3, #4
 8004586:	3004      	addeq	r0, #4
 8004588:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800458c:	bf04      	itt	eq
 800458e:	009b      	lsleq	r3, r3, #2
 8004590:	3002      	addeq	r0, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	db06      	blt.n	80045a4 <__hi0bits+0x3c>
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	d503      	bpl.n	80045a2 <__hi0bits+0x3a>
 800459a:	3001      	adds	r0, #1
 800459c:	4770      	bx	lr
 800459e:	2000      	movs	r0, #0
 80045a0:	e7e8      	b.n	8004574 <__hi0bits+0xc>
 80045a2:	2020      	movs	r0, #32
 80045a4:	4770      	bx	lr

080045a6 <__lo0bits>:
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	4601      	mov	r1, r0
 80045aa:	f013 0207 	ands.w	r2, r3, #7
 80045ae:	d00b      	beq.n	80045c8 <__lo0bits+0x22>
 80045b0:	07da      	lsls	r2, r3, #31
 80045b2:	d423      	bmi.n	80045fc <__lo0bits+0x56>
 80045b4:	0798      	lsls	r0, r3, #30
 80045b6:	bf49      	itett	mi
 80045b8:	085b      	lsrmi	r3, r3, #1
 80045ba:	089b      	lsrpl	r3, r3, #2
 80045bc:	2001      	movmi	r0, #1
 80045be:	600b      	strmi	r3, [r1, #0]
 80045c0:	bf5c      	itt	pl
 80045c2:	600b      	strpl	r3, [r1, #0]
 80045c4:	2002      	movpl	r0, #2
 80045c6:	4770      	bx	lr
 80045c8:	b298      	uxth	r0, r3
 80045ca:	b9a8      	cbnz	r0, 80045f8 <__lo0bits+0x52>
 80045cc:	2010      	movs	r0, #16
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80045d4:	bf04      	itt	eq
 80045d6:	0a1b      	lsreq	r3, r3, #8
 80045d8:	3008      	addeq	r0, #8
 80045da:	071a      	lsls	r2, r3, #28
 80045dc:	bf04      	itt	eq
 80045de:	091b      	lsreq	r3, r3, #4
 80045e0:	3004      	addeq	r0, #4
 80045e2:	079a      	lsls	r2, r3, #30
 80045e4:	bf04      	itt	eq
 80045e6:	089b      	lsreq	r3, r3, #2
 80045e8:	3002      	addeq	r0, #2
 80045ea:	07da      	lsls	r2, r3, #31
 80045ec:	d402      	bmi.n	80045f4 <__lo0bits+0x4e>
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	d006      	beq.n	8004600 <__lo0bits+0x5a>
 80045f2:	3001      	adds	r0, #1
 80045f4:	600b      	str	r3, [r1, #0]
 80045f6:	4770      	bx	lr
 80045f8:	4610      	mov	r0, r2
 80045fa:	e7e9      	b.n	80045d0 <__lo0bits+0x2a>
 80045fc:	2000      	movs	r0, #0
 80045fe:	4770      	bx	lr
 8004600:	2020      	movs	r0, #32
 8004602:	4770      	bx	lr

08004604 <__i2b>:
 8004604:	b510      	push	{r4, lr}
 8004606:	460c      	mov	r4, r1
 8004608:	2101      	movs	r1, #1
 800460a:	f7ff ff27 	bl	800445c <_Balloc>
 800460e:	2201      	movs	r2, #1
 8004610:	6144      	str	r4, [r0, #20]
 8004612:	6102      	str	r2, [r0, #16]
 8004614:	bd10      	pop	{r4, pc}

08004616 <__multiply>:
 8004616:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	4614      	mov	r4, r2
 800461c:	690a      	ldr	r2, [r1, #16]
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	4688      	mov	r8, r1
 8004622:	429a      	cmp	r2, r3
 8004624:	bfbe      	ittt	lt
 8004626:	460b      	movlt	r3, r1
 8004628:	46a0      	movlt	r8, r4
 800462a:	461c      	movlt	r4, r3
 800462c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004630:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004634:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004638:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800463c:	eb07 0609 	add.w	r6, r7, r9
 8004640:	42b3      	cmp	r3, r6
 8004642:	bfb8      	it	lt
 8004644:	3101      	addlt	r1, #1
 8004646:	f7ff ff09 	bl	800445c <_Balloc>
 800464a:	f100 0514 	add.w	r5, r0, #20
 800464e:	462b      	mov	r3, r5
 8004650:	2200      	movs	r2, #0
 8004652:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004656:	4573      	cmp	r3, lr
 8004658:	d316      	bcc.n	8004688 <__multiply+0x72>
 800465a:	f104 0214 	add.w	r2, r4, #20
 800465e:	f108 0114 	add.w	r1, r8, #20
 8004662:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004666:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	9b00      	ldr	r3, [sp, #0]
 800466e:	9201      	str	r2, [sp, #4]
 8004670:	4293      	cmp	r3, r2
 8004672:	d80c      	bhi.n	800468e <__multiply+0x78>
 8004674:	2e00      	cmp	r6, #0
 8004676:	dd03      	ble.n	8004680 <__multiply+0x6a>
 8004678:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800467c:	2b00      	cmp	r3, #0
 800467e:	d05d      	beq.n	800473c <__multiply+0x126>
 8004680:	6106      	str	r6, [r0, #16]
 8004682:	b003      	add	sp, #12
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004688:	f843 2b04 	str.w	r2, [r3], #4
 800468c:	e7e3      	b.n	8004656 <__multiply+0x40>
 800468e:	f8b2 b000 	ldrh.w	fp, [r2]
 8004692:	f1bb 0f00 	cmp.w	fp, #0
 8004696:	d023      	beq.n	80046e0 <__multiply+0xca>
 8004698:	4689      	mov	r9, r1
 800469a:	46ac      	mov	ip, r5
 800469c:	f04f 0800 	mov.w	r8, #0
 80046a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80046a4:	f8dc a000 	ldr.w	sl, [ip]
 80046a8:	b2a3      	uxth	r3, r4
 80046aa:	fa1f fa8a 	uxth.w	sl, sl
 80046ae:	fb0b a303 	mla	r3, fp, r3, sl
 80046b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80046b6:	f8dc 4000 	ldr.w	r4, [ip]
 80046ba:	4443      	add	r3, r8
 80046bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80046c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80046c4:	46e2      	mov	sl, ip
 80046c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80046d0:	454f      	cmp	r7, r9
 80046d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80046d6:	f84a 3b04 	str.w	r3, [sl], #4
 80046da:	d82b      	bhi.n	8004734 <__multiply+0x11e>
 80046dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80046e0:	9b01      	ldr	r3, [sp, #4]
 80046e2:	3204      	adds	r2, #4
 80046e4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80046e8:	f1ba 0f00 	cmp.w	sl, #0
 80046ec:	d020      	beq.n	8004730 <__multiply+0x11a>
 80046ee:	4689      	mov	r9, r1
 80046f0:	46a8      	mov	r8, r5
 80046f2:	f04f 0b00 	mov.w	fp, #0
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80046fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004700:	b29b      	uxth	r3, r3
 8004702:	fb0a 440c 	mla	r4, sl, ip, r4
 8004706:	46c4      	mov	ip, r8
 8004708:	445c      	add	r4, fp
 800470a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800470e:	f84c 3b04 	str.w	r3, [ip], #4
 8004712:	f859 3b04 	ldr.w	r3, [r9], #4
 8004716:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	fb0a b303 	mla	r3, sl, r3, fp
 8004720:	454f      	cmp	r7, r9
 8004722:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004726:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800472a:	d805      	bhi.n	8004738 <__multiply+0x122>
 800472c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004730:	3504      	adds	r5, #4
 8004732:	e79b      	b.n	800466c <__multiply+0x56>
 8004734:	46d4      	mov	ip, sl
 8004736:	e7b3      	b.n	80046a0 <__multiply+0x8a>
 8004738:	46e0      	mov	r8, ip
 800473a:	e7dd      	b.n	80046f8 <__multiply+0xe2>
 800473c:	3e01      	subs	r6, #1
 800473e:	e799      	b.n	8004674 <__multiply+0x5e>

08004740 <__pow5mult>:
 8004740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004744:	4615      	mov	r5, r2
 8004746:	f012 0203 	ands.w	r2, r2, #3
 800474a:	4606      	mov	r6, r0
 800474c:	460f      	mov	r7, r1
 800474e:	d007      	beq.n	8004760 <__pow5mult+0x20>
 8004750:	4c21      	ldr	r4, [pc, #132]	; (80047d8 <__pow5mult+0x98>)
 8004752:	3a01      	subs	r2, #1
 8004754:	2300      	movs	r3, #0
 8004756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800475a:	f7ff feca 	bl	80044f2 <__multadd>
 800475e:	4607      	mov	r7, r0
 8004760:	10ad      	asrs	r5, r5, #2
 8004762:	d035      	beq.n	80047d0 <__pow5mult+0x90>
 8004764:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004766:	b93c      	cbnz	r4, 8004778 <__pow5mult+0x38>
 8004768:	2010      	movs	r0, #16
 800476a:	f7ff fe61 	bl	8004430 <malloc>
 800476e:	6270      	str	r0, [r6, #36]	; 0x24
 8004770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004774:	6004      	str	r4, [r0, #0]
 8004776:	60c4      	str	r4, [r0, #12]
 8004778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800477c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004780:	b94c      	cbnz	r4, 8004796 <__pow5mult+0x56>
 8004782:	f240 2171 	movw	r1, #625	; 0x271
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff ff3c 	bl	8004604 <__i2b>
 800478c:	2300      	movs	r3, #0
 800478e:	4604      	mov	r4, r0
 8004790:	f8c8 0008 	str.w	r0, [r8, #8]
 8004794:	6003      	str	r3, [r0, #0]
 8004796:	f04f 0800 	mov.w	r8, #0
 800479a:	07eb      	lsls	r3, r5, #31
 800479c:	d50a      	bpl.n	80047b4 <__pow5mult+0x74>
 800479e:	4639      	mov	r1, r7
 80047a0:	4622      	mov	r2, r4
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff ff37 	bl	8004616 <__multiply>
 80047a8:	4681      	mov	r9, r0
 80047aa:	4639      	mov	r1, r7
 80047ac:	4630      	mov	r0, r6
 80047ae:	f7ff fe89 	bl	80044c4 <_Bfree>
 80047b2:	464f      	mov	r7, r9
 80047b4:	106d      	asrs	r5, r5, #1
 80047b6:	d00b      	beq.n	80047d0 <__pow5mult+0x90>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	b938      	cbnz	r0, 80047cc <__pow5mult+0x8c>
 80047bc:	4622      	mov	r2, r4
 80047be:	4621      	mov	r1, r4
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7ff ff28 	bl	8004616 <__multiply>
 80047c6:	6020      	str	r0, [r4, #0]
 80047c8:	f8c0 8000 	str.w	r8, [r0]
 80047cc:	4604      	mov	r4, r0
 80047ce:	e7e4      	b.n	800479a <__pow5mult+0x5a>
 80047d0:	4638      	mov	r0, r7
 80047d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d6:	bf00      	nop
 80047d8:	08005f68 	.word	0x08005f68

080047dc <__lshift>:
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	460c      	mov	r4, r1
 80047e2:	4607      	mov	r7, r0
 80047e4:	4616      	mov	r6, r2
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047ec:	eb0a 0903 	add.w	r9, sl, r3
 80047f0:	6849      	ldr	r1, [r1, #4]
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	f109 0501 	add.w	r5, r9, #1
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	db32      	blt.n	8004862 <__lshift+0x86>
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff fe2d 	bl	800445c <_Balloc>
 8004802:	2300      	movs	r3, #0
 8004804:	4680      	mov	r8, r0
 8004806:	461a      	mov	r2, r3
 8004808:	f100 0114 	add.w	r1, r0, #20
 800480c:	4553      	cmp	r3, sl
 800480e:	db2b      	blt.n	8004868 <__lshift+0x8c>
 8004810:	6920      	ldr	r0, [r4, #16]
 8004812:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004816:	f104 0314 	add.w	r3, r4, #20
 800481a:	f016 021f 	ands.w	r2, r6, #31
 800481e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004822:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004826:	d025      	beq.n	8004874 <__lshift+0x98>
 8004828:	2000      	movs	r0, #0
 800482a:	f1c2 0e20 	rsb	lr, r2, #32
 800482e:	468a      	mov	sl, r1
 8004830:	681e      	ldr	r6, [r3, #0]
 8004832:	4096      	lsls	r6, r2
 8004834:	4330      	orrs	r0, r6
 8004836:	f84a 0b04 	str.w	r0, [sl], #4
 800483a:	f853 0b04 	ldr.w	r0, [r3], #4
 800483e:	459c      	cmp	ip, r3
 8004840:	fa20 f00e 	lsr.w	r0, r0, lr
 8004844:	d814      	bhi.n	8004870 <__lshift+0x94>
 8004846:	6048      	str	r0, [r1, #4]
 8004848:	b108      	cbz	r0, 800484e <__lshift+0x72>
 800484a:	f109 0502 	add.w	r5, r9, #2
 800484e:	3d01      	subs	r5, #1
 8004850:	4638      	mov	r0, r7
 8004852:	f8c8 5010 	str.w	r5, [r8, #16]
 8004856:	4621      	mov	r1, r4
 8004858:	f7ff fe34 	bl	80044c4 <_Bfree>
 800485c:	4640      	mov	r0, r8
 800485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004862:	3101      	adds	r1, #1
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	e7c7      	b.n	80047f8 <__lshift+0x1c>
 8004868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800486c:	3301      	adds	r3, #1
 800486e:	e7cd      	b.n	800480c <__lshift+0x30>
 8004870:	4651      	mov	r1, sl
 8004872:	e7dc      	b.n	800482e <__lshift+0x52>
 8004874:	3904      	subs	r1, #4
 8004876:	f853 2b04 	ldr.w	r2, [r3], #4
 800487a:	459c      	cmp	ip, r3
 800487c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004880:	d8f9      	bhi.n	8004876 <__lshift+0x9a>
 8004882:	e7e4      	b.n	800484e <__lshift+0x72>

08004884 <__mcmp>:
 8004884:	6903      	ldr	r3, [r0, #16]
 8004886:	690a      	ldr	r2, [r1, #16]
 8004888:	b530      	push	{r4, r5, lr}
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	d10c      	bne.n	80048a8 <__mcmp+0x24>
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	3014      	adds	r0, #20
 8004892:	3114      	adds	r1, #20
 8004894:	1884      	adds	r4, r0, r2
 8004896:	4411      	add	r1, r2
 8004898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800489c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80048a0:	4295      	cmp	r5, r2
 80048a2:	d003      	beq.n	80048ac <__mcmp+0x28>
 80048a4:	d305      	bcc.n	80048b2 <__mcmp+0x2e>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd30      	pop	{r4, r5, pc}
 80048ac:	42a0      	cmp	r0, r4
 80048ae:	d3f3      	bcc.n	8004898 <__mcmp+0x14>
 80048b0:	e7fa      	b.n	80048a8 <__mcmp+0x24>
 80048b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b6:	e7f7      	b.n	80048a8 <__mcmp+0x24>

080048b8 <__mdiff>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	460d      	mov	r5, r1
 80048be:	4607      	mov	r7, r0
 80048c0:	4611      	mov	r1, r2
 80048c2:	4628      	mov	r0, r5
 80048c4:	4614      	mov	r4, r2
 80048c6:	f7ff ffdd 	bl	8004884 <__mcmp>
 80048ca:	1e06      	subs	r6, r0, #0
 80048cc:	d108      	bne.n	80048e0 <__mdiff+0x28>
 80048ce:	4631      	mov	r1, r6
 80048d0:	4638      	mov	r0, r7
 80048d2:	f7ff fdc3 	bl	800445c <_Balloc>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80048dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e0:	bfa4      	itt	ge
 80048e2:	4623      	movge	r3, r4
 80048e4:	462c      	movge	r4, r5
 80048e6:	4638      	mov	r0, r7
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	bfa6      	itte	ge
 80048ec:	461d      	movge	r5, r3
 80048ee:	2600      	movge	r6, #0
 80048f0:	2601      	movlt	r6, #1
 80048f2:	f7ff fdb3 	bl	800445c <_Balloc>
 80048f6:	f04f 0e00 	mov.w	lr, #0
 80048fa:	60c6      	str	r6, [r0, #12]
 80048fc:	692b      	ldr	r3, [r5, #16]
 80048fe:	6926      	ldr	r6, [r4, #16]
 8004900:	f104 0214 	add.w	r2, r4, #20
 8004904:	f105 0914 	add.w	r9, r5, #20
 8004908:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800490c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004910:	f100 0114 	add.w	r1, r0, #20
 8004914:	f852 ab04 	ldr.w	sl, [r2], #4
 8004918:	f859 5b04 	ldr.w	r5, [r9], #4
 800491c:	fa1f f38a 	uxth.w	r3, sl
 8004920:	4473      	add	r3, lr
 8004922:	b2ac      	uxth	r4, r5
 8004924:	1b1b      	subs	r3, r3, r4
 8004926:	0c2c      	lsrs	r4, r5, #16
 8004928:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800492c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004930:	b29b      	uxth	r3, r3
 8004932:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004936:	45c8      	cmp	r8, r9
 8004938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800493c:	4694      	mov	ip, r2
 800493e:	f841 4b04 	str.w	r4, [r1], #4
 8004942:	d8e7      	bhi.n	8004914 <__mdiff+0x5c>
 8004944:	45bc      	cmp	ip, r7
 8004946:	d304      	bcc.n	8004952 <__mdiff+0x9a>
 8004948:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800494c:	b183      	cbz	r3, 8004970 <__mdiff+0xb8>
 800494e:	6106      	str	r6, [r0, #16]
 8004950:	e7c4      	b.n	80048dc <__mdiff+0x24>
 8004952:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004956:	b2a2      	uxth	r2, r4
 8004958:	4472      	add	r2, lr
 800495a:	1413      	asrs	r3, r2, #16
 800495c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004960:	b292      	uxth	r2, r2
 8004962:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004966:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800496a:	f841 2b04 	str.w	r2, [r1], #4
 800496e:	e7e9      	b.n	8004944 <__mdiff+0x8c>
 8004970:	3e01      	subs	r6, #1
 8004972:	e7e9      	b.n	8004948 <__mdiff+0x90>

08004974 <__d2b>:
 8004974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004978:	461c      	mov	r4, r3
 800497a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800497e:	2101      	movs	r1, #1
 8004980:	4690      	mov	r8, r2
 8004982:	f7ff fd6b 	bl	800445c <_Balloc>
 8004986:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800498a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800498e:	4607      	mov	r7, r0
 8004990:	bb34      	cbnz	r4, 80049e0 <__d2b+0x6c>
 8004992:	9201      	str	r2, [sp, #4]
 8004994:	f1b8 0200 	subs.w	r2, r8, #0
 8004998:	d027      	beq.n	80049ea <__d2b+0x76>
 800499a:	a802      	add	r0, sp, #8
 800499c:	f840 2d08 	str.w	r2, [r0, #-8]!
 80049a0:	f7ff fe01 	bl	80045a6 <__lo0bits>
 80049a4:	9900      	ldr	r1, [sp, #0]
 80049a6:	b1f0      	cbz	r0, 80049e6 <__d2b+0x72>
 80049a8:	9a01      	ldr	r2, [sp, #4]
 80049aa:	f1c0 0320 	rsb	r3, r0, #32
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	430b      	orrs	r3, r1
 80049b4:	40c2      	lsrs	r2, r0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	9201      	str	r2, [sp, #4]
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2102      	movne	r1, #2
 80049c2:	2101      	moveq	r1, #1
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	6139      	str	r1, [r7, #16]
 80049c8:	b1c4      	cbz	r4, 80049fc <__d2b+0x88>
 80049ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80049ce:	4404      	add	r4, r0
 80049d0:	6034      	str	r4, [r6, #0]
 80049d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80049d6:	6028      	str	r0, [r5, #0]
 80049d8:	4638      	mov	r0, r7
 80049da:	b002      	add	sp, #8
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80049e4:	e7d5      	b.n	8004992 <__d2b+0x1e>
 80049e6:	6179      	str	r1, [r7, #20]
 80049e8:	e7e7      	b.n	80049ba <__d2b+0x46>
 80049ea:	a801      	add	r0, sp, #4
 80049ec:	f7ff fddb 	bl	80045a6 <__lo0bits>
 80049f0:	2101      	movs	r1, #1
 80049f2:	9b01      	ldr	r3, [sp, #4]
 80049f4:	6139      	str	r1, [r7, #16]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	3020      	adds	r0, #32
 80049fa:	e7e5      	b.n	80049c8 <__d2b+0x54>
 80049fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a00:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004a04:	6030      	str	r0, [r6, #0]
 8004a06:	6918      	ldr	r0, [r3, #16]
 8004a08:	f7ff fdae 	bl	8004568 <__hi0bits>
 8004a0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004a10:	e7e1      	b.n	80049d6 <__d2b+0x62>

08004a12 <_calloc_r>:
 8004a12:	b538      	push	{r3, r4, r5, lr}
 8004a14:	fb02 f401 	mul.w	r4, r2, r1
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f000 f855 	bl	8004ac8 <_malloc_r>
 8004a1e:	4605      	mov	r5, r0
 8004a20:	b118      	cbz	r0, 8004a2a <_calloc_r+0x18>
 8004a22:	4622      	mov	r2, r4
 8004a24:	2100      	movs	r1, #0
 8004a26:	f7fd ff40 	bl	80028aa <memset>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004a30 <_free_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4605      	mov	r5, r0
 8004a34:	2900      	cmp	r1, #0
 8004a36:	d043      	beq.n	8004ac0 <_free_r+0x90>
 8004a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3c:	1f0c      	subs	r4, r1, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bfb8      	it	lt
 8004a42:	18e4      	addlt	r4, r4, r3
 8004a44:	f000 fa94 	bl	8004f70 <__malloc_lock>
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <_free_r+0x94>)
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	b933      	cbnz	r3, 8004a5e <_free_r+0x2e>
 8004a50:	6063      	str	r3, [r4, #4]
 8004a52:	6014      	str	r4, [r2, #0]
 8004a54:	4628      	mov	r0, r5
 8004a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a5a:	f000 ba8a 	b.w	8004f72 <__malloc_unlock>
 8004a5e:	42a3      	cmp	r3, r4
 8004a60:	d90b      	bls.n	8004a7a <_free_r+0x4a>
 8004a62:	6821      	ldr	r1, [r4, #0]
 8004a64:	1862      	adds	r2, r4, r1
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bf01      	itttt	eq
 8004a6a:	681a      	ldreq	r2, [r3, #0]
 8004a6c:	685b      	ldreq	r3, [r3, #4]
 8004a6e:	1852      	addeq	r2, r2, r1
 8004a70:	6022      	streq	r2, [r4, #0]
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	6004      	str	r4, [r0, #0]
 8004a76:	e7ed      	b.n	8004a54 <_free_r+0x24>
 8004a78:	4613      	mov	r3, r2
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	b10a      	cbz	r2, 8004a82 <_free_r+0x52>
 8004a7e:	42a2      	cmp	r2, r4
 8004a80:	d9fa      	bls.n	8004a78 <_free_r+0x48>
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	1858      	adds	r0, r3, r1
 8004a86:	42a0      	cmp	r0, r4
 8004a88:	d10b      	bne.n	8004aa2 <_free_r+0x72>
 8004a8a:	6820      	ldr	r0, [r4, #0]
 8004a8c:	4401      	add	r1, r0
 8004a8e:	1858      	adds	r0, r3, r1
 8004a90:	4282      	cmp	r2, r0
 8004a92:	6019      	str	r1, [r3, #0]
 8004a94:	d1de      	bne.n	8004a54 <_free_r+0x24>
 8004a96:	6810      	ldr	r0, [r2, #0]
 8004a98:	6852      	ldr	r2, [r2, #4]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	6019      	str	r1, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	e7d8      	b.n	8004a54 <_free_r+0x24>
 8004aa2:	d902      	bls.n	8004aaa <_free_r+0x7a>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	602b      	str	r3, [r5, #0]
 8004aa8:	e7d4      	b.n	8004a54 <_free_r+0x24>
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	1821      	adds	r1, r4, r0
 8004aae:	428a      	cmp	r2, r1
 8004ab0:	bf01      	itttt	eq
 8004ab2:	6811      	ldreq	r1, [r2, #0]
 8004ab4:	6852      	ldreq	r2, [r2, #4]
 8004ab6:	1809      	addeq	r1, r1, r0
 8004ab8:	6021      	streq	r1, [r4, #0]
 8004aba:	6062      	str	r2, [r4, #4]
 8004abc:	605c      	str	r4, [r3, #4]
 8004abe:	e7c9      	b.n	8004a54 <_free_r+0x24>
 8004ac0:	bd38      	pop	{r3, r4, r5, pc}
 8004ac2:	bf00      	nop
 8004ac4:	2000060c 	.word	0x2000060c

08004ac8 <_malloc_r>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	1ccd      	adds	r5, r1, #3
 8004acc:	f025 0503 	bic.w	r5, r5, #3
 8004ad0:	3508      	adds	r5, #8
 8004ad2:	2d0c      	cmp	r5, #12
 8004ad4:	bf38      	it	cc
 8004ad6:	250c      	movcc	r5, #12
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	4606      	mov	r6, r0
 8004adc:	db01      	blt.n	8004ae2 <_malloc_r+0x1a>
 8004ade:	42a9      	cmp	r1, r5
 8004ae0:	d903      	bls.n	8004aea <_malloc_r+0x22>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	6033      	str	r3, [r6, #0]
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	bd70      	pop	{r4, r5, r6, pc}
 8004aea:	f000 fa41 	bl	8004f70 <__malloc_lock>
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <_malloc_r+0xac>)
 8004af0:	6814      	ldr	r4, [r2, #0]
 8004af2:	4621      	mov	r1, r4
 8004af4:	b991      	cbnz	r1, 8004b1c <_malloc_r+0x54>
 8004af6:	4c20      	ldr	r4, [pc, #128]	; (8004b78 <_malloc_r+0xb0>)
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	b91b      	cbnz	r3, 8004b04 <_malloc_r+0x3c>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 f97b 	bl	8004df8 <_sbrk_r>
 8004b02:	6020      	str	r0, [r4, #0]
 8004b04:	4629      	mov	r1, r5
 8004b06:	4630      	mov	r0, r6
 8004b08:	f000 f976 	bl	8004df8 <_sbrk_r>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d124      	bne.n	8004b5a <_malloc_r+0x92>
 8004b10:	230c      	movs	r3, #12
 8004b12:	4630      	mov	r0, r6
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	f000 fa2c 	bl	8004f72 <__malloc_unlock>
 8004b1a:	e7e4      	b.n	8004ae6 <_malloc_r+0x1e>
 8004b1c:	680b      	ldr	r3, [r1, #0]
 8004b1e:	1b5b      	subs	r3, r3, r5
 8004b20:	d418      	bmi.n	8004b54 <_malloc_r+0x8c>
 8004b22:	2b0b      	cmp	r3, #11
 8004b24:	d90f      	bls.n	8004b46 <_malloc_r+0x7e>
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	18cc      	adds	r4, r1, r3
 8004b2a:	50cd      	str	r5, [r1, r3]
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 fa20 	bl	8004f72 <__malloc_unlock>
 8004b32:	f104 000b 	add.w	r0, r4, #11
 8004b36:	1d23      	adds	r3, r4, #4
 8004b38:	f020 0007 	bic.w	r0, r0, #7
 8004b3c:	1ac3      	subs	r3, r0, r3
 8004b3e:	d0d3      	beq.n	8004ae8 <_malloc_r+0x20>
 8004b40:	425a      	negs	r2, r3
 8004b42:	50e2      	str	r2, [r4, r3]
 8004b44:	e7d0      	b.n	8004ae8 <_malloc_r+0x20>
 8004b46:	684b      	ldr	r3, [r1, #4]
 8004b48:	428c      	cmp	r4, r1
 8004b4a:	bf16      	itet	ne
 8004b4c:	6063      	strne	r3, [r4, #4]
 8004b4e:	6013      	streq	r3, [r2, #0]
 8004b50:	460c      	movne	r4, r1
 8004b52:	e7eb      	b.n	8004b2c <_malloc_r+0x64>
 8004b54:	460c      	mov	r4, r1
 8004b56:	6849      	ldr	r1, [r1, #4]
 8004b58:	e7cc      	b.n	8004af4 <_malloc_r+0x2c>
 8004b5a:	1cc4      	adds	r4, r0, #3
 8004b5c:	f024 0403 	bic.w	r4, r4, #3
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d005      	beq.n	8004b70 <_malloc_r+0xa8>
 8004b64:	1a21      	subs	r1, r4, r0
 8004b66:	4630      	mov	r0, r6
 8004b68:	f000 f946 	bl	8004df8 <_sbrk_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	d0cf      	beq.n	8004b10 <_malloc_r+0x48>
 8004b70:	6025      	str	r5, [r4, #0]
 8004b72:	e7db      	b.n	8004b2c <_malloc_r+0x64>
 8004b74:	2000060c 	.word	0x2000060c
 8004b78:	20000610 	.word	0x20000610

08004b7c <__sfputc_r>:
 8004b7c:	6893      	ldr	r3, [r2, #8]
 8004b7e:	b410      	push	{r4}
 8004b80:	3b01      	subs	r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	da07      	bge.n	8004b98 <__sfputc_r+0x1c>
 8004b88:	6994      	ldr	r4, [r2, #24]
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	db01      	blt.n	8004b92 <__sfputc_r+0x16>
 8004b8e:	290a      	cmp	r1, #10
 8004b90:	d102      	bne.n	8004b98 <__sfputc_r+0x1c>
 8004b92:	bc10      	pop	{r4}
 8004b94:	f7fe bb5c 	b.w	8003250 <__swbuf_r>
 8004b98:	6813      	ldr	r3, [r2, #0]
 8004b9a:	1c58      	adds	r0, r3, #1
 8004b9c:	6010      	str	r0, [r2, #0]
 8004b9e:	7019      	strb	r1, [r3, #0]
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	bc10      	pop	{r4}
 8004ba4:	4770      	bx	lr

08004ba6 <__sfputs_r>:
 8004ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba8:	4606      	mov	r6, r0
 8004baa:	460f      	mov	r7, r1
 8004bac:	4614      	mov	r4, r2
 8004bae:	18d5      	adds	r5, r2, r3
 8004bb0:	42ac      	cmp	r4, r5
 8004bb2:	d101      	bne.n	8004bb8 <__sfputs_r+0x12>
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	e007      	b.n	8004bc8 <__sfputs_r+0x22>
 8004bb8:	463a      	mov	r2, r7
 8004bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffdc 	bl	8004b7c <__sfputc_r>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d1f3      	bne.n	8004bb0 <__sfputs_r+0xa>
 8004bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bcc <_vfiprintf_r>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	b09d      	sub	sp, #116	; 0x74
 8004bd4:	4617      	mov	r7, r2
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	4606      	mov	r6, r0
 8004bda:	b118      	cbz	r0, 8004be4 <_vfiprintf_r+0x18>
 8004bdc:	6983      	ldr	r3, [r0, #24]
 8004bde:	b90b      	cbnz	r3, 8004be4 <_vfiprintf_r+0x18>
 8004be0:	f7ff fb2a 	bl	8004238 <__sinit>
 8004be4:	4b7c      	ldr	r3, [pc, #496]	; (8004dd8 <_vfiprintf_r+0x20c>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d158      	bne.n	8004c9c <_vfiprintf_r+0xd0>
 8004bea:	6874      	ldr	r4, [r6, #4]
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	0718      	lsls	r0, r3, #28
 8004bf0:	d55e      	bpl.n	8004cb0 <_vfiprintf_r+0xe4>
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05b      	beq.n	8004cb0 <_vfiprintf_r+0xe4>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfc:	2320      	movs	r3, #32
 8004bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c02:	2330      	movs	r3, #48	; 0x30
 8004c04:	f04f 0b01 	mov.w	fp, #1
 8004c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c0c:	9503      	str	r5, [sp, #12]
 8004c0e:	46b8      	mov	r8, r7
 8004c10:	4645      	mov	r5, r8
 8004c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c16:	b10b      	cbz	r3, 8004c1c <_vfiprintf_r+0x50>
 8004c18:	2b25      	cmp	r3, #37	; 0x25
 8004c1a:	d154      	bne.n	8004cc6 <_vfiprintf_r+0xfa>
 8004c1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004c20:	d00b      	beq.n	8004c3a <_vfiprintf_r+0x6e>
 8004c22:	4653      	mov	r3, sl
 8004c24:	463a      	mov	r2, r7
 8004c26:	4621      	mov	r1, r4
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f7ff ffbc 	bl	8004ba6 <__sfputs_r>
 8004c2e:	3001      	adds	r0, #1
 8004c30:	f000 80c2 	beq.w	8004db8 <_vfiprintf_r+0x1ec>
 8004c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c36:	4453      	add	r3, sl
 8004c38:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3a:	f898 3000 	ldrb.w	r3, [r8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80ba 	beq.w	8004db8 <_vfiprintf_r+0x1ec>
 8004c44:	2300      	movs	r3, #0
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	9307      	str	r3, [sp, #28]
 8004c52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c56:	931a      	str	r3, [sp, #104]	; 0x68
 8004c58:	46a8      	mov	r8, r5
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004c60:	485e      	ldr	r0, [pc, #376]	; (8004ddc <_vfiprintf_r+0x210>)
 8004c62:	f7ff fbed 	bl	8004440 <memchr>
 8004c66:	9b04      	ldr	r3, [sp, #16]
 8004c68:	bb78      	cbnz	r0, 8004cca <_vfiprintf_r+0xfe>
 8004c6a:	06d9      	lsls	r1, r3, #27
 8004c6c:	bf44      	itt	mi
 8004c6e:	2220      	movmi	r2, #32
 8004c70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c74:	071a      	lsls	r2, r3, #28
 8004c76:	bf44      	itt	mi
 8004c78:	222b      	movmi	r2, #43	; 0x2b
 8004c7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c7e:	782a      	ldrb	r2, [r5, #0]
 8004c80:	2a2a      	cmp	r2, #42	; 0x2a
 8004c82:	d02a      	beq.n	8004cda <_vfiprintf_r+0x10e>
 8004c84:	46a8      	mov	r8, r5
 8004c86:	2000      	movs	r0, #0
 8004c88:	250a      	movs	r5, #10
 8004c8a:	9a07      	ldr	r2, [sp, #28]
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c92:	3b30      	subs	r3, #48	; 0x30
 8004c94:	2b09      	cmp	r3, #9
 8004c96:	d969      	bls.n	8004d6c <_vfiprintf_r+0x1a0>
 8004c98:	b360      	cbz	r0, 8004cf4 <_vfiprintf_r+0x128>
 8004c9a:	e024      	b.n	8004ce6 <_vfiprintf_r+0x11a>
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <_vfiprintf_r+0x214>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	d101      	bne.n	8004ca6 <_vfiprintf_r+0xda>
 8004ca2:	68b4      	ldr	r4, [r6, #8]
 8004ca4:	e7a2      	b.n	8004bec <_vfiprintf_r+0x20>
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <_vfiprintf_r+0x218>)
 8004ca8:	429c      	cmp	r4, r3
 8004caa:	bf08      	it	eq
 8004cac:	68f4      	ldreq	r4, [r6, #12]
 8004cae:	e79d      	b.n	8004bec <_vfiprintf_r+0x20>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f7fe fb1e 	bl	80032f4 <__swsetup_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d09d      	beq.n	8004bf8 <_vfiprintf_r+0x2c>
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc0:	b01d      	add	sp, #116	; 0x74
 8004cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc6:	46a8      	mov	r8, r5
 8004cc8:	e7a2      	b.n	8004c10 <_vfiprintf_r+0x44>
 8004cca:	4a44      	ldr	r2, [pc, #272]	; (8004ddc <_vfiprintf_r+0x210>)
 8004ccc:	4645      	mov	r5, r8
 8004cce:	1a80      	subs	r0, r0, r2
 8004cd0:	fa0b f000 	lsl.w	r0, fp, r0
 8004cd4:	4318      	orrs	r0, r3
 8004cd6:	9004      	str	r0, [sp, #16]
 8004cd8:	e7be      	b.n	8004c58 <_vfiprintf_r+0x8c>
 8004cda:	9a03      	ldr	r2, [sp, #12]
 8004cdc:	1d11      	adds	r1, r2, #4
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	9103      	str	r1, [sp, #12]
 8004ce2:	2a00      	cmp	r2, #0
 8004ce4:	db01      	blt.n	8004cea <_vfiprintf_r+0x11e>
 8004ce6:	9207      	str	r2, [sp, #28]
 8004ce8:	e004      	b.n	8004cf4 <_vfiprintf_r+0x128>
 8004cea:	4252      	negs	r2, r2
 8004cec:	f043 0302 	orr.w	r3, r3, #2
 8004cf0:	9207      	str	r2, [sp, #28]
 8004cf2:	9304      	str	r3, [sp, #16]
 8004cf4:	f898 3000 	ldrb.w	r3, [r8]
 8004cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cfa:	d10e      	bne.n	8004d1a <_vfiprintf_r+0x14e>
 8004cfc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004d00:	2b2a      	cmp	r3, #42	; 0x2a
 8004d02:	d138      	bne.n	8004d76 <_vfiprintf_r+0x1aa>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	f108 0802 	add.w	r8, r8, #2
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	9203      	str	r2, [sp, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bfb8      	it	lt
 8004d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d18:	9305      	str	r3, [sp, #20]
 8004d1a:	4d33      	ldr	r5, [pc, #204]	; (8004de8 <_vfiprintf_r+0x21c>)
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	f898 1000 	ldrb.w	r1, [r8]
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7ff fb8c 	bl	8004440 <memchr>
 8004d28:	b140      	cbz	r0, 8004d3c <_vfiprintf_r+0x170>
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	1b40      	subs	r0, r0, r5
 8004d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d32:	9b04      	ldr	r3, [sp, #16]
 8004d34:	f108 0801 	add.w	r8, r8, #1
 8004d38:	4303      	orrs	r3, r0
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	f898 1000 	ldrb.w	r1, [r8]
 8004d40:	2206      	movs	r2, #6
 8004d42:	482a      	ldr	r0, [pc, #168]	; (8004dec <_vfiprintf_r+0x220>)
 8004d44:	f108 0701 	add.w	r7, r8, #1
 8004d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d4c:	f7ff fb78 	bl	8004440 <memchr>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d037      	beq.n	8004dc4 <_vfiprintf_r+0x1f8>
 8004d54:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <_vfiprintf_r+0x224>)
 8004d56:	bb1b      	cbnz	r3, 8004da0 <_vfiprintf_r+0x1d4>
 8004d58:	9b03      	ldr	r3, [sp, #12]
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	f023 0307 	bic.w	r3, r3, #7
 8004d60:	3308      	adds	r3, #8
 8004d62:	9303      	str	r3, [sp, #12]
 8004d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d66:	444b      	add	r3, r9
 8004d68:	9309      	str	r3, [sp, #36]	; 0x24
 8004d6a:	e750      	b.n	8004c0e <_vfiprintf_r+0x42>
 8004d6c:	fb05 3202 	mla	r2, r5, r2, r3
 8004d70:	2001      	movs	r0, #1
 8004d72:	4688      	mov	r8, r1
 8004d74:	e78a      	b.n	8004c8c <_vfiprintf_r+0xc0>
 8004d76:	2300      	movs	r3, #0
 8004d78:	250a      	movs	r5, #10
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f108 0801 	add.w	r8, r8, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	4640      	mov	r0, r8
 8004d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d88:	3a30      	subs	r2, #48	; 0x30
 8004d8a:	2a09      	cmp	r2, #9
 8004d8c:	d903      	bls.n	8004d96 <_vfiprintf_r+0x1ca>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0c3      	beq.n	8004d1a <_vfiprintf_r+0x14e>
 8004d92:	9105      	str	r1, [sp, #20]
 8004d94:	e7c1      	b.n	8004d1a <_vfiprintf_r+0x14e>
 8004d96:	fb05 2101 	mla	r1, r5, r1, r2
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	e7f0      	b.n	8004d82 <_vfiprintf_r+0x1b6>
 8004da0:	ab03      	add	r3, sp, #12
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	4622      	mov	r2, r4
 8004da6:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <_vfiprintf_r+0x228>)
 8004da8:	a904      	add	r1, sp, #16
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7fd fe16 	bl	80029dc <_printf_float>
 8004db0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004db4:	4681      	mov	r9, r0
 8004db6:	d1d5      	bne.n	8004d64 <_vfiprintf_r+0x198>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	065b      	lsls	r3, r3, #25
 8004dbc:	f53f af7e 	bmi.w	8004cbc <_vfiprintf_r+0xf0>
 8004dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dc2:	e77d      	b.n	8004cc0 <_vfiprintf_r+0xf4>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	4622      	mov	r2, r4
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <_vfiprintf_r+0x228>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7fe f8b0 	bl	8002f34 <_printf_i>
 8004dd4:	e7ec      	b.n	8004db0 <_vfiprintf_r+0x1e4>
 8004dd6:	bf00      	nop
 8004dd8:	08005e34 	.word	0x08005e34
 8004ddc:	08005f74 	.word	0x08005f74
 8004de0:	08005e54 	.word	0x08005e54
 8004de4:	08005e14 	.word	0x08005e14
 8004de8:	08005f7a 	.word	0x08005f7a
 8004dec:	08005f7e 	.word	0x08005f7e
 8004df0:	080029dd 	.word	0x080029dd
 8004df4:	08004ba7 	.word	0x08004ba7

08004df8 <_sbrk_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	4c05      	ldr	r4, [pc, #20]	; (8004e14 <_sbrk_r+0x1c>)
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	f7fd fcaa 	bl	800275c <_sbrk>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_sbrk_r+0x1a>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_sbrk_r+0x1a>
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	20000784 	.word	0x20000784

08004e18 <__sread>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e20:	f000 f8a8 	bl	8004f74 <_read_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	bfab      	itete	ge
 8004e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e2c:	181b      	addge	r3, r3, r0
 8004e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e32:	bfac      	ite	ge
 8004e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e36:	81a3      	strhlt	r3, [r4, #12]
 8004e38:	bd10      	pop	{r4, pc}

08004e3a <__swrite>:
 8004e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3e:	461f      	mov	r7, r3
 8004e40:	898b      	ldrh	r3, [r1, #12]
 8004e42:	4605      	mov	r5, r0
 8004e44:	05db      	lsls	r3, r3, #23
 8004e46:	460c      	mov	r4, r1
 8004e48:	4616      	mov	r6, r2
 8004e4a:	d505      	bpl.n	8004e58 <__swrite+0x1e>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e54:	f000 f868 	bl	8004f28 <_lseek_r>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	4632      	mov	r2, r6
 8004e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e66:	463b      	mov	r3, r7
 8004e68:	4628      	mov	r0, r5
 8004e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6e:	f000 b817 	b.w	8004ea0 <_write_r>

08004e72 <__sseek>:
 8004e72:	b510      	push	{r4, lr}
 8004e74:	460c      	mov	r4, r1
 8004e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7a:	f000 f855 	bl	8004f28 <_lseek_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	bf15      	itete	ne
 8004e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e8e:	81a3      	strheq	r3, [r4, #12]
 8004e90:	bf18      	it	ne
 8004e92:	81a3      	strhne	r3, [r4, #12]
 8004e94:	bd10      	pop	{r4, pc}

08004e96 <__sclose>:
 8004e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9a:	f000 b813 	b.w	8004ec4 <_close_r>
	...

08004ea0 <_write_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4c05      	ldr	r4, [pc, #20]	; (8004ec0 <_write_r+0x20>)
 8004eac:	6022      	str	r2, [r4, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f7fd f834 	bl	8001f1c <_write>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_write_r+0x1e>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_write_r+0x1e>
 8004ebc:	602b      	str	r3, [r5, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20000784 	.word	0x20000784

08004ec4 <_close_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4c05      	ldr	r4, [pc, #20]	; (8004ee0 <_close_r+0x1c>)
 8004eca:	4605      	mov	r5, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	f7fd fc5e 	bl	8002790 <_close>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_close_r+0x1a>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_close_r+0x1a>
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	20000784 	.word	0x20000784

08004ee4 <_fstat_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4c06      	ldr	r4, [pc, #24]	; (8004f04 <_fstat_r+0x20>)
 8004eea:	4605      	mov	r5, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	f7fd fc50 	bl	8002796 <_fstat>
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d102      	bne.n	8004f00 <_fstat_r+0x1c>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	b103      	cbz	r3, 8004f00 <_fstat_r+0x1c>
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	bd38      	pop	{r3, r4, r5, pc}
 8004f02:	bf00      	nop
 8004f04:	20000784 	.word	0x20000784

08004f08 <_isatty_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4c05      	ldr	r4, [pc, #20]	; (8004f24 <_isatty_r+0x1c>)
 8004f0e:	4605      	mov	r5, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	6023      	str	r3, [r4, #0]
 8004f14:	f7fd fc44 	bl	80027a0 <_isatty>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_isatty_r+0x1a>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_isatty_r+0x1a>
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20000784 	.word	0x20000784

08004f28 <_lseek_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	2200      	movs	r2, #0
 8004f32:	4c05      	ldr	r4, [pc, #20]	; (8004f48 <_lseek_r+0x20>)
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7fd fc34 	bl	80027a4 <_lseek>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_lseek_r+0x1e>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_lseek_r+0x1e>
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	20000784 	.word	0x20000784

08004f4c <__ascii_mbtowc>:
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	b901      	cbnz	r1, 8004f52 <__ascii_mbtowc+0x6>
 8004f50:	a901      	add	r1, sp, #4
 8004f52:	b142      	cbz	r2, 8004f66 <__ascii_mbtowc+0x1a>
 8004f54:	b14b      	cbz	r3, 8004f6a <__ascii_mbtowc+0x1e>
 8004f56:	7813      	ldrb	r3, [r2, #0]
 8004f58:	600b      	str	r3, [r1, #0]
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	1c10      	adds	r0, r2, #0
 8004f5e:	bf18      	it	ne
 8004f60:	2001      	movne	r0, #1
 8004f62:	b002      	add	sp, #8
 8004f64:	4770      	bx	lr
 8004f66:	4610      	mov	r0, r2
 8004f68:	e7fb      	b.n	8004f62 <__ascii_mbtowc+0x16>
 8004f6a:	f06f 0001 	mvn.w	r0, #1
 8004f6e:	e7f8      	b.n	8004f62 <__ascii_mbtowc+0x16>

08004f70 <__malloc_lock>:
 8004f70:	4770      	bx	lr

08004f72 <__malloc_unlock>:
 8004f72:	4770      	bx	lr

08004f74 <_read_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4605      	mov	r5, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	4c05      	ldr	r4, [pc, #20]	; (8004f94 <_read_r+0x20>)
 8004f80:	6022      	str	r2, [r4, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fd fbdc 	bl	8002740 <_read>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_read_r+0x1e>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_read_r+0x1e>
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000784 	.word	0x20000784

08004f98 <__ascii_wctomb>:
 8004f98:	b149      	cbz	r1, 8004fae <__ascii_wctomb+0x16>
 8004f9a:	2aff      	cmp	r2, #255	; 0xff
 8004f9c:	bf8b      	itete	hi
 8004f9e:	238a      	movhi	r3, #138	; 0x8a
 8004fa0:	700a      	strbls	r2, [r1, #0]
 8004fa2:	6003      	strhi	r3, [r0, #0]
 8004fa4:	2001      	movls	r0, #1
 8004fa6:	bf88      	it	hi
 8004fa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004fac:	4770      	bx	lr
 8004fae:	4608      	mov	r0, r1
 8004fb0:	4770      	bx	lr
	...

08004fb4 <_init>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_fini>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr
