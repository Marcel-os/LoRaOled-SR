
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003380  08006d40  08006d40  00016d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a0c0  0800a0c0  0001a0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a0c4  0800a0c4  0001a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001fc  20000000  0800a0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005a4  200001fc  0800a2c4  000201fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200007a0  0800a2c4  000207a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011c53  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ab5  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000811d  00000000  00000000  0003492d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af8  00000000  00000000  0003ca50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001090  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00015289  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b826  00000000  00000000  00053861  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000755bc  00000000  00000000  0005f087  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000d4643  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033b0  00000000  00000000  000d46c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d28 	.word	0x08006d28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08006d28 	.word	0x08006d28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_InitTick+0x3c>)
{
 8000fe8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fea:	7818      	ldrb	r0, [r3, #0]
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_InitTick+0x40>)
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ffc:	f000 f9b2 	bl	8001364 <HAL_SYSTICK_Config>
 8001000:	4604      	mov	r4, r0
 8001002:	b958      	cbnz	r0, 800101c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	2d0f      	cmp	r5, #15
 8001006:	d809      	bhi.n	800101c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	4602      	mov	r2, r0
 800100a:	4629      	mov	r1, r5
 800100c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001010:	f000 f974 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4620      	mov	r0, r4
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_InitTick+0x44>)
 8001018:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800101a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
 800101e:	e7fc      	b.n	800101a <HAL_InitTick+0x36>
 8001020:	20000000 	.word	0x20000000
 8001024:	20000028 	.word	0x20000028
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x20>)
{
 800102e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	f000 f94d 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffd0 	bl	8000fe4 <HAL_InitTick>
  HAL_MspInit();
 8001044:	f001 ff1e 	bl	8002e84 <HAL_MspInit>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd08      	pop	{r3, pc}
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x10>)
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_IncTick+0x14>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	440b      	add	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000062c 	.word	0x2000062c
 8001064:	20000000 	.word	0x20000000

08001068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_GetTick+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	2000062c 	.word	0x2000062c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fff6 	bl	8001068 <HAL_GetTick>
 800107c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001080:	bf1e      	ittt	ne
 8001082:	4b04      	ldrne	r3, [pc, #16]	; (8001094 <HAL_Delay+0x20>)
 8001084:	781b      	ldrbne	r3, [r3, #0]
 8001086:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	1b40      	subs	r0, r0, r5
 800108e:	42a0      	cmp	r0, r4
 8001090:	d3fa      	bcc.n	8001088 <HAL_Delay+0x14>
  {
  }
}
 8001092:	bd38      	pop	{r3, r4, r5, pc}
 8001094:	20000000 	.word	0x20000000

08001098 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001098:	2300      	movs	r3, #0
{ 
 800109a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800109c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800109e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d06d      	beq.n	8001182 <HAL_ADC_ConfigChannel+0xea>
 80010a6:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a8:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80010aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80010ae:	2d06      	cmp	r5, #6
 80010b0:	6802      	ldr	r2, [r0, #0]
 80010b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80010b6:	680c      	ldr	r4, [r1, #0]
 80010b8:	d823      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010ba:	261f      	movs	r6, #31
 80010bc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80010be:	3b05      	subs	r3, #5
 80010c0:	409e      	lsls	r6, r3
 80010c2:	ea25 0506 	bic.w	r5, r5, r6
 80010c6:	fa04 f303 	lsl.w	r3, r4, r3
 80010ca:	432b      	orrs	r3, r5
 80010cc:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010ce:	2c09      	cmp	r4, #9
 80010d0:	688b      	ldr	r3, [r1, #8]
 80010d2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80010d6:	f04f 0107 	mov.w	r1, #7
 80010da:	d92a      	bls.n	8001132 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010dc:	68d6      	ldr	r6, [r2, #12]
 80010de:	3d1e      	subs	r5, #30
 80010e0:	40a9      	lsls	r1, r5
 80010e2:	ea26 0101 	bic.w	r1, r6, r1
 80010e6:	40ab      	lsls	r3, r5
 80010e8:	430b      	orrs	r3, r1
 80010ea:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ec:	f1a4 0310 	sub.w	r3, r4, #16
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d926      	bls.n	8001142 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	b002      	add	sp, #8
 8001100:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001102:	2d0c      	cmp	r5, #12
 8001104:	f04f 051f 	mov.w	r5, #31
 8001108:	d809      	bhi.n	800111e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800110a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800110c:	3b23      	subs	r3, #35	; 0x23
 800110e:	409d      	lsls	r5, r3
 8001110:	ea26 0505 	bic.w	r5, r6, r5
 8001114:	fa04 f303 	lsl.w	r3, r4, r3
 8001118:	432b      	orrs	r3, r5
 800111a:	6313      	str	r3, [r2, #48]	; 0x30
 800111c:	e7d7      	b.n	80010ce <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800111e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001120:	3b41      	subs	r3, #65	; 0x41
 8001122:	409d      	lsls	r5, r3
 8001124:	ea26 0505 	bic.w	r5, r6, r5
 8001128:	fa04 f303 	lsl.w	r3, r4, r3
 800112c:	432b      	orrs	r3, r5
 800112e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001130:	e7cd      	b.n	80010ce <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001132:	6916      	ldr	r6, [r2, #16]
 8001134:	40a9      	lsls	r1, r5
 8001136:	ea26 0101 	bic.w	r1, r6, r1
 800113a:	40ab      	lsls	r3, r5
 800113c:	430b      	orrs	r3, r1
 800113e:	6113      	str	r3, [r2, #16]
 8001140:	e7d4      	b.n	80010ec <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_ADC_ConfigChannel+0xf0>)
 8001144:	429a      	cmp	r2, r3
 8001146:	d116      	bne.n	8001176 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001148:	6893      	ldr	r3, [r2, #8]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	d4d2      	bmi.n	80010f4 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800114e:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001150:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001152:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001156:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001158:	d1cc      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_ADC_ConfigChannel+0xf4>)
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <HAL_ADC_ConfigChannel+0xf8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	fbb3 f2f2 	udiv	r2, r3, r2
 8001164:	230a      	movs	r3, #10
 8001166:	4353      	muls	r3, r2
            wait_loop_index--;
 8001168:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0c1      	beq.n	80010f4 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	e7f8      	b.n	8001168 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001176:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e7b9      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8001182:	2302      	movs	r3, #2
 8001184:	e7ba      	b.n	80010fc <HAL_ADC_ConfigChannel+0x64>
 8001186:	bf00      	nop
 8001188:	40012400 	.word	0x40012400
 800118c:	20000028 	.word	0x20000028
 8001190:	000f4240 	.word	0x000f4240

08001194 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001194:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001196:	6803      	ldr	r3, [r0, #0]
{
 8001198:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	07d2      	lsls	r2, r2, #31
 800119e:	d401      	bmi.n	80011a4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011a0:	2000      	movs	r0, #0
}
 80011a2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80011ac:	f7ff ff5c 	bl	8001068 <HAL_GetTick>
 80011b0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	07db      	lsls	r3, r3, #31
 80011b8:	d5f2      	bpl.n	80011a0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011ba:	f7ff ff55 	bl	8001068 <HAL_GetTick>
 80011be:	1b40      	subs	r0, r0, r5
 80011c0:	2802      	cmp	r0, #2
 80011c2:	d9f6      	bls.n	80011b2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011d6:	e7e4      	b.n	80011a2 <ADC_ConversionStop_Disable+0xe>

080011d8 <HAL_ADC_Init>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80011da:	4604      	mov	r4, r0
 80011dc:	2800      	cmp	r0, #0
 80011de:	d070      	beq.n	80012c2 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011e2:	b923      	cbnz	r3, 80011ee <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80011e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80011ea:	f001 fe6d 	bl	8002ec8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff ffd0 	bl	8001194 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011fc:	d163      	bne.n	80012c6 <HAL_ADC_Init+0xee>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d161      	bne.n	80012c6 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001202:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001204:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001208:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	f023 0302 	bic.w	r3, r3, #2
 800120e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001212:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001214:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001216:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001218:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800121a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800121e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001222:	d037      	beq.n	8001294 <HAL_ADC_Init+0xbc>
 8001224:	2901      	cmp	r1, #1
 8001226:	bf14      	ite	ne
 8001228:	4606      	movne	r6, r0
 800122a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800122e:	7d25      	ldrb	r5, [r4, #20]
 8001230:	2d01      	cmp	r5, #1
 8001232:	d106      	bne.n	8001242 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001234:	bb83      	cbnz	r3, 8001298 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001236:	69a3      	ldr	r3, [r4, #24]
 8001238:	3b01      	subs	r3, #1
 800123a:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800123e:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001242:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001244:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001248:	685d      	ldr	r5, [r3, #4]
 800124a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800124e:	ea45 0506 	orr.w	r5, r5, r6
 8001252:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001254:	689e      	ldr	r6, [r3, #8]
 8001256:	4d1e      	ldr	r5, [pc, #120]	; (80012d0 <HAL_ADC_Init+0xf8>)
 8001258:	ea05 0506 	and.w	r5, r5, r6
 800125c:	ea45 0502 	orr.w	r5, r5, r2
 8001260:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001262:	d001      	beq.n	8001268 <HAL_ADC_Init+0x90>
 8001264:	2901      	cmp	r1, #1
 8001266:	d120      	bne.n	80012aa <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001268:	6921      	ldr	r1, [r4, #16]
 800126a:	3901      	subs	r1, #1
 800126c:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800126e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001270:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001274:	4329      	orrs	r1, r5
 8001276:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001278:	6899      	ldr	r1, [r3, #8]
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_ADC_Init+0xfc>)
 800127c:	400b      	ands	r3, r1
 800127e:	429a      	cmp	r2, r3
 8001280:	d115      	bne.n	80012ae <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 8001282:	2300      	movs	r3, #0
 8001284:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001286:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001288:	f023 0303 	bic.w	r3, r3, #3
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001292:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001294:	460e      	mov	r6, r1
 8001296:	e7ca      	b.n	800122e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012a8:	e7cb      	b.n	8001242 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 80012aa:	2100      	movs	r1, #0
 80012ac:	e7df      	b.n	800126e <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 80012ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b0:	f023 0312 	bic.w	r3, r3, #18
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7e5      	b.n	8001292 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80012cc:	e7f9      	b.n	80012c2 <HAL_ADC_Init+0xea>
 80012ce:	bf00      	nop
 80012d0:	ffe1f7fd 	.word	0xffe1f7fd
 80012d4:	ff1f0efe 	.word	0xff1f0efe

080012d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80012f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b570      	push	{r4, r5, r6, lr}
 8001300:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001302:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001306:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130a:	f1c4 0507 	rsb	r5, r4, #7
 800130e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001310:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001314:	bf28      	it	cs
 8001316:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001318:	2b06      	cmp	r3, #6
 800131a:	bf98      	it	ls
 800131c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001322:	bf88      	it	hi
 8001324:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001326:	ea21 0303 	bic.w	r3, r1, r3
 800132a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	fa06 f404 	lsl.w	r4, r6, r4
 8001330:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001336:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	bfa8      	it	ge
 800133c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001340:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	bfb8      	it	lt
 8001346:	4a06      	ldrlt	r2, [pc, #24]	; (8001360 <HAL_NVIC_SetPriority+0x64>)
 8001348:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	bfab      	itete	ge
 800134c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	e000ed14 	.word	0xe000ed14

08001364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	3801      	subs	r0, #1
 8001366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800136a:	d20a      	bcs.n	8001382 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001394:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001396:	4626      	mov	r6, r4
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001540 <HAL_GPIO_Init+0x1b0>
 800139e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001544 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	680a      	ldr	r2, [r1, #0]
 80013a4:	fa32 f506 	lsrs.w	r5, r2, r6
 80013a8:	d102      	bne.n	80013b0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80013aa:	b003      	add	sp, #12
 80013ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80013b0:	f04f 0801 	mov.w	r8, #1
 80013b4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80013bc:	4590      	cmp	r8, r2
 80013be:	d17e      	bne.n	80014be <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80013c0:	684d      	ldr	r5, [r1, #4]
 80013c2:	2d12      	cmp	r5, #18
 80013c4:	f000 80a9 	beq.w	800151a <HAL_GPIO_Init+0x18a>
 80013c8:	f200 8082 	bhi.w	80014d0 <HAL_GPIO_Init+0x140>
 80013cc:	2d02      	cmp	r5, #2
 80013ce:	f000 80a1 	beq.w	8001514 <HAL_GPIO_Init+0x184>
 80013d2:	d876      	bhi.n	80014c2 <HAL_GPIO_Init+0x132>
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	f000 8088 	beq.w	80014ea <HAL_GPIO_Init+0x15a>
 80013da:	2d01      	cmp	r5, #1
 80013dc:	f000 8098 	beq.w	8001510 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e4:	2aff      	cmp	r2, #255	; 0xff
 80013e6:	bf93      	iteet	ls
 80013e8:	4682      	movls	sl, r0
 80013ea:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80013ee:	3d08      	subhi	r5, #8
 80013f0:	f8d0 b000 	ldrls.w	fp, [r0]
 80013f4:	bf92      	itee	ls
 80013f6:	00b5      	lslls	r5, r6, #2
 80013f8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80013fc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013fe:	fa09 f805 	lsl.w	r8, r9, r5
 8001402:	ea2b 0808 	bic.w	r8, fp, r8
 8001406:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800140a:	bf88      	it	hi
 800140c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001410:	ea48 0505 	orr.w	r5, r8, r5
 8001414:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800141c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001420:	d04d      	beq.n	80014be <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4f44      	ldr	r7, [pc, #272]	; (8001534 <HAL_GPIO_Init+0x1a4>)
 8001424:	f026 0803 	bic.w	r8, r6, #3
 8001428:	69bd      	ldr	r5, [r7, #24]
 800142a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800142e:	f045 0501 	orr.w	r5, r5, #1
 8001432:	61bd      	str	r5, [r7, #24]
 8001434:	69bd      	ldr	r5, [r7, #24]
 8001436:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800143a:	f005 0501 	and.w	r5, r5, #1
 800143e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001440:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001444:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001446:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800144a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001452:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001456:	4d38      	ldr	r5, [pc, #224]	; (8001538 <HAL_GPIO_Init+0x1a8>)
 8001458:	42a8      	cmp	r0, r5
 800145a:	d063      	beq.n	8001524 <HAL_GPIO_Init+0x194>
 800145c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001460:	42a8      	cmp	r0, r5
 8001462:	d061      	beq.n	8001528 <HAL_GPIO_Init+0x198>
 8001464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001468:	42a8      	cmp	r0, r5
 800146a:	d05f      	beq.n	800152c <HAL_GPIO_Init+0x19c>
 800146c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001470:	42a8      	cmp	r0, r5
 8001472:	bf0c      	ite	eq
 8001474:	2503      	moveq	r5, #3
 8001476:	2504      	movne	r5, #4
 8001478:	fa05 f50b 	lsl.w	r5, r5, fp
 800147c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001480:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001484:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001486:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800148a:	bf14      	ite	ne
 800148c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800148e:	4395      	biceq	r5, r2
 8001490:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001492:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001498:	bf14      	ite	ne
 800149a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800149c:	4395      	biceq	r5, r2
 800149e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a0:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a6:	bf14      	ite	ne
 80014a8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014aa:	4395      	biceq	r5, r2
 80014ac:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ae:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b4:	bf14      	ite	ne
 80014b6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b8:	ea25 0202 	biceq.w	r2, r5, r2
 80014bc:	60da      	str	r2, [r3, #12]
	position++;
 80014be:	3601      	adds	r6, #1
 80014c0:	e76f      	b.n	80013a2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80014c2:	2d03      	cmp	r5, #3
 80014c4:	d022      	beq.n	800150c <HAL_GPIO_Init+0x17c>
 80014c6:	2d11      	cmp	r5, #17
 80014c8:	d18a      	bne.n	80013e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ca:	68cc      	ldr	r4, [r1, #12]
 80014cc:	3404      	adds	r4, #4
          break;
 80014ce:	e787      	b.n	80013e0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80014d0:	4f1a      	ldr	r7, [pc, #104]	; (800153c <HAL_GPIO_Init+0x1ac>)
 80014d2:	42bd      	cmp	r5, r7
 80014d4:	d009      	beq.n	80014ea <HAL_GPIO_Init+0x15a>
 80014d6:	d812      	bhi.n	80014fe <HAL_GPIO_Init+0x16e>
 80014d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001548 <HAL_GPIO_Init+0x1b8>
 80014dc:	454d      	cmp	r5, r9
 80014de:	d004      	beq.n	80014ea <HAL_GPIO_Init+0x15a>
 80014e0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80014e4:	454d      	cmp	r5, r9
 80014e6:	f47f af7b 	bne.w	80013e0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ea:	688c      	ldr	r4, [r1, #8]
 80014ec:	b1c4      	cbz	r4, 8001520 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ee:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80014f0:	bf0c      	ite	eq
 80014f2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80014f6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fa:	2408      	movs	r4, #8
 80014fc:	e770      	b.n	80013e0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80014fe:	4565      	cmp	r5, ip
 8001500:	d0f3      	beq.n	80014ea <HAL_GPIO_Init+0x15a>
 8001502:	4575      	cmp	r5, lr
 8001504:	d0f1      	beq.n	80014ea <HAL_GPIO_Init+0x15a>
 8001506:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800154c <HAL_GPIO_Init+0x1bc>
 800150a:	e7eb      	b.n	80014e4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2400      	movs	r4, #0
 800150e:	e767      	b.n	80013e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	68cc      	ldr	r4, [r1, #12]
          break;
 8001512:	e765      	b.n	80013e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001514:	68cc      	ldr	r4, [r1, #12]
 8001516:	3408      	adds	r4, #8
          break;
 8001518:	e762      	b.n	80013e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151a:	68cc      	ldr	r4, [r1, #12]
 800151c:	340c      	adds	r4, #12
          break;
 800151e:	e75f      	b.n	80013e0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001520:	2404      	movs	r4, #4
 8001522:	e75d      	b.n	80013e0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001524:	2500      	movs	r5, #0
 8001526:	e7a7      	b.n	8001478 <HAL_GPIO_Init+0xe8>
 8001528:	2501      	movs	r5, #1
 800152a:	e7a5      	b.n	8001478 <HAL_GPIO_Init+0xe8>
 800152c:	2502      	movs	r5, #2
 800152e:	e7a3      	b.n	8001478 <HAL_GPIO_Init+0xe8>
 8001530:	40010400 	.word	0x40010400
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	10210000 	.word	0x10210000
 8001540:	10310000 	.word	0x10310000
 8001544:	10320000 	.word	0x10320000
 8001548:	10110000 	.word	0x10110000
 800154c:	10220000 	.word	0x10220000

08001550 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	b10a      	cbz	r2, 8001556 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	6101      	str	r1, [r0, #16]
  }
}
 8001554:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001556:	0409      	lsls	r1, r1, #16
 8001558:	e7fb      	b.n	8001552 <HAL_GPIO_WritePin+0x2>

0800155a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800155a:	6801      	ldr	r1, [r0, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	694b      	ldr	r3, [r1, #20]
 8001560:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001564:	d010      	beq.n	8001588 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001566:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800156a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800156c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800156e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001570:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001574:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001578:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
 8001586:	4770      	bx	lr
  }
  return HAL_OK;
 8001588:	4618      	mov	r0, r3
}
 800158a:	4770      	bx	lr

0800158c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001590:	4604      	mov	r4, r0
 8001592:	4616      	mov	r6, r2
 8001594:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001596:	b28f      	uxth	r7, r1
 8001598:	6825      	ldr	r5, [r4, #0]
 800159a:	6968      	ldr	r0, [r5, #20]
 800159c:	ea37 0000 	bics.w	r0, r7, r0
 80015a0:	d017      	beq.n	80015d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a2:	696b      	ldr	r3, [r5, #20]
 80015a4:	055a      	lsls	r2, r3, #21
 80015a6:	d516      	bpl.n	80015d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80015aa:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80015b6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015c6:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015cc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80015ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80015d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80015d6:	1c73      	adds	r3, r6, #1
 80015d8:	d0df      	beq.n	800159a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015da:	f7ff fd45 	bl	8001068 <HAL_GetTick>
 80015de:	eba0 0008 	sub.w	r0, r0, r8
 80015e2:	42b0      	cmp	r0, r6
 80015e4:	d801      	bhi.n	80015ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 80015e6:	2e00      	cmp	r6, #0
 80015e8:	d1d6      	bne.n	8001598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015ea:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80015ec:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015ee:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	e7e4      	b.n	80015ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08001600 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
 8001606:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001608:	6823      	ldr	r3, [r4, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	075b      	lsls	r3, r3, #29
 800160e:	d501      	bpl.n	8001614 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001610:	2000      	movs	r0, #0
}
 8001612:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001614:	4620      	mov	r0, r4
 8001616:	f7ff ffa0 	bl	800155a <I2C_IsAcknowledgeFailed>
 800161a:	b9a8      	cbnz	r0, 8001648 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800161c:	1c6a      	adds	r2, r5, #1
 800161e:	d0f3      	beq.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001620:	f7ff fd22 	bl	8001068 <HAL_GetTick>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	42a8      	cmp	r0, r5
 8001628:	d801      	bhi.n	800162e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800162a:	2d00      	cmp	r5, #0
 800162c:	d1ec      	bne.n	8001608 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800162e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001630:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001632:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001634:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001638:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800163c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800163e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	e7e2      	b.n	8001612 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800164c <I2C_WaitOnFlagUntilTimeout>:
{
 800164c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001650:	4604      	mov	r4, r0
 8001652:	4690      	mov	r8, r2
 8001654:	461f      	mov	r7, r3
 8001656:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001658:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800165c:	b28d      	uxth	r5, r1
 800165e:	6821      	ldr	r1, [r4, #0]
 8001660:	f1b9 0f01 	cmp.w	r9, #1
 8001664:	bf0c      	ite	eq
 8001666:	694b      	ldreq	r3, [r1, #20]
 8001668:	698b      	ldrne	r3, [r1, #24]
 800166a:	ea35 0303 	bics.w	r3, r5, r3
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	4598      	cmp	r8, r3
 8001676:	d001      	beq.n	800167c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001678:	2000      	movs	r0, #0
 800167a:	e016      	b.n	80016aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800167c:	1c7b      	adds	r3, r7, #1
 800167e:	d0ef      	beq.n	8001660 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001680:	f7ff fcf2 	bl	8001068 <HAL_GetTick>
 8001684:	1b80      	subs	r0, r0, r6
 8001686:	42b8      	cmp	r0, r7
 8001688:	d801      	bhi.n	800168e <I2C_WaitOnFlagUntilTimeout+0x42>
 800168a:	2f00      	cmp	r7, #0
 800168c:	d1e7      	bne.n	800165e <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800168e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001690:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001692:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001694:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001696:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800169a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800169e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	f042 0220 	orr.w	r2, r2, #32
 80016a8:	6422      	str	r2, [r4, #64]	; 0x40
}
 80016aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080016ae <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80016ae:	b570      	push	{r4, r5, r6, lr}
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	061b      	lsls	r3, r3, #24
 80016bc:	d501      	bpl.n	80016c2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
}
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff ff49 	bl	800155a <I2C_IsAcknowledgeFailed>
 80016c8:	b9a8      	cbnz	r0, 80016f6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80016ca:	1c6a      	adds	r2, r5, #1
 80016cc:	d0f3      	beq.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff fccb 	bl	8001068 <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	42a8      	cmp	r0, r5
 80016d6:	d801      	bhi.n	80016dc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80016d8:	2d00      	cmp	r5, #0
 80016da:	d1ec      	bne.n	80016b6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016dc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80016de:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016e0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016f0:	f042 0220 	orr.w	r2, r2, #32
 80016f4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7e2      	b.n	80016c0 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080016fc <I2C_RequestMemoryWrite>:
{
 80016fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001700:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001702:	6802      	ldr	r2, [r0, #0]
{
 8001704:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001706:	6813      	ldr	r3, [r2, #0]
{
 8001708:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
{
 8001710:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001712:	9600      	str	r6, [sp, #0]
 8001714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800171c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800171e:	f7ff ff95 	bl	800164c <I2C_WaitOnFlagUntilTimeout>
 8001722:	b118      	cbz	r0, 800172c <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
}
 8001726:	b004      	add	sp, #16
 8001728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001732:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001736:	4633      	mov	r3, r6
 8001738:	4916      	ldr	r1, [pc, #88]	; (8001794 <I2C_RequestMemoryWrite+0x98>)
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff26 	bl	800158c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001740:	2800      	cmp	r0, #0
 8001742:	d1ef      	bne.n	8001724 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	9003      	str	r0, [sp, #12]
 8001748:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800174a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174c:	9203      	str	r2, [sp, #12]
 800174e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001750:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001752:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001754:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001756:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001758:	f7ff ffa9 	bl	80016ae <I2C_WaitOnTXEFlagUntilTimeout>
 800175c:	b140      	cbz	r0, 8001770 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001760:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001762:	bf01      	itttt	eq
 8001764:	6822      	ldreq	r2, [r4, #0]
 8001766:	6813      	ldreq	r3, [r2, #0]
 8001768:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800176c:	6013      	streq	r3, [r2, #0]
 800176e:	e7d9      	b.n	8001724 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001770:	f1b8 0f01 	cmp.w	r8, #1
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	d102      	bne.n	800177e <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001778:	b2ed      	uxtb	r5, r5
 800177a:	611d      	str	r5, [r3, #16]
 800177c:	e7d3      	b.n	8001726 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800177e:	0a2a      	lsrs	r2, r5, #8
 8001780:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001782:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001784:	4632      	mov	r2, r6
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff ff91 	bl	80016ae <I2C_WaitOnTXEFlagUntilTimeout>
 800178c:	2800      	cmp	r0, #0
 800178e:	d1e6      	bne.n	800175e <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	e7f1      	b.n	8001778 <I2C_RequestMemoryWrite+0x7c>
 8001794:	00010002 	.word	0x00010002

08001798 <HAL_I2C_Init>:
{
 8001798:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800179a:	4604      	mov	r4, r0
 800179c:	b908      	cbnz	r0, 80017a2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800179e:	2001      	movs	r0, #1
}
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017aa:	b91b      	cbnz	r3, 80017b4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80017ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80017b0:	f001 fbb8 	bl	8002f24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80017b6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80017bc:	6813      	ldr	r3, [r2, #0]
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c4:	f000 fb90 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017c8:	6863      	ldr	r3, [r4, #4]
 80017ca:	4a41      	ldr	r2, [pc, #260]	; (80018d0 <HAL_I2C_Init+0x138>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d84d      	bhi.n	800186c <HAL_I2C_Init+0xd4>
 80017d0:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <HAL_I2C_Init+0x13c>)
 80017d2:	4290      	cmp	r0, r2
 80017d4:	d9e3      	bls.n	800179e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80017d6:	4940      	ldr	r1, [pc, #256]	; (80018d8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80017da:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017de:	6855      	ldr	r5, [r2, #4]
 80017e0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80017e4:	430d      	orrs	r5, r1
 80017e6:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017e8:	6a15      	ldr	r5, [r2, #32]
 80017ea:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80017ee:	3101      	adds	r1, #1
 80017f0:	4329      	orrs	r1, r5
 80017f2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017f4:	69d1      	ldr	r1, [r2, #28]
 80017f6:	4d36      	ldr	r5, [pc, #216]	; (80018d0 <HAL_I2C_Init+0x138>)
 80017f8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80017fc:	42ab      	cmp	r3, r5
 80017fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001802:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001806:	d848      	bhi.n	800189a <HAL_I2C_Init+0x102>
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fbb0 f0f3 	udiv	r0, r0, r3
 800180e:	1c43      	adds	r3, r0, #1
 8001810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	bf38      	it	cc
 8001818:	2304      	movcc	r3, #4
 800181a:	430b      	orrs	r3, r1
 800181c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181e:	6811      	ldr	r1, [r2, #0]
 8001820:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001824:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001828:	4303      	orrs	r3, r0
 800182a:	430b      	orrs	r3, r1
 800182c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800182e:	6891      	ldr	r1, [r2, #8]
 8001830:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001834:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001838:	4303      	orrs	r3, r0
 800183a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800183e:	430b      	orrs	r3, r1
 8001840:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001842:	68d1      	ldr	r1, [r2, #12]
 8001844:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001848:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800184c:	4303      	orrs	r3, r0
 800184e:	430b      	orrs	r3, r1
 8001850:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001852:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001854:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800185c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001860:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001864:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001866:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800186a:	e799      	b.n	80017a0 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_I2C_Init+0x144>)
 800186e:	4290      	cmp	r0, r2
 8001870:	d995      	bls.n	800179e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001872:	4e19      	ldr	r6, [pc, #100]	; (80018d8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001874:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001878:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800187c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187e:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001880:	6855      	ldr	r5, [r2, #4]
 8001882:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001886:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001888:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800188e:	6a15      	ldr	r5, [r2, #32]
 8001890:	fbb1 f1f6 	udiv	r1, r1, r6
 8001894:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001898:	e7a9      	b.n	80017ee <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189a:	68a5      	ldr	r5, [r4, #8]
 800189c:	b955      	cbnz	r5, 80018b4 <HAL_I2C_Init+0x11c>
 800189e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80018a6:	1c43      	adds	r3, r0, #1
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	b16b      	cbz	r3, 80018ca <HAL_I2C_Init+0x132>
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b2:	e7b2      	b.n	800181a <HAL_I2C_Init+0x82>
 80018b4:	2519      	movs	r5, #25
 80018b6:	436b      	muls	r3, r5
 80018b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80018bc:	1c43      	adds	r3, r0, #1
 80018be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c2:	b113      	cbz	r3, 80018ca <HAL_I2C_Init+0x132>
 80018c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c8:	e7a7      	b.n	800181a <HAL_I2C_Init+0x82>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e7a5      	b.n	800181a <HAL_I2C_Init+0x82>
 80018ce:	bf00      	nop
 80018d0:	000186a0 	.word	0x000186a0
 80018d4:	001e847f 	.word	0x001e847f
 80018d8:	000f4240 	.word	0x000f4240
 80018dc:	003d08ff 	.word	0x003d08ff

080018e0 <HAL_I2C_Mem_Write>:
{
 80018e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018e4:	4604      	mov	r4, r0
 80018e6:	4699      	mov	r9, r3
 80018e8:	460f      	mov	r7, r1
 80018ea:	4690      	mov	r8, r2
 80018ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80018ee:	f7ff fbbb 	bl	8001068 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80018f6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f8:	2b20      	cmp	r3, #32
 80018fa:	d003      	beq.n	8001904 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80018fc:	2002      	movs	r0, #2
}
 80018fe:	b003      	add	sp, #12
 8001900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001904:	9000      	str	r0, [sp, #0]
 8001906:	2319      	movs	r3, #25
 8001908:	2201      	movs	r2, #1
 800190a:	493b      	ldr	r1, [pc, #236]	; (80019f8 <HAL_I2C_Mem_Write+0x118>)
 800190c:	4620      	mov	r0, r4
 800190e:	f7ff fe9d 	bl	800164c <I2C_WaitOnFlagUntilTimeout>
 8001912:	2800      	cmp	r0, #0
 8001914:	d1f2      	bne.n	80018fc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001916:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d0ee      	beq.n	80018fc <HAL_I2C_Mem_Write+0x1c>
 800191e:	2301      	movs	r3, #1
 8001920:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001924:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001926:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800192c:	bf58      	it	pl
 800192e:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001930:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001932:	bf5c      	itt	pl
 8001934:	f042 0201 	orrpl.w	r2, r2, #1
 8001938:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001940:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001942:	2321      	movs	r3, #33	; 0x21
 8001944:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001954:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8001958:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800195a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800195e:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001960:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001962:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001964:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <HAL_I2C_Mem_Write+0x11c>)
 8001968:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196a:	464b      	mov	r3, r9
 800196c:	f7ff fec6 	bl	80016fc <I2C_RequestMemoryWrite>
 8001970:	2800      	cmp	r0, #0
 8001972:	d02a      	beq.n	80019ca <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	e7c2      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	f7ff fe99 	bl	80016ae <I2C_WaitOnTXEFlagUntilTimeout>
 800197c:	b140      	cbz	r0, 8001990 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001980:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001982:	bf01      	itttt	eq
 8001984:	6822      	ldreq	r2, [r4, #0]
 8001986:	6813      	ldreq	r3, [r2, #0]
 8001988:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800198c:	6013      	streq	r3, [r2, #0]
 800198e:	e7f1      	b.n	8001974 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001992:	6827      	ldr	r7, [r4, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	f812 1b01 	ldrb.w	r1, [r2], #1
 800199a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800199c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800199e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80019a0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80019a2:	3a01      	subs	r2, #1
 80019a4:	b292      	uxth	r2, r2
 80019a6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019a8:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80019aa:	1e48      	subs	r0, r1, #1
 80019ac:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ae:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80019b0:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019b2:	d50a      	bpl.n	80019ca <HAL_I2C_Mem_Write+0xea>
 80019b4:	b148      	cbz	r0, 80019ca <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019b6:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80019b8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ba:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80019bc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80019be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80019c0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80019c6:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80019c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019cc:	462a      	mov	r2, r5
 80019ce:	4631      	mov	r1, r6
 80019d0:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1d0      	bne.n	8001978 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d6:	f7ff fe13 	bl	8001600 <I2C_WaitOnBTFFlagUntilTimeout>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d1cf      	bne.n	800197e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80019ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80019f6:	e782      	b.n	80018fe <HAL_I2C_Mem_Write+0x1e>
 80019f8:	00100002 	.word	0x00100002
 80019fc:	ffff0000 	.word	0xffff0000

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a04:	4605      	mov	r5, r0
 8001a06:	b908      	cbnz	r0, 8001a0c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
 8001a0a:	e03c      	b.n	8001a86 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0c:	6803      	ldr	r3, [r0, #0]
 8001a0e:	07db      	lsls	r3, r3, #31
 8001a10:	d410      	bmi.n	8001a34 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	682b      	ldr	r3, [r5, #0]
 8001a14:	079f      	lsls	r7, r3, #30
 8001a16:	d45d      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	0719      	lsls	r1, r3, #28
 8001a1c:	f100 8094 	bmi.w	8001b48 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	075a      	lsls	r2, r3, #29
 8001a24:	f100 80be 	bmi.w	8001ba4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a28:	69e8      	ldr	r0, [r5, #28]
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	f040 812c 	bne.w	8001c88 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	e028      	b.n	8001a86 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a34:	4c8f      	ldr	r4, [pc, #572]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d007      	beq.n	8001a50 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a40:	6863      	ldr	r3, [r4, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_OscConfig+0x5e>
 8001a4a:	6863      	ldr	r3, [r4, #4]
 8001a4c:	03de      	lsls	r6, r3, #15
 8001a4e:	d506      	bpl.n	8001a5e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	039c      	lsls	r4, r3, #14
 8001a54:	d5dd      	bpl.n	8001a12 <HAL_RCC_OscConfig+0x12>
 8001a56:	686b      	ldr	r3, [r5, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1da      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
 8001a5c:	e7d4      	b.n	8001a08 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	686b      	ldr	r3, [r5, #4]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d112      	bne.n	8001a8c <HAL_RCC_OscConfig+0x8c>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fafb 	bl	8001068 <HAL_GetTick>
 8001a72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	0398      	lsls	r0, r3, #14
 8001a78:	d4cb      	bmi.n	8001a12 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7a:	f7ff faf5 	bl	8001068 <HAL_GetTick>
 8001a7e:	1b80      	subs	r0, r0, r6
 8001a80:	2864      	cmp	r0, #100	; 0x64
 8001a82:	d9f7      	bls.n	8001a74 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
}
 8001a86:	b002      	add	sp, #8
 8001a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	b99b      	cbnz	r3, 8001ab6 <HAL_RCC_OscConfig+0xb6>
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6023      	str	r3, [r4, #0]
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fae3 	bl	8001068 <HAL_GetTick>
 8001aa2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	0399      	lsls	r1, r3, #14
 8001aa8:	d5b3      	bpl.n	8001a12 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aaa:	f7ff fadd 	bl	8001068 <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	2864      	cmp	r0, #100	; 0x64
 8001ab2:	d9f7      	bls.n	8001aa4 <HAL_RCC_OscConfig+0xa4>
 8001ab4:	e7e6      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	d103      	bne.n	8001ac6 <HAL_RCC_OscConfig+0xc6>
 8001abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac2:	6023      	str	r3, [r4, #0]
 8001ac4:	e7cf      	b.n	8001a66 <HAL_RCC_OscConfig+0x66>
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	e7cb      	b.n	8001a6c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad4:	4c67      	ldr	r4, [pc, #412]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	6863      	ldr	r3, [r4, #4]
 8001ad8:	f013 0f0c 	tst.w	r3, #12
 8001adc:	d007      	beq.n	8001aee <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d110      	bne.n	8001b0a <HAL_RCC_OscConfig+0x10a>
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	03da      	lsls	r2, r3, #15
 8001aec:	d40d      	bmi.n	8001b0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	079b      	lsls	r3, r3, #30
 8001af2:	d502      	bpl.n	8001afa <HAL_RCC_OscConfig+0xfa>
 8001af4:	692b      	ldr	r3, [r5, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d186      	bne.n	8001a08 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	696a      	ldr	r2, [r5, #20]
 8001afe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b02:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b06:	6023      	str	r3, [r4, #0]
 8001b08:	e786      	b.n	8001a18 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0a:	692a      	ldr	r2, [r5, #16]
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	b16a      	cbz	r2, 8001b2c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b14:	f7ff faa8 	bl	8001068 <HAL_GetTick>
 8001b18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	079f      	lsls	r7, r3, #30
 8001b1e:	d4ec      	bmi.n	8001afa <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff faa2 	bl	8001068 <HAL_GetTick>
 8001b24:	1b80      	subs	r0, r0, r6
 8001b26:	2802      	cmp	r0, #2
 8001b28:	d9f7      	bls.n	8001b1a <HAL_RCC_OscConfig+0x11a>
 8001b2a:	e7ab      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001b2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fa9b 	bl	8001068 <HAL_GetTick>
 8001b32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	0798      	lsls	r0, r3, #30
 8001b38:	f57f af6e 	bpl.w	8001a18 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fa94 	bl	8001068 <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	2802      	cmp	r0, #2
 8001b44:	d9f6      	bls.n	8001b34 <HAL_RCC_OscConfig+0x134>
 8001b46:	e79d      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b48:	69aa      	ldr	r2, [r5, #24]
 8001b4a:	4c4a      	ldr	r4, [pc, #296]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b4e:	b1da      	cbz	r2, 8001b88 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b50:	2201      	movs	r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b54:	f7ff fa88 	bl	8001068 <HAL_GetTick>
 8001b58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b5c:	079b      	lsls	r3, r3, #30
 8001b5e:	d50d      	bpl.n	8001b7c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b60:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_OscConfig+0x280>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b6c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b6e:	bf00      	nop
  }
  while (Delay --);
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	1e5a      	subs	r2, r3, #1
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_RCC_OscConfig+0x16e>
 8001b7a:	e751      	b.n	8001a20 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fa74 	bl	8001068 <HAL_GetTick>
 8001b80:	1b80      	subs	r0, r0, r6
 8001b82:	2802      	cmp	r0, #2
 8001b84:	d9e9      	bls.n	8001b5a <HAL_RCC_OscConfig+0x15a>
 8001b86:	e77d      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001b88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa6d 	bl	8001068 <HAL_GetTick>
 8001b8e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b92:	079f      	lsls	r7, r3, #30
 8001b94:	f57f af44 	bpl.w	8001a20 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fa66 	bl	8001068 <HAL_GetTick>
 8001b9c:	1b80      	subs	r0, r0, r6
 8001b9e:	2802      	cmp	r0, #2
 8001ba0:	d9f6      	bls.n	8001b90 <HAL_RCC_OscConfig+0x190>
 8001ba2:	e76f      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba4:	4c33      	ldr	r4, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	69e3      	ldr	r3, [r4, #28]
 8001ba8:	00d8      	lsls	r0, r3, #3
 8001baa:	d424      	bmi.n	8001bf6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001bac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	69e3      	ldr	r3, [r4, #28]
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61e3      	str	r3, [r4, #28]
 8001bb6:	69e3      	ldr	r3, [r4, #28]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4e30      	ldr	r6, [pc, #192]	; (8001c84 <HAL_RCC_OscConfig+0x284>)
 8001bc2:	6833      	ldr	r3, [r6, #0]
 8001bc4:	05d9      	lsls	r1, r3, #23
 8001bc6:	d518      	bpl.n	8001bfa <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	68eb      	ldr	r3, [r5, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d126      	bne.n	8001c1c <HAL_RCC_OscConfig+0x21c>
 8001bce:	6a23      	ldr	r3, [r4, #32]
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fa47 	bl	8001068 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bde:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	6a23      	ldr	r3, [r4, #32]
 8001be2:	079b      	lsls	r3, r3, #30
 8001be4:	d53f      	bpl.n	8001c66 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001be6:	2f00      	cmp	r7, #0
 8001be8:	f43f af1e 	beq.w	8001a28 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bec:	69e3      	ldr	r3, [r4, #28]
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	61e3      	str	r3, [r4, #28]
 8001bf4:	e718      	b.n	8001a28 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2700      	movs	r7, #0
 8001bf8:	e7e2      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	6833      	ldr	r3, [r6, #0]
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa31 	bl	8001068 <HAL_GetTick>
 8001c06:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	05da      	lsls	r2, r3, #23
 8001c0c:	d4dc      	bmi.n	8001bc8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff fa2b 	bl	8001068 <HAL_GetTick>
 8001c12:	eba0 0008 	sub.w	r0, r0, r8
 8001c16:	2864      	cmp	r0, #100	; 0x64
 8001c18:	d9f6      	bls.n	8001c08 <HAL_RCC_OscConfig+0x208>
 8001c1a:	e733      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c1c:	b9ab      	cbnz	r3, 8001c4a <HAL_RCC_OscConfig+0x24a>
 8001c1e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6223      	str	r3, [r4, #32]
 8001c2a:	6a23      	ldr	r3, [r4, #32]
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa19 	bl	8001068 <HAL_GetTick>
 8001c36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	6a23      	ldr	r3, [r4, #32]
 8001c3a:	0798      	lsls	r0, r3, #30
 8001c3c:	d5d3      	bpl.n	8001be6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fa13 	bl	8001068 <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	4540      	cmp	r0, r8
 8001c46:	d9f7      	bls.n	8001c38 <HAL_RCC_OscConfig+0x238>
 8001c48:	e71c      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	6a23      	ldr	r3, [r4, #32]
 8001c4e:	d103      	bne.n	8001c58 <HAL_RCC_OscConfig+0x258>
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6223      	str	r3, [r4, #32]
 8001c56:	e7ba      	b.n	8001bce <HAL_RCC_OscConfig+0x1ce>
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6223      	str	r3, [r4, #32]
 8001c5e:	6a23      	ldr	r3, [r4, #32]
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	e7b6      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7ff f9ff 	bl	8001068 <HAL_GetTick>
 8001c6a:	eba0 0008 	sub.w	r0, r0, r8
 8001c6e:	42b0      	cmp	r0, r6
 8001c70:	d9b6      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1e0>
 8001c72:	e707      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	42420000 	.word	0x42420000
 8001c7c:	42420480 	.word	0x42420480
 8001c80:	20000028 	.word	0x20000028
 8001c84:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x334>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	461c      	mov	r4, r3
 8001c8e:	f002 020c 	and.w	r2, r2, #12
 8001c92:	2a08      	cmp	r2, #8
 8001c94:	d03d      	beq.n	8001d12 <HAL_RCC_OscConfig+0x312>
 8001c96:	2300      	movs	r3, #0
 8001c98:	4e27      	ldr	r6, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f9e2 	bl	8001068 <HAL_GetTick>
 8001ca4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	0199      	lsls	r1, r3, #6
 8001caa:	d41f      	bmi.n	8001cec <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	6a2b      	ldr	r3, [r5, #32]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb4:	6862      	ldr	r2, [r4, #4]
 8001cb6:	68a9      	ldr	r1, [r5, #8]
 8001cb8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001cc2:	6862      	ldr	r2, [r4, #4]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cce:	2301      	movs	r3, #1
 8001cd0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f9c9 	bl	8001068 <HAL_GetTick>
 8001cd6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	019a      	lsls	r2, r3, #6
 8001cdc:	f53f aea8 	bmi.w	8001a30 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f9c2 	bl	8001068 <HAL_GetTick>
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9f6      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2d8>
 8001cea:	e6cb      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f9bc 	bl	8001068 <HAL_GetTick>
 8001cf0:	1bc0      	subs	r0, r0, r7
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d9d7      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2a6>
 8001cf6:	e6c5      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f9b6 	bl	8001068 <HAL_GetTick>
 8001cfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	019b      	lsls	r3, r3, #6
 8001d02:	f57f ae95 	bpl.w	8001a30 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff f9af 	bl	8001068 <HAL_GetTick>
 8001d0a:	1b40      	subs	r0, r0, r5
 8001d0c:	2802      	cmp	r0, #2
 8001d0e:	d9f6      	bls.n	8001cfe <HAL_RCC_OscConfig+0x2fe>
 8001d10:	e6b8      	b.n	8001a84 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d12:	2801      	cmp	r0, #1
 8001d14:	f43f aeb7 	beq.w	8001a86 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001d18:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	6a2b      	ldr	r3, [r5, #32]
 8001d1c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f47f ae71 	bne.w	8001a08 <HAL_RCC_OscConfig+0x8>
 8001d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d28:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001d2c:	1ac0      	subs	r0, r0, r3
 8001d2e:	bf18      	it	ne
 8001d30:	2001      	movne	r0, #1
 8001d32:	e6a8      	b.n	8001a86 <HAL_RCC_OscConfig+0x86>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420060 	.word	0x42420060

08001d3c <HAL_RCC_GetSysClockFreq>:
{
 8001d3c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001d40:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d42:	ac02      	add	r4, sp, #8
 8001d44:	f103 0510 	add.w	r5, r3, #16
 8001d48:	4622      	mov	r2, r4
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	3308      	adds	r3, #8
 8001d50:	c203      	stmia	r2!, {r0, r1}
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	4614      	mov	r4, r2
 8001d56:	d1f7      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d58:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001d5c:	4911      	ldr	r1, [pc, #68]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d5e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001d62:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d64:	f003 020c 	and.w	r2, r3, #12
 8001d68:	2a08      	cmp	r2, #8
 8001d6a:	d117      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d70:	a806      	add	r0, sp, #24
 8001d72:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d74:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d76:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d7a:	d50c      	bpl.n	8001d96 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d80:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d84:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d86:	aa06      	add	r2, sp, #24
 8001d88:	4413      	add	r3, r2
 8001d8a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d92:	b007      	add	sp, #28
 8001d94:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_RCC_GetSysClockFreq+0x70>)
 8001d98:	4350      	muls	r0, r2
 8001d9a:	e7fa      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001d9e:	e7f8      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x56>
 8001da0:	08006d40 	.word	0x08006d40
 8001da4:	40021000 	.word	0x40021000
 8001da8:	007a1200 	.word	0x007a1200
 8001dac:	003d0900 	.word	0x003d0900

08001db0 <HAL_RCC_ClockConfig>:
{
 8001db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001db6:	4604      	mov	r4, r0
 8001db8:	b910      	cbnz	r0, 8001dc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001dba:	2001      	movs	r0, #1
}
 8001dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4a44      	ldr	r2, [pc, #272]	; (8001ed4 <HAL_RCC_ClockConfig+0x124>)
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	428b      	cmp	r3, r1
 8001dca:	d328      	bcc.n	8001e1e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	6821      	ldr	r1, [r4, #0]
 8001dce:	078e      	lsls	r6, r1, #30
 8001dd0:	d430      	bmi.n	8001e34 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	07ca      	lsls	r2, r1, #31
 8001dd4:	d443      	bmi.n	8001e5e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd6:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_RCC_ClockConfig+0x124>)
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	d865      	bhi.n	8001eae <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	4d3c      	ldr	r5, [pc, #240]	; (8001ed8 <HAL_RCC_ClockConfig+0x128>)
 8001de6:	f012 0f04 	tst.w	r2, #4
 8001dea:	d16c      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	0713      	lsls	r3, r2, #28
 8001dee:	d506      	bpl.n	8001dfe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df0:	686b      	ldr	r3, [r5, #4]
 8001df2:	6922      	ldr	r2, [r4, #16]
 8001df4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001df8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dfc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfe:	f7ff ff9d 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001e02:	686b      	ldr	r3, [r5, #4]
 8001e04:	4a35      	ldr	r2, [pc, #212]	; (8001edc <HAL_RCC_ClockConfig+0x12c>)
 8001e06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	40d8      	lsrs	r0, r3
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x130>)
 8001e10:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_ClockConfig+0x134>)
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	f7ff f8e5 	bl	8000fe4 <HAL_InitTick>
  return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e7ce      	b.n	8001dbc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f023 0307 	bic.w	r3, r3, #7
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	428b      	cmp	r3, r1
 8001e30:	d1c3      	bne.n	8001dba <HAL_RCC_ClockConfig+0xa>
 8001e32:	e7cb      	b.n	8001dcc <HAL_RCC_ClockConfig+0x1c>
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e36:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3a:	bf1e      	ittt	ne
 8001e3c:	685a      	ldrne	r2, [r3, #4]
 8001e3e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e42:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e44:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e46:	bf42      	ittt	mi
 8001e48:	685a      	ldrmi	r2, [r3, #4]
 8001e4a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e4e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68a0      	ldr	r0, [r4, #8]
 8001e54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e58:	4302      	orrs	r2, r0
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	e7b9      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	6862      	ldr	r2, [r4, #4]
 8001e60:	4e1d      	ldr	r6, [pc, #116]	; (8001ed8 <HAL_RCC_ClockConfig+0x128>)
 8001e62:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e64:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	d11a      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	d0a5      	beq.n	8001dba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e74:	f023 0303 	bic.w	r3, r3, #3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f8f4 	bl	8001068 <HAL_GetTick>
 8001e80:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	6873      	ldr	r3, [r6, #4]
 8001e84:	6862      	ldr	r2, [r4, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e8e:	d0a2      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff f8ea 	bl	8001068 <HAL_GetTick>
 8001e94:	1bc0      	subs	r0, r0, r7
 8001e96:	4540      	cmp	r0, r8
 8001e98:	d9f3      	bls.n	8001e82 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	e78e      	b.n	8001dbc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9e:	2a02      	cmp	r2, #2
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ea6:	e7e1      	b.n	8001e6c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	f013 0f02 	tst.w	r3, #2
 8001eac:	e7de      	b.n	8001e6c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	6813      	ldr	r3, [r2, #0]
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	432b      	orrs	r3, r5
 8001eb6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	42ab      	cmp	r3, r5
 8001ec0:	f47f af7b 	bne.w	8001dba <HAL_RCC_ClockConfig+0xa>
 8001ec4:	e78d      	b.n	8001de2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec6:	686b      	ldr	r3, [r5, #4]
 8001ec8:	68e1      	ldr	r1, [r4, #12]
 8001eca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	606b      	str	r3, [r5, #4]
 8001ed2:	e78b      	b.n	8001dec <HAL_RCC_ClockConfig+0x3c>
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08009c10 	.word	0x08009c10
 8001ee0:	20000028 	.word	0x20000028
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ef6:	6810      	ldr	r0, [r2, #0]
}
 8001ef8:	40d8      	lsrs	r0, r3
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08009c20 	.word	0x08009c20
 8001f04:	20000028 	.word	0x20000028

08001f08 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f16:	6810      	ldr	r0, [r2, #0]
}
 8001f18:	40d8      	lsrs	r0, r3
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08009c20 	.word	0x08009c20
 8001f24:	20000028 	.word	0x20000028

08001f28 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f28:	6803      	ldr	r3, [r0, #0]
{
 8001f2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f2e:	07d9      	lsls	r1, r3, #31
{
 8001f30:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f32:	d520      	bpl.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f34:	4c35      	ldr	r4, [pc, #212]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f36:	69e3      	ldr	r3, [r4, #28]
 8001f38:	00da      	lsls	r2, r3, #3
 8001f3a:	d432      	bmi.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001f3c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	69e3      	ldr	r3, [r4, #28]
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	61e3      	str	r3, [r4, #28]
 8001f46:	69e3      	ldr	r3, [r4, #28]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4e2f      	ldr	r6, [pc, #188]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f52:	6833      	ldr	r3, [r6, #0]
 8001f54:	05db      	lsls	r3, r3, #23
 8001f56:	d526      	bpl.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f58:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f5a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f5e:	d136      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f60:	6a23      	ldr	r3, [r4, #32]
 8001f62:	686a      	ldr	r2, [r5, #4]
 8001f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f6c:	b11f      	cbz	r7, 8001f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	69e3      	ldr	r3, [r4, #28]
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f76:	6828      	ldr	r0, [r5, #0]
 8001f78:	0783      	lsls	r3, r0, #30
 8001f7a:	d506      	bpl.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f7e:	68a9      	ldr	r1, [r5, #8]
 8001f80:	6853      	ldr	r3, [r2, #4]
 8001f82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f8a:	f010 0010 	ands.w	r0, r0, #16
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f92:	68e9      	ldr	r1, [r5, #12]
 8001f94:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f96:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6053      	str	r3, [r2, #4]
 8001fa0:	e012      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2700      	movs	r7, #0
 8001fa4:	e7d4      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	6833      	ldr	r3, [r6, #0]
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fae:	f7ff f85b 	bl	8001068 <HAL_GetTick>
 8001fb2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	6833      	ldr	r3, [r6, #0]
 8001fb6:	05d8      	lsls	r0, r3, #23
 8001fb8:	d4ce      	bmi.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7ff f855 	bl	8001068 <HAL_GetTick>
 8001fbe:	eba0 0008 	sub.w	r0, r0, r8
 8001fc2:	2864      	cmp	r0, #100	; 0x64
 8001fc4:	d9f6      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
}
 8001fc8:	b002      	add	sp, #8
 8001fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fce:	686a      	ldr	r2, [r5, #4]
 8001fd0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d0c3      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fd8:	2001      	movs	r0, #1
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fdc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fde:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001fe8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fea:	07d9      	lsls	r1, r3, #31
 8001fec:	d5b8      	bpl.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001fee:	f7ff f83b 	bl	8001068 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ff6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	6a23      	ldr	r3, [r4, #32]
 8001ffa:	079a      	lsls	r2, r3, #30
 8001ffc:	d4b0      	bmi.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f833 	bl	8001068 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	4540      	cmp	r0, r8
 8002006:	d9f7      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002008:	e7dd      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	42420440 	.word	0x42420440

08002018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002018:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800201a:	4604      	mov	r4, r0
 800201c:	2800      	cmp	r0, #0
 800201e:	d034      	beq.n	800208a <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002024:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002028:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800202c:	b91b      	cbnz	r3, 8002036 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800202e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002032:	f000 ffb3 	bl	8002f9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002036:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002038:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800203a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800203e:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002040:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002046:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002048:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800204c:	4303      	orrs	r3, r0
 800204e:	68e0      	ldr	r0, [r4, #12]
 8002050:	4303      	orrs	r3, r0
 8002052:	6920      	ldr	r0, [r4, #16]
 8002054:	4303      	orrs	r3, r0
 8002056:	6960      	ldr	r0, [r4, #20]
 8002058:	4303      	orrs	r3, r0
 800205a:	69e0      	ldr	r0, [r4, #28]
 800205c:	4303      	orrs	r3, r0
 800205e:	6a20      	ldr	r0, [r4, #32]
 8002060:	4303      	orrs	r3, r0
 8002062:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002064:	4303      	orrs	r3, r0
 8002066:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800206a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800206c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800206e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002072:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002074:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002076:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002078:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800207a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002080:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002082:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002084:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002088:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800208a:	2001      	movs	r0, #1
 800208c:	e7fc      	b.n	8002088 <HAL_SPI_Init+0x70>
	...

08002090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002094:	6803      	ldr	r3, [r0, #0]
 8002096:	68c1      	ldr	r1, [r0, #12]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	2419      	movs	r4, #25
 800209c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020a0:	430a      	orrs	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a4:	6882      	ldr	r2, [r0, #8]
 80020a6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80020a8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020aa:	4302      	orrs	r2, r0
 80020ac:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80020ae:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80020b2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80020b8:	430a      	orrs	r2, r1
 80020ba:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	69a9      	ldr	r1, [r5, #24]
 80020c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020c4:	430a      	orrs	r2, r1
 80020c6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <UART_SetConfig+0x70>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d114      	bne.n	80020f8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020ce:	f7ff ff1b 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020d2:	4360      	muls	r0, r4
 80020d4:	686c      	ldr	r4, [r5, #4]
 80020d6:	2264      	movs	r2, #100	; 0x64
 80020d8:	00a4      	lsls	r4, r4, #2
 80020da:	fbb0 f0f4 	udiv	r0, r0, r4
 80020de:	fbb0 f1f2 	udiv	r1, r0, r2
 80020e2:	fb02 0311 	mls	r3, r2, r1, r0
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	3332      	adds	r3, #50	; 0x32
 80020ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80020ee:	682c      	ldr	r4, [r5, #0]
 80020f0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80020f4:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80020f8:	f7ff fef6 	bl	8001ee8 <HAL_RCC_GetPCLK1Freq>
 80020fc:	e7e9      	b.n	80020d2 <UART_SetConfig+0x42>
 80020fe:	bf00      	nop
 8002100:	40013800 	.word	0x40013800

08002104 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	4604      	mov	r4, r0
 8002108:	460e      	mov	r6, r1
 800210a:	4617      	mov	r7, r2
 800210c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210e:	6821      	ldr	r1, [r4, #0]
 8002110:	680b      	ldr	r3, [r1, #0]
 8002112:	ea36 0303 	bics.w	r3, r6, r3
 8002116:	d101      	bne.n	800211c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002118:	2000      	movs	r0, #0
 800211a:	e014      	b.n	8002146 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800211c:	1c6b      	adds	r3, r5, #1
 800211e:	d0f7      	beq.n	8002110 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002120:	b995      	cbnz	r5, 8002148 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002122:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002124:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800212c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002136:	2320      	movs	r3, #32
 8002138:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800213c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002140:	2300      	movs	r3, #0
 8002142:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002148:	f7fe ff8e 	bl	8001068 <HAL_GetTick>
 800214c:	1bc0      	subs	r0, r0, r7
 800214e:	4285      	cmp	r5, r0
 8002150:	d2dd      	bcs.n	800210e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002152:	e7e6      	b.n	8002122 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002154 <HAL_UART_Init>:
{
 8002154:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002156:	4604      	mov	r4, r0
 8002158:	b340      	cbz	r0, 80021ac <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800215e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002162:	b91b      	cbnz	r3, 800216c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002164:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002168:	f000 ff72 	bl	8003050 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800216c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800216e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002170:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002174:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002176:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800217c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800217e:	f7ff ff87 	bl	8002090 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002182:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800218c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002194:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800219c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800219e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80021aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021ac:	2001      	movs	r0, #1
 80021ae:	e7fc      	b.n	80021aa <HAL_UART_Init+0x56>

080021b0 <HAL_UART_Transmit>:
{
 80021b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80021b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80021ba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80021bc:	2b20      	cmp	r3, #32
{
 80021be:	460d      	mov	r5, r1
 80021c0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80021c2:	d14c      	bne.n	800225e <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d048      	beq.n	800225a <HAL_UART_Transmit+0xaa>
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	d046      	beq.n	800225a <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80021cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d044      	beq.n	800225e <HAL_UART_Transmit+0xae>
 80021d4:	2301      	movs	r3, #1
 80021d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021de:	2321      	movs	r3, #33	; 0x21
 80021e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80021e4:	f7fe ff40 	bl	8001068 <HAL_GetTick>
 80021e8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80021ea:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b963      	cbnz	r3, 8002212 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4632      	mov	r2, r6
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ff80 	bl	8002104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002204:	b9a0      	cbnz	r0, 8002230 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002206:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002208:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800220c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002210:	e00f      	b.n	8002232 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002212:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002214:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002216:	3b01      	subs	r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800221c:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002224:	4620      	mov	r0, r4
 8002226:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002228:	d10e      	bne.n	8002248 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800222a:	f7ff ff6b 	bl	8002104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800222e:	b110      	cbz	r0, 8002236 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8002230:	2003      	movs	r0, #3
}
 8002232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002236:	882b      	ldrh	r3, [r5, #0]
 8002238:	6822      	ldr	r2, [r4, #0]
 800223a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002240:	6923      	ldr	r3, [r4, #16]
 8002242:	b943      	cbnz	r3, 8002256 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8002244:	3502      	adds	r5, #2
 8002246:	e7d4      	b.n	80021f2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002248:	f7ff ff5c 	bl	8002104 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800224c:	2800      	cmp	r0, #0
 800224e:	d1ef      	bne.n	8002230 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	782a      	ldrb	r2, [r5, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	3501      	adds	r5, #1
 8002258:	e7cb      	b.n	80021f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800225a:	2001      	movs	r0, #1
 800225c:	e7e9      	b.n	8002232 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800225e:	2002      	movs	r0, #2
 8002260:	e7e7      	b.n	8002232 <HAL_UART_Transmit+0x82>

08002262 <loop>:
void init() {
    ssd1306_TestAll();
}

void loop() {
	HAL_Delay(100);
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	f7fe bf06 	b.w	8001074 <HAL_Delay>

08002268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002268:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	2414      	movs	r4, #20
{
 800226c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226e:	4622      	mov	r2, r4
 8002270:	2100      	movs	r1, #0
 8002272:	a80c      	add	r0, sp, #48	; 0x30
 8002274:	f000 fffe 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	4622      	mov	r2, r4
 800227a:	eb0d 0004 	add.w	r0, sp, r4
 800227e:	2100      	movs	r1, #0
 8002280:	f000 fff8 	bl	8003274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	2100      	movs	r1, #0
 8002286:	2210      	movs	r2, #16
 8002288:	a801      	add	r0, sp, #4
 800228a:	f000 fff3 	bl	8003274 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002296:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800229a:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800229e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022a6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a8:	f7ff fbaa 	bl	8001a00 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ac:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022b8:	4621      	mov	r1, r4
 80022ba:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022bc:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022c2:	f7ff fd75 	bl	8001db0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ca:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022cc:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022ce:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d0:	f7ff fe2a 	bl	8001f28 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80022d4:	b014      	add	sp, #80	; 0x50
 80022d6:	bd10      	pop	{r4, pc}

080022d8 <LED_blink>:

}

/* USER CODE BEGIN 4 */

void LED_blink(int blink_times, int time){
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	4607      	mov	r7, r0
 80022dc:	460d      	mov	r5, r1

    for(int i = 0; i < blink_times; i++){
 80022de:	2400      	movs	r4, #0
        //blue pill set-wyłączona, reset-włączona
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022e0:	4e0e      	ldr	r6, [pc, #56]	; (800231c <LED_blink+0x44>)
    for(int i = 0; i < blink_times; i++){
 80022e2:	42bc      	cmp	r4, r7
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022e4:	f04f 0201 	mov.w	r2, #1
 80022e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    for(int i = 0; i < blink_times; i++){
 80022ec:	db04      	blt.n	80022f8 <LED_blink+0x20>
        HAL_Delay(time);
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 80022ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022f2:	480a      	ldr	r0, [pc, #40]	; (800231c <LED_blink+0x44>)
 80022f4:	f7ff b92c 	b.w	8001550 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80022f8:	4630      	mov	r0, r6
 80022fa:	f7ff f929 	bl	8001550 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 80022fe:	4628      	mov	r0, r5
 8002300:	f7fe feb8 	bl	8001074 <HAL_Delay>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230a:	4630      	mov	r0, r6
 800230c:	f7ff f920 	bl	8001550 <HAL_GPIO_WritePin>
        HAL_Delay(time);
 8002310:	4628      	mov	r0, r5
 8002312:	f7fe feaf 	bl	8001074 <HAL_Delay>
    for(int i = 0; i < blink_times; i++){
 8002316:	3401      	adds	r4, #1
 8002318:	e7e3      	b.n	80022e2 <LED_blink+0xa>
 800231a:	bf00      	nop
 800231c:	40011000 	.word	0x40011000

08002320 <Beep>:

void Beep(int time_delay){
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002324:	4c07      	ldr	r4, [pc, #28]	; (8002344 <Beep+0x24>)
 8002326:	2201      	movs	r2, #1
 8002328:	2102      	movs	r1, #2
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff f910 	bl	8001550 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8002330:	4628      	mov	r0, r5
 8002332:	f7fe fe9f 	bl	8001074 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002336:	4620      	mov	r0, r4
}
 8002338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2102      	movs	r1, #2
 8002340:	f7ff b906 	b.w	8001550 <HAL_GPIO_WritePin>
 8002344:	40010800 	.word	0x40010800

08002348 <_write>:

int _write(int file, char *ptr, int len){
 8002348:	b510      	push	{r4, lr}
 800234a:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 800234c:	2332      	movs	r3, #50	; 0x32
 800234e:	b292      	uxth	r2, r2
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <_write+0x14>)
 8002352:	f7ff ff2d 	bl	80021b0 <HAL_UART_Transmit>
    return len;
}
 8002356:	4620      	mov	r0, r4
 8002358:	bd10      	pop	{r4, pc}
 800235a:	bf00      	nop
 800235c:	20000754 	.word	0x20000754

08002360 <writeUART>:

int writeUART(float latitude, float longitude, float altitude, float velocity){
 8002360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	4617      	mov	r7, r2
 8002368:	4698      	mov	r8, r3
 800236a:	460e      	mov	r6, r1
    return printf("%f/%f/%f/%f\n\r", latitude, longitude, altitude, velocity);
 800236c:	f7fe f85c 	bl	8000428 <__aeabi_f2d>
 8002370:	4604      	mov	r4, r0
 8002372:	4640      	mov	r0, r8
 8002374:	460d      	mov	r5, r1
 8002376:	f7fe f857 	bl	8000428 <__aeabi_f2d>
 800237a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800237e:	4638      	mov	r0, r7
 8002380:	f7fe f852 	bl	8000428 <__aeabi_f2d>
 8002384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002388:	4630      	mov	r0, r6
 800238a:	f7fe f84d 	bl	8000428 <__aeabi_f2d>
 800238e:	4622      	mov	r2, r4
 8002390:	e9cd 0100 	strd	r0, r1, [sp]
 8002394:	462b      	mov	r3, r5
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <writeUART+0x44>)
 8002398:	f001 fbc4 	bl	8003b24 <iprintf>
}
 800239c:	b006      	add	sp, #24
 800239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a2:	bf00      	nop
 80023a4:	08006db6 	.word	0x08006db6

080023a8 <main>:
{
 80023a8:	b500      	push	{lr}
 80023aa:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80023ac:	f7fe fe3e 	bl	800102c <HAL_Init>
  SystemClock_Config();
 80023b0:	f7ff ff5a 	bl	8002268 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	2210      	movs	r2, #16
 80023b6:	2100      	movs	r1, #0
 80023b8:	eb0d 0002 	add.w	r0, sp, r2
 80023bc:	f000 ff5a 	bl	8003274 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c0:	4b6d      	ldr	r3, [pc, #436]	; (8002578 <main+0x1d0>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023c8:	486c      	ldr	r0, [pc, #432]	; (800257c <main+0x1d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d4:	f002 0210 	and.w	r2, r2, #16
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023dc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	f002 0220 	and.w	r2, r2, #32
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	f042 0204 	orr.w	r2, r2, #4
 80023f8:	619a      	str	r2, [r3, #24]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	f002 0204 	and.w	r2, r2, #4
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	f042 0208 	orr.w	r2, r2, #8
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	9303      	str	r3, [sp, #12]
 8002416:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002418:	f7ff f89a 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	2102      	movs	r1, #2
 8002420:	4857      	ldr	r0, [pc, #348]	; (8002580 <main+0x1d8>)
 8002422:	f7ff f895 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|DO_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	f241 0181 	movw	r1, #4225	; 0x1081
 800242c:	4855      	ldr	r0, [pc, #340]	; (8002584 <main+0x1dc>)
 800242e:	f7ff f88f 	bl	8001550 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002436:	a904      	add	r1, sp, #16
 8002438:	4850      	ldr	r0, [pc, #320]	; (800257c <main+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002442:	f7fe ffa5 	bl	8001390 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002446:	a904      	add	r1, sp, #16
 8002448:	484d      	ldr	r0, [pc, #308]	; (8002580 <main+0x1d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002452:	f7fe ff9d 	bl	8001390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|DO_RF_Pin|D_C_Pin;
 8002456:	f241 0381 	movw	r3, #4225	; 0x1081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	a904      	add	r1, sp, #16
 800245c:	4849      	ldr	r0, [pc, #292]	; (8002584 <main+0x1dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f7fe ff93 	bl	8001390 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FIRE_Pin;
 800246a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 800246c:	a904      	add	r1, sp, #16
 800246e:	4845      	ldr	r0, [pc, #276]	; (8002584 <main+0x1dc>)
  hadc1.Instance = ADC1;
 8002470:	4d45      	ldr	r5, [pc, #276]	; (8002588 <main+0x1e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002478:	f7fe ff8a 	bl	8001390 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 800247c:	4b43      	ldr	r3, [pc, #268]	; (800258c <main+0x1e4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800247e:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8002480:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002482:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002486:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002488:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800248a:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800248c:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248e:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002490:	612e      	str	r6, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002492:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002496:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002498:	f7fe fe9e 	bl	80011d8 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249c:	a904      	add	r1, sp, #16
 800249e:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024a0:	e9cd 4604 	strd	r4, r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024a4:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a6:	f7fe fdf7 	bl	8001098 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 80024aa:	4839      	ldr	r0, [pc, #228]	; (8002590 <main+0x1e8>)
  hi2c1.Init.ClockSpeed = 100000;
 80024ac:	4a39      	ldr	r2, [pc, #228]	; (8002594 <main+0x1ec>)
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <main+0x1f0>)
  hi2c1.Init.OwnAddress1 = 0;
 80024b0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80024b4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024bc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c6:	f7ff f967 	bl	8001798 <HAL_I2C_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ca:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80024ce:	4833      	ldr	r0, [pc, #204]	; (800259c <main+0x1f4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d0:	4933      	ldr	r1, [pc, #204]	; (80025a0 <main+0x1f8>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024d2:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024d6:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024da:	2308      	movs	r3, #8
 80024dc:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80024e0:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e6:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ea:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ee:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024f0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024f2:	f7ff fd91 	bl	8002018 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80024f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <main+0x1fc>)
  huart2.Init.BaudRate = 115200;
 80024fc:	4e2a      	ldr	r6, [pc, #168]	; (80025a8 <main+0x200>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002502:	e9c0 6300 	strd	r6, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002506:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8002508:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800250e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002510:	f7ff fe20 	bl	8002154 <HAL_UART_Init>
	printf("Odbiornik/nadajnik radia LoRa\r\n");
 8002514:	4825      	ldr	r0, [pc, #148]	; (80025ac <main+0x204>)
 8002516:	f001 fb79 	bl	8003c0c <puts>
    ssd1306_TestAll();
 800251a:	f000 fc79 	bl	8002e10 <ssd1306_TestAll>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 800251e:	4e24      	ldr	r6, [pc, #144]	; (80025b0 <main+0x208>)
 8002520:	4d24      	ldr	r5, [pc, #144]	; (80025b4 <main+0x20c>)
 8002522:	4c25      	ldr	r4, [pc, #148]	; (80025b8 <main+0x210>)
	    loop();
 8002524:	f7ff fe9d 	bl	8002262 <loop>
		printf("Test przesylu danych UART: \r\n");
 8002528:	4824      	ldr	r0, [pc, #144]	; (80025bc <main+0x214>)
 800252a:	f001 fb6f 	bl	8003c0c <puts>
		writeUART(51.123456, 17.123456, 360.123456, 150.123456);
 800252e:	4633      	mov	r3, r6
 8002530:	462a      	mov	r2, r5
 8002532:	4621      	mov	r1, r4
 8002534:	4822      	ldr	r0, [pc, #136]	; (80025c0 <main+0x218>)
 8002536:	f7ff ff13 	bl	8002360 <writeUART>
		printf("Test LED: \r\n");
 800253a:	4822      	ldr	r0, [pc, #136]	; (80025c4 <main+0x21c>)
 800253c:	f001 fb66 	bl	8003c0c <puts>
		LED_blink(10, 100);
 8002540:	2164      	movs	r1, #100	; 0x64
 8002542:	200a      	movs	r0, #10
 8002544:	f7ff fec8 	bl	80022d8 <LED_blink>
		printf("Test buzzera: \r\n");
 8002548:	481f      	ldr	r0, [pc, #124]	; (80025c8 <main+0x220>)
 800254a:	f001 fb5f 	bl	8003c0c <puts>
		Beep(100);
 800254e:	2064      	movs	r0, #100	; 0x64
 8002550:	f7ff fee6 	bl	8002320 <Beep>
		HAL_Delay(200);
 8002554:	20c8      	movs	r0, #200	; 0xc8
 8002556:	f7fe fd8d 	bl	8001074 <HAL_Delay>
		Beep(200);
 800255a:	20c8      	movs	r0, #200	; 0xc8
 800255c:	f7ff fee0 	bl	8002320 <Beep>
		HAL_Delay(200);
 8002560:	20c8      	movs	r0, #200	; 0xc8
 8002562:	f7fe fd87 	bl	8001074 <HAL_Delay>
		Beep(1000);
 8002566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800256a:	f7ff fed9 	bl	8002320 <Beep>
		HAL_Delay(200);
 800256e:	20c8      	movs	r0, #200	; 0xc8
 8002570:	f7fe fd80 	bl	8001074 <HAL_Delay>
 8002574:	e7d6      	b.n	8002524 <main+0x17c>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40011000 	.word	0x40011000
 8002580:	40010800 	.word	0x40010800
 8002584:	40010c00 	.word	0x40010c00
 8002588:	2000068c 	.word	0x2000068c
 800258c:	40012400 	.word	0x40012400
 8002590:	20000634 	.word	0x20000634
 8002594:	40005400 	.word	0x40005400
 8002598:	000186a0 	.word	0x000186a0
 800259c:	200006fc 	.word	0x200006fc
 80025a0:	40013000 	.word	0x40013000
 80025a4:	20000754 	.word	0x20000754
 80025a8:	40004400 	.word	0x40004400
 80025ac:	08006d5e 	.word	0x08006d5e
 80025b0:	43161f9b 	.word	0x43161f9b
 80025b4:	43b40fcd 	.word	0x43b40fcd
 80025b8:	4188fcd6 	.word	0x4188fcd6
 80025bc:	08006d7d 	.word	0x08006d7d
 80025c0:	424c7e6b 	.word	0x424c7e6b
 80025c4:	08006d9a 	.word	0x08006d9a
 80025c8:	08006da6 	.word	0x08006da6

080025cc <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80025cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80025ce:	2301      	movs	r3, #1
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
void ssd1306_WriteCommand(uint8_t byte) {
 80025d4:	aa06      	add	r2, sp, #24
 80025d6:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80025da:	9200      	str	r2, [sp, #0]
 80025dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2178      	movs	r1, #120	; 0x78
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <ssd1306_WriteCommand+0x24>)
 80025e6:	f7ff f97b 	bl	80018e0 <HAL_I2C_Mem_Write>
}
 80025ea:	b007      	add	sp, #28
 80025ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80025f0:	20000634 	.word	0x20000634

080025f4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80025f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	b289      	uxth	r1, r1
 80025fc:	e9cd 0100 	strd	r0, r1, [sp]
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	2301      	movs	r3, #1
 8002606:	2178      	movs	r1, #120	; 0x78
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <ssd1306_WriteData+0x20>)
 800260a:	f7ff f969 	bl	80018e0 <HAL_I2C_Mem_Write>
}
 800260e:	b005      	add	sp, #20
 8002610:	f85d fb04 	ldr.w	pc, [sp], #4
 8002614:	20000634 	.word	0x20000634

08002618 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002618:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800261a:	4905      	ldr	r1, [pc, #20]	; (8002630 <ssd1306_Fill+0x18>)
 800261c:	1c02      	adds	r2, r0, #0
 800261e:	bf18      	it	ne
 8002620:	2201      	movne	r2, #1
 8002622:	4252      	negs	r2, r2
 8002624:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002626:	3301      	adds	r3, #1
 8002628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262c:	d1f6      	bne.n	800261c <ssd1306_Fill+0x4>
    }
}
 800262e:	4770      	bx	lr
 8002630:	2000021e 	.word	0x2000021e

08002634 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002638:	4d0a      	ldr	r5, [pc, #40]	; (8002664 <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800263a:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 800263e:	b2c0      	uxtb	r0, r0
 8002640:	f7ff ffc4 	bl	80025cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff ffc1 	bl	80025cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800264a:	2010      	movs	r0, #16
 800264c:	f7ff ffbe 	bl	80025cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002650:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 8002654:	2180      	movs	r1, #128	; 0x80
 8002656:	3401      	adds	r4, #1
 8002658:	f7ff ffcc 	bl	80025f4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800265c:	2c08      	cmp	r4, #8
 800265e:	d1ec      	bne.n	800263a <ssd1306_UpdateScreen+0x6>
    }
}
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	2000021e 	.word	0x2000021e

08002668 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002668:	b508      	push	{r3, lr}
    HAL_Delay(100);
 800266a:	2064      	movs	r0, #100	; 0x64
 800266c:	f7fe fd02 	bl	8001074 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8002670:	20ae      	movs	r0, #174	; 0xae
 8002672:	f7ff ffab 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002676:	2020      	movs	r0, #32
 8002678:	f7ff ffa8 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800267c:	2000      	movs	r0, #0
 800267e:	f7ff ffa5 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002682:	20b0      	movs	r0, #176	; 0xb0
 8002684:	f7ff ffa2 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002688:	20c8      	movs	r0, #200	; 0xc8
 800268a:	f7ff ff9f 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800268e:	2000      	movs	r0, #0
 8002690:	f7ff ff9c 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002694:	2010      	movs	r0, #16
 8002696:	f7ff ff99 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800269a:	2040      	movs	r0, #64	; 0x40
 800269c:	f7ff ff96 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80026a0:	2081      	movs	r0, #129	; 0x81
 80026a2:	f7ff ff93 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80026a6:	20ff      	movs	r0, #255	; 0xff
 80026a8:	f7ff ff90 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80026ac:	20a1      	movs	r0, #161	; 0xa1
 80026ae:	f7ff ff8d 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80026b2:	20a6      	movs	r0, #166	; 0xa6
 80026b4:	f7ff ff8a 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80026b8:	20a8      	movs	r0, #168	; 0xa8
 80026ba:	f7ff ff87 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80026be:	203f      	movs	r0, #63	; 0x3f
 80026c0:	f7ff ff84 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80026c4:	20a4      	movs	r0, #164	; 0xa4
 80026c6:	f7ff ff81 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80026ca:	20d3      	movs	r0, #211	; 0xd3
 80026cc:	f7ff ff7e 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff ff7b 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026d6:	20d5      	movs	r0, #213	; 0xd5
 80026d8:	f7ff ff78 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80026dc:	20f0      	movs	r0, #240	; 0xf0
 80026de:	f7ff ff75 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80026e2:	20d9      	movs	r0, #217	; 0xd9
 80026e4:	f7ff ff72 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80026e8:	2022      	movs	r0, #34	; 0x22
 80026ea:	f7ff ff6f 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80026ee:	20da      	movs	r0, #218	; 0xda
 80026f0:	f7ff ff6c 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80026f4:	2012      	movs	r0, #18
 80026f6:	f7ff ff69 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80026fa:	20db      	movs	r0, #219	; 0xdb
 80026fc:	f7ff ff66 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002700:	2020      	movs	r0, #32
 8002702:	f7ff ff63 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002706:	208d      	movs	r0, #141	; 0x8d
 8002708:	f7ff ff60 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800270c:	2014      	movs	r0, #20
 800270e:	f7ff ff5d 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002712:	20af      	movs	r0, #175	; 0xaf
 8002714:	f7ff ff5a 	bl	80025cc <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8002718:	2000      	movs	r0, #0
 800271a:	f7ff ff7d 	bl	8002618 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 800271e:	f7ff ff89 	bl	8002634 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002722:	2200      	movs	r2, #0
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <ssd1306_Init+0xc8>)
 8002726:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002728:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 800272a:	2201      	movs	r2, #1
 800272c:	715a      	strb	r2, [r3, #5]
}
 800272e:	bd08      	pop	{r3, pc}
 8002730:	20000218 	.word	0x20000218

08002734 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002734:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002736:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002738:	d416      	bmi.n	8002768 <ssd1306_DrawPixel+0x34>
 800273a:	293f      	cmp	r1, #63	; 0x3f
 800273c:	d814      	bhi.n	8002768 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <ssd1306_DrawPixel+0x38>)
 8002740:	791b      	ldrb	r3, [r3, #4]
 8002742:	b113      	cbz	r3, 800274a <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 8002744:	fab2 f282 	clz	r2, r2
 8002748:	0952      	lsrs	r2, r2, #5
 800274a:	08cb      	lsrs	r3, r1, #3
 800274c:	f001 0407 	and.w	r4, r1, #7
 8002750:	2101      	movs	r1, #1
 8002752:	4d07      	ldr	r5, [pc, #28]	; (8002770 <ssd1306_DrawPixel+0x3c>)
 8002754:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002758:	562b      	ldrsb	r3, [r5, r0]
 800275a:	40a1      	lsls	r1, r4
 800275c:	b249      	sxtb	r1, r1
    }
    
    // Draw in the right color
    if(color == White) {
 800275e:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002760:	bf0c      	ite	eq
 8002762:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002764:	438b      	bicne	r3, r1
 8002766:	542b      	strb	r3, [r5, r0]
    }
}
 8002768:	bd30      	pop	{r4, r5, pc}
 800276a:	bf00      	nop
 800276c:	20000218 	.word	0x20000218
 8002770:	2000021e 	.word	0x2000021e

08002774 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002778:	4604      	mov	r4, r0
 800277a:	b087      	sub	sp, #28
 800277c:	a806      	add	r0, sp, #24
 800277e:	e900 0006 	stmdb	r0, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002782:	f1a4 0220 	sub.w	r2, r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002786:	469b      	mov	fp, r3
    if (ch < 32 || ch > 126)
 8002788:	b2d3      	uxtb	r3, r2
 800278a:	2b5e      	cmp	r3, #94	; 0x5e
 800278c:	d83e      	bhi.n	800280c <ssd1306_WriteChar+0x98>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <ssd1306_WriteChar+0x9c>)
 8002790:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8002794:	881d      	ldrh	r5, [r3, #0]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	eb05 0109 	add.w	r1, r5, r9
 800279c:	2980      	cmp	r1, #128	; 0x80
 800279e:	dc35      	bgt.n	800280c <ssd1306_WriteChar+0x98>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80027a0:	885b      	ldrh	r3, [r3, #2]
 80027a2:	f89d a011 	ldrb.w	sl, [sp, #17]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	eb03 010a 	add.w	r1, r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027ac:	2940      	cmp	r1, #64	; 0x40
 80027ae:	dc2d      	bgt.n	800280c <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80027b0:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027b2:	fb0a f302 	mul.w	r3, sl, r2
 80027b6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 80027b8:	45b2      	cmp	sl, r6
 80027ba:	d806      	bhi.n	80027ca <ssd1306_WriteChar+0x56>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027bc:	9b01      	ldr	r3, [sp, #4]
 80027be:	444d      	add	r5, r9
 80027c0:	801d      	strh	r5, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 80027c2:	4620      	mov	r0, r4
 80027c4:	b007      	add	sp, #28
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 80027ca:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027cc:	9b02      	ldr	r3, [sp, #8]
 80027ce:	9905      	ldr	r1, [sp, #20]
 80027d0:	199a      	adds	r2, r3, r6
 80027d2:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80027d6:	9303      	str	r3, [sp, #12]
 80027d8:	9b00      	ldr	r3, [sp, #0]
 80027da:	eb06 0803 	add.w	r8, r6, r3
 80027de:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 80027e2:	45b9      	cmp	r9, r7
 80027e4:	d801      	bhi.n	80027ea <ssd1306_WriteChar+0x76>
    for(i = 0; i < Font.FontHeight; i++) {
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7e6      	b.n	80027b8 <ssd1306_WriteChar+0x44>
            if((b << j) & 0x8000)  {
 80027ea:	9b03      	ldr	r3, [sp, #12]
 80027ec:	1978      	adds	r0, r7, r5
 80027ee:	fa03 f207 	lsl.w	r2, r3, r7
 80027f2:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80027f4:	bf58      	it	pl
 80027f6:	fabb f28b 	clzpl	r2, fp
 80027fa:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80027fc:	bf4c      	ite	mi
 80027fe:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002800:	0952      	lsrpl	r2, r2, #5
 8002802:	4641      	mov	r1, r8
 8002804:	f7ff ff96 	bl	8002734 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002808:	3701      	adds	r7, #1
 800280a:	e7ea      	b.n	80027e2 <ssd1306_WriteChar+0x6e>
        return 0;
 800280c:	2400      	movs	r4, #0
 800280e:	e7d8      	b.n	80027c2 <ssd1306_WriteChar+0x4e>
 8002810:	20000218 	.word	0x20000218

08002814 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002816:	466d      	mov	r5, sp
 8002818:	461f      	mov	r7, r3
 800281a:	e885 0006 	stmia.w	r5, {r1, r2}
 800281e:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 8002820:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8002824:	b144      	cbz	r4, 8002838 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002826:	e895 0006 	ldmia.w	r5, {r1, r2}
 800282a:	4620      	mov	r0, r4
 800282c:	463b      	mov	r3, r7
 800282e:	f7ff ffa1 	bl	8002774 <ssd1306_WriteChar>
 8002832:	7834      	ldrb	r4, [r6, #0]
 8002834:	42a0      	cmp	r0, r4
 8002836:	d0f3      	beq.n	8002820 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8002838:	4620      	mov	r0, r4
 800283a:	b003      	add	sp, #12
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002840 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <ssd1306_SetCursor+0x8>)
 8002842:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8002844:	8059      	strh	r1, [r3, #2]
}
 8002846:	4770      	bx	lr
 8002848:	20000218 	.word	0x20000218

0800284c <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t deltaX = abs(x2 - x1);
 8002850:	1a17      	subs	r7, r2, r0
  int32_t deltaY = abs(y2 - y1);
 8002852:	eba3 0801 	sub.w	r8, r3, r1
  int32_t deltaX = abs(x2 - x1);
 8002856:	2f00      	cmp	r7, #0
 8002858:	bfb8      	it	lt
 800285a:	427f      	neglt	r7, r7
  int32_t deltaY = abs(y2 - y1);
 800285c:	f1b8 0f00 	cmp.w	r8, #0
 8002860:	bfb8      	it	lt
 8002862:	f1c8 0800 	rsblt	r8, r8, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002866:	4699      	mov	r9, r3
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002868:	4282      	cmp	r2, r0
 800286a:	bf8c      	ite	hi
 800286c:	2301      	movhi	r3, #1
 800286e:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002872:	b085      	sub	sp, #20
 8002874:	4692      	mov	sl, r2
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002876:	9301      	str	r3, [sp, #4]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002878:	4589      	cmp	r9, r1
 800287a:	bf8c      	ite	hi
 800287c:	2301      	movhi	r3, #1
 800287e:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002882:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8002886:	4605      	mov	r5, r0
 8002888:	460c      	mov	r4, r1
  int32_t error = deltaX - deltaY;
  int32_t error2;
	
  ssd1306_DrawPixel(x2, y2, color);
 800288a:	465a      	mov	r2, fp
 800288c:	4649      	mov	r1, r9
 800288e:	4650      	mov	r0, sl
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002890:	9302      	str	r3, [sp, #8]
  int32_t error = deltaX - deltaY;
 8002892:	eba7 0608 	sub.w	r6, r7, r8
  ssd1306_DrawPixel(x2, y2, color);
 8002896:	f7ff ff4d 	bl	8002734 <ssd1306_DrawPixel>
	while((x1 != x2) || (y1 != y2))
	{
    ssd1306_DrawPixel(x1, y1, color);
    error2 = error * 2;
    if(error2 > -deltaY)
 800289a:	f1c8 0300 	rsb	r3, r8, #0
	while((x1 != x2) || (y1 != y2))
 800289e:	4555      	cmp	r5, sl
 80028a0:	d104      	bne.n	80028ac <ssd1306_Line+0x60>
 80028a2:	454c      	cmp	r4, r9
 80028a4:	d102      	bne.n	80028ac <ssd1306_Line+0x60>
    {
    /*nothing to do*/
    }
  }
  return;
}
 80028a6:	b005      	add	sp, #20
 80028a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ssd1306_DrawPixel(x1, y1, color);
 80028ac:	4621      	mov	r1, r4
 80028ae:	4628      	mov	r0, r5
 80028b0:	465a      	mov	r2, fp
 80028b2:	9303      	str	r3, [sp, #12]
 80028b4:	f7ff ff3e 	bl	8002734 <ssd1306_DrawPixel>
    if(error2 > -deltaY)
 80028b8:	9b03      	ldr	r3, [sp, #12]
    error2 = error * 2;
 80028ba:	0072      	lsls	r2, r6, #1
    if(error2 > -deltaY)
 80028bc:	4293      	cmp	r3, r2
      x1 += signX;
 80028be:	bfbf      	itttt	lt
 80028c0:	9901      	ldrlt	r1, [sp, #4]
      error -= deltaY;
 80028c2:	eba6 0608 	sublt.w	r6, r6, r8
      x1 += signX;
 80028c6:	186d      	addlt	r5, r5, r1
 80028c8:	b2ed      	uxtblt	r5, r5
    if(error2 < deltaX)
 80028ca:	4297      	cmp	r7, r2
      y1 += signY;
 80028cc:	bfc1      	itttt	gt
 80028ce:	9a02      	ldrgt	r2, [sp, #8]
      error += deltaX;
 80028d0:	19f6      	addgt	r6, r6, r7
      y1 += signY;
 80028d2:	18a4      	addgt	r4, r4, r2
 80028d4:	b2e4      	uxtbgt	r4, r4
 80028d6:	e7e2      	b.n	800289e <ssd1306_Line+0x52>

080028d8 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80028d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028da:	460e      	mov	r6, r1
 80028dc:	4617      	mov	r7, r2
  uint16_t i;
  if(par_vertex != 0){
 80028de:	b138      	cbz	r0, 80028f0 <ssd1306_Polyline+0x18>
 80028e0:	4604      	mov	r4, r0
 80028e2:	2500      	movs	r5, #0
 80028e4:	3501      	adds	r5, #1
    for(i = 1; i < par_size; i++){
 80028e6:	b2ab      	uxth	r3, r5
 80028e8:	429e      	cmp	r6, r3
 80028ea:	f104 0402 	add.w	r4, r4, #2
 80028ee:	d801      	bhi.n	80028f4 <ssd1306_Polyline+0x1c>
  else
  {
    /*nothing to do*/
  }
  return;
}
 80028f0:	b003      	add	sp, #12
 80028f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80028f4:	7863      	ldrb	r3, [r4, #1]
 80028f6:	7822      	ldrb	r2, [r4, #0]
 80028f8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80028fc:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8002900:	9700      	str	r7, [sp, #0]
 8002902:	f7ff ffa3 	bl	800284c <ssd1306_Line>
 8002906:	e7ed      	b.n	80028e4 <ssd1306_Polyline+0xc>

08002908 <ssd1306_DrawArc>:
}
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t loc_sweep = 0;
	float rad;
	
	loc_sweep = ssd1306_NormalizeTo0_360(sweep);
	
	count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800290c:	240a      	movs	r4, #10
	approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800290e:	2524      	movs	r5, #36	; 0x24
	count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002910:	fb93 f4f4 	sdiv	r4, r3, r4
	approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002914:	f44f 73b4 	mov.w	r3, #360	; 0x168
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002918:	b08b      	sub	sp, #44	; 0x2c
 800291a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800291e:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 8002922:	9208      	str	r2, [sp, #32]
	approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002924:	4345      	muls	r5, r0
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002926:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
	approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800292a:	fbb5 f5f3 	udiv	r5, r5, r3
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 800292e:	9209      	str	r2, [sp, #36]	; 0x24
	approx_degree = loc_sweep / (float)approx_segments;
 8002930:	f7fe f9b0 	bl	8000c94 <__aeabi_ui2f>
 8002934:	4682      	mov	sl, r0
 8002936:	4628      	mov	r0, r5
 8002938:	f7fe f9ac 	bl	8000c94 <__aeabi_ui2f>
 800293c:	4601      	mov	r1, r0
 800293e:	4650      	mov	r0, sl
 8002940:	f7fe fab4 	bl	8000eac <__aeabi_fdiv>
 8002944:	4683      	mov	fp, r0
	while(count < approx_segments)
 8002946:	42ac      	cmp	r4, r5
 8002948:	d302      	bcc.n	8002950 <ssd1306_DrawArc+0x48>
		yp2 = y + (int8_t)(cos(rad)*radius);	
		ssd1306_Line(xp1,yp1,xp2,yp2,color);
	}
	
	return;
}
 800294a:	b00b      	add	sp, #44	; 0x2c
 800294c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rad = ssd1306_DegToRad(count*approx_degree);
 8002950:	4620      	mov	r0, r4
 8002952:	f7fe f99f 	bl	8000c94 <__aeabi_ui2f>
 8002956:	4659      	mov	r1, fp
 8002958:	f7fe f9f4 	bl	8000d44 <__aeabi_fmul>
	return par_deg * 3.14 / 180.0;
 800295c:	f7fd fd64 	bl	8000428 <__aeabi_f2d>
 8002960:	a33b      	add	r3, pc, #236	; (adr r3, 8002a50 <ssd1306_DrawArc+0x148>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fdb7 	bl	80004d8 <__aeabi_dmul>
 800296a:	2200      	movs	r2, #0
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <ssd1306_DrawArc+0x150>)
 800296e:	f7fd fedd 	bl	800072c <__aeabi_ddiv>
 8002972:	f7fe f889 	bl	8000a88 <__aeabi_d2f>
		xp1 = x + (int8_t)(sin(rad)*radius);
 8002976:	f7fd fd57 	bl	8000428 <__aeabi_f2d>
 800297a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800297e:	f003 f9e7 	bl	8005d50 <sin>
 8002982:	4680      	mov	r8, r0
 8002984:	9808      	ldr	r0, [sp, #32]
 8002986:	4689      	mov	r9, r1
 8002988:	f7fd fd3c 	bl	8000404 <__aeabi_i2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4606      	mov	r6, r0
 8002992:	460f      	mov	r7, r1
 8002994:	4640      	mov	r0, r8
 8002996:	4649      	mov	r1, r9
 8002998:	f7fd fd9e 	bl	80004d8 <__aeabi_dmul>
 800299c:	f7fe f84c 	bl	8000a38 <__aeabi_d2iz>
 80029a0:	9b02      	ldr	r3, [sp, #8]
		count++;
 80029a2:	3401      	adds	r4, #1
		xp1 = x + (int8_t)(sin(rad)*radius);
 80029a4:	4418      	add	r0, r3
 80029a6:	b2c3      	uxtb	r3, r0
		yp1 = y + (int8_t)(cos(rad)*radius);	
 80029a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		xp1 = x + (int8_t)(sin(rad)*radius);
 80029ac:	9306      	str	r3, [sp, #24]
		yp1 = y + (int8_t)(cos(rad)*radius);	
 80029ae:	f003 f999 	bl	8005ce4 <cos>
 80029b2:	460b      	mov	r3, r1
 80029b4:	4602      	mov	r2, r0
 80029b6:	4639      	mov	r1, r7
 80029b8:	4630      	mov	r0, r6
 80029ba:	f7fd fd8d 	bl	80004d8 <__aeabi_dmul>
 80029be:	f7fe f83b 	bl	8000a38 <__aeabi_d2iz>
 80029c2:	9b03      	ldr	r3, [sp, #12]
		if(count != approx_segments)
 80029c4:	42a5      	cmp	r5, r4
		yp1 = y + (int8_t)(cos(rad)*radius);	
 80029c6:	4418      	add	r0, r3
 80029c8:	b2c3      	uxtb	r3, r0
 80029ca:	9307      	str	r3, [sp, #28]
		if(count != approx_segments)
 80029cc:	d03d      	beq.n	8002a4a <ssd1306_DrawArc+0x142>
			rad = ssd1306_DegToRad(count*approx_degree);
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7fe f960 	bl	8000c94 <__aeabi_ui2f>
 80029d4:	4659      	mov	r1, fp
 80029d6:	f7fe f9b5 	bl	8000d44 <__aeabi_fmul>
	return par_deg * 3.14 / 180.0;
 80029da:	f7fd fd25 	bl	8000428 <__aeabi_f2d>
 80029de:	a31c      	add	r3, pc, #112	; (adr r3, 8002a50 <ssd1306_DrawArc+0x148>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fd78 	bl	80004d8 <__aeabi_dmul>
 80029e8:	2200      	movs	r2, #0
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <ssd1306_DrawArc+0x150>)
 80029ec:	f7fd fe9e 	bl	800072c <__aeabi_ddiv>
 80029f0:	f7fe f84a 	bl	8000a88 <__aeabi_d2f>
		xp2 = x + (int8_t)(sin(rad)*radius);
 80029f4:	f7fd fd18 	bl	8000428 <__aeabi_f2d>
 80029f8:	4680      	mov	r8, r0
 80029fa:	4689      	mov	r9, r1
 80029fc:	f003 f9a8 	bl	8005d50 <sin>
 8002a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
		yp2 = y + (int8_t)(cos(rad)*radius);	
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f003 f96c 	bl	8005ce4 <cos>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4630      	mov	r0, r6
 8002a12:	4639      	mov	r1, r7
 8002a14:	f7fd fd60 	bl	80004d8 <__aeabi_dmul>
 8002a18:	f7fe f80e 	bl	8000a38 <__aeabi_d2iz>
 8002a1c:	9b03      	ldr	r3, [sp, #12]
		xp2 = x + (int8_t)(sin(rad)*radius);
 8002a1e:	4639      	mov	r1, r7
		yp2 = y + (int8_t)(cos(rad)*radius);	
 8002a20:	4418      	add	r0, r3
		ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8002a22:	fa5f f880 	uxtb.w	r8, r0
		xp2 = x + (int8_t)(sin(rad)*radius);
 8002a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	f7fd fd54 	bl	80004d8 <__aeabi_dmul>
 8002a30:	f7fe f802 	bl	8000a38 <__aeabi_d2iz>
 8002a34:	9b02      	ldr	r3, [sp, #8]
 8002a36:	181a      	adds	r2, r3, r0
		ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8002a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a42:	4643      	mov	r3, r8
 8002a44:	f7ff ff02 	bl	800284c <ssd1306_Line>
 8002a48:	e77d      	b.n	8002946 <ssd1306_DrawArc+0x3e>
	return par_deg * 3.14 / 180.0;
 8002a4a:	4650      	mov	r0, sl
 8002a4c:	e7c5      	b.n	80029da <ssd1306_DrawArc+0xd2>
 8002a4e:	bf00      	nop
 8002a50:	51eb851f 	.word	0x51eb851f
 8002a54:	40091eb8 	.word	0x40091eb8
 8002a58:	40668000 	.word	0x40668000

08002a5c <ssd1306_DrawCircle>:
  int32_t x = -par_r;
  int32_t y = 0;
  int32_t err = 2 - 2 * par_r;
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002a5c:	f010 0f80 	tst.w	r0, #128	; 0x80
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a64:	4682      	mov	sl, r0
 8002a66:	468b      	mov	fp, r1
 8002a68:	4698      	mov	r8, r3
  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002a6a:	d145      	bne.n	8002af8 <ssd1306_DrawCircle+0x9c>
 8002a6c:	293f      	cmp	r1, #63	; 0x3f
 8002a6e:	d843      	bhi.n	8002af8 <ssd1306_DrawCircle+0x9c>
  int32_t y = 0;
 8002a70:	2700      	movs	r7, #0
  int32_t x = -par_r;
 8002a72:	4255      	negs	r5, r2
  int32_t err = 2 - 2 * par_r;
 8002a74:	f1c2 0201 	rsb	r2, r2, #1
 8002a78:	0054      	lsls	r4, r2, #1
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002a7a:	b2ee      	uxtb	r6, r5
 8002a7c:	b2fb      	uxtb	r3, r7
 8002a7e:	ebaa 0906 	sub.w	r9, sl, r6
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	445b      	add	r3, fp
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	fa5f f989 	uxtb.w	r9, r9
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4642      	mov	r2, r8
 8002a90:	4648      	mov	r0, r9
 8002a92:	9301      	str	r3, [sp, #4]
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002a94:	4456      	add	r6, sl
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002a96:	f7ff fe4d 	bl	8002734 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	b2f6      	uxtb	r6, r6
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7ff fe46 	bl	8002734 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002aa8:	9b00      	ldr	r3, [sp, #0]
 8002aaa:	4642      	mov	r2, r8
 8002aac:	ebab 0303 	sub.w	r3, fp, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f7ff fe3c 	bl	8002734 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002abc:	9b00      	ldr	r3, [sp, #0]
 8002abe:	4642      	mov	r2, r8
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4648      	mov	r0, r9
 8002ac4:	f7ff fe36 	bl	8002734 <ssd1306_DrawPixel>
        e2 = err;
        if (e2 <= y) {
 8002ac8:	42a7      	cmp	r7, r4
 8002aca:	db13      	blt.n	8002af4 <ssd1306_DrawCircle+0x98>
            y++;
 8002acc:	3701      	adds	r7, #1
            err = err + (y * 2 + 1);
 8002ace:	eb04 0347 	add.w	r3, r4, r7, lsl #1
            if(-x == y && e2 <= x) {
 8002ad2:	42ef      	cmn	r7, r5
            err = err + (y * 2 + 1);
 8002ad4:	f103 0301 	add.w	r3, r3, #1
            if(-x == y && e2 <= x) {
 8002ad8:	d102      	bne.n	8002ae0 <ssd1306_DrawCircle+0x84>
 8002ada:	42a5      	cmp	r5, r4
 8002adc:	db02      	blt.n	8002ae4 <ssd1306_DrawCircle+0x88>
              e2 = 0;
 8002ade:	2400      	movs	r4, #0
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8002ae0:	42a5      	cmp	r5, r4
 8002ae2:	da05      	bge.n	8002af0 <ssd1306_DrawCircle+0x94>
          x++;
 8002ae4:	3501      	adds	r5, #1
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8002ae6:	2d01      	cmp	r5, #1
 8002ae8:	d006      	beq.n	8002af8 <ssd1306_DrawCircle+0x9c>
          err = err + (x * 2 + 1);
 8002aea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002aee:	3301      	adds	r3, #1
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002af0:	461c      	mov	r4, r3
 8002af2:	e7c2      	b.n	8002a7a <ssd1306_DrawCircle+0x1e>
 8002af4:	4623      	mov	r3, r4
 8002af6:	e7f3      	b.n	8002ae0 <ssd1306_DrawCircle+0x84>

    return;
}
 8002af8:	b003      	add	sp, #12
 8002afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002afe <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002afe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002b02:	461c      	mov	r4, r3
 8002b04:	4617      	mov	r7, r2
 8002b06:	460e      	mov	r6, r1
 8002b08:	4680      	mov	r8, r0
 8002b0a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  ssd1306_Line(x1,y1,x2,y1,color);
 8002b0e:	460b      	mov	r3, r1
 8002b10:	9500      	str	r5, [sp, #0]
 8002b12:	f7ff fe9b 	bl	800284c <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002b16:	4623      	mov	r3, r4
 8002b18:	463a      	mov	r2, r7
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	9500      	str	r5, [sp, #0]
 8002b20:	f7ff fe94 	bl	800284c <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8002b24:	4623      	mov	r3, r4
 8002b26:	4642      	mov	r2, r8
 8002b28:	4621      	mov	r1, r4
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	9500      	str	r5, [sp, #0]
 8002b2e:	f7ff fe8d 	bl	800284c <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002b32:	4633      	mov	r3, r6
 8002b34:	4642      	mov	r2, r8
 8002b36:	4621      	mov	r1, r4
 8002b38:	4640      	mov	r0, r8
 8002b3a:	9508      	str	r5, [sp, #32]

  return;
}
 8002b3c:	b002      	add	sp, #8
 8002b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_Line(x1,y2,x1,y1,color);
 8002b42:	f7ff be83 	b.w	800284c <ssd1306_Line>

08002b46 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 8002b46:	b570      	push	{r4, r5, r6, lr}
    ssd1306_Fill(Black);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff fd65 	bl	8002618 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
    uint32_t end = start;
    uint8_t x = 0;
    uint8_t y = 0;
 8002b4e:	2400      	movs	r4, #0
    uint32_t start = HAL_GetTick();
 8002b50:	f7fe fa8a 	bl	8001068 <HAL_GetTick>
    uint8_t x = 0;
 8002b54:	4625      	mov	r5, r4
    uint32_t start = HAL_GetTick();
 8002b56:	4606      	mov	r6, r0
    do {
        ssd1306_DrawPixel(x, y, Black);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7ff fde9 	bl	8002734 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8002b62:	b9cc      	cbnz	r4, 8002b98 <ssd1306_TestBorder+0x52>
 8002b64:	2d7e      	cmp	r5, #126	; 0x7e
 8002b66:	d826      	bhi.n	8002bb6 <ssd1306_TestBorder+0x70>
            x++;
 8002b68:	3501      	adds	r5, #1
 8002b6a:	b2ed      	uxtb	r5, r5
        else if((y == 63) && (x > 0)) 
            x--;
        else
            y--;

        ssd1306_DrawPixel(x, y, White);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	4628      	mov	r0, r5
 8002b72:	f7ff fddf 	bl	8002734 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8002b76:	f7ff fd5d 	bl	8002634 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8002b7a:	2005      	movs	r0, #5
 8002b7c:	f7fe fa7a 	bl	8001074 <HAL_Delay>
        end = HAL_GetTick();
 8002b80:	f7fe fa72 	bl	8001068 <HAL_GetTick>
    } while((end - start) < 8000);
 8002b84:	1b80      	subs	r0, r0, r6
 8002b86:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 8002b8a:	d3e5      	bcc.n	8002b58 <ssd1306_TestBorder+0x12>
   
    HAL_Delay(1000);
}
 8002b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(1000);
 8002b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b94:	f7fe ba6e 	b.w	8001074 <HAL_Delay>
        else if((x == 127) && (y < 63))
 8002b98:	2d7f      	cmp	r5, #127	; 0x7f
 8002b9a:	d105      	bne.n	8002ba8 <ssd1306_TestBorder+0x62>
 8002b9c:	2c3e      	cmp	r4, #62	; 0x3e
 8002b9e:	d80f      	bhi.n	8002bc0 <ssd1306_TestBorder+0x7a>
            y++;
 8002ba0:	3401      	adds	r4, #1
 8002ba2:	b2e4      	uxtb	r4, r4
 8002ba4:	257f      	movs	r5, #127	; 0x7f
 8002ba6:	e7e1      	b.n	8002b6c <ssd1306_TestBorder+0x26>
        else if((y == 63) && (x > 0)) 
 8002ba8:	2c3f      	cmp	r4, #63	; 0x3f
 8002baa:	d106      	bne.n	8002bba <ssd1306_TestBorder+0x74>
 8002bac:	b12d      	cbz	r5, 8002bba <ssd1306_TestBorder+0x74>
            x--;
 8002bae:	3d01      	subs	r5, #1
 8002bb0:	b2ed      	uxtb	r5, r5
 8002bb2:	243f      	movs	r4, #63	; 0x3f
 8002bb4:	e7da      	b.n	8002b6c <ssd1306_TestBorder+0x26>
        else if((x == 127) && (y < 63))
 8002bb6:	2d7f      	cmp	r5, #127	; 0x7f
 8002bb8:	d0f2      	beq.n	8002ba0 <ssd1306_TestBorder+0x5a>
            y--;
 8002bba:	3c01      	subs	r4, #1
 8002bbc:	b2e4      	uxtb	r4, r4
 8002bbe:	e7d5      	b.n	8002b6c <ssd1306_TestBorder+0x26>
        else if((y == 63) && (x > 0)) 
 8002bc0:	2c3f      	cmp	r4, #63	; 0x3f
 8002bc2:	d1fa      	bne.n	8002bba <ssd1306_TestBorder+0x74>
 8002bc4:	e7f3      	b.n	8002bae <ssd1306_TestBorder+0x68>
	...

08002bc8 <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8002bc8:	b508      	push	{r3, lr}
    ssd1306_Fill(Black);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fd24 	bl	8002618 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	f7ff fe34 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <ssd1306_TestFonts+0x60>)
 8002bda:	2301      	movs	r3, #1
 8002bdc:	ca06      	ldmia	r2, {r1, r2}
 8002bde:	4813      	ldr	r0, [pc, #76]	; (8002c2c <ssd1306_TestFonts+0x64>)
 8002be0:	f7ff fe18 	bl	8002814 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 8002be4:	211a      	movs	r1, #26
 8002be6:	2002      	movs	r0, #2
 8002be8:	f7ff fe2a 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8002bec:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <ssd1306_TestFonts+0x68>)
 8002bee:	2301      	movs	r3, #1
 8002bf0:	ca06      	ldmia	r2, {r1, r2}
 8002bf2:	4810      	ldr	r0, [pc, #64]	; (8002c34 <ssd1306_TestFonts+0x6c>)
 8002bf4:	f7ff fe0e 	bl	8002814 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	f7ff fe20 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <ssd1306_TestFonts+0x70>)
 8002c02:	2301      	movs	r3, #1
 8002c04:	ca06      	ldmia	r2, {r1, r2}
 8002c06:	480d      	ldr	r0, [pc, #52]	; (8002c3c <ssd1306_TestFonts+0x74>)
 8002c08:	f7ff fe04 	bl	8002814 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 8002c0c:	2136      	movs	r1, #54	; 0x36
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f7ff fe16 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <ssd1306_TestFonts+0x78>)
 8002c16:	2301      	movs	r3, #1
 8002c18:	ca06      	ldmia	r2, {r1, r2}
 8002c1a:	480a      	ldr	r0, [pc, #40]	; (8002c44 <ssd1306_TestFonts+0x7c>)
 8002c1c:	f7ff fdfa 	bl	8002814 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
}
 8002c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ssd1306_UpdateScreen();
 8002c24:	f7ff bd06 	b.w	8002634 <ssd1306_UpdateScreen>
 8002c28:	20000010 	.word	0x20000010
 8002c2c:	08009be7 	.word	0x08009be7
 8002c30:	20000008 	.word	0x20000008
 8002c34:	08009bf2 	.word	0x08009bf2
 8002c38:	20000020 	.word	0x20000020
 8002c3c:	08009bfd 	.word	0x08009bfd
 8002c40:	20000018 	.word	0x20000018
 8002c44:	08009c07 	.word	0x08009c07

08002c48 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8002c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ssd1306_Fill(White);
 8002c4c:	2001      	movs	r0, #1
void ssd1306_TestFPS() {
 8002c4e:	b095      	sub	sp, #84	; 0x54
    ssd1306_Fill(White);
 8002c50:	f7ff fce2 	bl	8002618 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8002c54:	f7fe fa08 	bl	8001068 <HAL_GetTick>
    uint32_t end = start;
    int fps = 0;
    char message[] = "ABCDEFGHIJK";
 8002c58:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <ssd1306_TestFPS+0xdc>)
    uint32_t start = HAL_GetTick();
 8002c5a:	4607      	mov	r7, r0
    char message[] = "ABCDEFGHIJK";
 8002c5c:	6851      	ldr	r1, [r2, #4]
 8002c5e:	6810      	ldr	r0, [r2, #0]
 8002c60:	ab01      	add	r3, sp, #4
 8002c62:	c303      	stmia	r3!, {r0, r1}
 8002c64:	6890      	ldr	r0, [r2, #8]
   
    ssd1306_SetCursor(2,0);
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002c66:	4c30      	ldr	r4, [pc, #192]	; (8002d28 <ssd1306_TestFPS+0xe0>)
    char message[] = "ABCDEFGHIJK";
 8002c68:	6018      	str	r0, [r3, #0]
    ssd1306_SetCursor(2,0);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f7ff fde7 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002c72:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002c76:	2300      	movs	r3, #0
 8002c78:	482c      	ldr	r0, [pc, #176]	; (8002d2c <ssd1306_TestFPS+0xe4>)
 8002c7a:	f7ff fdcb 	bl	8002814 <ssd1306_WriteString>
    int fps = 0;
 8002c7e:	2500      	movs	r5, #0
   
    do {
        ssd1306_SetCursor(2, 18);
 8002c80:	2112      	movs	r1, #18
 8002c82:	2002      	movs	r0, #2
 8002c84:	f7ff fddc 	bl	8002840 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002c88:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	a801      	add	r0, sp, #4
 8002c90:	f7ff fdc0 	bl	8002814 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002c94:	f7ff fcce 	bl	8002634 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002c98:	f89d 6004 	ldrb.w	r6, [sp, #4]
        memmove(message, message+1, sizeof(message)-2);
 8002c9c:	220a      	movs	r2, #10
 8002c9e:	f10d 0105 	add.w	r1, sp, #5
 8002ca2:	a801      	add	r0, sp, #4
 8002ca4:	f000 facd 	bl	8003242 <memmove>
        message[sizeof(message)-2] = ch;
 8002ca8:	f88d 600e 	strb.w	r6, [sp, #14]

        fps++;
        end = HAL_GetTick();
 8002cac:	f7fe f9dc 	bl	8001068 <HAL_GetTick>
    } while((end - start) < 5000);
 8002cb0:	f241 3387 	movw	r3, #4999	; 0x1387
 8002cb4:	1bc6      	subs	r6, r0, r7
 8002cb6:	429e      	cmp	r6, r3
        fps++;
 8002cb8:	f105 0501 	add.w	r5, r5, #1
    } while((end - start) < 5000);
 8002cbc:	d9e0      	bls.n	8002c80 <ssd1306_TestFPS+0x38>
   
    HAL_Delay(1000);
 8002cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc2:	f7fe f9d7 	bl	8001074 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f7fd ffe8 	bl	8000c9c <__aeabi_i2f>
 8002ccc:	f7fd fbac 	bl	8000428 <__aeabi_f2d>
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	4689      	mov	r9, r1
 8002cd6:	f7fd fb85 	bl	80003e4 <__aeabi_ui2d>
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <ssd1306_TestFPS+0xe8>)
 8002cde:	f7fd fd25 	bl	800072c <__aeabi_ddiv>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd fd1f 	bl	800072c <__aeabi_ddiv>
 8002cee:	f7fd fea3 	bl	8000a38 <__aeabi_d2iz>
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <ssd1306_TestFPS+0xec>)
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2140      	movs	r1, #64	; 0x40
 8002cf8:	a804      	add	r0, sp, #16
 8002cfa:	f000 ff8f 	bl	8003c1c <sniprintf>
   
    ssd1306_Fill(White);
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7ff fc8a 	bl	8002618 <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 8002d04:	2112      	movs	r1, #18
 8002d06:	2002      	movs	r0, #2
 8002d08:	f7ff fd9a 	bl	8002840 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8002d0c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002d10:	2300      	movs	r3, #0
 8002d12:	a804      	add	r0, sp, #16
 8002d14:	f7ff fd7e 	bl	8002814 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002d18:	f7ff fc8c 	bl	8002634 <ssd1306_UpdateScreen>
}
 8002d1c:	b015      	add	sp, #84	; 0x54
 8002d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d22:	bf00      	nop
 8002d24:	08009bdb 	.word	0x08009bdb
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	08009bc8 	.word	0x08009bc8
 8002d30:	408f4000 	.word	0x408f4000
 8002d34:	08009bd3 	.word	0x08009bd3

08002d38 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002d38:	b513      	push	{r0, r1, r4, lr}

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002d3a:	2401      	movs	r4, #1
 8002d3c:	233f      	movs	r3, #63	; 0x3f
 8002d3e:	4621      	mov	r1, r4
 8002d40:	4620      	mov	r0, r4
 8002d42:	9400      	str	r4, [sp, #0]
 8002d44:	227f      	movs	r2, #127	; 0x7f
 8002d46:	f7ff fd81 	bl	800284c <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002d4a:	9400      	str	r4, [sp, #0]
 8002d4c:	233f      	movs	r3, #63	; 0x3f
 8002d4e:	4622      	mov	r2, r4
 8002d50:	4621      	mov	r1, r4
 8002d52:	207f      	movs	r0, #127	; 0x7f
 8002d54:	f7ff fd7a 	bl	800284c <ssd1306_Line>
  ssd1306_UpdateScreen();
  return;
}
 8002d58:	b002      	add	sp, #8
 8002d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ssd1306_UpdateScreen();
 8002d5e:	f7ff bc69 	b.w	8002634 <ssd1306_UpdateScreen>

08002d62 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002d62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d64:	2401      	movs	r4, #1
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002d66:	4625      	mov	r5, r4
 8002d68:	f1c4 0340 	rsb	r3, r4, #64	; 0x40
 8002d6c:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
 8002d70:	4621      	mov	r1, r4
 8002d72:	4620      	mov	r0, r4
 8002d74:	3405      	adds	r4, #5
 8002d76:	9500      	str	r5, [sp, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	b2e4      	uxtb	r4, r4
 8002d7e:	f7ff febe 	bl	8002afe <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002d82:	2c1a      	cmp	r4, #26
 8002d84:	d1f0      	bne.n	8002d68 <ssd1306_TestRectangle+0x6>
  }
  ssd1306_UpdateScreen();
  return;
}
 8002d86:	b003      	add	sp, #12
 8002d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  ssd1306_UpdateScreen();
 8002d8c:	f7ff bc52 	b.w	8002634 <ssd1306_UpdateScreen>

08002d90 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002d90:	b510      	push	{r4, lr}
 8002d92:	241e      	movs	r4, #30
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
    ssd1306_DrawCircle(20* delta+30, 30, 10, White);
 8002d94:	4620      	mov	r0, r4
 8002d96:	3414      	adds	r4, #20
 8002d98:	2301      	movs	r3, #1
 8002d9a:	220a      	movs	r2, #10
 8002d9c:	211e      	movs	r1, #30
 8002d9e:	b2e4      	uxtb	r4, r4
 8002da0:	f7ff fe5c 	bl	8002a5c <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002da4:	2c82      	cmp	r4, #130	; 0x82
 8002da6:	d1f5      	bne.n	8002d94 <ssd1306_TestCircle+0x4>
  }
  ssd1306_UpdateScreen();
  return;
}
 8002da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ssd1306_UpdateScreen();
 8002dac:	f7ff bc42 	b.w	8002634 <ssd1306_UpdateScreen>

08002db0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002db0:	b507      	push	{r0, r1, r2, lr}

  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002db2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002db6:	2201      	movs	r2, #1
 8002db8:	e9cd 3200 	strd	r3, r2, [sp]
 8002dbc:	221e      	movs	r2, #30
 8002dbe:	2314      	movs	r3, #20
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7ff fda0 	bl	8002908 <ssd1306_DrawArc>
  ssd1306_UpdateScreen();
  return;
}
 8002dc8:	b003      	add	sp, #12
 8002dca:	f85d eb04 	ldr.w	lr, [sp], #4
  ssd1306_UpdateScreen();
 8002dce:	f7ff bc31 	b.w	8002634 <ssd1306_UpdateScreen>
	...

08002dd4 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SSD1306_VERTEX loc_vertex[] =
 8002dd6:	466a      	mov	r2, sp
 8002dd8:	4615      	mov	r5, r2
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <ssd1306_TestPolyline+0x38>)
 8002ddc:	f103 0608 	add.w	r6, r3, #8
 8002de0:	4614      	mov	r4, r2
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	3308      	adds	r3, #8
 8002de8:	c403      	stmia	r4!, {r0, r1}
 8002dea:	42b3      	cmp	r3, r6
 8002dec:	4622      	mov	r2, r4
 8002dee:	d1f7      	bne.n	8002de0 <ssd1306_TestPolyline+0xc>
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	889b      	ldrh	r3, [r3, #4]
 8002df4:	6020      	str	r0, [r4, #0]
 8002df6:	80a3      	strh	r3, [r4, #4]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2107      	movs	r1, #7
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f7ff fd6b 	bl	80028d8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002e02:	f7ff fc17 	bl	8002634 <ssd1306_UpdateScreen>
  return;
}
 8002e06:	b004      	add	sp, #16
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
 8002e0a:	bf00      	nop
 8002e0c:	08006d50 	.word	0x08006d50

08002e10 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002e10:	b508      	push	{r3, lr}
    ssd1306_Init();
 8002e12:	f7ff fc29 	bl	8002668 <ssd1306_Init>
    ssd1306_TestFPS();
 8002e16:	f7ff ff17 	bl	8002c48 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002e1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e1e:	f7fe f929 	bl	8001074 <HAL_Delay>
    ssd1306_TestBorder();
 8002e22:	f7ff fe90 	bl	8002b46 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8002e26:	f7ff fecf 	bl	8002bc8 <ssd1306_TestFonts>
    HAL_Delay(3000);
 8002e2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e2e:	f7fe f921 	bl	8001074 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fbf0 	bl	8002618 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002e38:	f7ff ff93 	bl	8002d62 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002e3c:	f7ff ff7c 	bl	8002d38 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002e40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e44:	f7fe f916 	bl	8001074 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7ff fbe5 	bl	8002618 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002e4e:	f7ff ffc1 	bl	8002dd4 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002e52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e56:	f7fe f90d 	bl	8001074 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fbdc 	bl	8002618 <ssd1306_Fill>
    ssd1306_TestArc();
 8002e60:	f7ff ffa6 	bl	8002db0 <ssd1306_TestArc>
    HAL_Delay(3000);
 8002e64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e68:	f7fe f904 	bl	8001074 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7ff fbd3 	bl	8002618 <ssd1306_Fill>
    ssd1306_TestCircle();
 8002e72:	f7ff ff8d 	bl	8002d90 <ssd1306_TestCircle>
    HAL_Delay(3000);
}
 8002e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(3000);
 8002e7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e7e:	f7fe b8f9 	b.w	8001074 <HAL_Delay>
	...

08002e84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_MspInit+0x3c>)
{
 8002e86:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	f002 0201 	and.w	r2, r2, #1
 8002e96:	9200      	str	r2, [sp, #0]
 8002e98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002eae:	6853      	ldr	r3, [r2, #4]
 8002eb0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	b002      	add	sp, #8
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
 8002ecc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	2210      	movs	r2, #16
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	a802      	add	r0, sp, #8
 8002ed4:	f000 f9ce 	bl	8003274 <memset>
  if(hadc->Instance==ADC1)
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_ADC_MspInit+0x54>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d11b      	bne.n	8002f18 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002ee4:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	480b      	ldr	r0, [pc, #44]	; (8002f20 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ef2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ef6:	9200      	str	r2, [sp, #0]
 8002ef8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	f042 0204 	orr.w	r2, r2, #4
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f04:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f7fe fa3c 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd10      	pop	{r4, pc}
 8002f1c:	40012400 	.word	0x40012400
 8002f20:	40010800 	.word	0x40010800

08002f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
 8002f28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	a802      	add	r0, sp, #8
 8002f30:	f000 f9a0 	bl	8003274 <memset>
  if(hi2c->Instance==I2C1)
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <HAL_I2C_MspInit+0x68>)
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d124      	bne.n	8002f86 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4c14      	ldr	r4, [pc, #80]	; (8002f90 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3e:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	61a3      	str	r3, [r4, #24]
 8002f4c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	4811      	ldr	r0, [pc, #68]	; (8002f94 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f58:	2312      	movs	r3, #18
 8002f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f7fe fa15 	bl	8001390 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_I2C_MspInit+0x74>)
 8002f68:	6853      	ldr	r3, [r2, #4]
 8002f6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f6e:	f043 0302 	orr.w	r3, r3, #2
 8002f72:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f74:	69e3      	ldr	r3, [r4, #28]
 8002f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f7a:	61e3      	str	r3, [r4, #28]
 8002f7c:	69e3      	ldr	r3, [r4, #28]
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f86:	b006      	add	sp, #24
 8002f88:	bd10      	pop	{r4, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40005400 	.word	0x40005400
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	40010000 	.word	0x40010000

08002f9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9e:	2410      	movs	r4, #16
{
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	eb0d 0004 	add.w	r0, sp, r4
 8002fac:	f000 f962 	bl	8003274 <memset>
  if(hspi->Instance==SPI1)
 8002fb0:	682a      	ldr	r2, [r5, #0]
 8002fb2:	4b23      	ldr	r3, [pc, #140]	; (8003040 <HAL_SPI_MspInit+0xa4>)
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d141      	bne.n	800303c <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fb8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002fbc:	699a      	ldr	r2, [r3, #24]
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = CS_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2602      	movs	r6, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fc4:	619a      	str	r2, [r3, #24]
 8002fc6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc8:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fce:	9201      	str	r2, [sp, #4]
 8002fd0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd8:	f042 0204 	orr.w	r2, r2, #4
 8002fdc:	619a      	str	r2, [r3, #24]
 8002fde:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	4818      	ldr	r0, [pc, #96]	; (8003044 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	f002 0204 	and.w	r2, r2, #4
 8002fe6:	9202      	str	r2, [sp, #8]
 8002fe8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	619a      	str	r2, [r3, #24]
 8002ff2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff4:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8003006:	f7fe f9c3 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
 800300a:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300c:	eb0d 0104 	add.w	r1, sp, r4
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003016:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	f7fe f9ba 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 800301e:	eb0d 0104 	add.w	r1, sp, r4
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8003028:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 800302a:	f7fe f9b1 	bl	8001390 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800302e:	4a07      	ldr	r2, [pc, #28]	; (800304c <HAL_SPI_MspInit+0xb0>)
 8003030:	6853      	ldr	r3, [r2, #4]
 8003032:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800303c:	b008      	add	sp, #32
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	40013000 	.word	0x40013000
 8003044:	40010800 	.word	0x40010800
 8003048:	40010c00 	.word	0x40010c00
 800304c:	40010000 	.word	0x40010000

08003050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003050:	b510      	push	{r4, lr}
 8003052:	4604      	mov	r4, r0
 8003054:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003056:	2210      	movs	r2, #16
 8003058:	2100      	movs	r1, #0
 800305a:	a802      	add	r0, sp, #8
 800305c:	f000 f90a 	bl	8003274 <memset>
  if(huart->Instance==USART2)
 8003060:	6822      	ldr	r2, [r4, #0]
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_UART_MspInit+0x6c>)
 8003064:	429a      	cmp	r2, r3
 8003066:	d126      	bne.n	80030b6 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003068:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800306c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 800306e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003070:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003074:	61da      	str	r2, [r3, #28]
 8003076:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003078:	4811      	ldr	r0, [pc, #68]	; (80030c0 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800307a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800307e:	9200      	str	r2, [sp, #0]
 8003080:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	f042 0204 	orr.w	r2, r2, #4
 8003088:	619a      	str	r2, [r3, #24]
 800308a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80030a0:	f7fe f976 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a4:	2108      	movs	r1, #8
 80030a6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030aa:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80030ae:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f7fe f96d 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030b6:	b006      	add	sp, #24
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	40004400 	.word	0x40004400
 80030c0:	40010800 	.word	0x40010800

080030c4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030c4:	4770      	bx	lr

080030c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c6:	e7fe      	b.n	80030c6 <HardFault_Handler>

080030c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	e7fe      	b.n	80030ca <BusFault_Handler>

080030cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030cc:	e7fe      	b.n	80030cc <UsageFault_Handler>

080030ce <SVC_Handler>:
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:
 80030d0:	4770      	bx	lr

080030d2 <PendSV_Handler>:
 80030d2:	4770      	bx	lr

080030d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d4:	f7fd bfbc 	b.w	8001050 <HAL_IncTick>

080030d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	460e      	mov	r6, r1
 80030dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030de:	460c      	mov	r4, r1
 80030e0:	1ba3      	subs	r3, r4, r6
 80030e2:	429d      	cmp	r5, r3
 80030e4:	dc01      	bgt.n	80030ea <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80030e6:	4628      	mov	r0, r5
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80030ea:	f3af 8000 	nop.w
 80030ee:	f804 0b01 	strb.w	r0, [r4], #1
 80030f2:	e7f5      	b.n	80030e0 <_read+0x8>

080030f4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80030f4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <_sbrk+0x2c>)
{
 80030f8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	b909      	cbnz	r1, 8003102 <_sbrk+0xe>
		heap_end = &end;
 80030fe:	4909      	ldr	r1, [pc, #36]	; (8003124 <_sbrk+0x30>)
 8003100:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003102:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003104:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003106:	4402      	add	r2, r0
 8003108:	428a      	cmp	r2, r1
 800310a:	d906      	bls.n	800311a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800310c:	f000 f864 	bl	80031d8 <__errno>
 8003110:	230c      	movs	r3, #12
 8003112:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003118:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800311a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800311c:	e7fc      	b.n	8003118 <_sbrk+0x24>
 800311e:	bf00      	nop
 8003120:	20000620 	.word	0x20000620
 8003124:	200007a0 	.word	0x200007a0

08003128 <_close>:

int _close(int file)
{
	return -1;
}
 8003128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800312c:	4770      	bx	lr

0800312e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800312e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003132:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003134:	604b      	str	r3, [r1, #4]
}
 8003136:	4770      	bx	lr

08003138 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003138:	2001      	movs	r0, #1
 800313a:	4770      	bx	lr

0800313c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800313c:	2000      	movs	r0, #0
 800313e:	4770      	bx	lr

08003140 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003140:	4b0f      	ldr	r3, [pc, #60]	; (8003180 <SystemInit+0x40>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <SystemInit+0x44>)
 800314e:	400a      	ands	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800315c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003164:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800316c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800316e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003172:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <SystemInit+0x48>)
 800317a:	609a      	str	r2, [r3, #8]
#endif 
}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	f8ff0000 	.word	0xf8ff0000
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800318c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800318e:	e003      	b.n	8003198 <LoopCopyDataInit>

08003190 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003192:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003194:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003196:	3104      	adds	r1, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003198:	480a      	ldr	r0, [pc, #40]	; (80031c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800319c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800319e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80031a0:	d3f6      	bcc.n	8003190 <CopyDataInit>
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80031a4:	e002      	b.n	80031ac <LoopFillZerobss>

080031a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80031a8:	f842 3b04 	str.w	r3, [r2], #4

080031ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80031ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80031b0:	d3f9      	bcc.n	80031a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031b2:	f7ff ffc5 	bl	8003140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b6:	f000 f815 	bl	80031e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ba:	f7ff f8f5 	bl	80023a8 <main>
  bx lr
 80031be:	4770      	bx	lr
  ldr r3, =_sidata
 80031c0:	0800a0c8 	.word	0x0800a0c8
  ldr r0, =_sdata
 80031c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031c8:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 80031cc:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 80031d0:	200007a0 	.word	0x200007a0

080031d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC1_2_IRQHandler>
	...

080031d8 <__errno>:
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <__errno+0x8>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000002c 	.word	0x2000002c

080031e4 <__libc_init_array>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	2500      	movs	r5, #0
 80031e8:	4e0c      	ldr	r6, [pc, #48]	; (800321c <__libc_init_array+0x38>)
 80031ea:	4c0d      	ldr	r4, [pc, #52]	; (8003220 <__libc_init_array+0x3c>)
 80031ec:	1ba4      	subs	r4, r4, r6
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	42a5      	cmp	r5, r4
 80031f2:	d109      	bne.n	8003208 <__libc_init_array+0x24>
 80031f4:	f003 fd98 	bl	8006d28 <_init>
 80031f8:	2500      	movs	r5, #0
 80031fa:	4e0a      	ldr	r6, [pc, #40]	; (8003224 <__libc_init_array+0x40>)
 80031fc:	4c0a      	ldr	r4, [pc, #40]	; (8003228 <__libc_init_array+0x44>)
 80031fe:	1ba4      	subs	r4, r4, r6
 8003200:	10a4      	asrs	r4, r4, #2
 8003202:	42a5      	cmp	r5, r4
 8003204:	d105      	bne.n	8003212 <__libc_init_array+0x2e>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800320c:	4798      	blx	r3
 800320e:	3501      	adds	r5, #1
 8003210:	e7ee      	b.n	80031f0 <__libc_init_array+0xc>
 8003212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003216:	4798      	blx	r3
 8003218:	3501      	adds	r5, #1
 800321a:	e7f2      	b.n	8003202 <__libc_init_array+0x1e>
 800321c:	0800a0c0 	.word	0x0800a0c0
 8003220:	0800a0c0 	.word	0x0800a0c0
 8003224:	0800a0c0 	.word	0x0800a0c0
 8003228:	0800a0c4 	.word	0x0800a0c4

0800322c <memcpy>:
 800322c:	b510      	push	{r4, lr}
 800322e:	1e43      	subs	r3, r0, #1
 8003230:	440a      	add	r2, r1
 8003232:	4291      	cmp	r1, r2
 8003234:	d100      	bne.n	8003238 <memcpy+0xc>
 8003236:	bd10      	pop	{r4, pc}
 8003238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800323c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003240:	e7f7      	b.n	8003232 <memcpy+0x6>

08003242 <memmove>:
 8003242:	4288      	cmp	r0, r1
 8003244:	b510      	push	{r4, lr}
 8003246:	eb01 0302 	add.w	r3, r1, r2
 800324a:	d807      	bhi.n	800325c <memmove+0x1a>
 800324c:	1e42      	subs	r2, r0, #1
 800324e:	4299      	cmp	r1, r3
 8003250:	d00a      	beq.n	8003268 <memmove+0x26>
 8003252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003256:	f802 4f01 	strb.w	r4, [r2, #1]!
 800325a:	e7f8      	b.n	800324e <memmove+0xc>
 800325c:	4283      	cmp	r3, r0
 800325e:	d9f5      	bls.n	800324c <memmove+0xa>
 8003260:	1881      	adds	r1, r0, r2
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	42d3      	cmn	r3, r2
 8003266:	d100      	bne.n	800326a <memmove+0x28>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800326e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003272:	e7f7      	b.n	8003264 <memmove+0x22>

08003274 <memset>:
 8003274:	4603      	mov	r3, r0
 8003276:	4402      	add	r2, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__cvt>:
 8003284:	2b00      	cmp	r3, #0
 8003286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800328a:	461e      	mov	r6, r3
 800328c:	bfbb      	ittet	lt
 800328e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003292:	461e      	movlt	r6, r3
 8003294:	2300      	movge	r3, #0
 8003296:	232d      	movlt	r3, #45	; 0x2d
 8003298:	b088      	sub	sp, #32
 800329a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800329c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80032a0:	f027 0720 	bic.w	r7, r7, #32
 80032a4:	2f46      	cmp	r7, #70	; 0x46
 80032a6:	4614      	mov	r4, r2
 80032a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80032aa:	700b      	strb	r3, [r1, #0]
 80032ac:	d004      	beq.n	80032b8 <__cvt+0x34>
 80032ae:	2f45      	cmp	r7, #69	; 0x45
 80032b0:	d100      	bne.n	80032b4 <__cvt+0x30>
 80032b2:	3501      	adds	r5, #1
 80032b4:	2302      	movs	r3, #2
 80032b6:	e000      	b.n	80032ba <__cvt+0x36>
 80032b8:	2303      	movs	r3, #3
 80032ba:	aa07      	add	r2, sp, #28
 80032bc:	9204      	str	r2, [sp, #16]
 80032be:	aa06      	add	r2, sp, #24
 80032c0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032c4:	e9cd 3500 	strd	r3, r5, [sp]
 80032c8:	4622      	mov	r2, r4
 80032ca:	4633      	mov	r3, r6
 80032cc:	f000 fe28 	bl	8003f20 <_dtoa_r>
 80032d0:	2f47      	cmp	r7, #71	; 0x47
 80032d2:	4680      	mov	r8, r0
 80032d4:	d102      	bne.n	80032dc <__cvt+0x58>
 80032d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032d8:	07db      	lsls	r3, r3, #31
 80032da:	d526      	bpl.n	800332a <__cvt+0xa6>
 80032dc:	2f46      	cmp	r7, #70	; 0x46
 80032de:	eb08 0905 	add.w	r9, r8, r5
 80032e2:	d111      	bne.n	8003308 <__cvt+0x84>
 80032e4:	f898 3000 	ldrb.w	r3, [r8]
 80032e8:	2b30      	cmp	r3, #48	; 0x30
 80032ea:	d10a      	bne.n	8003302 <__cvt+0x7e>
 80032ec:	2200      	movs	r2, #0
 80032ee:	2300      	movs	r3, #0
 80032f0:	4620      	mov	r0, r4
 80032f2:	4631      	mov	r1, r6
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	b918      	cbnz	r0, 8003302 <__cvt+0x7e>
 80032fa:	f1c5 0501 	rsb	r5, r5, #1
 80032fe:	f8ca 5000 	str.w	r5, [sl]
 8003302:	f8da 3000 	ldr.w	r3, [sl]
 8003306:	4499      	add	r9, r3
 8003308:	2200      	movs	r2, #0
 800330a:	2300      	movs	r3, #0
 800330c:	4620      	mov	r0, r4
 800330e:	4631      	mov	r1, r6
 8003310:	f7fd fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8003314:	b938      	cbnz	r0, 8003326 <__cvt+0xa2>
 8003316:	2230      	movs	r2, #48	; 0x30
 8003318:	9b07      	ldr	r3, [sp, #28]
 800331a:	454b      	cmp	r3, r9
 800331c:	d205      	bcs.n	800332a <__cvt+0xa6>
 800331e:	1c59      	adds	r1, r3, #1
 8003320:	9107      	str	r1, [sp, #28]
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e7f8      	b.n	8003318 <__cvt+0x94>
 8003326:	f8cd 901c 	str.w	r9, [sp, #28]
 800332a:	4640      	mov	r0, r8
 800332c:	9b07      	ldr	r3, [sp, #28]
 800332e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003330:	eba3 0308 	sub.w	r3, r3, r8
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	b008      	add	sp, #32
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800333c <__exponent>:
 800333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333e:	2900      	cmp	r1, #0
 8003340:	bfb4      	ite	lt
 8003342:	232d      	movlt	r3, #45	; 0x2d
 8003344:	232b      	movge	r3, #43	; 0x2b
 8003346:	4604      	mov	r4, r0
 8003348:	bfb8      	it	lt
 800334a:	4249      	neglt	r1, r1
 800334c:	2909      	cmp	r1, #9
 800334e:	f804 2b02 	strb.w	r2, [r4], #2
 8003352:	7043      	strb	r3, [r0, #1]
 8003354:	dd21      	ble.n	800339a <__exponent+0x5e>
 8003356:	f10d 0307 	add.w	r3, sp, #7
 800335a:	461f      	mov	r7, r3
 800335c:	260a      	movs	r6, #10
 800335e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003362:	fb06 1115 	mls	r1, r6, r5, r1
 8003366:	2d09      	cmp	r5, #9
 8003368:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800336c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003370:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003374:	4629      	mov	r1, r5
 8003376:	dc09      	bgt.n	800338c <__exponent+0x50>
 8003378:	3130      	adds	r1, #48	; 0x30
 800337a:	3b02      	subs	r3, #2
 800337c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003380:	42bb      	cmp	r3, r7
 8003382:	4622      	mov	r2, r4
 8003384:	d304      	bcc.n	8003390 <__exponent+0x54>
 8003386:	1a10      	subs	r0, r2, r0
 8003388:	b003      	add	sp, #12
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	4613      	mov	r3, r2
 800338e:	e7e6      	b.n	800335e <__exponent+0x22>
 8003390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003394:	f804 2b01 	strb.w	r2, [r4], #1
 8003398:	e7f2      	b.n	8003380 <__exponent+0x44>
 800339a:	2330      	movs	r3, #48	; 0x30
 800339c:	4419      	add	r1, r3
 800339e:	7083      	strb	r3, [r0, #2]
 80033a0:	1d02      	adds	r2, r0, #4
 80033a2:	70c1      	strb	r1, [r0, #3]
 80033a4:	e7ef      	b.n	8003386 <__exponent+0x4a>
	...

080033a8 <_printf_float>:
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	b091      	sub	sp, #68	; 0x44
 80033ae:	460c      	mov	r4, r1
 80033b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80033b2:	4693      	mov	fp, r2
 80033b4:	461e      	mov	r6, r3
 80033b6:	4605      	mov	r5, r0
 80033b8:	f001 fce0 	bl	8004d7c <_localeconv_r>
 80033bc:	6803      	ldr	r3, [r0, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	9309      	str	r3, [sp, #36]	; 0x24
 80033c2:	f7fc fec5 	bl	8000150 <strlen>
 80033c6:	2300      	movs	r3, #0
 80033c8:	930e      	str	r3, [sp, #56]	; 0x38
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	900a      	str	r0, [sp, #40]	; 0x28
 80033ce:	3307      	adds	r3, #7
 80033d0:	f023 0307 	bic.w	r3, r3, #7
 80033d4:	f103 0208 	add.w	r2, r3, #8
 80033d8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80033dc:	f8d4 a000 	ldr.w	sl, [r4]
 80033e0:	603a      	str	r2, [r7, #0]
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033ea:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80033ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033f8:	4ba6      	ldr	r3, [pc, #664]	; (8003694 <_printf_float+0x2ec>)
 80033fa:	4638      	mov	r0, r7
 80033fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033fe:	f7fd fb05 	bl	8000a0c <__aeabi_dcmpun>
 8003402:	bb68      	cbnz	r0, 8003460 <_printf_float+0xb8>
 8003404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003408:	4ba2      	ldr	r3, [pc, #648]	; (8003694 <_printf_float+0x2ec>)
 800340a:	4638      	mov	r0, r7
 800340c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800340e:	f7fd fadf 	bl	80009d0 <__aeabi_dcmple>
 8003412:	bb28      	cbnz	r0, 8003460 <_printf_float+0xb8>
 8003414:	2200      	movs	r2, #0
 8003416:	2300      	movs	r3, #0
 8003418:	4638      	mov	r0, r7
 800341a:	4649      	mov	r1, r9
 800341c:	f7fd face 	bl	80009bc <__aeabi_dcmplt>
 8003420:	b110      	cbz	r0, 8003428 <_printf_float+0x80>
 8003422:	232d      	movs	r3, #45	; 0x2d
 8003424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003428:	4f9b      	ldr	r7, [pc, #620]	; (8003698 <_printf_float+0x2f0>)
 800342a:	4b9c      	ldr	r3, [pc, #624]	; (800369c <_printf_float+0x2f4>)
 800342c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003430:	bf98      	it	ls
 8003432:	461f      	movls	r7, r3
 8003434:	2303      	movs	r3, #3
 8003436:	f04f 0900 	mov.w	r9, #0
 800343a:	6123      	str	r3, [r4, #16]
 800343c:	f02a 0304 	bic.w	r3, sl, #4
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	9600      	str	r6, [sp, #0]
 8003444:	465b      	mov	r3, fp
 8003446:	aa0f      	add	r2, sp, #60	; 0x3c
 8003448:	4621      	mov	r1, r4
 800344a:	4628      	mov	r0, r5
 800344c:	f000 f9e2 	bl	8003814 <_printf_common>
 8003450:	3001      	adds	r0, #1
 8003452:	f040 8090 	bne.w	8003576 <_printf_float+0x1ce>
 8003456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800345a:	b011      	add	sp, #68	; 0x44
 800345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003460:	463a      	mov	r2, r7
 8003462:	464b      	mov	r3, r9
 8003464:	4638      	mov	r0, r7
 8003466:	4649      	mov	r1, r9
 8003468:	f7fd fad0 	bl	8000a0c <__aeabi_dcmpun>
 800346c:	b110      	cbz	r0, 8003474 <_printf_float+0xcc>
 800346e:	4f8c      	ldr	r7, [pc, #560]	; (80036a0 <_printf_float+0x2f8>)
 8003470:	4b8c      	ldr	r3, [pc, #560]	; (80036a4 <_printf_float+0x2fc>)
 8003472:	e7db      	b.n	800342c <_printf_float+0x84>
 8003474:	6863      	ldr	r3, [r4, #4]
 8003476:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	a80d      	add	r0, sp, #52	; 0x34
 800347e:	a90e      	add	r1, sp, #56	; 0x38
 8003480:	d140      	bne.n	8003504 <_printf_float+0x15c>
 8003482:	2306      	movs	r3, #6
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	f04f 0c00 	mov.w	ip, #0
 800348a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800348e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	6022      	str	r2, [r4, #0]
 8003496:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	463a      	mov	r2, r7
 800349e:	464b      	mov	r3, r9
 80034a0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7ff feed 	bl	8003284 <__cvt>
 80034aa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80034ae:	2b47      	cmp	r3, #71	; 0x47
 80034b0:	4607      	mov	r7, r0
 80034b2:	d109      	bne.n	80034c8 <_printf_float+0x120>
 80034b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034b6:	1cd8      	adds	r0, r3, #3
 80034b8:	db02      	blt.n	80034c0 <_printf_float+0x118>
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	4293      	cmp	r3, r2
 80034be:	dd47      	ble.n	8003550 <_printf_float+0x1a8>
 80034c0:	f1a8 0802 	sub.w	r8, r8, #2
 80034c4:	fa5f f888 	uxtb.w	r8, r8
 80034c8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80034cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034ce:	d824      	bhi.n	800351a <_printf_float+0x172>
 80034d0:	3901      	subs	r1, #1
 80034d2:	4642      	mov	r2, r8
 80034d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034d8:	910d      	str	r1, [sp, #52]	; 0x34
 80034da:	f7ff ff2f 	bl	800333c <__exponent>
 80034de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034e0:	4681      	mov	r9, r0
 80034e2:	1813      	adds	r3, r2, r0
 80034e4:	2a01      	cmp	r2, #1
 80034e6:	6123      	str	r3, [r4, #16]
 80034e8:	dc02      	bgt.n	80034f0 <_printf_float+0x148>
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	07d1      	lsls	r1, r2, #31
 80034ee:	d501      	bpl.n	80034f4 <_printf_float+0x14c>
 80034f0:	3301      	adds	r3, #1
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0a2      	beq.n	8003442 <_printf_float+0x9a>
 80034fc:	232d      	movs	r3, #45	; 0x2d
 80034fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003502:	e79e      	b.n	8003442 <_printf_float+0x9a>
 8003504:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003508:	f000 816e 	beq.w	80037e8 <_printf_float+0x440>
 800350c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003510:	d1b9      	bne.n	8003486 <_printf_float+0xde>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1b7      	bne.n	8003486 <_printf_float+0xde>
 8003516:	2301      	movs	r3, #1
 8003518:	e7b4      	b.n	8003484 <_printf_float+0xdc>
 800351a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800351e:	d119      	bne.n	8003554 <_printf_float+0x1ac>
 8003520:	2900      	cmp	r1, #0
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	dd0c      	ble.n	8003540 <_printf_float+0x198>
 8003526:	6121      	str	r1, [r4, #16]
 8003528:	b913      	cbnz	r3, 8003530 <_printf_float+0x188>
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	07d2      	lsls	r2, r2, #31
 800352e:	d502      	bpl.n	8003536 <_printf_float+0x18e>
 8003530:	3301      	adds	r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	6123      	str	r3, [r4, #16]
 8003536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003538:	f04f 0900 	mov.w	r9, #0
 800353c:	65a3      	str	r3, [r4, #88]	; 0x58
 800353e:	e7d9      	b.n	80034f4 <_printf_float+0x14c>
 8003540:	b913      	cbnz	r3, 8003548 <_printf_float+0x1a0>
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	07d0      	lsls	r0, r2, #31
 8003546:	d501      	bpl.n	800354c <_printf_float+0x1a4>
 8003548:	3302      	adds	r3, #2
 800354a:	e7f3      	b.n	8003534 <_printf_float+0x18c>
 800354c:	2301      	movs	r3, #1
 800354e:	e7f1      	b.n	8003534 <_printf_float+0x18c>
 8003550:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003554:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003558:	4293      	cmp	r3, r2
 800355a:	db05      	blt.n	8003568 <_printf_float+0x1c0>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	07d1      	lsls	r1, r2, #31
 8003562:	d5e8      	bpl.n	8003536 <_printf_float+0x18e>
 8003564:	3301      	adds	r3, #1
 8003566:	e7e5      	b.n	8003534 <_printf_float+0x18c>
 8003568:	2b00      	cmp	r3, #0
 800356a:	bfcc      	ite	gt
 800356c:	2301      	movgt	r3, #1
 800356e:	f1c3 0302 	rsble	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	e7de      	b.n	8003534 <_printf_float+0x18c>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	055a      	lsls	r2, r3, #21
 800357a:	d407      	bmi.n	800358c <_printf_float+0x1e4>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	463a      	mov	r2, r7
 8003580:	4659      	mov	r1, fp
 8003582:	4628      	mov	r0, r5
 8003584:	47b0      	blx	r6
 8003586:	3001      	adds	r0, #1
 8003588:	d129      	bne.n	80035de <_printf_float+0x236>
 800358a:	e764      	b.n	8003456 <_printf_float+0xae>
 800358c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003590:	f240 80d7 	bls.w	8003742 <_printf_float+0x39a>
 8003594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003598:	2200      	movs	r2, #0
 800359a:	2300      	movs	r3, #0
 800359c:	f7fd fa04 	bl	80009a8 <__aeabi_dcmpeq>
 80035a0:	b388      	cbz	r0, 8003606 <_printf_float+0x25e>
 80035a2:	2301      	movs	r3, #1
 80035a4:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <_printf_float+0x300>)
 80035a6:	4659      	mov	r1, fp
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b0      	blx	r6
 80035ac:	3001      	adds	r0, #1
 80035ae:	f43f af52 	beq.w	8003456 <_printf_float+0xae>
 80035b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b6:	429a      	cmp	r2, r3
 80035b8:	db02      	blt.n	80035c0 <_printf_float+0x218>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	07d8      	lsls	r0, r3, #31
 80035be:	d50e      	bpl.n	80035de <_printf_float+0x236>
 80035c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c4:	4659      	mov	r1, fp
 80035c6:	4628      	mov	r0, r5
 80035c8:	47b0      	blx	r6
 80035ca:	3001      	adds	r0, #1
 80035cc:	f43f af43 	beq.w	8003456 <_printf_float+0xae>
 80035d0:	2700      	movs	r7, #0
 80035d2:	f104 081a 	add.w	r8, r4, #26
 80035d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d8:	3b01      	subs	r3, #1
 80035da:	42bb      	cmp	r3, r7
 80035dc:	dc09      	bgt.n	80035f2 <_printf_float+0x24a>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	079f      	lsls	r7, r3, #30
 80035e2:	f100 80fd 	bmi.w	80037e0 <_printf_float+0x438>
 80035e6:	68e0      	ldr	r0, [r4, #12]
 80035e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035ea:	4298      	cmp	r0, r3
 80035ec:	bfb8      	it	lt
 80035ee:	4618      	movlt	r0, r3
 80035f0:	e733      	b.n	800345a <_printf_float+0xb2>
 80035f2:	2301      	movs	r3, #1
 80035f4:	4642      	mov	r2, r8
 80035f6:	4659      	mov	r1, fp
 80035f8:	4628      	mov	r0, r5
 80035fa:	47b0      	blx	r6
 80035fc:	3001      	adds	r0, #1
 80035fe:	f43f af2a 	beq.w	8003456 <_printf_float+0xae>
 8003602:	3701      	adds	r7, #1
 8003604:	e7e7      	b.n	80035d6 <_printf_float+0x22e>
 8003606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	dc2b      	bgt.n	8003664 <_printf_float+0x2bc>
 800360c:	2301      	movs	r3, #1
 800360e:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <_printf_float+0x300>)
 8003610:	4659      	mov	r1, fp
 8003612:	4628      	mov	r0, r5
 8003614:	47b0      	blx	r6
 8003616:	3001      	adds	r0, #1
 8003618:	f43f af1d 	beq.w	8003456 <_printf_float+0xae>
 800361c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800361e:	b923      	cbnz	r3, 800362a <_printf_float+0x282>
 8003620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003622:	b913      	cbnz	r3, 800362a <_printf_float+0x282>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	07d9      	lsls	r1, r3, #31
 8003628:	d5d9      	bpl.n	80035de <_printf_float+0x236>
 800362a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800362e:	4659      	mov	r1, fp
 8003630:	4628      	mov	r0, r5
 8003632:	47b0      	blx	r6
 8003634:	3001      	adds	r0, #1
 8003636:	f43f af0e 	beq.w	8003456 <_printf_float+0xae>
 800363a:	f04f 0800 	mov.w	r8, #0
 800363e:	f104 091a 	add.w	r9, r4, #26
 8003642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003644:	425b      	negs	r3, r3
 8003646:	4543      	cmp	r3, r8
 8003648:	dc01      	bgt.n	800364e <_printf_float+0x2a6>
 800364a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364c:	e797      	b.n	800357e <_printf_float+0x1d6>
 800364e:	2301      	movs	r3, #1
 8003650:	464a      	mov	r2, r9
 8003652:	4659      	mov	r1, fp
 8003654:	4628      	mov	r0, r5
 8003656:	47b0      	blx	r6
 8003658:	3001      	adds	r0, #1
 800365a:	f43f aefc 	beq.w	8003456 <_printf_float+0xae>
 800365e:	f108 0801 	add.w	r8, r8, #1
 8003662:	e7ee      	b.n	8003642 <_printf_float+0x29a>
 8003664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003668:	429a      	cmp	r2, r3
 800366a:	bfa8      	it	ge
 800366c:	461a      	movge	r2, r3
 800366e:	2a00      	cmp	r2, #0
 8003670:	4690      	mov	r8, r2
 8003672:	dd07      	ble.n	8003684 <_printf_float+0x2dc>
 8003674:	4613      	mov	r3, r2
 8003676:	4659      	mov	r1, fp
 8003678:	463a      	mov	r2, r7
 800367a:	4628      	mov	r0, r5
 800367c:	47b0      	blx	r6
 800367e:	3001      	adds	r0, #1
 8003680:	f43f aee9 	beq.w	8003456 <_printf_float+0xae>
 8003684:	f104 031a 	add.w	r3, r4, #26
 8003688:	f04f 0a00 	mov.w	sl, #0
 800368c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003690:	930b      	str	r3, [sp, #44]	; 0x2c
 8003692:	e015      	b.n	80036c0 <_printf_float+0x318>
 8003694:	7fefffff 	.word	0x7fefffff
 8003698:	08009c30 	.word	0x08009c30
 800369c:	08009c2c 	.word	0x08009c2c
 80036a0:	08009c38 	.word	0x08009c38
 80036a4:	08009c34 	.word	0x08009c34
 80036a8:	08009c05 	.word	0x08009c05
 80036ac:	2301      	movs	r3, #1
 80036ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036b0:	4659      	mov	r1, fp
 80036b2:	4628      	mov	r0, r5
 80036b4:	47b0      	blx	r6
 80036b6:	3001      	adds	r0, #1
 80036b8:	f43f aecd 	beq.w	8003456 <_printf_float+0xae>
 80036bc:	f10a 0a01 	add.w	sl, sl, #1
 80036c0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80036c4:	eba9 0308 	sub.w	r3, r9, r8
 80036c8:	4553      	cmp	r3, sl
 80036ca:	dcef      	bgt.n	80036ac <_printf_float+0x304>
 80036cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036d0:	429a      	cmp	r2, r3
 80036d2:	444f      	add	r7, r9
 80036d4:	db14      	blt.n	8003700 <_printf_float+0x358>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	07da      	lsls	r2, r3, #31
 80036da:	d411      	bmi.n	8003700 <_printf_float+0x358>
 80036dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036e0:	eba3 0209 	sub.w	r2, r3, r9
 80036e4:	eba3 0901 	sub.w	r9, r3, r1
 80036e8:	4591      	cmp	r9, r2
 80036ea:	bfa8      	it	ge
 80036ec:	4691      	movge	r9, r2
 80036ee:	f1b9 0f00 	cmp.w	r9, #0
 80036f2:	dc0d      	bgt.n	8003710 <_printf_float+0x368>
 80036f4:	2700      	movs	r7, #0
 80036f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fa:	f104 081a 	add.w	r8, r4, #26
 80036fe:	e018      	b.n	8003732 <_printf_float+0x38a>
 8003700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003704:	4659      	mov	r1, fp
 8003706:	4628      	mov	r0, r5
 8003708:	47b0      	blx	r6
 800370a:	3001      	adds	r0, #1
 800370c:	d1e6      	bne.n	80036dc <_printf_float+0x334>
 800370e:	e6a2      	b.n	8003456 <_printf_float+0xae>
 8003710:	464b      	mov	r3, r9
 8003712:	463a      	mov	r2, r7
 8003714:	4659      	mov	r1, fp
 8003716:	4628      	mov	r0, r5
 8003718:	47b0      	blx	r6
 800371a:	3001      	adds	r0, #1
 800371c:	d1ea      	bne.n	80036f4 <_printf_float+0x34c>
 800371e:	e69a      	b.n	8003456 <_printf_float+0xae>
 8003720:	2301      	movs	r3, #1
 8003722:	4642      	mov	r2, r8
 8003724:	4659      	mov	r1, fp
 8003726:	4628      	mov	r0, r5
 8003728:	47b0      	blx	r6
 800372a:	3001      	adds	r0, #1
 800372c:	f43f ae93 	beq.w	8003456 <_printf_float+0xae>
 8003730:	3701      	adds	r7, #1
 8003732:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	eba3 0309 	sub.w	r3, r3, r9
 800373c:	42bb      	cmp	r3, r7
 800373e:	dcef      	bgt.n	8003720 <_printf_float+0x378>
 8003740:	e74d      	b.n	80035de <_printf_float+0x236>
 8003742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003744:	2a01      	cmp	r2, #1
 8003746:	dc01      	bgt.n	800374c <_printf_float+0x3a4>
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d538      	bpl.n	80037be <_printf_float+0x416>
 800374c:	2301      	movs	r3, #1
 800374e:	463a      	mov	r2, r7
 8003750:	4659      	mov	r1, fp
 8003752:	4628      	mov	r0, r5
 8003754:	47b0      	blx	r6
 8003756:	3001      	adds	r0, #1
 8003758:	f43f ae7d 	beq.w	8003456 <_printf_float+0xae>
 800375c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003760:	4659      	mov	r1, fp
 8003762:	4628      	mov	r0, r5
 8003764:	47b0      	blx	r6
 8003766:	3001      	adds	r0, #1
 8003768:	f107 0701 	add.w	r7, r7, #1
 800376c:	f43f ae73 	beq.w	8003456 <_printf_float+0xae>
 8003770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003776:	2200      	movs	r2, #0
 8003778:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800377c:	2300      	movs	r3, #0
 800377e:	f7fd f913 	bl	80009a8 <__aeabi_dcmpeq>
 8003782:	b9c0      	cbnz	r0, 80037b6 <_printf_float+0x40e>
 8003784:	4643      	mov	r3, r8
 8003786:	463a      	mov	r2, r7
 8003788:	4659      	mov	r1, fp
 800378a:	4628      	mov	r0, r5
 800378c:	47b0      	blx	r6
 800378e:	3001      	adds	r0, #1
 8003790:	d10d      	bne.n	80037ae <_printf_float+0x406>
 8003792:	e660      	b.n	8003456 <_printf_float+0xae>
 8003794:	2301      	movs	r3, #1
 8003796:	4642      	mov	r2, r8
 8003798:	4659      	mov	r1, fp
 800379a:	4628      	mov	r0, r5
 800379c:	47b0      	blx	r6
 800379e:	3001      	adds	r0, #1
 80037a0:	f43f ae59 	beq.w	8003456 <_printf_float+0xae>
 80037a4:	3701      	adds	r7, #1
 80037a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a8:	3b01      	subs	r3, #1
 80037aa:	42bb      	cmp	r3, r7
 80037ac:	dcf2      	bgt.n	8003794 <_printf_float+0x3ec>
 80037ae:	464b      	mov	r3, r9
 80037b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037b4:	e6e4      	b.n	8003580 <_printf_float+0x1d8>
 80037b6:	2700      	movs	r7, #0
 80037b8:	f104 081a 	add.w	r8, r4, #26
 80037bc:	e7f3      	b.n	80037a6 <_printf_float+0x3fe>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7e1      	b.n	8003786 <_printf_float+0x3de>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4642      	mov	r2, r8
 80037c6:	4659      	mov	r1, fp
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b0      	blx	r6
 80037cc:	3001      	adds	r0, #1
 80037ce:	f43f ae42 	beq.w	8003456 <_printf_float+0xae>
 80037d2:	3701      	adds	r7, #1
 80037d4:	68e3      	ldr	r3, [r4, #12]
 80037d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	42bb      	cmp	r3, r7
 80037dc:	dcf1      	bgt.n	80037c2 <_printf_float+0x41a>
 80037de:	e702      	b.n	80035e6 <_printf_float+0x23e>
 80037e0:	2700      	movs	r7, #0
 80037e2:	f104 0819 	add.w	r8, r4, #25
 80037e6:	e7f5      	b.n	80037d4 <_printf_float+0x42c>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f43f ae94 	beq.w	8003516 <_printf_float+0x16e>
 80037ee:	f04f 0c00 	mov.w	ip, #0
 80037f2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80037f6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80037fa:	6022      	str	r2, [r4, #0]
 80037fc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003800:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	463a      	mov	r2, r7
 8003808:	464b      	mov	r3, r9
 800380a:	4628      	mov	r0, r5
 800380c:	f7ff fd3a 	bl	8003284 <__cvt>
 8003810:	4607      	mov	r7, r0
 8003812:	e64f      	b.n	80034b4 <_printf_float+0x10c>

08003814 <_printf_common>:
 8003814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	4691      	mov	r9, r2
 800381a:	461f      	mov	r7, r3
 800381c:	688a      	ldr	r2, [r1, #8]
 800381e:	690b      	ldr	r3, [r1, #16]
 8003820:	4606      	mov	r6, r0
 8003822:	4293      	cmp	r3, r2
 8003824:	bfb8      	it	lt
 8003826:	4613      	movlt	r3, r2
 8003828:	f8c9 3000 	str.w	r3, [r9]
 800382c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003830:	460c      	mov	r4, r1
 8003832:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003836:	b112      	cbz	r2, 800383e <_printf_common+0x2a>
 8003838:	3301      	adds	r3, #1
 800383a:	f8c9 3000 	str.w	r3, [r9]
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	0699      	lsls	r1, r3, #26
 8003842:	bf42      	ittt	mi
 8003844:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003848:	3302      	addmi	r3, #2
 800384a:	f8c9 3000 	strmi.w	r3, [r9]
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	f015 0506 	ands.w	r5, r5, #6
 8003854:	d107      	bne.n	8003866 <_printf_common+0x52>
 8003856:	f104 0a19 	add.w	sl, r4, #25
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	f8d9 2000 	ldr.w	r2, [r9]
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	42ab      	cmp	r3, r5
 8003864:	dc29      	bgt.n	80038ba <_printf_common+0xa6>
 8003866:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	3300      	adds	r3, #0
 800386e:	bf18      	it	ne
 8003870:	2301      	movne	r3, #1
 8003872:	0692      	lsls	r2, r2, #26
 8003874:	d42e      	bmi.n	80038d4 <_printf_common+0xc0>
 8003876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800387a:	4639      	mov	r1, r7
 800387c:	4630      	mov	r0, r6
 800387e:	47c0      	blx	r8
 8003880:	3001      	adds	r0, #1
 8003882:	d021      	beq.n	80038c8 <_printf_common+0xb4>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	68e5      	ldr	r5, [r4, #12]
 8003888:	f003 0306 	and.w	r3, r3, #6
 800388c:	2b04      	cmp	r3, #4
 800388e:	bf18      	it	ne
 8003890:	2500      	movne	r5, #0
 8003892:	f8d9 2000 	ldr.w	r2, [r9]
 8003896:	f04f 0900 	mov.w	r9, #0
 800389a:	bf08      	it	eq
 800389c:	1aad      	subeq	r5, r5, r2
 800389e:	68a3      	ldr	r3, [r4, #8]
 80038a0:	6922      	ldr	r2, [r4, #16]
 80038a2:	bf08      	it	eq
 80038a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfc4      	itt	gt
 80038ac:	1a9b      	subgt	r3, r3, r2
 80038ae:	18ed      	addgt	r5, r5, r3
 80038b0:	341a      	adds	r4, #26
 80038b2:	454d      	cmp	r5, r9
 80038b4:	d11a      	bne.n	80038ec <_printf_common+0xd8>
 80038b6:	2000      	movs	r0, #0
 80038b8:	e008      	b.n	80038cc <_printf_common+0xb8>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4652      	mov	r2, sl
 80038be:	4639      	mov	r1, r7
 80038c0:	4630      	mov	r0, r6
 80038c2:	47c0      	blx	r8
 80038c4:	3001      	adds	r0, #1
 80038c6:	d103      	bne.n	80038d0 <_printf_common+0xbc>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7c2      	b.n	800385a <_printf_common+0x46>
 80038d4:	2030      	movs	r0, #48	; 0x30
 80038d6:	18e1      	adds	r1, r4, r3
 80038d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038e2:	4422      	add	r2, r4
 80038e4:	3302      	adds	r3, #2
 80038e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ea:	e7c4      	b.n	8003876 <_printf_common+0x62>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4622      	mov	r2, r4
 80038f0:	4639      	mov	r1, r7
 80038f2:	4630      	mov	r0, r6
 80038f4:	47c0      	blx	r8
 80038f6:	3001      	adds	r0, #1
 80038f8:	d0e6      	beq.n	80038c8 <_printf_common+0xb4>
 80038fa:	f109 0901 	add.w	r9, r9, #1
 80038fe:	e7d8      	b.n	80038b2 <_printf_common+0x9e>

08003900 <_printf_i>:
 8003900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003904:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003908:	460c      	mov	r4, r1
 800390a:	7e09      	ldrb	r1, [r1, #24]
 800390c:	b085      	sub	sp, #20
 800390e:	296e      	cmp	r1, #110	; 0x6e
 8003910:	4617      	mov	r7, r2
 8003912:	4606      	mov	r6, r0
 8003914:	4698      	mov	r8, r3
 8003916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003918:	f000 80b3 	beq.w	8003a82 <_printf_i+0x182>
 800391c:	d822      	bhi.n	8003964 <_printf_i+0x64>
 800391e:	2963      	cmp	r1, #99	; 0x63
 8003920:	d036      	beq.n	8003990 <_printf_i+0x90>
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x3a>
 8003924:	2900      	cmp	r1, #0
 8003926:	f000 80b9 	beq.w	8003a9c <_printf_i+0x19c>
 800392a:	2958      	cmp	r1, #88	; 0x58
 800392c:	f000 8083 	beq.w	8003a36 <_printf_i+0x136>
 8003930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003934:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003938:	e032      	b.n	80039a0 <_printf_i+0xa0>
 800393a:	2964      	cmp	r1, #100	; 0x64
 800393c:	d001      	beq.n	8003942 <_printf_i+0x42>
 800393e:	2969      	cmp	r1, #105	; 0x69
 8003940:	d1f6      	bne.n	8003930 <_printf_i+0x30>
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	6813      	ldr	r3, [r2, #0]
 8003946:	0605      	lsls	r5, r0, #24
 8003948:	f103 0104 	add.w	r1, r3, #4
 800394c:	d52a      	bpl.n	80039a4 <_printf_i+0xa4>
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6011      	str	r1, [r2, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	da03      	bge.n	800395e <_printf_i+0x5e>
 8003956:	222d      	movs	r2, #45	; 0x2d
 8003958:	425b      	negs	r3, r3
 800395a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800395e:	486f      	ldr	r0, [pc, #444]	; (8003b1c <_printf_i+0x21c>)
 8003960:	220a      	movs	r2, #10
 8003962:	e039      	b.n	80039d8 <_printf_i+0xd8>
 8003964:	2973      	cmp	r1, #115	; 0x73
 8003966:	f000 809d 	beq.w	8003aa4 <_printf_i+0x1a4>
 800396a:	d808      	bhi.n	800397e <_printf_i+0x7e>
 800396c:	296f      	cmp	r1, #111	; 0x6f
 800396e:	d020      	beq.n	80039b2 <_printf_i+0xb2>
 8003970:	2970      	cmp	r1, #112	; 0x70
 8003972:	d1dd      	bne.n	8003930 <_printf_i+0x30>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	e003      	b.n	8003986 <_printf_i+0x86>
 800397e:	2975      	cmp	r1, #117	; 0x75
 8003980:	d017      	beq.n	80039b2 <_printf_i+0xb2>
 8003982:	2978      	cmp	r1, #120	; 0x78
 8003984:	d1d4      	bne.n	8003930 <_printf_i+0x30>
 8003986:	2378      	movs	r3, #120	; 0x78
 8003988:	4865      	ldr	r0, [pc, #404]	; (8003b20 <_printf_i+0x220>)
 800398a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800398e:	e055      	b.n	8003a3c <_printf_i+0x13c>
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003996:	1d19      	adds	r1, r3, #4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6011      	str	r1, [r2, #0]
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a0:	2301      	movs	r3, #1
 80039a2:	e08c      	b.n	8003abe <_printf_i+0x1be>
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039aa:	6011      	str	r1, [r2, #0]
 80039ac:	bf18      	it	ne
 80039ae:	b21b      	sxthne	r3, r3
 80039b0:	e7cf      	b.n	8003952 <_printf_i+0x52>
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	6825      	ldr	r5, [r4, #0]
 80039b6:	1d18      	adds	r0, r3, #4
 80039b8:	6010      	str	r0, [r2, #0]
 80039ba:	0628      	lsls	r0, r5, #24
 80039bc:	d501      	bpl.n	80039c2 <_printf_i+0xc2>
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	e002      	b.n	80039c8 <_printf_i+0xc8>
 80039c2:	0668      	lsls	r0, r5, #25
 80039c4:	d5fb      	bpl.n	80039be <_printf_i+0xbe>
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	296f      	cmp	r1, #111	; 0x6f
 80039ca:	bf14      	ite	ne
 80039cc:	220a      	movne	r2, #10
 80039ce:	2208      	moveq	r2, #8
 80039d0:	4852      	ldr	r0, [pc, #328]	; (8003b1c <_printf_i+0x21c>)
 80039d2:	2100      	movs	r1, #0
 80039d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039d8:	6865      	ldr	r5, [r4, #4]
 80039da:	2d00      	cmp	r5, #0
 80039dc:	60a5      	str	r5, [r4, #8]
 80039de:	f2c0 8095 	blt.w	8003b0c <_printf_i+0x20c>
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	f021 0104 	bic.w	r1, r1, #4
 80039e8:	6021      	str	r1, [r4, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d13d      	bne.n	8003a6a <_printf_i+0x16a>
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	f040 808e 	bne.w	8003b10 <_printf_i+0x210>
 80039f4:	4665      	mov	r5, ip
 80039f6:	2a08      	cmp	r2, #8
 80039f8:	d10b      	bne.n	8003a12 <_printf_i+0x112>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	07db      	lsls	r3, r3, #31
 80039fe:	d508      	bpl.n	8003a12 <_printf_i+0x112>
 8003a00:	6923      	ldr	r3, [r4, #16]
 8003a02:	6862      	ldr	r2, [r4, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bfde      	ittt	le
 8003a08:	2330      	movle	r3, #48	; 0x30
 8003a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a12:	ebac 0305 	sub.w	r3, ip, r5
 8003a16:	6123      	str	r3, [r4, #16]
 8003a18:	f8cd 8000 	str.w	r8, [sp]
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	aa03      	add	r2, sp, #12
 8003a20:	4621      	mov	r1, r4
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff fef6 	bl	8003814 <_printf_common>
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d14d      	bne.n	8003ac8 <_printf_i+0x1c8>
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a30:	b005      	add	sp, #20
 8003a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a36:	4839      	ldr	r0, [pc, #228]	; (8003b1c <_printf_i+0x21c>)
 8003a38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	1d1d      	adds	r5, r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6015      	str	r5, [r2, #0]
 8003a46:	060a      	lsls	r2, r1, #24
 8003a48:	d50b      	bpl.n	8003a62 <_printf_i+0x162>
 8003a4a:	07ca      	lsls	r2, r1, #31
 8003a4c:	bf44      	itt	mi
 8003a4e:	f041 0120 	orrmi.w	r1, r1, #32
 8003a52:	6021      	strmi	r1, [r4, #0]
 8003a54:	b91b      	cbnz	r3, 8003a5e <_printf_i+0x15e>
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	f022 0220 	bic.w	r2, r2, #32
 8003a5c:	6022      	str	r2, [r4, #0]
 8003a5e:	2210      	movs	r2, #16
 8003a60:	e7b7      	b.n	80039d2 <_printf_i+0xd2>
 8003a62:	064d      	lsls	r5, r1, #25
 8003a64:	bf48      	it	mi
 8003a66:	b29b      	uxthmi	r3, r3
 8003a68:	e7ef      	b.n	8003a4a <_printf_i+0x14a>
 8003a6a:	4665      	mov	r5, ip
 8003a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a70:	fb02 3311 	mls	r3, r2, r1, r3
 8003a74:	5cc3      	ldrb	r3, [r0, r3]
 8003a76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d1f5      	bne.n	8003a6c <_printf_i+0x16c>
 8003a80:	e7b9      	b.n	80039f6 <_printf_i+0xf6>
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	6825      	ldr	r5, [r4, #0]
 8003a86:	1d18      	adds	r0, r3, #4
 8003a88:	6961      	ldr	r1, [r4, #20]
 8003a8a:	6010      	str	r0, [r2, #0]
 8003a8c:	0628      	lsls	r0, r5, #24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	d501      	bpl.n	8003a96 <_printf_i+0x196>
 8003a92:	6019      	str	r1, [r3, #0]
 8003a94:	e002      	b.n	8003a9c <_printf_i+0x19c>
 8003a96:	066a      	lsls	r2, r5, #25
 8003a98:	d5fb      	bpl.n	8003a92 <_printf_i+0x192>
 8003a9a:	8019      	strh	r1, [r3, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4665      	mov	r5, ip
 8003aa0:	6123      	str	r3, [r4, #16]
 8003aa2:	e7b9      	b.n	8003a18 <_printf_i+0x118>
 8003aa4:	6813      	ldr	r3, [r2, #0]
 8003aa6:	1d19      	adds	r1, r3, #4
 8003aa8:	6011      	str	r1, [r2, #0]
 8003aaa:	681d      	ldr	r5, [r3, #0]
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f001 f9dd 	bl	8004e70 <memchr>
 8003ab6:	b108      	cbz	r0, 8003abc <_printf_i+0x1bc>
 8003ab8:	1b40      	subs	r0, r0, r5
 8003aba:	6060      	str	r0, [r4, #4]
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac6:	e7a7      	b.n	8003a18 <_printf_i+0x118>
 8003ac8:	6923      	ldr	r3, [r4, #16]
 8003aca:	462a      	mov	r2, r5
 8003acc:	4639      	mov	r1, r7
 8003ace:	4630      	mov	r0, r6
 8003ad0:	47c0      	blx	r8
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d0aa      	beq.n	8003a2c <_printf_i+0x12c>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	079b      	lsls	r3, r3, #30
 8003ada:	d413      	bmi.n	8003b04 <_printf_i+0x204>
 8003adc:	68e0      	ldr	r0, [r4, #12]
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	4298      	cmp	r0, r3
 8003ae2:	bfb8      	it	lt
 8003ae4:	4618      	movlt	r0, r3
 8003ae6:	e7a3      	b.n	8003a30 <_printf_i+0x130>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	464a      	mov	r2, r9
 8003aec:	4639      	mov	r1, r7
 8003aee:	4630      	mov	r0, r6
 8003af0:	47c0      	blx	r8
 8003af2:	3001      	adds	r0, #1
 8003af4:	d09a      	beq.n	8003a2c <_printf_i+0x12c>
 8003af6:	3501      	adds	r5, #1
 8003af8:	68e3      	ldr	r3, [r4, #12]
 8003afa:	9a03      	ldr	r2, [sp, #12]
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	42ab      	cmp	r3, r5
 8003b00:	dcf2      	bgt.n	8003ae8 <_printf_i+0x1e8>
 8003b02:	e7eb      	b.n	8003adc <_printf_i+0x1dc>
 8003b04:	2500      	movs	r5, #0
 8003b06:	f104 0919 	add.w	r9, r4, #25
 8003b0a:	e7f5      	b.n	8003af8 <_printf_i+0x1f8>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ac      	bne.n	8003a6a <_printf_i+0x16a>
 8003b10:	7803      	ldrb	r3, [r0, #0]
 8003b12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b1a:	e76c      	b.n	80039f6 <_printf_i+0xf6>
 8003b1c:	08009c3c 	.word	0x08009c3c
 8003b20:	08009c4d 	.word	0x08009c4d

08003b24 <iprintf>:
 8003b24:	b40f      	push	{r0, r1, r2, r3}
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <iprintf+0x2c>)
 8003b28:	b513      	push	{r0, r1, r4, lr}
 8003b2a:	681c      	ldr	r4, [r3, #0]
 8003b2c:	b124      	cbz	r4, 8003b38 <iprintf+0x14>
 8003b2e:	69a3      	ldr	r3, [r4, #24]
 8003b30:	b913      	cbnz	r3, 8003b38 <iprintf+0x14>
 8003b32:	4620      	mov	r0, r4
 8003b34:	f001 f898 	bl	8004c68 <__sinit>
 8003b38:	ab05      	add	r3, sp, #20
 8003b3a:	9a04      	ldr	r2, [sp, #16]
 8003b3c:	68a1      	ldr	r1, [r4, #8]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	f001 fead 	bl	80058a0 <_vfiprintf_r>
 8003b46:	b002      	add	sp, #8
 8003b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b4c:	b004      	add	sp, #16
 8003b4e:	4770      	bx	lr
 8003b50:	2000002c 	.word	0x2000002c

08003b54 <_puts_r>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	460e      	mov	r6, r1
 8003b58:	4605      	mov	r5, r0
 8003b5a:	b118      	cbz	r0, 8003b64 <_puts_r+0x10>
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	b90b      	cbnz	r3, 8003b64 <_puts_r+0x10>
 8003b60:	f001 f882 	bl	8004c68 <__sinit>
 8003b64:	69ab      	ldr	r3, [r5, #24]
 8003b66:	68ac      	ldr	r4, [r5, #8]
 8003b68:	b913      	cbnz	r3, 8003b70 <_puts_r+0x1c>
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f001 f87c 	bl	8004c68 <__sinit>
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <_puts_r+0xac>)
 8003b72:	429c      	cmp	r4, r3
 8003b74:	d117      	bne.n	8003ba6 <_puts_r+0x52>
 8003b76:	686c      	ldr	r4, [r5, #4]
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	071b      	lsls	r3, r3, #28
 8003b7c:	d51d      	bpl.n	8003bba <_puts_r+0x66>
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	b1db      	cbz	r3, 8003bba <_puts_r+0x66>
 8003b82:	3e01      	subs	r6, #1
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60a3      	str	r3, [r4, #8]
 8003b8e:	b9e9      	cbnz	r1, 8003bcc <_puts_r+0x78>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da2e      	bge.n	8003bf2 <_puts_r+0x9e>
 8003b94:	4622      	mov	r2, r4
 8003b96:	210a      	movs	r1, #10
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 f873 	bl	8003c84 <__swbuf_r>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d011      	beq.n	8003bc6 <_puts_r+0x72>
 8003ba2:	200a      	movs	r0, #10
 8003ba4:	e011      	b.n	8003bca <_puts_r+0x76>
 8003ba6:	4b17      	ldr	r3, [pc, #92]	; (8003c04 <_puts_r+0xb0>)
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	d101      	bne.n	8003bb0 <_puts_r+0x5c>
 8003bac:	68ac      	ldr	r4, [r5, #8]
 8003bae:	e7e3      	b.n	8003b78 <_puts_r+0x24>
 8003bb0:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <_puts_r+0xb4>)
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf08      	it	eq
 8003bb6:	68ec      	ldreq	r4, [r5, #12]
 8003bb8:	e7de      	b.n	8003b78 <_puts_r+0x24>
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f000 f8b3 	bl	8003d28 <__swsetup_r>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0dd      	beq.n	8003b82 <_puts_r+0x2e>
 8003bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da04      	bge.n	8003bda <_puts_r+0x86>
 8003bd0:	69a2      	ldr	r2, [r4, #24]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	dc06      	bgt.n	8003be4 <_puts_r+0x90>
 8003bd6:	290a      	cmp	r1, #10
 8003bd8:	d004      	beq.n	8003be4 <_puts_r+0x90>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	6022      	str	r2, [r4, #0]
 8003be0:	7019      	strb	r1, [r3, #0]
 8003be2:	e7cf      	b.n	8003b84 <_puts_r+0x30>
 8003be4:	4622      	mov	r2, r4
 8003be6:	4628      	mov	r0, r5
 8003be8:	f000 f84c 	bl	8003c84 <__swbuf_r>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d1c9      	bne.n	8003b84 <_puts_r+0x30>
 8003bf0:	e7e9      	b.n	8003bc6 <_puts_r+0x72>
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	6022      	str	r2, [r4, #0]
 8003bfa:	7018      	strb	r0, [r3, #0]
 8003bfc:	e7e5      	b.n	8003bca <_puts_r+0x76>
 8003bfe:	bf00      	nop
 8003c00:	08009c8c 	.word	0x08009c8c
 8003c04:	08009cac 	.word	0x08009cac
 8003c08:	08009c6c 	.word	0x08009c6c

08003c0c <puts>:
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <puts+0xc>)
 8003c0e:	4601      	mov	r1, r0
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f7ff bf9f 	b.w	8003b54 <_puts_r>
 8003c16:	bf00      	nop
 8003c18:	2000002c 	.word	0x2000002c

08003c1c <sniprintf>:
 8003c1c:	b40c      	push	{r2, r3}
 8003c1e:	b530      	push	{r4, r5, lr}
 8003c20:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <sniprintf+0x64>)
 8003c22:	1e0c      	subs	r4, r1, #0
 8003c24:	b09d      	sub	sp, #116	; 0x74
 8003c26:	681d      	ldr	r5, [r3, #0]
 8003c28:	da08      	bge.n	8003c3c <sniprintf+0x20>
 8003c2a:	238b      	movs	r3, #139	; 0x8b
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	b01d      	add	sp, #116	; 0x74
 8003c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c38:	b002      	add	sp, #8
 8003c3a:	4770      	bx	lr
 8003c3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c44:	bf0c      	ite	eq
 8003c46:	4623      	moveq	r3, r4
 8003c48:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	9307      	str	r3, [sp, #28]
 8003c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c54:	9002      	str	r0, [sp, #8]
 8003c56:	9006      	str	r0, [sp, #24]
 8003c58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c5e:	ab21      	add	r3, sp, #132	; 0x84
 8003c60:	a902      	add	r1, sp, #8
 8003c62:	4628      	mov	r0, r5
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	f001 fcfb 	bl	8005660 <_svfiprintf_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	bfbc      	itt	lt
 8003c6e:	238b      	movlt	r3, #139	; 0x8b
 8003c70:	602b      	strlt	r3, [r5, #0]
 8003c72:	2c00      	cmp	r4, #0
 8003c74:	d0dd      	beq.n	8003c32 <sniprintf+0x16>
 8003c76:	2200      	movs	r2, #0
 8003c78:	9b02      	ldr	r3, [sp, #8]
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	e7d9      	b.n	8003c32 <sniprintf+0x16>
 8003c7e:	bf00      	nop
 8003c80:	2000002c 	.word	0x2000002c

08003c84 <__swbuf_r>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	460e      	mov	r6, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	b118      	cbz	r0, 8003c96 <__swbuf_r+0x12>
 8003c8e:	6983      	ldr	r3, [r0, #24]
 8003c90:	b90b      	cbnz	r3, 8003c96 <__swbuf_r+0x12>
 8003c92:	f000 ffe9 	bl	8004c68 <__sinit>
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <__swbuf_r+0x98>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d12a      	bne.n	8003cf2 <__swbuf_r+0x6e>
 8003c9c:	686c      	ldr	r4, [r5, #4]
 8003c9e:	69a3      	ldr	r3, [r4, #24]
 8003ca0:	60a3      	str	r3, [r4, #8]
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	071a      	lsls	r2, r3, #28
 8003ca6:	d52e      	bpl.n	8003d06 <__swbuf_r+0x82>
 8003ca8:	6923      	ldr	r3, [r4, #16]
 8003caa:	b363      	cbz	r3, 8003d06 <__swbuf_r+0x82>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	b2f6      	uxtb	r6, r6
 8003cb2:	1ac0      	subs	r0, r0, r3
 8003cb4:	6963      	ldr	r3, [r4, #20]
 8003cb6:	4637      	mov	r7, r6
 8003cb8:	4283      	cmp	r3, r0
 8003cba:	dc04      	bgt.n	8003cc6 <__swbuf_r+0x42>
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 ff68 	bl	8004b94 <_fflush_r>
 8003cc4:	bb28      	cbnz	r0, 8003d12 <__swbuf_r+0x8e>
 8003cc6:	68a3      	ldr	r3, [r4, #8]
 8003cc8:	3001      	adds	r0, #1
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60a3      	str	r3, [r4, #8]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	6022      	str	r2, [r4, #0]
 8003cd4:	701e      	strb	r6, [r3, #0]
 8003cd6:	6963      	ldr	r3, [r4, #20]
 8003cd8:	4283      	cmp	r3, r0
 8003cda:	d004      	beq.n	8003ce6 <__swbuf_r+0x62>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	07db      	lsls	r3, r3, #31
 8003ce0:	d519      	bpl.n	8003d16 <__swbuf_r+0x92>
 8003ce2:	2e0a      	cmp	r6, #10
 8003ce4:	d117      	bne.n	8003d16 <__swbuf_r+0x92>
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f000 ff53 	bl	8004b94 <_fflush_r>
 8003cee:	b190      	cbz	r0, 8003d16 <__swbuf_r+0x92>
 8003cf0:	e00f      	b.n	8003d12 <__swbuf_r+0x8e>
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <__swbuf_r+0x9c>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	d101      	bne.n	8003cfc <__swbuf_r+0x78>
 8003cf8:	68ac      	ldr	r4, [r5, #8]
 8003cfa:	e7d0      	b.n	8003c9e <__swbuf_r+0x1a>
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <__swbuf_r+0xa0>)
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	bf08      	it	eq
 8003d02:	68ec      	ldreq	r4, [r5, #12]
 8003d04:	e7cb      	b.n	8003c9e <__swbuf_r+0x1a>
 8003d06:	4621      	mov	r1, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f80d 	bl	8003d28 <__swsetup_r>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d0cc      	beq.n	8003cac <__swbuf_r+0x28>
 8003d12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003d16:	4638      	mov	r0, r7
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	08009c8c 	.word	0x08009c8c
 8003d20:	08009cac 	.word	0x08009cac
 8003d24:	08009c6c 	.word	0x08009c6c

08003d28 <__swsetup_r>:
 8003d28:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <__swsetup_r+0xcc>)
 8003d2a:	b570      	push	{r4, r5, r6, lr}
 8003d2c:	681d      	ldr	r5, [r3, #0]
 8003d2e:	4606      	mov	r6, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	b125      	cbz	r5, 8003d3e <__swsetup_r+0x16>
 8003d34:	69ab      	ldr	r3, [r5, #24]
 8003d36:	b913      	cbnz	r3, 8003d3e <__swsetup_r+0x16>
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 ff95 	bl	8004c68 <__sinit>
 8003d3e:	4b2e      	ldr	r3, [pc, #184]	; (8003df8 <__swsetup_r+0xd0>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	d10f      	bne.n	8003d64 <__swsetup_r+0x3c>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	0715      	lsls	r5, r2, #28
 8003d4e:	d42c      	bmi.n	8003daa <__swsetup_r+0x82>
 8003d50:	06d0      	lsls	r0, r2, #27
 8003d52:	d411      	bmi.n	8003d78 <__swsetup_r+0x50>
 8003d54:	2209      	movs	r2, #9
 8003d56:	6032      	str	r2, [r6, #0]
 8003d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d62:	e03e      	b.n	8003de2 <__swsetup_r+0xba>
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <__swsetup_r+0xd4>)
 8003d66:	429c      	cmp	r4, r3
 8003d68:	d101      	bne.n	8003d6e <__swsetup_r+0x46>
 8003d6a:	68ac      	ldr	r4, [r5, #8]
 8003d6c:	e7eb      	b.n	8003d46 <__swsetup_r+0x1e>
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <__swsetup_r+0xd8>)
 8003d70:	429c      	cmp	r4, r3
 8003d72:	bf08      	it	eq
 8003d74:	68ec      	ldreq	r4, [r5, #12]
 8003d76:	e7e6      	b.n	8003d46 <__swsetup_r+0x1e>
 8003d78:	0751      	lsls	r1, r2, #29
 8003d7a:	d512      	bpl.n	8003da2 <__swsetup_r+0x7a>
 8003d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d7e:	b141      	cbz	r1, 8003d92 <__swsetup_r+0x6a>
 8003d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d84:	4299      	cmp	r1, r3
 8003d86:	d002      	beq.n	8003d8e <__swsetup_r+0x66>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f001 fb69 	bl	8005460 <_free_r>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6363      	str	r3, [r4, #52]	; 0x34
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	b94b      	cbnz	r3, 8003dc2 <__swsetup_r+0x9a>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db8:	d003      	beq.n	8003dc2 <__swsetup_r+0x9a>
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f001 f80f 	bl	8004de0 <__smakebuf_r>
 8003dc2:	89a2      	ldrh	r2, [r4, #12]
 8003dc4:	f012 0301 	ands.w	r3, r2, #1
 8003dc8:	d00c      	beq.n	8003de4 <__swsetup_r+0xbc>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60a3      	str	r3, [r4, #8]
 8003dce:	6963      	ldr	r3, [r4, #20]
 8003dd0:	425b      	negs	r3, r3
 8003dd2:	61a3      	str	r3, [r4, #24]
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	b953      	cbnz	r3, 8003dee <__swsetup_r+0xc6>
 8003dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003de0:	d1ba      	bne.n	8003d58 <__swsetup_r+0x30>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	0792      	lsls	r2, r2, #30
 8003de6:	bf58      	it	pl
 8003de8:	6963      	ldrpl	r3, [r4, #20]
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	e7f2      	b.n	8003dd4 <__swsetup_r+0xac>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e7f7      	b.n	8003de2 <__swsetup_r+0xba>
 8003df2:	bf00      	nop
 8003df4:	2000002c 	.word	0x2000002c
 8003df8:	08009c8c 	.word	0x08009c8c
 8003dfc:	08009cac 	.word	0x08009cac
 8003e00:	08009c6c 	.word	0x08009c6c

08003e04 <quorem>:
 8003e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	6903      	ldr	r3, [r0, #16]
 8003e0a:	690c      	ldr	r4, [r1, #16]
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	f2c0 8084 	blt.w	8003f1c <quorem+0x118>
 8003e14:	3c01      	subs	r4, #1
 8003e16:	f101 0714 	add.w	r7, r1, #20
 8003e1a:	f100 0614 	add.w	r6, r0, #20
 8003e1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003e22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003e26:	3501      	adds	r5, #1
 8003e28:	fbb0 f5f5 	udiv	r5, r0, r5
 8003e2c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003e30:	eb06 030c 	add.w	r3, r6, ip
 8003e34:	eb07 090c 	add.w	r9, r7, ip
 8003e38:	9301      	str	r3, [sp, #4]
 8003e3a:	b39d      	cbz	r5, 8003ea4 <quorem+0xa0>
 8003e3c:	f04f 0a00 	mov.w	sl, #0
 8003e40:	4638      	mov	r0, r7
 8003e42:	46b6      	mov	lr, r6
 8003e44:	46d3      	mov	fp, sl
 8003e46:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e4a:	b293      	uxth	r3, r2
 8003e4c:	fb05 a303 	mla	r3, r5, r3, sl
 8003e50:	0c12      	lsrs	r2, r2, #16
 8003e52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e56:	fb05 a202 	mla	r2, r5, r2, sl
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	ebab 0303 	sub.w	r3, fp, r3
 8003e60:	f8de b000 	ldr.w	fp, [lr]
 8003e64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003e68:	fa1f fb8b 	uxth.w	fp, fp
 8003e6c:	445b      	add	r3, fp
 8003e6e:	fa1f fb82 	uxth.w	fp, r2
 8003e72:	f8de 2000 	ldr.w	r2, [lr]
 8003e76:	4581      	cmp	r9, r0
 8003e78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003e7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e86:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003e8a:	f84e 3b04 	str.w	r3, [lr], #4
 8003e8e:	d2da      	bcs.n	8003e46 <quorem+0x42>
 8003e90:	f856 300c 	ldr.w	r3, [r6, ip]
 8003e94:	b933      	cbnz	r3, 8003ea4 <quorem+0xa0>
 8003e96:	9b01      	ldr	r3, [sp, #4]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	429e      	cmp	r6, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	d331      	bcc.n	8003f04 <quorem+0x100>
 8003ea0:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	f001 fa05 	bl	80052b4 <__mcmp>
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	db26      	blt.n	8003efc <quorem+0xf8>
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f04f 0c00 	mov.w	ip, #0
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	f857 1b04 	ldr.w	r1, [r7], #4
 8003eba:	f8d0 e000 	ldr.w	lr, [r0]
 8003ebe:	b28b      	uxth	r3, r1
 8003ec0:	ebac 0303 	sub.w	r3, ip, r3
 8003ec4:	fa1f f28e 	uxth.w	r2, lr
 8003ec8:	4413      	add	r3, r2
 8003eca:	0c0a      	lsrs	r2, r1, #16
 8003ecc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003eda:	45b9      	cmp	r9, r7
 8003edc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003ee0:	f840 3b04 	str.w	r3, [r0], #4
 8003ee4:	d2e7      	bcs.n	8003eb6 <quorem+0xb2>
 8003ee6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003eea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003eee:	b92a      	cbnz	r2, 8003efc <quorem+0xf8>
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	429e      	cmp	r6, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	d30b      	bcc.n	8003f10 <quorem+0x10c>
 8003ef8:	f8c8 4010 	str.w	r4, [r8, #16]
 8003efc:	4628      	mov	r0, r5
 8003efe:	b003      	add	sp, #12
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	3b04      	subs	r3, #4
 8003f08:	2a00      	cmp	r2, #0
 8003f0a:	d1c9      	bne.n	8003ea0 <quorem+0x9c>
 8003f0c:	3c01      	subs	r4, #1
 8003f0e:	e7c4      	b.n	8003e9a <quorem+0x96>
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	3b04      	subs	r3, #4
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d1ef      	bne.n	8003ef8 <quorem+0xf4>
 8003f18:	3c01      	subs	r4, #1
 8003f1a:	e7ea      	b.n	8003ef2 <quorem+0xee>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e7ee      	b.n	8003efe <quorem+0xfa>

08003f20 <_dtoa_r>:
 8003f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f24:	4616      	mov	r6, r2
 8003f26:	461f      	mov	r7, r3
 8003f28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003f2a:	b095      	sub	sp, #84	; 0x54
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003f32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003f36:	b93d      	cbnz	r5, 8003f48 <_dtoa_r+0x28>
 8003f38:	2010      	movs	r0, #16
 8003f3a:	f000 ff91 	bl	8004e60 <malloc>
 8003f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8003f40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003f44:	6005      	str	r5, [r0, #0]
 8003f46:	60c5      	str	r5, [r0, #12]
 8003f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f4a:	6819      	ldr	r1, [r3, #0]
 8003f4c:	b151      	cbz	r1, 8003f64 <_dtoa_r+0x44>
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	2301      	movs	r3, #1
 8003f52:	4093      	lsls	r3, r2
 8003f54:	604a      	str	r2, [r1, #4]
 8003f56:	608b      	str	r3, [r1, #8]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 ffcb 	bl	8004ef4 <_Bfree>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	1e3b      	subs	r3, r7, #0
 8003f66:	bfaf      	iteee	ge
 8003f68:	2300      	movge	r3, #0
 8003f6a:	2201      	movlt	r2, #1
 8003f6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	9303      	strlt	r3, [sp, #12]
 8003f72:	bfac      	ite	ge
 8003f74:	f8c8 3000 	strge.w	r3, [r8]
 8003f78:	f8c8 2000 	strlt.w	r2, [r8]
 8003f7c:	4bae      	ldr	r3, [pc, #696]	; (8004238 <_dtoa_r+0x318>)
 8003f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003f82:	ea33 0308 	bics.w	r3, r3, r8
 8003f86:	d11b      	bne.n	8003fc0 <_dtoa_r+0xa0>
 8003f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	9b02      	ldr	r3, [sp, #8]
 8003f92:	b923      	cbnz	r3, 8003f9e <_dtoa_r+0x7e>
 8003f94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f000 8545 	beq.w	8004a28 <_dtoa_r+0xb08>
 8003f9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fa0:	b953      	cbnz	r3, 8003fb8 <_dtoa_r+0x98>
 8003fa2:	4ba6      	ldr	r3, [pc, #664]	; (800423c <_dtoa_r+0x31c>)
 8003fa4:	e021      	b.n	8003fea <_dtoa_r+0xca>
 8003fa6:	4ba6      	ldr	r3, [pc, #664]	; (8004240 <_dtoa_r+0x320>)
 8003fa8:	9306      	str	r3, [sp, #24]
 8003faa:	3308      	adds	r3, #8
 8003fac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	9806      	ldr	r0, [sp, #24]
 8003fb2:	b015      	add	sp, #84	; 0x54
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	4ba0      	ldr	r3, [pc, #640]	; (800423c <_dtoa_r+0x31c>)
 8003fba:	9306      	str	r3, [sp, #24]
 8003fbc:	3303      	adds	r3, #3
 8003fbe:	e7f5      	b.n	8003fac <_dtoa_r+0x8c>
 8003fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4630      	mov	r0, r6
 8003fca:	4639      	mov	r1, r7
 8003fcc:	f7fc fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8003fd0:	4682      	mov	sl, r0
 8003fd2:	b160      	cbz	r0, 8003fee <_dtoa_r+0xce>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8520 	beq.w	8004a22 <_dtoa_r+0xb02>
 8003fe2:	4b98      	ldr	r3, [pc, #608]	; (8004244 <_dtoa_r+0x324>)
 8003fe4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	9306      	str	r3, [sp, #24]
 8003fec:	e7e0      	b.n	8003fb0 <_dtoa_r+0x90>
 8003fee:	ab12      	add	r3, sp, #72	; 0x48
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	ab13      	add	r3, sp, #76	; 0x4c
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f001 f9d2 	bl	80053a4 <__d2b>
 8004000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004004:	4683      	mov	fp, r0
 8004006:	2d00      	cmp	r5, #0
 8004008:	d07d      	beq.n	8004106 <_dtoa_r+0x1e6>
 800400a:	46b0      	mov	r8, r6
 800400c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004010:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004014:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004018:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800401c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004020:	2200      	movs	r2, #0
 8004022:	4b89      	ldr	r3, [pc, #548]	; (8004248 <_dtoa_r+0x328>)
 8004024:	4640      	mov	r0, r8
 8004026:	4649      	mov	r1, r9
 8004028:	f7fc f89e 	bl	8000168 <__aeabi_dsub>
 800402c:	a37c      	add	r3, pc, #496	; (adr r3, 8004220 <_dtoa_r+0x300>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc fa51 	bl	80004d8 <__aeabi_dmul>
 8004036:	a37c      	add	r3, pc, #496	; (adr r3, 8004228 <_dtoa_r+0x308>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc f896 	bl	800016c <__adddf3>
 8004040:	4606      	mov	r6, r0
 8004042:	4628      	mov	r0, r5
 8004044:	460f      	mov	r7, r1
 8004046:	f7fc f9dd 	bl	8000404 <__aeabi_i2d>
 800404a:	a379      	add	r3, pc, #484	; (adr r3, 8004230 <_dtoa_r+0x310>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fa42 	bl	80004d8 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4630      	mov	r0, r6
 800405a:	4639      	mov	r1, r7
 800405c:	f7fc f886 	bl	800016c <__adddf3>
 8004060:	4606      	mov	r6, r0
 8004062:	460f      	mov	r7, r1
 8004064:	f7fc fce8 	bl	8000a38 <__aeabi_d2iz>
 8004068:	2200      	movs	r2, #0
 800406a:	4682      	mov	sl, r0
 800406c:	2300      	movs	r3, #0
 800406e:	4630      	mov	r0, r6
 8004070:	4639      	mov	r1, r7
 8004072:	f7fc fca3 	bl	80009bc <__aeabi_dcmplt>
 8004076:	b148      	cbz	r0, 800408c <_dtoa_r+0x16c>
 8004078:	4650      	mov	r0, sl
 800407a:	f7fc f9c3 	bl	8000404 <__aeabi_i2d>
 800407e:	4632      	mov	r2, r6
 8004080:	463b      	mov	r3, r7
 8004082:	f7fc fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8004086:	b908      	cbnz	r0, 800408c <_dtoa_r+0x16c>
 8004088:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800408c:	f1ba 0f16 	cmp.w	sl, #22
 8004090:	d85a      	bhi.n	8004148 <_dtoa_r+0x228>
 8004092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004096:	496d      	ldr	r1, [pc, #436]	; (800424c <_dtoa_r+0x32c>)
 8004098:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800409c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040a0:	f7fc fcaa 	bl	80009f8 <__aeabi_dcmpgt>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d051      	beq.n	800414c <_dtoa_r+0x22c>
 80040a8:	2300      	movs	r3, #0
 80040aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80040ae:	930d      	str	r3, [sp, #52]	; 0x34
 80040b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040b2:	1b5d      	subs	r5, r3, r5
 80040b4:	1e6b      	subs	r3, r5, #1
 80040b6:	9307      	str	r3, [sp, #28]
 80040b8:	bf43      	ittte	mi
 80040ba:	2300      	movmi	r3, #0
 80040bc:	f1c5 0901 	rsbmi	r9, r5, #1
 80040c0:	9307      	strmi	r3, [sp, #28]
 80040c2:	f04f 0900 	movpl.w	r9, #0
 80040c6:	f1ba 0f00 	cmp.w	sl, #0
 80040ca:	db41      	blt.n	8004150 <_dtoa_r+0x230>
 80040cc:	9b07      	ldr	r3, [sp, #28]
 80040ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80040d2:	4453      	add	r3, sl
 80040d4:	9307      	str	r3, [sp, #28]
 80040d6:	2300      	movs	r3, #0
 80040d8:	9308      	str	r3, [sp, #32]
 80040da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040dc:	2b09      	cmp	r3, #9
 80040de:	f200 808f 	bhi.w	8004200 <_dtoa_r+0x2e0>
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	bfc4      	itt	gt
 80040e6:	3b04      	subgt	r3, #4
 80040e8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80040ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80040ec:	bfc8      	it	gt
 80040ee:	2500      	movgt	r5, #0
 80040f0:	f1a3 0302 	sub.w	r3, r3, #2
 80040f4:	bfd8      	it	le
 80040f6:	2501      	movle	r5, #1
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	f200 808d 	bhi.w	8004218 <_dtoa_r+0x2f8>
 80040fe:	e8df f003 	tbb	[pc, r3]
 8004102:	7d7b      	.short	0x7d7b
 8004104:	6f2f      	.short	0x6f2f
 8004106:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800410a:	441d      	add	r5, r3
 800410c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004110:	2820      	cmp	r0, #32
 8004112:	dd13      	ble.n	800413c <_dtoa_r+0x21c>
 8004114:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004118:	9b02      	ldr	r3, [sp, #8]
 800411a:	fa08 f800 	lsl.w	r8, r8, r0
 800411e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004122:	fa23 f000 	lsr.w	r0, r3, r0
 8004126:	ea48 0000 	orr.w	r0, r8, r0
 800412a:	f7fc f95b 	bl	80003e4 <__aeabi_ui2d>
 800412e:	2301      	movs	r3, #1
 8004130:	4680      	mov	r8, r0
 8004132:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004136:	3d01      	subs	r5, #1
 8004138:	9310      	str	r3, [sp, #64]	; 0x40
 800413a:	e771      	b.n	8004020 <_dtoa_r+0x100>
 800413c:	9b02      	ldr	r3, [sp, #8]
 800413e:	f1c0 0020 	rsb	r0, r0, #32
 8004142:	fa03 f000 	lsl.w	r0, r3, r0
 8004146:	e7f0      	b.n	800412a <_dtoa_r+0x20a>
 8004148:	2301      	movs	r3, #1
 800414a:	e7b0      	b.n	80040ae <_dtoa_r+0x18e>
 800414c:	900d      	str	r0, [sp, #52]	; 0x34
 800414e:	e7af      	b.n	80040b0 <_dtoa_r+0x190>
 8004150:	f1ca 0300 	rsb	r3, sl, #0
 8004154:	9308      	str	r3, [sp, #32]
 8004156:	2300      	movs	r3, #0
 8004158:	eba9 090a 	sub.w	r9, r9, sl
 800415c:	930c      	str	r3, [sp, #48]	; 0x30
 800415e:	e7bc      	b.n	80040da <_dtoa_r+0x1ba>
 8004160:	2301      	movs	r3, #1
 8004162:	9309      	str	r3, [sp, #36]	; 0x24
 8004164:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004166:	2b00      	cmp	r3, #0
 8004168:	dd74      	ble.n	8004254 <_dtoa_r+0x334>
 800416a:	4698      	mov	r8, r3
 800416c:	9304      	str	r3, [sp, #16]
 800416e:	2200      	movs	r2, #0
 8004170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004172:	6072      	str	r2, [r6, #4]
 8004174:	2204      	movs	r2, #4
 8004176:	f102 0014 	add.w	r0, r2, #20
 800417a:	4298      	cmp	r0, r3
 800417c:	6871      	ldr	r1, [r6, #4]
 800417e:	d96e      	bls.n	800425e <_dtoa_r+0x33e>
 8004180:	4620      	mov	r0, r4
 8004182:	f000 fe83 	bl	8004e8c <_Balloc>
 8004186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004188:	6030      	str	r0, [r6, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b8 0f0e 	cmp.w	r8, #14
 8004190:	9306      	str	r3, [sp, #24]
 8004192:	f200 80ed 	bhi.w	8004370 <_dtoa_r+0x450>
 8004196:	2d00      	cmp	r5, #0
 8004198:	f000 80ea 	beq.w	8004370 <_dtoa_r+0x450>
 800419c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041a0:	f1ba 0f00 	cmp.w	sl, #0
 80041a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80041a8:	dd77      	ble.n	800429a <_dtoa_r+0x37a>
 80041aa:	4a28      	ldr	r2, [pc, #160]	; (800424c <_dtoa_r+0x32c>)
 80041ac:	f00a 030f 	and.w	r3, sl, #15
 80041b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80041b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041b8:	06f0      	lsls	r0, r6, #27
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80041c2:	d568      	bpl.n	8004296 <_dtoa_r+0x376>
 80041c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <_dtoa_r+0x330>)
 80041ca:	2503      	movs	r5, #3
 80041cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041d0:	f7fc faac 	bl	800072c <__aeabi_ddiv>
 80041d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041d8:	f006 060f 	and.w	r6, r6, #15
 80041dc:	4f1c      	ldr	r7, [pc, #112]	; (8004250 <_dtoa_r+0x330>)
 80041de:	e04f      	b.n	8004280 <_dtoa_r+0x360>
 80041e0:	2301      	movs	r3, #1
 80041e2:	9309      	str	r3, [sp, #36]	; 0x24
 80041e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80041e6:	4453      	add	r3, sl
 80041e8:	f103 0801 	add.w	r8, r3, #1
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	4643      	mov	r3, r8
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bfb8      	it	lt
 80041f4:	2301      	movlt	r3, #1
 80041f6:	e7ba      	b.n	800416e <_dtoa_r+0x24e>
 80041f8:	2300      	movs	r3, #0
 80041fa:	e7b2      	b.n	8004162 <_dtoa_r+0x242>
 80041fc:	2300      	movs	r3, #0
 80041fe:	e7f0      	b.n	80041e2 <_dtoa_r+0x2c2>
 8004200:	2501      	movs	r5, #1
 8004202:	2300      	movs	r3, #0
 8004204:	9509      	str	r5, [sp, #36]	; 0x24
 8004206:	931e      	str	r3, [sp, #120]	; 0x78
 8004208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800420c:	2200      	movs	r2, #0
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	4698      	mov	r8, r3
 8004212:	2312      	movs	r3, #18
 8004214:	921f      	str	r2, [sp, #124]	; 0x7c
 8004216:	e7aa      	b.n	800416e <_dtoa_r+0x24e>
 8004218:	2301      	movs	r3, #1
 800421a:	9309      	str	r3, [sp, #36]	; 0x24
 800421c:	e7f4      	b.n	8004208 <_dtoa_r+0x2e8>
 800421e:	bf00      	nop
 8004220:	636f4361 	.word	0x636f4361
 8004224:	3fd287a7 	.word	0x3fd287a7
 8004228:	8b60c8b3 	.word	0x8b60c8b3
 800422c:	3fc68a28 	.word	0x3fc68a28
 8004230:	509f79fb 	.word	0x509f79fb
 8004234:	3fd34413 	.word	0x3fd34413
 8004238:	7ff00000 	.word	0x7ff00000
 800423c:	08009c67 	.word	0x08009c67
 8004240:	08009c5e 	.word	0x08009c5e
 8004244:	08009c06 	.word	0x08009c06
 8004248:	3ff80000 	.word	0x3ff80000
 800424c:	08009cf8 	.word	0x08009cf8
 8004250:	08009cd0 	.word	0x08009cd0
 8004254:	2301      	movs	r3, #1
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	4698      	mov	r8, r3
 800425a:	461a      	mov	r2, r3
 800425c:	e7da      	b.n	8004214 <_dtoa_r+0x2f4>
 800425e:	3101      	adds	r1, #1
 8004260:	6071      	str	r1, [r6, #4]
 8004262:	0052      	lsls	r2, r2, #1
 8004264:	e787      	b.n	8004176 <_dtoa_r+0x256>
 8004266:	07f1      	lsls	r1, r6, #31
 8004268:	d508      	bpl.n	800427c <_dtoa_r+0x35c>
 800426a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800426e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004272:	f7fc f931 	bl	80004d8 <__aeabi_dmul>
 8004276:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800427a:	3501      	adds	r5, #1
 800427c:	1076      	asrs	r6, r6, #1
 800427e:	3708      	adds	r7, #8
 8004280:	2e00      	cmp	r6, #0
 8004282:	d1f0      	bne.n	8004266 <_dtoa_r+0x346>
 8004284:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800428c:	f7fc fa4e 	bl	800072c <__aeabi_ddiv>
 8004290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004294:	e01b      	b.n	80042ce <_dtoa_r+0x3ae>
 8004296:	2502      	movs	r5, #2
 8004298:	e7a0      	b.n	80041dc <_dtoa_r+0x2bc>
 800429a:	f000 80a4 	beq.w	80043e6 <_dtoa_r+0x4c6>
 800429e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042a2:	f1ca 0600 	rsb	r6, sl, #0
 80042a6:	4ba0      	ldr	r3, [pc, #640]	; (8004528 <_dtoa_r+0x608>)
 80042a8:	f006 020f 	and.w	r2, r6, #15
 80042ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc f910 	bl	80004d8 <__aeabi_dmul>
 80042b8:	2502      	movs	r5, #2
 80042ba:	2300      	movs	r3, #0
 80042bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042c0:	4f9a      	ldr	r7, [pc, #616]	; (800452c <_dtoa_r+0x60c>)
 80042c2:	1136      	asrs	r6, r6, #4
 80042c4:	2e00      	cmp	r6, #0
 80042c6:	f040 8083 	bne.w	80043d0 <_dtoa_r+0x4b0>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e0      	bne.n	8004290 <_dtoa_r+0x370>
 80042ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 808a 	beq.w	80043ea <_dtoa_r+0x4ca>
 80042d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80042de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042e2:	2200      	movs	r2, #0
 80042e4:	4b92      	ldr	r3, [pc, #584]	; (8004530 <_dtoa_r+0x610>)
 80042e6:	f7fc fb69 	bl	80009bc <__aeabi_dcmplt>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d07d      	beq.n	80043ea <_dtoa_r+0x4ca>
 80042ee:	f1b8 0f00 	cmp.w	r8, #0
 80042f2:	d07a      	beq.n	80043ea <_dtoa_r+0x4ca>
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	dd36      	ble.n	8004368 <_dtoa_r+0x448>
 80042fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	4b8c      	ldr	r3, [pc, #560]	; (8004534 <_dtoa_r+0x614>)
 8004302:	f7fc f8e9 	bl	80004d8 <__aeabi_dmul>
 8004306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800430a:	9e04      	ldr	r6, [sp, #16]
 800430c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004310:	3501      	adds	r5, #1
 8004312:	4628      	mov	r0, r5
 8004314:	f7fc f876 	bl	8000404 <__aeabi_i2d>
 8004318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800431c:	f7fc f8dc 	bl	80004d8 <__aeabi_dmul>
 8004320:	2200      	movs	r2, #0
 8004322:	4b85      	ldr	r3, [pc, #532]	; (8004538 <_dtoa_r+0x618>)
 8004324:	f7fb ff22 	bl	800016c <__adddf3>
 8004328:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800432c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004330:	950b      	str	r5, [sp, #44]	; 0x2c
 8004332:	2e00      	cmp	r6, #0
 8004334:	d15c      	bne.n	80043f0 <_dtoa_r+0x4d0>
 8004336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <_dtoa_r+0x61c>)
 800433e:	f7fb ff13 	bl	8000168 <__aeabi_dsub>
 8004342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004344:	462b      	mov	r3, r5
 8004346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800434a:	f7fc fb55 	bl	80009f8 <__aeabi_dcmpgt>
 800434e:	2800      	cmp	r0, #0
 8004350:	f040 8281 	bne.w	8004856 <_dtoa_r+0x936>
 8004354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800435a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800435e:	f7fc fb2d 	bl	80009bc <__aeabi_dcmplt>
 8004362:	2800      	cmp	r0, #0
 8004364:	f040 8275 	bne.w	8004852 <_dtoa_r+0x932>
 8004368:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800436c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004372:	2b00      	cmp	r3, #0
 8004374:	f2c0 814b 	blt.w	800460e <_dtoa_r+0x6ee>
 8004378:	f1ba 0f0e 	cmp.w	sl, #14
 800437c:	f300 8147 	bgt.w	800460e <_dtoa_r+0x6ee>
 8004380:	4b69      	ldr	r3, [pc, #420]	; (8004528 <_dtoa_r+0x608>)
 8004382:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800438e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004390:	2b00      	cmp	r3, #0
 8004392:	f280 80d7 	bge.w	8004544 <_dtoa_r+0x624>
 8004396:	f1b8 0f00 	cmp.w	r8, #0
 800439a:	f300 80d3 	bgt.w	8004544 <_dtoa_r+0x624>
 800439e:	f040 8257 	bne.w	8004850 <_dtoa_r+0x930>
 80043a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043a6:	2200      	movs	r2, #0
 80043a8:	4b64      	ldr	r3, [pc, #400]	; (800453c <_dtoa_r+0x61c>)
 80043aa:	f7fc f895 	bl	80004d8 <__aeabi_dmul>
 80043ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043b2:	f7fc fb17 	bl	80009e4 <__aeabi_dcmpge>
 80043b6:	4646      	mov	r6, r8
 80043b8:	4647      	mov	r7, r8
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 822d 	bne.w	800481a <_dtoa_r+0x8fa>
 80043c0:	9b06      	ldr	r3, [sp, #24]
 80043c2:	9a06      	ldr	r2, [sp, #24]
 80043c4:	1c5d      	adds	r5, r3, #1
 80043c6:	2331      	movs	r3, #49	; 0x31
 80043c8:	f10a 0a01 	add.w	sl, sl, #1
 80043cc:	7013      	strb	r3, [r2, #0]
 80043ce:	e228      	b.n	8004822 <_dtoa_r+0x902>
 80043d0:	07f2      	lsls	r2, r6, #31
 80043d2:	d505      	bpl.n	80043e0 <_dtoa_r+0x4c0>
 80043d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d8:	f7fc f87e 	bl	80004d8 <__aeabi_dmul>
 80043dc:	2301      	movs	r3, #1
 80043de:	3501      	adds	r5, #1
 80043e0:	1076      	asrs	r6, r6, #1
 80043e2:	3708      	adds	r7, #8
 80043e4:	e76e      	b.n	80042c4 <_dtoa_r+0x3a4>
 80043e6:	2502      	movs	r5, #2
 80043e8:	e771      	b.n	80042ce <_dtoa_r+0x3ae>
 80043ea:	4657      	mov	r7, sl
 80043ec:	4646      	mov	r6, r8
 80043ee:	e790      	b.n	8004312 <_dtoa_r+0x3f2>
 80043f0:	4b4d      	ldr	r3, [pc, #308]	; (8004528 <_dtoa_r+0x608>)
 80043f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80043fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d048      	beq.n	8004492 <_dtoa_r+0x572>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	2000      	movs	r0, #0
 8004406:	494e      	ldr	r1, [pc, #312]	; (8004540 <_dtoa_r+0x620>)
 8004408:	f7fc f990 	bl	800072c <__aeabi_ddiv>
 800440c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004410:	f7fb feaa 	bl	8000168 <__aeabi_dsub>
 8004414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004418:	9d06      	ldr	r5, [sp, #24]
 800441a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800441e:	f7fc fb0b 	bl	8000a38 <__aeabi_d2iz>
 8004422:	9011      	str	r0, [sp, #68]	; 0x44
 8004424:	f7fb ffee 	bl	8000404 <__aeabi_i2d>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004430:	f7fb fe9a 	bl	8000168 <__aeabi_dsub>
 8004434:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800443a:	3330      	adds	r3, #48	; 0x30
 800443c:	f805 3b01 	strb.w	r3, [r5], #1
 8004440:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004444:	f7fc faba 	bl	80009bc <__aeabi_dcmplt>
 8004448:	2800      	cmp	r0, #0
 800444a:	d163      	bne.n	8004514 <_dtoa_r+0x5f4>
 800444c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004450:	2000      	movs	r0, #0
 8004452:	4937      	ldr	r1, [pc, #220]	; (8004530 <_dtoa_r+0x610>)
 8004454:	f7fb fe88 	bl	8000168 <__aeabi_dsub>
 8004458:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800445c:	f7fc faae 	bl	80009bc <__aeabi_dcmplt>
 8004460:	2800      	cmp	r0, #0
 8004462:	f040 80b5 	bne.w	80045d0 <_dtoa_r+0x6b0>
 8004466:	9b06      	ldr	r3, [sp, #24]
 8004468:	1aeb      	subs	r3, r5, r3
 800446a:	429e      	cmp	r6, r3
 800446c:	f77f af7c 	ble.w	8004368 <_dtoa_r+0x448>
 8004470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004474:	2200      	movs	r2, #0
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <_dtoa_r+0x614>)
 8004478:	f7fc f82e 	bl	80004d8 <__aeabi_dmul>
 800447c:	2200      	movs	r2, #0
 800447e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <_dtoa_r+0x614>)
 8004488:	f7fc f826 	bl	80004d8 <__aeabi_dmul>
 800448c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004490:	e7c3      	b.n	800441a <_dtoa_r+0x4fa>
 8004492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004496:	f7fc f81f 	bl	80004d8 <__aeabi_dmul>
 800449a:	9b06      	ldr	r3, [sp, #24]
 800449c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044a0:	199d      	adds	r5, r3, r6
 80044a2:	461e      	mov	r6, r3
 80044a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a8:	f7fc fac6 	bl	8000a38 <__aeabi_d2iz>
 80044ac:	9011      	str	r0, [sp, #68]	; 0x44
 80044ae:	f7fb ffa9 	bl	8000404 <__aeabi_i2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ba:	f7fb fe55 	bl	8000168 <__aeabi_dsub>
 80044be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044c4:	3330      	adds	r3, #48	; 0x30
 80044c6:	f806 3b01 	strb.w	r3, [r6], #1
 80044ca:	42ae      	cmp	r6, r5
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	d124      	bne.n	800451c <_dtoa_r+0x5fc>
 80044d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <_dtoa_r+0x620>)
 80044d8:	f7fb fe48 	bl	800016c <__adddf3>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e4:	f7fc fa88 	bl	80009f8 <__aeabi_dcmpgt>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d171      	bne.n	80045d0 <_dtoa_r+0x6b0>
 80044ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044f0:	2000      	movs	r0, #0
 80044f2:	4913      	ldr	r1, [pc, #76]	; (8004540 <_dtoa_r+0x620>)
 80044f4:	f7fb fe38 	bl	8000168 <__aeabi_dsub>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004500:	f7fc fa5c 	bl	80009bc <__aeabi_dcmplt>
 8004504:	2800      	cmp	r0, #0
 8004506:	f43f af2f 	beq.w	8004368 <_dtoa_r+0x448>
 800450a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800450e:	1e6a      	subs	r2, r5, #1
 8004510:	2b30      	cmp	r3, #48	; 0x30
 8004512:	d001      	beq.n	8004518 <_dtoa_r+0x5f8>
 8004514:	46ba      	mov	sl, r7
 8004516:	e04a      	b.n	80045ae <_dtoa_r+0x68e>
 8004518:	4615      	mov	r5, r2
 800451a:	e7f6      	b.n	800450a <_dtoa_r+0x5ea>
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <_dtoa_r+0x614>)
 800451e:	f7fb ffdb 	bl	80004d8 <__aeabi_dmul>
 8004522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004526:	e7bd      	b.n	80044a4 <_dtoa_r+0x584>
 8004528:	08009cf8 	.word	0x08009cf8
 800452c:	08009cd0 	.word	0x08009cd0
 8004530:	3ff00000 	.word	0x3ff00000
 8004534:	40240000 	.word	0x40240000
 8004538:	401c0000 	.word	0x401c0000
 800453c:	40140000 	.word	0x40140000
 8004540:	3fe00000 	.word	0x3fe00000
 8004544:	9d06      	ldr	r5, [sp, #24]
 8004546:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800454a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7fc f8eb 	bl	800072c <__aeabi_ddiv>
 8004556:	f7fc fa6f 	bl	8000a38 <__aeabi_d2iz>
 800455a:	4681      	mov	r9, r0
 800455c:	f7fb ff52 	bl	8000404 <__aeabi_i2d>
 8004560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004564:	f7fb ffb8 	bl	80004d8 <__aeabi_dmul>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4630      	mov	r0, r6
 800456e:	4639      	mov	r1, r7
 8004570:	f7fb fdfa 	bl	8000168 <__aeabi_dsub>
 8004574:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004578:	f805 6b01 	strb.w	r6, [r5], #1
 800457c:	9e06      	ldr	r6, [sp, #24]
 800457e:	4602      	mov	r2, r0
 8004580:	1bae      	subs	r6, r5, r6
 8004582:	45b0      	cmp	r8, r6
 8004584:	460b      	mov	r3, r1
 8004586:	d135      	bne.n	80045f4 <_dtoa_r+0x6d4>
 8004588:	f7fb fdf0 	bl	800016c <__adddf3>
 800458c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004590:	4606      	mov	r6, r0
 8004592:	460f      	mov	r7, r1
 8004594:	f7fc fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8004598:	b9c8      	cbnz	r0, 80045ce <_dtoa_r+0x6ae>
 800459a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800459e:	4630      	mov	r0, r6
 80045a0:	4639      	mov	r1, r7
 80045a2:	f7fc fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80045a6:	b110      	cbz	r0, 80045ae <_dtoa_r+0x68e>
 80045a8:	f019 0f01 	tst.w	r9, #1
 80045ac:	d10f      	bne.n	80045ce <_dtoa_r+0x6ae>
 80045ae:	4659      	mov	r1, fp
 80045b0:	4620      	mov	r0, r4
 80045b2:	f000 fc9f 	bl	8004ef4 <_Bfree>
 80045b6:	2300      	movs	r3, #0
 80045b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045ba:	702b      	strb	r3, [r5, #0]
 80045bc:	f10a 0301 	add.w	r3, sl, #1
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f43f acf3 	beq.w	8003fb0 <_dtoa_r+0x90>
 80045ca:	601d      	str	r5, [r3, #0]
 80045cc:	e4f0      	b.n	8003fb0 <_dtoa_r+0x90>
 80045ce:	4657      	mov	r7, sl
 80045d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80045d4:	1e6b      	subs	r3, r5, #1
 80045d6:	2a39      	cmp	r2, #57	; 0x39
 80045d8:	d106      	bne.n	80045e8 <_dtoa_r+0x6c8>
 80045da:	9a06      	ldr	r2, [sp, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d107      	bne.n	80045f0 <_dtoa_r+0x6d0>
 80045e0:	2330      	movs	r3, #48	; 0x30
 80045e2:	7013      	strb	r3, [r2, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	3701      	adds	r7, #1
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	3201      	adds	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e791      	b.n	8004514 <_dtoa_r+0x5f4>
 80045f0:	461d      	mov	r5, r3
 80045f2:	e7ed      	b.n	80045d0 <_dtoa_r+0x6b0>
 80045f4:	2200      	movs	r2, #0
 80045f6:	4b99      	ldr	r3, [pc, #612]	; (800485c <_dtoa_r+0x93c>)
 80045f8:	f7fb ff6e 	bl	80004d8 <__aeabi_dmul>
 80045fc:	2200      	movs	r2, #0
 80045fe:	2300      	movs	r3, #0
 8004600:	4606      	mov	r6, r0
 8004602:	460f      	mov	r7, r1
 8004604:	f7fc f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8004608:	2800      	cmp	r0, #0
 800460a:	d09e      	beq.n	800454a <_dtoa_r+0x62a>
 800460c:	e7cf      	b.n	80045ae <_dtoa_r+0x68e>
 800460e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004610:	2a00      	cmp	r2, #0
 8004612:	f000 8088 	beq.w	8004726 <_dtoa_r+0x806>
 8004616:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004618:	2a01      	cmp	r2, #1
 800461a:	dc6d      	bgt.n	80046f8 <_dtoa_r+0x7d8>
 800461c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800461e:	2a00      	cmp	r2, #0
 8004620:	d066      	beq.n	80046f0 <_dtoa_r+0x7d0>
 8004622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004626:	464d      	mov	r5, r9
 8004628:	9e08      	ldr	r6, [sp, #32]
 800462a:	9a07      	ldr	r2, [sp, #28]
 800462c:	2101      	movs	r1, #1
 800462e:	441a      	add	r2, r3
 8004630:	4620      	mov	r0, r4
 8004632:	4499      	add	r9, r3
 8004634:	9207      	str	r2, [sp, #28]
 8004636:	f000 fcfd 	bl	8005034 <__i2b>
 800463a:	4607      	mov	r7, r0
 800463c:	2d00      	cmp	r5, #0
 800463e:	dd0b      	ble.n	8004658 <_dtoa_r+0x738>
 8004640:	9b07      	ldr	r3, [sp, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	dd08      	ble.n	8004658 <_dtoa_r+0x738>
 8004646:	42ab      	cmp	r3, r5
 8004648:	bfa8      	it	ge
 800464a:	462b      	movge	r3, r5
 800464c:	9a07      	ldr	r2, [sp, #28]
 800464e:	eba9 0903 	sub.w	r9, r9, r3
 8004652:	1aed      	subs	r5, r5, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	9307      	str	r3, [sp, #28]
 8004658:	9b08      	ldr	r3, [sp, #32]
 800465a:	b1eb      	cbz	r3, 8004698 <_dtoa_r+0x778>
 800465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d065      	beq.n	800472e <_dtoa_r+0x80e>
 8004662:	b18e      	cbz	r6, 8004688 <_dtoa_r+0x768>
 8004664:	4639      	mov	r1, r7
 8004666:	4632      	mov	r2, r6
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fd81 	bl	8005170 <__pow5mult>
 800466e:	465a      	mov	r2, fp
 8004670:	4601      	mov	r1, r0
 8004672:	4607      	mov	r7, r0
 8004674:	4620      	mov	r0, r4
 8004676:	f000 fce6 	bl	8005046 <__multiply>
 800467a:	4659      	mov	r1, fp
 800467c:	900a      	str	r0, [sp, #40]	; 0x28
 800467e:	4620      	mov	r0, r4
 8004680:	f000 fc38 	bl	8004ef4 <_Bfree>
 8004684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004686:	469b      	mov	fp, r3
 8004688:	9b08      	ldr	r3, [sp, #32]
 800468a:	1b9a      	subs	r2, r3, r6
 800468c:	d004      	beq.n	8004698 <_dtoa_r+0x778>
 800468e:	4659      	mov	r1, fp
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fd6d 	bl	8005170 <__pow5mult>
 8004696:	4683      	mov	fp, r0
 8004698:	2101      	movs	r1, #1
 800469a:	4620      	mov	r0, r4
 800469c:	f000 fcca 	bl	8005034 <__i2b>
 80046a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046a2:	4606      	mov	r6, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 81c6 	beq.w	8004a36 <_dtoa_r+0xb16>
 80046aa:	461a      	mov	r2, r3
 80046ac:	4601      	mov	r1, r0
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fd5e 	bl	8005170 <__pow5mult>
 80046b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80046b6:	4606      	mov	r6, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	dc3e      	bgt.n	800473a <_dtoa_r+0x81a>
 80046bc:	9b02      	ldr	r3, [sp, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d137      	bne.n	8004732 <_dtoa_r+0x812>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d134      	bne.n	8004736 <_dtoa_r+0x816>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046d2:	0d1b      	lsrs	r3, r3, #20
 80046d4:	051b      	lsls	r3, r3, #20
 80046d6:	b12b      	cbz	r3, 80046e4 <_dtoa_r+0x7c4>
 80046d8:	9b07      	ldr	r3, [sp, #28]
 80046da:	f109 0901 	add.w	r9, r9, #1
 80046de:	3301      	adds	r3, #1
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	2301      	movs	r3, #1
 80046e4:	9308      	str	r3, [sp, #32]
 80046e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d128      	bne.n	800473e <_dtoa_r+0x81e>
 80046ec:	2001      	movs	r0, #1
 80046ee:	e02e      	b.n	800474e <_dtoa_r+0x82e>
 80046f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046f6:	e796      	b.n	8004626 <_dtoa_r+0x706>
 80046f8:	9b08      	ldr	r3, [sp, #32]
 80046fa:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80046fe:	42b3      	cmp	r3, r6
 8004700:	bfb7      	itett	lt
 8004702:	9b08      	ldrlt	r3, [sp, #32]
 8004704:	1b9e      	subge	r6, r3, r6
 8004706:	1af2      	sublt	r2, r6, r3
 8004708:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800470a:	bfbf      	itttt	lt
 800470c:	9608      	strlt	r6, [sp, #32]
 800470e:	189b      	addlt	r3, r3, r2
 8004710:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004712:	2600      	movlt	r6, #0
 8004714:	f1b8 0f00 	cmp.w	r8, #0
 8004718:	bfb9      	ittee	lt
 800471a:	eba9 0508 	sublt.w	r5, r9, r8
 800471e:	2300      	movlt	r3, #0
 8004720:	464d      	movge	r5, r9
 8004722:	4643      	movge	r3, r8
 8004724:	e781      	b.n	800462a <_dtoa_r+0x70a>
 8004726:	9e08      	ldr	r6, [sp, #32]
 8004728:	464d      	mov	r5, r9
 800472a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800472c:	e786      	b.n	800463c <_dtoa_r+0x71c>
 800472e:	9a08      	ldr	r2, [sp, #32]
 8004730:	e7ad      	b.n	800468e <_dtoa_r+0x76e>
 8004732:	2300      	movs	r3, #0
 8004734:	e7d6      	b.n	80046e4 <_dtoa_r+0x7c4>
 8004736:	9b02      	ldr	r3, [sp, #8]
 8004738:	e7d4      	b.n	80046e4 <_dtoa_r+0x7c4>
 800473a:	2300      	movs	r3, #0
 800473c:	9308      	str	r3, [sp, #32]
 800473e:	6933      	ldr	r3, [r6, #16]
 8004740:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004744:	6918      	ldr	r0, [r3, #16]
 8004746:	f000 fc27 	bl	8004f98 <__hi0bits>
 800474a:	f1c0 0020 	rsb	r0, r0, #32
 800474e:	9b07      	ldr	r3, [sp, #28]
 8004750:	4418      	add	r0, r3
 8004752:	f010 001f 	ands.w	r0, r0, #31
 8004756:	d047      	beq.n	80047e8 <_dtoa_r+0x8c8>
 8004758:	f1c0 0320 	rsb	r3, r0, #32
 800475c:	2b04      	cmp	r3, #4
 800475e:	dd3b      	ble.n	80047d8 <_dtoa_r+0x8b8>
 8004760:	9b07      	ldr	r3, [sp, #28]
 8004762:	f1c0 001c 	rsb	r0, r0, #28
 8004766:	4481      	add	r9, r0
 8004768:	4405      	add	r5, r0
 800476a:	4403      	add	r3, r0
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	f1b9 0f00 	cmp.w	r9, #0
 8004772:	dd05      	ble.n	8004780 <_dtoa_r+0x860>
 8004774:	4659      	mov	r1, fp
 8004776:	464a      	mov	r2, r9
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fd47 	bl	800520c <__lshift>
 800477e:	4683      	mov	fp, r0
 8004780:	9b07      	ldr	r3, [sp, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	dd05      	ble.n	8004792 <_dtoa_r+0x872>
 8004786:	4631      	mov	r1, r6
 8004788:	461a      	mov	r2, r3
 800478a:	4620      	mov	r0, r4
 800478c:	f000 fd3e 	bl	800520c <__lshift>
 8004790:	4606      	mov	r6, r0
 8004792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004794:	b353      	cbz	r3, 80047ec <_dtoa_r+0x8cc>
 8004796:	4631      	mov	r1, r6
 8004798:	4658      	mov	r0, fp
 800479a:	f000 fd8b 	bl	80052b4 <__mcmp>
 800479e:	2800      	cmp	r0, #0
 80047a0:	da24      	bge.n	80047ec <_dtoa_r+0x8cc>
 80047a2:	2300      	movs	r3, #0
 80047a4:	4659      	mov	r1, fp
 80047a6:	220a      	movs	r2, #10
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fbba 	bl	8004f22 <__multadd>
 80047ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047b4:	4683      	mov	fp, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8144 	beq.w	8004a44 <_dtoa_r+0xb24>
 80047bc:	2300      	movs	r3, #0
 80047be:	4639      	mov	r1, r7
 80047c0:	220a      	movs	r2, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fbad 	bl	8004f22 <__multadd>
 80047c8:	9b04      	ldr	r3, [sp, #16]
 80047ca:	4607      	mov	r7, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dc4d      	bgt.n	800486c <_dtoa_r+0x94c>
 80047d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	dd4a      	ble.n	800486c <_dtoa_r+0x94c>
 80047d6:	e011      	b.n	80047fc <_dtoa_r+0x8dc>
 80047d8:	d0c9      	beq.n	800476e <_dtoa_r+0x84e>
 80047da:	9a07      	ldr	r2, [sp, #28]
 80047dc:	331c      	adds	r3, #28
 80047de:	441a      	add	r2, r3
 80047e0:	4499      	add	r9, r3
 80047e2:	441d      	add	r5, r3
 80047e4:	4613      	mov	r3, r2
 80047e6:	e7c1      	b.n	800476c <_dtoa_r+0x84c>
 80047e8:	4603      	mov	r3, r0
 80047ea:	e7f6      	b.n	80047da <_dtoa_r+0x8ba>
 80047ec:	f1b8 0f00 	cmp.w	r8, #0
 80047f0:	dc36      	bgt.n	8004860 <_dtoa_r+0x940>
 80047f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	dd33      	ble.n	8004860 <_dtoa_r+0x940>
 80047f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	b963      	cbnz	r3, 800481a <_dtoa_r+0x8fa>
 8004800:	4631      	mov	r1, r6
 8004802:	2205      	movs	r2, #5
 8004804:	4620      	mov	r0, r4
 8004806:	f000 fb8c 	bl	8004f22 <__multadd>
 800480a:	4601      	mov	r1, r0
 800480c:	4606      	mov	r6, r0
 800480e:	4658      	mov	r0, fp
 8004810:	f000 fd50 	bl	80052b4 <__mcmp>
 8004814:	2800      	cmp	r0, #0
 8004816:	f73f add3 	bgt.w	80043c0 <_dtoa_r+0x4a0>
 800481a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800481c:	9d06      	ldr	r5, [sp, #24]
 800481e:	ea6f 0a03 	mvn.w	sl, r3
 8004822:	f04f 0900 	mov.w	r9, #0
 8004826:	4631      	mov	r1, r6
 8004828:	4620      	mov	r0, r4
 800482a:	f000 fb63 	bl	8004ef4 <_Bfree>
 800482e:	2f00      	cmp	r7, #0
 8004830:	f43f aebd 	beq.w	80045ae <_dtoa_r+0x68e>
 8004834:	f1b9 0f00 	cmp.w	r9, #0
 8004838:	d005      	beq.n	8004846 <_dtoa_r+0x926>
 800483a:	45b9      	cmp	r9, r7
 800483c:	d003      	beq.n	8004846 <_dtoa_r+0x926>
 800483e:	4649      	mov	r1, r9
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fb57 	bl	8004ef4 <_Bfree>
 8004846:	4639      	mov	r1, r7
 8004848:	4620      	mov	r0, r4
 800484a:	f000 fb53 	bl	8004ef4 <_Bfree>
 800484e:	e6ae      	b.n	80045ae <_dtoa_r+0x68e>
 8004850:	2600      	movs	r6, #0
 8004852:	4637      	mov	r7, r6
 8004854:	e7e1      	b.n	800481a <_dtoa_r+0x8fa>
 8004856:	46ba      	mov	sl, r7
 8004858:	4637      	mov	r7, r6
 800485a:	e5b1      	b.n	80043c0 <_dtoa_r+0x4a0>
 800485c:	40240000 	.word	0x40240000
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	f8cd 8010 	str.w	r8, [sp, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80f3 	beq.w	8004a52 <_dtoa_r+0xb32>
 800486c:	2d00      	cmp	r5, #0
 800486e:	dd05      	ble.n	800487c <_dtoa_r+0x95c>
 8004870:	4639      	mov	r1, r7
 8004872:	462a      	mov	r2, r5
 8004874:	4620      	mov	r0, r4
 8004876:	f000 fcc9 	bl	800520c <__lshift>
 800487a:	4607      	mov	r7, r0
 800487c:	9b08      	ldr	r3, [sp, #32]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d04c      	beq.n	800491c <_dtoa_r+0x9fc>
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4620      	mov	r0, r4
 8004886:	f000 fb01 	bl	8004e8c <_Balloc>
 800488a:	4605      	mov	r5, r0
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	f107 010c 	add.w	r1, r7, #12
 8004892:	3202      	adds	r2, #2
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	300c      	adds	r0, #12
 8004898:	f7fe fcc8 	bl	800322c <memcpy>
 800489c:	2201      	movs	r2, #1
 800489e:	4629      	mov	r1, r5
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 fcb3 	bl	800520c <__lshift>
 80048a6:	46b9      	mov	r9, r7
 80048a8:	4607      	mov	r7, r0
 80048aa:	9b06      	ldr	r3, [sp, #24]
 80048ac:	9307      	str	r3, [sp, #28]
 80048ae:	9b02      	ldr	r3, [sp, #8]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	9308      	str	r3, [sp, #32]
 80048b6:	4631      	mov	r1, r6
 80048b8:	4658      	mov	r0, fp
 80048ba:	f7ff faa3 	bl	8003e04 <quorem>
 80048be:	4649      	mov	r1, r9
 80048c0:	4605      	mov	r5, r0
 80048c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80048c6:	4658      	mov	r0, fp
 80048c8:	f000 fcf4 	bl	80052b4 <__mcmp>
 80048cc:	463a      	mov	r2, r7
 80048ce:	9002      	str	r0, [sp, #8]
 80048d0:	4631      	mov	r1, r6
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fd08 	bl	80052e8 <__mdiff>
 80048d8:	68c3      	ldr	r3, [r0, #12]
 80048da:	4602      	mov	r2, r0
 80048dc:	bb03      	cbnz	r3, 8004920 <_dtoa_r+0xa00>
 80048de:	4601      	mov	r1, r0
 80048e0:	9009      	str	r0, [sp, #36]	; 0x24
 80048e2:	4658      	mov	r0, fp
 80048e4:	f000 fce6 	bl	80052b4 <__mcmp>
 80048e8:	4603      	mov	r3, r0
 80048ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ec:	4611      	mov	r1, r2
 80048ee:	4620      	mov	r0, r4
 80048f0:	9309      	str	r3, [sp, #36]	; 0x24
 80048f2:	f000 faff 	bl	8004ef4 <_Bfree>
 80048f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f8:	b9a3      	cbnz	r3, 8004924 <_dtoa_r+0xa04>
 80048fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80048fc:	b992      	cbnz	r2, 8004924 <_dtoa_r+0xa04>
 80048fe:	9a08      	ldr	r2, [sp, #32]
 8004900:	b982      	cbnz	r2, 8004924 <_dtoa_r+0xa04>
 8004902:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004906:	d029      	beq.n	800495c <_dtoa_r+0xa3c>
 8004908:	9b02      	ldr	r3, [sp, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	dd01      	ble.n	8004912 <_dtoa_r+0x9f2>
 800490e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004912:	9b07      	ldr	r3, [sp, #28]
 8004914:	1c5d      	adds	r5, r3, #1
 8004916:	f883 8000 	strb.w	r8, [r3]
 800491a:	e784      	b.n	8004826 <_dtoa_r+0x906>
 800491c:	4638      	mov	r0, r7
 800491e:	e7c2      	b.n	80048a6 <_dtoa_r+0x986>
 8004920:	2301      	movs	r3, #1
 8004922:	e7e3      	b.n	80048ec <_dtoa_r+0x9cc>
 8004924:	9a02      	ldr	r2, [sp, #8]
 8004926:	2a00      	cmp	r2, #0
 8004928:	db04      	blt.n	8004934 <_dtoa_r+0xa14>
 800492a:	d123      	bne.n	8004974 <_dtoa_r+0xa54>
 800492c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800492e:	bb0a      	cbnz	r2, 8004974 <_dtoa_r+0xa54>
 8004930:	9a08      	ldr	r2, [sp, #32]
 8004932:	b9fa      	cbnz	r2, 8004974 <_dtoa_r+0xa54>
 8004934:	2b00      	cmp	r3, #0
 8004936:	ddec      	ble.n	8004912 <_dtoa_r+0x9f2>
 8004938:	4659      	mov	r1, fp
 800493a:	2201      	movs	r2, #1
 800493c:	4620      	mov	r0, r4
 800493e:	f000 fc65 	bl	800520c <__lshift>
 8004942:	4631      	mov	r1, r6
 8004944:	4683      	mov	fp, r0
 8004946:	f000 fcb5 	bl	80052b4 <__mcmp>
 800494a:	2800      	cmp	r0, #0
 800494c:	dc03      	bgt.n	8004956 <_dtoa_r+0xa36>
 800494e:	d1e0      	bne.n	8004912 <_dtoa_r+0x9f2>
 8004950:	f018 0f01 	tst.w	r8, #1
 8004954:	d0dd      	beq.n	8004912 <_dtoa_r+0x9f2>
 8004956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800495a:	d1d8      	bne.n	800490e <_dtoa_r+0x9ee>
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	1c5d      	adds	r5, r3, #1
 8004962:	2339      	movs	r3, #57	; 0x39
 8004964:	7013      	strb	r3, [r2, #0]
 8004966:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800496a:	1e6a      	subs	r2, r5, #1
 800496c:	2b39      	cmp	r3, #57	; 0x39
 800496e:	d04d      	beq.n	8004a0c <_dtoa_r+0xaec>
 8004970:	3301      	adds	r3, #1
 8004972:	e052      	b.n	8004a1a <_dtoa_r+0xafa>
 8004974:	9a07      	ldr	r2, [sp, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f102 0501 	add.w	r5, r2, #1
 800497c:	dd06      	ble.n	800498c <_dtoa_r+0xa6c>
 800497e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004982:	d0eb      	beq.n	800495c <_dtoa_r+0xa3c>
 8004984:	f108 0801 	add.w	r8, r8, #1
 8004988:	9b07      	ldr	r3, [sp, #28]
 800498a:	e7c4      	b.n	8004916 <_dtoa_r+0x9f6>
 800498c:	9b06      	ldr	r3, [sp, #24]
 800498e:	9a04      	ldr	r2, [sp, #16]
 8004990:	1aeb      	subs	r3, r5, r3
 8004992:	4293      	cmp	r3, r2
 8004994:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004998:	d021      	beq.n	80049de <_dtoa_r+0xabe>
 800499a:	4659      	mov	r1, fp
 800499c:	2300      	movs	r3, #0
 800499e:	220a      	movs	r2, #10
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fabe 	bl	8004f22 <__multadd>
 80049a6:	45b9      	cmp	r9, r7
 80049a8:	4683      	mov	fp, r0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	f04f 020a 	mov.w	r2, #10
 80049b2:	4649      	mov	r1, r9
 80049b4:	4620      	mov	r0, r4
 80049b6:	d105      	bne.n	80049c4 <_dtoa_r+0xaa4>
 80049b8:	f000 fab3 	bl	8004f22 <__multadd>
 80049bc:	4681      	mov	r9, r0
 80049be:	4607      	mov	r7, r0
 80049c0:	9507      	str	r5, [sp, #28]
 80049c2:	e778      	b.n	80048b6 <_dtoa_r+0x996>
 80049c4:	f000 faad 	bl	8004f22 <__multadd>
 80049c8:	4639      	mov	r1, r7
 80049ca:	4681      	mov	r9, r0
 80049cc:	2300      	movs	r3, #0
 80049ce:	220a      	movs	r2, #10
 80049d0:	4620      	mov	r0, r4
 80049d2:	f000 faa6 	bl	8004f22 <__multadd>
 80049d6:	4607      	mov	r7, r0
 80049d8:	e7f2      	b.n	80049c0 <_dtoa_r+0xaa0>
 80049da:	f04f 0900 	mov.w	r9, #0
 80049de:	4659      	mov	r1, fp
 80049e0:	2201      	movs	r2, #1
 80049e2:	4620      	mov	r0, r4
 80049e4:	f000 fc12 	bl	800520c <__lshift>
 80049e8:	4631      	mov	r1, r6
 80049ea:	4683      	mov	fp, r0
 80049ec:	f000 fc62 	bl	80052b4 <__mcmp>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	dcb8      	bgt.n	8004966 <_dtoa_r+0xa46>
 80049f4:	d102      	bne.n	80049fc <_dtoa_r+0xadc>
 80049f6:	f018 0f01 	tst.w	r8, #1
 80049fa:	d1b4      	bne.n	8004966 <_dtoa_r+0xa46>
 80049fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a00:	1e6a      	subs	r2, r5, #1
 8004a02:	2b30      	cmp	r3, #48	; 0x30
 8004a04:	f47f af0f 	bne.w	8004826 <_dtoa_r+0x906>
 8004a08:	4615      	mov	r5, r2
 8004a0a:	e7f7      	b.n	80049fc <_dtoa_r+0xadc>
 8004a0c:	9b06      	ldr	r3, [sp, #24]
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d105      	bne.n	8004a1e <_dtoa_r+0xafe>
 8004a12:	2331      	movs	r3, #49	; 0x31
 8004a14:	9a06      	ldr	r2, [sp, #24]
 8004a16:	f10a 0a01 	add.w	sl, sl, #1
 8004a1a:	7013      	strb	r3, [r2, #0]
 8004a1c:	e703      	b.n	8004826 <_dtoa_r+0x906>
 8004a1e:	4615      	mov	r5, r2
 8004a20:	e7a1      	b.n	8004966 <_dtoa_r+0xa46>
 8004a22:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <_dtoa_r+0xb60>)
 8004a24:	f7ff bae1 	b.w	8003fea <_dtoa_r+0xca>
 8004a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f47f aabb 	bne.w	8003fa6 <_dtoa_r+0x86>
 8004a30:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <_dtoa_r+0xb64>)
 8004a32:	f7ff bada 	b.w	8003fea <_dtoa_r+0xca>
 8004a36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f77f ae3f 	ble.w	80046bc <_dtoa_r+0x79c>
 8004a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a40:	9308      	str	r3, [sp, #32]
 8004a42:	e653      	b.n	80046ec <_dtoa_r+0x7cc>
 8004a44:	9b04      	ldr	r3, [sp, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dc03      	bgt.n	8004a52 <_dtoa_r+0xb32>
 8004a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f73f aed5 	bgt.w	80047fc <_dtoa_r+0x8dc>
 8004a52:	9d06      	ldr	r5, [sp, #24]
 8004a54:	4631      	mov	r1, r6
 8004a56:	4658      	mov	r0, fp
 8004a58:	f7ff f9d4 	bl	8003e04 <quorem>
 8004a5c:	9b06      	ldr	r3, [sp, #24]
 8004a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004a62:	f805 8b01 	strb.w	r8, [r5], #1
 8004a66:	9a04      	ldr	r2, [sp, #16]
 8004a68:	1aeb      	subs	r3, r5, r3
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	ddb5      	ble.n	80049da <_dtoa_r+0xaba>
 8004a6e:	4659      	mov	r1, fp
 8004a70:	2300      	movs	r3, #0
 8004a72:	220a      	movs	r2, #10
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 fa54 	bl	8004f22 <__multadd>
 8004a7a:	4683      	mov	fp, r0
 8004a7c:	e7ea      	b.n	8004a54 <_dtoa_r+0xb34>
 8004a7e:	bf00      	nop
 8004a80:	08009c05 	.word	0x08009c05
 8004a84:	08009c5e 	.word	0x08009c5e

08004a88 <__sflush_r>:
 8004a88:	898a      	ldrh	r2, [r1, #12]
 8004a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	4605      	mov	r5, r0
 8004a90:	0710      	lsls	r0, r2, #28
 8004a92:	460c      	mov	r4, r1
 8004a94:	d458      	bmi.n	8004b48 <__sflush_r+0xc0>
 8004a96:	684b      	ldr	r3, [r1, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dc05      	bgt.n	8004aa8 <__sflush_r+0x20>
 8004a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	dc02      	bgt.n	8004aa8 <__sflush_r+0x20>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	d0f9      	beq.n	8004aa2 <__sflush_r+0x1a>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ab4:	682f      	ldr	r7, [r5, #0]
 8004ab6:	6a21      	ldr	r1, [r4, #32]
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	d032      	beq.n	8004b22 <__sflush_r+0x9a>
 8004abc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	075a      	lsls	r2, r3, #29
 8004ac2:	d505      	bpl.n	8004ad0 <__sflush_r+0x48>
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	1ac0      	subs	r0, r0, r3
 8004ac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004aca:	b10b      	cbz	r3, 8004ad0 <__sflush_r+0x48>
 8004acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ace:	1ac0      	subs	r0, r0, r3
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad6:	6a21      	ldr	r1, [r4, #32]
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b0      	blx	r6
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	d106      	bne.n	8004af0 <__sflush_r+0x68>
 8004ae2:	6829      	ldr	r1, [r5, #0]
 8004ae4:	291d      	cmp	r1, #29
 8004ae6:	d848      	bhi.n	8004b7a <__sflush_r+0xf2>
 8004ae8:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <__sflush_r+0x108>)
 8004aea:	40ca      	lsrs	r2, r1
 8004aec:	07d6      	lsls	r6, r2, #31
 8004aee:	d544      	bpl.n	8004b7a <__sflush_r+0xf2>
 8004af0:	2200      	movs	r2, #0
 8004af2:	6062      	str	r2, [r4, #4]
 8004af4:	6922      	ldr	r2, [r4, #16]
 8004af6:	04d9      	lsls	r1, r3, #19
 8004af8:	6022      	str	r2, [r4, #0]
 8004afa:	d504      	bpl.n	8004b06 <__sflush_r+0x7e>
 8004afc:	1c42      	adds	r2, r0, #1
 8004afe:	d101      	bne.n	8004b04 <__sflush_r+0x7c>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b903      	cbnz	r3, 8004b06 <__sflush_r+0x7e>
 8004b04:	6560      	str	r0, [r4, #84]	; 0x54
 8004b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b08:	602f      	str	r7, [r5, #0]
 8004b0a:	2900      	cmp	r1, #0
 8004b0c:	d0c9      	beq.n	8004aa2 <__sflush_r+0x1a>
 8004b0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b12:	4299      	cmp	r1, r3
 8004b14:	d002      	beq.n	8004b1c <__sflush_r+0x94>
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 fca2 	bl	8005460 <_free_r>
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	6360      	str	r0, [r4, #52]	; 0x34
 8004b20:	e7c0      	b.n	8004aa4 <__sflush_r+0x1c>
 8004b22:	2301      	movs	r3, #1
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b0      	blx	r6
 8004b28:	1c41      	adds	r1, r0, #1
 8004b2a:	d1c8      	bne.n	8004abe <__sflush_r+0x36>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0c5      	beq.n	8004abe <__sflush_r+0x36>
 8004b32:	2b1d      	cmp	r3, #29
 8004b34:	d001      	beq.n	8004b3a <__sflush_r+0xb2>
 8004b36:	2b16      	cmp	r3, #22
 8004b38:	d101      	bne.n	8004b3e <__sflush_r+0xb6>
 8004b3a:	602f      	str	r7, [r5, #0]
 8004b3c:	e7b1      	b.n	8004aa2 <__sflush_r+0x1a>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	e7ad      	b.n	8004aa4 <__sflush_r+0x1c>
 8004b48:	690f      	ldr	r7, [r1, #16]
 8004b4a:	2f00      	cmp	r7, #0
 8004b4c:	d0a9      	beq.n	8004aa2 <__sflush_r+0x1a>
 8004b4e:	0793      	lsls	r3, r2, #30
 8004b50:	bf18      	it	ne
 8004b52:	2300      	movne	r3, #0
 8004b54:	680e      	ldr	r6, [r1, #0]
 8004b56:	bf08      	it	eq
 8004b58:	694b      	ldreq	r3, [r1, #20]
 8004b5a:	eba6 0807 	sub.w	r8, r6, r7
 8004b5e:	600f      	str	r7, [r1, #0]
 8004b60:	608b      	str	r3, [r1, #8]
 8004b62:	f1b8 0f00 	cmp.w	r8, #0
 8004b66:	dd9c      	ble.n	8004aa2 <__sflush_r+0x1a>
 8004b68:	4643      	mov	r3, r8
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	6a21      	ldr	r1, [r4, #32]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b72:	47b0      	blx	r6
 8004b74:	2800      	cmp	r0, #0
 8004b76:	dc06      	bgt.n	8004b86 <__sflush_r+0xfe>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b84:	e78e      	b.n	8004aa4 <__sflush_r+0x1c>
 8004b86:	4407      	add	r7, r0
 8004b88:	eba8 0800 	sub.w	r8, r8, r0
 8004b8c:	e7e9      	b.n	8004b62 <__sflush_r+0xda>
 8004b8e:	bf00      	nop
 8004b90:	20400001 	.word	0x20400001

08004b94 <_fflush_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	690b      	ldr	r3, [r1, #16]
 8004b98:	4605      	mov	r5, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	b1db      	cbz	r3, 8004bd6 <_fflush_r+0x42>
 8004b9e:	b118      	cbz	r0, 8004ba8 <_fflush_r+0x14>
 8004ba0:	6983      	ldr	r3, [r0, #24]
 8004ba2:	b90b      	cbnz	r3, 8004ba8 <_fflush_r+0x14>
 8004ba4:	f000 f860 	bl	8004c68 <__sinit>
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <_fflush_r+0x48>)
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d109      	bne.n	8004bc2 <_fflush_r+0x2e>
 8004bae:	686c      	ldr	r4, [r5, #4]
 8004bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb4:	b17b      	cbz	r3, 8004bd6 <_fflush_r+0x42>
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bbe:	f7ff bf63 	b.w	8004a88 <__sflush_r>
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <_fflush_r+0x4c>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	d101      	bne.n	8004bcc <_fflush_r+0x38>
 8004bc8:	68ac      	ldr	r4, [r5, #8]
 8004bca:	e7f1      	b.n	8004bb0 <_fflush_r+0x1c>
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <_fflush_r+0x50>)
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	bf08      	it	eq
 8004bd2:	68ec      	ldreq	r4, [r5, #12]
 8004bd4:	e7ec      	b.n	8004bb0 <_fflush_r+0x1c>
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	bd38      	pop	{r3, r4, r5, pc}
 8004bda:	bf00      	nop
 8004bdc:	08009c8c 	.word	0x08009c8c
 8004be0:	08009cac 	.word	0x08009cac
 8004be4:	08009c6c 	.word	0x08009c6c

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	6083      	str	r3, [r0, #8]
 8004bf4:	8181      	strh	r1, [r0, #12]
 8004bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bf8:	81c2      	strh	r2, [r0, #14]
 8004bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	; 0x5c
 8004c06:	f7fe fb35 	bl	8003274 <memset>
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <std+0x38>)
 8004c0c:	6224      	str	r4, [r4, #32]
 8004c0e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <std+0x3c>)
 8004c12:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <std+0x40>)
 8004c16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <std+0x44>)
 8004c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	08005aed 	.word	0x08005aed
 8004c24:	08005b0f 	.word	0x08005b0f
 8004c28:	08005b47 	.word	0x08005b47
 8004c2c:	08005b6b 	.word	0x08005b6b

08004c30 <_cleanup_r>:
 8004c30:	4901      	ldr	r1, [pc, #4]	; (8004c38 <_cleanup_r+0x8>)
 8004c32:	f000 b885 	b.w	8004d40 <_fwalk_reent>
 8004c36:	bf00      	nop
 8004c38:	08004b95 	.word	0x08004b95

08004c3c <__sfmoreglue>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	2568      	movs	r5, #104	; 0x68
 8004c40:	1e4a      	subs	r2, r1, #1
 8004c42:	4355      	muls	r5, r2
 8004c44:	460e      	mov	r6, r1
 8004c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c4a:	f000 fc55 	bl	80054f8 <_malloc_r>
 8004c4e:	4604      	mov	r4, r0
 8004c50:	b140      	cbz	r0, 8004c64 <__sfmoreglue+0x28>
 8004c52:	2100      	movs	r1, #0
 8004c54:	e9c0 1600 	strd	r1, r6, [r0]
 8004c58:	300c      	adds	r0, #12
 8004c5a:	60a0      	str	r0, [r4, #8]
 8004c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c60:	f7fe fb08 	bl	8003274 <memset>
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd70      	pop	{r4, r5, r6, pc}

08004c68 <__sinit>:
 8004c68:	6983      	ldr	r3, [r0, #24]
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	bb33      	cbnz	r3, 8004cbe <__sinit+0x56>
 8004c70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c74:	6503      	str	r3, [r0, #80]	; 0x50
 8004c76:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <__sinit+0x58>)
 8004c78:	4a12      	ldr	r2, [pc, #72]	; (8004cc4 <__sinit+0x5c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6282      	str	r2, [r0, #40]	; 0x28
 8004c7e:	4298      	cmp	r0, r3
 8004c80:	bf04      	itt	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	6183      	streq	r3, [r0, #24]
 8004c86:	f000 f81f 	bl	8004cc8 <__sfp>
 8004c8a:	6060      	str	r0, [r4, #4]
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 f81b 	bl	8004cc8 <__sfp>
 8004c92:	60a0      	str	r0, [r4, #8]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 f817 	bl	8004cc8 <__sfp>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60e0      	str	r0, [r4, #12]
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	6860      	ldr	r0, [r4, #4]
 8004ca2:	f7ff ffa1 	bl	8004be8 <std>
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2109      	movs	r1, #9
 8004caa:	68a0      	ldr	r0, [r4, #8]
 8004cac:	f7ff ff9c 	bl	8004be8 <std>
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	2112      	movs	r1, #18
 8004cb4:	68e0      	ldr	r0, [r4, #12]
 8004cb6:	f7ff ff97 	bl	8004be8 <std>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61a3      	str	r3, [r4, #24]
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	08009c28 	.word	0x08009c28
 8004cc4:	08004c31 	.word	0x08004c31

08004cc8 <__sfp>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <__sfp+0x70>)
 8004ccc:	4607      	mov	r7, r0
 8004cce:	681e      	ldr	r6, [r3, #0]
 8004cd0:	69b3      	ldr	r3, [r6, #24]
 8004cd2:	b913      	cbnz	r3, 8004cda <__sfp+0x12>
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff ffc7 	bl	8004c68 <__sinit>
 8004cda:	3648      	adds	r6, #72	; 0x48
 8004cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	d503      	bpl.n	8004cec <__sfp+0x24>
 8004ce4:	6833      	ldr	r3, [r6, #0]
 8004ce6:	b133      	cbz	r3, 8004cf6 <__sfp+0x2e>
 8004ce8:	6836      	ldr	r6, [r6, #0]
 8004cea:	e7f7      	b.n	8004cdc <__sfp+0x14>
 8004cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cf0:	b16d      	cbz	r5, 8004d0e <__sfp+0x46>
 8004cf2:	3468      	adds	r4, #104	; 0x68
 8004cf4:	e7f4      	b.n	8004ce0 <__sfp+0x18>
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f7ff ff9f 	bl	8004c3c <__sfmoreglue>
 8004cfe:	6030      	str	r0, [r6, #0]
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d1f1      	bne.n	8004ce8 <__sfp+0x20>
 8004d04:	230c      	movs	r3, #12
 8004d06:	4604      	mov	r4, r0
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <__sfp+0x74>)
 8004d10:	6665      	str	r5, [r4, #100]	; 0x64
 8004d12:	e9c4 5500 	strd	r5, r5, [r4]
 8004d16:	60a5      	str	r5, [r4, #8]
 8004d18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d20:	2208      	movs	r2, #8
 8004d22:	4629      	mov	r1, r5
 8004d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d28:	f7fe faa4 	bl	8003274 <memset>
 8004d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d34:	e7e9      	b.n	8004d0a <__sfp+0x42>
 8004d36:	bf00      	nop
 8004d38:	08009c28 	.word	0x08009c28
 8004d3c:	ffff0001 	.word	0xffff0001

08004d40 <_fwalk_reent>:
 8004d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d44:	4680      	mov	r8, r0
 8004d46:	4689      	mov	r9, r1
 8004d48:	2600      	movs	r6, #0
 8004d4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d4e:	b914      	cbnz	r4, 8004d56 <_fwalk_reent+0x16>
 8004d50:	4630      	mov	r0, r6
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004d5a:	3f01      	subs	r7, #1
 8004d5c:	d501      	bpl.n	8004d62 <_fwalk_reent+0x22>
 8004d5e:	6824      	ldr	r4, [r4, #0]
 8004d60:	e7f5      	b.n	8004d4e <_fwalk_reent+0xe>
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d907      	bls.n	8004d78 <_fwalk_reent+0x38>
 8004d68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	d003      	beq.n	8004d78 <_fwalk_reent+0x38>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4640      	mov	r0, r8
 8004d74:	47c8      	blx	r9
 8004d76:	4306      	orrs	r6, r0
 8004d78:	3568      	adds	r5, #104	; 0x68
 8004d7a:	e7ee      	b.n	8004d5a <_fwalk_reent+0x1a>

08004d7c <_localeconv_r>:
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <_localeconv_r+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a18      	ldr	r0, [r3, #32]
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <_localeconv_r+0x18>)
 8004d84:	2800      	cmp	r0, #0
 8004d86:	bf08      	it	eq
 8004d88:	4618      	moveq	r0, r3
 8004d8a:	30f0      	adds	r0, #240	; 0xf0
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000002c 	.word	0x2000002c
 8004d94:	20000090 	.word	0x20000090

08004d98 <__swhatbuf_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	b096      	sub	sp, #88	; 0x58
 8004da2:	2900      	cmp	r1, #0
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	da07      	bge.n	8004dba <__swhatbuf_r+0x22>
 8004daa:	2300      	movs	r3, #0
 8004dac:	602b      	str	r3, [r5, #0]
 8004dae:	89b3      	ldrh	r3, [r6, #12]
 8004db0:	061a      	lsls	r2, r3, #24
 8004db2:	d410      	bmi.n	8004dd6 <__swhatbuf_r+0x3e>
 8004db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db8:	e00e      	b.n	8004dd8 <__swhatbuf_r+0x40>
 8004dba:	466a      	mov	r2, sp
 8004dbc:	f000 fefc 	bl	8005bb8 <_fstat_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	dbf2      	blt.n	8004daa <__swhatbuf_r+0x12>
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dce:	425a      	negs	r2, r3
 8004dd0:	415a      	adcs	r2, r3
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	e7ee      	b.n	8004db4 <__swhatbuf_r+0x1c>
 8004dd6:	2340      	movs	r3, #64	; 0x40
 8004dd8:	2000      	movs	r0, #0
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	b016      	add	sp, #88	; 0x58
 8004dde:	bd70      	pop	{r4, r5, r6, pc}

08004de0 <__smakebuf_r>:
 8004de0:	898b      	ldrh	r3, [r1, #12]
 8004de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de4:	079d      	lsls	r5, r3, #30
 8004de6:	4606      	mov	r6, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	d507      	bpl.n	8004dfc <__smakebuf_r+0x1c>
 8004dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	6123      	str	r3, [r4, #16]
 8004df4:	2301      	movs	r3, #1
 8004df6:	6163      	str	r3, [r4, #20]
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	ab01      	add	r3, sp, #4
 8004dfe:	466a      	mov	r2, sp
 8004e00:	f7ff ffca 	bl	8004d98 <__swhatbuf_r>
 8004e04:	9900      	ldr	r1, [sp, #0]
 8004e06:	4605      	mov	r5, r0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f000 fb75 	bl	80054f8 <_malloc_r>
 8004e0e:	b948      	cbnz	r0, 8004e24 <__smakebuf_r+0x44>
 8004e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e14:	059a      	lsls	r2, r3, #22
 8004e16:	d4ef      	bmi.n	8004df8 <__smakebuf_r+0x18>
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7e3      	b.n	8004dec <__smakebuf_r+0xc>
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <__smakebuf_r+0x7c>)
 8004e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	6020      	str	r0, [r4, #0]
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	81a3      	strh	r3, [r4, #12]
 8004e32:	9b00      	ldr	r3, [sp, #0]
 8004e34:	6120      	str	r0, [r4, #16]
 8004e36:	6163      	str	r3, [r4, #20]
 8004e38:	9b01      	ldr	r3, [sp, #4]
 8004e3a:	b15b      	cbz	r3, 8004e54 <__smakebuf_r+0x74>
 8004e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 fecb 	bl	8005bdc <_isatty_r>
 8004e46:	b128      	cbz	r0, 8004e54 <__smakebuf_r+0x74>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	431d      	orrs	r5, r3
 8004e58:	81a5      	strh	r5, [r4, #12]
 8004e5a:	e7cd      	b.n	8004df8 <__smakebuf_r+0x18>
 8004e5c:	08004c31 	.word	0x08004c31

08004e60 <malloc>:
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <malloc+0xc>)
 8004e62:	4601      	mov	r1, r0
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f000 bb47 	b.w	80054f8 <_malloc_r>
 8004e6a:	bf00      	nop
 8004e6c:	2000002c 	.word	0x2000002c

08004e70 <memchr>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	b2c9      	uxtb	r1, r1
 8004e74:	4402      	add	r2, r0
 8004e76:	4290      	cmp	r0, r2
 8004e78:	4603      	mov	r3, r0
 8004e7a:	d101      	bne.n	8004e80 <memchr+0x10>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e003      	b.n	8004e88 <memchr+0x18>
 8004e80:	781c      	ldrb	r4, [r3, #0]
 8004e82:	3001      	adds	r0, #1
 8004e84:	428c      	cmp	r4, r1
 8004e86:	d1f6      	bne.n	8004e76 <memchr+0x6>
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd10      	pop	{r4, pc}

08004e8c <_Balloc>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e90:	4604      	mov	r4, r0
 8004e92:	460e      	mov	r6, r1
 8004e94:	b93d      	cbnz	r5, 8004ea6 <_Balloc+0x1a>
 8004e96:	2010      	movs	r0, #16
 8004e98:	f7ff ffe2 	bl	8004e60 <malloc>
 8004e9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004e9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ea2:	6005      	str	r5, [r0, #0]
 8004ea4:	60c5      	str	r5, [r0, #12]
 8004ea6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004ea8:	68eb      	ldr	r3, [r5, #12]
 8004eaa:	b183      	cbz	r3, 8004ece <_Balloc+0x42>
 8004eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004eb4:	b9b8      	cbnz	r0, 8004ee6 <_Balloc+0x5a>
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	fa01 f506 	lsl.w	r5, r1, r6
 8004ebc:	1d6a      	adds	r2, r5, #5
 8004ebe:	0092      	lsls	r2, r2, #2
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 fabe 	bl	8005442 <_calloc_r>
 8004ec6:	b160      	cbz	r0, 8004ee2 <_Balloc+0x56>
 8004ec8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004ecc:	e00e      	b.n	8004eec <_Balloc+0x60>
 8004ece:	2221      	movs	r2, #33	; 0x21
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 fab5 	bl	8005442 <_calloc_r>
 8004ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eda:	60e8      	str	r0, [r5, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e4      	bne.n	8004eac <_Balloc+0x20>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
 8004ee6:	6802      	ldr	r2, [r0, #0]
 8004ee8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004eec:	2300      	movs	r3, #0
 8004eee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ef2:	e7f7      	b.n	8004ee4 <_Balloc+0x58>

08004ef4 <_Bfree>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ef8:	4606      	mov	r6, r0
 8004efa:	460d      	mov	r5, r1
 8004efc:	b93c      	cbnz	r4, 8004f0e <_Bfree+0x1a>
 8004efe:	2010      	movs	r0, #16
 8004f00:	f7ff ffae 	bl	8004e60 <malloc>
 8004f04:	6270      	str	r0, [r6, #36]	; 0x24
 8004f06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f0a:	6004      	str	r4, [r0, #0]
 8004f0c:	60c4      	str	r4, [r0, #12]
 8004f0e:	b13d      	cbz	r5, 8004f20 <_Bfree+0x2c>
 8004f10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004f12:	686a      	ldr	r2, [r5, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f1a:	6029      	str	r1, [r5, #0]
 8004f1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004f20:	bd70      	pop	{r4, r5, r6, pc}

08004f22 <__multadd>:
 8004f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	461f      	mov	r7, r3
 8004f28:	4606      	mov	r6, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	690d      	ldr	r5, [r1, #16]
 8004f30:	f101 0c14 	add.w	ip, r1, #20
 8004f34:	f8dc 0000 	ldr.w	r0, [ip]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b281      	uxth	r1, r0
 8004f3c:	fb02 7101 	mla	r1, r2, r1, r7
 8004f40:	0c00      	lsrs	r0, r0, #16
 8004f42:	0c0f      	lsrs	r7, r1, #16
 8004f44:	fb02 7000 	mla	r0, r2, r0, r7
 8004f48:	b289      	uxth	r1, r1
 8004f4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004f4e:	429d      	cmp	r5, r3
 8004f50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004f54:	f84c 1b04 	str.w	r1, [ip], #4
 8004f58:	dcec      	bgt.n	8004f34 <__multadd+0x12>
 8004f5a:	b1d7      	cbz	r7, 8004f92 <__multadd+0x70>
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	dc12      	bgt.n	8004f88 <__multadd+0x66>
 8004f62:	6861      	ldr	r1, [r4, #4]
 8004f64:	4630      	mov	r0, r6
 8004f66:	3101      	adds	r1, #1
 8004f68:	f7ff ff90 	bl	8004e8c <_Balloc>
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	6922      	ldr	r2, [r4, #16]
 8004f70:	f104 010c 	add.w	r1, r4, #12
 8004f74:	3202      	adds	r2, #2
 8004f76:	0092      	lsls	r2, r2, #2
 8004f78:	300c      	adds	r0, #12
 8004f7a:	f7fe f957 	bl	800322c <memcpy>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4630      	mov	r0, r6
 8004f82:	f7ff ffb7 	bl	8004ef4 <_Bfree>
 8004f86:	4644      	mov	r4, r8
 8004f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	615f      	str	r7, [r3, #20]
 8004f90:	6125      	str	r5, [r4, #16]
 8004f92:	4620      	mov	r0, r4
 8004f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f98 <__hi0bits>:
 8004f98:	0c02      	lsrs	r2, r0, #16
 8004f9a:	0412      	lsls	r2, r2, #16
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	b9b2      	cbnz	r2, 8004fce <__hi0bits+0x36>
 8004fa0:	0403      	lsls	r3, r0, #16
 8004fa2:	2010      	movs	r0, #16
 8004fa4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004fa8:	bf04      	itt	eq
 8004faa:	021b      	lsleq	r3, r3, #8
 8004fac:	3008      	addeq	r0, #8
 8004fae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004fb2:	bf04      	itt	eq
 8004fb4:	011b      	lsleq	r3, r3, #4
 8004fb6:	3004      	addeq	r0, #4
 8004fb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004fbc:	bf04      	itt	eq
 8004fbe:	009b      	lsleq	r3, r3, #2
 8004fc0:	3002      	addeq	r0, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	db06      	blt.n	8004fd4 <__hi0bits+0x3c>
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	d503      	bpl.n	8004fd2 <__hi0bits+0x3a>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	4770      	bx	lr
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e7e8      	b.n	8004fa4 <__hi0bits+0xc>
 8004fd2:	2020      	movs	r0, #32
 8004fd4:	4770      	bx	lr

08004fd6 <__lo0bits>:
 8004fd6:	6803      	ldr	r3, [r0, #0]
 8004fd8:	4601      	mov	r1, r0
 8004fda:	f013 0207 	ands.w	r2, r3, #7
 8004fde:	d00b      	beq.n	8004ff8 <__lo0bits+0x22>
 8004fe0:	07da      	lsls	r2, r3, #31
 8004fe2:	d423      	bmi.n	800502c <__lo0bits+0x56>
 8004fe4:	0798      	lsls	r0, r3, #30
 8004fe6:	bf49      	itett	mi
 8004fe8:	085b      	lsrmi	r3, r3, #1
 8004fea:	089b      	lsrpl	r3, r3, #2
 8004fec:	2001      	movmi	r0, #1
 8004fee:	600b      	strmi	r3, [r1, #0]
 8004ff0:	bf5c      	itt	pl
 8004ff2:	600b      	strpl	r3, [r1, #0]
 8004ff4:	2002      	movpl	r0, #2
 8004ff6:	4770      	bx	lr
 8004ff8:	b298      	uxth	r0, r3
 8004ffa:	b9a8      	cbnz	r0, 8005028 <__lo0bits+0x52>
 8004ffc:	2010      	movs	r0, #16
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005004:	bf04      	itt	eq
 8005006:	0a1b      	lsreq	r3, r3, #8
 8005008:	3008      	addeq	r0, #8
 800500a:	071a      	lsls	r2, r3, #28
 800500c:	bf04      	itt	eq
 800500e:	091b      	lsreq	r3, r3, #4
 8005010:	3004      	addeq	r0, #4
 8005012:	079a      	lsls	r2, r3, #30
 8005014:	bf04      	itt	eq
 8005016:	089b      	lsreq	r3, r3, #2
 8005018:	3002      	addeq	r0, #2
 800501a:	07da      	lsls	r2, r3, #31
 800501c:	d402      	bmi.n	8005024 <__lo0bits+0x4e>
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	d006      	beq.n	8005030 <__lo0bits+0x5a>
 8005022:	3001      	adds	r0, #1
 8005024:	600b      	str	r3, [r1, #0]
 8005026:	4770      	bx	lr
 8005028:	4610      	mov	r0, r2
 800502a:	e7e9      	b.n	8005000 <__lo0bits+0x2a>
 800502c:	2000      	movs	r0, #0
 800502e:	4770      	bx	lr
 8005030:	2020      	movs	r0, #32
 8005032:	4770      	bx	lr

08005034 <__i2b>:
 8005034:	b510      	push	{r4, lr}
 8005036:	460c      	mov	r4, r1
 8005038:	2101      	movs	r1, #1
 800503a:	f7ff ff27 	bl	8004e8c <_Balloc>
 800503e:	2201      	movs	r2, #1
 8005040:	6144      	str	r4, [r0, #20]
 8005042:	6102      	str	r2, [r0, #16]
 8005044:	bd10      	pop	{r4, pc}

08005046 <__multiply>:
 8005046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	4614      	mov	r4, r2
 800504c:	690a      	ldr	r2, [r1, #16]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	4688      	mov	r8, r1
 8005052:	429a      	cmp	r2, r3
 8005054:	bfbe      	ittt	lt
 8005056:	460b      	movlt	r3, r1
 8005058:	46a0      	movlt	r8, r4
 800505a:	461c      	movlt	r4, r3
 800505c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005060:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005064:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005068:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800506c:	eb07 0609 	add.w	r6, r7, r9
 8005070:	42b3      	cmp	r3, r6
 8005072:	bfb8      	it	lt
 8005074:	3101      	addlt	r1, #1
 8005076:	f7ff ff09 	bl	8004e8c <_Balloc>
 800507a:	f100 0514 	add.w	r5, r0, #20
 800507e:	462b      	mov	r3, r5
 8005080:	2200      	movs	r2, #0
 8005082:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005086:	4573      	cmp	r3, lr
 8005088:	d316      	bcc.n	80050b8 <__multiply+0x72>
 800508a:	f104 0214 	add.w	r2, r4, #20
 800508e:	f108 0114 	add.w	r1, r8, #20
 8005092:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005096:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	9b00      	ldr	r3, [sp, #0]
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d80c      	bhi.n	80050be <__multiply+0x78>
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	dd03      	ble.n	80050b0 <__multiply+0x6a>
 80050a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05d      	beq.n	800516c <__multiply+0x126>
 80050b0:	6106      	str	r6, [r0, #16]
 80050b2:	b003      	add	sp, #12
 80050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b8:	f843 2b04 	str.w	r2, [r3], #4
 80050bc:	e7e3      	b.n	8005086 <__multiply+0x40>
 80050be:	f8b2 b000 	ldrh.w	fp, [r2]
 80050c2:	f1bb 0f00 	cmp.w	fp, #0
 80050c6:	d023      	beq.n	8005110 <__multiply+0xca>
 80050c8:	4689      	mov	r9, r1
 80050ca:	46ac      	mov	ip, r5
 80050cc:	f04f 0800 	mov.w	r8, #0
 80050d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80050d4:	f8dc a000 	ldr.w	sl, [ip]
 80050d8:	b2a3      	uxth	r3, r4
 80050da:	fa1f fa8a 	uxth.w	sl, sl
 80050de:	fb0b a303 	mla	r3, fp, r3, sl
 80050e2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80050e6:	f8dc 4000 	ldr.w	r4, [ip]
 80050ea:	4443      	add	r3, r8
 80050ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80050f0:	fb0b 840a 	mla	r4, fp, sl, r8
 80050f4:	46e2      	mov	sl, ip
 80050f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005100:	454f      	cmp	r7, r9
 8005102:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005106:	f84a 3b04 	str.w	r3, [sl], #4
 800510a:	d82b      	bhi.n	8005164 <__multiply+0x11e>
 800510c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	3204      	adds	r2, #4
 8005114:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005118:	f1ba 0f00 	cmp.w	sl, #0
 800511c:	d020      	beq.n	8005160 <__multiply+0x11a>
 800511e:	4689      	mov	r9, r1
 8005120:	46a8      	mov	r8, r5
 8005122:	f04f 0b00 	mov.w	fp, #0
 8005126:	682b      	ldr	r3, [r5, #0]
 8005128:	f8b9 c000 	ldrh.w	ip, [r9]
 800512c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005130:	b29b      	uxth	r3, r3
 8005132:	fb0a 440c 	mla	r4, sl, ip, r4
 8005136:	46c4      	mov	ip, r8
 8005138:	445c      	add	r4, fp
 800513a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800513e:	f84c 3b04 	str.w	r3, [ip], #4
 8005142:	f859 3b04 	ldr.w	r3, [r9], #4
 8005146:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800514a:	0c1b      	lsrs	r3, r3, #16
 800514c:	fb0a b303 	mla	r3, sl, r3, fp
 8005150:	454f      	cmp	r7, r9
 8005152:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005156:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800515a:	d805      	bhi.n	8005168 <__multiply+0x122>
 800515c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005160:	3504      	adds	r5, #4
 8005162:	e79b      	b.n	800509c <__multiply+0x56>
 8005164:	46d4      	mov	ip, sl
 8005166:	e7b3      	b.n	80050d0 <__multiply+0x8a>
 8005168:	46e0      	mov	r8, ip
 800516a:	e7dd      	b.n	8005128 <__multiply+0xe2>
 800516c:	3e01      	subs	r6, #1
 800516e:	e799      	b.n	80050a4 <__multiply+0x5e>

08005170 <__pow5mult>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	4615      	mov	r5, r2
 8005176:	f012 0203 	ands.w	r2, r2, #3
 800517a:	4606      	mov	r6, r0
 800517c:	460f      	mov	r7, r1
 800517e:	d007      	beq.n	8005190 <__pow5mult+0x20>
 8005180:	4c21      	ldr	r4, [pc, #132]	; (8005208 <__pow5mult+0x98>)
 8005182:	3a01      	subs	r2, #1
 8005184:	2300      	movs	r3, #0
 8005186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800518a:	f7ff feca 	bl	8004f22 <__multadd>
 800518e:	4607      	mov	r7, r0
 8005190:	10ad      	asrs	r5, r5, #2
 8005192:	d035      	beq.n	8005200 <__pow5mult+0x90>
 8005194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005196:	b93c      	cbnz	r4, 80051a8 <__pow5mult+0x38>
 8005198:	2010      	movs	r0, #16
 800519a:	f7ff fe61 	bl	8004e60 <malloc>
 800519e:	6270      	str	r0, [r6, #36]	; 0x24
 80051a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051a4:	6004      	str	r4, [r0, #0]
 80051a6:	60c4      	str	r4, [r0, #12]
 80051a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051b0:	b94c      	cbnz	r4, 80051c6 <__pow5mult+0x56>
 80051b2:	f240 2171 	movw	r1, #625	; 0x271
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff ff3c 	bl	8005034 <__i2b>
 80051bc:	2300      	movs	r3, #0
 80051be:	4604      	mov	r4, r0
 80051c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80051c4:	6003      	str	r3, [r0, #0]
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	07eb      	lsls	r3, r5, #31
 80051cc:	d50a      	bpl.n	80051e4 <__pow5mult+0x74>
 80051ce:	4639      	mov	r1, r7
 80051d0:	4622      	mov	r2, r4
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ff37 	bl	8005046 <__multiply>
 80051d8:	4681      	mov	r9, r0
 80051da:	4639      	mov	r1, r7
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fe89 	bl	8004ef4 <_Bfree>
 80051e2:	464f      	mov	r7, r9
 80051e4:	106d      	asrs	r5, r5, #1
 80051e6:	d00b      	beq.n	8005200 <__pow5mult+0x90>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	b938      	cbnz	r0, 80051fc <__pow5mult+0x8c>
 80051ec:	4622      	mov	r2, r4
 80051ee:	4621      	mov	r1, r4
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff ff28 	bl	8005046 <__multiply>
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	f8c0 8000 	str.w	r8, [r0]
 80051fc:	4604      	mov	r4, r0
 80051fe:	e7e4      	b.n	80051ca <__pow5mult+0x5a>
 8005200:	4638      	mov	r0, r7
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	bf00      	nop
 8005208:	08009dc0 	.word	0x08009dc0

0800520c <__lshift>:
 800520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	460c      	mov	r4, r1
 8005212:	4607      	mov	r7, r0
 8005214:	4616      	mov	r6, r2
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800521c:	eb0a 0903 	add.w	r9, sl, r3
 8005220:	6849      	ldr	r1, [r1, #4]
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	f109 0501 	add.w	r5, r9, #1
 8005228:	42ab      	cmp	r3, r5
 800522a:	db32      	blt.n	8005292 <__lshift+0x86>
 800522c:	4638      	mov	r0, r7
 800522e:	f7ff fe2d 	bl	8004e8c <_Balloc>
 8005232:	2300      	movs	r3, #0
 8005234:	4680      	mov	r8, r0
 8005236:	461a      	mov	r2, r3
 8005238:	f100 0114 	add.w	r1, r0, #20
 800523c:	4553      	cmp	r3, sl
 800523e:	db2b      	blt.n	8005298 <__lshift+0x8c>
 8005240:	6920      	ldr	r0, [r4, #16]
 8005242:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005246:	f104 0314 	add.w	r3, r4, #20
 800524a:	f016 021f 	ands.w	r2, r6, #31
 800524e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005252:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005256:	d025      	beq.n	80052a4 <__lshift+0x98>
 8005258:	2000      	movs	r0, #0
 800525a:	f1c2 0e20 	rsb	lr, r2, #32
 800525e:	468a      	mov	sl, r1
 8005260:	681e      	ldr	r6, [r3, #0]
 8005262:	4096      	lsls	r6, r2
 8005264:	4330      	orrs	r0, r6
 8005266:	f84a 0b04 	str.w	r0, [sl], #4
 800526a:	f853 0b04 	ldr.w	r0, [r3], #4
 800526e:	459c      	cmp	ip, r3
 8005270:	fa20 f00e 	lsr.w	r0, r0, lr
 8005274:	d814      	bhi.n	80052a0 <__lshift+0x94>
 8005276:	6048      	str	r0, [r1, #4]
 8005278:	b108      	cbz	r0, 800527e <__lshift+0x72>
 800527a:	f109 0502 	add.w	r5, r9, #2
 800527e:	3d01      	subs	r5, #1
 8005280:	4638      	mov	r0, r7
 8005282:	f8c8 5010 	str.w	r5, [r8, #16]
 8005286:	4621      	mov	r1, r4
 8005288:	f7ff fe34 	bl	8004ef4 <_Bfree>
 800528c:	4640      	mov	r0, r8
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	3101      	adds	r1, #1
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	e7c7      	b.n	8005228 <__lshift+0x1c>
 8005298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800529c:	3301      	adds	r3, #1
 800529e:	e7cd      	b.n	800523c <__lshift+0x30>
 80052a0:	4651      	mov	r1, sl
 80052a2:	e7dc      	b.n	800525e <__lshift+0x52>
 80052a4:	3904      	subs	r1, #4
 80052a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80052aa:	459c      	cmp	ip, r3
 80052ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80052b0:	d8f9      	bhi.n	80052a6 <__lshift+0x9a>
 80052b2:	e7e4      	b.n	800527e <__lshift+0x72>

080052b4 <__mcmp>:
 80052b4:	6903      	ldr	r3, [r0, #16]
 80052b6:	690a      	ldr	r2, [r1, #16]
 80052b8:	b530      	push	{r4, r5, lr}
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	d10c      	bne.n	80052d8 <__mcmp+0x24>
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	3014      	adds	r0, #20
 80052c2:	3114      	adds	r1, #20
 80052c4:	1884      	adds	r4, r0, r2
 80052c6:	4411      	add	r1, r2
 80052c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052d0:	4295      	cmp	r5, r2
 80052d2:	d003      	beq.n	80052dc <__mcmp+0x28>
 80052d4:	d305      	bcc.n	80052e2 <__mcmp+0x2e>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4618      	mov	r0, r3
 80052da:	bd30      	pop	{r4, r5, pc}
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d3f3      	bcc.n	80052c8 <__mcmp+0x14>
 80052e0:	e7fa      	b.n	80052d8 <__mcmp+0x24>
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052e6:	e7f7      	b.n	80052d8 <__mcmp+0x24>

080052e8 <__mdiff>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	460d      	mov	r5, r1
 80052ee:	4607      	mov	r7, r0
 80052f0:	4611      	mov	r1, r2
 80052f2:	4628      	mov	r0, r5
 80052f4:	4614      	mov	r4, r2
 80052f6:	f7ff ffdd 	bl	80052b4 <__mcmp>
 80052fa:	1e06      	subs	r6, r0, #0
 80052fc:	d108      	bne.n	8005310 <__mdiff+0x28>
 80052fe:	4631      	mov	r1, r6
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff fdc3 	bl	8004e8c <_Balloc>
 8005306:	2301      	movs	r3, #1
 8005308:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	bfa4      	itt	ge
 8005312:	4623      	movge	r3, r4
 8005314:	462c      	movge	r4, r5
 8005316:	4638      	mov	r0, r7
 8005318:	6861      	ldr	r1, [r4, #4]
 800531a:	bfa6      	itte	ge
 800531c:	461d      	movge	r5, r3
 800531e:	2600      	movge	r6, #0
 8005320:	2601      	movlt	r6, #1
 8005322:	f7ff fdb3 	bl	8004e8c <_Balloc>
 8005326:	f04f 0e00 	mov.w	lr, #0
 800532a:	60c6      	str	r6, [r0, #12]
 800532c:	692b      	ldr	r3, [r5, #16]
 800532e:	6926      	ldr	r6, [r4, #16]
 8005330:	f104 0214 	add.w	r2, r4, #20
 8005334:	f105 0914 	add.w	r9, r5, #20
 8005338:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800533c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005340:	f100 0114 	add.w	r1, r0, #20
 8005344:	f852 ab04 	ldr.w	sl, [r2], #4
 8005348:	f859 5b04 	ldr.w	r5, [r9], #4
 800534c:	fa1f f38a 	uxth.w	r3, sl
 8005350:	4473      	add	r3, lr
 8005352:	b2ac      	uxth	r4, r5
 8005354:	1b1b      	subs	r3, r3, r4
 8005356:	0c2c      	lsrs	r4, r5, #16
 8005358:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800535c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005360:	b29b      	uxth	r3, r3
 8005362:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005366:	45c8      	cmp	r8, r9
 8005368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800536c:	4694      	mov	ip, r2
 800536e:	f841 4b04 	str.w	r4, [r1], #4
 8005372:	d8e7      	bhi.n	8005344 <__mdiff+0x5c>
 8005374:	45bc      	cmp	ip, r7
 8005376:	d304      	bcc.n	8005382 <__mdiff+0x9a>
 8005378:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800537c:	b183      	cbz	r3, 80053a0 <__mdiff+0xb8>
 800537e:	6106      	str	r6, [r0, #16]
 8005380:	e7c4      	b.n	800530c <__mdiff+0x24>
 8005382:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005386:	b2a2      	uxth	r2, r4
 8005388:	4472      	add	r2, lr
 800538a:	1413      	asrs	r3, r2, #16
 800538c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005390:	b292      	uxth	r2, r2
 8005392:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005396:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800539a:	f841 2b04 	str.w	r2, [r1], #4
 800539e:	e7e9      	b.n	8005374 <__mdiff+0x8c>
 80053a0:	3e01      	subs	r6, #1
 80053a2:	e7e9      	b.n	8005378 <__mdiff+0x90>

080053a4 <__d2b>:
 80053a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053a8:	461c      	mov	r4, r3
 80053aa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80053ae:	2101      	movs	r1, #1
 80053b0:	4690      	mov	r8, r2
 80053b2:	f7ff fd6b 	bl	8004e8c <_Balloc>
 80053b6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80053ba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80053be:	4607      	mov	r7, r0
 80053c0:	bb34      	cbnz	r4, 8005410 <__d2b+0x6c>
 80053c2:	9201      	str	r2, [sp, #4]
 80053c4:	f1b8 0200 	subs.w	r2, r8, #0
 80053c8:	d027      	beq.n	800541a <__d2b+0x76>
 80053ca:	a802      	add	r0, sp, #8
 80053cc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80053d0:	f7ff fe01 	bl	8004fd6 <__lo0bits>
 80053d4:	9900      	ldr	r1, [sp, #0]
 80053d6:	b1f0      	cbz	r0, 8005416 <__d2b+0x72>
 80053d8:	9a01      	ldr	r2, [sp, #4]
 80053da:	f1c0 0320 	rsb	r3, r0, #32
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	430b      	orrs	r3, r1
 80053e4:	40c2      	lsrs	r2, r0
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	9201      	str	r2, [sp, #4]
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf14      	ite	ne
 80053f0:	2102      	movne	r1, #2
 80053f2:	2101      	moveq	r1, #1
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	6139      	str	r1, [r7, #16]
 80053f8:	b1c4      	cbz	r4, 800542c <__d2b+0x88>
 80053fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80053fe:	4404      	add	r4, r0
 8005400:	6034      	str	r4, [r6, #0]
 8005402:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005406:	6028      	str	r0, [r5, #0]
 8005408:	4638      	mov	r0, r7
 800540a:	b002      	add	sp, #8
 800540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005410:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005414:	e7d5      	b.n	80053c2 <__d2b+0x1e>
 8005416:	6179      	str	r1, [r7, #20]
 8005418:	e7e7      	b.n	80053ea <__d2b+0x46>
 800541a:	a801      	add	r0, sp, #4
 800541c:	f7ff fddb 	bl	8004fd6 <__lo0bits>
 8005420:	2101      	movs	r1, #1
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	6139      	str	r1, [r7, #16]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	3020      	adds	r0, #32
 800542a:	e7e5      	b.n	80053f8 <__d2b+0x54>
 800542c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005430:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005434:	6030      	str	r0, [r6, #0]
 8005436:	6918      	ldr	r0, [r3, #16]
 8005438:	f7ff fdae 	bl	8004f98 <__hi0bits>
 800543c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005440:	e7e1      	b.n	8005406 <__d2b+0x62>

08005442 <_calloc_r>:
 8005442:	b538      	push	{r3, r4, r5, lr}
 8005444:	fb02 f401 	mul.w	r4, r2, r1
 8005448:	4621      	mov	r1, r4
 800544a:	f000 f855 	bl	80054f8 <_malloc_r>
 800544e:	4605      	mov	r5, r0
 8005450:	b118      	cbz	r0, 800545a <_calloc_r+0x18>
 8005452:	4622      	mov	r2, r4
 8005454:	2100      	movs	r1, #0
 8005456:	f7fd ff0d 	bl	8003274 <memset>
 800545a:	4628      	mov	r0, r5
 800545c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005460 <_free_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4605      	mov	r5, r0
 8005464:	2900      	cmp	r1, #0
 8005466:	d043      	beq.n	80054f0 <_free_r+0x90>
 8005468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546c:	1f0c      	subs	r4, r1, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	bfb8      	it	lt
 8005472:	18e4      	addlt	r4, r4, r3
 8005474:	f000 fbe6 	bl	8005c44 <__malloc_lock>
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <_free_r+0x94>)
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	4610      	mov	r0, r2
 800547e:	b933      	cbnz	r3, 800548e <_free_r+0x2e>
 8005480:	6063      	str	r3, [r4, #4]
 8005482:	6014      	str	r4, [r2, #0]
 8005484:	4628      	mov	r0, r5
 8005486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800548a:	f000 bbdc 	b.w	8005c46 <__malloc_unlock>
 800548e:	42a3      	cmp	r3, r4
 8005490:	d90b      	bls.n	80054aa <_free_r+0x4a>
 8005492:	6821      	ldr	r1, [r4, #0]
 8005494:	1862      	adds	r2, r4, r1
 8005496:	4293      	cmp	r3, r2
 8005498:	bf01      	itttt	eq
 800549a:	681a      	ldreq	r2, [r3, #0]
 800549c:	685b      	ldreq	r3, [r3, #4]
 800549e:	1852      	addeq	r2, r2, r1
 80054a0:	6022      	streq	r2, [r4, #0]
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	6004      	str	r4, [r0, #0]
 80054a6:	e7ed      	b.n	8005484 <_free_r+0x24>
 80054a8:	4613      	mov	r3, r2
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	b10a      	cbz	r2, 80054b2 <_free_r+0x52>
 80054ae:	42a2      	cmp	r2, r4
 80054b0:	d9fa      	bls.n	80054a8 <_free_r+0x48>
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	1858      	adds	r0, r3, r1
 80054b6:	42a0      	cmp	r0, r4
 80054b8:	d10b      	bne.n	80054d2 <_free_r+0x72>
 80054ba:	6820      	ldr	r0, [r4, #0]
 80054bc:	4401      	add	r1, r0
 80054be:	1858      	adds	r0, r3, r1
 80054c0:	4282      	cmp	r2, r0
 80054c2:	6019      	str	r1, [r3, #0]
 80054c4:	d1de      	bne.n	8005484 <_free_r+0x24>
 80054c6:	6810      	ldr	r0, [r2, #0]
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	4401      	add	r1, r0
 80054cc:	6019      	str	r1, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	e7d8      	b.n	8005484 <_free_r+0x24>
 80054d2:	d902      	bls.n	80054da <_free_r+0x7a>
 80054d4:	230c      	movs	r3, #12
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	e7d4      	b.n	8005484 <_free_r+0x24>
 80054da:	6820      	ldr	r0, [r4, #0]
 80054dc:	1821      	adds	r1, r4, r0
 80054de:	428a      	cmp	r2, r1
 80054e0:	bf01      	itttt	eq
 80054e2:	6811      	ldreq	r1, [r2, #0]
 80054e4:	6852      	ldreq	r2, [r2, #4]
 80054e6:	1809      	addeq	r1, r1, r0
 80054e8:	6021      	streq	r1, [r4, #0]
 80054ea:	6062      	str	r2, [r4, #4]
 80054ec:	605c      	str	r4, [r3, #4]
 80054ee:	e7c9      	b.n	8005484 <_free_r+0x24>
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
 80054f2:	bf00      	nop
 80054f4:	20000624 	.word	0x20000624

080054f8 <_malloc_r>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	1ccd      	adds	r5, r1, #3
 80054fc:	f025 0503 	bic.w	r5, r5, #3
 8005500:	3508      	adds	r5, #8
 8005502:	2d0c      	cmp	r5, #12
 8005504:	bf38      	it	cc
 8005506:	250c      	movcc	r5, #12
 8005508:	2d00      	cmp	r5, #0
 800550a:	4606      	mov	r6, r0
 800550c:	db01      	blt.n	8005512 <_malloc_r+0x1a>
 800550e:	42a9      	cmp	r1, r5
 8005510:	d903      	bls.n	800551a <_malloc_r+0x22>
 8005512:	230c      	movs	r3, #12
 8005514:	6033      	str	r3, [r6, #0]
 8005516:	2000      	movs	r0, #0
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	f000 fb93 	bl	8005c44 <__malloc_lock>
 800551e:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <_malloc_r+0xac>)
 8005520:	6814      	ldr	r4, [r2, #0]
 8005522:	4621      	mov	r1, r4
 8005524:	b991      	cbnz	r1, 800554c <_malloc_r+0x54>
 8005526:	4c20      	ldr	r4, [pc, #128]	; (80055a8 <_malloc_r+0xb0>)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	b91b      	cbnz	r3, 8005534 <_malloc_r+0x3c>
 800552c:	4630      	mov	r0, r6
 800552e:	f000 facd 	bl	8005acc <_sbrk_r>
 8005532:	6020      	str	r0, [r4, #0]
 8005534:	4629      	mov	r1, r5
 8005536:	4630      	mov	r0, r6
 8005538:	f000 fac8 	bl	8005acc <_sbrk_r>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d124      	bne.n	800558a <_malloc_r+0x92>
 8005540:	230c      	movs	r3, #12
 8005542:	4630      	mov	r0, r6
 8005544:	6033      	str	r3, [r6, #0]
 8005546:	f000 fb7e 	bl	8005c46 <__malloc_unlock>
 800554a:	e7e4      	b.n	8005516 <_malloc_r+0x1e>
 800554c:	680b      	ldr	r3, [r1, #0]
 800554e:	1b5b      	subs	r3, r3, r5
 8005550:	d418      	bmi.n	8005584 <_malloc_r+0x8c>
 8005552:	2b0b      	cmp	r3, #11
 8005554:	d90f      	bls.n	8005576 <_malloc_r+0x7e>
 8005556:	600b      	str	r3, [r1, #0]
 8005558:	18cc      	adds	r4, r1, r3
 800555a:	50cd      	str	r5, [r1, r3]
 800555c:	4630      	mov	r0, r6
 800555e:	f000 fb72 	bl	8005c46 <__malloc_unlock>
 8005562:	f104 000b 	add.w	r0, r4, #11
 8005566:	1d23      	adds	r3, r4, #4
 8005568:	f020 0007 	bic.w	r0, r0, #7
 800556c:	1ac3      	subs	r3, r0, r3
 800556e:	d0d3      	beq.n	8005518 <_malloc_r+0x20>
 8005570:	425a      	negs	r2, r3
 8005572:	50e2      	str	r2, [r4, r3]
 8005574:	e7d0      	b.n	8005518 <_malloc_r+0x20>
 8005576:	684b      	ldr	r3, [r1, #4]
 8005578:	428c      	cmp	r4, r1
 800557a:	bf16      	itet	ne
 800557c:	6063      	strne	r3, [r4, #4]
 800557e:	6013      	streq	r3, [r2, #0]
 8005580:	460c      	movne	r4, r1
 8005582:	e7eb      	b.n	800555c <_malloc_r+0x64>
 8005584:	460c      	mov	r4, r1
 8005586:	6849      	ldr	r1, [r1, #4]
 8005588:	e7cc      	b.n	8005524 <_malloc_r+0x2c>
 800558a:	1cc4      	adds	r4, r0, #3
 800558c:	f024 0403 	bic.w	r4, r4, #3
 8005590:	42a0      	cmp	r0, r4
 8005592:	d005      	beq.n	80055a0 <_malloc_r+0xa8>
 8005594:	1a21      	subs	r1, r4, r0
 8005596:	4630      	mov	r0, r6
 8005598:	f000 fa98 	bl	8005acc <_sbrk_r>
 800559c:	3001      	adds	r0, #1
 800559e:	d0cf      	beq.n	8005540 <_malloc_r+0x48>
 80055a0:	6025      	str	r5, [r4, #0]
 80055a2:	e7db      	b.n	800555c <_malloc_r+0x64>
 80055a4:	20000624 	.word	0x20000624
 80055a8:	20000628 	.word	0x20000628

080055ac <__ssputs_r>:
 80055ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b0:	688e      	ldr	r6, [r1, #8]
 80055b2:	4682      	mov	sl, r0
 80055b4:	429e      	cmp	r6, r3
 80055b6:	460c      	mov	r4, r1
 80055b8:	4690      	mov	r8, r2
 80055ba:	4699      	mov	r9, r3
 80055bc:	d837      	bhi.n	800562e <__ssputs_r+0x82>
 80055be:	898a      	ldrh	r2, [r1, #12]
 80055c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055c4:	d031      	beq.n	800562a <__ssputs_r+0x7e>
 80055c6:	2302      	movs	r3, #2
 80055c8:	6825      	ldr	r5, [r4, #0]
 80055ca:	6909      	ldr	r1, [r1, #16]
 80055cc:	1a6f      	subs	r7, r5, r1
 80055ce:	6965      	ldr	r5, [r4, #20]
 80055d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80055d8:	f109 0301 	add.w	r3, r9, #1
 80055dc:	443b      	add	r3, r7
 80055de:	429d      	cmp	r5, r3
 80055e0:	bf38      	it	cc
 80055e2:	461d      	movcc	r5, r3
 80055e4:	0553      	lsls	r3, r2, #21
 80055e6:	d530      	bpl.n	800564a <__ssputs_r+0x9e>
 80055e8:	4629      	mov	r1, r5
 80055ea:	f7ff ff85 	bl	80054f8 <_malloc_r>
 80055ee:	4606      	mov	r6, r0
 80055f0:	b950      	cbnz	r0, 8005608 <__ssputs_r+0x5c>
 80055f2:	230c      	movs	r3, #12
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055f8:	f8ca 3000 	str.w	r3, [sl]
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005608:	463a      	mov	r2, r7
 800560a:	6921      	ldr	r1, [r4, #16]
 800560c:	f7fd fe0e 	bl	800322c <memcpy>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	6126      	str	r6, [r4, #16]
 800561e:	443e      	add	r6, r7
 8005620:	6026      	str	r6, [r4, #0]
 8005622:	464e      	mov	r6, r9
 8005624:	6165      	str	r5, [r4, #20]
 8005626:	1bed      	subs	r5, r5, r7
 8005628:	60a5      	str	r5, [r4, #8]
 800562a:	454e      	cmp	r6, r9
 800562c:	d900      	bls.n	8005630 <__ssputs_r+0x84>
 800562e:	464e      	mov	r6, r9
 8005630:	4632      	mov	r2, r6
 8005632:	4641      	mov	r1, r8
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	f7fd fe04 	bl	8003242 <memmove>
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	2000      	movs	r0, #0
 800563e:	1b9b      	subs	r3, r3, r6
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	441e      	add	r6, r3
 8005646:	6026      	str	r6, [r4, #0]
 8005648:	e7dc      	b.n	8005604 <__ssputs_r+0x58>
 800564a:	462a      	mov	r2, r5
 800564c:	f000 fafc 	bl	8005c48 <_realloc_r>
 8005650:	4606      	mov	r6, r0
 8005652:	2800      	cmp	r0, #0
 8005654:	d1e2      	bne.n	800561c <__ssputs_r+0x70>
 8005656:	6921      	ldr	r1, [r4, #16]
 8005658:	4650      	mov	r0, sl
 800565a:	f7ff ff01 	bl	8005460 <_free_r>
 800565e:	e7c8      	b.n	80055f2 <__ssputs_r+0x46>

08005660 <_svfiprintf_r>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	461d      	mov	r5, r3
 8005666:	898b      	ldrh	r3, [r1, #12]
 8005668:	b09d      	sub	sp, #116	; 0x74
 800566a:	061f      	lsls	r7, r3, #24
 800566c:	4680      	mov	r8, r0
 800566e:	460c      	mov	r4, r1
 8005670:	4616      	mov	r6, r2
 8005672:	d50f      	bpl.n	8005694 <_svfiprintf_r+0x34>
 8005674:	690b      	ldr	r3, [r1, #16]
 8005676:	b96b      	cbnz	r3, 8005694 <_svfiprintf_r+0x34>
 8005678:	2140      	movs	r1, #64	; 0x40
 800567a:	f7ff ff3d 	bl	80054f8 <_malloc_r>
 800567e:	6020      	str	r0, [r4, #0]
 8005680:	6120      	str	r0, [r4, #16]
 8005682:	b928      	cbnz	r0, 8005690 <_svfiprintf_r+0x30>
 8005684:	230c      	movs	r3, #12
 8005686:	f8c8 3000 	str.w	r3, [r8]
 800568a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568e:	e0c8      	b.n	8005822 <_svfiprintf_r+0x1c2>
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	6163      	str	r3, [r4, #20]
 8005694:	2300      	movs	r3, #0
 8005696:	9309      	str	r3, [sp, #36]	; 0x24
 8005698:	2320      	movs	r3, #32
 800569a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800569e:	2330      	movs	r3, #48	; 0x30
 80056a0:	f04f 0b01 	mov.w	fp, #1
 80056a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056a8:	9503      	str	r5, [sp, #12]
 80056aa:	4637      	mov	r7, r6
 80056ac:	463d      	mov	r5, r7
 80056ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056b2:	b10b      	cbz	r3, 80056b8 <_svfiprintf_r+0x58>
 80056b4:	2b25      	cmp	r3, #37	; 0x25
 80056b6:	d13e      	bne.n	8005736 <_svfiprintf_r+0xd6>
 80056b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80056bc:	d00b      	beq.n	80056d6 <_svfiprintf_r+0x76>
 80056be:	4653      	mov	r3, sl
 80056c0:	4632      	mov	r2, r6
 80056c2:	4621      	mov	r1, r4
 80056c4:	4640      	mov	r0, r8
 80056c6:	f7ff ff71 	bl	80055ac <__ssputs_r>
 80056ca:	3001      	adds	r0, #1
 80056cc:	f000 80a4 	beq.w	8005818 <_svfiprintf_r+0x1b8>
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	4453      	add	r3, sl
 80056d4:	9309      	str	r3, [sp, #36]	; 0x24
 80056d6:	783b      	ldrb	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 809d 	beq.w	8005818 <_svfiprintf_r+0x1b8>
 80056de:	2300      	movs	r3, #0
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e8:	9304      	str	r3, [sp, #16]
 80056ea:	9307      	str	r3, [sp, #28]
 80056ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056f0:	931a      	str	r3, [sp, #104]	; 0x68
 80056f2:	462f      	mov	r7, r5
 80056f4:	2205      	movs	r2, #5
 80056f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056fa:	4850      	ldr	r0, [pc, #320]	; (800583c <_svfiprintf_r+0x1dc>)
 80056fc:	f7ff fbb8 	bl	8004e70 <memchr>
 8005700:	9b04      	ldr	r3, [sp, #16]
 8005702:	b9d0      	cbnz	r0, 800573a <_svfiprintf_r+0xda>
 8005704:	06d9      	lsls	r1, r3, #27
 8005706:	bf44      	itt	mi
 8005708:	2220      	movmi	r2, #32
 800570a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800570e:	071a      	lsls	r2, r3, #28
 8005710:	bf44      	itt	mi
 8005712:	222b      	movmi	r2, #43	; 0x2b
 8005714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005718:	782a      	ldrb	r2, [r5, #0]
 800571a:	2a2a      	cmp	r2, #42	; 0x2a
 800571c:	d015      	beq.n	800574a <_svfiprintf_r+0xea>
 800571e:	462f      	mov	r7, r5
 8005720:	2000      	movs	r0, #0
 8005722:	250a      	movs	r5, #10
 8005724:	9a07      	ldr	r2, [sp, #28]
 8005726:	4639      	mov	r1, r7
 8005728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800572c:	3b30      	subs	r3, #48	; 0x30
 800572e:	2b09      	cmp	r3, #9
 8005730:	d94d      	bls.n	80057ce <_svfiprintf_r+0x16e>
 8005732:	b1b8      	cbz	r0, 8005764 <_svfiprintf_r+0x104>
 8005734:	e00f      	b.n	8005756 <_svfiprintf_r+0xf6>
 8005736:	462f      	mov	r7, r5
 8005738:	e7b8      	b.n	80056ac <_svfiprintf_r+0x4c>
 800573a:	4a40      	ldr	r2, [pc, #256]	; (800583c <_svfiprintf_r+0x1dc>)
 800573c:	463d      	mov	r5, r7
 800573e:	1a80      	subs	r0, r0, r2
 8005740:	fa0b f000 	lsl.w	r0, fp, r0
 8005744:	4318      	orrs	r0, r3
 8005746:	9004      	str	r0, [sp, #16]
 8005748:	e7d3      	b.n	80056f2 <_svfiprintf_r+0x92>
 800574a:	9a03      	ldr	r2, [sp, #12]
 800574c:	1d11      	adds	r1, r2, #4
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	9103      	str	r1, [sp, #12]
 8005752:	2a00      	cmp	r2, #0
 8005754:	db01      	blt.n	800575a <_svfiprintf_r+0xfa>
 8005756:	9207      	str	r2, [sp, #28]
 8005758:	e004      	b.n	8005764 <_svfiprintf_r+0x104>
 800575a:	4252      	negs	r2, r2
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	9207      	str	r2, [sp, #28]
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	783b      	ldrb	r3, [r7, #0]
 8005766:	2b2e      	cmp	r3, #46	; 0x2e
 8005768:	d10c      	bne.n	8005784 <_svfiprintf_r+0x124>
 800576a:	787b      	ldrb	r3, [r7, #1]
 800576c:	2b2a      	cmp	r3, #42	; 0x2a
 800576e:	d133      	bne.n	80057d8 <_svfiprintf_r+0x178>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	3702      	adds	r7, #2
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	9203      	str	r2, [sp, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bfb8      	it	lt
 800577e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	4d2e      	ldr	r5, [pc, #184]	; (8005840 <_svfiprintf_r+0x1e0>)
 8005786:	2203      	movs	r2, #3
 8005788:	7839      	ldrb	r1, [r7, #0]
 800578a:	4628      	mov	r0, r5
 800578c:	f7ff fb70 	bl	8004e70 <memchr>
 8005790:	b138      	cbz	r0, 80057a2 <_svfiprintf_r+0x142>
 8005792:	2340      	movs	r3, #64	; 0x40
 8005794:	1b40      	subs	r0, r0, r5
 8005796:	fa03 f000 	lsl.w	r0, r3, r0
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	3701      	adds	r7, #1
 800579e:	4303      	orrs	r3, r0
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	7839      	ldrb	r1, [r7, #0]
 80057a4:	2206      	movs	r2, #6
 80057a6:	4827      	ldr	r0, [pc, #156]	; (8005844 <_svfiprintf_r+0x1e4>)
 80057a8:	1c7e      	adds	r6, r7, #1
 80057aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ae:	f7ff fb5f 	bl	8004e70 <memchr>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d038      	beq.n	8005828 <_svfiprintf_r+0x1c8>
 80057b6:	4b24      	ldr	r3, [pc, #144]	; (8005848 <_svfiprintf_r+0x1e8>)
 80057b8:	bb13      	cbnz	r3, 8005800 <_svfiprintf_r+0x1a0>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	3307      	adds	r3, #7
 80057be:	f023 0307 	bic.w	r3, r3, #7
 80057c2:	3308      	adds	r3, #8
 80057c4:	9303      	str	r3, [sp, #12]
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	444b      	add	r3, r9
 80057ca:	9309      	str	r3, [sp, #36]	; 0x24
 80057cc:	e76d      	b.n	80056aa <_svfiprintf_r+0x4a>
 80057ce:	fb05 3202 	mla	r2, r5, r2, r3
 80057d2:	2001      	movs	r0, #1
 80057d4:	460f      	mov	r7, r1
 80057d6:	e7a6      	b.n	8005726 <_svfiprintf_r+0xc6>
 80057d8:	2300      	movs	r3, #0
 80057da:	250a      	movs	r5, #10
 80057dc:	4619      	mov	r1, r3
 80057de:	3701      	adds	r7, #1
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	4638      	mov	r0, r7
 80057e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e8:	3a30      	subs	r2, #48	; 0x30
 80057ea:	2a09      	cmp	r2, #9
 80057ec:	d903      	bls.n	80057f6 <_svfiprintf_r+0x196>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c8      	beq.n	8005784 <_svfiprintf_r+0x124>
 80057f2:	9105      	str	r1, [sp, #20]
 80057f4:	e7c6      	b.n	8005784 <_svfiprintf_r+0x124>
 80057f6:	fb05 2101 	mla	r1, r5, r1, r2
 80057fa:	2301      	movs	r3, #1
 80057fc:	4607      	mov	r7, r0
 80057fe:	e7f0      	b.n	80057e2 <_svfiprintf_r+0x182>
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4622      	mov	r2, r4
 8005806:	4b11      	ldr	r3, [pc, #68]	; (800584c <_svfiprintf_r+0x1ec>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4640      	mov	r0, r8
 800580c:	f7fd fdcc 	bl	80033a8 <_printf_float>
 8005810:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005814:	4681      	mov	r9, r0
 8005816:	d1d6      	bne.n	80057c6 <_svfiprintf_r+0x166>
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	065b      	lsls	r3, r3, #25
 800581c:	f53f af35 	bmi.w	800568a <_svfiprintf_r+0x2a>
 8005820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005822:	b01d      	add	sp, #116	; 0x74
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	ab03      	add	r3, sp, #12
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4622      	mov	r2, r4
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <_svfiprintf_r+0x1ec>)
 8005830:	a904      	add	r1, sp, #16
 8005832:	4640      	mov	r0, r8
 8005834:	f7fe f864 	bl	8003900 <_printf_i>
 8005838:	e7ea      	b.n	8005810 <_svfiprintf_r+0x1b0>
 800583a:	bf00      	nop
 800583c:	08009dcc 	.word	0x08009dcc
 8005840:	08009dd2 	.word	0x08009dd2
 8005844:	08009dd6 	.word	0x08009dd6
 8005848:	080033a9 	.word	0x080033a9
 800584c:	080055ad 	.word	0x080055ad

08005850 <__sfputc_r>:
 8005850:	6893      	ldr	r3, [r2, #8]
 8005852:	b410      	push	{r4}
 8005854:	3b01      	subs	r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	da07      	bge.n	800586c <__sfputc_r+0x1c>
 800585c:	6994      	ldr	r4, [r2, #24]
 800585e:	42a3      	cmp	r3, r4
 8005860:	db01      	blt.n	8005866 <__sfputc_r+0x16>
 8005862:	290a      	cmp	r1, #10
 8005864:	d102      	bne.n	800586c <__sfputc_r+0x1c>
 8005866:	bc10      	pop	{r4}
 8005868:	f7fe ba0c 	b.w	8003c84 <__swbuf_r>
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	1c58      	adds	r0, r3, #1
 8005870:	6010      	str	r0, [r2, #0]
 8005872:	7019      	strb	r1, [r3, #0]
 8005874:	4608      	mov	r0, r1
 8005876:	bc10      	pop	{r4}
 8005878:	4770      	bx	lr

0800587a <__sfputs_r>:
 800587a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587c:	4606      	mov	r6, r0
 800587e:	460f      	mov	r7, r1
 8005880:	4614      	mov	r4, r2
 8005882:	18d5      	adds	r5, r2, r3
 8005884:	42ac      	cmp	r4, r5
 8005886:	d101      	bne.n	800588c <__sfputs_r+0x12>
 8005888:	2000      	movs	r0, #0
 800588a:	e007      	b.n	800589c <__sfputs_r+0x22>
 800588c:	463a      	mov	r2, r7
 800588e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005892:	4630      	mov	r0, r6
 8005894:	f7ff ffdc 	bl	8005850 <__sfputc_r>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d1f3      	bne.n	8005884 <__sfputs_r+0xa>
 800589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058a0 <_vfiprintf_r>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	460c      	mov	r4, r1
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	4617      	mov	r7, r2
 80058aa:	461d      	mov	r5, r3
 80058ac:	4606      	mov	r6, r0
 80058ae:	b118      	cbz	r0, 80058b8 <_vfiprintf_r+0x18>
 80058b0:	6983      	ldr	r3, [r0, #24]
 80058b2:	b90b      	cbnz	r3, 80058b8 <_vfiprintf_r+0x18>
 80058b4:	f7ff f9d8 	bl	8004c68 <__sinit>
 80058b8:	4b7c      	ldr	r3, [pc, #496]	; (8005aac <_vfiprintf_r+0x20c>)
 80058ba:	429c      	cmp	r4, r3
 80058bc:	d158      	bne.n	8005970 <_vfiprintf_r+0xd0>
 80058be:	6874      	ldr	r4, [r6, #4]
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	0718      	lsls	r0, r3, #28
 80058c4:	d55e      	bpl.n	8005984 <_vfiprintf_r+0xe4>
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05b      	beq.n	8005984 <_vfiprintf_r+0xe4>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	2320      	movs	r3, #32
 80058d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d6:	2330      	movs	r3, #48	; 0x30
 80058d8:	f04f 0b01 	mov.w	fp, #1
 80058dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e0:	9503      	str	r5, [sp, #12]
 80058e2:	46b8      	mov	r8, r7
 80058e4:	4645      	mov	r5, r8
 80058e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80058ea:	b10b      	cbz	r3, 80058f0 <_vfiprintf_r+0x50>
 80058ec:	2b25      	cmp	r3, #37	; 0x25
 80058ee:	d154      	bne.n	800599a <_vfiprintf_r+0xfa>
 80058f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80058f4:	d00b      	beq.n	800590e <_vfiprintf_r+0x6e>
 80058f6:	4653      	mov	r3, sl
 80058f8:	463a      	mov	r2, r7
 80058fa:	4621      	mov	r1, r4
 80058fc:	4630      	mov	r0, r6
 80058fe:	f7ff ffbc 	bl	800587a <__sfputs_r>
 8005902:	3001      	adds	r0, #1
 8005904:	f000 80c2 	beq.w	8005a8c <_vfiprintf_r+0x1ec>
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	4453      	add	r3, sl
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	f898 3000 	ldrb.w	r3, [r8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80ba 	beq.w	8005a8c <_vfiprintf_r+0x1ec>
 8005918:	2300      	movs	r3, #0
 800591a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800591e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005922:	9304      	str	r3, [sp, #16]
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800592a:	931a      	str	r3, [sp, #104]	; 0x68
 800592c:	46a8      	mov	r8, r5
 800592e:	2205      	movs	r2, #5
 8005930:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005934:	485e      	ldr	r0, [pc, #376]	; (8005ab0 <_vfiprintf_r+0x210>)
 8005936:	f7ff fa9b 	bl	8004e70 <memchr>
 800593a:	9b04      	ldr	r3, [sp, #16]
 800593c:	bb78      	cbnz	r0, 800599e <_vfiprintf_r+0xfe>
 800593e:	06d9      	lsls	r1, r3, #27
 8005940:	bf44      	itt	mi
 8005942:	2220      	movmi	r2, #32
 8005944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005948:	071a      	lsls	r2, r3, #28
 800594a:	bf44      	itt	mi
 800594c:	222b      	movmi	r2, #43	; 0x2b
 800594e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005952:	782a      	ldrb	r2, [r5, #0]
 8005954:	2a2a      	cmp	r2, #42	; 0x2a
 8005956:	d02a      	beq.n	80059ae <_vfiprintf_r+0x10e>
 8005958:	46a8      	mov	r8, r5
 800595a:	2000      	movs	r0, #0
 800595c:	250a      	movs	r5, #10
 800595e:	9a07      	ldr	r2, [sp, #28]
 8005960:	4641      	mov	r1, r8
 8005962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005966:	3b30      	subs	r3, #48	; 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d969      	bls.n	8005a40 <_vfiprintf_r+0x1a0>
 800596c:	b360      	cbz	r0, 80059c8 <_vfiprintf_r+0x128>
 800596e:	e024      	b.n	80059ba <_vfiprintf_r+0x11a>
 8005970:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <_vfiprintf_r+0x214>)
 8005972:	429c      	cmp	r4, r3
 8005974:	d101      	bne.n	800597a <_vfiprintf_r+0xda>
 8005976:	68b4      	ldr	r4, [r6, #8]
 8005978:	e7a2      	b.n	80058c0 <_vfiprintf_r+0x20>
 800597a:	4b4f      	ldr	r3, [pc, #316]	; (8005ab8 <_vfiprintf_r+0x218>)
 800597c:	429c      	cmp	r4, r3
 800597e:	bf08      	it	eq
 8005980:	68f4      	ldreq	r4, [r6, #12]
 8005982:	e79d      	b.n	80058c0 <_vfiprintf_r+0x20>
 8005984:	4621      	mov	r1, r4
 8005986:	4630      	mov	r0, r6
 8005988:	f7fe f9ce 	bl	8003d28 <__swsetup_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	d09d      	beq.n	80058cc <_vfiprintf_r+0x2c>
 8005990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005994:	b01d      	add	sp, #116	; 0x74
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599a:	46a8      	mov	r8, r5
 800599c:	e7a2      	b.n	80058e4 <_vfiprintf_r+0x44>
 800599e:	4a44      	ldr	r2, [pc, #272]	; (8005ab0 <_vfiprintf_r+0x210>)
 80059a0:	4645      	mov	r5, r8
 80059a2:	1a80      	subs	r0, r0, r2
 80059a4:	fa0b f000 	lsl.w	r0, fp, r0
 80059a8:	4318      	orrs	r0, r3
 80059aa:	9004      	str	r0, [sp, #16]
 80059ac:	e7be      	b.n	800592c <_vfiprintf_r+0x8c>
 80059ae:	9a03      	ldr	r2, [sp, #12]
 80059b0:	1d11      	adds	r1, r2, #4
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	9103      	str	r1, [sp, #12]
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	db01      	blt.n	80059be <_vfiprintf_r+0x11e>
 80059ba:	9207      	str	r2, [sp, #28]
 80059bc:	e004      	b.n	80059c8 <_vfiprintf_r+0x128>
 80059be:	4252      	negs	r2, r2
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	9207      	str	r2, [sp, #28]
 80059c6:	9304      	str	r3, [sp, #16]
 80059c8:	f898 3000 	ldrb.w	r3, [r8]
 80059cc:	2b2e      	cmp	r3, #46	; 0x2e
 80059ce:	d10e      	bne.n	80059ee <_vfiprintf_r+0x14e>
 80059d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d138      	bne.n	8005a4a <_vfiprintf_r+0x1aa>
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	f108 0802 	add.w	r8, r8, #2
 80059de:	1d1a      	adds	r2, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	9203      	str	r2, [sp, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfb8      	it	lt
 80059e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059ec:	9305      	str	r3, [sp, #20]
 80059ee:	4d33      	ldr	r5, [pc, #204]	; (8005abc <_vfiprintf_r+0x21c>)
 80059f0:	2203      	movs	r2, #3
 80059f2:	f898 1000 	ldrb.w	r1, [r8]
 80059f6:	4628      	mov	r0, r5
 80059f8:	f7ff fa3a 	bl	8004e70 <memchr>
 80059fc:	b140      	cbz	r0, 8005a10 <_vfiprintf_r+0x170>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	1b40      	subs	r0, r0, r5
 8005a02:	fa03 f000 	lsl.w	r0, r3, r0
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	f108 0801 	add.w	r8, r8, #1
 8005a0c:	4303      	orrs	r3, r0
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	f898 1000 	ldrb.w	r1, [r8]
 8005a14:	2206      	movs	r2, #6
 8005a16:	482a      	ldr	r0, [pc, #168]	; (8005ac0 <_vfiprintf_r+0x220>)
 8005a18:	f108 0701 	add.w	r7, r8, #1
 8005a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a20:	f7ff fa26 	bl	8004e70 <memchr>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d037      	beq.n	8005a98 <_vfiprintf_r+0x1f8>
 8005a28:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <_vfiprintf_r+0x224>)
 8005a2a:	bb1b      	cbnz	r3, 8005a74 <_vfiprintf_r+0x1d4>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	3307      	adds	r3, #7
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	3308      	adds	r3, #8
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	444b      	add	r3, r9
 8005a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3e:	e750      	b.n	80058e2 <_vfiprintf_r+0x42>
 8005a40:	fb05 3202 	mla	r2, r5, r2, r3
 8005a44:	2001      	movs	r0, #1
 8005a46:	4688      	mov	r8, r1
 8005a48:	e78a      	b.n	8005960 <_vfiprintf_r+0xc0>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	250a      	movs	r5, #10
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	4640      	mov	r0, r8
 8005a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a5c:	3a30      	subs	r2, #48	; 0x30
 8005a5e:	2a09      	cmp	r2, #9
 8005a60:	d903      	bls.n	8005a6a <_vfiprintf_r+0x1ca>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0c3      	beq.n	80059ee <_vfiprintf_r+0x14e>
 8005a66:	9105      	str	r1, [sp, #20]
 8005a68:	e7c1      	b.n	80059ee <_vfiprintf_r+0x14e>
 8005a6a:	fb05 2101 	mla	r1, r5, r1, r2
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4680      	mov	r8, r0
 8005a72:	e7f0      	b.n	8005a56 <_vfiprintf_r+0x1b6>
 8005a74:	ab03      	add	r3, sp, #12
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <_vfiprintf_r+0x228>)
 8005a7c:	a904      	add	r1, sp, #16
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7fd fc92 	bl	80033a8 <_printf_float>
 8005a84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a88:	4681      	mov	r9, r0
 8005a8a:	d1d5      	bne.n	8005a38 <_vfiprintf_r+0x198>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	065b      	lsls	r3, r3, #25
 8005a90:	f53f af7e 	bmi.w	8005990 <_vfiprintf_r+0xf0>
 8005a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a96:	e77d      	b.n	8005994 <_vfiprintf_r+0xf4>
 8005a98:	ab03      	add	r3, sp, #12
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <_vfiprintf_r+0x228>)
 8005aa0:	a904      	add	r1, sp, #16
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7fd ff2c 	bl	8003900 <_printf_i>
 8005aa8:	e7ec      	b.n	8005a84 <_vfiprintf_r+0x1e4>
 8005aaa:	bf00      	nop
 8005aac:	08009c8c 	.word	0x08009c8c
 8005ab0:	08009dcc 	.word	0x08009dcc
 8005ab4:	08009cac 	.word	0x08009cac
 8005ab8:	08009c6c 	.word	0x08009c6c
 8005abc:	08009dd2 	.word	0x08009dd2
 8005ac0:	08009dd6 	.word	0x08009dd6
 8005ac4:	080033a9 	.word	0x080033a9
 8005ac8:	0800587b 	.word	0x0800587b

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4c05      	ldr	r4, [pc, #20]	; (8005ae8 <_sbrk_r+0x1c>)
 8005ad2:	4605      	mov	r5, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	6023      	str	r3, [r4, #0]
 8005ad8:	f7fd fb0c 	bl	80030f4 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	2000079c 	.word	0x2000079c

08005aec <__sread>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	460c      	mov	r4, r1
 8005af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af4:	f000 f8ce 	bl	8005c94 <_read_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	bfab      	itete	ge
 8005afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005afe:	89a3      	ldrhlt	r3, [r4, #12]
 8005b00:	181b      	addge	r3, r3, r0
 8005b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b06:	bfac      	ite	ge
 8005b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b0a:	81a3      	strhlt	r3, [r4, #12]
 8005b0c:	bd10      	pop	{r4, pc}

08005b0e <__swrite>:
 8005b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	461f      	mov	r7, r3
 8005b14:	898b      	ldrh	r3, [r1, #12]
 8005b16:	4605      	mov	r5, r0
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	d505      	bpl.n	8005b2c <__swrite+0x1e>
 8005b20:	2302      	movs	r3, #2
 8005b22:	2200      	movs	r2, #0
 8005b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b28:	f000 f868 	bl	8005bfc <_lseek_r>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	4632      	mov	r2, r6
 8005b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b42:	f000 b817 	b.w	8005b74 <_write_r>

08005b46 <__sseek>:
 8005b46:	b510      	push	{r4, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4e:	f000 f855 	bl	8005bfc <_lseek_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	bf15      	itete	ne
 8005b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b62:	81a3      	strheq	r3, [r4, #12]
 8005b64:	bf18      	it	ne
 8005b66:	81a3      	strhne	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__sclose>:
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 b813 	b.w	8005b98 <_close_r>
	...

08005b74 <_write_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4c05      	ldr	r4, [pc, #20]	; (8005b94 <_write_r+0x20>)
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fc fbe0 	bl	8002348 <_write>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_write_r+0x1e>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_write_r+0x1e>
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	2000079c 	.word	0x2000079c

08005b98 <_close_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4c05      	ldr	r4, [pc, #20]	; (8005bb4 <_close_r+0x1c>)
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	f7fd fac0 	bl	8003128 <_close>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_close_r+0x1a>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_close_r+0x1a>
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	2000079c 	.word	0x2000079c

08005bb8 <_fstat_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4c06      	ldr	r4, [pc, #24]	; (8005bd8 <_fstat_r+0x20>)
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	f7fd fab2 	bl	800312e <_fstat>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d102      	bne.n	8005bd4 <_fstat_r+0x1c>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	b103      	cbz	r3, 8005bd4 <_fstat_r+0x1c>
 8005bd2:	602b      	str	r3, [r5, #0]
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
 8005bd6:	bf00      	nop
 8005bd8:	2000079c 	.word	0x2000079c

08005bdc <_isatty_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	2300      	movs	r3, #0
 8005be0:	4c05      	ldr	r4, [pc, #20]	; (8005bf8 <_isatty_r+0x1c>)
 8005be2:	4605      	mov	r5, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	f7fd faa6 	bl	8003138 <_isatty>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_isatty_r+0x1a>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_isatty_r+0x1a>
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	2000079c 	.word	0x2000079c

08005bfc <_lseek_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4605      	mov	r5, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	2200      	movs	r2, #0
 8005c06:	4c05      	ldr	r4, [pc, #20]	; (8005c1c <_lseek_r+0x20>)
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fd fa96 	bl	800313c <_lseek>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_lseek_r+0x1e>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_lseek_r+0x1e>
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	2000079c 	.word	0x2000079c

08005c20 <__ascii_mbtowc>:
 8005c20:	b082      	sub	sp, #8
 8005c22:	b901      	cbnz	r1, 8005c26 <__ascii_mbtowc+0x6>
 8005c24:	a901      	add	r1, sp, #4
 8005c26:	b142      	cbz	r2, 8005c3a <__ascii_mbtowc+0x1a>
 8005c28:	b14b      	cbz	r3, 8005c3e <__ascii_mbtowc+0x1e>
 8005c2a:	7813      	ldrb	r3, [r2, #0]
 8005c2c:	600b      	str	r3, [r1, #0]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	1c10      	adds	r0, r2, #0
 8005c32:	bf18      	it	ne
 8005c34:	2001      	movne	r0, #1
 8005c36:	b002      	add	sp, #8
 8005c38:	4770      	bx	lr
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	e7fb      	b.n	8005c36 <__ascii_mbtowc+0x16>
 8005c3e:	f06f 0001 	mvn.w	r0, #1
 8005c42:	e7f8      	b.n	8005c36 <__ascii_mbtowc+0x16>

08005c44 <__malloc_lock>:
 8005c44:	4770      	bx	lr

08005c46 <__malloc_unlock>:
 8005c46:	4770      	bx	lr

08005c48 <_realloc_r>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	460e      	mov	r6, r1
 8005c50:	b921      	cbnz	r1, 8005c5c <_realloc_r+0x14>
 8005c52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c56:	4611      	mov	r1, r2
 8005c58:	f7ff bc4e 	b.w	80054f8 <_malloc_r>
 8005c5c:	b922      	cbnz	r2, 8005c68 <_realloc_r+0x20>
 8005c5e:	f7ff fbff 	bl	8005460 <_free_r>
 8005c62:	4625      	mov	r5, r4
 8005c64:	4628      	mov	r0, r5
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	f000 f833 	bl	8005cd2 <_malloc_usable_size_r>
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d20f      	bcs.n	8005c90 <_realloc_r+0x48>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4638      	mov	r0, r7
 8005c74:	f7ff fc40 	bl	80054f8 <_malloc_r>
 8005c78:	4605      	mov	r5, r0
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	d0f2      	beq.n	8005c64 <_realloc_r+0x1c>
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4622      	mov	r2, r4
 8005c82:	f7fd fad3 	bl	800322c <memcpy>
 8005c86:	4631      	mov	r1, r6
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7ff fbe9 	bl	8005460 <_free_r>
 8005c8e:	e7e9      	b.n	8005c64 <_realloc_r+0x1c>
 8005c90:	4635      	mov	r5, r6
 8005c92:	e7e7      	b.n	8005c64 <_realloc_r+0x1c>

08005c94 <_read_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4605      	mov	r5, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4c05      	ldr	r4, [pc, #20]	; (8005cb4 <_read_r+0x20>)
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f7fd fa18 	bl	80030d8 <_read>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_read_r+0x1e>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_read_r+0x1e>
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	2000079c 	.word	0x2000079c

08005cb8 <__ascii_wctomb>:
 8005cb8:	b149      	cbz	r1, 8005cce <__ascii_wctomb+0x16>
 8005cba:	2aff      	cmp	r2, #255	; 0xff
 8005cbc:	bf8b      	itete	hi
 8005cbe:	238a      	movhi	r3, #138	; 0x8a
 8005cc0:	700a      	strbls	r2, [r1, #0]
 8005cc2:	6003      	strhi	r3, [r0, #0]
 8005cc4:	2001      	movls	r0, #1
 8005cc6:	bf88      	it	hi
 8005cc8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005ccc:	4770      	bx	lr
 8005cce:	4608      	mov	r0, r1
 8005cd0:	4770      	bx	lr

08005cd2 <_malloc_usable_size_r>:
 8005cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd6:	1f18      	subs	r0, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfbc      	itt	lt
 8005cdc:	580b      	ldrlt	r3, [r1, r0]
 8005cde:	18c0      	addlt	r0, r0, r3
 8005ce0:	4770      	bx	lr
	...

08005ce4 <cos>:
 8005ce4:	b530      	push	{r4, r5, lr}
 8005ce6:	4a18      	ldr	r2, [pc, #96]	; (8005d48 <cos+0x64>)
 8005ce8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cec:	4293      	cmp	r3, r2
 8005cee:	b087      	sub	sp, #28
 8005cf0:	dc04      	bgt.n	8005cfc <cos+0x18>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f000 fa57 	bl	80061a8 <__kernel_cos>
 8005cfa:	e006      	b.n	8005d0a <cos+0x26>
 8005cfc:	4a13      	ldr	r2, [pc, #76]	; (8005d4c <cos+0x68>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	dd05      	ble.n	8005d0e <cos+0x2a>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	f7fa fa2f 	bl	8000168 <__aeabi_dsub>
 8005d0a:	b007      	add	sp, #28
 8005d0c:	bd30      	pop	{r4, r5, pc}
 8005d0e:	aa02      	add	r2, sp, #8
 8005d10:	f000 f85a 	bl	8005dc8 <__ieee754_rem_pio2>
 8005d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d18:	f000 0403 	and.w	r4, r0, #3
 8005d1c:	2c01      	cmp	r4, #1
 8005d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d22:	d008      	beq.n	8005d36 <cos+0x52>
 8005d24:	2c02      	cmp	r4, #2
 8005d26:	d00c      	beq.n	8005d42 <cos+0x5e>
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	d0e4      	beq.n	8005cf6 <cos+0x12>
 8005d2c:	2401      	movs	r4, #1
 8005d2e:	9400      	str	r4, [sp, #0]
 8005d30:	f000 fe42 	bl	80069b8 <__kernel_sin>
 8005d34:	e7e9      	b.n	8005d0a <cos+0x26>
 8005d36:	9400      	str	r4, [sp, #0]
 8005d38:	f000 fe3e 	bl	80069b8 <__kernel_sin>
 8005d3c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005d40:	e7e3      	b.n	8005d0a <cos+0x26>
 8005d42:	f000 fa31 	bl	80061a8 <__kernel_cos>
 8005d46:	e7f9      	b.n	8005d3c <cos+0x58>
 8005d48:	3fe921fb 	.word	0x3fe921fb
 8005d4c:	7fefffff 	.word	0x7fefffff

08005d50 <sin>:
 8005d50:	b530      	push	{r4, r5, lr}
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <sin+0x6c>)
 8005d54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	dc06      	bgt.n	8005d6c <sin+0x1c>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2200      	movs	r2, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	f000 fe27 	bl	80069b8 <__kernel_sin>
 8005d6a:	e006      	b.n	8005d7a <sin+0x2a>
 8005d6c:	4a14      	ldr	r2, [pc, #80]	; (8005dc0 <sin+0x70>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	dd05      	ble.n	8005d7e <sin+0x2e>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	f7fa f9f7 	bl	8000168 <__aeabi_dsub>
 8005d7a:	b007      	add	sp, #28
 8005d7c:	bd30      	pop	{r4, r5, pc}
 8005d7e:	aa02      	add	r2, sp, #8
 8005d80:	f000 f822 	bl	8005dc8 <__ieee754_rem_pio2>
 8005d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d88:	f000 0403 	and.w	r4, r0, #3
 8005d8c:	2c01      	cmp	r4, #1
 8005d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d92:	d005      	beq.n	8005da0 <sin+0x50>
 8005d94:	2c02      	cmp	r4, #2
 8005d96:	d006      	beq.n	8005da6 <sin+0x56>
 8005d98:	b964      	cbnz	r4, 8005db4 <sin+0x64>
 8005d9a:	2401      	movs	r4, #1
 8005d9c:	9400      	str	r4, [sp, #0]
 8005d9e:	e7e2      	b.n	8005d66 <sin+0x16>
 8005da0:	f000 fa02 	bl	80061a8 <__kernel_cos>
 8005da4:	e7e9      	b.n	8005d7a <sin+0x2a>
 8005da6:	2401      	movs	r4, #1
 8005da8:	9400      	str	r4, [sp, #0]
 8005daa:	f000 fe05 	bl	80069b8 <__kernel_sin>
 8005dae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005db2:	e7e2      	b.n	8005d7a <sin+0x2a>
 8005db4:	f000 f9f8 	bl	80061a8 <__kernel_cos>
 8005db8:	e7f9      	b.n	8005dae <sin+0x5e>
 8005dba:	bf00      	nop
 8005dbc:	3fe921fb 	.word	0x3fe921fb
 8005dc0:	7fefffff 	.word	0x7fefffff
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <__ieee754_rem_pio2>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4ac2      	ldr	r2, [pc, #776]	; (80060d8 <__ieee754_rem_pio2+0x310>)
 8005dd0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005dd4:	4592      	cmp	sl, r2
 8005dd6:	b08d      	sub	sp, #52	; 0x34
 8005dd8:	468b      	mov	fp, r1
 8005dda:	dc07      	bgt.n	8005dec <__ieee754_rem_pio2+0x24>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	e9c4 0100 	strd	r0, r1, [r4]
 8005de4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005de8:	2500      	movs	r5, #0
 8005dea:	e023      	b.n	8005e34 <__ieee754_rem_pio2+0x6c>
 8005dec:	4abb      	ldr	r2, [pc, #748]	; (80060dc <__ieee754_rem_pio2+0x314>)
 8005dee:	4592      	cmp	sl, r2
 8005df0:	dc71      	bgt.n	8005ed6 <__ieee754_rem_pio2+0x10e>
 8005df2:	a3ab      	add	r3, pc, #684	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x2d8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	4db9      	ldr	r5, [pc, #740]	; (80060e0 <__ieee754_rem_pio2+0x318>)
 8005dfc:	dd36      	ble.n	8005e6c <__ieee754_rem_pio2+0xa4>
 8005dfe:	f7fa f9b3 	bl	8000168 <__aeabi_dsub>
 8005e02:	45aa      	cmp	sl, r5
 8005e04:	4606      	mov	r6, r0
 8005e06:	460f      	mov	r7, r1
 8005e08:	d018      	beq.n	8005e3c <__ieee754_rem_pio2+0x74>
 8005e0a:	a3a7      	add	r3, pc, #668	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e0>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa f9aa 	bl	8000168 <__aeabi_dsub>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4630      	mov	r0, r6
 8005e1a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa f9a2 	bl	8000168 <__aeabi_dsub>
 8005e24:	a3a0      	add	r3, pc, #640	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e0>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa f99d 	bl	8000168 <__aeabi_dsub>
 8005e2e:	2501      	movs	r5, #1
 8005e30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e34:	4628      	mov	r0, r5
 8005e36:	b00d      	add	sp, #52	; 0x34
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	a39c      	add	r3, pc, #624	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2e8>)
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa f991 	bl	8000168 <__aeabi_dsub>
 8005e46:	a39c      	add	r3, pc, #624	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f0>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa f98a 	bl	8000168 <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4630      	mov	r0, r6
 8005e5a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa f982 	bl	8000168 <__aeabi_dsub>
 8005e64:	a394      	add	r3, pc, #592	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f0>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	e7de      	b.n	8005e2a <__ieee754_rem_pio2+0x62>
 8005e6c:	f7fa f97e 	bl	800016c <__adddf3>
 8005e70:	45aa      	cmp	sl, r5
 8005e72:	4606      	mov	r6, r0
 8005e74:	460f      	mov	r7, r1
 8005e76:	d016      	beq.n	8005ea6 <__ieee754_rem_pio2+0xde>
 8005e78:	a38b      	add	r3, pc, #556	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e0>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa f975 	bl	800016c <__adddf3>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4630      	mov	r0, r6
 8005e88:	e9c4 2300 	strd	r2, r3, [r4]
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	f7fa f96b 	bl	8000168 <__aeabi_dsub>
 8005e92:	a385      	add	r3, pc, #532	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e0>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f968 	bl	800016c <__adddf3>
 8005e9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ea0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ea4:	e7c6      	b.n	8005e34 <__ieee754_rem_pio2+0x6c>
 8005ea6:	a382      	add	r3, pc, #520	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2e8>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa f95e 	bl	800016c <__adddf3>
 8005eb0:	a381      	add	r3, pc, #516	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	f7fa f957 	bl	800016c <__adddf3>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e9c4 2300 	strd	r2, r3, [r4]
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa f94d 	bl	8000168 <__aeabi_dsub>
 8005ece:	a37a      	add	r3, pc, #488	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f0>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	e7e0      	b.n	8005e98 <__ieee754_rem_pio2+0xd0>
 8005ed6:	4a83      	ldr	r2, [pc, #524]	; (80060e4 <__ieee754_rem_pio2+0x31c>)
 8005ed8:	4592      	cmp	sl, r2
 8005eda:	f300 80d2 	bgt.w	8006082 <__ieee754_rem_pio2+0x2ba>
 8005ede:	f000 fe21 	bl	8006b24 <fabs>
 8005ee2:	a377      	add	r3, pc, #476	; (adr r3, 80060c0 <__ieee754_rem_pio2+0x2f8>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	4606      	mov	r6, r0
 8005eea:	460f      	mov	r7, r1
 8005eec:	f7fa faf4 	bl	80004d8 <__aeabi_dmul>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4b7d      	ldr	r3, [pc, #500]	; (80060e8 <__ieee754_rem_pio2+0x320>)
 8005ef4:	f7fa f93a 	bl	800016c <__adddf3>
 8005ef8:	f7fa fd9e 	bl	8000a38 <__aeabi_d2iz>
 8005efc:	4605      	mov	r5, r0
 8005efe:	f7fa fa81 	bl	8000404 <__aeabi_i2d>
 8005f02:	a367      	add	r3, pc, #412	; (adr r3, 80060a0 <__ieee754_rem_pio2+0x2d8>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4630      	mov	r0, r6
 8005f16:	4639      	mov	r1, r7
 8005f18:	f7fa f926 	bl	8000168 <__aeabi_dsub>
 8005f1c:	a362      	add	r3, pc, #392	; (adr r3, 80060a8 <__ieee754_rem_pio2+0x2e0>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2a:	f7fa fad5 	bl	80004d8 <__aeabi_dmul>
 8005f2e:	2d1f      	cmp	r5, #31
 8005f30:	4680      	mov	r8, r0
 8005f32:	4689      	mov	r9, r1
 8005f34:	dc0e      	bgt.n	8005f54 <__ieee754_rem_pio2+0x18c>
 8005f36:	4b6d      	ldr	r3, [pc, #436]	; (80060ec <__ieee754_rem_pio2+0x324>)
 8005f38:	1e6a      	subs	r2, r5, #1
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	4553      	cmp	r3, sl
 8005f40:	d008      	beq.n	8005f54 <__ieee754_rem_pio2+0x18c>
 8005f42:	4642      	mov	r2, r8
 8005f44:	464b      	mov	r3, r9
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa f90d 	bl	8000168 <__aeabi_dsub>
 8005f4e:	e9c4 0100 	strd	r0, r1, [r4]
 8005f52:	e011      	b.n	8005f78 <__ieee754_rem_pio2+0x1b0>
 8005f54:	464b      	mov	r3, r9
 8005f56:	4642      	mov	r2, r8
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	f7fa f904 	bl	8000168 <__aeabi_dsub>
 8005f60:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005f64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f68:	ebaa 0303 	sub.w	r3, sl, r3
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	dc1f      	bgt.n	8005fb0 <__ieee754_rem_pio2+0x1e8>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	e9c4 2300 	strd	r2, r3, [r4]
 8005f78:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4653      	mov	r3, sl
 8005f80:	4639      	mov	r1, r7
 8005f82:	f7fa f8f1 	bl	8000168 <__aeabi_dsub>
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	f7fa f8ed 	bl	8000168 <__aeabi_dsub>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	f1bb 0f00 	cmp.w	fp, #0
 8005f96:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005f9a:	f6bf af4b 	bge.w	8005e34 <__ieee754_rem_pio2+0x6c>
 8005f9e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005fa2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 8005fa6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005faa:	60e1      	str	r1, [r4, #12]
 8005fac:	426d      	negs	r5, r5
 8005fae:	e741      	b.n	8005e34 <__ieee754_rem_pio2+0x6c>
 8005fb0:	a33f      	add	r3, pc, #252	; (adr r3, 80060b0 <__ieee754_rem_pio2+0x2e8>)
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fba:	f7fa fa8d 	bl	80004d8 <__aeabi_dmul>
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	4689      	mov	r9, r1
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	f7fa f8cd 	bl	8000168 <__aeabi_dsub>
 8005fce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	4639      	mov	r1, r7
 8005fda:	f7fa f8c5 	bl	8000168 <__aeabi_dsub>
 8005fde:	4642      	mov	r2, r8
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	f7fa f8c1 	bl	8000168 <__aeabi_dsub>
 8005fe6:	a334      	add	r3, pc, #208	; (adr r3, 80060b8 <__ieee754_rem_pio2+0x2f0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4606      	mov	r6, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff4:	f7fa fa70 	bl	80004d8 <__aeabi_dmul>
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	463b      	mov	r3, r7
 8005ffc:	f7fa f8b4 	bl	8000168 <__aeabi_dsub>
 8006000:	460b      	mov	r3, r1
 8006002:	4602      	mov	r2, r0
 8006004:	4680      	mov	r8, r0
 8006006:	4689      	mov	r9, r1
 8006008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600c:	f7fa f8ac 	bl	8000168 <__aeabi_dsub>
 8006010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006014:	ebaa 0a03 	sub.w	sl, sl, r3
 8006018:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800601c:	dc06      	bgt.n	800602c <__ieee754_rem_pio2+0x264>
 800601e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	e9c4 2300 	strd	r2, r3, [r4]
 800602a:	e7a5      	b.n	8005f78 <__ieee754_rem_pio2+0x1b0>
 800602c:	a326      	add	r3, pc, #152	; (adr r3, 80060c8 <__ieee754_rem_pio2+0x300>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006036:	f7fa fa4f 	bl	80004d8 <__aeabi_dmul>
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006046:	f7fa f88f 	bl	8000168 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006056:	f7fa f887 	bl	8000168 <__aeabi_dsub>
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	f7fa f883 	bl	8000168 <__aeabi_dsub>
 8006062:	a31b      	add	r3, pc, #108	; (adr r3, 80060d0 <__ieee754_rem_pio2+0x308>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006070:	f7fa fa32 	bl	80004d8 <__aeabi_dmul>
 8006074:	4642      	mov	r2, r8
 8006076:	464b      	mov	r3, r9
 8006078:	f7fa f876 	bl	8000168 <__aeabi_dsub>
 800607c:	4680      	mov	r8, r0
 800607e:	4689      	mov	r9, r1
 8006080:	e75f      	b.n	8005f42 <__ieee754_rem_pio2+0x17a>
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <__ieee754_rem_pio2+0x328>)
 8006084:	4592      	cmp	sl, r2
 8006086:	dd35      	ble.n	80060f4 <__ieee754_rem_pio2+0x32c>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	f7fa f86c 	bl	8000168 <__aeabi_dsub>
 8006090:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006094:	e9c4 0100 	strd	r0, r1, [r4]
 8006098:	e6a6      	b.n	8005de8 <__ieee754_rem_pio2+0x20>
 800609a:	bf00      	nop
 800609c:	f3af 8000 	nop.w
 80060a0:	54400000 	.word	0x54400000
 80060a4:	3ff921fb 	.word	0x3ff921fb
 80060a8:	1a626331 	.word	0x1a626331
 80060ac:	3dd0b461 	.word	0x3dd0b461
 80060b0:	1a600000 	.word	0x1a600000
 80060b4:	3dd0b461 	.word	0x3dd0b461
 80060b8:	2e037073 	.word	0x2e037073
 80060bc:	3ba3198a 	.word	0x3ba3198a
 80060c0:	6dc9c883 	.word	0x6dc9c883
 80060c4:	3fe45f30 	.word	0x3fe45f30
 80060c8:	2e000000 	.word	0x2e000000
 80060cc:	3ba3198a 	.word	0x3ba3198a
 80060d0:	252049c1 	.word	0x252049c1
 80060d4:	397b839a 	.word	0x397b839a
 80060d8:	3fe921fb 	.word	0x3fe921fb
 80060dc:	4002d97b 	.word	0x4002d97b
 80060e0:	3ff921fb 	.word	0x3ff921fb
 80060e4:	413921fb 	.word	0x413921fb
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	08009ee8 	.word	0x08009ee8
 80060f0:	7fefffff 	.word	0x7fefffff
 80060f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80060f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80060fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006100:	460f      	mov	r7, r1
 8006102:	4606      	mov	r6, r0
 8006104:	f7fa fc98 	bl	8000a38 <__aeabi_d2iz>
 8006108:	f7fa f97c 	bl	8000404 <__aeabi_i2d>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006118:	f7fa f826 	bl	8000168 <__aeabi_dsub>
 800611c:	2200      	movs	r2, #0
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <__ieee754_rem_pio2+0x3d8>)
 8006120:	f7fa f9da 	bl	80004d8 <__aeabi_dmul>
 8006124:	460f      	mov	r7, r1
 8006126:	4606      	mov	r6, r0
 8006128:	f7fa fc86 	bl	8000a38 <__aeabi_d2iz>
 800612c:	f7fa f96a 	bl	8000404 <__aeabi_i2d>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800613c:	f7fa f814 	bl	8000168 <__aeabi_dsub>
 8006140:	2200      	movs	r2, #0
 8006142:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <__ieee754_rem_pio2+0x3d8>)
 8006144:	f7fa f9c8 	bl	80004d8 <__aeabi_dmul>
 8006148:	f04f 0803 	mov.w	r8, #3
 800614c:	2600      	movs	r6, #0
 800614e:	2700      	movs	r7, #0
 8006150:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006154:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8006158:	4632      	mov	r2, r6
 800615a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800615e:	463b      	mov	r3, r7
 8006160:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8006164:	f7fa fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8006168:	b9b8      	cbnz	r0, 800619a <__ieee754_rem_pio2+0x3d2>
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <__ieee754_rem_pio2+0x3dc>)
 800616c:	462a      	mov	r2, r5
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	2302      	movs	r3, #2
 8006172:	4621      	mov	r1, r4
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	a806      	add	r0, sp, #24
 8006178:	4643      	mov	r3, r8
 800617a:	f000 f8d3 	bl	8006324 <__kernel_rem_pio2>
 800617e:	f1bb 0f00 	cmp.w	fp, #0
 8006182:	4605      	mov	r5, r0
 8006184:	f6bf ae56 	bge.w	8005e34 <__ieee754_rem_pio2+0x6c>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800618e:	6063      	str	r3, [r4, #4]
 8006190:	68e3      	ldr	r3, [r4, #12]
 8006192:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006196:	60e3      	str	r3, [r4, #12]
 8006198:	e708      	b.n	8005fac <__ieee754_rem_pio2+0x1e4>
 800619a:	46d0      	mov	r8, sl
 800619c:	e7dc      	b.n	8006158 <__ieee754_rem_pio2+0x390>
 800619e:	bf00      	nop
 80061a0:	41700000 	.word	0x41700000
 80061a4:	08009f68 	.word	0x08009f68

080061a8 <__kernel_cos>:
 80061a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80061b0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80061b4:	4680      	mov	r8, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	e9cd 2300 	strd	r2, r3, [sp]
 80061bc:	da04      	bge.n	80061c8 <__kernel_cos+0x20>
 80061be:	f7fa fc3b 	bl	8000a38 <__aeabi_d2iz>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f000 8086 	beq.w	80062d4 <__kernel_cos+0x12c>
 80061c8:	4642      	mov	r2, r8
 80061ca:	463b      	mov	r3, r7
 80061cc:	4640      	mov	r0, r8
 80061ce:	4639      	mov	r1, r7
 80061d0:	f7fa f982 	bl	80004d8 <__aeabi_dmul>
 80061d4:	2200      	movs	r2, #0
 80061d6:	4b4e      	ldr	r3, [pc, #312]	; (8006310 <__kernel_cos+0x168>)
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	f7fa f97c 	bl	80004d8 <__aeabi_dmul>
 80061e0:	a33f      	add	r3, pc, #252	; (adr r3, 80062e0 <__kernel_cos+0x138>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	4682      	mov	sl, r0
 80061e8:	468b      	mov	fp, r1
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f7fa f973 	bl	80004d8 <__aeabi_dmul>
 80061f2:	a33d      	add	r3, pc, #244	; (adr r3, 80062e8 <__kernel_cos+0x140>)
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f7f9 ffb8 	bl	800016c <__adddf3>
 80061fc:	4622      	mov	r2, r4
 80061fe:	462b      	mov	r3, r5
 8006200:	f7fa f96a 	bl	80004d8 <__aeabi_dmul>
 8006204:	a33a      	add	r3, pc, #232	; (adr r3, 80062f0 <__kernel_cos+0x148>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f7f9 ffad 	bl	8000168 <__aeabi_dsub>
 800620e:	4622      	mov	r2, r4
 8006210:	462b      	mov	r3, r5
 8006212:	f7fa f961 	bl	80004d8 <__aeabi_dmul>
 8006216:	a338      	add	r3, pc, #224	; (adr r3, 80062f8 <__kernel_cos+0x150>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f7f9 ffa6 	bl	800016c <__adddf3>
 8006220:	4622      	mov	r2, r4
 8006222:	462b      	mov	r3, r5
 8006224:	f7fa f958 	bl	80004d8 <__aeabi_dmul>
 8006228:	a335      	add	r3, pc, #212	; (adr r3, 8006300 <__kernel_cos+0x158>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7f9 ff9b 	bl	8000168 <__aeabi_dsub>
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	a333      	add	r3, pc, #204	; (adr r3, 8006308 <__kernel_cos+0x160>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7f9 ff94 	bl	800016c <__adddf3>
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	f7fa f946 	bl	80004d8 <__aeabi_dmul>
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006258:	4604      	mov	r4, r0
 800625a:	460d      	mov	r5, r1
 800625c:	4640      	mov	r0, r8
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa f93a 	bl	80004d8 <__aeabi_dmul>
 8006264:	460b      	mov	r3, r1
 8006266:	4602      	mov	r2, r0
 8006268:	4629      	mov	r1, r5
 800626a:	4620      	mov	r0, r4
 800626c:	f7f9 ff7c 	bl	8000168 <__aeabi_dsub>
 8006270:	4b28      	ldr	r3, [pc, #160]	; (8006314 <__kernel_cos+0x16c>)
 8006272:	4680      	mov	r8, r0
 8006274:	429e      	cmp	r6, r3
 8006276:	4689      	mov	r9, r1
 8006278:	dc0e      	bgt.n	8006298 <__kernel_cos+0xf0>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4650      	mov	r0, sl
 8006280:	4659      	mov	r1, fp
 8006282:	f7f9 ff71 	bl	8000168 <__aeabi_dsub>
 8006286:	4602      	mov	r2, r0
 8006288:	2000      	movs	r0, #0
 800628a:	460b      	mov	r3, r1
 800628c:	4922      	ldr	r1, [pc, #136]	; (8006318 <__kernel_cos+0x170>)
 800628e:	f7f9 ff6b 	bl	8000168 <__aeabi_dsub>
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	2400      	movs	r4, #0
 800629a:	4b20      	ldr	r3, [pc, #128]	; (800631c <__kernel_cos+0x174>)
 800629c:	4622      	mov	r2, r4
 800629e:	429e      	cmp	r6, r3
 80062a0:	bfcc      	ite	gt
 80062a2:	4d1f      	ldrgt	r5, [pc, #124]	; (8006320 <__kernel_cos+0x178>)
 80062a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80062a8:	462b      	mov	r3, r5
 80062aa:	2000      	movs	r0, #0
 80062ac:	491a      	ldr	r1, [pc, #104]	; (8006318 <__kernel_cos+0x170>)
 80062ae:	f7f9 ff5b 	bl	8000168 <__aeabi_dsub>
 80062b2:	4622      	mov	r2, r4
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	462b      	mov	r3, r5
 80062ba:	4650      	mov	r0, sl
 80062bc:	4659      	mov	r1, fp
 80062be:	f7f9 ff53 	bl	8000168 <__aeabi_dsub>
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	f7f9 ff4f 	bl	8000168 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4630      	mov	r0, r6
 80062d0:	4639      	mov	r1, r7
 80062d2:	e7dc      	b.n	800628e <__kernel_cos+0xe6>
 80062d4:	2000      	movs	r0, #0
 80062d6:	4910      	ldr	r1, [pc, #64]	; (8006318 <__kernel_cos+0x170>)
 80062d8:	e7db      	b.n	8006292 <__kernel_cos+0xea>
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w
 80062e0:	be8838d4 	.word	0xbe8838d4
 80062e4:	bda8fae9 	.word	0xbda8fae9
 80062e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80062ec:	3e21ee9e 	.word	0x3e21ee9e
 80062f0:	809c52ad 	.word	0x809c52ad
 80062f4:	3e927e4f 	.word	0x3e927e4f
 80062f8:	19cb1590 	.word	0x19cb1590
 80062fc:	3efa01a0 	.word	0x3efa01a0
 8006300:	16c15177 	.word	0x16c15177
 8006304:	3f56c16c 	.word	0x3f56c16c
 8006308:	5555554c 	.word	0x5555554c
 800630c:	3fa55555 	.word	0x3fa55555
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	3fd33332 	.word	0x3fd33332
 8006318:	3ff00000 	.word	0x3ff00000
 800631c:	3fe90000 	.word	0x3fe90000
 8006320:	3fd20000 	.word	0x3fd20000

08006324 <__kernel_rem_pio2>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	9104      	str	r1, [sp, #16]
 8006330:	4bbf      	ldr	r3, [pc, #764]	; (8006630 <__kernel_rem_pio2+0x30c>)
 8006332:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006334:	1ed4      	subs	r4, r2, #3
 8006336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800633a:	2500      	movs	r5, #0
 800633c:	9302      	str	r3, [sp, #8]
 800633e:	9b07      	ldr	r3, [sp, #28]
 8006340:	9008      	str	r0, [sp, #32]
 8006342:	3b01      	subs	r3, #1
 8006344:	9306      	str	r3, [sp, #24]
 8006346:	2318      	movs	r3, #24
 8006348:	fb94 f4f3 	sdiv	r4, r4, r3
 800634c:	f06f 0317 	mvn.w	r3, #23
 8006350:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006354:	fb04 3303 	mla	r3, r4, r3, r3
 8006358:	eb03 0a02 	add.w	sl, r3, r2
 800635c:	9a06      	ldr	r2, [sp, #24]
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	1aa7      	subs	r7, r4, r2
 8006362:	eb03 0802 	add.w	r8, r3, r2
 8006366:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006368:	2200      	movs	r2, #0
 800636a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800636e:	2300      	movs	r3, #0
 8006370:	ae1e      	add	r6, sp, #120	; 0x78
 8006372:	4545      	cmp	r5, r8
 8006374:	dd14      	ble.n	80063a0 <__kernel_rem_pio2+0x7c>
 8006376:	2600      	movs	r6, #0
 8006378:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800637c:	9b02      	ldr	r3, [sp, #8]
 800637e:	429e      	cmp	r6, r3
 8006380:	dc39      	bgt.n	80063f6 <__kernel_rem_pio2+0xd2>
 8006382:	9b08      	ldr	r3, [sp, #32]
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	3b08      	subs	r3, #8
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	f04f 0900 	mov.w	r9, #0
 8006392:	199d      	adds	r5, r3, r6
 8006394:	ab20      	add	r3, sp, #128	; 0x80
 8006396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	2700      	movs	r7, #0
 800639e:	e023      	b.n	80063e8 <__kernel_rem_pio2+0xc4>
 80063a0:	42ef      	cmn	r7, r5
 80063a2:	d40b      	bmi.n	80063bc <__kernel_rem_pio2+0x98>
 80063a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80063a8:	e9cd 2300 	strd	r2, r3, [sp]
 80063ac:	f7fa f82a 	bl	8000404 <__aeabi_i2d>
 80063b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80063b8:	3501      	adds	r5, #1
 80063ba:	e7da      	b.n	8006372 <__kernel_rem_pio2+0x4e>
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	e7f8      	b.n	80063b4 <__kernel_rem_pio2+0x90>
 80063c2:	9905      	ldr	r1, [sp, #20]
 80063c4:	9d00      	ldr	r5, [sp, #0]
 80063c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80063ca:	9105      	str	r1, [sp, #20]
 80063cc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80063d0:	9500      	str	r5, [sp, #0]
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7f9 fec5 	bl	800016c <__adddf3>
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	3701      	adds	r7, #1
 80063e8:	9b06      	ldr	r3, [sp, #24]
 80063ea:	429f      	cmp	r7, r3
 80063ec:	dde9      	ble.n	80063c2 <__kernel_rem_pio2+0x9e>
 80063ee:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7c2      	b.n	800637c <__kernel_rem_pio2+0x58>
 80063f6:	9b02      	ldr	r3, [sp, #8]
 80063f8:	aa0c      	add	r2, sp, #48	; 0x30
 80063fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006400:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006402:	9f02      	ldr	r7, [sp, #8]
 8006404:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006408:	930a      	str	r3, [sp, #40]	; 0x28
 800640a:	2600      	movs	r6, #0
 800640c:	ab98      	add	r3, sp, #608	; 0x260
 800640e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8006412:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006416:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800641a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800641e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8006422:	ab98      	add	r3, sp, #608	; 0x260
 8006424:	445b      	add	r3, fp
 8006426:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800642a:	1bbb      	subs	r3, r7, r6
 800642c:	2b00      	cmp	r3, #0
 800642e:	dc71      	bgt.n	8006514 <__kernel_rem_pio2+0x1f0>
 8006430:	4652      	mov	r2, sl
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f000 fbff 	bl	8006c38 <scalbn>
 800643a:	2200      	movs	r2, #0
 800643c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	f7fa f848 	bl	80004d8 <__aeabi_dmul>
 8006448:	f000 fb72 	bl	8006b30 <floor>
 800644c:	2200      	movs	r2, #0
 800644e:	4b79      	ldr	r3, [pc, #484]	; (8006634 <__kernel_rem_pio2+0x310>)
 8006450:	f7fa f842 	bl	80004d8 <__aeabi_dmul>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7f9 fe84 	bl	8000168 <__aeabi_dsub>
 8006460:	460d      	mov	r5, r1
 8006462:	4604      	mov	r4, r0
 8006464:	f7fa fae8 	bl	8000a38 <__aeabi_d2iz>
 8006468:	9005      	str	r0, [sp, #20]
 800646a:	f7f9 ffcb 	bl	8000404 <__aeabi_i2d>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4620      	mov	r0, r4
 8006474:	4629      	mov	r1, r5
 8006476:	f7f9 fe77 	bl	8000168 <__aeabi_dsub>
 800647a:	f1ba 0f00 	cmp.w	sl, #0
 800647e:	4680      	mov	r8, r0
 8006480:	4689      	mov	r9, r1
 8006482:	dd6c      	ble.n	800655e <__kernel_rem_pio2+0x23a>
 8006484:	1e7a      	subs	r2, r7, #1
 8006486:	ab0c      	add	r3, sp, #48	; 0x30
 8006488:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800648c:	f1ca 0118 	rsb	r1, sl, #24
 8006490:	9c05      	ldr	r4, [sp, #20]
 8006492:	fa40 f301 	asr.w	r3, r0, r1
 8006496:	441c      	add	r4, r3
 8006498:	408b      	lsls	r3, r1
 800649a:	1ac0      	subs	r0, r0, r3
 800649c:	ab0c      	add	r3, sp, #48	; 0x30
 800649e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80064a2:	f1ca 0317 	rsb	r3, sl, #23
 80064a6:	9405      	str	r4, [sp, #20]
 80064a8:	fa40 f303 	asr.w	r3, r0, r3
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	9b00      	ldr	r3, [sp, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd62      	ble.n	800657a <__kernel_rem_pio2+0x256>
 80064b4:	2200      	movs	r2, #0
 80064b6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80064ba:	4614      	mov	r4, r2
 80064bc:	9b05      	ldr	r3, [sp, #20]
 80064be:	3301      	adds	r3, #1
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	4297      	cmp	r7, r2
 80064c4:	f300 809f 	bgt.w	8006606 <__kernel_rem_pio2+0x2e2>
 80064c8:	f1ba 0f00 	cmp.w	sl, #0
 80064cc:	dd07      	ble.n	80064de <__kernel_rem_pio2+0x1ba>
 80064ce:	f1ba 0f01 	cmp.w	sl, #1
 80064d2:	f000 80bb 	beq.w	800664c <__kernel_rem_pio2+0x328>
 80064d6:	f1ba 0f02 	cmp.w	sl, #2
 80064da:	f000 80c1 	beq.w	8006660 <__kernel_rem_pio2+0x33c>
 80064de:	9b00      	ldr	r3, [sp, #0]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d14a      	bne.n	800657a <__kernel_rem_pio2+0x256>
 80064e4:	4642      	mov	r2, r8
 80064e6:	464b      	mov	r3, r9
 80064e8:	2000      	movs	r0, #0
 80064ea:	4953      	ldr	r1, [pc, #332]	; (8006638 <__kernel_rem_pio2+0x314>)
 80064ec:	f7f9 fe3c 	bl	8000168 <__aeabi_dsub>
 80064f0:	4680      	mov	r8, r0
 80064f2:	4689      	mov	r9, r1
 80064f4:	2c00      	cmp	r4, #0
 80064f6:	d040      	beq.n	800657a <__kernel_rem_pio2+0x256>
 80064f8:	4652      	mov	r2, sl
 80064fa:	2000      	movs	r0, #0
 80064fc:	494e      	ldr	r1, [pc, #312]	; (8006638 <__kernel_rem_pio2+0x314>)
 80064fe:	f000 fb9b 	bl	8006c38 <scalbn>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7f9 fe2d 	bl	8000168 <__aeabi_dsub>
 800650e:	4680      	mov	r8, r0
 8006510:	4689      	mov	r9, r1
 8006512:	e032      	b.n	800657a <__kernel_rem_pio2+0x256>
 8006514:	2200      	movs	r2, #0
 8006516:	4b49      	ldr	r3, [pc, #292]	; (800663c <__kernel_rem_pio2+0x318>)
 8006518:	4640      	mov	r0, r8
 800651a:	4649      	mov	r1, r9
 800651c:	f7f9 ffdc 	bl	80004d8 <__aeabi_dmul>
 8006520:	f7fa fa8a 	bl	8000a38 <__aeabi_d2iz>
 8006524:	f7f9 ff6e 	bl	8000404 <__aeabi_i2d>
 8006528:	2200      	movs	r2, #0
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <__kernel_rem_pio2+0x31c>)
 800652c:	e9cd 0100 	strd	r0, r1, [sp]
 8006530:	f7f9 ffd2 	bl	80004d8 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4640      	mov	r0, r8
 800653a:	4649      	mov	r1, r9
 800653c:	f7f9 fe14 	bl	8000168 <__aeabi_dsub>
 8006540:	f7fa fa7a 	bl	8000a38 <__aeabi_d2iz>
 8006544:	ab0c      	add	r3, sp, #48	; 0x30
 8006546:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800654a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800654e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006552:	f7f9 fe0b 	bl	800016c <__adddf3>
 8006556:	3601      	adds	r6, #1
 8006558:	4680      	mov	r8, r0
 800655a:	4689      	mov	r9, r1
 800655c:	e765      	b.n	800642a <__kernel_rem_pio2+0x106>
 800655e:	d105      	bne.n	800656c <__kernel_rem_pio2+0x248>
 8006560:	1e7b      	subs	r3, r7, #1
 8006562:	aa0c      	add	r2, sp, #48	; 0x30
 8006564:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006568:	15c3      	asrs	r3, r0, #23
 800656a:	e79f      	b.n	80064ac <__kernel_rem_pio2+0x188>
 800656c:	2200      	movs	r2, #0
 800656e:	4b35      	ldr	r3, [pc, #212]	; (8006644 <__kernel_rem_pio2+0x320>)
 8006570:	f7fa fa38 	bl	80009e4 <__aeabi_dcmpge>
 8006574:	2800      	cmp	r0, #0
 8006576:	d143      	bne.n	8006600 <__kernel_rem_pio2+0x2dc>
 8006578:	9000      	str	r0, [sp, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa fa11 	bl	80009a8 <__aeabi_dcmpeq>
 8006586:	2800      	cmp	r0, #0
 8006588:	f000 80c3 	beq.w	8006712 <__kernel_rem_pio2+0x3ee>
 800658c:	1e7c      	subs	r4, r7, #1
 800658e:	4623      	mov	r3, r4
 8006590:	2200      	movs	r2, #0
 8006592:	9902      	ldr	r1, [sp, #8]
 8006594:	428b      	cmp	r3, r1
 8006596:	da6a      	bge.n	800666e <__kernel_rem_pio2+0x34a>
 8006598:	2a00      	cmp	r2, #0
 800659a:	f000 8084 	beq.w	80066a6 <__kernel_rem_pio2+0x382>
 800659e:	ab0c      	add	r3, sp, #48	; 0x30
 80065a0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80065a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80b0 	beq.w	800670e <__kernel_rem_pio2+0x3ea>
 80065ae:	4652      	mov	r2, sl
 80065b0:	2000      	movs	r0, #0
 80065b2:	4921      	ldr	r1, [pc, #132]	; (8006638 <__kernel_rem_pio2+0x314>)
 80065b4:	f000 fb40 	bl	8006c38 <scalbn>
 80065b8:	4625      	mov	r5, r4
 80065ba:	4606      	mov	r6, r0
 80065bc:	460f      	mov	r7, r1
 80065be:	f04f 0a00 	mov.w	sl, #0
 80065c2:	00e3      	lsls	r3, r4, #3
 80065c4:	aa98      	add	r2, sp, #608	; 0x260
 80065c6:	eb02 0803 	add.w	r8, r2, r3
 80065ca:	f8df b070 	ldr.w	fp, [pc, #112]	; 800663c <__kernel_rem_pio2+0x318>
 80065ce:	9306      	str	r3, [sp, #24]
 80065d0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	f280 80d2 	bge.w	800677e <__kernel_rem_pio2+0x45a>
 80065da:	2500      	movs	r5, #0
 80065dc:	9a06      	ldr	r2, [sp, #24]
 80065de:	ab98      	add	r3, sp, #608	; 0x260
 80065e0:	189e      	adds	r6, r3, r2
 80065e2:	3ea8      	subs	r6, #168	; 0xa8
 80065e4:	1b63      	subs	r3, r4, r5
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f2c0 80f9 	blt.w	80067de <__kernel_rem_pio2+0x4ba>
 80065ec:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8006648 <__kernel_rem_pio2+0x324>
 80065f0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 80065f4:	f04f 0a00 	mov.w	sl, #0
 80065f8:	f04f 0b00 	mov.w	fp, #0
 80065fc:	2700      	movs	r7, #0
 80065fe:	e0e2      	b.n	80067c6 <__kernel_rem_pio2+0x4a2>
 8006600:	2302      	movs	r3, #2
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	e756      	b.n	80064b4 <__kernel_rem_pio2+0x190>
 8006606:	ab0c      	add	r3, sp, #48	; 0x30
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	b94c      	cbnz	r4, 8006622 <__kernel_rem_pio2+0x2fe>
 800660e:	b12b      	cbz	r3, 800661c <__kernel_rem_pio2+0x2f8>
 8006610:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006614:	a80c      	add	r0, sp, #48	; 0x30
 8006616:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800661a:	2301      	movs	r3, #1
 800661c:	3201      	adds	r2, #1
 800661e:	461c      	mov	r4, r3
 8006620:	e74f      	b.n	80064c2 <__kernel_rem_pio2+0x19e>
 8006622:	1acb      	subs	r3, r1, r3
 8006624:	a80c      	add	r0, sp, #48	; 0x30
 8006626:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800662a:	4623      	mov	r3, r4
 800662c:	e7f6      	b.n	800661c <__kernel_rem_pio2+0x2f8>
 800662e:	bf00      	nop
 8006630:	0800a0b0 	.word	0x0800a0b0
 8006634:	40200000 	.word	0x40200000
 8006638:	3ff00000 	.word	0x3ff00000
 800663c:	3e700000 	.word	0x3e700000
 8006640:	41700000 	.word	0x41700000
 8006644:	3fe00000 	.word	0x3fe00000
 8006648:	0800a068 	.word	0x0800a068
 800664c:	1e7a      	subs	r2, r7, #1
 800664e:	ab0c      	add	r3, sp, #48	; 0x30
 8006650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006654:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006658:	a90c      	add	r1, sp, #48	; 0x30
 800665a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800665e:	e73e      	b.n	80064de <__kernel_rem_pio2+0x1ba>
 8006660:	1e7a      	subs	r2, r7, #1
 8006662:	ab0c      	add	r3, sp, #48	; 0x30
 8006664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006668:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800666c:	e7f4      	b.n	8006658 <__kernel_rem_pio2+0x334>
 800666e:	a90c      	add	r1, sp, #48	; 0x30
 8006670:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006674:	3b01      	subs	r3, #1
 8006676:	430a      	orrs	r2, r1
 8006678:	e78b      	b.n	8006592 <__kernel_rem_pio2+0x26e>
 800667a:	3401      	adds	r4, #1
 800667c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006680:	2a00      	cmp	r2, #0
 8006682:	d0fa      	beq.n	800667a <__kernel_rem_pio2+0x356>
 8006684:	ab98      	add	r3, sp, #608	; 0x260
 8006686:	449b      	add	fp, r3
 8006688:	9b07      	ldr	r3, [sp, #28]
 800668a:	1c7e      	adds	r6, r7, #1
 800668c:	19dd      	adds	r5, r3, r7
 800668e:	ab98      	add	r3, sp, #608	; 0x260
 8006690:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006694:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 8006698:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800669c:	443c      	add	r4, r7
 800669e:	42b4      	cmp	r4, r6
 80066a0:	da04      	bge.n	80066ac <__kernel_rem_pio2+0x388>
 80066a2:	4627      	mov	r7, r4
 80066a4:	e6b1      	b.n	800640a <__kernel_rem_pio2+0xe6>
 80066a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a8:	2401      	movs	r4, #1
 80066aa:	e7e7      	b.n	800667c <__kernel_rem_pio2+0x358>
 80066ac:	f105 0308 	add.w	r3, r5, #8
 80066b0:	9309      	str	r3, [sp, #36]	; 0x24
 80066b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b4:	2700      	movs	r7, #0
 80066b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80066ba:	f7f9 fea3 	bl	8000404 <__aeabi_i2d>
 80066be:	f04f 0800 	mov.w	r8, #0
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	9b08      	ldr	r3, [sp, #32]
 80066c8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80066cc:	3b08      	subs	r3, #8
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	f105 0310 	add.w	r3, r5, #16
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	9b06      	ldr	r3, [sp, #24]
 80066d8:	429f      	cmp	r7, r3
 80066da:	dd04      	ble.n	80066e6 <__kernel_rem_pio2+0x3c2>
 80066dc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 80066e0:	3601      	adds	r6, #1
 80066e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066e4:	e7db      	b.n	800669e <__kernel_rem_pio2+0x37a>
 80066e6:	9905      	ldr	r1, [sp, #20]
 80066e8:	9d00      	ldr	r5, [sp, #0]
 80066ea:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80066ee:	9105      	str	r1, [sp, #20]
 80066f0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80066f4:	9500      	str	r5, [sp, #0]
 80066f6:	f7f9 feef 	bl	80004d8 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4640      	mov	r0, r8
 8006700:	4649      	mov	r1, r9
 8006702:	f7f9 fd33 	bl	800016c <__adddf3>
 8006706:	3701      	adds	r7, #1
 8006708:	4680      	mov	r8, r0
 800670a:	4689      	mov	r9, r1
 800670c:	e7e3      	b.n	80066d6 <__kernel_rem_pio2+0x3b2>
 800670e:	3c01      	subs	r4, #1
 8006710:	e745      	b.n	800659e <__kernel_rem_pio2+0x27a>
 8006712:	f1ca 0200 	rsb	r2, sl, #0
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f000 fa8d 	bl	8006c38 <scalbn>
 800671e:	2200      	movs	r2, #0
 8006720:	4ba3      	ldr	r3, [pc, #652]	; (80069b0 <__kernel_rem_pio2+0x68c>)
 8006722:	4604      	mov	r4, r0
 8006724:	460d      	mov	r5, r1
 8006726:	f7fa f95d 	bl	80009e4 <__aeabi_dcmpge>
 800672a:	b1f8      	cbz	r0, 800676c <__kernel_rem_pio2+0x448>
 800672c:	2200      	movs	r2, #0
 800672e:	4ba1      	ldr	r3, [pc, #644]	; (80069b4 <__kernel_rem_pio2+0x690>)
 8006730:	4620      	mov	r0, r4
 8006732:	4629      	mov	r1, r5
 8006734:	f7f9 fed0 	bl	80004d8 <__aeabi_dmul>
 8006738:	f7fa f97e 	bl	8000a38 <__aeabi_d2iz>
 800673c:	4606      	mov	r6, r0
 800673e:	f7f9 fe61 	bl	8000404 <__aeabi_i2d>
 8006742:	2200      	movs	r2, #0
 8006744:	4b9a      	ldr	r3, [pc, #616]	; (80069b0 <__kernel_rem_pio2+0x68c>)
 8006746:	f7f9 fec7 	bl	80004d8 <__aeabi_dmul>
 800674a:	460b      	mov	r3, r1
 800674c:	4602      	mov	r2, r0
 800674e:	4629      	mov	r1, r5
 8006750:	4620      	mov	r0, r4
 8006752:	f7f9 fd09 	bl	8000168 <__aeabi_dsub>
 8006756:	f7fa f96f 	bl	8000a38 <__aeabi_d2iz>
 800675a:	1c7c      	adds	r4, r7, #1
 800675c:	ab0c      	add	r3, sp, #48	; 0x30
 800675e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006762:	f10a 0a18 	add.w	sl, sl, #24
 8006766:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800676a:	e720      	b.n	80065ae <__kernel_rem_pio2+0x28a>
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7fa f962 	bl	8000a38 <__aeabi_d2iz>
 8006774:	ab0c      	add	r3, sp, #48	; 0x30
 8006776:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800677a:	463c      	mov	r4, r7
 800677c:	e717      	b.n	80065ae <__kernel_rem_pio2+0x28a>
 800677e:	ab0c      	add	r3, sp, #48	; 0x30
 8006780:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006784:	f7f9 fe3e 	bl	8000404 <__aeabi_i2d>
 8006788:	4632      	mov	r2, r6
 800678a:	463b      	mov	r3, r7
 800678c:	f7f9 fea4 	bl	80004d8 <__aeabi_dmul>
 8006790:	4652      	mov	r2, sl
 8006792:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006796:	465b      	mov	r3, fp
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7f9 fe9c 	bl	80004d8 <__aeabi_dmul>
 80067a0:	3d01      	subs	r5, #1
 80067a2:	4606      	mov	r6, r0
 80067a4:	460f      	mov	r7, r1
 80067a6:	e715      	b.n	80065d4 <__kernel_rem_pio2+0x2b0>
 80067a8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80067ac:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4650      	mov	r0, sl
 80067ba:	4659      	mov	r1, fp
 80067bc:	f7f9 fcd6 	bl	800016c <__adddf3>
 80067c0:	4682      	mov	sl, r0
 80067c2:	468b      	mov	fp, r1
 80067c4:	3701      	adds	r7, #1
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	429f      	cmp	r7, r3
 80067ca:	dc01      	bgt.n	80067d0 <__kernel_rem_pio2+0x4ac>
 80067cc:	42bd      	cmp	r5, r7
 80067ce:	daeb      	bge.n	80067a8 <__kernel_rem_pio2+0x484>
 80067d0:	ab48      	add	r3, sp, #288	; 0x120
 80067d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80067d6:	e9c3 ab00 	strd	sl, fp, [r3]
 80067da:	3501      	adds	r5, #1
 80067dc:	e702      	b.n	80065e4 <__kernel_rem_pio2+0x2c0>
 80067de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d86c      	bhi.n	80068be <__kernel_rem_pio2+0x59a>
 80067e4:	e8df f003 	tbb	[pc, r3]
 80067e8:	022f2f59 	.word	0x022f2f59
 80067ec:	9a06      	ldr	r2, [sp, #24]
 80067ee:	ab48      	add	r3, sp, #288	; 0x120
 80067f0:	189d      	adds	r5, r3, r2
 80067f2:	46aa      	mov	sl, r5
 80067f4:	46a3      	mov	fp, r4
 80067f6:	f1bb 0f00 	cmp.w	fp, #0
 80067fa:	f300 8087 	bgt.w	800690c <__kernel_rem_pio2+0x5e8>
 80067fe:	46a2      	mov	sl, r4
 8006800:	f1ba 0f01 	cmp.w	sl, #1
 8006804:	f300 809f 	bgt.w	8006946 <__kernel_rem_pio2+0x622>
 8006808:	2700      	movs	r7, #0
 800680a:	463e      	mov	r6, r7
 800680c:	9d06      	ldr	r5, [sp, #24]
 800680e:	ab48      	add	r3, sp, #288	; 0x120
 8006810:	3508      	adds	r5, #8
 8006812:	441d      	add	r5, r3
 8006814:	2c01      	cmp	r4, #1
 8006816:	f300 80b3 	bgt.w	8006980 <__kernel_rem_pio2+0x65c>
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800681e:	9849      	ldr	r0, [sp, #292]	; 0x124
 8006820:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 8006822:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 80b5 	bne.w	8006994 <__kernel_rem_pio2+0x670>
 800682a:	4603      	mov	r3, r0
 800682c:	462a      	mov	r2, r5
 800682e:	9804      	ldr	r0, [sp, #16]
 8006830:	e9c0 2300 	strd	r2, r3, [r0]
 8006834:	4622      	mov	r2, r4
 8006836:	460b      	mov	r3, r1
 8006838:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800683c:	463a      	mov	r2, r7
 800683e:	4633      	mov	r3, r6
 8006840:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006844:	e03b      	b.n	80068be <__kernel_rem_pio2+0x59a>
 8006846:	f04f 0c00 	mov.w	ip, #0
 800684a:	4626      	mov	r6, r4
 800684c:	4667      	mov	r7, ip
 800684e:	9d06      	ldr	r5, [sp, #24]
 8006850:	ab48      	add	r3, sp, #288	; 0x120
 8006852:	3508      	adds	r5, #8
 8006854:	441d      	add	r5, r3
 8006856:	2e00      	cmp	r6, #0
 8006858:	da42      	bge.n	80068e0 <__kernel_rem_pio2+0x5bc>
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d049      	beq.n	80068f4 <__kernel_rem_pio2+0x5d0>
 8006860:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8006864:	4662      	mov	r2, ip
 8006866:	460b      	mov	r3, r1
 8006868:	9904      	ldr	r1, [sp, #16]
 800686a:	2601      	movs	r6, #1
 800686c:	e9c1 2300 	strd	r2, r3, [r1]
 8006870:	a948      	add	r1, sp, #288	; 0x120
 8006872:	463b      	mov	r3, r7
 8006874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006878:	f7f9 fc76 	bl	8000168 <__aeabi_dsub>
 800687c:	4684      	mov	ip, r0
 800687e:	460f      	mov	r7, r1
 8006880:	ad48      	add	r5, sp, #288	; 0x120
 8006882:	42b4      	cmp	r4, r6
 8006884:	da38      	bge.n	80068f8 <__kernel_rem_pio2+0x5d4>
 8006886:	9b00      	ldr	r3, [sp, #0]
 8006888:	b10b      	cbz	r3, 800688e <__kernel_rem_pio2+0x56a>
 800688a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800688e:	4662      	mov	r2, ip
 8006890:	463b      	mov	r3, r7
 8006892:	9904      	ldr	r1, [sp, #16]
 8006894:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006898:	e011      	b.n	80068be <__kernel_rem_pio2+0x59a>
 800689a:	2700      	movs	r7, #0
 800689c:	463d      	mov	r5, r7
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	aa98      	add	r2, sp, #608	; 0x260
 80068a2:	4413      	add	r3, r2
 80068a4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	da0f      	bge.n	80068cc <__kernel_rem_pio2+0x5a8>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	b10b      	cbz	r3, 80068b4 <__kernel_rem_pio2+0x590>
 80068b0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80068b4:	463a      	mov	r2, r7
 80068b6:	462b      	mov	r3, r5
 80068b8:	9904      	ldr	r1, [sp, #16]
 80068ba:	e9c1 2300 	strd	r2, r3, [r1]
 80068be:	9b05      	ldr	r3, [sp, #20]
 80068c0:	f003 0007 	and.w	r0, r3, #7
 80068c4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	4638      	mov	r0, r7
 80068ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7f9 fc4a 	bl	800016c <__adddf3>
 80068d8:	3c01      	subs	r4, #1
 80068da:	4607      	mov	r7, r0
 80068dc:	460d      	mov	r5, r1
 80068de:	e7e3      	b.n	80068a8 <__kernel_rem_pio2+0x584>
 80068e0:	4660      	mov	r0, ip
 80068e2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7f9 fc40 	bl	800016c <__adddf3>
 80068ec:	3e01      	subs	r6, #1
 80068ee:	4684      	mov	ip, r0
 80068f0:	460f      	mov	r7, r1
 80068f2:	e7b0      	b.n	8006856 <__kernel_rem_pio2+0x532>
 80068f4:	4639      	mov	r1, r7
 80068f6:	e7b5      	b.n	8006864 <__kernel_rem_pio2+0x540>
 80068f8:	4660      	mov	r0, ip
 80068fa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fc34 	bl	800016c <__adddf3>
 8006904:	3601      	adds	r6, #1
 8006906:	4684      	mov	ip, r0
 8006908:	460f      	mov	r7, r1
 800690a:	e7ba      	b.n	8006882 <__kernel_rem_pio2+0x55e>
 800690c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 8006910:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800691c:	f7f9 fc26 	bl	800016c <__adddf3>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4606      	mov	r6, r0
 8006926:	460f      	mov	r7, r1
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7f9 fc1c 	bl	8000168 <__aeabi_dsub>
 8006930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006934:	f7f9 fc1a 	bl	800016c <__adddf3>
 8006938:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800693c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006940:	e9ca 6700 	strd	r6, r7, [sl]
 8006944:	e757      	b.n	80067f6 <__kernel_rem_pio2+0x4d2>
 8006946:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800694a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006956:	f7f9 fc09 	bl	800016c <__adddf3>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4680      	mov	r8, r0
 8006960:	4689      	mov	r9, r1
 8006962:	4630      	mov	r0, r6
 8006964:	4639      	mov	r1, r7
 8006966:	f7f9 fbff 	bl	8000168 <__aeabi_dsub>
 800696a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800696e:	f7f9 fbfd 	bl	800016c <__adddf3>
 8006972:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006976:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800697a:	e9c5 8900 	strd	r8, r9, [r5]
 800697e:	e73f      	b.n	8006800 <__kernel_rem_pio2+0x4dc>
 8006980:	4638      	mov	r0, r7
 8006982:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006986:	4631      	mov	r1, r6
 8006988:	f7f9 fbf0 	bl	800016c <__adddf3>
 800698c:	3c01      	subs	r4, #1
 800698e:	4607      	mov	r7, r0
 8006990:	460e      	mov	r6, r1
 8006992:	e73f      	b.n	8006814 <__kernel_rem_pio2+0x4f0>
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800699a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800699e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80069a2:	601d      	str	r5, [r3, #0]
 80069a4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80069a8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80069ac:	615e      	str	r6, [r3, #20]
 80069ae:	e786      	b.n	80068be <__kernel_rem_pio2+0x59a>
 80069b0:	41700000 	.word	0x41700000
 80069b4:	3e700000 	.word	0x3e700000

080069b8 <__kernel_sin>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	b086      	sub	sp, #24
 80069be:	e9cd 2300 	strd	r2, r3, [sp]
 80069c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80069ca:	4682      	mov	sl, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80069d0:	da03      	bge.n	80069da <__kernel_sin+0x22>
 80069d2:	f7fa f831 	bl	8000a38 <__aeabi_d2iz>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d050      	beq.n	8006a7c <__kernel_sin+0xc4>
 80069da:	4652      	mov	r2, sl
 80069dc:	4623      	mov	r3, r4
 80069de:	4650      	mov	r0, sl
 80069e0:	4621      	mov	r1, r4
 80069e2:	f7f9 fd79 	bl	80004d8 <__aeabi_dmul>
 80069e6:	4606      	mov	r6, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4650      	mov	r0, sl
 80069f0:	4621      	mov	r1, r4
 80069f2:	f7f9 fd71 	bl	80004d8 <__aeabi_dmul>
 80069f6:	a33e      	add	r3, pc, #248	; (adr r3, 8006af0 <__kernel_sin+0x138>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	4680      	mov	r8, r0
 80069fe:	4689      	mov	r9, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fd68 	bl	80004d8 <__aeabi_dmul>
 8006a08:	a33b      	add	r3, pc, #236	; (adr r3, 8006af8 <__kernel_sin+0x140>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fbab 	bl	8000168 <__aeabi_dsub>
 8006a12:	4632      	mov	r2, r6
 8006a14:	463b      	mov	r3, r7
 8006a16:	f7f9 fd5f 	bl	80004d8 <__aeabi_dmul>
 8006a1a:	a339      	add	r3, pc, #228	; (adr r3, 8006b00 <__kernel_sin+0x148>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fba4 	bl	800016c <__adddf3>
 8006a24:	4632      	mov	r2, r6
 8006a26:	463b      	mov	r3, r7
 8006a28:	f7f9 fd56 	bl	80004d8 <__aeabi_dmul>
 8006a2c:	a336      	add	r3, pc, #216	; (adr r3, 8006b08 <__kernel_sin+0x150>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f7f9 fb99 	bl	8000168 <__aeabi_dsub>
 8006a36:	4632      	mov	r2, r6
 8006a38:	463b      	mov	r3, r7
 8006a3a:	f7f9 fd4d 	bl	80004d8 <__aeabi_dmul>
 8006a3e:	a334      	add	r3, pc, #208	; (adr r3, 8006b10 <__kernel_sin+0x158>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fb92 	bl	800016c <__adddf3>
 8006a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a4c:	b9dd      	cbnz	r5, 8006a86 <__kernel_sin+0xce>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fd3f 	bl	80004d8 <__aeabi_dmul>
 8006a5a:	a32f      	add	r3, pc, #188	; (adr r3, 8006b18 <__kernel_sin+0x160>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f7f9 fb82 	bl	8000168 <__aeabi_dsub>
 8006a64:	4642      	mov	r2, r8
 8006a66:	464b      	mov	r3, r9
 8006a68:	f7f9 fd36 	bl	80004d8 <__aeabi_dmul>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4650      	mov	r0, sl
 8006a72:	4621      	mov	r1, r4
 8006a74:	f7f9 fb7a 	bl	800016c <__adddf3>
 8006a78:	4682      	mov	sl, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	4621      	mov	r1, r4
 8006a80:	b006      	add	sp, #24
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a86:	2200      	movs	r2, #0
 8006a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__kernel_sin+0x168>)
 8006a8e:	f7f9 fd23 	bl	80004d8 <__aeabi_dmul>
 8006a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7f9 fd1b 	bl	80004d8 <__aeabi_dmul>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aaa:	f7f9 fb5d 	bl	8000168 <__aeabi_dsub>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd11 	bl	80004d8 <__aeabi_dmul>
 8006ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aba:	f7f9 fb55 	bl	8000168 <__aeabi_dsub>
 8006abe:	a316      	add	r3, pc, #88	; (adr r3, 8006b18 <__kernel_sin+0x160>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fd04 	bl	80004d8 <__aeabi_dmul>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	4639      	mov	r1, r7
 8006ad8:	f7f9 fb48 	bl	800016c <__adddf3>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4650      	mov	r0, sl
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	f7f9 fb40 	bl	8000168 <__aeabi_dsub>
 8006ae8:	e7c6      	b.n	8006a78 <__kernel_sin+0xc0>
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w
 8006af0:	5acfd57c 	.word	0x5acfd57c
 8006af4:	3de5d93a 	.word	0x3de5d93a
 8006af8:	8a2b9ceb 	.word	0x8a2b9ceb
 8006afc:	3e5ae5e6 	.word	0x3e5ae5e6
 8006b00:	57b1fe7d 	.word	0x57b1fe7d
 8006b04:	3ec71de3 	.word	0x3ec71de3
 8006b08:	19c161d5 	.word	0x19c161d5
 8006b0c:	3f2a01a0 	.word	0x3f2a01a0
 8006b10:	1110f8a6 	.word	0x1110f8a6
 8006b14:	3f811111 	.word	0x3f811111
 8006b18:	55555549 	.word	0x55555549
 8006b1c:	3fc55555 	.word	0x3fc55555
 8006b20:	3fe00000 	.word	0x3fe00000

08006b24 <fabs>:
 8006b24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4770      	bx	lr
 8006b2c:	0000      	movs	r0, r0
	...

08006b30 <floor>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006b38:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006b3c:	2e13      	cmp	r6, #19
 8006b3e:	4607      	mov	r7, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	460c      	mov	r4, r1
 8006b44:	4605      	mov	r5, r0
 8006b46:	dc35      	bgt.n	8006bb4 <floor+0x84>
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	da16      	bge.n	8006b7a <floor+0x4a>
 8006b4c:	a336      	add	r3, pc, #216	; (adr r3, 8006c28 <floor+0xf8>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fb0b 	bl	800016c <__adddf3>
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f7f9 ff4d 	bl	80009f8 <__aeabi_dcmpgt>
 8006b5e:	b148      	cbz	r0, 8006b74 <floor+0x44>
 8006b60:	2c00      	cmp	r4, #0
 8006b62:	da5b      	bge.n	8006c1c <floor+0xec>
 8006b64:	2500      	movs	r5, #0
 8006b66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b6a:	4a31      	ldr	r2, [pc, #196]	; (8006c30 <floor+0x100>)
 8006b6c:	433b      	orrs	r3, r7
 8006b6e:	42ab      	cmp	r3, r5
 8006b70:	bf18      	it	ne
 8006b72:	4614      	movne	r4, r2
 8006b74:	4623      	mov	r3, r4
 8006b76:	462f      	mov	r7, r5
 8006b78:	e026      	b.n	8006bc8 <floor+0x98>
 8006b7a:	4a2e      	ldr	r2, [pc, #184]	; (8006c34 <floor+0x104>)
 8006b7c:	fa42 f806 	asr.w	r8, r2, r6
 8006b80:	ea01 0208 	and.w	r2, r1, r8
 8006b84:	4302      	orrs	r2, r0
 8006b86:	d01f      	beq.n	8006bc8 <floor+0x98>
 8006b88:	a327      	add	r3, pc, #156	; (adr r3, 8006c28 <floor+0xf8>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	f7f9 faed 	bl	800016c <__adddf3>
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	f7f9 ff2f 	bl	80009f8 <__aeabi_dcmpgt>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0ea      	beq.n	8006b74 <floor+0x44>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	bfbe      	ittt	lt
 8006ba2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ba6:	fa43 f606 	asrlt.w	r6, r3, r6
 8006baa:	19a4      	addlt	r4, r4, r6
 8006bac:	ea24 0408 	bic.w	r4, r4, r8
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	e7df      	b.n	8006b74 <floor+0x44>
 8006bb4:	2e33      	cmp	r6, #51	; 0x33
 8006bb6:	dd0b      	ble.n	8006bd0 <floor+0xa0>
 8006bb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006bbc:	d104      	bne.n	8006bc8 <floor+0x98>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	f7f9 fad4 	bl	800016c <__adddf3>
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4638      	mov	r0, r7
 8006bca:	4619      	mov	r1, r3
 8006bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bd4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006bd8:	fa22 f808 	lsr.w	r8, r2, r8
 8006bdc:	ea18 0f00 	tst.w	r8, r0
 8006be0:	d0f2      	beq.n	8006bc8 <floor+0x98>
 8006be2:	a311      	add	r3, pc, #68	; (adr r3, 8006c28 <floor+0xf8>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f7f9 fac0 	bl	800016c <__adddf3>
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f7f9 ff02 	bl	80009f8 <__aeabi_dcmpgt>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d0bd      	beq.n	8006b74 <floor+0x44>
 8006bf8:	2c00      	cmp	r4, #0
 8006bfa:	da02      	bge.n	8006c02 <floor+0xd2>
 8006bfc:	2e14      	cmp	r6, #20
 8006bfe:	d103      	bne.n	8006c08 <floor+0xd8>
 8006c00:	3401      	adds	r4, #1
 8006c02:	ea25 0508 	bic.w	r5, r5, r8
 8006c06:	e7b5      	b.n	8006b74 <floor+0x44>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c0e:	fa03 f606 	lsl.w	r6, r3, r6
 8006c12:	4435      	add	r5, r6
 8006c14:	42bd      	cmp	r5, r7
 8006c16:	bf38      	it	cc
 8006c18:	18e4      	addcc	r4, r4, r3
 8006c1a:	e7f2      	b.n	8006c02 <floor+0xd2>
 8006c1c:	2500      	movs	r5, #0
 8006c1e:	462c      	mov	r4, r5
 8006c20:	e7a8      	b.n	8006b74 <floor+0x44>
 8006c22:	bf00      	nop
 8006c24:	f3af 8000 	nop.w
 8006c28:	8800759c 	.word	0x8800759c
 8006c2c:	7e37e43c 	.word	0x7e37e43c
 8006c30:	bff00000 	.word	0xbff00000
 8006c34:	000fffff 	.word	0x000fffff

08006c38 <scalbn>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	460b      	mov	r3, r1
 8006c46:	b982      	cbnz	r2, 8006c6a <scalbn+0x32>
 8006c48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c4c:	4303      	orrs	r3, r0
 8006c4e:	d034      	beq.n	8006cba <scalbn+0x82>
 8006c50:	4b2d      	ldr	r3, [pc, #180]	; (8006d08 <scalbn+0xd0>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	f7f9 fc40 	bl	80004d8 <__aeabi_dmul>
 8006c58:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <scalbn+0xd4>)
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	429e      	cmp	r6, r3
 8006c5e:	460d      	mov	r5, r1
 8006c60:	da0d      	bge.n	8006c7e <scalbn+0x46>
 8006c62:	a325      	add	r3, pc, #148	; (adr r3, 8006cf8 <scalbn+0xc0>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	e01c      	b.n	8006ca4 <scalbn+0x6c>
 8006c6a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006c6e:	42ba      	cmp	r2, r7
 8006c70:	d109      	bne.n	8006c86 <scalbn+0x4e>
 8006c72:	4602      	mov	r2, r0
 8006c74:	f7f9 fa7a 	bl	800016c <__adddf3>
 8006c78:	4604      	mov	r4, r0
 8006c7a:	460d      	mov	r5, r1
 8006c7c:	e01d      	b.n	8006cba <scalbn+0x82>
 8006c7e:	460b      	mov	r3, r1
 8006c80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006c84:	3a36      	subs	r2, #54	; 0x36
 8006c86:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006c8a:	4432      	add	r2, r6
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	dd0c      	ble.n	8006caa <scalbn+0x72>
 8006c90:	4622      	mov	r2, r4
 8006c92:	462b      	mov	r3, r5
 8006c94:	a11a      	add	r1, pc, #104	; (adr r1, 8006d00 <scalbn+0xc8>)
 8006c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9a:	f000 f83b 	bl	8006d14 <copysign>
 8006c9e:	a318      	add	r3, pc, #96	; (adr r3, 8006d00 <scalbn+0xc8>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	e7e6      	b.n	8006c78 <scalbn+0x40>
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	dd08      	ble.n	8006cc0 <scalbn+0x88>
 8006cae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cb6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006cc4:	da0b      	bge.n	8006cde <scalbn+0xa6>
 8006cc6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006cca:	429e      	cmp	r6, r3
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	dce0      	bgt.n	8006c94 <scalbn+0x5c>
 8006cd2:	a109      	add	r1, pc, #36	; (adr r1, 8006cf8 <scalbn+0xc0>)
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	f000 f81c 	bl	8006d14 <copysign>
 8006cdc:	e7c1      	b.n	8006c62 <scalbn+0x2a>
 8006cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ce2:	3236      	adds	r2, #54	; 0x36
 8006ce4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ce8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cec:	4620      	mov	r0, r4
 8006cee:	4629      	mov	r1, r5
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <scalbn+0xd8>)
 8006cf4:	e7d6      	b.n	8006ca4 <scalbn+0x6c>
 8006cf6:	bf00      	nop
 8006cf8:	c2f8f359 	.word	0xc2f8f359
 8006cfc:	01a56e1f 	.word	0x01a56e1f
 8006d00:	8800759c 	.word	0x8800759c
 8006d04:	7e37e43c 	.word	0x7e37e43c
 8006d08:	43500000 	.word	0x43500000
 8006d0c:	ffff3cb0 	.word	0xffff3cb0
 8006d10:	3c900000 	.word	0x3c900000

08006d14 <copysign>:
 8006d14:	b530      	push	{r4, r5, lr}
 8006d16:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1e:	ea42 0503 	orr.w	r5, r2, r3
 8006d22:	4629      	mov	r1, r5
 8006d24:	bd30      	pop	{r4, r5, pc}
	...

08006d28 <_init>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr

08006d34 <_fini>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr
