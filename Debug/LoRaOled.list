
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000142c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001538  08001538  00011538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001564  08001564  00011564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  2000000c  08001574  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000014c  08001574  0002014c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cdaa  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fdd  00000000  00000000  0002cddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007359  00000000  00000000  0002edbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000918  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef8  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00013bfc  00000000  00000000  00037928  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009694  00000000  00000000  0004b524  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006f4bc  00000000  00000000  00054bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000c4074  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001bd8  00000000  00000000  000c40f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001520 	.word	0x08001520

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001520 	.word	0x08001520

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b2 	bl	80004cc <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f974 	bl	8000464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4620      	mov	r0, r4
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 8000180:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
 8000186:	e7fc      	b.n	8000182 <HAL_InitTick+0x36>
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f94d 	bl	8000440 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f816 	bl	80011dc <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	42a0      	cmp	r0, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000200:	2300      	movs	r3, #0
{ 
 8000202:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000204:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800020a:	2b01      	cmp	r3, #1
 800020c:	d06d      	beq.n	80002ea <HAL_ADC_ConfigChannel+0xea>
 800020e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000210:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000212:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000216:	2d06      	cmp	r5, #6
 8000218:	6802      	ldr	r2, [r0, #0]
 800021a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800021e:	680c      	ldr	r4, [r1, #0]
 8000220:	d823      	bhi.n	800026a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000222:	261f      	movs	r6, #31
 8000224:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000226:	3b05      	subs	r3, #5
 8000228:	409e      	lsls	r6, r3
 800022a:	ea25 0506 	bic.w	r5, r5, r6
 800022e:	fa04 f303 	lsl.w	r3, r4, r3
 8000232:	432b      	orrs	r3, r5
 8000234:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000236:	2c09      	cmp	r4, #9
 8000238:	688b      	ldr	r3, [r1, #8]
 800023a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800023e:	f04f 0107 	mov.w	r1, #7
 8000242:	d92a      	bls.n	800029a <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000244:	68d6      	ldr	r6, [r2, #12]
 8000246:	3d1e      	subs	r5, #30
 8000248:	40a9      	lsls	r1, r5
 800024a:	ea26 0101 	bic.w	r1, r6, r1
 800024e:	40ab      	lsls	r3, r5
 8000250:	430b      	orrs	r3, r1
 8000252:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000254:	f1a4 0310 	sub.w	r3, r4, #16
 8000258:	2b01      	cmp	r3, #1
 800025a:	d926      	bls.n	80002aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800025e:	2200      	movs	r2, #0
 8000260:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000264:	4618      	mov	r0, r3
 8000266:	b002      	add	sp, #8
 8000268:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800026a:	2d0c      	cmp	r5, #12
 800026c:	f04f 051f 	mov.w	r5, #31
 8000270:	d809      	bhi.n	8000286 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000272:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000274:	3b23      	subs	r3, #35	; 0x23
 8000276:	409d      	lsls	r5, r3
 8000278:	ea26 0505 	bic.w	r5, r6, r5
 800027c:	fa04 f303 	lsl.w	r3, r4, r3
 8000280:	432b      	orrs	r3, r5
 8000282:	6313      	str	r3, [r2, #48]	; 0x30
 8000284:	e7d7      	b.n	8000236 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000286:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000288:	3b41      	subs	r3, #65	; 0x41
 800028a:	409d      	lsls	r5, r3
 800028c:	ea26 0505 	bic.w	r5, r6, r5
 8000290:	fa04 f303 	lsl.w	r3, r4, r3
 8000294:	432b      	orrs	r3, r5
 8000296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000298:	e7cd      	b.n	8000236 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800029a:	6916      	ldr	r6, [r2, #16]
 800029c:	40a9      	lsls	r1, r5
 800029e:	ea26 0101 	bic.w	r1, r6, r1
 80002a2:	40ab      	lsls	r3, r5
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6113      	str	r3, [r2, #16]
 80002a8:	e7d4      	b.n	8000254 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <HAL_ADC_ConfigChannel+0xf0>)
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d116      	bne.n	80002de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002b0:	6893      	ldr	r3, [r2, #8]
 80002b2:	021b      	lsls	r3, r3, #8
 80002b4:	d4d2      	bmi.n	800025c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002b6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002b8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002be:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002c0:	d1cc      	bne.n	800025c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <HAL_ADC_ConfigChannel+0xf4>)
 80002c4:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <HAL_ADC_ConfigChannel+0xf8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80002cc:	230a      	movs	r3, #10
 80002ce:	4353      	muls	r3, r2
            wait_loop_index--;
 80002d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0c1      	beq.n	800025c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	3b01      	subs	r3, #1
 80002dc:	e7f8      	b.n	80002d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002e0:	f043 0320 	orr.w	r3, r3, #32
 80002e4:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e7b9      	b.n	800025e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80002ea:	2302      	movs	r3, #2
 80002ec:	e7ba      	b.n	8000264 <HAL_ADC_ConfigChannel+0x64>
 80002ee:	bf00      	nop
 80002f0:	40012400 	.word	0x40012400
 80002f4:	20000008 	.word	0x20000008
 80002f8:	000f4240 	.word	0x000f4240

080002fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002fe:	6803      	ldr	r3, [r0, #0]
{
 8000300:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	d401      	bmi.n	800030c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000308:	2000      	movs	r0, #0
}
 800030a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	f022 0201 	bic.w	r2, r2, #1
 8000312:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000314:	f7ff ff5c 	bl	80001d0 <HAL_GetTick>
 8000318:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800031a:	6823      	ldr	r3, [r4, #0]
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	07db      	lsls	r3, r3, #31
 8000320:	d5f2      	bpl.n	8000308 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000322:	f7ff ff55 	bl	80001d0 <HAL_GetTick>
 8000326:	1b40      	subs	r0, r0, r5
 8000328:	2802      	cmp	r0, #2
 800032a:	d9f6      	bls.n	800031a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800033e:	e7e4      	b.n	800030a <ADC_ConversionStop_Disable+0xe>

08000340 <HAL_ADC_Init>:
{
 8000340:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000342:	4604      	mov	r4, r0
 8000344:	2800      	cmp	r0, #0
 8000346:	d070      	beq.n	800042a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800034a:	b923      	cbnz	r3, 8000356 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800034c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800034e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000352:	f000 ff65 	bl	8001220 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000356:	4620      	mov	r0, r4
 8000358:	f7ff ffd0 	bl	80002fc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800035e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000364:	d163      	bne.n	800042e <HAL_ADC_Init+0xee>
 8000366:	2800      	cmp	r0, #0
 8000368:	d161      	bne.n	800042e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800036a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800036c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000370:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000372:	f023 0302 	bic.w	r3, r3, #2
 8000376:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800037a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800037c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000380:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000382:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000386:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800038a:	d037      	beq.n	80003fc <HAL_ADC_Init+0xbc>
 800038c:	2901      	cmp	r1, #1
 800038e:	bf14      	ite	ne
 8000390:	4606      	movne	r6, r0
 8000392:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000396:	7d25      	ldrb	r5, [r4, #20]
 8000398:	2d01      	cmp	r5, #1
 800039a:	d106      	bne.n	80003aa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800039c:	bb83      	cbnz	r3, 8000400 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800039e:	69a3      	ldr	r3, [r4, #24]
 80003a0:	3b01      	subs	r3, #1
 80003a2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003a6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003aa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003b0:	685d      	ldr	r5, [r3, #4]
 80003b2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003b6:	ea45 0506 	orr.w	r5, r5, r6
 80003ba:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003bc:	689e      	ldr	r6, [r3, #8]
 80003be:	4d1e      	ldr	r5, [pc, #120]	; (8000438 <HAL_ADC_Init+0xf8>)
 80003c0:	ea05 0506 	and.w	r5, r5, r6
 80003c4:	ea45 0502 	orr.w	r5, r5, r2
 80003c8:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ca:	d001      	beq.n	80003d0 <HAL_ADC_Init+0x90>
 80003cc:	2901      	cmp	r1, #1
 80003ce:	d120      	bne.n	8000412 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003d0:	6921      	ldr	r1, [r4, #16]
 80003d2:	3901      	subs	r1, #1
 80003d4:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003d6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003d8:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003dc:	4329      	orrs	r1, r5
 80003de:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	6899      	ldr	r1, [r3, #8]
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <HAL_ADC_Init+0xfc>)
 80003e4:	400b      	ands	r3, r1
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d115      	bne.n	8000416 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 80003ea:	2300      	movs	r3, #0
 80003ec:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003f0:	f023 0303 	bic.w	r3, r3, #3
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003fc:	460e      	mov	r6, r1
 80003fe:	e7ca      	b.n	8000396 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000410:	e7cb      	b.n	80003aa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000412:	2100      	movs	r1, #0
 8000414:	e7df      	b.n	80003d6 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000418:	f023 0312 	bic.w	r3, r3, #18
 800041c:	f043 0310 	orr.w	r3, r3, #16
 8000420:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000422:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800042a:	2001      	movs	r0, #1
 800042c:	e7e5      	b.n	80003fa <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	62a3      	str	r3, [r4, #40]	; 0x28
 8000434:	e7f9      	b.n	800042a <HAL_ADC_Init+0xea>
 8000436:	bf00      	nop
 8000438:	ffe1f7fd 	.word	0xffe1f7fd
 800043c:	ff1f0efe 	.word	0xff1f0efe

08000440 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000442:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000444:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000446:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800044e:	041b      	lsls	r3, r3, #16
 8000450:	0c1b      	lsrs	r3, r3, #16
 8000452:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800045a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800045c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800045e:	4770      	bx	lr
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000466:	b570      	push	{r4, r5, r6, lr}
 8000468:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800046e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000472:	f1c4 0507 	rsb	r5, r4, #7
 8000476:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000478:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047c:	bf28      	it	cs
 800047e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000480:	2b06      	cmp	r3, #6
 8000482:	bf98      	it	ls
 8000484:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000486:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048a:	bf88      	it	hi
 800048c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800048e:	ea21 0303 	bic.w	r3, r1, r3
 8000492:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000494:	fa06 f404 	lsl.w	r4, r6, r4
 8000498:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800049c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a2:	bfa8      	it	ge
 80004a4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80004a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ac:	bfb8      	it	lt
 80004ae:	4a06      	ldrlt	r2, [pc, #24]	; (80004c8 <HAL_NVIC_SetPriority+0x64>)
 80004b0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b2:	bfab      	itete	ge
 80004b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	e000ed00 	.word	0xe000ed00
 80004c8:	e000ed14 	.word	0xe000ed14

080004cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004cc:	3801      	subs	r0, #1
 80004ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004d2:	d20a      	bcs.n	80004ea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80004fe:	4626      	mov	r6, r4
 8000500:	4b65      	ldr	r3, [pc, #404]	; (8000698 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000502:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80006a8 <HAL_GPIO_Init+0x1b0>
 8000506:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80006ac <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800050a:	680a      	ldr	r2, [r1, #0]
 800050c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000510:	d102      	bne.n	8000518 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000512:	b003      	add	sp, #12
 8000514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000518:	f04f 0801 	mov.w	r8, #1
 800051c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000520:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000524:	4590      	cmp	r8, r2
 8000526:	d17e      	bne.n	8000626 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000528:	684d      	ldr	r5, [r1, #4]
 800052a:	2d12      	cmp	r5, #18
 800052c:	f000 80a9 	beq.w	8000682 <HAL_GPIO_Init+0x18a>
 8000530:	f200 8082 	bhi.w	8000638 <HAL_GPIO_Init+0x140>
 8000534:	2d02      	cmp	r5, #2
 8000536:	f000 80a1 	beq.w	800067c <HAL_GPIO_Init+0x184>
 800053a:	d876      	bhi.n	800062a <HAL_GPIO_Init+0x132>
 800053c:	2d00      	cmp	r5, #0
 800053e:	f000 8088 	beq.w	8000652 <HAL_GPIO_Init+0x15a>
 8000542:	2d01      	cmp	r5, #1
 8000544:	f000 8098 	beq.w	8000678 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800054c:	2aff      	cmp	r2, #255	; 0xff
 800054e:	bf93      	iteet	ls
 8000550:	4682      	movls	sl, r0
 8000552:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000556:	3d08      	subhi	r5, #8
 8000558:	f8d0 b000 	ldrls.w	fp, [r0]
 800055c:	bf92      	itee	ls
 800055e:	00b5      	lslls	r5, r6, #2
 8000560:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000564:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000566:	fa09 f805 	lsl.w	r8, r9, r5
 800056a:	ea2b 0808 	bic.w	r8, fp, r8
 800056e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000572:	bf88      	it	hi
 8000574:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000578:	ea48 0505 	orr.w	r5, r8, r5
 800057c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000580:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000584:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000588:	d04d      	beq.n	8000626 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800058a:	4f44      	ldr	r7, [pc, #272]	; (800069c <HAL_GPIO_Init+0x1a4>)
 800058c:	f026 0803 	bic.w	r8, r6, #3
 8000590:	69bd      	ldr	r5, [r7, #24]
 8000592:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000596:	f045 0501 	orr.w	r5, r5, #1
 800059a:	61bd      	str	r5, [r7, #24]
 800059c:	69bd      	ldr	r5, [r7, #24]
 800059e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80005a2:	f005 0501 	and.w	r5, r5, #1
 80005a6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ac:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005b6:	fa09 f90b 	lsl.w	r9, r9, fp
 80005ba:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005be:	4d38      	ldr	r5, [pc, #224]	; (80006a0 <HAL_GPIO_Init+0x1a8>)
 80005c0:	42a8      	cmp	r0, r5
 80005c2:	d063      	beq.n	800068c <HAL_GPIO_Init+0x194>
 80005c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c8:	42a8      	cmp	r0, r5
 80005ca:	d061      	beq.n	8000690 <HAL_GPIO_Init+0x198>
 80005cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d0:	42a8      	cmp	r0, r5
 80005d2:	d05f      	beq.n	8000694 <HAL_GPIO_Init+0x19c>
 80005d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d8:	42a8      	cmp	r0, r5
 80005da:	bf0c      	ite	eq
 80005dc:	2503      	moveq	r5, #3
 80005de:	2504      	movne	r5, #4
 80005e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80005e4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005e8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005ec:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ee:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005f2:	bf14      	ite	ne
 80005f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f6:	4395      	biceq	r5, r2
 80005f8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80005fa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005fc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000600:	bf14      	ite	ne
 8000602:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000604:	4395      	biceq	r5, r2
 8000606:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000608:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800060a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800060e:	bf14      	ite	ne
 8000610:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000612:	4395      	biceq	r5, r2
 8000614:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000616:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000618:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800061c:	bf14      	ite	ne
 800061e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000620:	ea25 0202 	biceq.w	r2, r5, r2
 8000624:	60da      	str	r2, [r3, #12]
	position++;
 8000626:	3601      	adds	r6, #1
 8000628:	e76f      	b.n	800050a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800062a:	2d03      	cmp	r5, #3
 800062c:	d022      	beq.n	8000674 <HAL_GPIO_Init+0x17c>
 800062e:	2d11      	cmp	r5, #17
 8000630:	d18a      	bne.n	8000548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000632:	68cc      	ldr	r4, [r1, #12]
 8000634:	3404      	adds	r4, #4
          break;
 8000636:	e787      	b.n	8000548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000638:	4f1a      	ldr	r7, [pc, #104]	; (80006a4 <HAL_GPIO_Init+0x1ac>)
 800063a:	42bd      	cmp	r5, r7
 800063c:	d009      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800063e:	d812      	bhi.n	8000666 <HAL_GPIO_Init+0x16e>
 8000640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006b0 <HAL_GPIO_Init+0x1b8>
 8000644:	454d      	cmp	r5, r9
 8000646:	d004      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 8000648:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800064c:	454d      	cmp	r5, r9
 800064e:	f47f af7b 	bne.w	8000548 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000652:	688c      	ldr	r4, [r1, #8]
 8000654:	b1c4      	cbz	r4, 8000688 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000656:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000658:	bf0c      	ite	eq
 800065a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800065e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000662:	2408      	movs	r4, #8
 8000664:	e770      	b.n	8000548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000666:	4565      	cmp	r5, ip
 8000668:	d0f3      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800066a:	4575      	cmp	r5, lr
 800066c:	d0f1      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800066e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006b4 <HAL_GPIO_Init+0x1bc>
 8000672:	e7eb      	b.n	800064c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000674:	2400      	movs	r4, #0
 8000676:	e767      	b.n	8000548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000678:	68cc      	ldr	r4, [r1, #12]
          break;
 800067a:	e765      	b.n	8000548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800067c:	68cc      	ldr	r4, [r1, #12]
 800067e:	3408      	adds	r4, #8
          break;
 8000680:	e762      	b.n	8000548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000682:	68cc      	ldr	r4, [r1, #12]
 8000684:	340c      	adds	r4, #12
          break;
 8000686:	e75f      	b.n	8000548 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000688:	2404      	movs	r4, #4
 800068a:	e75d      	b.n	8000548 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800068c:	2500      	movs	r5, #0
 800068e:	e7a7      	b.n	80005e0 <HAL_GPIO_Init+0xe8>
 8000690:	2501      	movs	r5, #1
 8000692:	e7a5      	b.n	80005e0 <HAL_GPIO_Init+0xe8>
 8000694:	2502      	movs	r5, #2
 8000696:	e7a3      	b.n	80005e0 <HAL_GPIO_Init+0xe8>
 8000698:	40010400 	.word	0x40010400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10220000 	.word	0x10220000

080006b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006b8:	b10a      	cbz	r2, 80006be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ba:	6101      	str	r1, [r0, #16]
  }
}
 80006bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006be:	0409      	lsls	r1, r1, #16
 80006c0:	e7fb      	b.n	80006ba <HAL_GPIO_WritePin+0x2>
	...

080006c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80006c6:	4604      	mov	r4, r0
 80006c8:	b908      	cbnz	r0, 80006ce <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80006ca:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80006d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006d6:	b91b      	cbnz	r3, 80006e0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80006d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80006dc:	f000 fdce 	bl	800127c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006e0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80006e8:	6813      	ldr	r3, [r2, #0]
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80006f0:	f000 fb00 	bl	8000cf4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006f4:	6863      	ldr	r3, [r4, #4]
 80006f6:	4a41      	ldr	r2, [pc, #260]	; (80007fc <HAL_I2C_Init+0x138>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d84d      	bhi.n	8000798 <HAL_I2C_Init+0xd4>
 80006fc:	4a40      	ldr	r2, [pc, #256]	; (8000800 <HAL_I2C_Init+0x13c>)
 80006fe:	4290      	cmp	r0, r2
 8000700:	d9e3      	bls.n	80006ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000702:	4940      	ldr	r1, [pc, #256]	; (8000804 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000704:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000706:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800070a:	6855      	ldr	r5, [r2, #4]
 800070c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000710:	430d      	orrs	r5, r1
 8000712:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000714:	6a15      	ldr	r5, [r2, #32]
 8000716:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800071a:	3101      	adds	r1, #1
 800071c:	4329      	orrs	r1, r5
 800071e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000720:	69d1      	ldr	r1, [r2, #28]
 8000722:	4d36      	ldr	r5, [pc, #216]	; (80007fc <HAL_I2C_Init+0x138>)
 8000724:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000728:	42ab      	cmp	r3, r5
 800072a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800072e:	f100 30ff 	add.w	r0, r0, #4294967295
 8000732:	d848      	bhi.n	80007c6 <HAL_I2C_Init+0x102>
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	fbb0 f0f3 	udiv	r0, r0, r3
 800073a:	1c43      	adds	r3, r0, #1
 800073c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000740:	2b04      	cmp	r3, #4
 8000742:	bf38      	it	cc
 8000744:	2304      	movcc	r3, #4
 8000746:	430b      	orrs	r3, r1
 8000748:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800074a:	6811      	ldr	r1, [r2, #0]
 800074c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000750:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000754:	4303      	orrs	r3, r0
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800075a:	6891      	ldr	r1, [r2, #8]
 800075c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000760:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000764:	4303      	orrs	r3, r0
 8000766:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800076a:	430b      	orrs	r3, r1
 800076c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800076e:	68d1      	ldr	r1, [r2, #12]
 8000770:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000774:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000778:	4303      	orrs	r3, r0
 800077a:	430b      	orrs	r3, r1
 800077c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800077e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000780:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000788:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800078a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800078c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000790:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000792:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000796:	e799      	b.n	80006cc <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <HAL_I2C_Init+0x144>)
 800079a:	4290      	cmp	r0, r2
 800079c:	d995      	bls.n	80006ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800079e:	4e19      	ldr	r6, [pc, #100]	; (8000804 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80007a4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007a8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007aa:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007ac:	6855      	ldr	r5, [r2, #4]
 80007ae:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80007b2:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007b4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80007b8:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80007ba:	6a15      	ldr	r5, [r2, #32]
 80007bc:	fbb1 f1f6 	udiv	r1, r1, r6
 80007c0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80007c4:	e7a9      	b.n	800071a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007c6:	68a5      	ldr	r5, [r4, #8]
 80007c8:	b955      	cbnz	r5, 80007e0 <HAL_I2C_Init+0x11c>
 80007ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80007d2:	1c43      	adds	r3, r0, #1
 80007d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007d8:	b16b      	cbz	r3, 80007f6 <HAL_I2C_Init+0x132>
 80007da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007de:	e7b2      	b.n	8000746 <HAL_I2C_Init+0x82>
 80007e0:	2519      	movs	r5, #25
 80007e2:	436b      	muls	r3, r5
 80007e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007e8:	1c43      	adds	r3, r0, #1
 80007ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007ee:	b113      	cbz	r3, 80007f6 <HAL_I2C_Init+0x132>
 80007f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f4:	e7a7      	b.n	8000746 <HAL_I2C_Init+0x82>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e7a5      	b.n	8000746 <HAL_I2C_Init+0x82>
 80007fa:	bf00      	nop
 80007fc:	000186a0 	.word	0x000186a0
 8000800:	001e847f 	.word	0x001e847f
 8000804:	000f4240 	.word	0x000f4240
 8000808:	003d08ff 	.word	0x003d08ff

0800080c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800080c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000810:	4605      	mov	r5, r0
 8000812:	b908      	cbnz	r0, 8000818 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000814:	2001      	movs	r0, #1
 8000816:	e03c      	b.n	8000892 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000818:	6803      	ldr	r3, [r0, #0]
 800081a:	07db      	lsls	r3, r3, #31
 800081c:	d410      	bmi.n	8000840 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081e:	682b      	ldr	r3, [r5, #0]
 8000820:	079f      	lsls	r7, r3, #30
 8000822:	d45d      	bmi.n	80008e0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000824:	682b      	ldr	r3, [r5, #0]
 8000826:	0719      	lsls	r1, r3, #28
 8000828:	f100 8094 	bmi.w	8000954 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	075a      	lsls	r2, r3, #29
 8000830:	f100 80be 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000834:	69e8      	ldr	r0, [r5, #28]
 8000836:	2800      	cmp	r0, #0
 8000838:	f040 812c 	bne.w	8000a94 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800083c:	2000      	movs	r0, #0
 800083e:	e028      	b.n	8000892 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000840:	4c8f      	ldr	r4, [pc, #572]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 8000842:	6863      	ldr	r3, [r4, #4]
 8000844:	f003 030c 	and.w	r3, r3, #12
 8000848:	2b04      	cmp	r3, #4
 800084a:	d007      	beq.n	800085c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	2b08      	cmp	r3, #8
 8000854:	d109      	bne.n	800086a <HAL_RCC_OscConfig+0x5e>
 8000856:	6863      	ldr	r3, [r4, #4]
 8000858:	03de      	lsls	r6, r3, #15
 800085a:	d506      	bpl.n	800086a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	039c      	lsls	r4, r3, #14
 8000860:	d5dd      	bpl.n	800081e <HAL_RCC_OscConfig+0x12>
 8000862:	686b      	ldr	r3, [r5, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1da      	bne.n	800081e <HAL_RCC_OscConfig+0x12>
 8000868:	e7d4      	b.n	8000814 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086a:	686b      	ldr	r3, [r5, #4]
 800086c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000870:	d112      	bne.n	8000898 <HAL_RCC_OscConfig+0x8c>
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000878:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800087a:	f7ff fca9 	bl	80001d0 <HAL_GetTick>
 800087e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	0398      	lsls	r0, r3, #14
 8000884:	d4cb      	bmi.n	800081e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000886:	f7ff fca3 	bl	80001d0 <HAL_GetTick>
 800088a:	1b80      	subs	r0, r0, r6
 800088c:	2864      	cmp	r0, #100	; 0x64
 800088e:	d9f7      	bls.n	8000880 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000890:	2003      	movs	r0, #3
}
 8000892:	b002      	add	sp, #8
 8000894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000898:	b99b      	cbnz	r3, 80008c2 <HAL_RCC_OscConfig+0xb6>
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a0:	6023      	str	r3, [r4, #0]
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008aa:	f7ff fc91 	bl	80001d0 <HAL_GetTick>
 80008ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	0399      	lsls	r1, r3, #14
 80008b4:	d5b3      	bpl.n	800081e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008b6:	f7ff fc8b 	bl	80001d0 <HAL_GetTick>
 80008ba:	1b80      	subs	r0, r0, r6
 80008bc:	2864      	cmp	r0, #100	; 0x64
 80008be:	d9f7      	bls.n	80008b0 <HAL_RCC_OscConfig+0xa4>
 80008c0:	e7e6      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	d103      	bne.n	80008d2 <HAL_RCC_OscConfig+0xc6>
 80008ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ce:	6023      	str	r3, [r4, #0]
 80008d0:	e7cf      	b.n	8000872 <HAL_RCC_OscConfig+0x66>
 80008d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d6:	6023      	str	r3, [r4, #0]
 80008d8:	6823      	ldr	r3, [r4, #0]
 80008da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008de:	e7cb      	b.n	8000878 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008e0:	4c67      	ldr	r4, [pc, #412]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 80008e2:	6863      	ldr	r3, [r4, #4]
 80008e4:	f013 0f0c 	tst.w	r3, #12
 80008e8:	d007      	beq.n	80008fa <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d110      	bne.n	8000916 <HAL_RCC_OscConfig+0x10a>
 80008f4:	6863      	ldr	r3, [r4, #4]
 80008f6:	03da      	lsls	r2, r3, #15
 80008f8:	d40d      	bmi.n	8000916 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	079b      	lsls	r3, r3, #30
 80008fe:	d502      	bpl.n	8000906 <HAL_RCC_OscConfig+0xfa>
 8000900:	692b      	ldr	r3, [r5, #16]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d186      	bne.n	8000814 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	696a      	ldr	r2, [r5, #20]
 800090a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800090e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000912:	6023      	str	r3, [r4, #0]
 8000914:	e786      	b.n	8000824 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000916:	692a      	ldr	r2, [r5, #16]
 8000918:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <HAL_RCC_OscConfig+0x278>)
 800091a:	b16a      	cbz	r2, 8000938 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800091c:	2201      	movs	r2, #1
 800091e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000920:	f7ff fc56 	bl	80001d0 <HAL_GetTick>
 8000924:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	079f      	lsls	r7, r3, #30
 800092a:	d4ec      	bmi.n	8000906 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800092c:	f7ff fc50 	bl	80001d0 <HAL_GetTick>
 8000930:	1b80      	subs	r0, r0, r6
 8000932:	2802      	cmp	r0, #2
 8000934:	d9f7      	bls.n	8000926 <HAL_RCC_OscConfig+0x11a>
 8000936:	e7ab      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000938:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800093a:	f7ff fc49 	bl	80001d0 <HAL_GetTick>
 800093e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	0798      	lsls	r0, r3, #30
 8000944:	f57f af6e 	bpl.w	8000824 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000948:	f7ff fc42 	bl	80001d0 <HAL_GetTick>
 800094c:	1b80      	subs	r0, r0, r6
 800094e:	2802      	cmp	r0, #2
 8000950:	d9f6      	bls.n	8000940 <HAL_RCC_OscConfig+0x134>
 8000952:	e79d      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000954:	69aa      	ldr	r2, [r5, #24]
 8000956:	4c4a      	ldr	r4, [pc, #296]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 8000958:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <HAL_RCC_OscConfig+0x27c>)
 800095a:	b1da      	cbz	r2, 8000994 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000960:	f7ff fc36 	bl	80001d0 <HAL_GetTick>
 8000964:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000968:	079b      	lsls	r3, r3, #30
 800096a:	d50d      	bpl.n	8000988 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800096c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000970:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <HAL_RCC_OscConfig+0x280>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	fbb3 f3f2 	udiv	r3, r3, r2
 8000978:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800097a:	bf00      	nop
  }
  while (Delay --);
 800097c:	9b01      	ldr	r3, [sp, #4]
 800097e:	1e5a      	subs	r2, r3, #1
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f9      	bne.n	800097a <HAL_RCC_OscConfig+0x16e>
 8000986:	e751      	b.n	800082c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000988:	f7ff fc22 	bl	80001d0 <HAL_GetTick>
 800098c:	1b80      	subs	r0, r0, r6
 800098e:	2802      	cmp	r0, #2
 8000990:	d9e9      	bls.n	8000966 <HAL_RCC_OscConfig+0x15a>
 8000992:	e77d      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000994:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000996:	f7ff fc1b 	bl	80001d0 <HAL_GetTick>
 800099a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800099e:	079f      	lsls	r7, r3, #30
 80009a0:	f57f af44 	bpl.w	800082c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a4:	f7ff fc14 	bl	80001d0 <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x190>
 80009ae:	e76f      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b0:	4c33      	ldr	r4, [pc, #204]	; (8000a80 <HAL_RCC_OscConfig+0x274>)
 80009b2:	69e3      	ldr	r3, [r4, #28]
 80009b4:	00d8      	lsls	r0, r3, #3
 80009b6:	d424      	bmi.n	8000a02 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80009b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	69e3      	ldr	r3, [r4, #28]
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61e3      	str	r3, [r4, #28]
 80009c2:	69e3      	ldr	r3, [r4, #28]
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009cc:	4e30      	ldr	r6, [pc, #192]	; (8000a90 <HAL_RCC_OscConfig+0x284>)
 80009ce:	6833      	ldr	r3, [r6, #0]
 80009d0:	05d9      	lsls	r1, r3, #23
 80009d2:	d518      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d4:	68eb      	ldr	r3, [r5, #12]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d126      	bne.n	8000a28 <HAL_RCC_OscConfig+0x21c>
 80009da:	6a23      	ldr	r3, [r4, #32]
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009e2:	f7ff fbf5 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009e6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009ea:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ec:	6a23      	ldr	r3, [r4, #32]
 80009ee:	079b      	lsls	r3, r3, #30
 80009f0:	d53f      	bpl.n	8000a72 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80009f2:	2f00      	cmp	r7, #0
 80009f4:	f43f af1e 	beq.w	8000834 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009f8:	69e3      	ldr	r3, [r4, #28]
 80009fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009fe:	61e3      	str	r3, [r4, #28]
 8000a00:	e718      	b.n	8000834 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000a02:	2700      	movs	r7, #0
 8000a04:	e7e2      	b.n	80009cc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a06:	6833      	ldr	r3, [r6, #0]
 8000a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fbdf 	bl	80001d0 <HAL_GetTick>
 8000a12:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	6833      	ldr	r3, [r6, #0]
 8000a16:	05da      	lsls	r2, r3, #23
 8000a18:	d4dc      	bmi.n	80009d4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a1a:	f7ff fbd9 	bl	80001d0 <HAL_GetTick>
 8000a1e:	eba0 0008 	sub.w	r0, r0, r8
 8000a22:	2864      	cmp	r0, #100	; 0x64
 8000a24:	d9f6      	bls.n	8000a14 <HAL_RCC_OscConfig+0x208>
 8000a26:	e733      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a28:	b9ab      	cbnz	r3, 8000a56 <HAL_RCC_OscConfig+0x24a>
 8000a2a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a2c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	6223      	str	r3, [r4, #32]
 8000a36:	6a23      	ldr	r3, [r4, #32]
 8000a38:	f023 0304 	bic.w	r3, r3, #4
 8000a3c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a3e:	f7ff fbc7 	bl	80001d0 <HAL_GetTick>
 8000a42:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a44:	6a23      	ldr	r3, [r4, #32]
 8000a46:	0798      	lsls	r0, r3, #30
 8000a48:	d5d3      	bpl.n	80009f2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fbc1 	bl	80001d0 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	4540      	cmp	r0, r8
 8000a52:	d9f7      	bls.n	8000a44 <HAL_RCC_OscConfig+0x238>
 8000a54:	e71c      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a56:	2b05      	cmp	r3, #5
 8000a58:	6a23      	ldr	r3, [r4, #32]
 8000a5a:	d103      	bne.n	8000a64 <HAL_RCC_OscConfig+0x258>
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6223      	str	r3, [r4, #32]
 8000a62:	e7ba      	b.n	80009da <HAL_RCC_OscConfig+0x1ce>
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6223      	str	r3, [r4, #32]
 8000a6a:	6a23      	ldr	r3, [r4, #32]
 8000a6c:	f023 0304 	bic.w	r3, r3, #4
 8000a70:	e7b6      	b.n	80009e0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a72:	f7ff fbad 	bl	80001d0 <HAL_GetTick>
 8000a76:	eba0 0008 	sub.w	r0, r0, r8
 8000a7a:	42b0      	cmp	r0, r6
 8000a7c:	d9b6      	bls.n	80009ec <HAL_RCC_OscConfig+0x1e0>
 8000a7e:	e707      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
 8000a80:	40021000 	.word	0x40021000
 8000a84:	42420000 	.word	0x42420000
 8000a88:	42420480 	.word	0x42420480
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <HAL_RCC_OscConfig+0x334>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	461c      	mov	r4, r3
 8000a9a:	f002 020c 	and.w	r2, r2, #12
 8000a9e:	2a08      	cmp	r2, #8
 8000aa0:	d03d      	beq.n	8000b1e <HAL_RCC_OscConfig+0x312>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4e27      	ldr	r6, [pc, #156]	; (8000b44 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aa6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000aa8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aaa:	d12b      	bne.n	8000b04 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000aac:	f7ff fb90 	bl	80001d0 <HAL_GetTick>
 8000ab0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	0199      	lsls	r1, r3, #6
 8000ab6:	d41f      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ab8:	6a2b      	ldr	r3, [r5, #32]
 8000aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abe:	d105      	bne.n	8000acc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ac0:	6862      	ldr	r2, [r4, #4]
 8000ac2:	68a9      	ldr	r1, [r5, #8]
 8000ac4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000acc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000ace:	6862      	ldr	r2, [r4, #4]
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ada:	2301      	movs	r3, #1
 8000adc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ade:	f7ff fb77 	bl	80001d0 <HAL_GetTick>
 8000ae2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	019a      	lsls	r2, r3, #6
 8000ae8:	f53f aea8 	bmi.w	800083c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000aec:	f7ff fb70 	bl	80001d0 <HAL_GetTick>
 8000af0:	1b40      	subs	r0, r0, r5
 8000af2:	2802      	cmp	r0, #2
 8000af4:	d9f6      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x2d8>
 8000af6:	e6cb      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000af8:	f7ff fb6a 	bl	80001d0 <HAL_GetTick>
 8000afc:	1bc0      	subs	r0, r0, r7
 8000afe:	2802      	cmp	r0, #2
 8000b00:	d9d7      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x2a6>
 8000b02:	e6c5      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000b04:	f7ff fb64 	bl	80001d0 <HAL_GetTick>
 8000b08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	f57f ae95 	bpl.w	800083c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b12:	f7ff fb5d 	bl	80001d0 <HAL_GetTick>
 8000b16:	1b40      	subs	r0, r0, r5
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9f6      	bls.n	8000b0a <HAL_RCC_OscConfig+0x2fe>
 8000b1c:	e6b8      	b.n	8000890 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b1e:	2801      	cmp	r0, #1
 8000b20:	f43f aeb7 	beq.w	8000892 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000b24:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b26:	6a2b      	ldr	r3, [r5, #32]
 8000b28:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	f47f ae71 	bne.w	8000814 <HAL_RCC_OscConfig+0x8>
 8000b32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000b34:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000b38:	1ac0      	subs	r0, r0, r3
 8000b3a:	bf18      	it	ne
 8000b3c:	2001      	movne	r0, #1
 8000b3e:	e6a8      	b.n	8000892 <HAL_RCC_OscConfig+0x86>
 8000b40:	40021000 	.word	0x40021000
 8000b44:	42420060 	.word	0x42420060

08000b48 <HAL_RCC_GetSysClockFreq>:
{
 8000b48:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000b4c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b4e:	ac02      	add	r4, sp, #8
 8000b50:	f103 0510 	add.w	r5, r3, #16
 8000b54:	4622      	mov	r2, r4
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	6859      	ldr	r1, [r3, #4]
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	c203      	stmia	r2!, {r0, r1}
 8000b5e:	42ab      	cmp	r3, r5
 8000b60:	4614      	mov	r4, r2
 8000b62:	d1f7      	bne.n	8000b54 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b64:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000b68:	4911      	ldr	r1, [pc, #68]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b6a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000b6e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b70:	f003 020c 	and.w	r2, r3, #12
 8000b74:	2a08      	cmp	r2, #8
 8000b76:	d117      	bne.n	8000ba8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b78:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000b7c:	a806      	add	r0, sp, #24
 8000b7e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b80:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b82:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b86:	d50c      	bpl.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b88:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b8c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b90:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b92:	aa06      	add	r2, sp, #24
 8000b94:	4413      	add	r3, r2
 8000b96:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b9a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000b9e:	b007      	add	sp, #28
 8000ba0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_RCC_GetSysClockFreq+0x70>)
 8000ba4:	4350      	muls	r0, r2
 8000ba6:	e7fa      	b.n	8000b9e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000baa:	e7f8      	b.n	8000b9e <HAL_RCC_GetSysClockFreq+0x56>
 8000bac:	08001538 	.word	0x08001538
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	007a1200 	.word	0x007a1200
 8000bb8:	003d0900 	.word	0x003d0900

08000bbc <HAL_RCC_ClockConfig>:
{
 8000bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b910      	cbnz	r0, 8000bcc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bc6:	2001      	movs	r0, #1
}
 8000bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000bcc:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <HAL_RCC_ClockConfig+0x124>)
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d328      	bcc.n	8000c2a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd8:	6821      	ldr	r1, [r4, #0]
 8000bda:	078e      	lsls	r6, r1, #30
 8000bdc:	d430      	bmi.n	8000c40 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bde:	07ca      	lsls	r2, r1, #31
 8000be0:	d443      	bmi.n	8000c6a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000be2:	4a3f      	ldr	r2, [pc, #252]	; (8000ce0 <HAL_RCC_ClockConfig+0x124>)
 8000be4:	6813      	ldr	r3, [r2, #0]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d865      	bhi.n	8000cba <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	4d3c      	ldr	r5, [pc, #240]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000bf2:	f012 0f04 	tst.w	r2, #4
 8000bf6:	d16c      	bne.n	8000cd2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf8:	0713      	lsls	r3, r2, #28
 8000bfa:	d506      	bpl.n	8000c0a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bfc:	686b      	ldr	r3, [r5, #4]
 8000bfe:	6922      	ldr	r2, [r4, #16]
 8000c00:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c08:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c0a:	f7ff ff9d 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8000c0e:	686b      	ldr	r3, [r5, #4]
 8000c10:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HAL_RCC_ClockConfig+0x12c>)
 8000c12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	40d8      	lsrs	r0, r3
 8000c1a:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_RCC_ClockConfig+0x130>)
 8000c1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <HAL_RCC_ClockConfig+0x134>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f7ff fa93 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	e7ce      	b.n	8000bc8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	f023 0307 	bic.w	r3, r3, #7
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c34:	6813      	ldr	r3, [r2, #0]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d1c3      	bne.n	8000bc6 <HAL_RCC_ClockConfig+0xa>
 8000c3e:	e7cb      	b.n	8000bd8 <HAL_RCC_ClockConfig+0x1c>
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c42:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c46:	bf1e      	ittt	ne
 8000c48:	685a      	ldrne	r2, [r3, #4]
 8000c4a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000c4e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c50:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c52:	bf42      	ittt	mi
 8000c54:	685a      	ldrmi	r2, [r3, #4]
 8000c56:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000c5a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	68a0      	ldr	r0, [r4, #8]
 8000c60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c64:	4302      	orrs	r2, r0
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	e7b9      	b.n	8000bde <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6a:	6862      	ldr	r2, [r4, #4]
 8000c6c:	4e1d      	ldr	r6, [pc, #116]	; (8000ce4 <HAL_RCC_ClockConfig+0x128>)
 8000c6e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c70:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c72:	d11a      	bne.n	8000caa <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c78:	d0a5      	beq.n	8000bc6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c7a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c7c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c80:	f023 0303 	bic.w	r3, r3, #3
 8000c84:	4313      	orrs	r3, r2
 8000c86:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c88:	f7ff faa2 	bl	80001d0 <HAL_GetTick>
 8000c8c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c8e:	6873      	ldr	r3, [r6, #4]
 8000c90:	6862      	ldr	r2, [r4, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c9a:	d0a2      	beq.n	8000be2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9c:	f7ff fa98 	bl	80001d0 <HAL_GetTick>
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	4540      	cmp	r0, r8
 8000ca4:	d9f3      	bls.n	8000c8e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	e78e      	b.n	8000bc8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000caa:	2a02      	cmp	r2, #2
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb2:	e7e1      	b.n	8000c78 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	f013 0f02 	tst.w	r3, #2
 8000cb8:	e7de      	b.n	8000c78 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cba:	6813      	ldr	r3, [r2, #0]
 8000cbc:	f023 0307 	bic.w	r3, r3, #7
 8000cc0:	432b      	orrs	r3, r5
 8000cc2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cc4:	6813      	ldr	r3, [r2, #0]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	f47f af7b 	bne.w	8000bc6 <HAL_RCC_ClockConfig+0xa>
 8000cd0:	e78d      	b.n	8000bee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cd2:	686b      	ldr	r3, [r5, #4]
 8000cd4:	68e1      	ldr	r1, [r4, #12]
 8000cd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	606b      	str	r3, [r5, #4]
 8000cde:	e78b      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x3c>
 8000ce0:	40022000 	.word	0x40022000
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	08001548 	.word	0x08001548
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	4a03      	ldr	r2, [pc, #12]	; (8000d10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d02:	6810      	ldr	r0, [r2, #0]
}
 8000d04:	40d8      	lsrs	r0, r3
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	08001558 	.word	0x08001558
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000d1e:	5cd3      	ldrb	r3, [r2, r3]
 8000d20:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d22:	6810      	ldr	r0, [r2, #0]
}
 8000d24:	40d8      	lsrs	r0, r3
 8000d26:	4770      	bx	lr
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	08001558 	.word	0x08001558
 8000d30:	20000008 	.word	0x20000008

08000d34 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d34:	6803      	ldr	r3, [r0, #0]
{
 8000d36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d3a:	07d9      	lsls	r1, r3, #31
{
 8000d3c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000d3e:	d520      	bpl.n	8000d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d40:	4c35      	ldr	r4, [pc, #212]	; (8000e18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	00da      	lsls	r2, r3, #3
 8000d46:	d432      	bmi.n	8000dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000d48:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	69e3      	ldr	r3, [r4, #28]
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	61e3      	str	r3, [r4, #28]
 8000d52:	69e3      	ldr	r3, [r4, #28]
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5c:	4e2f      	ldr	r6, [pc, #188]	; (8000e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000d5e:	6833      	ldr	r3, [r6, #0]
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	d526      	bpl.n	8000db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d64:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d66:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d6a:	d136      	bne.n	8000dda <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d6c:	6a23      	ldr	r3, [r4, #32]
 8000d6e:	686a      	ldr	r2, [r5, #4]
 8000d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d78:	b11f      	cbz	r7, 8000d82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d7a:	69e3      	ldr	r3, [r4, #28]
 8000d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d80:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000d82:	6828      	ldr	r0, [r5, #0]
 8000d84:	0783      	lsls	r3, r0, #30
 8000d86:	d506      	bpl.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000d88:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d8a:	68a9      	ldr	r1, [r5, #8]
 8000d8c:	6853      	ldr	r3, [r2, #4]
 8000d8e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d92:	430b      	orrs	r3, r1
 8000d94:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000d96:	f010 0010 	ands.w	r0, r0, #16
 8000d9a:	d01b      	beq.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000d9c:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000d9e:	68e9      	ldr	r1, [r5, #12]
 8000da0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000da2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000da4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6053      	str	r3, [r2, #4]
 8000dac:	e012      	b.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000dae:	2700      	movs	r7, #0
 8000db0:	e7d4      	b.n	8000d5c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000dba:	f7ff fa09 	bl	80001d0 <HAL_GetTick>
 8000dbe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	05d8      	lsls	r0, r3, #23
 8000dc4:	d4ce      	bmi.n	8000d64 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc6:	f7ff fa03 	bl	80001d0 <HAL_GetTick>
 8000dca:	eba0 0008 	sub.w	r0, r0, r8
 8000dce:	2864      	cmp	r0, #100	; 0x64
 8000dd0:	d9f6      	bls.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000dd2:	2003      	movs	r0, #3
}
 8000dd4:	b002      	add	sp, #8
 8000dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dda:	686a      	ldr	r2, [r5, #4]
 8000ddc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d0c3      	beq.n	8000d6c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000de4:	2001      	movs	r0, #1
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000de8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dea:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000dec:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000df2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000df4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000df6:	07d9      	lsls	r1, r3, #31
 8000df8:	d5b8      	bpl.n	8000d6c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000dfa:	f7ff f9e9 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000e02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e04:	6a23      	ldr	r3, [r4, #32]
 8000e06:	079a      	lsls	r2, r3, #30
 8000e08:	d4b0      	bmi.n	8000d6c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff f9e1 	bl	80001d0 <HAL_GetTick>
 8000e0e:	1b80      	subs	r0, r0, r6
 8000e10:	4540      	cmp	r0, r8
 8000e12:	d9f7      	bls.n	8000e04 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000e14:	e7dd      	b.n	8000dd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	42420440 	.word	0x42420440

08000e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000e24:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000e26:	4604      	mov	r4, r0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d034      	beq.n	8000e96 <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000e30:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e38:	b91b      	cbnz	r3, 8000e42 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000e3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e3e:	f000 fa59 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000e42:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e44:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e4a:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e4c:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8000e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e52:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e54:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	68e0      	ldr	r0, [r4, #12]
 8000e5c:	4303      	orrs	r3, r0
 8000e5e:	6920      	ldr	r0, [r4, #16]
 8000e60:	4303      	orrs	r3, r0
 8000e62:	6960      	ldr	r0, [r4, #20]
 8000e64:	4303      	orrs	r3, r0
 8000e66:	69e0      	ldr	r0, [r4, #28]
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	6a20      	ldr	r0, [r4, #32]
 8000e6c:	4303      	orrs	r3, r0
 8000e6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e70:	4303      	orrs	r3, r0
 8000e72:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000e76:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e78:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000e7a:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e7e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000e80:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e82:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e84:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e8a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000e8c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e8e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000e90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8000e94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	e7fc      	b.n	8000e94 <HAL_SPI_Init+0x70>
	...

08000e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ea0:	6803      	ldr	r3, [r0, #0]
 8000ea2:	68c1      	ldr	r1, [r0, #12]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	2419      	movs	r4, #25
 8000ea8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000eac:	430a      	orrs	r2, r1
 8000eae:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb0:	6882      	ldr	r2, [r0, #8]
 8000eb2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000eb4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb6:	4302      	orrs	r2, r0
 8000eb8:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000eba:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000ebe:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ec2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	69a9      	ldr	r1, [r5, #24]
 8000ecc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <UART_SetConfig+0x70>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d114      	bne.n	8000f04 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000eda:	f7ff ff1b 	bl	8000d14 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000ede:	4360      	muls	r0, r4
 8000ee0:	686c      	ldr	r4, [r5, #4]
 8000ee2:	2264      	movs	r2, #100	; 0x64
 8000ee4:	00a4      	lsls	r4, r4, #2
 8000ee6:	fbb0 f0f4 	udiv	r0, r0, r4
 8000eea:	fbb0 f1f2 	udiv	r1, r0, r2
 8000eee:	fb02 0311 	mls	r3, r2, r1, r0
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	3332      	adds	r3, #50	; 0x32
 8000ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000efa:	682c      	ldr	r4, [r5, #0]
 8000efc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000f00:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8000f02:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000f04:	f7ff fef6 	bl	8000cf4 <HAL_RCC_GetPCLK1Freq>
 8000f08:	e7e9      	b.n	8000ede <UART_SetConfig+0x42>
 8000f0a:	bf00      	nop
 8000f0c:	40013800 	.word	0x40013800

08000f10 <HAL_UART_Init>:
{
 8000f10:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f12:	4604      	mov	r4, r0
 8000f14:	b340      	cbz	r0, 8000f68 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f1e:	b91b      	cbnz	r3, 8000f28 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000f24:	f000 fa40 	bl	80013a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000f28:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000f2a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000f30:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f32:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f38:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f3a:	f7ff ffaf 	bl	8000e9c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f3e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f40:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f50:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f58:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f5a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f5c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000f5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000f62:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8000f66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
 8000f6a:	e7fc      	b.n	8000f66 <HAL_UART_Init+0x56>

08000f6c <LED_blink>:
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

// funkcjia miga diodą blink_times -razy z czasem time
void LED_blink(int blink_times, int time){
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	4607      	mov	r7, r0
 8000f70:	460d      	mov	r5, r1

	for(int i = 0; i < blink_times; i++)
 8000f72:	2400      	movs	r4, #0
	{
		//blue pill set-wyłączona, reset-włączona
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f74:	4e0e      	ldr	r6, [pc, #56]	; (8000fb0 <LED_blink+0x44>)
	for(int i = 0; i < blink_times; i++)
 8000f76:	42bc      	cmp	r4, r7
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f78:	f04f 0201 	mov.w	r2, #1
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	for(int i = 0; i < blink_times; i++)
 8000f80:	db04      	blt.n	8000f8c <LED_blink+0x20>
		HAL_Delay(time);
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
		HAL_Delay(time);
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}
 8000f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <LED_blink+0x44>)
 8000f88:	f7ff bb96 	b.w	80006b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	f7ff fb93 	bl	80006b8 <HAL_GPIO_WritePin>
		HAL_Delay(time);
 8000f92:	4628      	mov	r0, r5
 8000f94:	f7ff f922 	bl	80001dc <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	f7ff fb8a 	bl	80006b8 <HAL_GPIO_WritePin>
		HAL_Delay(time);
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f7ff f919 	bl	80001dc <HAL_Delay>
	for(int i = 0; i < blink_times; i++)
 8000faa:	3401      	adds	r4, #1
 8000fac:	e7e3      	b.n	8000f76 <LED_blink+0xa>
 8000fae:	bf00      	nop
 8000fb0:	40011000 	.word	0x40011000

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	2414      	movs	r4, #20
{
 8000fb8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	4622      	mov	r2, r4
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	a80c      	add	r0, sp, #48	; 0x30
 8000fc0:	f000 faa6 	bl	8001510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	4622      	mov	r2, r4
 8000fc6:	eb0d 0004 	add.w	r0, sp, r4
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f000 faa0 	bl	8001510 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	a801      	add	r0, sp, #4
 8000fd6:	f000 fa9b 	bl	8001510 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fda:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f7ff fc0a 	bl	800080c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001002:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001004:	4621      	mov	r1, r4
 8001006:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001008:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100e:	f7ff fdd5 	bl	8000bbc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001018:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800101a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	f7ff fe8a 	bl	8000d34 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001020:	b014      	add	sp, #80	; 0x50
 8001022:	bd10      	pop	{r4, pc}

08001024 <main>:
{
 8001024:	b570      	push	{r4, r5, r6, lr}
 8001026:	b088      	sub	sp, #32
  HAL_Init();
 8001028:	f7ff f8b4 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 800102c:	f7ff ffc2 	bl	8000fb4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2210      	movs	r2, #16
 8001032:	2100      	movs	r1, #0
 8001034:	eb0d 0002 	add.w	r0, sp, r2
 8001038:	f000 fa6a 	bl	8001510 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103c:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <main+0x184>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001044:	4859      	ldr	r0, [pc, #356]	; (80011ac <main+0x188>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	f042 0210 	orr.w	r2, r2, #16
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	f002 0210 	and.w	r2, r2, #16
 8001054:	9200      	str	r2, [sp, #0]
 8001056:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	619a      	str	r2, [r3, #24]
 8001062:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	f002 0220 	and.w	r2, r2, #32
 800106a:	9201      	str	r2, [sp, #4]
 800106c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	699a      	ldr	r2, [r3, #24]
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	f002 0204 	and.w	r2, r2, #4
 800107c:	9202      	str	r2, [sp, #8]
 800107e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	f042 0208 	orr.w	r2, r2, #8
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	9303      	str	r3, [sp, #12]
 8001092:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001094:	f7ff fb10 	bl	80006b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2102      	movs	r1, #2
 800109c:	4844      	ldr	r0, [pc, #272]	; (80011b0 <main+0x18c>)
 800109e:	f7ff fb0b 	bl	80006b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80010a8:	4842      	ldr	r0, [pc, #264]	; (80011b4 <main+0x190>)
 80010aa:	f7ff fb05 	bl	80006b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010b2:	a904      	add	r1, sp, #16
 80010b4:	483d      	ldr	r0, [pc, #244]	; (80011ac <main+0x188>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010be:	f7ff fa1b 	bl	80004f8 <HAL_GPIO_Init>
  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a904      	add	r1, sp, #16
 80010c4:	483a      	ldr	r0, [pc, #232]	; (80011b0 <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 5604 	strd	r5, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f7ff fa13 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO_RF_Pin D_C_Pin */
  GPIO_InitStruct.Pin = DO_RF_Pin|D_C_Pin;
 80010d2:	f44f 5384 	mov.w	r3, #4224	; 0x1080
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	a904      	add	r1, sp, #16
 80010d8:	4836      	ldr	r0, [pc, #216]	; (80011b4 <main+0x190>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f7ff fa09 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FIRE_Pin */
  GPIO_InitStruct.Pin = FIRE_Pin;
 80010e6:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 80010e8:	a904      	add	r1, sp, #16
 80010ea:	4832      	ldr	r0, [pc, #200]	; (80011b4 <main+0x190>)
  hadc1.Instance = ADC1;
 80010ec:	4d32      	ldr	r5, [pc, #200]	; (80011b8 <main+0x194>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f7ff fa00 	bl	80004f8 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <main+0x198>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80010fc:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fe:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8001102:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001108:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001112:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001114:	f7ff f914 	bl	8000340 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001118:	a904      	add	r1, sp, #16
 800111a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111c:	e9cd 4604 	strd	r4, r6, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001120:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	f7ff f86d 	bl	8000200 <HAL_ADC_ConfigChannel>
  hi2c1.Instance = I2C1;
 8001126:	4826      	ldr	r0, [pc, #152]	; (80011c0 <main+0x19c>)
  hi2c1.Init.ClockSpeed = 100000;
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <main+0x1a0>)
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <main+0x1a4>)
  hi2c1.Init.OwnAddress1 = 0;
 800112c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001130:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001134:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001138:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001142:	f7ff fabf 	bl	80006c4 <HAL_I2C_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <main+0x1a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114c:	4920      	ldr	r1, [pc, #128]	; (80011d0 <main+0x1ac>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800114e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001152:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001156:	2308      	movs	r3, #8
 8001158:	e9c0 5306 	strd	r5, r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800115c:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800115e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CRCPolynomial = 10;
 8001162:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001168:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116c:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116e:	f7ff fe59 	bl	8000e24 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8001172:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001176:	4817      	ldr	r0, [pc, #92]	; (80011d4 <main+0x1b0>)
  huart2.Init.BaudRate = 115200;
 8001178:	4e17      	ldr	r6, [pc, #92]	; (80011d8 <main+0x1b4>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800117e:	e9c0 6300 	strd	r6, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001182:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001184:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800118a:	61c4      	str	r4, [r0, #28]
		  LED_blink( 1000 / j, j);
 800118c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001190:	f7ff febe 	bl	8000f10 <HAL_UART_Init>
	  for(int j = 1000; j > 1; j-=10 ){
 8001194:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		  LED_blink( 1000 / j, j);
 8001198:	4621      	mov	r1, r4
 800119a:	fb95 f0f4 	sdiv	r0, r5, r4
 800119e:	f7ff fee5 	bl	8000f6c <LED_blink>
	  for(int j = 1000; j > 1; j-=10 ){
 80011a2:	3c0a      	subs	r4, #10
 80011a4:	d1f8      	bne.n	8001198 <main+0x174>
 80011a6:	e7f5      	b.n	8001194 <main+0x170>
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	20000080 	.word	0x20000080
 80011bc:	40012400 	.word	0x40012400
 80011c0:	2000002c 	.word	0x2000002c
 80011c4:	40005400 	.word	0x40005400
 80011c8:	000186a0 	.word	0x000186a0
 80011cc:	200000b0 	.word	0x200000b0
 80011d0:	40013000 	.word	0x40013000
 80011d4:	20000108 	.word	0x20000108
 80011d8:	40004400 	.word	0x40004400

080011dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_MspInit+0x3c>)
{
 80011de:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	f002 0201 	and.w	r2, r2, #1
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	69da      	ldr	r2, [r3, #28]
 80011f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001206:	6853      	ldr	r3, [r2, #4]
 8001208:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800120c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	b002      	add	sp, #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b510      	push	{r4, lr}
 8001222:	4604      	mov	r4, r0
 8001224:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	2210      	movs	r2, #16
 8001228:	2100      	movs	r1, #0
 800122a:	a802      	add	r0, sp, #8
 800122c:	f000 f970 	bl	8001510 <memset>
  if(hadc->Instance==ADC1)
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_ADC_MspInit+0x54>)
 8001234:	429a      	cmp	r2, r3
 8001236:	d11b      	bne.n	8001270 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001238:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800123c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800123e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	f042 0204 	orr.w	r2, r2, #4
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800126c:	f7ff f944 	bl	80004f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001270:	b006      	add	sp, #24
 8001272:	bd10      	pop	{r4, pc}
 8001274:	40012400 	.word	0x40012400
 8001278:	40010800 	.word	0x40010800

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b510      	push	{r4, lr}
 800127e:	4604      	mov	r4, r0
 8001280:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	2210      	movs	r2, #16
 8001284:	2100      	movs	r1, #0
 8001286:	a802      	add	r0, sp, #8
 8001288:	f000 f942 	bl	8001510 <memset>
  if(hi2c->Instance==I2C1)
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_I2C_MspInit+0x68>)
 8001290:	429a      	cmp	r2, r3
 8001292:	d124      	bne.n	80012de <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4c14      	ldr	r4, [pc, #80]	; (80012e8 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	61a3      	str	r3, [r4, #24]
 80012a4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f7ff f91d 	bl	80004f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_I2C_MspInit+0x74>)
 80012c0:	6853      	ldr	r3, [r2, #4]
 80012c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	69e3      	ldr	r3, [r4, #28]
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d2:	61e3      	str	r3, [r4, #28]
 80012d4:	69e3      	ldr	r3, [r4, #28]
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012de:	b006      	add	sp, #24
 80012e0:	bd10      	pop	{r4, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40010000 	.word	0x40010000

080012f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	2410      	movs	r4, #16
{
 80012f8:	4605      	mov	r5, r0
 80012fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	4622      	mov	r2, r4
 80012fe:	2100      	movs	r1, #0
 8001300:	eb0d 0004 	add.w	r0, sp, r4
 8001304:	f000 f904 	bl	8001510 <memset>
  if(hspi->Instance==SPI1)
 8001308:	682a      	ldr	r2, [r5, #0]
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_SPI_MspInit+0xa4>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d141      	bne.n	8001394 <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001310:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001314:	699a      	ldr	r2, [r3, #24]
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = CS_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2602      	movs	r6, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800131c:	619a      	str	r2, [r3, #24]
 800131e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001322:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 800132c:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	f042 0204 	orr.w	r2, r2, #4
 8001334:	619a      	str	r2, [r3, #24]
 8001336:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8001338:	4818      	ldr	r0, [pc, #96]	; (800139c <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	f002 0204 	and.w	r2, r2, #4
 800133e:	9202      	str	r2, [sp, #8]
 8001340:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	f042 0208 	orr.w	r2, r2, #8
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	9303      	str	r3, [sp, #12]
 8001354:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 800135e:	f7ff f8cb 	bl	80004f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
 8001362:	2328      	movs	r3, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	eb0d 0104 	add.w	r1, sp, r4
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f7ff f8c2 	bl	80004f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8001376:	eb0d 0104 	add.w	r1, sp, r4
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <HAL_SPI_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8001380:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8001382:	f7ff f8b9 	bl	80004f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_SPI_MspInit+0xb0>)
 8001388:	6853      	ldr	r3, [r2, #4]
 800138a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001394:	b008      	add	sp, #32
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	40013000 	.word	0x40013000
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	40010000 	.word	0x40010000

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	2210      	movs	r2, #16
 80013b0:	2100      	movs	r1, #0
 80013b2:	a802      	add	r0, sp, #8
 80013b4:	f000 f8ac 	bl	8001510 <memset>
  if(huart->Instance==USART2)
 80013b8:	6822      	ldr	r2, [r4, #0]
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_UART_MspInit+0x6c>)
 80013bc:	429a      	cmp	r2, r3
 80013be:	d126      	bne.n	800140e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80013c4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80013c6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013cc:	61da      	str	r2, [r3, #28]
 80013ce:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013d6:	9200      	str	r2, [sp, #0]
 80013d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	f042 0204 	orr.w	r2, r2, #4
 80013e0:	619a      	str	r2, [r3, #24]
 80013e2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f7ff f87e 	bl	80004f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2108      	movs	r1, #8
 80013fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8001406:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800140a:	f7ff f875 	bl	80004f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140e:	b006      	add	sp, #24
 8001410:	bd10      	pop	{r4, pc}
 8001412:	bf00      	nop
 8001414:	40004400 	.word	0x40004400
 8001418:	40010800 	.word	0x40010800

0800141c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	4770      	bx	lr

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	e7fe      	b.n	800141e <HardFault_Handler>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler>

08001426 <SVC_Handler>:
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f7fe bec4 	b.w	80001b8 <HAL_IncTick>

08001430 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <SystemInit+0x40>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <SystemInit+0x44>)
 800143e:	400a      	ands	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800144c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001454:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800145c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800145e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001462:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001464:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <SystemInit+0x48>)
 800146a:	609a      	str	r2, [r3, #8]
#endif 
}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	f8ff0000 	.word	0xf8ff0000
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800147c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800148e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800149e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff ffc5 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f000 f80f 	bl	80014c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fdbb 	bl	8001024 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r3, =_sidata
 80014b0:	08001568 	.word	0x08001568
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014bc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80014c0:	2000014c 	.word	0x2000014c

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <__libc_init_array>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	2500      	movs	r5, #0
 80014cc:	4e0c      	ldr	r6, [pc, #48]	; (8001500 <__libc_init_array+0x38>)
 80014ce:	4c0d      	ldr	r4, [pc, #52]	; (8001504 <__libc_init_array+0x3c>)
 80014d0:	1ba4      	subs	r4, r4, r6
 80014d2:	10a4      	asrs	r4, r4, #2
 80014d4:	42a5      	cmp	r5, r4
 80014d6:	d109      	bne.n	80014ec <__libc_init_array+0x24>
 80014d8:	f000 f822 	bl	8001520 <_init>
 80014dc:	2500      	movs	r5, #0
 80014de:	4e0a      	ldr	r6, [pc, #40]	; (8001508 <__libc_init_array+0x40>)
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <__libc_init_array+0x44>)
 80014e2:	1ba4      	subs	r4, r4, r6
 80014e4:	10a4      	asrs	r4, r4, #2
 80014e6:	42a5      	cmp	r5, r4
 80014e8:	d105      	bne.n	80014f6 <__libc_init_array+0x2e>
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f0:	4798      	blx	r3
 80014f2:	3501      	adds	r5, #1
 80014f4:	e7ee      	b.n	80014d4 <__libc_init_array+0xc>
 80014f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014fa:	4798      	blx	r3
 80014fc:	3501      	adds	r5, #1
 80014fe:	e7f2      	b.n	80014e6 <__libc_init_array+0x1e>
 8001500:	08001560 	.word	0x08001560
 8001504:	08001560 	.word	0x08001560
 8001508:	08001560 	.word	0x08001560
 800150c:	08001564 	.word	0x08001564

08001510 <memset>:
 8001510:	4603      	mov	r3, r0
 8001512:	4402      	add	r2, r0
 8001514:	4293      	cmp	r3, r2
 8001516:	d100      	bne.n	800151a <memset+0xa>
 8001518:	4770      	bx	lr
 800151a:	f803 1b01 	strb.w	r1, [r3], #1
 800151e:	e7f9      	b.n	8001514 <memset+0x4>

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
