
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025e0  0800b208  0800b208  0001b208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7f0  0800d7f0  0001d7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000364  20000000  0800d7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001818  20000368  0800db5c  00020368  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20001b80  0800db5c  00021b80  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026a8c  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f7d  00000000  00000000  00046e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f3a4  00000000  00000000  0004cd96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014a0  00000000  00000000  0005c140  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ef0  00000000  00000000  0005d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001ae4b  00000000  00000000  0005f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001920c  00000000  00000000  0007a31b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007dcbe  00000000  00000000  00093527  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001111e5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005060  00000000  00000000  00111260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000368 	.word	0x20000368
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1ec 	.word	0x0800b1ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000036c 	.word	0x2000036c
 800014c:	0800b1ec 	.word	0x0800b1ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b974 	b.w	8000e68 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	fbbc f7fe 	udiv	r7, ip, lr
 8000bce:	fa1f f885 	uxth.w	r8, r5
 8000bd2:	fb0e c317 	mls	r3, lr, r7, ip
 8000bd6:	fb07 f908 	mul.w	r9, r7, r8
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be0:	4599      	cmp	r9, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 31ff 	add.w	r1, r7, #4294967295
 8000bea:	f080 811c 	bcs.w	8000e26 <__udivmoddi4+0x28e>
 8000bee:	4599      	cmp	r9, r3
 8000bf0:	f240 8119 	bls.w	8000e26 <__udivmoddi4+0x28e>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	eba3 0309 	sub.w	r3, r3, r9
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	fb00 f108 	mul.w	r1, r0, r8
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0e:	42a1      	cmp	r1, r4
 8000c10:	d909      	bls.n	8000c26 <__udivmoddi4+0x8e>
 8000c12:	192c      	adds	r4, r5, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 8107 	bcs.w	8000e2a <__udivmoddi4+0x292>
 8000c1c:	42a1      	cmp	r1, r4
 8000c1e:	f240 8104 	bls.w	8000e2a <__udivmoddi4+0x292>
 8000c22:	3802      	subs	r0, #2
 8000c24:	442c      	add	r4, r5
 8000c26:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	1a64      	subs	r4, r4, r1
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	2300      	movs	r3, #0
 8000c32:	40d4      	lsrs	r4, r2
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80ec 	beq.w	8000e20 <__udivmoddi4+0x288>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d148      	bne.n	8000cf0 <__udivmoddi4+0x158>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fb 	bhi.w	8000e5e <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469c      	mov	ip, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	2701      	movs	r7, #1
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c92:	fa1f f985 	uxth.w	r9, r5
 8000c96:	fbb1 fef8 	udiv	lr, r1, r8
 8000c9a:	fb08 111e 	mls	r1, r8, lr, r1
 8000c9e:	fb09 f00e 	mul.w	r0, r9, lr
 8000ca2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ca6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x126>
 8000cae:	18eb      	adds	r3, r5, r3
 8000cb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x124>
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	f200 80cd 	bhi.w	8000e56 <__udivmoddi4+0x2be>
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	fb09 f900 	mul.w	r9, r9, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd2:	45a1      	cmp	r9, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x14e>
 8000cd6:	192c      	adds	r4, r5, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x14c>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f200 80b6 	bhi.w	8000e50 <__udivmoddi4+0x2b8>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	eba4 0409 	sub.w	r4, r4, r9
 8000cea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000cee:	e79e      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cf0:	f1c7 0520 	rsb	r5, r7, #32
 8000cf4:	40bb      	lsls	r3, r7
 8000cf6:	fa22 fc05 	lsr.w	ip, r2, r5
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa21 f405 	lsr.w	r4, r1, r5
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d0a:	fa1f f88c 	uxth.w	r8, ip
 8000d0e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d12:	fa20 f305 	lsr.w	r3, r0, r5
 8000d16:	40b9      	lsls	r1, r7
 8000d18:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	0c0b      	lsrs	r3, r1, #16
 8000d20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d24:	45a2      	cmp	sl, r4
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2b4>
 8000d3c:	45a2      	cmp	sl, r4
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2b4>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4464      	add	r4, ip
 8000d48:	eba4 040a 	sub.w	r4, r4, sl
 8000d4c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d50:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d54:	fb00 fa08 	mul.w	sl, r0, r8
 8000d58:	b289      	uxth	r1, r1
 8000d5a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d5e:	45a2      	cmp	sl, r4
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x1dc>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	d26b      	bcs.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d969      	bls.n	8000e44 <__udivmoddi4+0x2ac>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4464      	add	r4, ip
 8000d74:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d78:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7c:	eba4 040a 	sub.w	r4, r4, sl
 8000d80:	454c      	cmp	r4, r9
 8000d82:	4641      	mov	r1, r8
 8000d84:	46ce      	mov	lr, r9
 8000d86:	d354      	bcc.n	8000e32 <__udivmoddi4+0x29a>
 8000d88:	d051      	beq.n	8000e2e <__udivmoddi4+0x296>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d069      	beq.n	8000e62 <__udivmoddi4+0x2ca>
 8000d8e:	1a5a      	subs	r2, r3, r1
 8000d90:	eb64 040e 	sbc.w	r4, r4, lr
 8000d94:	fa04 f505 	lsl.w	r5, r4, r5
 8000d98:	fa22 f307 	lsr.w	r3, r2, r7
 8000d9c:	40fc      	lsrs	r4, r7
 8000d9e:	431d      	orrs	r5, r3
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	4095      	lsls	r5, r2
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	fa21 f003 	lsr.w	r0, r1, r3
 8000db2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000db6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dba:	fa1f f985 	uxth.w	r9, r5
 8000dbe:	fb08 0017 	mls	r0, r8, r7, r0
 8000dc2:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc6:	4091      	lsls	r1, r2
 8000dc8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	0c19      	lsrs	r1, r3, #16
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	458c      	cmp	ip, r1
 8000dd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x254>
 8000ddc:	1869      	adds	r1, r5, r1
 8000dde:	f107 30ff 	add.w	r0, r7, #4294967295
 8000de2:	d231      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000de4:	458c      	cmp	ip, r1
 8000de6:	d92f      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000de8:	3f02      	subs	r7, #2
 8000dea:	4429      	add	r1, r5
 8000dec:	eba1 010c 	sub.w	r1, r1, ip
 8000df0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000df4:	fb08 1c10 	mls	ip, r8, r0, r1
 8000df8:	fb00 fe09 	mul.w	lr, r0, r9
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d218      	bcs.n	8000e40 <__udivmoddi4+0x2a8>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d916      	bls.n	8000e40 <__udivmoddi4+0x2a8>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1e:	e73a      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e20:	4637      	mov	r7, r6
 8000e22:	4630      	mov	r0, r6
 8000e24:	e708      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e26:	460f      	mov	r7, r1
 8000e28:	e6e6      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	e6fb      	b.n	8000c26 <__udivmoddi4+0x8e>
 8000e2e:	4543      	cmp	r3, r8
 8000e30:	d2ab      	bcs.n	8000d8a <__udivmoddi4+0x1f2>
 8000e32:	ebb8 0102 	subs.w	r1, r8, r2
 8000e36:	eb69 020c 	sbc.w	r2, r9, ip
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	4696      	mov	lr, r2
 8000e3e:	e7a4      	b.n	8000d8a <__udivmoddi4+0x1f2>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e7e8      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e795      	b.n	8000d74 <__udivmoddi4+0x1dc>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e7cf      	b.n	8000dec <__udivmoddi4+0x254>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	442c      	add	r4, r5
 8000e54:	e747      	b.n	8000ce6 <__udivmoddi4+0x14e>
 8000e56:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5a:	442b      	add	r3, r5
 8000e5c:	e72f      	b.n	8000cbe <__udivmoddi4+0x126>
 8000e5e:	4638      	mov	r0, r7
 8000e60:	e707      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e62:	4637      	mov	r7, r6
 8000e64:	e6e8      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_InitTick+0x3c>)
{
 8000e70:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_InitTick+0x40>)
 8000e7e:	6810      	ldr	r0, [r2, #0]
 8000e80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e84:	f000 fada 	bl	800143c <HAL_SYSTICK_Config>
 8000e88:	4604      	mov	r4, r0
 8000e8a:	b958      	cbnz	r0, 8000ea4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	2d0f      	cmp	r5, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	4602      	mov	r2, r0
 8000e92:	4629      	mov	r1, r5
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fa8e 	bl	80013b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_InitTick+0x44>)
 8000ea0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e7fc      	b.n	8000ea2 <HAL_InitTick+0x36>
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000130 	.word	0x20000130
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x20>)
{
 8000eb6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	f000 fa67 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffd0 	bl	8000e6c <HAL_InitTick>
  HAL_MspInit();
 8000ecc:	f004 ffd4 	bl	8005e78 <HAL_MspInit>
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x10>)
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_IncTick+0x14>)
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200009c0 	.word	0x200009c0
 8000eec:	20000000 	.word	0x20000000

08000ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef0:	4b01      	ldr	r3, [pc, #4]	; (8000ef8 <HAL_GetTick+0x8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200009c0 	.word	0x200009c0

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff6 	bl	8000ef0 <HAL_GetTick>
 8000f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f08:	bf1e      	ittt	ne
 8000f0a:	4b04      	ldrne	r3, [pc, #16]	; (8000f1c <HAL_Delay+0x20>)
 8000f0c:	781b      	ldrbne	r3, [r3, #0]
 8000f0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	1b40      	subs	r0, r0, r5
 8000f16:	42a0      	cmp	r0, r4
 8000f18:	d3fa      	bcc.n	8000f10 <HAL_Delay+0x14>
  {
  }
}
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f24:	4770      	bx	lr

08000f26 <HAL_ADC_LevelOutOfWindowCallback>:
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f28:	6803      	ldr	r3, [r0, #0]
{
 8000f2a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f2c:	685a      	ldr	r2, [r3, #4]
{
 8000f2e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f30:	0690      	lsls	r0, r2, #26
 8000f32:	d527      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	0791      	lsls	r1, r2, #30
 8000f38:	d524      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f3e:	bf5e      	ittt	pl
 8000f40:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f42:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000f46:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f4e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f52:	d110      	bne.n	8000f76 <HAL_ADC_IRQHandler+0x4e>
 8000f54:	7b22      	ldrb	r2, [r4, #12]
 8000f56:	b972      	cbnz	r2, 8000f76 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	f022 0220 	bic.w	r2, r2, #32
 8000f5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f66:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f6a:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6c:	bf5e      	ittt	pl
 8000f6e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000f70:	f043 0301 	orrpl.w	r3, r3, #1
 8000f74:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f004 f828 	bl	8004fcc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f7c:	f06f 0212 	mvn.w	r2, #18
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	0610      	lsls	r0, r2, #24
 8000f8a:	d530      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	0751      	lsls	r1, r2, #29
 8000f90:	d52d      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f94:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f96:	bf5e      	ittt	pl
 8000f98:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f9a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000f9e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000fa6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000faa:	d00a      	beq.n	8000fc2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fac:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fae:	0550      	lsls	r0, r2, #21
 8000fb0:	d416      	bmi.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fb8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fbc:	d110      	bne.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fbe:	7b22      	ldrb	r2, [r4, #12]
 8000fc0:	b972      	cbnz	r2, 8000fe0 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd0:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd6:	bf5e      	ittt	pl
 8000fd8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000fda:	f043 0301 	orrpl.w	r3, r3, #1
 8000fde:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f000 f9d5 	bl	8001390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fe6:	f06f 020c 	mvn.w	r2, #12
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	0652      	lsls	r2, r2, #25
 8000ff4:	d50d      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	07db      	lsls	r3, r3, #31
 8000ffa:	d50a      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ffe:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	f7ff ff8e 	bl	8000f26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100a:	f06f 0201 	mvn.w	r2, #1
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001012:	bd10      	pop	{r4, pc}

08001014 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001014:	2300      	movs	r3, #0
{ 
 8001016:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001018:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800101e:	2b01      	cmp	r3, #1
 8001020:	d06d      	beq.n	80010fe <HAL_ADC_ConfigChannel+0xea>
 8001022:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001026:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800102a:	2d06      	cmp	r5, #6
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001032:	680c      	ldr	r4, [r1, #0]
 8001034:	d823      	bhi.n	800107e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001036:	261f      	movs	r6, #31
 8001038:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800103a:	3b05      	subs	r3, #5
 800103c:	409e      	lsls	r6, r3
 800103e:	ea25 0506 	bic.w	r5, r5, r6
 8001042:	fa04 f303 	lsl.w	r3, r4, r3
 8001046:	432b      	orrs	r3, r5
 8001048:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800104a:	2c09      	cmp	r4, #9
 800104c:	688b      	ldr	r3, [r1, #8]
 800104e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001052:	f04f 0107 	mov.w	r1, #7
 8001056:	d92a      	bls.n	80010ae <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001058:	68d6      	ldr	r6, [r2, #12]
 800105a:	3d1e      	subs	r5, #30
 800105c:	40a9      	lsls	r1, r5
 800105e:	ea26 0101 	bic.w	r1, r6, r1
 8001062:	40ab      	lsls	r3, r5
 8001064:	430b      	orrs	r3, r1
 8001066:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001068:	f1a4 0310 	sub.w	r3, r4, #16
 800106c:	2b01      	cmp	r3, #1
 800106e:	d926      	bls.n	80010be <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001072:	2200      	movs	r2, #0
 8001074:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001078:	4618      	mov	r0, r3
 800107a:	b002      	add	sp, #8
 800107c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800107e:	2d0c      	cmp	r5, #12
 8001080:	f04f 051f 	mov.w	r5, #31
 8001084:	d809      	bhi.n	800109a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001086:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001088:	3b23      	subs	r3, #35	; 0x23
 800108a:	409d      	lsls	r5, r3
 800108c:	ea26 0505 	bic.w	r5, r6, r5
 8001090:	fa04 f303 	lsl.w	r3, r4, r3
 8001094:	432b      	orrs	r3, r5
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	e7d7      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800109a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800109c:	3b41      	subs	r3, #65	; 0x41
 800109e:	409d      	lsls	r5, r3
 80010a0:	ea26 0505 	bic.w	r5, r6, r5
 80010a4:	fa04 f303 	lsl.w	r3, r4, r3
 80010a8:	432b      	orrs	r3, r5
 80010aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010ac:	e7cd      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ae:	6916      	ldr	r6, [r2, #16]
 80010b0:	40a9      	lsls	r1, r5
 80010b2:	ea26 0101 	bic.w	r1, r6, r1
 80010b6:	40ab      	lsls	r3, r5
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6113      	str	r3, [r2, #16]
 80010bc:	e7d4      	b.n	8001068 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_ADC_ConfigChannel+0xf0>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d116      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c4:	6893      	ldr	r3, [r2, #8]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	d4d2      	bmi.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ca:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010cc:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d2:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010d4:	d1cc      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_ADC_ConfigChannel+0xf4>)
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_ADC_ConfigChannel+0xf8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80010e0:	230a      	movs	r3, #10
 80010e2:	4353      	muls	r3, r2
            wait_loop_index--;
 80010e4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c1      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80010ec:	9b01      	ldr	r3, [sp, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	e7f8      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e7b9      	b.n	8001072 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80010fe:	2302      	movs	r3, #2
 8001100:	e7ba      	b.n	8001078 <HAL_ADC_ConfigChannel+0x64>
 8001102:	bf00      	nop
 8001104:	40012400 	.word	0x40012400
 8001108:	20000130 	.word	0x20000130
 800110c:	000f4240 	.word	0x000f4240

08001110 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001110:	2300      	movs	r3, #0
{
 8001112:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001114:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001116:	6803      	ldr	r3, [r0, #0]
{
 8001118:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	07d2      	lsls	r2, r2, #31
 800111e:	d502      	bpl.n	8001126 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
}
 8001122:	b002      	add	sp, #8
 8001124:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <ADC_Enable+0x68>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <ADC_Enable+0x6c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001138:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800113a:	9b01      	ldr	r3, [sp, #4]
 800113c:	b9c3      	cbnz	r3, 8001170 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800113e:	f7ff fed7 	bl	8000ef0 <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	689d      	ldr	r5, [r3, #8]
 8001148:	f015 0501 	ands.w	r5, r5, #1
 800114c:	d1e8      	bne.n	8001120 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800114e:	f7ff fecf 	bl	8000ef0 <HAL_GetTick>
 8001152:	1b80      	subs	r0, r0, r6
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800115a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001166:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800116e:	e7d8      	b.n	8001122 <ADC_Enable+0x12>
      wait_loop_index--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	e7e0      	b.n	8001138 <ADC_Enable+0x28>
 8001176:	bf00      	nop
 8001178:	20000130 	.word	0x20000130
 800117c:	000f4240 	.word	0x000f4240

08001180 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001180:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001184:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001186:	2b01      	cmp	r3, #1
{
 8001188:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800118a:	d058      	beq.n	800123e <HAL_ADC_Start_IT+0xbe>
 800118c:	2301      	movs	r3, #1
 800118e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001192:	f7ff ffbd 	bl	8001110 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001196:	2800      	cmp	r0, #0
 8001198:	d14d      	bne.n	8001236 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d104      	bne.n	80011bc <HAL_ADC_Start_IT+0x3c>
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_ADC_Start_IT+0xc8>)
 80011b4:	684a      	ldr	r2, [r1, #4]
 80011b6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80011ba:	d132      	bne.n	8001222 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011c2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011c6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c8:	bf41      	itttt	mi
 80011ca:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80011cc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011d0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011d4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011dc:	bf1c      	itt	ne
 80011de:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80011e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011ec:	f06f 0202 	mvn.w	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001200:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001204:	d113      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d105      	bne.n	8001218 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800120c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001210:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001212:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001216:	d10a      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001224:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001228:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800122a:	684a      	ldr	r2, [r1, #4]
 800122c:	e7cb      	b.n	80011c6 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001234:	e7f3      	b.n	800121e <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8001236:	2300      	movs	r3, #0
 8001238:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800123c:	e7f0      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800123e:	2002      	movs	r0, #2
 8001240:	e7ee      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
 8001242:	bf00      	nop
 8001244:	40012800 	.word	0x40012800
 8001248:	40012400 	.word	0x40012400

0800124c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800124e:	6803      	ldr	r3, [r0, #0]
{
 8001250:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	07d2      	lsls	r2, r2, #31
 8001256:	d401      	bmi.n	800125c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
}
 800125a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001264:	f7ff fe44 	bl	8000ef0 <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	07db      	lsls	r3, r3, #31
 8001270:	d5f2      	bpl.n	8001258 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001272:	f7ff fe3d 	bl	8000ef0 <HAL_GetTick>
 8001276:	1b40      	subs	r0, r0, r5
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800128e:	e7e4      	b.n	800125a <ADC_ConversionStop_Disable+0xe>

08001290 <HAL_ADC_Init>:
{
 8001290:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001292:	4604      	mov	r4, r0
 8001294:	2800      	cmp	r0, #0
 8001296:	d070      	beq.n	800137a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800129a:	b923      	cbnz	r3, 80012a6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800129e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80012a2:	f003 fd1d 	bl	8004ce0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ffd0 	bl	800124c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ae:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	d163      	bne.n	800137e <HAL_ADC_Init+0xee>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d161      	bne.n	800137e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ba:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ca:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80012ce:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d0:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012da:	d037      	beq.n	800134c <HAL_ADC_Init+0xbc>
 80012dc:	2901      	cmp	r1, #1
 80012de:	bf14      	ite	ne
 80012e0:	4606      	movne	r6, r0
 80012e2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e6:	7d25      	ldrb	r5, [r4, #20]
 80012e8:	2d01      	cmp	r5, #1
 80012ea:	d106      	bne.n	80012fa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012ec:	bb83      	cbnz	r3, 8001350 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80012f6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80012fa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001300:	685d      	ldr	r5, [r3, #4]
 8001302:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001306:	ea45 0506 	orr.w	r5, r5, r6
 800130a:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800130c:	689e      	ldr	r6, [r3, #8]
 800130e:	4d1e      	ldr	r5, [pc, #120]	; (8001388 <HAL_ADC_Init+0xf8>)
 8001310:	ea05 0506 	and.w	r5, r5, r6
 8001314:	ea45 0502 	orr.w	r5, r5, r2
 8001318:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800131a:	d001      	beq.n	8001320 <HAL_ADC_Init+0x90>
 800131c:	2901      	cmp	r1, #1
 800131e:	d120      	bne.n	8001362 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001320:	6921      	ldr	r1, [r4, #16]
 8001322:	3901      	subs	r1, #1
 8001324:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001326:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001328:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800132c:	4329      	orrs	r1, r5
 800132e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_ADC_Init+0xfc>)
 8001334:	400b      	ands	r3, r1
 8001336:	429a      	cmp	r2, r3
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800133a:	2300      	movs	r3, #0
 800133c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800133e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001340:	f023 0303 	bic.w	r3, r3, #3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800134c:	460e      	mov	r6, r1
 800134e:	e7ca      	b.n	80012e6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001360:	e7cb      	b.n	80012fa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001362:	2100      	movs	r1, #0
 8001364:	e7df      	b.n	8001326 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001368:	f023 0312 	bic.w	r3, r3, #18
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7e5      	b.n	800134a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	62a3      	str	r3, [r4, #40]	; 0x28
 8001384:	e7f9      	b.n	800137a <HAL_ADC_Init+0xea>
 8001386:	bf00      	nop
 8001388:	ffe1f7fd 	.word	0xffe1f7fd
 800138c:	ff1f0efe 	.word	0xff1f0efe

08001390 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001390:	4770      	bx	lr
	...

08001394 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001396:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80013ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b570      	push	{r4, r5, r6, lr}
 80013bc:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013be:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c6:	f1c4 0507 	rsb	r5, r4, #7
 80013ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013cc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	bf28      	it	cs
 80013d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	bf98      	it	ls
 80013d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013da:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	bf88      	it	hi
 80013e0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e2:	ea21 0303 	bic.w	r3, r1, r3
 80013e6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	fa06 f404 	lsl.w	r4, r6, r4
 80013ec:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80013f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	bfa8      	it	ge
 80013f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80013fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	bfb8      	it	lt
 8001402:	4a06      	ldrlt	r2, [pc, #24]	; (800141c <HAL_NVIC_SetPriority+0x64>)
 8001404:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	bfab      	itete	ge
 8001408:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed14 	.word	0xe000ed14

08001420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001420:	2800      	cmp	r0, #0
 8001422:	db08      	blt.n	8001436 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001424:	2301      	movs	r3, #1
 8001426:	0942      	lsrs	r2, r0, #5
 8001428:	f000 001f 	and.w	r0, r0, #31
 800142c:	fa03 f000 	lsl.w	r0, r3, r0
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <HAL_NVIC_EnableIRQ+0x18>)
 8001432:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	3801      	subs	r0, #1
 800143e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001442:	d20a      	bcs.n	800145a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001468:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800146c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800146e:	2b02      	cmp	r3, #2
 8001470:	d003      	beq.n	800147a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	2304      	movs	r3, #4
 8001474:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001476:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001478:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_DMA_Abort_IT+0x88>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x6a>
 8001492:	3214      	adds	r2, #20
 8001494:	4293      	cmp	r3, r2
 8001496:	d01e      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x6e>
 8001498:	3214      	adds	r2, #20
 800149a:	4293      	cmp	r3, r2
 800149c:	d01d      	beq.n	80014da <HAL_DMA_Abort_IT+0x72>
 800149e:	3214      	adds	r2, #20
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01d      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x78>
 80014a4:	3214      	adds	r2, #20
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x7e>
 80014aa:	3214      	adds	r2, #20
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf0c      	ite	eq
 80014b0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80014b4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80014ba:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014bc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014be:	2301      	movs	r3, #1
 80014c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80014c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80014c6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014ca:	b17b      	cbz	r3, 80014ec <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80014cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	4620      	mov	r0, r4
 80014d0:	e7d2      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014d2:	2301      	movs	r3, #1
 80014d4:	e7f0      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014d6:	2310      	movs	r3, #16
 80014d8:	e7ee      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	e7eb      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	e7e8      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	e7e5      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	4618      	mov	r0, r3
 80014ee:	e7c3      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
 80014f0:	40020008 	.word	0x40020008
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80014fe:	4626      	mov	r6, r4
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016a8 <HAL_GPIO_Init+0x1b0>
 8001506:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80016ac <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	680a      	ldr	r2, [r1, #0]
 800150c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001512:	b003      	add	sp, #12
 8001514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001518:	f04f 0801 	mov.w	r8, #1
 800151c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001520:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001524:	4590      	cmp	r8, r2
 8001526:	d17e      	bne.n	8001626 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001528:	684d      	ldr	r5, [r1, #4]
 800152a:	2d12      	cmp	r5, #18
 800152c:	f000 80a9 	beq.w	8001682 <HAL_GPIO_Init+0x18a>
 8001530:	f200 8082 	bhi.w	8001638 <HAL_GPIO_Init+0x140>
 8001534:	2d02      	cmp	r5, #2
 8001536:	f000 80a1 	beq.w	800167c <HAL_GPIO_Init+0x184>
 800153a:	d876      	bhi.n	800162a <HAL_GPIO_Init+0x132>
 800153c:	2d00      	cmp	r5, #0
 800153e:	f000 8088 	beq.w	8001652 <HAL_GPIO_Init+0x15a>
 8001542:	2d01      	cmp	r5, #1
 8001544:	f000 8098 	beq.w	8001678 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	2aff      	cmp	r2, #255	; 0xff
 800154e:	bf93      	iteet	ls
 8001550:	4682      	movls	sl, r0
 8001552:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001556:	3d08      	subhi	r5, #8
 8001558:	f8d0 b000 	ldrls.w	fp, [r0]
 800155c:	bf92      	itee	ls
 800155e:	00b5      	lslls	r5, r6, #2
 8001560:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001564:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001566:	fa09 f805 	lsl.w	r8, r9, r5
 800156a:	ea2b 0808 	bic.w	r8, fp, r8
 800156e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001572:	bf88      	it	hi
 8001574:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001578:	ea48 0505 	orr.w	r5, r8, r5
 800157c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001584:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001588:	d04d      	beq.n	8001626 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4f44      	ldr	r7, [pc, #272]	; (800169c <HAL_GPIO_Init+0x1a4>)
 800158c:	f026 0803 	bic.w	r8, r6, #3
 8001590:	69bd      	ldr	r5, [r7, #24]
 8001592:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001596:	f045 0501 	orr.w	r5, r5, #1
 800159a:	61bd      	str	r5, [r7, #24]
 800159c:	69bd      	ldr	r5, [r7, #24]
 800159e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80015a2:	f005 0501 	and.w	r5, r5, #1
 80015a6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80015b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	fa09 f90b 	lsl.w	r9, r9, fp
 80015ba:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015be:	4d38      	ldr	r5, [pc, #224]	; (80016a0 <HAL_GPIO_Init+0x1a8>)
 80015c0:	42a8      	cmp	r0, r5
 80015c2:	d063      	beq.n	800168c <HAL_GPIO_Init+0x194>
 80015c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c8:	42a8      	cmp	r0, r5
 80015ca:	d061      	beq.n	8001690 <HAL_GPIO_Init+0x198>
 80015cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d0:	42a8      	cmp	r0, r5
 80015d2:	d05f      	beq.n	8001694 <HAL_GPIO_Init+0x19c>
 80015d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d8:	42a8      	cmp	r0, r5
 80015da:	bf0c      	ite	eq
 80015dc:	2503      	moveq	r5, #3
 80015de:	2504      	movne	r5, #4
 80015e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80015e4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80015e8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015f2:	bf14      	ite	ne
 80015f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f6:	4395      	biceq	r5, r2
 80015f8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015fa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	bf14      	ite	ne
 8001602:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	4395      	biceq	r5, r2
 8001606:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001608:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800160e:	bf14      	ite	ne
 8001610:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001612:	4395      	biceq	r5, r2
 8001614:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001616:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	bf14      	ite	ne
 800161e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001620:	ea25 0202 	biceq.w	r2, r5, r2
 8001624:	60da      	str	r2, [r3, #12]
	position++;
 8001626:	3601      	adds	r6, #1
 8001628:	e76f      	b.n	800150a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800162a:	2d03      	cmp	r5, #3
 800162c:	d022      	beq.n	8001674 <HAL_GPIO_Init+0x17c>
 800162e:	2d11      	cmp	r5, #17
 8001630:	d18a      	bne.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001632:	68cc      	ldr	r4, [r1, #12]
 8001634:	3404      	adds	r4, #4
          break;
 8001636:	e787      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001638:	4f1a      	ldr	r7, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x1ac>)
 800163a:	42bd      	cmp	r5, r7
 800163c:	d009      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800163e:	d812      	bhi.n	8001666 <HAL_GPIO_Init+0x16e>
 8001640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80016b0 <HAL_GPIO_Init+0x1b8>
 8001644:	454d      	cmp	r5, r9
 8001646:	d004      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 8001648:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800164c:	454d      	cmp	r5, r9
 800164e:	f47f af7b 	bne.w	8001548 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	688c      	ldr	r4, [r1, #8]
 8001654:	b1c4      	cbz	r4, 8001688 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001656:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001658:	bf0c      	ite	eq
 800165a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800165e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001662:	2408      	movs	r4, #8
 8001664:	e770      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001666:	4565      	cmp	r5, ip
 8001668:	d0f3      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166a:	4575      	cmp	r5, lr
 800166c:	d0f1      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016b4 <HAL_GPIO_Init+0x1bc>
 8001672:	e7eb      	b.n	800164c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2400      	movs	r4, #0
 8001676:	e767      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	68cc      	ldr	r4, [r1, #12]
          break;
 800167a:	e765      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167c:	68cc      	ldr	r4, [r1, #12]
 800167e:	3408      	adds	r4, #8
          break;
 8001680:	e762      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001682:	68cc      	ldr	r4, [r1, #12]
 8001684:	340c      	adds	r4, #12
          break;
 8001686:	e75f      	b.n	8001548 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001688:	2404      	movs	r4, #4
 800168a:	e75d      	b.n	8001548 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	2500      	movs	r5, #0
 800168e:	e7a7      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001690:	2501      	movs	r5, #1
 8001692:	e7a5      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001694:	2502      	movs	r5, #2
 8001696:	e7a3      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001698:	40010400 	.word	0x40010400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10320000 	.word	0x10320000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	10220000 	.word	0x10220000

080016b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	6883      	ldr	r3, [r0, #8]
 80016ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80016bc:	bf14      	ite	ne
 80016be:	2001      	movne	r0, #1
 80016c0:	2000      	moveq	r0, #0
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	b10a      	cbz	r2, 80016ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c6:	6101      	str	r1, [r0, #16]
  }
}
 80016c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	e7fb      	b.n	80016c6 <HAL_GPIO_WritePin+0x2>

080016ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016ce:	68c3      	ldr	r3, [r0, #12]
 80016d0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	bf14      	ite	ne
 80016d4:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	6101      	streq	r1, [r0, #16]
  }
}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	4201      	tst	r1, r0
 80016e4:	d002      	beq.n	80016ec <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	f003 fc4c 	bl	8004f84 <HAL_GPIO_EXTI_Callback>
  }
}
 80016ec:	bd08      	pop	{r3, pc}
 80016ee:	bf00      	nop
 80016f0:	40010400 	.word	0x40010400

080016f4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	694b      	ldr	r3, [r1, #20]
 80016fa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80016fe:	d010      	beq.n	8001722 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001700:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001704:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001706:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001708:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800170a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800170e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001712:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
 8001720:	4770      	bx	lr
  }
  return HAL_OK;
 8001722:	4618      	mov	r0, r3
}
 8001724:	4770      	bx	lr

08001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	4604      	mov	r4, r0
 800172c:	4616      	mov	r6, r2
 800172e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001730:	b28f      	uxth	r7, r1
 8001732:	6825      	ldr	r5, [r4, #0]
 8001734:	6968      	ldr	r0, [r5, #20]
 8001736:	ea37 0000 	bics.w	r0, r7, r0
 800173a:	d017      	beq.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800173c:	696b      	ldr	r3, [r5, #20]
 800173e:	055a      	lsls	r2, r3, #21
 8001740:	d516      	bpl.n	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001742:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001744:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001750:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001756:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800175e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001760:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001770:	1c73      	adds	r3, r6, #1
 8001772:	d0df      	beq.n	8001734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff fbbc 	bl	8000ef0 <HAL_GetTick>
 8001778:	eba0 0008 	sub.w	r0, r0, r8
 800177c:	42b0      	cmp	r0, r6
 800177e:	d801      	bhi.n	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001780:	2e00      	cmp	r6, #0
 8001782:	d1d6      	bne.n	8001732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001784:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001786:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001788:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800178e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	e7e4      	b.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800179a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800179a:	b570      	push	{r4, r5, r6, lr}
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	075b      	lsls	r3, r3, #29
 80017a8:	d501      	bpl.n	80017ae <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff ffa0 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 80017b4:	b9a8      	cbnz	r0, 80017e2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	1c6a      	adds	r2, r5, #1
 80017b8:	d0f3      	beq.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff fb99 	bl	8000ef0 <HAL_GetTick>
 80017be:	1b80      	subs	r0, r0, r6
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	d801      	bhi.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	d1ec      	bne.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017c8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ca:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017dc:	f042 0220 	orr.w	r2, r2, #32
 80017e0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e7e2      	b.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080017e6 <I2C_WaitOnFlagUntilTimeout>:
{
 80017e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f2:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80017f6:	b28d      	uxth	r5, r1
 80017f8:	6821      	ldr	r1, [r4, #0]
 80017fa:	f1b9 0f01 	cmp.w	r9, #1
 80017fe:	bf0c      	ite	eq
 8001800:	694b      	ldreq	r3, [r1, #20]
 8001802:	698b      	ldrne	r3, [r1, #24]
 8001804:	ea35 0303 	bics.w	r3, r5, r3
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	4598      	cmp	r8, r3
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e016      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001816:	1c7b      	adds	r3, r7, #1
 8001818:	d0ef      	beq.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff fb69 	bl	8000ef0 <HAL_GetTick>
 800181e:	1b80      	subs	r0, r0, r6
 8001820:	42b8      	cmp	r0, r7
 8001822:	d801      	bhi.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001824:	2f00      	cmp	r7, #0
 8001826:	d1e7      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001828:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800182a:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800182c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800182e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001830:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001834:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001838:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800183a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	d501      	bpl.n	800185c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff ff49 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 8001862:	b9a8      	cbnz	r0, 8001890 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001864:	1c6a      	adds	r2, r5, #1
 8001866:	d0f3      	beq.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fb42 	bl	8000ef0 <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	42a8      	cmp	r0, r5
 8001870:	d801      	bhi.n	8001876 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d1ec      	bne.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001876:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001878:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800187a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800187c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001880:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001884:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001886:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e7e2      	b.n	800185a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08001894 <I2C_RequestMemoryWrite>:
{
 8001894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001898:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189a:	6802      	ldr	r2, [r0, #0]
{
 800189c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	6813      	ldr	r3, [r2, #0]
{
 80018a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
{
 80018a8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80018b4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b6:	f7ff ff96 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	b118      	cbz	r0, 80018c4 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
}
 80018be:	b004      	add	sp, #16
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80018ca:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018ce:	4633      	mov	r3, r6
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <I2C_RequestMemoryWrite+0x98>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff27 	bl	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1ef      	bne.n	80018bc <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	9003      	str	r0, [sp, #12]
 80018e0:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f0:	f7ff ffaa 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f4:	b140      	cbz	r0, 8001908 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	bf01      	itttt	eq
 80018fc:	6822      	ldreq	r2, [r4, #0]
 80018fe:	6813      	ldreq	r3, [r2, #0]
 8001900:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001904:	6013      	streq	r3, [r2, #0]
 8001906:	e7d9      	b.n	80018bc <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001908:	f1b8 0f01 	cmp.w	r8, #1
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	d102      	bne.n	8001916 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001910:	b2ed      	uxtb	r5, r5
 8001912:	611d      	str	r5, [r3, #16]
 8001914:	e7d3      	b.n	80018be <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001916:	0a2a      	lsrs	r2, r5, #8
 8001918:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800191c:	4632      	mov	r2, r6
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff92 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001924:	2800      	cmp	r0, #0
 8001926:	d1e6      	bne.n	80018f6 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	e7f1      	b.n	8001910 <I2C_RequestMemoryWrite+0x7c>
 800192c:	00010002 	.word	0x00010002

08001930 <HAL_I2C_Init>:
{
 8001930:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001932:	4604      	mov	r4, r0
 8001934:	b908      	cbnz	r0, 800193a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
}
 8001938:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800193e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001942:	b91b      	cbnz	r3, 800194c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001948:	f003 faaa 	bl	8004ea0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800194e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f000 ff6e 	bl	800283c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d84d      	bhi.n	8001a04 <HAL_I2C_Init+0xd4>
 8001968:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_I2C_Init+0x13c>)
 800196a:	4290      	cmp	r0, r2
 800196c:	d9e3      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800196e:	4940      	ldr	r1, [pc, #256]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001970:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001976:	6855      	ldr	r5, [r2, #4]
 8001978:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800197c:	430d      	orrs	r5, r1
 800197e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001980:	6a15      	ldr	r5, [r2, #32]
 8001982:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001986:	3101      	adds	r1, #1
 8001988:	4329      	orrs	r1, r5
 800198a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	69d1      	ldr	r1, [r2, #28]
 800198e:	4d36      	ldr	r5, [pc, #216]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001990:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001994:	42ab      	cmp	r3, r5
 8001996:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800199a:	f100 30ff 	add.w	r0, r0, #4294967295
 800199e:	d848      	bhi.n	8001a32 <HAL_I2C_Init+0x102>
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	bf38      	it	cc
 80019b0:	2304      	movcc	r3, #4
 80019b2:	430b      	orrs	r3, r1
 80019b4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80019bc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80019c0:	4303      	orrs	r3, r0
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c6:	6891      	ldr	r1, [r2, #8]
 80019c8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80019cc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80019d0:	4303      	orrs	r3, r0
 80019d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019da:	68d1      	ldr	r1, [r2, #12]
 80019dc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80019e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019e4:	4303      	orrs	r3, r0
 80019e6:	430b      	orrs	r3, r1
 80019e8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80019ea:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a02:	e799      	b.n	8001938 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_I2C_Init+0x144>)
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d995      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0a:	4e19      	ldr	r6, [pc, #100]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001a10:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a14:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a18:	6855      	ldr	r5, [r2, #4]
 8001a1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a1e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a20:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a24:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a26:	6a15      	ldr	r5, [r2, #32]
 8001a28:	fbb1 f1f6 	udiv	r1, r1, r6
 8001a2c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a30:	e7a9      	b.n	8001986 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a32:	68a5      	ldr	r5, [r4, #8]
 8001a34:	b955      	cbnz	r5, 8001a4c <HAL_I2C_Init+0x11c>
 8001a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	b16b      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	e7b2      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a4c:	2519      	movs	r5, #25
 8001a4e:	436b      	muls	r3, r5
 8001a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	b113      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	e7a7      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e7a5      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a66:	bf00      	nop
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	001e847f 	.word	0x001e847f
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	003d08ff 	.word	0x003d08ff

08001a78 <HAL_I2C_Mem_Write>:
{
 8001a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	460f      	mov	r7, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001a86:	f7ff fa33 	bl	8000ef0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d003      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001a94:	2002      	movs	r0, #2
}
 8001a96:	b003      	add	sp, #12
 8001a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a9c:	9000      	str	r0, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	493b      	ldr	r1, [pc, #236]	; (8001b90 <HAL_I2C_Mem_Write+0x118>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fe9e 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001aae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0ee      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001abc:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abe:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ac4:	bf58      	it	pl
 8001ac6:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001aca:	bf5c      	itt	pl
 8001acc:	f042 0201 	orrpl.w	r2, r2, #1
 8001ad0:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad8:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ada:	2321      	movs	r3, #33	; 0x21
 8001adc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aec:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8001af0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001afc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_I2C_Mem_Write+0x11c>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b02:	464b      	mov	r3, r9
 8001b04:	f7ff fec6 	bl	8001894 <I2C_RequestMemoryWrite>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d02a      	beq.n	8001b62 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7c2      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	f7ff fe9a 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b14:	b140      	cbz	r0, 8001b28 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b18:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	bf01      	itttt	eq
 8001b1c:	6822      	ldreq	r2, [r4, #0]
 8001b1e:	6813      	ldreq	r3, [r2, #0]
 8001b20:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b24:	6013      	streq	r3, [r2, #0]
 8001b26:	e7f1      	b.n	8001b0c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b2a:	6827      	ldr	r7, [r4, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001b32:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001b34:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b38:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b3a:	3a01      	subs	r2, #1
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b40:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001b42:	1e48      	subs	r0, r1, #1
 8001b44:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b46:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001b48:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b4a:	d50a      	bpl.n	8001b62 <HAL_I2C_Mem_Write+0xea>
 8001b4c:	b148      	cbz	r0, 8001b62 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001b50:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b52:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001b58:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001b5e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b60:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b64:	462a      	mov	r2, r5
 8001b66:	4631      	mov	r1, r6
 8001b68:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d0      	bne.n	8001b10 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	f7ff fe14 	bl	800179a <I2C_WaitOnBTFFlagUntilTimeout>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1cf      	bne.n	8001b16 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001b82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b8e:	e782      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000

08001b98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b9a:	4604      	mov	r4, r0
{
 8001b9c:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001b9e:	b310      	cbz	r0, 8001be6 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ba0:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001ba4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ba8:	b91b      	cbnz	r3, 8001bb2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001baa:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bae:	f004 fab7 	bl	8006120 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bb4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8001bb8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bbc:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8001bc0:	f001 fd8a 	bl	80036d8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	4625      	mov	r5, r4
 8001bcc:	6033      	str	r3, [r6, #0]
 8001bce:	1d27      	adds	r7, r4, #4
 8001bd0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001bd4:	f855 0b10 	ldr.w	r0, [r5], #16
 8001bd8:	f001 fd6f 	bl	80036ba <USB_CoreInit>
 8001bdc:	4606      	mov	r6, r0
 8001bde:	b120      	cbz	r0, 8001bea <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001be6:	2501      	movs	r5, #1
 8001be8:	e048      	b.n	8001c7c <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bea:	4601      	mov	r1, r0
 8001bec:	6820      	ldr	r0, [r4, #0]
 8001bee:	f001 fd7d 	bl	80036ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf2:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bf4:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf8:	6861      	ldr	r1, [r4, #4]
 8001bfa:	b2c3      	uxtb	r3, r0
 8001bfc:	4299      	cmp	r1, r3
 8001bfe:	f100 0001 	add.w	r0, r0, #1
 8001c02:	d817      	bhi.n	8001c34 <HAL_PCD_Init+0x9c>
 8001c04:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c06:	4610      	mov	r0, r2
 8001c08:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	f102 0201 	add.w	r2, r2, #1
 8001c10:	d81d      	bhi.n	8001c4e <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c14:	466e      	mov	r6, sp
 8001c16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	6033      	str	r3, [r6, #0]
 8001c1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	f001 fd65 	bl	80036f0 <USB_DevInit>
 8001c26:	2301      	movs	r3, #1
 8001c28:	4605      	mov	r5, r0
 8001c2a:	b300      	cbz	r0, 8001c6e <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8001c32:	e7d8      	b.n	8001be6 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001c34:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001c38:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001c3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c40:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c42:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c46:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c4a:	6416      	str	r6, [r2, #64]	; 0x40
 8001c4c:	e7d5      	b.n	8001bfa <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8001c4e:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001c52:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c56:	330a      	adds	r3, #10
 8001c58:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001c5a:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c5e:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c62:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c66:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c6a:	50e0      	str	r0, [r4, r3]
 8001c6c:	e7cc      	b.n	8001c08 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001c6e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c72:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c76:	6820      	ldr	r0, [r4, #0]
 8001c78:	f001 ffdb 	bl	8003c32 <USB_DevDisconnect>

  return HAL_OK;
}
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	b007      	add	sp, #28
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c82 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8001c82:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8001c86:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001c88:	2b01      	cmp	r3, #1
{
 8001c8a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c8c:	d00e      	beq.n	8001cac <HAL_PCD_Start+0x2a>
 8001c8e:	2101      	movs	r1, #1
 8001c90:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c94:	f004 fb71 	bl	800637a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c98:	6820      	ldr	r0, [r4, #0]
 8001c9a:	f001 ffc8 	bl	8003c2e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c9e:	6820      	ldr	r0, [r4, #0]
 8001ca0:	f001 fd12 	bl	80036c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001caa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001cac:	2002      	movs	r0, #2
 8001cae:	e7fc      	b.n	8001caa <HAL_PCD_Start+0x28>

08001cb0 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001cb0:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8001cb4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001cb6:	2a01      	cmp	r2, #1
{
 8001cb8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001cba:	d00b      	beq.n	8001cd4 <HAL_PCD_SetAddress+0x24>
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001cc2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc6:	6800      	ldr	r0, [r0, #0]
 8001cc8:	f001 ffab 	bl	8003c22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001cd2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	e7fc      	b.n	8001cd2 <HAL_PCD_SetAddress+0x22>

08001cd8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4604      	mov	r4, r0
 8001cdc:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ce4:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	bf14      	ite	ne
 8001cea:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 8001cf2:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 8001cf6:	bf17      	itett	ne
 8001cf8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8001cfa:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8001cfe:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d02:	bf04      	itt	eq
 8001d04:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 8001d06:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001d0a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 8001d0c:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8001d10:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001d12:	b102      	cbz	r2, 8001d16 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d14:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d16:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001d18:	bf04      	itt	eq
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001d1e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d009      	beq.n	8001d3a <HAL_PCD_EP_Open+0x62>
 8001d26:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d28:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001d2a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d2e:	f001 fcf9 	bl	8003724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8001d38:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	e7fc      	b.n	8001d38 <HAL_PCD_EP_Open+0x60>

08001d3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3e:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d46:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8001d4a:	b510      	push	{r4, lr}
 8001d4c:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4e:	bf18      	it	ne
 8001d50:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8001d54:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	bf0b      	itete	eq
 8001d58:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8001d5c:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001d5e:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	bf0a      	itet	eq
 8001d64:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001d66:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8001d6a:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d6e:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001d70:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d009      	beq.n	8001d8c <HAL_PCD_EP_Close+0x4e>
 8001d78:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d7a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001d7c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d80:	f001 fe2a 	bl	80039d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001d8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	e7fc      	b.n	8001d8a <HAL_PCD_EP_Close+0x4c>

08001d90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d90:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 8001d92:	2600      	movs	r6, #0
 8001d94:	f001 0107 	and.w	r1, r1, #7
 8001d98:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8001d9a:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001da4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001da6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8001daa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8001dae:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 8001db2:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001db6:	6800      	ldr	r0, [r0, #0]
 8001db8:	f001 ff52 	bl	8003c60 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001dbc:	4630      	mov	r0, r6
 8001dbe:	bd70      	pop	{r4, r5, r6, pc}

08001dc0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dc0:	f001 0107 	and.w	r1, r1, #7
 8001dc4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001dc8:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8001dcc:	4770      	bx	lr

08001dce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dce:	f001 0107 	and.w	r1, r1, #7
 8001dd2:	b570      	push	{r4, r5, r6, lr}
 8001dd4:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dd6:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001dd8:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001ddc:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001dde:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de8:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 8001dea:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001dec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df0:	6800      	ldr	r0, [r0, #0]
 8001df2:	f001 ff35 	bl	8003c60 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001df6:	4630      	mov	r0, r6
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dfc <HAL_PCD_IRQHandler>:
{
 8001dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e02:	6800      	ldr	r0, [r0, #0]
 8001e04:	f001 ff17 	bl	8003c36 <USB_ReadInterrupts>
 8001e08:	0402      	lsls	r2, r0, #16
 8001e0a:	d50b      	bpl.n	8001e24 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e0c:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 800221c <HAL_PCD_IRQHandler+0x420>
 8001e10:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8002220 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e14:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8002224 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e18:	6820      	ldr	r0, [r4, #0]
 8001e1a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	f100 809e 	bmi.w	8001f60 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e24:	6820      	ldr	r0, [r4, #0]
 8001e26:	f001 ff06 	bl	8003c36 <USB_ReadInterrupts>
 8001e2a:	0543      	lsls	r3, r0, #21
 8001e2c:	d50f      	bpl.n	8001e4e <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e2e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001e30:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e32:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001e42:	f004 f9a6 	bl	8006192 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e46:	2100      	movs	r1, #0
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff ff31 	bl	8001cb0 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	f001 fef1 	bl	8003c36 <USB_ReadInterrupts>
 8001e54:	0447      	lsls	r7, r0, #17
 8001e56:	d508      	bpl.n	8001e6a <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e58:	6822      	ldr	r2, [r4, #0]
 8001e5a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e6a:	6820      	ldr	r0, [r4, #0]
 8001e6c:	f001 fee3 	bl	8003c36 <USB_ReadInterrupts>
 8001e70:	0486      	lsls	r6, r0, #18
 8001e72:	d508      	bpl.n	8001e86 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e74:	6822      	ldr	r2, [r4, #0]
 8001e76:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	f001 fed5 	bl	8003c36 <USB_ReadInterrupts>
 8001e8c:	04c5      	lsls	r5, r0, #19
 8001e8e:	d51c      	bpl.n	8001eca <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e90:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8001e92:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e94:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	0c1b      	lsrs	r3, r3, #16
 8001ea0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ea4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001ea8:	f023 0308 	bic.w	r3, r3, #8
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001eb4:	f004 f990 	bl	80061d8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001eca:	6820      	ldr	r0, [r4, #0]
 8001ecc:	f001 feb3 	bl	8003c36 <USB_ReadInterrupts>
 8001ed0:	0500      	lsls	r0, r0, #20
 8001ed2:	d524      	bpl.n	8001f1e <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ee2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001ef2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001efe:	f001 fe9a 	bl	8003c36 <USB_ReadInterrupts>
 8001f02:	04c1      	lsls	r1, r0, #19
 8001f04:	d508      	bpl.n	8001f18 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f10:	041b      	lsls	r3, r3, #16
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f004 f94d 	bl	80061b8 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	f001 fe89 	bl	8003c36 <USB_ReadInterrupts>
 8001f24:	0582      	lsls	r2, r0, #22
 8001f26:	d50b      	bpl.n	8001f40 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f28:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001f2a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001f3c:	f004 f925 	bl	800618a <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	f001 fe78 	bl	8003c36 <USB_ReadInterrupts>
 8001f46:	05c3      	lsls	r3, r0, #23
 8001f48:	d508      	bpl.n	8001f5c <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0c1b      	lsrs	r3, r3, #16
 8001f58:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001f60:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001f64:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8001f66:	f011 060f 	ands.w	r6, r1, #15
 8001f6a:	f040 80b1 	bne.w	80020d0 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f6e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f72:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f74:	d12a      	bne.n	8001fcc <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f76:	ea09 0303 	and.w	r3, r9, r3
 8001f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7e:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f80:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001f84:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f8c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001f90:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001f94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f9a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001f9c:	4413      	add	r3, r2
 8001f9e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f004 f8eb 	bl	800617c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fa6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f43f af34 	beq.w	8001e18 <HAL_PCD_IRQHandler+0x1c>
 8001fb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	f47f af30 	bne.w	8001e18 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fb8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001fbc:	6821      	ldr	r1, [r4, #0]
 8001fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc2:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fc6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001fca:	e725      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fcc:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fce:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001fd2:	d020      	beq.n	8002016 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001fd8:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fdc:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001fe4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001fe8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fec:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001ff0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ff4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ff8:	f001 ff06 	bl	8003e08 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ffc:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001ffe:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002000:	8813      	ldrh	r3, [r2, #0]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	051b      	lsls	r3, r3, #20
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002010:	f004 f8a6 	bl	8006160 <HAL_PCD_SetupStageCallback>
 8002014:	e700      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002016:	041f      	lsls	r7, r3, #16
 8002018:	f57f aefe 	bpl.w	8001e18 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800201c:	8803      	ldrh	r3, [r0, #0]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	051b      	lsls	r3, r3, #20
 8002024:	0d1b      	lsrs	r3, r3, #20
 8002026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800202c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002030:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8002034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002038:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800203c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8002040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002044:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002048:	b18b      	cbz	r3, 800206e <HAL_PCD_IRQHandler+0x272>
 800204a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800204e:	b171      	cbz	r1, 800206e <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002050:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8002054:	f001 fed8 	bl	8003e08 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002058:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800205c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002060:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002062:	4413      	add	r3, r2
 8002064:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002068:	4620      	mov	r0, r4
 800206a:	f004 f87f 	bl	800616c <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800206e:	6821      	ldr	r1, [r4, #0]
 8002070:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8002074:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002078:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800207c:	b29b      	uxth	r3, r3
 800207e:	b9bd      	cbnz	r5, 80020b0 <HAL_PCD_IRQHandler+0x2b4>
 8002080:	5ac2      	ldrh	r2, [r0, r3]
 8002082:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002086:	0412      	lsls	r2, r2, #16
 8002088:	0c12      	lsrs	r2, r2, #16
 800208a:	52c2      	strh	r2, [r0, r3]
 800208c:	5ac2      	ldrh	r2, [r0, r3]
 800208e:	ea4a 0202 	orr.w	r2, sl, r2
 8002092:	b292      	uxth	r2, r2
 8002094:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002096:	880b      	ldrh	r3, [r1, #0]
 8002098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80020a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	800b      	strh	r3, [r1, #0]
 80020ae:	e6b3      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020b0:	2d3e      	cmp	r5, #62	; 0x3e
 80020b2:	d805      	bhi.n	80020c0 <HAL_PCD_IRQHandler+0x2c4>
 80020b4:	086a      	lsrs	r2, r5, #1
 80020b6:	07ee      	lsls	r6, r5, #31
 80020b8:	bf48      	it	mi
 80020ba:	3201      	addmi	r2, #1
 80020bc:	0292      	lsls	r2, r2, #10
 80020be:	e7e8      	b.n	8002092 <HAL_PCD_IRQHandler+0x296>
 80020c0:	096a      	lsrs	r2, r5, #5
 80020c2:	06ed      	lsls	r5, r5, #27
 80020c4:	bf08      	it	eq
 80020c6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80020ca:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 80020ce:	e7e0      	b.n	8002092 <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020d0:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80020d4:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020d8:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80020dc:	d03c      	beq.n	8002158 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020de:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80020e2:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e8:	051b      	lsls	r3, r3, #20
 80020ea:	0d1b      	lsrs	r3, r3, #20
 80020ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f0:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80020f4:	19e1      	adds	r1, r4, r7
 80020f6:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80020fa:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d150      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002102:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002106:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 800210a:	3306      	adds	r3, #6
 800210c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002110:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8002114:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8002118:	b135      	cbz	r5, 8002128 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800211a:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800211e:	462b      	mov	r3, r5
 8002120:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8002124:	f001 fe70 	bl	8003e08 <USB_ReadPMA>
 8002128:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 800212a:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800212e:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8002132:	442b      	add	r3, r5
 8002134:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002138:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 800213c:	442a      	add	r2, r5
 800213e:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002142:	b11b      	cbz	r3, 800214c <HAL_PCD_IRQHandler+0x350>
 8002144:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8002148:	4285      	cmp	r5, r0
 800214a:	d25d      	bcs.n	8002208 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800214c:	4427      	add	r7, r4
 800214e:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8002152:	4620      	mov	r0, r4
 8002154:	f004 f80a 	bl	800616c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002158:	f018 0f80 	tst.w	r8, #128	; 0x80
 800215c:	f43f ae5c 	beq.w	8001e18 <HAL_PCD_IRQHandler+0x1c>
 8002160:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002162:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002164:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8002168:	ea09 0202 	and.w	r2, r9, r2
 800216c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002170:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002174:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002178:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 800217c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8002180:	3202      	adds	r2, #2
 8002182:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002186:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800218a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 800218e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002190:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002194:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002196:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8002198:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800219a:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 800219c:	bbd3      	cbnz	r3, 8002214 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800219e:	f003 ffed 	bl	800617c <HAL_PCD_DataInStageCallback>
 80021a2:	e639      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021a4:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80021a8:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80021b6:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021b8:	d01b      	beq.n	80021f2 <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021ba:	3302      	adds	r3, #2
 80021bc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80021c0:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80021c4:	b135      	cbz	r5, 80021d4 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021c6:	462b      	mov	r3, r5
 80021c8:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021cc:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80021d0:	f001 fe1a 	bl	8003e08 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021d4:	19e3      	adds	r3, r4, r7
 80021d6:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80021e0:	ea0b 0303 	and.w	r3, fp, r3
 80021e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80021f0:	e79a      	b.n	8002128 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021f2:	3306      	adds	r3, #6
 80021f4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80021f8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	d0e9      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002200:	462b      	mov	r3, r5
 8002202:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8002206:	e7e1      	b.n	80021cc <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002208:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 800220c:	4620      	mov	r0, r4
 800220e:	f7ff fdbf 	bl	8001d90 <HAL_PCD_EP_Receive>
 8002212:	e7a1      	b.n	8002158 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002214:	f7ff fddb 	bl	8001dce <HAL_PCD_EP_Transmit>
 8002218:	e5fe      	b.n	8001e18 <HAL_PCD_IRQHandler+0x1c>
 800221a:	bf00      	nop
 800221c:	ffff8f0f 	.word	0xffff8f0f
 8002220:	ffff8000 	.word	0xffff8000
 8002224:	ffff8f8f 	.word	0xffff8f8f

08002228 <HAL_PCD_EP_SetStall>:
{
 8002228:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800222a:	6843      	ldr	r3, [r0, #4]
 800222c:	f001 0507 	and.w	r5, r1, #7
 8002230:	429d      	cmp	r5, r3
{
 8002232:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002234:	d828      	bhi.n	8002288 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8002236:	060b      	lsls	r3, r1, #24
 8002238:	d51d      	bpl.n	8002276 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 800223a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223c:	016b      	lsls	r3, r5, #5
 800223e:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8002242:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002244:	4401      	add	r1, r0
    ep->is_in = 1U;
 8002246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 800224a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800224c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800224e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8002250:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8002254:	429a      	cmp	r2, r3
 8002256:	d019      	beq.n	800228c <HAL_PCD_EP_SetStall+0x64>
 8002258:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	f001 fc81 	bl	8003b64 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002262:	b925      	cbnz	r5, 800226e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002264:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8002268:	6820      	ldr	r0, [r4, #0]
 800226a:	f001 fce7 	bl	8003c3c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800226e:	2000      	movs	r0, #0
 8002270:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8002274:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002276:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8002278:	014b      	lsls	r3, r1, #5
 800227a:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 800227e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8002280:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002282:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8002286:	e7e0      	b.n	800224a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e7f3      	b.n	8002274 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800228c:	2002      	movs	r0, #2
 800228e:	e7f1      	b.n	8002274 <HAL_PCD_EP_SetStall+0x4c>

08002290 <HAL_PCD_EP_ClrStall>:
{
 8002290:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002292:	6843      	ldr	r3, [r0, #4]
 8002294:	f001 020f 	and.w	r2, r1, #15
 8002298:	429a      	cmp	r2, r3
{
 800229a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800229c:	d827      	bhi.n	80022ee <HAL_PCD_EP_ClrStall+0x5e>
 800229e:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80022a6:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	bf14      	ite	ne
 80022ac:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b0:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 80022b4:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80022b6:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80022ba:	bf15      	itete	ne
 80022bc:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80022be:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80022c4:	bf14      	ite	ne
 80022c6:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 80022ca:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 80022ce:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80022d2:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d00b      	beq.n	80022f2 <HAL_PCD_EP_ClrStall+0x62>
 80022da:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022dc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80022de:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022e2:	f001 fc5b 	bl	8003b9c <USB_EPClearStall>
  return HAL_OK;
 80022e6:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80022e8:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 80022ec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	e7fc      	b.n	80022ec <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 80022f2:	2002      	movs	r0, #2
 80022f4:	e7fa      	b.n	80022ec <HAL_PCD_EP_ClrStall+0x5c>

080022f6 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022f6:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fa:	bf1b      	ittet	ne
 80022fc:	f001 0107 	andne.w	r1, r1, #7
 8002300:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002304:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002308:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800230a:	bf08      	it	eq
 800230c:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8002310:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002312:	b91a      	cbnz	r2, 800231c <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002314:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002316:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002318:	2000      	movs	r0, #0
 800231a:	4770      	bx	lr
    ep->doublebuffer = 1U;
 800231c:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800231e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8002320:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002322:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002324:	8143      	strh	r3, [r0, #10]
 8002326:	e7f7      	b.n	8002318 <HAL_PCDEx_PMAConfig+0x22>

08002328 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002328:	2201      	movs	r2, #1
 800232a:	4b01      	ldr	r3, [pc, #4]	; (8002330 <HAL_PWR_EnableBkUpAccess+0x8>)
 800232c:	601a      	str	r2, [r3, #0]
}
 800232e:	4770      	bx	lr
 8002330:	420e0020 	.word	0x420e0020

08002334 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002334:	4770      	bx	lr
	...

08002338 <HAL_PWR_PVD_IRQHandler>:
{
 8002338:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800233a:	4c05      	ldr	r4, [pc, #20]	; (8002350 <HAL_PWR_PVD_IRQHandler+0x18>)
 800233c:	6963      	ldr	r3, [r4, #20]
 800233e:	03db      	lsls	r3, r3, #15
 8002340:	d504      	bpl.n	800234c <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8002342:	f7ff fff7 	bl	8002334 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800234a:	6163      	str	r3, [r4, #20]
}
 800234c:	bd10      	pop	{r4, pc}
 800234e:	bf00      	nop
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002358:	4605      	mov	r5, r0
 800235a:	b908      	cbnz	r0, 8002360 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800235c:	2001      	movs	r0, #1
 800235e:	e03c      	b.n	80023da <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002360:	6803      	ldr	r3, [r0, #0]
 8002362:	07db      	lsls	r3, r3, #31
 8002364:	d410      	bmi.n	8002388 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	682b      	ldr	r3, [r5, #0]
 8002368:	079f      	lsls	r7, r3, #30
 800236a:	d45d      	bmi.n	8002428 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	0719      	lsls	r1, r3, #28
 8002370:	f100 8094 	bmi.w	800249c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	075a      	lsls	r2, r3, #29
 8002378:	f100 80be 	bmi.w	80024f8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237c:	69e8      	ldr	r0, [r5, #28]
 800237e:	2800      	cmp	r0, #0
 8002380:	f040 812c 	bne.w	80025dc <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002384:	2000      	movs	r0, #0
 8002386:	e028      	b.n	80023da <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002388:	4c8f      	ldr	r4, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800238a:	6863      	ldr	r3, [r4, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b04      	cmp	r3, #4
 8002392:	d007      	beq.n	80023a4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5e>
 800239e:	6863      	ldr	r3, [r4, #4]
 80023a0:	03de      	lsls	r6, r3, #15
 80023a2:	d506      	bpl.n	80023b2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	039c      	lsls	r4, r3, #14
 80023a8:	d5dd      	bpl.n	8002366 <HAL_RCC_OscConfig+0x12>
 80023aa:	686b      	ldr	r3, [r5, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1da      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
 80023b0:	e7d4      	b.n	800235c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b2:	686b      	ldr	r3, [r5, #4]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d112      	bne.n	80023e0 <HAL_RCC_OscConfig+0x8c>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023c2:	f7fe fd95 	bl	8000ef0 <HAL_GetTick>
 80023c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	0398      	lsls	r0, r3, #14
 80023cc:	d4cb      	bmi.n	8002366 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ce:	f7fe fd8f 	bl	8000ef0 <HAL_GetTick>
 80023d2:	1b80      	subs	r0, r0, r6
 80023d4:	2864      	cmp	r0, #100	; 0x64
 80023d6:	d9f7      	bls.n	80023c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80023d8:	2003      	movs	r0, #3
}
 80023da:	b002      	add	sp, #8
 80023dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	b99b      	cbnz	r3, 800240a <HAL_RCC_OscConfig+0xb6>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6023      	str	r3, [r4, #0]
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd7d 	bl	8000ef0 <HAL_GetTick>
 80023f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	0399      	lsls	r1, r3, #14
 80023fc:	d5b3      	bpl.n	8002366 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fe:	f7fe fd77 	bl	8000ef0 <HAL_GetTick>
 8002402:	1b80      	subs	r0, r0, r6
 8002404:	2864      	cmp	r0, #100	; 0x64
 8002406:	d9f7      	bls.n	80023f8 <HAL_RCC_OscConfig+0xa4>
 8002408:	e7e6      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	d103      	bne.n	800241a <HAL_RCC_OscConfig+0xc6>
 8002412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	e7cf      	b.n	80023ba <HAL_RCC_OscConfig+0x66>
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	e7cb      	b.n	80023c0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002428:	4c67      	ldr	r4, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800242a:	6863      	ldr	r3, [r4, #4]
 800242c:	f013 0f0c 	tst.w	r3, #12
 8002430:	d007      	beq.n	8002442 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002432:	6863      	ldr	r3, [r4, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d110      	bne.n	800245e <HAL_RCC_OscConfig+0x10a>
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	03da      	lsls	r2, r3, #15
 8002440:	d40d      	bmi.n	800245e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	079b      	lsls	r3, r3, #30
 8002446:	d502      	bpl.n	800244e <HAL_RCC_OscConfig+0xfa>
 8002448:	692b      	ldr	r3, [r5, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d186      	bne.n	800235c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	696a      	ldr	r2, [r5, #20]
 8002452:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002456:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	e786      	b.n	800236c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245e:	692a      	ldr	r2, [r5, #16]
 8002460:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <HAL_RCC_OscConfig+0x278>)
 8002462:	b16a      	cbz	r2, 8002480 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002468:	f7fe fd42 	bl	8000ef0 <HAL_GetTick>
 800246c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	079f      	lsls	r7, r3, #30
 8002472:	d4ec      	bmi.n	800244e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002474:	f7fe fd3c 	bl	8000ef0 <HAL_GetTick>
 8002478:	1b80      	subs	r0, r0, r6
 800247a:	2802      	cmp	r0, #2
 800247c:	d9f7      	bls.n	800246e <HAL_RCC_OscConfig+0x11a>
 800247e:	e7ab      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002480:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002482:	f7fe fd35 	bl	8000ef0 <HAL_GetTick>
 8002486:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	0798      	lsls	r0, r3, #30
 800248c:	f57f af6e 	bpl.w	800236c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002490:	f7fe fd2e 	bl	8000ef0 <HAL_GetTick>
 8002494:	1b80      	subs	r0, r0, r6
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f6      	bls.n	8002488 <HAL_RCC_OscConfig+0x134>
 800249a:	e79d      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249c:	69aa      	ldr	r2, [r5, #24]
 800249e:	4c4a      	ldr	r4, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_OscConfig+0x27c>)
 80024a2:	b1da      	cbz	r2, 80024dc <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd22 	bl	8000ef0 <HAL_GetTick>
 80024ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024b0:	079b      	lsls	r3, r3, #30
 80024b2:	d50d      	bpl.n	80024d0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_OscConfig+0x280>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80024c2:	bf00      	nop
  }
  while (Delay --);
 80024c4:	9b01      	ldr	r3, [sp, #4]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	9201      	str	r2, [sp, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f9      	bne.n	80024c2 <HAL_RCC_OscConfig+0x16e>
 80024ce:	e751      	b.n	8002374 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe fd0e 	bl	8000ef0 <HAL_GetTick>
 80024d4:	1b80      	subs	r0, r0, r6
 80024d6:	2802      	cmp	r0, #2
 80024d8:	d9e9      	bls.n	80024ae <HAL_RCC_OscConfig+0x15a>
 80024da:	e77d      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80024dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80024de:	f7fe fd07 	bl	8000ef0 <HAL_GetTick>
 80024e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e6:	079f      	lsls	r7, r3, #30
 80024e8:	f57f af44 	bpl.w	8002374 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fd00 	bl	8000ef0 <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f6      	bls.n	80024e4 <HAL_RCC_OscConfig+0x190>
 80024f6:	e76f      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f8:	4c33      	ldr	r4, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024fa:	69e3      	ldr	r3, [r4, #28]
 80024fc:	00d8      	lsls	r0, r3, #3
 80024fe:	d424      	bmi.n	800254a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8002500:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	69e3      	ldr	r3, [r4, #28]
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	61e3      	str	r3, [r4, #28]
 800250a:	69e3      	ldr	r3, [r4, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	4e30      	ldr	r6, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x284>)
 8002516:	6833      	ldr	r3, [r6, #0]
 8002518:	05d9      	lsls	r1, r3, #23
 800251a:	d518      	bpl.n	800254e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	68eb      	ldr	r3, [r5, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d126      	bne.n	8002570 <HAL_RCC_OscConfig+0x21c>
 8002522:	6a23      	ldr	r3, [r4, #32]
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800252a:	f7fe fce1 	bl	8000ef0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002532:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	6a23      	ldr	r3, [r4, #32]
 8002536:	079b      	lsls	r3, r3, #30
 8002538:	d53f      	bpl.n	80025ba <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800253a:	2f00      	cmp	r7, #0
 800253c:	f43f af1e 	beq.w	800237c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002540:	69e3      	ldr	r3, [r4, #28]
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002546:	61e3      	str	r3, [r4, #28]
 8002548:	e718      	b.n	800237c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2700      	movs	r7, #0
 800254c:	e7e2      	b.n	8002514 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	6833      	ldr	r3, [r6, #0]
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002556:	f7fe fccb 	bl	8000ef0 <HAL_GetTick>
 800255a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	6833      	ldr	r3, [r6, #0]
 800255e:	05da      	lsls	r2, r3, #23
 8002560:	d4dc      	bmi.n	800251c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fcc5 	bl	8000ef0 <HAL_GetTick>
 8002566:	eba0 0008 	sub.w	r0, r0, r8
 800256a:	2864      	cmp	r0, #100	; 0x64
 800256c:	d9f6      	bls.n	800255c <HAL_RCC_OscConfig+0x208>
 800256e:	e733      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	b9ab      	cbnz	r3, 800259e <HAL_RCC_OscConfig+0x24a>
 8002572:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6223      	str	r3, [r4, #32]
 800257e:	6a23      	ldr	r3, [r4, #32]
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002586:	f7fe fcb3 	bl	8000ef0 <HAL_GetTick>
 800258a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	6a23      	ldr	r3, [r4, #32]
 800258e:	0798      	lsls	r0, r3, #30
 8002590:	d5d3      	bpl.n	800253a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fcad 	bl	8000ef0 <HAL_GetTick>
 8002596:	1b80      	subs	r0, r0, r6
 8002598:	4540      	cmp	r0, r8
 800259a:	d9f7      	bls.n	800258c <HAL_RCC_OscConfig+0x238>
 800259c:	e71c      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259e:	2b05      	cmp	r3, #5
 80025a0:	6a23      	ldr	r3, [r4, #32]
 80025a2:	d103      	bne.n	80025ac <HAL_RCC_OscConfig+0x258>
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6223      	str	r3, [r4, #32]
 80025aa:	e7ba      	b.n	8002522 <HAL_RCC_OscConfig+0x1ce>
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6223      	str	r3, [r4, #32]
 80025b2:	6a23      	ldr	r3, [r4, #32]
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	e7b6      	b.n	8002528 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fc99 	bl	8000ef0 <HAL_GetTick>
 80025be:	eba0 0008 	sub.w	r0, r0, r8
 80025c2:	42b0      	cmp	r0, r6
 80025c4:	d9b6      	bls.n	8002534 <HAL_RCC_OscConfig+0x1e0>
 80025c6:	e707      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
 80025d4:	20000130 	.word	0x20000130
 80025d8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_RCC_OscConfig+0x334>)
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	461c      	mov	r4, r3
 80025e2:	f002 020c 	and.w	r2, r2, #12
 80025e6:	2a08      	cmp	r2, #8
 80025e8:	d03d      	beq.n	8002666 <HAL_RCC_OscConfig+0x312>
 80025ea:	2300      	movs	r3, #0
 80025ec:	4e27      	ldr	r6, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80025f0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f2:	d12b      	bne.n	800264c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80025f4:	f7fe fc7c 	bl	8000ef0 <HAL_GetTick>
 80025f8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	0199      	lsls	r1, r3, #6
 80025fe:	d41f      	bmi.n	8002640 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	6a2b      	ldr	r3, [r5, #32]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d105      	bne.n	8002614 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002608:	6862      	ldr	r2, [r4, #4]
 800260a:	68a9      	ldr	r1, [r5, #8]
 800260c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002610:	430a      	orrs	r2, r1
 8002612:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002614:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002616:	6862      	ldr	r2, [r4, #4]
 8002618:	430b      	orrs	r3, r1
 800261a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800261e:	4313      	orrs	r3, r2
 8002620:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002622:	2301      	movs	r3, #1
 8002624:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002626:	f7fe fc63 	bl	8000ef0 <HAL_GetTick>
 800262a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	019a      	lsls	r2, r3, #6
 8002630:	f53f aea8 	bmi.w	8002384 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fc5c 	bl	8000ef0 <HAL_GetTick>
 8002638:	1b40      	subs	r0, r0, r5
 800263a:	2802      	cmp	r0, #2
 800263c:	d9f6      	bls.n	800262c <HAL_RCC_OscConfig+0x2d8>
 800263e:	e6cb      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fc56 	bl	8000ef0 <HAL_GetTick>
 8002644:	1bc0      	subs	r0, r0, r7
 8002646:	2802      	cmp	r0, #2
 8002648:	d9d7      	bls.n	80025fa <HAL_RCC_OscConfig+0x2a6>
 800264a:	e6c5      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800264c:	f7fe fc50 	bl	8000ef0 <HAL_GetTick>
 8002650:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	f57f ae95 	bpl.w	8002384 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fc49 	bl	8000ef0 <HAL_GetTick>
 800265e:	1b40      	subs	r0, r0, r5
 8002660:	2802      	cmp	r0, #2
 8002662:	d9f6      	bls.n	8002652 <HAL_RCC_OscConfig+0x2fe>
 8002664:	e6b8      	b.n	80023d8 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002666:	2801      	cmp	r0, #1
 8002668:	f43f aeb7 	beq.w	80023da <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800266c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	6a2b      	ldr	r3, [r5, #32]
 8002670:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002674:	429a      	cmp	r2, r3
 8002676:	f47f ae71 	bne.w	800235c <HAL_RCC_OscConfig+0x8>
 800267a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800267c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8002680:	1ac0      	subs	r0, r0, r3
 8002682:	bf18      	it	ne
 8002684:	2001      	movne	r0, #1
 8002686:	e6a8      	b.n	80023da <HAL_RCC_OscConfig+0x86>
 8002688:	40021000 	.word	0x40021000
 800268c:	42420060 	.word	0x42420060

08002690 <HAL_RCC_GetSysClockFreq>:
{
 8002690:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002694:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002696:	ac02      	add	r4, sp, #8
 8002698:	f103 0510 	add.w	r5, r3, #16
 800269c:	4622      	mov	r2, r4
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	3308      	adds	r3, #8
 80026a4:	c203      	stmia	r2!, {r0, r1}
 80026a6:	42ab      	cmp	r3, r5
 80026a8:	4614      	mov	r4, r2
 80026aa:	d1f7      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ac:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80026b0:	4911      	ldr	r1, [pc, #68]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80026b6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	f003 020c 	and.w	r2, r3, #12
 80026bc:	2a08      	cmp	r2, #8
 80026be:	d117      	bne.n	80026f0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80026c4:	a806      	add	r0, sp, #24
 80026c6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ce:	d50c      	bpl.n	80026ea <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d2:	480a      	ldr	r0, [pc, #40]	; (80026fc <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026da:	aa06      	add	r2, sp, #24
 80026dc:	4413      	add	r3, r2
 80026de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80026e6:	b007      	add	sp, #28
 80026e8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <HAL_RCC_GetSysClockFreq+0x70>)
 80026ec:	4350      	muls	r0, r2
 80026ee:	e7fa      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80026f2:	e7f8      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x56>
 80026f4:	0800b208 	.word	0x0800b208
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_ClockConfig>:
{
 8002704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002708:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800270a:	4604      	mov	r4, r0
 800270c:	b910      	cbnz	r0, 8002714 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
}
 8002710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4a44      	ldr	r2, [pc, #272]	; (8002828 <HAL_RCC_ClockConfig+0x124>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	428b      	cmp	r3, r1
 800271e:	d328      	bcc.n	8002772 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	6821      	ldr	r1, [r4, #0]
 8002722:	078e      	lsls	r6, r1, #30
 8002724:	d430      	bmi.n	8002788 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	07ca      	lsls	r2, r1, #31
 8002728:	d443      	bmi.n	80027b2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272a:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <HAL_RCC_ClockConfig+0x124>)
 800272c:	6813      	ldr	r3, [r2, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	42ab      	cmp	r3, r5
 8002734:	d865      	bhi.n	8002802 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002736:	6822      	ldr	r2, [r4, #0]
 8002738:	4d3c      	ldr	r5, [pc, #240]	; (800282c <HAL_RCC_ClockConfig+0x128>)
 800273a:	f012 0f04 	tst.w	r2, #4
 800273e:	d16c      	bne.n	800281a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	0713      	lsls	r3, r2, #28
 8002742:	d506      	bpl.n	8002752 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002744:	686b      	ldr	r3, [r5, #4]
 8002746:	6922      	ldr	r2, [r4, #16]
 8002748:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800274c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002750:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002752:	f7ff ff9d 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 8002756:	686b      	ldr	r3, [r5, #4]
 8002758:	4a35      	ldr	r2, [pc, #212]	; (8002830 <HAL_RCC_ClockConfig+0x12c>)
 800275a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	40d8      	lsrs	r0, r3
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_ClockConfig+0x130>)
 8002764:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_RCC_ClockConfig+0x134>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f7fe fb7f 	bl	8000e6c <HAL_InitTick>
  return HAL_OK;
 800276e:	2000      	movs	r0, #0
 8002770:	e7ce      	b.n	8002710 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	f023 0307 	bic.w	r3, r3, #7
 8002778:	430b      	orrs	r3, r1
 800277a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277c:	6813      	ldr	r3, [r2, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	428b      	cmp	r3, r1
 8002784:	d1c3      	bne.n	800270e <HAL_RCC_ClockConfig+0xa>
 8002786:	e7cb      	b.n	8002720 <HAL_RCC_ClockConfig+0x1c>
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278e:	bf1e      	ittt	ne
 8002790:	685a      	ldrne	r2, [r3, #4]
 8002792:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002796:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800279a:	bf42      	ittt	mi
 800279c:	685a      	ldrmi	r2, [r3, #4]
 800279e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80027a2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68a0      	ldr	r0, [r4, #8]
 80027a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027ac:	4302      	orrs	r2, r0
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	e7b9      	b.n	8002726 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	6862      	ldr	r2, [r4, #4]
 80027b4:	4e1d      	ldr	r6, [pc, #116]	; (800282c <HAL_RCC_ClockConfig+0x128>)
 80027b6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	d11a      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	d0a5      	beq.n	800270e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c8:	f023 0303 	bic.w	r3, r3, #3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80027d0:	f7fe fb8e 	bl	8000ef0 <HAL_GetTick>
 80027d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	6873      	ldr	r3, [r6, #4]
 80027d8:	6862      	ldr	r2, [r4, #4]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027e2:	d0a2      	beq.n	800272a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7fe fb84 	bl	8000ef0 <HAL_GetTick>
 80027e8:	1bc0      	subs	r0, r0, r7
 80027ea:	4540      	cmp	r0, r8
 80027ec:	d9f3      	bls.n	80027d6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80027ee:	2003      	movs	r0, #3
 80027f0:	e78e      	b.n	8002710 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	2a02      	cmp	r2, #2
 80027f4:	d102      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80027fa:	e7e1      	b.n	80027c0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	f013 0f02 	tst.w	r3, #2
 8002800:	e7de      	b.n	80027c0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	6813      	ldr	r3, [r2, #0]
 8002804:	f023 0307 	bic.w	r3, r3, #7
 8002808:	432b      	orrs	r3, r5
 800280a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	6813      	ldr	r3, [r2, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	42ab      	cmp	r3, r5
 8002814:	f47f af7b 	bne.w	800270e <HAL_RCC_ClockConfig+0xa>
 8002818:	e78d      	b.n	8002736 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281a:	686b      	ldr	r3, [r5, #4]
 800281c:	68e1      	ldr	r1, [r4, #12]
 800281e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002822:	430b      	orrs	r3, r1
 8002824:	606b      	str	r3, [r5, #4]
 8002826:	e78b      	b.n	8002740 <HAL_RCC_ClockConfig+0x3c>
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	0800d430 	.word	0x0800d430
 8002834:	20000130 	.word	0x20000130
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x14>)
 800283e:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800284a:	6810      	ldr	r0, [r2, #0]
}
 800284c:	40d8      	lsrs	r0, r3
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	0800d440 	.word	0x0800d440
 8002858:	20000130 	.word	0x20000130

0800285c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x14>)
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	4a03      	ldr	r2, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800286a:	6810      	ldr	r0, [r2, #0]
}
 800286c:	40d8      	lsrs	r0, r3
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000
 8002874:	0800d440 	.word	0x0800d440
 8002878:	20000130 	.word	0x20000130

0800287c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800287c:	6803      	ldr	r3, [r0, #0]
{
 800287e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002882:	07d9      	lsls	r1, r3, #31
{
 8002884:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002886:	d520      	bpl.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002888:	4c35      	ldr	r4, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800288a:	69e3      	ldr	r3, [r4, #28]
 800288c:	00da      	lsls	r2, r3, #3
 800288e:	d432      	bmi.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002890:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	69e3      	ldr	r3, [r4, #28]
 8002894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002898:	61e3      	str	r3, [r4, #28]
 800289a:	69e3      	ldr	r3, [r4, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	4e2f      	ldr	r6, [pc, #188]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80028a6:	6833      	ldr	r3, [r6, #0]
 80028a8:	05db      	lsls	r3, r3, #23
 80028aa:	d526      	bpl.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ac:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028b2:	d136      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b4:	6a23      	ldr	r3, [r4, #32]
 80028b6:	686a      	ldr	r2, [r5, #4]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	4313      	orrs	r3, r2
 80028be:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c0:	b11f      	cbz	r7, 80028ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	69e3      	ldr	r3, [r4, #28]
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ca:	6828      	ldr	r0, [r5, #0]
 80028cc:	0783      	lsls	r3, r0, #30
 80028ce:	d506      	bpl.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028d2:	68a9      	ldr	r1, [r5, #8]
 80028d4:	6853      	ldr	r3, [r2, #4]
 80028d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028da:	430b      	orrs	r3, r1
 80028dc:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028de:	f010 0010 	ands.w	r0, r0, #16
 80028e2:	d01b      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e4:	4a1e      	ldr	r2, [pc, #120]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80028e6:	68e9      	ldr	r1, [r5, #12]
 80028e8:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6053      	str	r3, [r2, #4]
 80028f4:	e012      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2700      	movs	r7, #0
 80028f8:	e7d4      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	6833      	ldr	r3, [r6, #0]
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002902:	f7fe faf5 	bl	8000ef0 <HAL_GetTick>
 8002906:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	05d8      	lsls	r0, r3, #23
 800290c:	d4ce      	bmi.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe faef 	bl	8000ef0 <HAL_GetTick>
 8002912:	eba0 0008 	sub.w	r0, r0, r8
 8002916:	2864      	cmp	r0, #100	; 0x64
 8002918:	d9f6      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800291a:	2003      	movs	r0, #3
}
 800291c:	b002      	add	sp, #8
 800291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002922:	686a      	ldr	r2, [r5, #4]
 8002924:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002928:	429a      	cmp	r2, r3
 800292a:	d0c3      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800292c:	2001      	movs	r0, #1
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002930:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002932:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002936:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800293c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800293e:	07d9      	lsls	r1, r3, #31
 8002940:	d5b8      	bpl.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8002942:	f7fe fad5 	bl	8000ef0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800294a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	6a23      	ldr	r3, [r4, #32]
 800294e:	079a      	lsls	r2, r3, #30
 8002950:	d4b0      	bmi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe facd 	bl	8000ef0 <HAL_GetTick>
 8002956:	1b80      	subs	r0, r0, r6
 8002958:	4540      	cmp	r0, r8
 800295a:	d9f7      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800295c:	e7dd      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420440 	.word	0x42420440

0800296c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002970:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 8002972:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002974:	ad02      	add	r5, sp, #8
 8002976:	f103 0610 	add.w	r6, r3, #16
 800297a:	462a      	mov	r2, r5
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	3308      	adds	r3, #8
 8002982:	c203      	stmia	r2!, {r0, r1}
 8002984:	42b3      	cmp	r3, r6
 8002986:	4615      	mov	r5, r2
 8002988:	d1f7      	bne.n	800297a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800298a:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800298e:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002990:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8002994:	d047      	beq.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8002996:	2c10      	cmp	r4, #16
 8002998:	d017      	beq.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800299a:	2c01      	cmp	r4, #1
 800299c:	d14f      	bne.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800299e:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80029a4:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029a6:	4019      	ands	r1, r3
 80029a8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80029ac:	d044      	beq.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b6:	d12d      	bne.n	8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 80029b8:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80029be:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80029c2:	bf08      	it	eq
 80029c4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80029c6:	b006      	add	sp, #24
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80029cc:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80029d4:	d0f7      	beq.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80029da:	a806      	add	r0, sp, #24
 80029dc:	4402      	add	r2, r0
 80029de:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e2:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e4:	bf41      	itttt	mi
 80029e6:	685a      	ldrmi	r2, [r3, #4]
 80029e8:	a906      	addmi	r1, sp, #24
 80029ea:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80029ee:	1852      	addmi	r2, r2, r1
 80029f0:	bf44      	itt	mi
 80029f2:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029f6:	4a15      	ldrmi	r2, [pc, #84]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029f8:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029fa:	bf4c      	ite	mi
 80029fc:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a00:	4a13      	ldrpl	r2, [pc, #76]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a02:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a04:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a08:	d4dd      	bmi.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a0e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a12:	e7d8      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a18:	d111      	bne.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8002a1a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002a1c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8002a20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a24:	e7cd      	b.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a26:	f7ff ff19 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	e7ea      	b.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 8002a38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a3c:	e7c3      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e7c1      	b.n	80029c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8002a42:	bf00      	nop
 8002a44:	0800b218 	.word	0x0800b218
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	003d0900 	.word	0x003d0900

08002a54 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002a54:	6803      	ldr	r3, [r0, #0]
{
 8002a56:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002a58:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002a5a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002a5c:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8002a5e:	b295      	uxth	r5, r2
 8002a60:	b28c      	uxth	r4, r1
 8002a62:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002a64:	bf17      	itett	ne
 8002a66:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002a68:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002a6a:	b280      	uxthne	r0, r0
 8002a6c:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002a70:	bf08      	it	eq
 8002a72:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8002a76:	bd30      	pop	{r4, r5, pc}

08002a78 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002a78:	6803      	ldr	r3, [r0, #0]
 8002a7a:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8002a7e:	b29b      	uxth	r3, r3
}
 8002a80:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002a84:	4770      	bx	lr

08002a86 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002a86:	2300      	movs	r3, #0

  while (Value >= 10U)
 8002a88:	2809      	cmp	r0, #9
 8002a8a:	d803      	bhi.n	8002a94 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a8c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002a90:	b2c0      	uxtb	r0, r0
 8002a92:	4770      	bx	lr
    Value -= 10U;
 8002a94:	380a      	subs	r0, #10
    bcdhigh++;
 8002a96:	3301      	adds	r3, #1
    Value -= 10U;
 8002a98:	b2c0      	uxtb	r0, r0
 8002a9a:	e7f5      	b.n	8002a88 <RTC_ByteToBcd2+0x2>

08002a9c <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8002a9c:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002a9e:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002aa0:	f000 000f 	and.w	r0, r0, #15
 8002aa4:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002aa8:	b2c0      	uxtb	r0, r0
 8002aaa:	4770      	bx	lr

08002aac <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002aac:	b530      	push	{r4, r5, lr}
 8002aae:	2517      	movs	r5, #23
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	434d      	muls	r5, r1
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8002ab4:	2902      	cmp	r1, #2
  year = 2000U + nYear;
 8002ab6:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 8002aba:	fbb5 f5f3 	udiv	r5, r5, r3
  if (nMonth < 3U)
 8002abe:	d817      	bhi.n	8002af0 <RTC_WeekDayNum+0x44>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002ac0:	3204      	adds	r2, #4
 8002ac2:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8002ac6:	1910      	adds	r0, r2, r4
 8002ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ad0:	4428      	add	r0, r5
 8002ad2:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8002ad6:	4410      	add	r0, r2
 8002ad8:	2264      	movs	r2, #100	; 0x64
 8002ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ade:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002ae0:	2307      	movs	r3, #7
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002aea:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8002aec:	b2c0      	uxtb	r0, r0
 8002aee:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002af0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002af4:	1c90      	adds	r0, r2, #2
 8002af6:	2264      	movs	r2, #100	; 0x64
 8002af8:	4420      	add	r0, r4
 8002afa:	fbb4 f3f3 	udiv	r3, r4, r3
 8002afe:	4428      	add	r0, r5
 8002b00:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8002b04:	fbb4 f4f2 	udiv	r4, r4, r2
 8002b08:	4418      	add	r0, r3
 8002b0a:	1b00      	subs	r0, r0, r4
 8002b0c:	e7e8      	b.n	8002ae0 <RTC_WeekDayNum+0x34>

08002b0e <RTC_EnterInitMode>:
{
 8002b0e:	b538      	push	{r3, r4, r5, lr}
 8002b10:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002b12:	f7fe f9ed 	bl	8000ef0 <HAL_GetTick>
 8002b16:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	0692      	lsls	r2, r2, #26
 8002b1e:	d505      	bpl.n	8002b2c <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8002b20:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	f042 0210 	orr.w	r2, r2, #16
 8002b28:	605a      	str	r2, [r3, #4]
}
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b2c:	f7fe f9e0 	bl	8000ef0 <HAL_GetTick>
 8002b30:	1b40      	subs	r0, r0, r5
 8002b32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b36:	d9ef      	bls.n	8002b18 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
 8002b3a:	e7f6      	b.n	8002b2a <RTC_EnterInitMode+0x1c>

08002b3c <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3c:	6802      	ldr	r2, [r0, #0]
{
 8002b3e:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b40:	6853      	ldr	r3, [r2, #4]
{
 8002b42:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b44:	f023 0310 	bic.w	r3, r3, #16
 8002b48:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002b4a:	f7fe f9d1 	bl	8000ef0 <HAL_GetTick>
 8002b4e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	069b      	lsls	r3, r3, #26
 8002b56:	d501      	bpl.n	8002b5c <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8002b58:	2000      	movs	r0, #0
}
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b5c:	f7fe f9c8 	bl	8000ef0 <HAL_GetTick>
 8002b60:	1b40      	subs	r0, r0, r5
 8002b62:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b66:	d9f3      	bls.n	8002b50 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8002b68:	2003      	movs	r0, #3
 8002b6a:	e7f6      	b.n	8002b5a <RTC_ExitInitMode+0x1e>

08002b6c <RTC_WriteTimeCounter>:
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4605      	mov	r5, r0
 8002b70:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b72:	f7ff ffcc 	bl	8002b0e <RTC_EnterInitMode>
 8002b76:	b958      	cbnz	r0, 8002b90 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002b7c:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002b7e:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b80:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002b82:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b84:	f7ff ffda 	bl	8002b3c <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002b88:	3000      	adds	r0, #0
 8002b8a:	bf18      	it	ne
 8002b8c:	2001      	movne	r0, #1
}
 8002b8e:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002b90:	2001      	movs	r0, #1
 8002b92:	e7fc      	b.n	8002b8e <RTC_WriteTimeCounter+0x22>

08002b94 <RTC_WriteAlarmCounter>:
{
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4605      	mov	r5, r0
 8002b98:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b9a:	f7ff ffb8 	bl	8002b0e <RTC_EnterInitMode>
 8002b9e:	b958      	cbnz	r0, 8002bb8 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002ba4:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002ba6:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ba8:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002baa:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002bac:	f7ff ffc6 	bl	8002b3c <RTC_ExitInitMode>
    status = HAL_ERROR;
 8002bb0:	3000      	adds	r0, #0
 8002bb2:	bf18      	it	ne
 8002bb4:	2001      	movne	r0, #1
}
 8002bb6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8002bb8:	2001      	movs	r0, #1
 8002bba:	e7fc      	b.n	8002bb6 <RTC_WriteAlarmCounter+0x22>

08002bbc <HAL_RTC_SetTime>:
{
 8002bbc:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	b1e0      	cbz	r0, 8002bfc <HAL_RTC_SetTime+0x40>
 8002bc2:	b1d9      	cbz	r1, 8002bfc <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8002bc4:	7c03      	ldrb	r3, [r0, #16]
 8002bc6:	2602      	movs	r6, #2
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d046      	beq.n	8002c5a <HAL_RTC_SetTime+0x9e>
 8002bcc:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bce:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8002bd0:	7403      	strb	r3, [r0, #16]
 8002bd2:	7808      	ldrb	r0, [r1, #0]
 8002bd4:	784e      	ldrb	r6, [r1, #1]
 8002bd6:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8002bd8:	b992      	cbnz	r2, 8002c00 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002bda:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002bdc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002be0:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002be2:	fb03 5000 	mla	r0, r3, r0, r5
 8002be6:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002be8:	4629      	mov	r1, r5
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff ffbe 	bl	8002b6c <RTC_WriteTimeCounter>
 8002bf0:	4606      	mov	r6, r0
 8002bf2:	b1b0      	cbz	r0, 8002c22 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002bfc:	2601      	movs	r6, #1
 8002bfe:	e02c      	b.n	8002c5a <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c00:	f7ff ff4c 	bl	8002a9c <RTC_Bcd2ToByte>
 8002c04:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002c06:	4630      	mov	r0, r6
 8002c08:	f7ff ff48 	bl	8002a9c <RTC_Bcd2ToByte>
 8002c0c:	233c      	movs	r3, #60	; 0x3c
 8002c0e:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c14:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002c18:	4608      	mov	r0, r1
 8002c1a:	f7ff ff3f 	bl	8002a9c <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c1e:	4405      	add	r5, r0
 8002c20:	e7e2      	b.n	8002be8 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002c22:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c24:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002c26:	6853      	ldr	r3, [r2, #4]
 8002c28:	f023 0305 	bic.w	r3, r3, #5
 8002c2c:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c2e:	f7ff ff23 	bl	8002a78 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	d00d      	beq.n	8002c52 <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 8002c36:	4285      	cmp	r5, r0
 8002c38:	d90b      	bls.n	8002c52 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c3a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002c3e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002c42:	4620      	mov	r0, r4
 8002c44:	f7ff ffa6 	bl	8002b94 <RTC_WriteAlarmCounter>
 8002c48:	b118      	cbz	r0, 8002c52 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002c4c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4e:	7463      	strb	r3, [r4, #17]
 8002c50:	e7d4      	b.n	8002bfc <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8002c52:	2301      	movs	r3, #1
 8002c54:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8002c56:	2300      	movs	r3, #0
 8002c58:	7423      	strb	r3, [r4, #16]
}
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c60 <HAL_RTC_GetTime>:
{
 8002c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c64:	460d      	mov	r5, r1
 8002c66:	4690      	mov	r8, r2
  if ((hrtc == NULL) || (sTime == NULL))
 8002c68:	4604      	mov	r4, r0
 8002c6a:	b910      	cbnz	r0, 8002c72 <HAL_RTC_GetTime+0x12>
    return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
}
 8002c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hrtc == NULL) || (sTime == NULL))
 8002c72:	2900      	cmp	r1, #0
 8002c74:	d0fa      	beq.n	8002c6c <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002c76:	6803      	ldr	r3, [r0, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	075e      	lsls	r6, r3, #29
 8002c7c:	d4f6      	bmi.n	8002c6c <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002c7e:	f7ff fee9 	bl	8002a54 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8002c82:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002c86:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002c8a:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002c8c:	fb02 0213 	mls	r2, r2, r3, r0
 8002c90:	203c      	movs	r0, #60	; 0x3c
 8002c92:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002c96:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8002c9a:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002c9c:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002c9e:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8002ca0:	f240 808d 	bls.w	8002dbe <HAL_RTC_GetTime+0x15e>
    sTime->Hours = (hours % 24U);
 8002ca4:	2118      	movs	r1, #24
 8002ca6:	fbb3 f2f1 	udiv	r2, r3, r1
 8002caa:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002cae:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);
 8002cb0:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002cb2:	f7ff fee1 	bl	8002a78 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002cb6:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002cb8:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002cba:	d004      	beq.n	8002cc6 <HAL_RTC_GetTime+0x66>
 8002cbc:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002cbe:	bf2c      	ite	cs
 8002cc0:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8002cc4:	1bc6      	subcc	r6, r0, r7
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002cc8:	4620      	mov	r0, r4
 8002cca:	fbb7 f9f3 	udiv	r9, r7, r3
 8002cce:	fb03 7919 	mls	r9, r3, r9, r7
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	f7ff ff4a 	bl	8002b6c <RTC_WriteTimeCounter>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d1c7      	bne.n	8002c6c <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002cdc:	1c72      	adds	r2, r6, #1
 8002cde:	d02e      	beq.n	8002d3e <HAL_RTC_GetTime+0xde>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ce0:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff55 	bl	8002b94 <RTC_WriteAlarmCounter>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d1be      	bne.n	8002c6c <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8002cf0:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8002cf2:	fbb7 f7f3 	udiv	r7, r7, r3
  if ((nYear % 100U) != 0U)
 8002cf6:	f04f 0c64 	mov.w	ip, #100	; 0x64
  if ((nYear % 400U) == 0U)
 8002cfa:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002cfe:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8002d02:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8002d04:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8002d06:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002d08:	42b7      	cmp	r7, r6
 8002d0a:	d81a      	bhi.n	8002d42 <HAL_RTC_GetTime+0xe2>
  hrtc->DateToUpdate.Month = month;
 8002d0c:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8002d0e:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8002d10:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8002d12:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8002d14:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002d16:	f7ff fec9 	bl	8002aac <RTC_WeekDayNum>
 8002d1a:	7320      	strb	r0, [r4, #12]
  if (Format != RTC_FORMAT_BIN)
 8002d1c:	f1b8 0f00 	cmp.w	r8, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002d22:	7828      	ldrb	r0, [r5, #0]
 8002d24:	f7ff feaf 	bl	8002a86 <RTC_ByteToBcd2>
 8002d28:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002d2a:	7868      	ldrb	r0, [r5, #1]
 8002d2c:	f7ff feab 	bl	8002a86 <RTC_ByteToBcd2>
 8002d30:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002d32:	78a8      	ldrb	r0, [r5, #2]
 8002d34:	f7ff fea7 	bl	8002a86 <RTC_ByteToBcd2>
 8002d38:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	e797      	b.n	8002c6e <HAL_RTC_GetTime+0xe>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002d3e:	4631      	mov	r1, r6
 8002d40:	e7d0      	b.n	8002ce4 <HAL_RTC_GetTime+0x84>
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002d42:	1e4b      	subs	r3, r1, #1
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d80e      	bhi.n	8002d66 <HAL_RTC_GetTime+0x106>
 8002d48:	fa29 f303 	lsr.w	r3, r9, r3
 8002d4c:	07db      	lsls	r3, r3, #31
 8002d4e:	d438      	bmi.n	8002dc2 <HAL_RTC_GetTime+0x162>
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002d50:	f021 0302 	bic.w	r3, r1, #2
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d001      	beq.n	8002d5c <HAL_RTC_GetTime+0xfc>
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RTC_GetTime+0x118>
      if (day < 30U)
 8002d5c:	2a1d      	cmp	r2, #29
      if (day < 31U)
 8002d5e:	d90f      	bls.n	8002d80 <HAL_RTC_GetTime+0x120>
        month++;
 8002d60:	3101      	adds	r1, #1
        day = 1U;
 8002d62:	2201      	movs	r2, #1
 8002d64:	e006      	b.n	8002d74 <HAL_RTC_GetTime+0x114>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002d66:	290c      	cmp	r1, #12
 8002d68:	d1f2      	bne.n	8002d50 <HAL_RTC_GetTime+0xf0>
      if (day < 31U)
 8002d6a:	2a1e      	cmp	r2, #30
 8002d6c:	d908      	bls.n	8002d80 <HAL_RTC_GetTime+0x120>
          day = 1U;
 8002d6e:	2201      	movs	r2, #1
          month = 1U;
 8002d70:	4611      	mov	r1, r2
          year++;
 8002d72:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8002d74:	3601      	adds	r6, #1
 8002d76:	e7c7      	b.n	8002d08 <HAL_RTC_GetTime+0xa8>
    else if (month == 2U)
 8002d78:	2902      	cmp	r1, #2
 8002d7a:	d1fb      	bne.n	8002d74 <HAL_RTC_GetTime+0x114>
      if (day < 28U)
 8002d7c:	2a1b      	cmp	r2, #27
 8002d7e:	d801      	bhi.n	8002d84 <HAL_RTC_GetTime+0x124>
        day++;
 8002d80:	3201      	adds	r2, #1
 8002d82:	e7f7      	b.n	8002d74 <HAL_RTC_GetTime+0x114>
      else if (day == 28U)
 8002d84:	2a1c      	cmp	r2, #28
 8002d86:	d113      	bne.n	8002db0 <HAL_RTC_GetTime+0x150>
        if (RTC_IsLeapYear(year))
 8002d88:	b282      	uxth	r2, r0
  if ((nYear % 4U) != 0U)
 8002d8a:	0793      	lsls	r3, r2, #30
 8002d8c:	d112      	bne.n	8002db4 <HAL_RTC_GetTime+0x154>
  if ((nYear % 100U) != 0U)
 8002d8e:	fbb2 f3fc 	udiv	r3, r2, ip
 8002d92:	fb0c 2313 	mls	r3, ip, r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b97b      	cbnz	r3, 8002dba <HAL_RTC_GetTime+0x15a>
  if ((nYear % 400U) == 0U)
 8002d9a:	fbb2 f3fe 	udiv	r3, r2, lr
 8002d9e:	fb0e 2313 	mls	r3, lr, r3, r2
 8002da2:	b29b      	uxth	r3, r3
          day = 1U;
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0e      	itee	eq
 8002da8:	221d      	moveq	r2, #29
 8002daa:	2201      	movne	r2, #1
 8002dac:	2103      	movne	r1, #3
 8002dae:	e7e1      	b.n	8002d74 <HAL_RTC_GetTime+0x114>
      else if (day == 29U)
 8002db0:	2a1d      	cmp	r2, #29
 8002db2:	d1df      	bne.n	8002d74 <HAL_RTC_GetTime+0x114>
        day = 1U;
 8002db4:	2201      	movs	r2, #1
        month++;
 8002db6:	2103      	movs	r1, #3
 8002db8:	e7dc      	b.n	8002d74 <HAL_RTC_GetTime+0x114>
          day++;
 8002dba:	221d      	movs	r2, #29
 8002dbc:	e7da      	b.n	8002d74 <HAL_RTC_GetTime+0x114>
    sTime->Hours = hours;
 8002dbe:	702b      	strb	r3, [r5, #0]
 8002dc0:	e7ac      	b.n	8002d1c <HAL_RTC_GetTime+0xbc>
      if (day < 31U)
 8002dc2:	2a1e      	cmp	r2, #30
 8002dc4:	e7cb      	b.n	8002d5e <HAL_RTC_GetTime+0xfe>
 8002dc6:	bf00      	nop
 8002dc8:	00015180 	.word	0x00015180

08002dcc <HAL_RTC_SetDate>:
{
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	b358      	cbz	r0, 8002e2c <HAL_RTC_SetDate+0x60>
 8002dd4:	b351      	cbz	r1, 8002e2c <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 8002dd6:	7c03      	ldrb	r3, [r0, #16]
 8002dd8:	2002      	movs	r0, #2
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d04b      	beq.n	8002e76 <HAL_RTC_SetDate+0xaa>
 8002dde:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002de0:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8002de2:	7423      	strb	r3, [r4, #16]
 8002de4:	78c8      	ldrb	r0, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8002de6:	bb1a      	cbnz	r2, 8002e30 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002de8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002dea:	784b      	ldrb	r3, [r1, #1]
 8002dec:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002dee:	788b      	ldrb	r3, [r1, #2]
 8002df0:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002df2:	7ba2      	ldrb	r2, [r4, #14]
 8002df4:	7b61      	ldrb	r1, [r4, #13]
 8002df6:	7be0      	ldrb	r0, [r4, #15]
 8002df8:	f7ff fe58 	bl	8002aac <RTC_WeekDayNum>
 8002dfc:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002dfe:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff fe27 	bl	8002a54 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_RTC_SetDate+0xac>)
 8002e08:	4298      	cmp	r0, r3
 8002e0a:	d930      	bls.n	8002e6e <HAL_RTC_SetDate+0xa2>
 8002e0c:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8002e10:	fbb0 f5f3 	udiv	r5, r0, r3
 8002e14:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	f7ff fea6 	bl	8002b6c <RTC_WriteTimeCounter>
 8002e20:	4606      	mov	r6, r0
 8002e22:	b188      	cbz	r0, 8002e48 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e24:	2304      	movs	r3, #4
 8002e26:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	e022      	b.n	8002e76 <HAL_RTC_SetDate+0xaa>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002e30:	f7ff fe34 	bl	8002a9c <RTC_Bcd2ToByte>
 8002e34:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002e36:	7848      	ldrb	r0, [r1, #1]
 8002e38:	f7ff fe30 	bl	8002a9c <RTC_Bcd2ToByte>
 8002e3c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002e3e:	7888      	ldrb	r0, [r1, #2]
 8002e40:	f7ff fe2c 	bl	8002a9c <RTC_Bcd2ToByte>
 8002e44:	73a0      	strb	r0, [r4, #14]
 8002e46:	e7d4      	b.n	8002df2 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff fe15 	bl	8002a78 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d00d      	beq.n	8002e6e <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 8002e52:	4285      	cmp	r5, r0
 8002e54:	d90b      	bls.n	8002e6e <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e56:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002e5a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff fe98 	bl	8002b94 <RTC_WriteAlarmCounter>
 8002e64:	b118      	cbz	r0, 8002e6e <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e66:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8002e68:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6a:	7463      	strb	r3, [r4, #17]
 8002e6c:	e7de      	b.n	8002e2c <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8002e6e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002e70:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8002e72:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8002e74:	7420      	strb	r0, [r4, #16]
}
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	00015f8f 	.word	0x00015f8f

08002e7c <HAL_RTC_GetDate>:
{
 8002e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e7e:	4617      	mov	r7, r2
  RTC_TimeTypeDef stime = {0U};
 8002e80:	2200      	movs	r2, #0
{
 8002e82:	460c      	mov	r4, r1
  RTC_TimeTypeDef stime = {0U};
 8002e84:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002e88:	f88d 2006 	strb.w	r2, [sp, #6]
  if ((hrtc == NULL) || (sDate == NULL))
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b918      	cbnz	r0, 8002e98 <HAL_RTC_GetDate+0x1c>
    return HAL_ERROR;
 8002e90:	2201      	movs	r2, #1
}
 8002e92:	4610      	mov	r0, r2
 8002e94:	b003      	add	sp, #12
 8002e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hrtc == NULL) || (sDate == NULL))
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	d0f9      	beq.n	8002e90 <HAL_RTC_GetDate+0x14>
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e9c:	a901      	add	r1, sp, #4
 8002e9e:	f7ff fedf 	bl	8002c60 <HAL_RTC_GetTime>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d1f3      	bne.n	8002e90 <HAL_RTC_GetDate+0x14>
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002ea8:	7b2b      	ldrb	r3, [r5, #12]
 8002eaa:	7023      	strb	r3, [r4, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002eac:	7be8      	ldrb	r0, [r5, #15]
 8002eae:	70e0      	strb	r0, [r4, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002eb0:	7b6e      	ldrb	r6, [r5, #13]
 8002eb2:	7066      	strb	r6, [r4, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002eb4:	7ba9      	ldrb	r1, [r5, #14]
 8002eb6:	70a1      	strb	r1, [r4, #2]
  if (Format != RTC_FORMAT_BIN)
 8002eb8:	2f00      	cmp	r7, #0
 8002eba:	d0ea      	beq.n	8002e92 <HAL_RTC_GetDate+0x16>
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002ebc:	f7ff fde3 	bl	8002a86 <RTC_ByteToBcd2>
 8002ec0:	70e0      	strb	r0, [r4, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f7ff fddf 	bl	8002a86 <RTC_ByteToBcd2>
 8002ec8:	7060      	strb	r0, [r4, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002eca:	4608      	mov	r0, r1
 8002ecc:	f7ff fddb 	bl	8002a86 <RTC_ByteToBcd2>
 8002ed0:	70a0      	strb	r0, [r4, #2]
 8002ed2:	e7de      	b.n	8002e92 <HAL_RTC_GetDate+0x16>

08002ed4 <HAL_RTC_WaitForSynchro>:
{
 8002ed4:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	b1a8      	cbz	r0, 8002f06 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	6853      	ldr	r3, [r2, #4]
 8002ede:	f023 0308 	bic.w	r3, r3, #8
 8002ee2:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002ee4:	f7fe f804 	bl	8000ef0 <HAL_GetTick>
 8002ee8:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	071b      	lsls	r3, r3, #28
 8002ef0:	d501      	bpl.n	8002ef6 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8002ef2:	2000      	movs	r0, #0
}
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ef6:	f7fd fffb 	bl	8000ef0 <HAL_GetTick>
 8002efa:	1b40      	subs	r0, r0, r5
 8002efc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f00:	d9f3      	bls.n	8002eea <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
 8002f04:	e7f6      	b.n	8002ef4 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8002f06:	2001      	movs	r0, #1
 8002f08:	e7f4      	b.n	8002ef4 <HAL_RTC_WaitForSynchro+0x20>
	...

08002f0c <HAL_RTC_Init>:
{
 8002f0c:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8002f0e:	4604      	mov	r4, r0
 8002f10:	b170      	cbz	r0, 8002f30 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f12:	7c43      	ldrb	r3, [r0, #17]
 8002f14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f18:	b913      	cbnz	r3, 8002f20 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002f1a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8002f1c:	f002 fa0e 	bl	800533c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f20:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f22:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f24:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f26:	f7ff ffd5 	bl	8002ed4 <HAL_RTC_WaitForSynchro>
 8002f2a:	b118      	cbz	r0, 8002f34 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002f30:	2001      	movs	r0, #1
 8002f32:	e037      	b.n	8002fa4 <HAL_RTC_Init+0x98>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f34:	4620      	mov	r0, r4
 8002f36:	f7ff fdea 	bl	8002b0e <RTC_EnterInitMode>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d1f6      	bne.n	8002f2c <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002f3e:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002f40:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002f42:	6853      	ldr	r3, [r2, #4]
 8002f44:	f023 0307 	bic.w	r3, r3, #7
 8002f48:	6053      	str	r3, [r2, #4]
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002f4c:	b118      	cbz	r0, 8002f56 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002f4e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002f50:	f021 0101 	bic.w	r1, r1, #1
 8002f54:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002f56:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f58:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7ff fd00 	bl	800296c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d0dd      	beq.n	8002f2c <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002f70:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	6893      	ldr	r3, [r2, #8]
 8002f76:	f023 030f 	bic.w	r3, r3, #15
 8002f7a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002f7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002f80:	68d3      	ldr	r3, [r2, #12]
 8002f82:	b280      	uxth	r0, r0
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	4318      	orrs	r0, r3
 8002f8a:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7ff fdd5 	bl	8002b3c <RTC_ExitInitMode>
 8002f92:	2301      	movs	r3, #1
 8002f94:	b110      	cbz	r0, 8002f9c <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f96:	2204      	movs	r2, #4
 8002f98:	7462      	strb	r2, [r4, #17]
 8002f9a:	e7c9      	b.n	8002f30 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8002f9c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f9e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002fa0:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002fa2:	7463      	strb	r3, [r4, #17]
}
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40006c00 	.word	0x40006c00

08002fac <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	4604      	mov	r4, r0
 8002fb0:	460e      	mov	r6, r1
 8002fb2:	4615      	mov	r5, r2
 8002fb4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fb6:	6821      	ldr	r1, [r4, #0]
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	ea36 0302 	bics.w	r3, r6, r2
 8002fbe:	d001      	beq.n	8002fc4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e02d      	b.n	8003020 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002fc4:	1c6b      	adds	r3, r5, #1
 8002fc6:	d0f7      	beq.n	8002fb8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fc8:	f7fd ff92 	bl	8000ef0 <HAL_GetTick>
 8002fcc:	1bc0      	subs	r0, r0, r7
 8002fce:	4285      	cmp	r5, r0
 8002fd0:	d8f1      	bhi.n	8002fb6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fda:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fdc:	6862      	ldr	r2, [r4, #4]
 8002fde:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002fe2:	d10a      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8002fe4:	68a2      	ldr	r2, [r4, #8]
 8002fe6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002fea:	d002      	beq.n	8002ff2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ff0:	d103      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ffc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003000:	d107      	bne.n	8003012 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003010:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003012:	2301      	movs	r3, #1
 8003014:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003018:	2300      	movs	r3, #0
 800301a:	2003      	movs	r0, #3
 800301c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003022 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003022:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	4613      	mov	r3, r2
 8003026:	460a      	mov	r2, r1
 8003028:	2180      	movs	r1, #128	; 0x80
{
 800302a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800302c:	f7ff ffbe 	bl	8002fac <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8003030:	b120      	cbz	r0, 800303c <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003034:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003036:	f043 0320 	orr.w	r3, r3, #32
 800303a:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800303c:	bd10      	pop	{r4, pc}

0800303e <HAL_SPI_Init>:
{
 800303e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003040:	4604      	mov	r4, r0
 8003042:	2800      	cmp	r0, #0
 8003044:	d034      	beq.n	80030b0 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800304a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800304e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003052:	b91b      	cbnz	r3, 800305c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8003054:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003058:	f002 f9b0 	bl	80053bc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800305c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800305e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003064:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003066:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800306e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8003072:	4303      	orrs	r3, r0
 8003074:	68e0      	ldr	r0, [r4, #12]
 8003076:	4303      	orrs	r3, r0
 8003078:	6920      	ldr	r0, [r4, #16]
 800307a:	4303      	orrs	r3, r0
 800307c:	6960      	ldr	r0, [r4, #20]
 800307e:	4303      	orrs	r3, r0
 8003080:	69e0      	ldr	r0, [r4, #28]
 8003082:	4303      	orrs	r3, r0
 8003084:	6a20      	ldr	r0, [r4, #32]
 8003086:	4303      	orrs	r3, r0
 8003088:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800308a:	4303      	orrs	r3, r0
 800308c:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003090:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003092:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003094:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003098:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800309a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800309c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800309e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030a4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80030a6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80030ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
 80030b2:	e7fc      	b.n	80030ae <HAL_SPI_Init+0x70>

080030b4 <HAL_SPI_Transmit>:
{
 80030b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80030b8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80030ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80030be:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80030c0:	2b01      	cmp	r3, #1
{
 80030c2:	460d      	mov	r5, r1
 80030c4:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80030c6:	f000 809c 	beq.w	8003202 <HAL_SPI_Transmit+0x14e>
 80030ca:	2301      	movs	r3, #1
 80030cc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80030d0:	f7fd ff0e 	bl	8000ef0 <HAL_GetTick>
 80030d4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80030d6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80030da:	b2c0      	uxtb	r0, r0
 80030dc:	2801      	cmp	r0, #1
 80030de:	f040 808e 	bne.w	80031fe <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d05e      	beq.n	80031a4 <HAL_SPI_Transmit+0xf0>
 80030e6:	f1b8 0f00 	cmp.w	r8, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ec:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ee:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f4:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030f8:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030fa:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80030fe:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003100:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003102:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8003106:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800310c:	bf08      	it	eq
 800310e:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003110:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8003112:	bf08      	it	eq
 8003114:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8003118:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800311c:	bf08      	it	eq
 800311e:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003120:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003122:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003124:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003126:	bf5e      	ittt	pl
 8003128:	6803      	ldrpl	r3, [r0, #0]
 800312a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800312e:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003130:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003134:	6863      	ldr	r3, [r4, #4]
 8003136:	d13e      	bne.n	80031b6 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003138:	b113      	cbz	r3, 8003140 <HAL_SPI_Transmit+0x8c>
 800313a:	f1b8 0f01 	cmp.w	r8, #1
 800313e:	d107      	bne.n	8003150 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003140:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003144:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003146:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003148:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800314a:	3b01      	subs	r3, #1
 800314c:	b29b      	uxth	r3, r3
 800314e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003150:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	b9a3      	cbnz	r3, 8003180 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003156:	463a      	mov	r2, r7
 8003158:	4631      	mov	r1, r6
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff ff61 	bl	8003022 <SPI_EndRxTxTransaction>
 8003160:	2800      	cmp	r0, #0
 8003162:	d149      	bne.n	80031f8 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003164:	68a3      	ldr	r3, [r4, #8]
 8003166:	b933      	cbnz	r3, 8003176 <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003176:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003178:	3000      	adds	r0, #0
 800317a:	bf18      	it	ne
 800317c:	2001      	movne	r0, #1
error:
 800317e:	e011      	b.n	80031a4 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003180:	6822      	ldr	r2, [r4, #0]
 8003182:	6893      	ldr	r3, [r2, #8]
 8003184:	0798      	lsls	r0, r3, #30
 8003186:	d505      	bpl.n	8003194 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800318e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003190:	6323      	str	r3, [r4, #48]	; 0x30
 8003192:	e7d9      	b.n	8003148 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003194:	f7fd feac 	bl	8000ef0 <HAL_GetTick>
 8003198:	1bc0      	subs	r0, r0, r7
 800319a:	42b0      	cmp	r0, r6
 800319c:	d3d8      	bcc.n	8003150 <HAL_SPI_Transmit+0x9c>
 800319e:	1c71      	adds	r1, r6, #1
 80031a0:	d0d6      	beq.n	8003150 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031aa:	2300      	movs	r3, #0
 80031ac:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80031b0:	b002      	add	sp, #8
 80031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b6:	b113      	cbz	r3, 80031be <HAL_SPI_Transmit+0x10a>
 80031b8:	f1b8 0f01 	cmp.w	r8, #1
 80031bc:	d108      	bne.n	80031d0 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031be:	782b      	ldrb	r3, [r5, #0]
 80031c0:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031c4:	3301      	adds	r3, #1
 80031c6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80031c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80031d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0be      	beq.n	8003156 <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	0792      	lsls	r2, r2, #30
 80031de:	d503      	bpl.n	80031e8 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031e2:	7812      	ldrb	r2, [r2, #0]
 80031e4:	731a      	strb	r2, [r3, #12]
 80031e6:	e7ec      	b.n	80031c2 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e8:	f7fd fe82 	bl	8000ef0 <HAL_GetTick>
 80031ec:	1bc0      	subs	r0, r0, r7
 80031ee:	42b0      	cmp	r0, r6
 80031f0:	d3ee      	bcc.n	80031d0 <HAL_SPI_Transmit+0x11c>
 80031f2:	1c73      	adds	r3, r6, #1
 80031f4:	d0ec      	beq.n	80031d0 <HAL_SPI_Transmit+0x11c>
 80031f6:	e7d4      	b.n	80031a2 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f8:	2320      	movs	r3, #32
 80031fa:	6563      	str	r3, [r4, #84]	; 0x54
 80031fc:	e7b2      	b.n	8003164 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 80031fe:	2002      	movs	r0, #2
 8003200:	e7d0      	b.n	80031a4 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8003202:	2002      	movs	r0, #2
 8003204:	e7d4      	b.n	80031b0 <HAL_SPI_Transmit+0xfc>

08003206 <HAL_SPI_TransmitReceive>:
{
 8003206:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800320a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800320c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003210:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003212:	2b01      	cmp	r3, #1
{
 8003214:	460d      	mov	r5, r1
 8003216:	4691      	mov	r9, r2
 8003218:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800321a:	f000 80e2 	beq.w	80033e2 <HAL_SPI_TransmitReceive+0x1dc>
 800321e:	2301      	movs	r3, #1
 8003220:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003224:	f7fd fe64 	bl	8000ef0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003228:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800322c:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800322e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003230:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8003232:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003234:	d00a      	beq.n	800324c <HAL_SPI_TransmitReceive+0x46>
 8003236:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800323a:	f040 80d0 	bne.w	80033de <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323e:	68a0      	ldr	r0, [r4, #8]
 8003240:	2800      	cmp	r0, #0
 8003242:	f040 80cc 	bne.w	80033de <HAL_SPI_TransmitReceive+0x1d8>
 8003246:	2b04      	cmp	r3, #4
 8003248:	f040 80c9 	bne.w	80033de <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800324c:	2d00      	cmp	r5, #0
 800324e:	f000 80c4 	beq.w	80033da <HAL_SPI_TransmitReceive+0x1d4>
 8003252:	f1b9 0f00 	cmp.w	r9, #0
 8003256:	f000 80c0 	beq.w	80033da <HAL_SPI_TransmitReceive+0x1d4>
 800325a:	2e00      	cmp	r6, #0
 800325c:	f000 80bd 	beq.w	80033da <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003260:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003264:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003268:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800326a:	bf1c      	itt	ne
 800326c:	2305      	movne	r3, #5
 800326e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003272:	2300      	movs	r3, #0
 8003274:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003276:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800327c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800327e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003280:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8003282:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003284:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003286:	bf58      	it	pl
 8003288:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800328a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800328c:	bf58      	it	pl
 800328e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8003292:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003294:	bf58      	it	pl
 8003296:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003298:	68e2      	ldr	r2, [r4, #12]
 800329a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800329e:	d158      	bne.n	8003352 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a0:	b109      	cbz	r1, 80032a6 <HAL_SPI_TransmitReceive+0xa0>
 80032a2:	2e01      	cmp	r6, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032aa:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80032ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80032b6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	b9ab      	cbnz	r3, 80032ea <HAL_SPI_TransmitReceive+0xe4>
 80032be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	b993      	cbnz	r3, 80032ea <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c4:	4642      	mov	r2, r8
 80032c6:	4639      	mov	r1, r7
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff feaa 	bl	8003022 <SPI_EndRxTxTransaction>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f040 8081 	bne.w	80033d6 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68a3      	ldr	r3, [r4, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d132      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	9001      	str	r0, [sp, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	9201      	str	r2, [sp, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	e02a      	b.n	8003340 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	6893      	ldr	r3, [r2, #8]
 80032ee:	0799      	lsls	r1, r3, #30
 80032f0:	d50d      	bpl.n	800330e <HAL_SPI_TransmitReceive+0x108>
 80032f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	b153      	cbz	r3, 800330e <HAL_SPI_TransmitReceive+0x108>
 80032f8:	b14d      	cbz	r5, 800330e <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 80032fa:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003302:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003306:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003308:	3b01      	subs	r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330e:	6893      	ldr	r3, [r2, #8]
 8003310:	07db      	lsls	r3, r3, #31
 8003312:	d50c      	bpl.n	800332e <HAL_SPI_TransmitReceive+0x128>
 8003314:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	b14b      	cbz	r3, 800332e <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800331a:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003320:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003324:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003326:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003328:	3b01      	subs	r3, #1
 800332a:	b29b      	uxth	r3, r3
 800332c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800332e:	f7fd fddf 	bl	8000ef0 <HAL_GetTick>
 8003332:	eba0 0008 	sub.w	r0, r0, r8
 8003336:	4287      	cmp	r7, r0
 8003338:	d8be      	bhi.n	80032b8 <HAL_SPI_TransmitReceive+0xb2>
 800333a:	1c7e      	adds	r6, r7, #1
 800333c:	d0bc      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003340:	2301      	movs	r3, #1
 8003342:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003346:	2300      	movs	r3, #0
 8003348:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800334c:	b003      	add	sp, #12
 800334e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003352:	b109      	cbz	r1, 8003358 <HAL_SPI_TransmitReceive+0x152>
 8003354:	2e01      	cmp	r6, #1
 8003356:	d108      	bne.n	800336a <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003358:	782a      	ldrb	r2, [r5, #0]
 800335a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800335c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800335e:	3301      	adds	r3, #1
 8003360:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003362:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003364:	3b01      	subs	r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800336a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	b91b      	cbnz	r3, 800337a <HAL_SPI_TransmitReceive+0x174>
 8003372:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0a4      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800337a:	6822      	ldr	r2, [r4, #0]
 800337c:	6893      	ldr	r3, [r2, #8]
 800337e:	0798      	lsls	r0, r3, #30
 8003380:	d50e      	bpl.n	80033a0 <HAL_SPI_TransmitReceive+0x19a>
 8003382:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003384:	b29b      	uxth	r3, r3
 8003386:	b15b      	cbz	r3, 80033a0 <HAL_SPI_TransmitReceive+0x19a>
 8003388:	b155      	cbz	r5, 80033a0 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 800338a:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800338c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003392:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003394:	3301      	adds	r3, #1
 8003396:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003398:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800339a:	3b01      	subs	r3, #1
 800339c:	b29b      	uxth	r3, r3
 800339e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	6893      	ldr	r3, [r2, #8]
 80033a4:	07d9      	lsls	r1, r3, #31
 80033a6:	d50d      	bpl.n	80033c4 <HAL_SPI_TransmitReceive+0x1be>
 80033a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	b153      	cbz	r3, 80033c4 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80033ae:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b8:	3301      	adds	r3, #1
 80033ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80033bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033c4:	f7fd fd94 	bl	8000ef0 <HAL_GetTick>
 80033c8:	eba0 0008 	sub.w	r0, r0, r8
 80033cc:	4287      	cmp	r7, r0
 80033ce:	d8cd      	bhi.n	800336c <HAL_SPI_TransmitReceive+0x166>
 80033d0:	1c7b      	adds	r3, r7, #1
 80033d2:	d0cb      	beq.n	800336c <HAL_SPI_TransmitReceive+0x166>
 80033d4:	e7b3      	b.n	800333e <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d6:	2320      	movs	r3, #32
 80033d8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80033da:	2001      	movs	r0, #1
 80033dc:	e7b0      	b.n	8003340 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80033de:	2002      	movs	r0, #2
 80033e0:	e7ae      	b.n	8003340 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80033e2:	2002      	movs	r0, #2
 80033e4:	e7b2      	b.n	800334c <HAL_SPI_TransmitReceive+0x146>

080033e6 <HAL_SPI_ErrorCallback>:
 80033e6:	4770      	bx	lr

080033e8 <HAL_SPI_IRQHandler>:
{
 80033e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80033ea:	6803      	ldr	r3, [r0, #0]
{
 80033ec:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80033ee:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80033f0:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80033f2:	0991      	lsrs	r1, r2, #6
 80033f4:	f011 0601 	ands.w	r6, r1, #1
 80033f8:	d10a      	bne.n	8003410 <HAL_SPI_IRQHandler+0x28>
 80033fa:	f012 0f01 	tst.w	r2, #1
 80033fe:	d007      	beq.n	8003410 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003400:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003404:	d004      	beq.n	8003410 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 8003406:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003408:	b004      	add	sp, #16
 800340a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 800340e:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003410:	0790      	lsls	r0, r2, #30
 8003412:	d504      	bpl.n	800341e <HAL_SPI_IRQHandler+0x36>
 8003414:	0628      	lsls	r0, r5, #24
 8003416:	d502      	bpl.n	800341e <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 8003418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800341a:	4620      	mov	r0, r4
 800341c:	e7f4      	b.n	8003408 <HAL_SPI_IRQHandler+0x20>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800341e:	0952      	lsrs	r2, r2, #5
 8003420:	4311      	orrs	r1, r2
 8003422:	07c9      	lsls	r1, r1, #31
 8003424:	d54c      	bpl.n	80034c0 <HAL_SPI_IRQHandler+0xd8>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003426:	06a8      	lsls	r0, r5, #26
 8003428:	d54a      	bpl.n	80034c0 <HAL_SPI_IRQHandler+0xd8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800342a:	b176      	cbz	r6, 800344a <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800342c:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8003430:	2000      	movs	r0, #0
 8003432:	2903      	cmp	r1, #3
 8003434:	d03e      	beq.n	80034b4 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003436:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003438:	f041 0104 	orr.w	r1, r1, #4
 800343c:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343e:	9001      	str	r0, [sp, #4]
 8003440:	68d9      	ldr	r1, [r3, #12]
 8003442:	9101      	str	r1, [sp, #4]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	9101      	str	r1, [sp, #4]
 8003448:	9901      	ldr	r1, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800344a:	07d1      	lsls	r1, r2, #31
 800344c:	d50c      	bpl.n	8003468 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800344e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003456:	2200      	movs	r2, #0
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	9203      	str	r2, [sp, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003468:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800346a:	b34a      	cbz	r2, 80034c0 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003472:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003474:	2201      	movs	r2, #1
 8003476:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800347a:	07aa      	lsls	r2, r5, #30
 800347c:	d022      	beq.n	80034c4 <HAL_SPI_IRQHandler+0xdc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800347e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003480:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003482:	f022 0203 	bic.w	r2, r2, #3
 8003486:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003488:	b140      	cbz	r0, 800349c <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_SPI_IRQHandler+0xe4>)
 800348c:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800348e:	f7fd ffeb 	bl	8001468 <HAL_DMA_Abort_IT>
 8003492:	b118      	cbz	r0, 800349c <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003494:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800349a:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800349c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800349e:	b178      	cbz	r0, 80034c0 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_SPI_IRQHandler+0xe4>)
 80034a2:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034a4:	f7fd ffe0 	bl	8001468 <HAL_DMA_Abort_IT>
 80034a8:	b150      	cbz	r0, 80034c0 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b0:	6563      	str	r3, [r4, #84]	; 0x54
 80034b2:	e005      	b.n	80034c0 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b4:	9002      	str	r0, [sp, #8]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	9202      	str	r2, [sp, #8]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	9b02      	ldr	r3, [sp, #8]
}
 80034c0:	b004      	add	sp, #16
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_ErrorCallback(hspi);
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7ff ff8e 	bl	80033e6 <HAL_SPI_ErrorCallback>
 80034ca:	e7f9      	b.n	80034c0 <HAL_SPI_IRQHandler+0xd8>
 80034cc:	080034d1 	.word	0x080034d1

080034d0 <SPI_DMAAbortOnError>:
{
 80034d0:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80034d2:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80034d6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80034d8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80034da:	f7ff ff84 	bl	80033e6 <HAL_SPI_ErrorCallback>
}
 80034de:	bd08      	pop	{r3, pc}

080034e0 <HAL_SPI_GetState>:
  return hspi->State;
 80034e0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80034e4:	4770      	bx	lr
	...

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	6803      	ldr	r3, [r0, #0]
 80034ee:	68c1      	ldr	r1, [r0, #12]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	2419      	movs	r4, #25
 80034f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034f8:	430a      	orrs	r2, r1
 80034fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034fc:	6882      	ldr	r2, [r0, #8]
 80034fe:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003500:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003502:	4302      	orrs	r2, r0
 8003504:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003506:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800350a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800350e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	69a9      	ldr	r1, [r5, #24]
 8003518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800351c:	430a      	orrs	r2, r1
 800351e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003520:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <UART_SetConfig+0x70>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d114      	bne.n	8003550 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003526:	f7ff f999 	bl	800285c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352a:	4360      	muls	r0, r4
 800352c:	686c      	ldr	r4, [r5, #4]
 800352e:	2264      	movs	r2, #100	; 0x64
 8003530:	00a4      	lsls	r4, r4, #2
 8003532:	fbb0 f0f4 	udiv	r0, r0, r4
 8003536:	fbb0 f1f2 	udiv	r1, r0, r2
 800353a:	fb02 0311 	mls	r3, r2, r1, r0
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	3332      	adds	r3, #50	; 0x32
 8003542:	fbb3 f3f2 	udiv	r3, r3, r2
 8003546:	682c      	ldr	r4, [r5, #0]
 8003548:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800354c:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800354e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003550:	f7ff f974 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8003554:	e7e9      	b.n	800352a <UART_SetConfig+0x42>
 8003556:	bf00      	nop
 8003558:	40013800 	.word	0x40013800

0800355c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	4604      	mov	r4, r0
 8003560:	460e      	mov	r6, r1
 8003562:	4617      	mov	r7, r2
 8003564:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003566:	6821      	ldr	r1, [r4, #0]
 8003568:	680b      	ldr	r3, [r1, #0]
 800356a:	ea36 0303 	bics.w	r3, r6, r3
 800356e:	d101      	bne.n	8003574 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003570:	2000      	movs	r0, #0
 8003572:	e014      	b.n	800359e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8003574:	1c6b      	adds	r3, r5, #1
 8003576:	d0f7      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003578:	b995      	cbnz	r5, 80035a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800357c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003584:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800358e:	2320      	movs	r3, #32
 8003590:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003594:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003598:	2300      	movs	r3, #0
 800359a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035a0:	f7fd fca6 	bl	8000ef0 <HAL_GetTick>
 80035a4:	1bc0      	subs	r0, r0, r7
 80035a6:	4285      	cmp	r5, r0
 80035a8:	d2dd      	bcs.n	8003566 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80035aa:	e7e6      	b.n	800357a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080035ac <HAL_UART_Init>:
{
 80035ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80035ae:	4604      	mov	r4, r0
 80035b0:	b340      	cbz	r0, 8003604 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80035b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035ba:	b91b      	cbnz	r3, 80035c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80035bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80035c0:	f002 fd26 	bl	8006010 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80035c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80035cc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80035ce:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80035d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80035d6:	f7ff ff87 	bl	80034e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035da:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ec:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80035f6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80035fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80035fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003602:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003604:	2001      	movs	r0, #1
 8003606:	e7fc      	b.n	8003602 <HAL_UART_Init+0x56>

08003608 <HAL_UART_Transmit>:
{
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800360e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003612:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003614:	2b20      	cmp	r3, #32
{
 8003616:	460d      	mov	r5, r1
 8003618:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800361a:	d14c      	bne.n	80036b6 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 800361c:	2900      	cmp	r1, #0
 800361e:	d048      	beq.n	80036b2 <HAL_UART_Transmit+0xaa>
 8003620:	2a00      	cmp	r2, #0
 8003622:	d046      	beq.n	80036b2 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8003624:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003628:	2b01      	cmp	r3, #1
 800362a:	d044      	beq.n	80036b6 <HAL_UART_Transmit+0xae>
 800362c:	2301      	movs	r3, #1
 800362e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003636:	2321      	movs	r3, #33	; 0x21
 8003638:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800363c:	f7fd fc58 	bl	8000ef0 <HAL_GetTick>
 8003640:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003642:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003646:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800364a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800364c:	b29b      	uxth	r3, r3
 800364e:	b963      	cbnz	r3, 800366a <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003650:	463b      	mov	r3, r7
 8003652:	4632      	mov	r2, r6
 8003654:	2140      	movs	r1, #64	; 0x40
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff ff80 	bl	800355c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800365c:	b9a0      	cbnz	r0, 8003688 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800365e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003660:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003664:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003668:	e00f      	b.n	800368a <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800366a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366c:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800366e:	3b01      	subs	r3, #1
 8003670:	b29b      	uxth	r3, r3
 8003672:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003674:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003676:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367c:	4620      	mov	r0, r4
 800367e:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003680:	d10e      	bne.n	80036a0 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	f7ff ff6b 	bl	800355c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003686:	b110      	cbz	r0, 800368e <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8003688:	2003      	movs	r0, #3
}
 800368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800368e:	882b      	ldrh	r3, [r5, #0]
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	b943      	cbnz	r3, 80036ae <HAL_UART_Transmit+0xa6>
          pData += 2U;
 800369c:	3502      	adds	r5, #2
 800369e:	e7d4      	b.n	800364a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	f7ff ff5c 	bl	800355c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d1ef      	bne.n	8003688 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	782a      	ldrb	r2, [r5, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	3501      	adds	r5, #1
 80036b0:	e7cb      	b.n	800364a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
 80036b4:	e7e9      	b.n	800368a <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80036b6:	2002      	movs	r0, #2
 80036b8:	e7e7      	b.n	800368a <HAL_UART_Transmit+0x82>

080036ba <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036ba:	b084      	sub	sp, #16
 80036bc:	a801      	add	r0, sp, #4
 80036be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80036c2:	b004      	add	sp, #16
 80036c4:	2000      	movs	r0, #0
 80036c6:	4770      	bx	lr

080036c8 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80036c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80036cc:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80036d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80036d4:	2000      	movs	r0, #0
 80036d6:	4770      	bx	lr

080036d8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80036d8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80036dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036e0:	045b      	lsls	r3, r3, #17
 80036e2:	0c5b      	lsrs	r3, r3, #17
 80036e4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80036e8:	2000      	movs	r0, #0
 80036ea:	4770      	bx	lr

080036ec <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80036ec:	2000      	movs	r0, #0
 80036ee:	4770      	bx	lr

080036f0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80036f0:	b084      	sub	sp, #16
 80036f2:	b510      	push	{r4, lr}
 80036f4:	ac03      	add	r4, sp, #12
 80036f6:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80036fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80036fe:	2301      	movs	r3, #1
 8003700:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 800370a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800370e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8003712:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 8003716:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8003718:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 800371c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 8003720:	4618      	mov	r0, r3
 8003722:	4770      	bx	lr

08003724 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003726:	780c      	ldrb	r4, [r1, #0]
{
 8003728:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800372a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800372e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003730:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003734:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8003738:	2803      	cmp	r0, #3
 800373a:	d803      	bhi.n	8003744 <USB_ActivateEndpoint+0x20>
 800373c:	e8df f000 	tbb	[pc, r0]
 8003740:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8003744:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003746:	f248 0580 	movw	r5, #32896	; 0x8080
 800374a:	432a      	orrs	r2, r5
 800374c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003750:	780e      	ldrb	r6, [r1, #0]
 8003752:	4a9e      	ldr	r2, [pc, #632]	; (80039cc <USB_ActivateEndpoint+0x2a8>)
 8003754:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8003758:	4335      	orrs	r5, r6
 800375a:	4014      	ands	r4, r2
 800375c:	432c      	orrs	r4, r5
 800375e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8003762:	7b0d      	ldrb	r5, [r1, #12]
 8003764:	780c      	ldrb	r4, [r1, #0]
 8003766:	2d00      	cmp	r5, #0
 8003768:	f040 8082 	bne.w	8003870 <USB_ActivateEndpoint+0x14c>
 800376c:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800376e:	784e      	ldrb	r6, [r1, #1]
 8003770:	086d      	lsrs	r5, r5, #1
 8003772:	006d      	lsls	r5, r5, #1
 8003774:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8003778:	b376      	cbz	r6, 80037d8 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800377a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800377e:	4434      	add	r4, r6
 8003780:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003784:	780d      	ldrb	r5, [r1, #0]
 8003786:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800378a:	0667      	lsls	r7, r4, #25
 800378c:	d508      	bpl.n	80037a0 <USB_ActivateEndpoint+0x7c>
 800378e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003792:	4022      	ands	r2, r4
 8003794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003798:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800379c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80037a0:	78ca      	ldrb	r2, [r1, #3]
 80037a2:	780c      	ldrb	r4, [r1, #0]
 80037a4:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037a6:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 80037aa:	4a89      	ldr	r2, [pc, #548]	; (80039d0 <USB_ActivateEndpoint+0x2ac>)
 80037ac:	ea02 0201 	and.w	r2, r2, r1
 80037b0:	bf18      	it	ne
 80037b2:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037be:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80037c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80037c8:	2000      	movs	r0, #0
 80037ca:	e7bc      	b.n	8003746 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80037cc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80037d0:	e7fa      	b.n	80037c8 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80037d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d6:	e7f7      	b.n	80037c8 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037d8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037dc:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037de:	4414      	add	r4, r2
 80037e0:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037e4:	780a      	ldrb	r2, [r1, #0]
 80037e6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80037ea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80037ee:	b2a4      	uxth	r4, r4
 80037f0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80037f4:	bb56      	cbnz	r6, 800384c <USB_ActivateEndpoint+0x128>
 80037f6:	5b15      	ldrh	r5, [r2, r4]
 80037f8:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80037fc:	042d      	lsls	r5, r5, #16
 80037fe:	0c2d      	lsrs	r5, r5, #16
 8003800:	5315      	strh	r5, [r2, r4]
 8003802:	5b15      	ldrh	r5, [r2, r4]
 8003804:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8003808:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800380a:	780c      	ldrb	r4, [r1, #0]
 800380c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003810:	0457      	lsls	r7, r2, #17
 8003812:	d50b      	bpl.n	800382c <USB_ActivateEndpoint+0x108>
 8003814:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003818:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800381c:	0512      	lsls	r2, r2, #20
 800381e:	0d12      	lsrs	r2, r2, #20
 8003820:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003828:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800382c:	7809      	ldrb	r1, [r1, #0]
 800382e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800383a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800383e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003842:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003846:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800384a:	e7ba      	b.n	80037c2 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800384c:	2e3e      	cmp	r6, #62	; 0x3e
 800384e:	d806      	bhi.n	800385e <USB_ActivateEndpoint+0x13a>
 8003850:	0875      	lsrs	r5, r6, #1
 8003852:	07f6      	lsls	r6, r6, #31
 8003854:	bf48      	it	mi
 8003856:	3501      	addmi	r5, #1
 8003858:	02ad      	lsls	r5, r5, #10
 800385a:	b2ad      	uxth	r5, r5
 800385c:	e7d4      	b.n	8003808 <USB_ActivateEndpoint+0xe4>
 800385e:	0977      	lsrs	r7, r6, #5
 8003860:	06f5      	lsls	r5, r6, #27
 8003862:	4d5c      	ldr	r5, [pc, #368]	; (80039d4 <USB_ActivateEndpoint+0x2b0>)
 8003864:	bf08      	it	eq
 8003866:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800386a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800386e:	e7f4      	b.n	800385a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003870:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8003874:	4015      	ands	r5, r2
 8003876:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800387a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800387e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003882:	780c      	ldrb	r4, [r1, #0]
 8003884:	890d      	ldrh	r5, [r1, #8]
 8003886:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800388a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800388e:	086d      	lsrs	r5, r5, #1
 8003890:	b2b6      	uxth	r6, r6
 8003892:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003896:	006d      	lsls	r5, r5, #1
 8003898:	53a5      	strh	r5, [r4, r6]
 800389a:	780c      	ldrb	r4, [r1, #0]
 800389c:	894d      	ldrh	r5, [r1, #10]
 800389e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80038a2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80038a6:	086d      	lsrs	r5, r5, #1
 80038a8:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 80038ac:	006d      	lsls	r5, r5, #1
 80038ae:	b2b6      	uxth	r6, r6
 80038b0:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 80038b2:	784c      	ldrb	r4, [r1, #1]
 80038b4:	780d      	ldrb	r5, [r1, #0]
 80038b6:	2c00      	cmp	r4, #0
 80038b8:	d143      	bne.n	8003942 <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ba:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80038be:	0466      	lsls	r6, r4, #17
 80038c0:	d508      	bpl.n	80038d4 <USB_ActivateEndpoint+0x1b0>
 80038c2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80038c6:	4022      	ands	r2, r4
 80038c8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80038cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038d4:	780c      	ldrb	r4, [r1, #0]
 80038d6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038da:	0655      	lsls	r5, r2, #25
 80038dc:	d50b      	bpl.n	80038f6 <USB_ActivateEndpoint+0x1d2>
 80038de:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80038e6:	0512      	lsls	r2, r2, #20
 80038e8:	0d12      	lsrs	r2, r2, #20
 80038ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80038f6:	780c      	ldrb	r4, [r1, #0]
 80038f8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003900:	0512      	lsls	r2, r2, #20
 8003902:	0d12      	lsrs	r2, r2, #20
 8003904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003908:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800390c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003910:	f248 0480 	movw	r4, #32896	; 0x8080
 8003914:	780d      	ldrb	r5, [r1, #0]
 8003916:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800391a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800391e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003922:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003926:	4322      	orrs	r2, r4
 8003928:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800392c:	7809      	ldrb	r1, [r1, #0]
 800392e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003932:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393a:	4314      	orrs	r4, r2
 800393c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8003940:	e73f      	b.n	80037c2 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003942:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8003946:	0464      	lsls	r4, r4, #17
 8003948:	d508      	bpl.n	800395c <USB_ActivateEndpoint+0x238>
 800394a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800394e:	4022      	ands	r2, r4
 8003950:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003958:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800395c:	780c      	ldrb	r4, [r1, #0]
 800395e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003962:	0652      	lsls	r2, r2, #25
 8003964:	d50b      	bpl.n	800397e <USB_ActivateEndpoint+0x25a>
 8003966:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800396a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800396e:	0512      	lsls	r2, r2, #20
 8003970:	0d12      	lsrs	r2, r2, #20
 8003972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003976:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800397a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800397e:	780c      	ldrb	r4, [r1, #0]
 8003980:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003984:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003988:	0512      	lsls	r2, r2, #20
 800398a:	0d12      	lsrs	r2, r2, #20
 800398c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003994:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003998:	78ca      	ldrb	r2, [r1, #3]
 800399a:	780c      	ldrb	r4, [r1, #0]
 800399c:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800399e:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80039a2:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <USB_ActivateEndpoint+0x2ac>)
 80039a4:	ea02 0205 	and.w	r2, r2, r5
 80039a8:	bf18      	it	ne
 80039aa:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039ba:	7809      	ldrb	r1, [r1, #0]
 80039bc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80039c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039c4:	0492      	lsls	r2, r2, #18
 80039c6:	0c92      	lsrs	r2, r2, #18
 80039c8:	e739      	b.n	800383e <USB_ActivateEndpoint+0x11a>
 80039ca:	bf00      	nop
 80039cc:	ffff8f8f 	.word	0xffff8f8f
 80039d0:	ffff8fbf 	.word	0xffff8fbf
 80039d4:	ffff8000 	.word	0xffff8000

080039d8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80039d8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80039da:	7b0c      	ldrb	r4, [r1, #12]
 80039dc:	784a      	ldrb	r2, [r1, #1]
 80039de:	780b      	ldrb	r3, [r1, #0]
 80039e0:	bbbc      	cbnz	r4, 8003a52 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80039e2:	b1f2      	cbz	r2, 8003a22 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039e8:	0652      	lsls	r2, r2, #25
 80039ea:	d50b      	bpl.n	8003a04 <USB_DeactivateEndpoint+0x2c>
 80039ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80039f4:	0512      	lsls	r2, r2, #20
 80039f6:	0d12      	lsrs	r2, r2, #20
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a00:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a04:	780a      	ldrb	r2, [r1, #0]
 8003a06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a0e:	051b      	lsls	r3, r3, #20
 8003a10:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8003a1e:	2000      	movs	r0, #0
 8003a20:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a26:	0454      	lsls	r4, r2, #17
 8003a28:	d50b      	bpl.n	8003a42 <USB_DeactivateEndpoint+0x6a>
 8003a2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a32:	0512      	lsls	r2, r2, #20
 8003a34:	0d12      	lsrs	r2, r2, #20
 8003a36:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a42:	780a      	ldrb	r2, [r1, #0]
 8003a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4c:	049b      	lsls	r3, r3, #18
 8003a4e:	0c9b      	lsrs	r3, r3, #18
 8003a50:	e7df      	b.n	8003a12 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d144      	bne.n	8003ae0 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a5a:	0452      	lsls	r2, r2, #17
 8003a5c:	d50b      	bpl.n	8003a76 <USB_DeactivateEndpoint+0x9e>
 8003a5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003a66:	0512      	lsls	r2, r2, #20
 8003a68:	0d12      	lsrs	r2, r2, #20
 8003a6a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a72:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a76:	780a      	ldrb	r2, [r1, #0]
 8003a78:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a7c:	065c      	lsls	r4, r3, #25
 8003a7e:	d50b      	bpl.n	8003a98 <USB_DeactivateEndpoint+0xc0>
 8003a80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a88:	051b      	lsls	r3, r3, #20
 8003a8a:	0d1b      	lsrs	r3, r3, #20
 8003a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003a98:	780a      	ldrb	r2, [r1, #0]
 8003a9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa2:	051b      	lsls	r3, r3, #20
 8003aa4:	0d1b      	lsrs	r3, r3, #20
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ab2:	f248 0280 	movw	r2, #32896	; 0x8080
 8003ab6:	780c      	ldrb	r4, [r1, #0]
 8003ab8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aca:	7809      	ldrb	r1, [r1, #0]
 8003acc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003ade:	e79e      	b.n	8003a1e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ae0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003ae4:	0452      	lsls	r2, r2, #17
 8003ae6:	d50b      	bpl.n	8003b00 <USB_DeactivateEndpoint+0x128>
 8003ae8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003aec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003af0:	0512      	lsls	r2, r2, #20
 8003af2:	0d12      	lsrs	r2, r2, #20
 8003af4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003afc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b00:	780a      	ldrb	r2, [r1, #0]
 8003b02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b06:	065b      	lsls	r3, r3, #25
 8003b08:	d50b      	bpl.n	8003b22 <USB_DeactivateEndpoint+0x14a>
 8003b0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b12:	051b      	lsls	r3, r3, #20
 8003b14:	0d1b      	lsrs	r3, r3, #20
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b1e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003b22:	780a      	ldrb	r2, [r1, #0]
 8003b24:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	0d1b      	lsrs	r3, r3, #20
 8003b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b3c:	f248 0280 	movw	r2, #32896	; 0x8080
 8003b40:	780c      	ldrb	r4, [r1, #0]
 8003b42:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b54:	7809      	ldrb	r1, [r1, #0]
 8003b56:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	e7b9      	b.n	8003ad8 <USB_DeactivateEndpoint+0x100>

08003b64 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003b64:	784b      	ldrb	r3, [r1, #1]
 8003b66:	780a      	ldrb	r2, [r1, #0]
 8003b68:	b17b      	cbz	r3, 8003b8a <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003b6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b76:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003b86:	2000      	movs	r0, #0
 8003b88:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b9a:	e7ee      	b.n	8003b7a <USB_EPSetStall+0x16>

08003b9c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003b9c:	7b0b      	ldrb	r3, [r1, #12]
 8003b9e:	bb23      	cbnz	r3, 8003bea <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8003ba0:	784b      	ldrb	r3, [r1, #1]
 8003ba2:	780a      	ldrb	r2, [r1, #0]
 8003ba4:	b31b      	cbz	r3, 8003bee <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003baa:	065b      	lsls	r3, r3, #25
 8003bac:	d50b      	bpl.n	8003bc6 <USB_EPClearStall+0x2a>
 8003bae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	051b      	lsls	r3, r3, #20
 8003bb8:	0d1b      	lsrs	r3, r3, #20
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bc2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003bc6:	78cb      	ldrb	r3, [r1, #3]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d00e      	beq.n	8003bea <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bcc:	780a      	ldrb	r2, [r1, #0]
 8003bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003bea:	2000      	movs	r0, #0
 8003bec:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bf2:	045b      	lsls	r3, r3, #17
 8003bf4:	d50b      	bpl.n	8003c0e <USB_EPClearStall+0x72>
 8003bf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfe:	051b      	lsls	r3, r3, #20
 8003c00:	0d1b      	lsrs	r3, r3, #20
 8003c02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c0e:	780a      	ldrb	r2, [r1, #0]
 8003c10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003c20:	e7dd      	b.n	8003bde <USB_EPClearStall+0x42>

08003c22 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003c22:	b911      	cbnz	r1, 8003c2a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	4770      	bx	lr

08003c2e <USB_DevConnect>:
 8003c2e:	2000      	movs	r0, #0
 8003c30:	4770      	bx	lr

08003c32 <USB_DevDisconnect>:
 8003c32:	2000      	movs	r0, #0
 8003c34:	4770      	bx	lr

08003c36 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003c36:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003c3a:	4770      	bx	lr

08003c3c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	4770      	bx	lr

08003c40 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c40:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c44:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d100      	bne.n	8003c56 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003c54:	4770      	bx	lr
 8003c56:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003c5a:	f822 0b04 	strh.w	r0, [r2], #4
 8003c5e:	e7f7      	b.n	8003c50 <USB_WritePMA+0x10>

08003c60 <USB_EPStartXfer>:
{
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003c64:	7849      	ldrb	r1, [r1, #1]
{
 8003c66:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003c68:	2901      	cmp	r1, #1
 8003c6a:	69aa      	ldr	r2, [r5, #24]
 8003c6c:	692b      	ldr	r3, [r5, #16]
 8003c6e:	7b28      	ldrb	r0, [r5, #12]
 8003c70:	d15d      	bne.n	8003d2e <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8003c72:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003c74:	bf9d      	ittte	ls
 8003c76:	2300      	movls	r3, #0
 8003c78:	61ab      	strls	r3, [r5, #24]
 8003c7a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003c7c:	1ad2      	subhi	r2, r2, r3
 8003c7e:	bf88      	it	hi
 8003c80:	61aa      	strhi	r2, [r5, #24]
 8003c82:	6969      	ldr	r1, [r5, #20]
 8003c84:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003c86:	b9e8      	cbnz	r0, 8003cc4 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003c88:	4633      	mov	r3, r6
 8003c8a:	88ea      	ldrh	r2, [r5, #6]
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f7ff ffd7 	bl	8003c40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c92:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003c96:	782a      	ldrb	r2, [r5, #0]
 8003c98:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	440b      	add	r3, r1
 8003ca0:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003ca2:	782a      	ldrb	r2, [r5, #0]
 8003ca4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbc:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003cc4:	782b      	ldrb	r3, [r5, #0]
 8003cc6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cca:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003cce:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cd0:	bf4b      	itete	mi
 8003cd2:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cd6:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cda:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cdc:	1812      	addpl	r2, r2, r0
 8003cde:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ce2:	bf4b      	itete	mi
 8003ce4:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ce6:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8003ce8:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8003cea:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cec:	4633      	mov	r3, r6
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ffa6 	bl	8003c40 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003cf4:	786b      	ldrb	r3, [r5, #1]
 8003cf6:	782a      	ldrb	r2, [r5, #0]
 8003cf8:	b963      	cbnz	r3, 8003d14 <USB_EPStartXfer+0xb4>
 8003cfa:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d02:	051b      	lsls	r3, r3, #20
 8003d04:	0d1b      	lsrs	r3, r3, #20
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d0e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003d12:	e7c6      	b.n	8003ca2 <USB_EPStartXfer+0x42>
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d1c4      	bne.n	8003ca2 <USB_EPStartXfer+0x42>
 8003d18:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d20:	051b      	lsls	r3, r3, #20
 8003d22:	0d1b      	lsrs	r3, r3, #20
 8003d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	e7ef      	b.n	8003d0e <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8003d2e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003d30:	bf93      	iteet	ls
 8003d32:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003d34:	1ad2      	subhi	r2, r2, r3
 8003d36:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8003d38:	61ab      	strls	r3, [r5, #24]
 8003d3a:	bf98      	it	ls
 8003d3c:	4613      	movls	r3, r2
 8003d3e:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8003d40:	b990      	cbnz	r0, 8003d68 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d42:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003d46:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8003d4a:	4401      	add	r1, r0
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d13b      	bne.n	8003dca <USB_EPStartXfer+0x16a>
 8003d52:	5a8b      	ldrh	r3, [r1, r2]
 8003d54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	528b      	strh	r3, [r1, r2]
 8003d5e:	5a8b      	ldrh	r3, [r1, r2]
 8003d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d64:	528b      	strh	r3, [r1, r2]
 8003d66:	e039      	b.n	8003ddc <USB_EPStartXfer+0x17c>
 8003d68:	b981      	cbnz	r1, 8003d8c <USB_EPStartXfer+0x12c>
 8003d6a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003d6e:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8003d72:	4401      	add	r1, r0
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	b9b3      	cbnz	r3, 8003da6 <USB_EPStartXfer+0x146>
 8003d78:	5a88      	ldrh	r0, [r1, r2]
 8003d7a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8003d7e:	0400      	lsls	r0, r0, #16
 8003d80:	0c00      	lsrs	r0, r0, #16
 8003d82:	5288      	strh	r0, [r1, r2]
 8003d84:	5a88      	ldrh	r0, [r1, r2]
 8003d86:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003d8a:	5288      	strh	r0, [r1, r2]
 8003d8c:	7869      	ldrb	r1, [r5, #1]
 8003d8e:	782a      	ldrb	r2, [r5, #0]
 8003d90:	2900      	cmp	r1, #0
 8003d92:	d0d6      	beq.n	8003d42 <USB_EPStartXfer+0xe2>
 8003d94:	2901      	cmp	r1, #1
 8003d96:	d121      	bne.n	8003ddc <USB_EPStartXfer+0x17c>
 8003d98:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8003d9c:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8003da0:	4401      	add	r1, r0
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	e02c      	b.n	8003e00 <USB_EPStartXfer+0x1a0>
 8003da6:	2b3e      	cmp	r3, #62	; 0x3e
 8003da8:	d806      	bhi.n	8003db8 <USB_EPStartXfer+0x158>
 8003daa:	0858      	lsrs	r0, r3, #1
 8003dac:	07de      	lsls	r6, r3, #31
 8003dae:	bf48      	it	mi
 8003db0:	3001      	addmi	r0, #1
 8003db2:	0280      	lsls	r0, r0, #10
 8003db4:	b280      	uxth	r0, r0
 8003db6:	e7e8      	b.n	8003d8a <USB_EPStartXfer+0x12a>
 8003db8:	095e      	lsrs	r6, r3, #5
 8003dba:	06d8      	lsls	r0, r3, #27
 8003dbc:	4811      	ldr	r0, [pc, #68]	; (8003e04 <USB_EPStartXfer+0x1a4>)
 8003dbe:	bf08      	it	eq
 8003dc0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8003dc4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8003dc8:	e7f4      	b.n	8003db4 <USB_EPStartXfer+0x154>
 8003dca:	2b3e      	cmp	r3, #62	; 0x3e
 8003dcc:	d810      	bhi.n	8003df0 <USB_EPStartXfer+0x190>
 8003dce:	0858      	lsrs	r0, r3, #1
 8003dd0:	07de      	lsls	r6, r3, #31
 8003dd2:	bf48      	it	mi
 8003dd4:	3001      	addmi	r0, #1
 8003dd6:	0280      	lsls	r0, r0, #10
 8003dd8:	b280      	uxth	r0, r0
 8003dda:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ddc:	782a      	ldrb	r2, [r5, #0]
 8003dde:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003dee:	e761      	b.n	8003cb4 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003df0:	0958      	lsrs	r0, r3, #5
 8003df2:	06db      	lsls	r3, r3, #27
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <USB_EPStartXfer+0x1a4>)
 8003df6:	bf08      	it	eq
 8003df8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8003dfc:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	e7af      	b.n	8003d64 <USB_EPStartXfer+0x104>
 8003e04:	ffff8000 	.word	0xffff8000

08003e08 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e08:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003e12:	085d      	lsrs	r5, r3, #1
 8003e14:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e16:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8003e18:	462e      	mov	r6, r5
 8003e1a:	3002      	adds	r0, #2
 8003e1c:	b936      	cbnz	r6, 8003e2c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e1e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003e20:	bf44      	itt	mi
 8003e22:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e26:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003e2c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003e30:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003e32:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e34:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003e38:	0a24      	lsrs	r4, r4, #8
 8003e3a:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003e3e:	e7ec      	b.n	8003e1a <USB_ReadPMA+0x12>

08003e40 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e40:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003e44:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e46:	b16b      	cbz	r3, 8003e64 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e48:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003e4c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003e50:	28ff      	cmp	r0, #255	; 0xff
 8003e52:	d007      	beq.n	8003e64 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003e5e:	23ff      	movs	r3, #255	; 0xff
 8003e60:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003e64:	2000      	movs	r0, #0
 8003e66:	bd10      	pop	{r4, pc}

08003e68 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003e68:	2343      	movs	r3, #67	; 0x43
 8003e6a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003e6c:	4800      	ldr	r0, [pc, #0]	; (8003e70 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003e6e:	4770      	bx	lr
 8003e70:	20000040 	.word	0x20000040

08003e74 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003e74:	2343      	movs	r3, #67	; 0x43
 8003e76:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003e78:	4800      	ldr	r0, [pc, #0]	; (8003e7c <USBD_CDC_GetHSCfgDesc+0x8>)
 8003e7a:	4770      	bx	lr
 8003e7c:	20000084 	.word	0x20000084

08003e80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003e80:	2343      	movs	r3, #67	; 0x43
 8003e82:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003e84:	4800      	ldr	r0, [pc, #0]	; (8003e88 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003e86:	4770      	bx	lr
 8003e88:	200000d4 	.word	0x200000d4

08003e8c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003e90:	4800      	ldr	r0, [pc, #0]	; (8003e94 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003e92:	4770      	bx	lr
 8003e94:	200000c8 	.word	0x200000c8

08003e98 <USBD_CDC_DataOut>:
{
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e9c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ea0:	f002 fa62 	bl	8006368 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8003ea4:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ea8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8003eac:	b14b      	cbz	r3, 8003ec2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003eae:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8003eb2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003ebc:	4798      	blx	r3
    return USBD_OK;
 8003ebe:	2000      	movs	r0, #0
}
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	e7fc      	b.n	8003ec0 <USBD_CDC_DataOut+0x28>

08003ec6 <USBD_CDC_DataIn>:
{
 8003ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ec8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003ecc:	b1ce      	cbz	r6, 8003f02 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ece:	2314      	movs	r3, #20
 8003ed0:	fb03 0301 	mla	r3, r3, r1, r0
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	b182      	cbz	r2, 8003efa <USBD_CDC_DataIn+0x34>
 8003ed8:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003edc:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003ee0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003ee2:	fbb2 f4f5 	udiv	r4, r2, r5
 8003ee6:	fb05 2414 	mls	r4, r5, r4, r2
 8003eea:	b934      	cbnz	r4, 8003efa <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003eec:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003eee:	4622      	mov	r2, r4
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	f002 fa1d 	bl	8006330 <USBD_LL_Transmit>
    return USBD_OK;
 8003ef6:	4620      	mov	r0, r4
}
 8003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003efa:	2000      	movs	r0, #0
 8003efc:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003f00:	e7fa      	b.n	8003ef8 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8003f02:	2002      	movs	r0, #2
 8003f04:	e7f8      	b.n	8003ef8 <USBD_CDC_DataIn+0x32>

08003f06 <USBD_CDC_Setup>:
{
 8003f06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003f0a:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f0e:	780a      	ldrb	r2, [r1, #0]
{
 8003f10:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f12:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003f16:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f18:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003f1c:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003f20:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f24:	d028      	beq.n	8003f78 <USBD_CDC_Setup+0x72>
 8003f26:	2c20      	cmp	r4, #32
 8003f28:	d145      	bne.n	8003fb6 <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003f2a:	88cc      	ldrh	r4, [r1, #6]
 8003f2c:	784b      	ldrb	r3, [r1, #1]
 8003f2e:	b1e4      	cbz	r4, 8003f6a <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003f30:	0612      	lsls	r2, r2, #24
 8003f32:	d511      	bpl.n	8003f58 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f34:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	4622      	mov	r2, r4
 8003f42:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f44:	88f2      	ldrh	r2, [r6, #6]
 8003f46:	4639      	mov	r1, r7
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 fc2c 	bl	80047a6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f4e:	4644      	mov	r4, r8
}
 8003f50:	4620      	mov	r0, r4
 8003f52:	b003      	add	sp, #12
 8003f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003f58:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003f5c:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003f60:	4622      	mov	r2, r4
 8003f62:	4639      	mov	r1, r7
 8003f64:	f000 fc34 	bl	80047d0 <USBD_CtlPrepareRx>
 8003f68:	e7f1      	b.n	8003f4e <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f6a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003f6e:	4618      	mov	r0, r3
 8003f70:	6895      	ldr	r5, [r2, #8]
 8003f72:	4622      	mov	r2, r4
 8003f74:	47a8      	blx	r5
 8003f76:	e7eb      	b.n	8003f50 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8003f78:	784f      	ldrb	r7, [r1, #1]
 8003f7a:	2f0a      	cmp	r7, #10
 8003f7c:	d00d      	beq.n	8003f9a <USBD_CDC_Setup+0x94>
 8003f7e:	2f0b      	cmp	r7, #11
 8003f80:	d015      	beq.n	8003fae <USBD_CDC_Setup+0xa8>
 8003f82:	b9c7      	cbnz	r7, 8003fb6 <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f84:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d114      	bne.n	8003fb6 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f10d 0106 	add.w	r1, sp, #6
 8003f92:	f000 fc08 	bl	80047a6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003f96:	463c      	mov	r4, r7
 8003f98:	e7da      	b.n	8003f50 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d109      	bne.n	8003fb6 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f10d 0105 	add.w	r1, sp, #5
 8003fa8:	f000 fbfd 	bl	80047a6 <USBD_CtlSendData>
 8003fac:	e7d0      	b.n	8003f50 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d0cc      	beq.n	8003f50 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f000 fbcd 	bl	8004758 <USBD_CtlError>
          ret = USBD_FAIL;
 8003fbe:	2402      	movs	r4, #2
          break;
 8003fc0:	e7c6      	b.n	8003f50 <USBD_CDC_Setup+0x4a>

08003fc2 <USBD_CDC_DeInit>:
{
 8003fc2:	b538      	push	{r3, r4, r5, lr}
 8003fc4:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003fc6:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003fc8:	2181      	movs	r1, #129	; 0x81
 8003fca:	f002 f969 	bl	80062a0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003fce:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003fd0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f002 f964 	bl	80062a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003fd8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003fdc:	2182      	movs	r1, #130	; 0x82
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f002 f95e 	bl	80062a0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003fe4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003fe8:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003fea:	b14b      	cbz	r3, 8004000 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003fec:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003ff4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003ff8:	f002 f9be 	bl	8006378 <USBD_static_free>
    pdev->pClassData = NULL;
 8003ffc:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004000:	2000      	movs	r0, #0
 8004002:	bd38      	pop	{r3, r4, r5, pc}

08004004 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004004:	7c03      	ldrb	r3, [r0, #16]
{
 8004006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400a:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800400c:	bbcb      	cbnz	r3, 8004082 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800400e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004012:	2202      	movs	r2, #2
 8004014:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004016:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004018:	f002 f932 	bl	8006280 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800401c:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004020:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004022:	4629      	mov	r1, r5
 8004024:	2202      	movs	r2, #2
 8004026:	4620      	mov	r0, r4
 8004028:	f002 f92a 	bl	8006280 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800402c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004030:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004032:	2308      	movs	r3, #8
 8004034:	2203      	movs	r2, #3
 8004036:	2182      	movs	r1, #130	; 0x82
 8004038:	4620      	mov	r0, r4
 800403a:	f002 f921 	bl	8006280 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800403e:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004040:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004044:	f002 f994 	bl	8006370 <USBD_static_malloc>
 8004048:	4606      	mov	r6, r0
 800404a:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800404e:	b350      	cbz	r0, 80040a6 <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8004050:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004052:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800405a:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800405e:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8004062:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004066:	f1b8 0f00 	cmp.w	r8, #0
 800406a:	d113      	bne.n	8004094 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800406c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004070:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004074:	4629      	mov	r1, r5
 8004076:	4620      	mov	r0, r4
 8004078:	f002 f968 	bl	800634c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800407c:	4640      	mov	r0, r8
}
 800407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004082:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	2202      	movs	r2, #2
 8004088:	2181      	movs	r1, #129	; 0x81
 800408a:	f002 f8f9 	bl	8006280 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800408e:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004090:	2340      	movs	r3, #64	; 0x40
 8004092:	e7c6      	b.n	8004022 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004094:	2340      	movs	r3, #64	; 0x40
 8004096:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800409a:	4629      	mov	r1, r5
 800409c:	4620      	mov	r0, r4
 800409e:	f002 f955 	bl	800634c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80040a2:	4638      	mov	r0, r7
 80040a4:	e7eb      	b.n	800407e <USBD_CDC_Init+0x7a>
    ret = 1U;
 80040a6:	4628      	mov	r0, r5
 80040a8:	e7e9      	b.n	800407e <USBD_CDC_Init+0x7a>

080040aa <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80040aa:	b119      	cbz	r1, 80040b4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80040ac:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80040b0:	2000      	movs	r0, #0
 80040b2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80040b4:	2002      	movs	r0, #2
  }

  return ret;
}
 80040b6:	4770      	bx	lr

080040b8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040b8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80040bc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80040be:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80040c6:	4770      	bx	lr

080040c8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80040c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80040cc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80040ce:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80040d2:	4770      	bx	lr

080040d4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040d4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80040d8:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80040da:	b162      	cbz	r2, 80040f6 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040dc:	7c04      	ldrb	r4, [r0, #16]
 80040de:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80040e2:	b934      	cbnz	r4, 80040f2 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040e4:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040e8:	2101      	movs	r1, #1
 80040ea:	f002 f92f 	bl	800634c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80040ee:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80040f0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	e7f8      	b.n	80040e8 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 80040f6:	2002      	movs	r0, #2
 80040f8:	e7fa      	b.n	80040f0 <USBD_CDC_ReceivePacket+0x1c>

080040fa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80040fa:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80040fc:	b180      	cbz	r0, 8004120 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80040fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004102:	b113      	cbz	r3, 800410a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800410a:	b109      	cbz	r1, 8004110 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800410c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004110:	2301      	movs	r3, #1
  pdev->id = id;
 8004112:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004114:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004118:	f002 f862 	bl	80061e0 <USBD_LL_Init>

  return USBD_OK;
 800411c:	2000      	movs	r0, #0
}
 800411e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004120:	2002      	movs	r0, #2
 8004122:	e7fc      	b.n	800411e <USBD_Init+0x24>

08004124 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004124:	b119      	cbz	r1, 800412e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004126:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800412a:	2000      	movs	r0, #0
 800412c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800412e:	2002      	movs	r0, #2
  }

  return status;
}
 8004130:	4770      	bx	lr

08004132 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004132:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004134:	f002 f896 	bl	8006264 <USBD_LL_Start>

  return USBD_OK;
}
 8004138:	2000      	movs	r0, #0
 800413a:	bd08      	pop	{r3, pc}

0800413c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800413c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800413e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004142:	b90b      	cbnz	r3, 8004148 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004144:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004146:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4798      	blx	r3
 800414c:	2800      	cmp	r0, #0
 800414e:	d0fa      	beq.n	8004146 <USBD_SetClassConfig+0xa>
 8004150:	e7f8      	b.n	8004144 <USBD_SetClassConfig+0x8>

08004152 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004152:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004154:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4798      	blx	r3

  return USBD_OK;
}
 800415c:	2000      	movs	r0, #0
 800415e:	bd08      	pop	{r3, pc}

08004160 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004160:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004162:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8004166:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fae1 	bl	8004730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800416e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004170:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004174:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004178:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800417c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004180:	f001 031f 	and.w	r3, r1, #31
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00e      	beq.n	80041a6 <USBD_LL_SetupStage+0x46>
 8004188:	d307      	bcc.n	800419a <USBD_LL_SetupStage+0x3a>
 800418a:	2b02      	cmp	r3, #2
 800418c:	d010      	beq.n	80041b0 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800418e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004192:	4620      	mov	r0, r4
 8004194:	f002 f892 	bl	80062bc <USBD_LL_StallEP>
      break;
 8004198:	e003      	b.n	80041a2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 800419a:	4629      	mov	r1, r5
 800419c:	4620      	mov	r0, r4
 800419e:	f000 f8f5 	bl	800438c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80041a2:	2000      	movs	r0, #0
 80041a4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80041a6:	4629      	mov	r1, r5
 80041a8:	4620      	mov	r0, r4
 80041aa:	f000 fa13 	bl	80045d4 <USBD_StdItfReq>
      break;
 80041ae:	e7f8      	b.n	80041a2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80041b0:	4629      	mov	r1, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 fa33 	bl	800461e <USBD_StdEPReq>
      break;
 80041b8:	e7f3      	b.n	80041a2 <USBD_LL_SetupStage+0x42>

080041ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80041ba:	b570      	push	{r4, r5, r6, lr}
 80041bc:	4605      	mov	r5, r0
 80041be:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80041c0:	bb49      	cbnz	r1, 8004216 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041c2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d11e      	bne.n	8004208 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 80041ca:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 80041ce:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90b      	bls.n	80041ee <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 80041d6:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 80041d8:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80041da:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80041de:	bf8c      	ite	hi
 80041e0:	b29a      	uxthhi	r2, r3
 80041e2:	b292      	uxthls	r2, r2
 80041e4:	4631      	mov	r1, r6
 80041e6:	f000 fb02 	bl	80047ee <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80041ea:	2000      	movs	r0, #0
}
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80041ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	b123      	cbz	r3, 8004200 <USBD_LL_DataOutStage+0x46>
 80041f6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80041fa:	2a03      	cmp	r2, #3
 80041fc:	d100      	bne.n	8004200 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80041fe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004200:	4628      	mov	r0, r5
 8004202:	f000 fafc 	bl	80047fe <USBD_CtlSendStatus>
 8004206:	e7f0      	b.n	80041ea <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004208:	2b05      	cmp	r3, #5
 800420a:	d1ee      	bne.n	80041ea <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 800420c:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004210:	f002 f854 	bl	80062bc <USBD_LL_StallEP>
 8004214:	e7e9      	b.n	80041ea <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004216:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	b12b      	cbz	r3, 800422a <USBD_LL_DataOutStage+0x70>
 800421e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004222:	2a03      	cmp	r2, #3
 8004224:	d101      	bne.n	800422a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8004226:	4798      	blx	r3
 8004228:	e7df      	b.n	80041ea <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800422a:	2002      	movs	r0, #2
 800422c:	e7de      	b.n	80041ec <USBD_LL_DataOutStage+0x32>

0800422e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800422e:	b570      	push	{r4, r5, r6, lr}
 8004230:	4613      	mov	r3, r2
 8004232:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004234:	460e      	mov	r6, r1
 8004236:	2900      	cmp	r1, #0
 8004238:	d147      	bne.n	80042ca <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800423a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800423e:	2a02      	cmp	r2, #2
 8004240:	d13c      	bne.n	80042bc <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8004242:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8004246:	4295      	cmp	r5, r2
 8004248:	d913      	bls.n	8004272 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800424a:	1aaa      	subs	r2, r5, r2
 800424c:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800424e:	4619      	mov	r1, r3
 8004250:	b292      	uxth	r2, r2
 8004252:	f000 fab5 	bl	80047c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004256:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004258:	461a      	mov	r2, r3
 800425a:	4619      	mov	r1, r3
 800425c:	4620      	mov	r0, r4
 800425e:	f002 f875 	bl	800634c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004262:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004266:	2000      	movs	r0, #0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800426c:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8004270:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004272:	69c3      	ldr	r3, [r0, #28]
 8004274:	fbb3 f5f2 	udiv	r5, r3, r2
 8004278:	fb02 3515 	mls	r5, r2, r5, r3
 800427c:	b965      	cbnz	r5, 8004298 <USBD_LL_DataInStage+0x6a>
 800427e:	429a      	cmp	r2, r3
 8004280:	d80a      	bhi.n	8004298 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8004282:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8004286:	4293      	cmp	r3, r2
 8004288:	d206      	bcs.n	8004298 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800428a:	462a      	mov	r2, r5
 800428c:	f000 fa98 	bl	80047c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004290:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004294:	462b      	mov	r3, r5
 8004296:	e7df      	b.n	8004258 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004298:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	b12b      	cbz	r3, 80042ac <USBD_LL_DataInStage+0x7e>
 80042a0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80042a4:	2a03      	cmp	r2, #3
 80042a6:	d101      	bne.n	80042ac <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80042a8:	4620      	mov	r0, r4
 80042aa:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80042ac:	2180      	movs	r1, #128	; 0x80
 80042ae:	4620      	mov	r0, r4
 80042b0:	f002 f804 	bl	80062bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 faad 	bl	8004814 <USBD_CtlReceiveStatus>
 80042ba:	e7d2      	b.n	8004262 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80042bc:	f032 0304 	bics.w	r3, r2, #4
 80042c0:	d1cf      	bne.n	8004262 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	f001 fffa 	bl	80062bc <USBD_LL_StallEP>
 80042c8:	e7cb      	b.n	8004262 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80042ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	b133      	cbz	r3, 80042e0 <USBD_LL_DataInStage+0xb2>
 80042d2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80042d6:	2a03      	cmp	r2, #3
 80042d8:	d102      	bne.n	80042e0 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80042da:	4798      	blx	r3
  return USBD_OK;
 80042dc:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80042de:	e7c7      	b.n	8004270 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80042e0:	2002      	movs	r0, #2
 80042e2:	e7c5      	b.n	8004270 <USBD_LL_DataInStage+0x42>

080042e4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042e4:	2200      	movs	r2, #0
{
 80042e6:	b570      	push	{r4, r5, r6, lr}
 80042e8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042ea:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042ec:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042ee:	4611      	mov	r1, r2
 80042f0:	2340      	movs	r3, #64	; 0x40
 80042f2:	f001 ffc5 	bl	8006280 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80042f6:	4633      	mov	r3, r6
 80042f8:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80042fa:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80042fe:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004302:	2200      	movs	r2, #0
 8004304:	4620      	mov	r0, r4
 8004306:	f001 ffbb 	bl	8006280 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800430a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800430c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004310:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004312:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004314:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004318:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800431c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800431e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8004322:	b123      	cbz	r3, 800432e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004324:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004328:	4620      	mov	r0, r4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800432e:	2000      	movs	r0, #0
 8004330:	bd70      	pop	{r4, r5, r6, pc}

08004332 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004332:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004334:	2000      	movs	r0, #0
 8004336:	4770      	bx	lr

08004338 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004338:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800433c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004340:	2304      	movs	r3, #4
 8004342:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004346:	2000      	movs	r0, #0
 8004348:	4770      	bx	lr

0800434a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800434a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800434e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004350:	bf04      	itt	eq
 8004352:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004356:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800435a:	2000      	movs	r0, #0
 800435c:	4770      	bx	lr

0800435e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800435e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004360:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004364:	2a03      	cmp	r2, #3
 8004366:	d104      	bne.n	8004372 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004368:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	b103      	cbz	r3, 8004372 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004370:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8004372:	2000      	movs	r0, #0
 8004374:	bd08      	pop	{r3, pc}

08004376 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004376:	b510      	push	{r4, lr}
 8004378:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	f001 ff9e 	bl	80062bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004380:	4620      	mov	r0, r4
}
 8004382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004386:	2100      	movs	r1, #0
 8004388:	f001 bf98 	b.w	80062bc <USBD_LL_StallEP>

0800438c <USBD_StdDevReq>:
{
 800438c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800438e:	780b      	ldrb	r3, [r1, #0]
{
 8004390:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004396:	2b20      	cmp	r3, #32
{
 8004398:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800439a:	d012      	beq.n	80043c2 <USBD_StdDevReq+0x36>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d010      	beq.n	80043c2 <USBD_StdDevReq+0x36>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d15b      	bne.n	800445c <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80043a4:	784b      	ldrb	r3, [r1, #1]
 80043a6:	2b09      	cmp	r3, #9
 80043a8:	d858      	bhi.n	800445c <USBD_StdDevReq+0xd0>
 80043aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80043ae:	00e9      	.short	0x00e9
 80043b0:	00570105 	.word	0x00570105
 80043b4:	005700fe 	.word	0x005700fe
 80043b8:	00130084 	.word	0x00130084
 80043bc:	00d20057 	.word	0x00d20057
 80043c0:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80043c2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80043c6:	4629      	mov	r1, r5
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	4620      	mov	r0, r4
 80043cc:	4798      	blx	r3
}
 80043ce:	2000      	movs	r0, #0
 80043d0:	b003      	add	sp, #12
 80043d2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80043da:	884b      	ldrh	r3, [r1, #2]
 80043dc:	0a1a      	lsrs	r2, r3, #8
 80043de:	3a01      	subs	r2, #1
 80043e0:	2a06      	cmp	r2, #6
 80043e2:	d83b      	bhi.n	800445c <USBD_StdDevReq+0xd0>
 80043e4:	e8df f002 	tbb	[pc, r2]
 80043e8:	3a2d2004 	.word	0x3a2d2004
 80043ec:	523a      	.short	0x523a
 80043ee:	5c          	.byte	0x5c
 80043ef:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80043f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80043f4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80043f6:	f10d 0106 	add.w	r1, sp, #6
 80043fa:	7c20      	ldrb	r0, [r4, #16]
 80043fc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80043fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004402:	b152      	cbz	r2, 800441a <USBD_StdDevReq+0x8e>
 8004404:	88eb      	ldrh	r3, [r5, #6]
 8004406:	b143      	cbz	r3, 800441a <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8004408:	429a      	cmp	r2, r3
 800440a:	bf28      	it	cs
 800440c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800440e:	4601      	mov	r1, r0
 8004410:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8004412:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004416:	f000 f9c6 	bl	80047a6 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800441a:	88eb      	ldrh	r3, [r5, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1d6      	bne.n	80043ce <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f9ec 	bl	80047fe <USBD_CtlSendStatus>
 8004426:	e7d2      	b.n	80043ce <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004428:	7c02      	ldrb	r2, [r0, #16]
 800442a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800442e:	b932      	cbnz	r2, 800443e <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004432:	f10d 0006 	add.w	r0, sp, #6
 8004436:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004438:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800443a:	7043      	strb	r3, [r0, #1]
 800443c:	e7df      	b.n	80043fe <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	e7f7      	b.n	8004432 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b05      	cmp	r3, #5
 8004446:	d809      	bhi.n	800445c <USBD_StdDevReq+0xd0>
 8004448:	e8df f003 	tbb	[pc, r3]
 800444c:	14100c03 	.word	0x14100c03
 8004450:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004452:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004456:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1cc      	bne.n	80043f6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff ff8a 	bl	8004376 <USBD_CtlError.constprop.1>
 8004462:	e7b4      	b.n	80043ce <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004464:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	e7f5      	b.n	8004458 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800446c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	e7f1      	b.n	8004458 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004474:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	e7ed      	b.n	8004458 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800447c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	e7e9      	b.n	8004458 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004484:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	e7e5      	b.n	8004458 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800448c:	7c03      	ldrb	r3, [r0, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e4      	bne.n	800445c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004492:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004496:	f10d 0006 	add.w	r0, sp, #6
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	4798      	blx	r3
 800449e:	e7ae      	b.n	80043fe <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044a0:	7c03      	ldrb	r3, [r0, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1da      	bne.n	800445c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80044a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044aa:	f10d 0006 	add.w	r0, sp, #6
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80044b2:	2307      	movs	r3, #7
 80044b4:	e7c1      	b.n	800443a <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80044b6:	888b      	ldrh	r3, [r1, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1cf      	bne.n	800445c <USBD_StdDevReq+0xd0>
 80044bc:	88cb      	ldrh	r3, [r1, #6]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1cc      	bne.n	800445c <USBD_StdDevReq+0xd0>
 80044c2:	884d      	ldrh	r5, [r1, #2]
 80044c4:	2d7f      	cmp	r5, #127	; 0x7f
 80044c6:	d8c9      	bhi.n	800445c <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d0c5      	beq.n	800445c <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80044d0:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80044d2:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80044d6:	f001 ff1d 	bl	8006314 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f98f 	bl	80047fe <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80044e0:	b11d      	cbz	r5, 80044ea <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80044e2:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80044e4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80044e8:	e771      	b.n	80043ce <USBD_StdDevReq+0x42>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e7fa      	b.n	80044e4 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 80044ee:	7889      	ldrb	r1, [r1, #2]
 80044f0:	4d37      	ldr	r5, [pc, #220]	; (80045d0 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044f2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80044f4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044f6:	d8b1      	bhi.n	800445c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80044f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d008      	beq.n	8004512 <USBD_StdDevReq+0x186>
 8004500:	2b03      	cmp	r3, #3
 8004502:	d014      	beq.n	800452e <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8004504:	f7ff ff37 	bl	8004376 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004508:	7829      	ldrb	r1, [r5, #0]
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff fe21 	bl	8004152 <USBD_ClrClassConfig>
 8004510:	e75d      	b.n	80043ce <USBD_StdDevReq+0x42>
        if (cfgidx)
 8004512:	2900      	cmp	r1, #0
 8004514:	d084      	beq.n	8004420 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8004516:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004518:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800451a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800451c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff fe0b 	bl	800413c <USBD_SetClassConfig>
 8004526:	2802      	cmp	r0, #2
 8004528:	f47f af7a 	bne.w	8004420 <USBD_StdDevReq+0x94>
 800452c:	e796      	b.n	800445c <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 800452e:	b931      	cbnz	r1, 800453e <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004530:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8004532:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004534:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8004538:	f7ff fe0b 	bl	8004152 <USBD_ClrClassConfig>
 800453c:	e770      	b.n	8004420 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 800453e:	6841      	ldr	r1, [r0, #4]
 8004540:	2901      	cmp	r1, #1
 8004542:	f43f af6d 	beq.w	8004420 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004546:	b2c9      	uxtb	r1, r1
 8004548:	f7ff fe03 	bl	8004152 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800454c:	7829      	ldrb	r1, [r5, #0]
 800454e:	6061      	str	r1, [r4, #4]
 8004550:	e7e6      	b.n	8004520 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8004552:	88ca      	ldrh	r2, [r1, #6]
 8004554:	2a01      	cmp	r2, #1
 8004556:	d181      	bne.n	800445c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8004558:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800455c:	2b00      	cmp	r3, #0
 800455e:	f43f af7d 	beq.w	800445c <USBD_StdDevReq+0xd0>
 8004562:	2b02      	cmp	r3, #2
 8004564:	d904      	bls.n	8004570 <USBD_StdDevReq+0x1e4>
 8004566:	2b03      	cmp	r3, #3
 8004568:	f47f af78 	bne.w	800445c <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800456c:	1d01      	adds	r1, r0, #4
 800456e:	e003      	b.n	8004578 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8004570:	4601      	mov	r1, r0
 8004572:	2300      	movs	r3, #0
 8004574:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004578:	4620      	mov	r0, r4
 800457a:	f000 f914 	bl	80047a6 <USBD_CtlSendData>
 800457e:	e726      	b.n	80043ce <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8004580:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004584:	3b01      	subs	r3, #1
 8004586:	2b02      	cmp	r3, #2
 8004588:	f63f af68 	bhi.w	800445c <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 800458c:	88cb      	ldrh	r3, [r1, #6]
 800458e:	2b02      	cmp	r3, #2
 8004590:	f47f af64 	bne.w	800445c <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004594:	2301      	movs	r3, #1
 8004596:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8004598:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800459c:	b10b      	cbz	r3, 80045a2 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800459e:	2303      	movs	r3, #3
 80045a0:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80045a2:	2202      	movs	r2, #2
 80045a4:	f104 010c 	add.w	r1, r4, #12
 80045a8:	e7e6      	b.n	8004578 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045aa:	884b      	ldrh	r3, [r1, #2]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f47f af0e 	bne.w	80043ce <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80045b2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80045b6:	e733      	b.n	8004420 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80045b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045bc:	3b01      	subs	r3, #1
 80045be:	2b02      	cmp	r3, #2
 80045c0:	f63f af4c 	bhi.w	800445c <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045c4:	884b      	ldrh	r3, [r1, #2]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	f47f af01 	bne.w	80043ce <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e7f0      	b.n	80045b2 <USBD_StdDevReq+0x226>
 80045d0:	20000384 	.word	0x20000384

080045d4 <USBD_StdItfReq>:
{
 80045d4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045d6:	780b      	ldrb	r3, [r1, #0]
{
 80045d8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045de:	2b20      	cmp	r3, #32
{
 80045e0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045e2:	d002      	beq.n	80045ea <USBD_StdItfReq+0x16>
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d000      	beq.n	80045ea <USBD_StdItfReq+0x16>
 80045e8:	b9ab      	cbnz	r3, 8004616 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80045ea:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80045ee:	3b01      	subs	r3, #1
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d810      	bhi.n	8004616 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80045f4:	792b      	ldrb	r3, [r5, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d80d      	bhi.n	8004616 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80045fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80045fe:	4629      	mov	r1, r5
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	4620      	mov	r0, r4
 8004604:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004606:	88eb      	ldrh	r3, [r5, #6]
 8004608:	b91b      	cbnz	r3, 8004612 <USBD_StdItfReq+0x3e>
 800460a:	b910      	cbnz	r0, 8004612 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 800460c:	4620      	mov	r0, r4
 800460e:	f000 f8f6 	bl	80047fe <USBD_CtlSendStatus>
}
 8004612:	2000      	movs	r0, #0
 8004614:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8004616:	4620      	mov	r0, r4
 8004618:	f7ff fead 	bl	8004376 <USBD_CtlError.constprop.1>
          break;
 800461c:	e7f9      	b.n	8004612 <USBD_StdItfReq+0x3e>

0800461e <USBD_StdEPReq>:
{
 800461e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004620:	780a      	ldrb	r2, [r1, #0]
{
 8004622:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004624:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004628:	2a20      	cmp	r2, #32
{
 800462a:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800462c:	d014      	beq.n	8004658 <USBD_StdEPReq+0x3a>
 800462e:	2a40      	cmp	r2, #64	; 0x40
 8004630:	d012      	beq.n	8004658 <USBD_StdEPReq+0x3a>
 8004632:	b96a      	cbnz	r2, 8004650 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8004634:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004636:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8004638:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 800463a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800463c:	d020      	beq.n	8004680 <USBD_StdEPReq+0x62>
 800463e:	d336      	bcc.n	80046ae <USBD_StdEPReq+0x90>
 8004640:	2a03      	cmp	r2, #3
 8004642:	d105      	bne.n	8004650 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8004644:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004648:	2a02      	cmp	r2, #2
 800464a:	d027      	beq.n	800469c <USBD_StdEPReq+0x7e>
 800464c:	2a03      	cmp	r2, #3
 800464e:	d00b      	beq.n	8004668 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff fe90 	bl	8004376 <USBD_CtlError.constprop.1>
              break;
 8004656:	e005      	b.n	8004664 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8004658:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800465c:	4619      	mov	r1, r3
 800465e:	6892      	ldr	r2, [r2, #8]
 8004660:	4620      	mov	r0, r4
 8004662:	4790      	blx	r2
}
 8004664:	2000      	movs	r0, #0
 8004666:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004668:	885a      	ldrh	r2, [r3, #2]
 800466a:	b92a      	cbnz	r2, 8004678 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 800466c:	064a      	lsls	r2, r1, #25
 800466e:	d003      	beq.n	8004678 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004670:	88db      	ldrh	r3, [r3, #6]
 8004672:	b90b      	cbnz	r3, 8004678 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 8004674:	f001 fe22 	bl	80062bc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f8c0 	bl	80047fe <USBD_CtlSendStatus>
              break;
 800467e:	e7f1      	b.n	8004664 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8004680:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004684:	2a02      	cmp	r2, #2
 8004686:	d009      	beq.n	800469c <USBD_StdEPReq+0x7e>
 8004688:	2a03      	cmp	r2, #3
 800468a:	d1e1      	bne.n	8004650 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800468c:	885b      	ldrh	r3, [r3, #2]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e8      	bne.n	8004664 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004692:	064d      	lsls	r5, r1, #25
 8004694:	d0f0      	beq.n	8004678 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004696:	f001 fe1f 	bl	80062d8 <USBD_LL_ClearStallEP>
 800469a:	e7ed      	b.n	8004678 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800469c:	064b      	lsls	r3, r1, #25
 800469e:	d0d7      	beq.n	8004650 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80046a0:	f001 fe0c 	bl	80062bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	4620      	mov	r0, r4
 80046a8:	f001 fe08 	bl	80062bc <USBD_LL_StallEP>
 80046ac:	e7da      	b.n	8004664 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80046ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d018      	beq.n	80046e8 <USBD_StdEPReq+0xca>
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d1ca      	bne.n	8004650 <USBD_StdEPReq+0x32>
 80046ba:	2314      	movs	r3, #20
 80046bc:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80046c0:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046c4:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80046c8:	d01f      	beq.n	800470a <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80046ca:	6992      	ldr	r2, [r2, #24]
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	d0bf      	beq.n	8004650 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80046d4:	fb05 3503 	mla	r5, r5, r3, r3
 80046d8:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80046da:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80046de:	d11f      	bne.n	8004720 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80046e0:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046e2:	2202      	movs	r2, #2
 80046e4:	4629      	mov	r1, r5
 80046e6:	e00c      	b.n	8004702 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80046e8:	064a      	lsls	r2, r1, #25
 80046ea:	d1b1      	bne.n	8004650 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046ec:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80046ee:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80046f2:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80046f6:	bf4c      	ite	mi
 80046f8:	f100 0114 	addmi.w	r1, r0, #20
 80046fc:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004700:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004702:	4620      	mov	r0, r4
 8004704:	f000 f84f 	bl	80047a6 <USBD_CtlSendData>
              break;
 8004708:	e7ac      	b.n	8004664 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800470a:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 800470e:	2a00      	cmp	r2, #0
 8004710:	d09e      	beq.n	8004650 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004712:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004716:	fb03 0505 	mla	r5, r3, r5, r0
 800471a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800471e:	e7dc      	b.n	80046da <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004720:	4620      	mov	r0, r4
 8004722:	f001 fde7 	bl	80062f4 <USBD_LL_IsStallEP>
 8004726:	b108      	cbz	r0, 800472c <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004728:	2301      	movs	r3, #1
 800472a:	e7d9      	b.n	80046e0 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 800472c:	6028      	str	r0, [r5, #0]
 800472e:	e7d8      	b.n	80046e2 <USBD_StdEPReq+0xc4>

08004730 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004730:	780b      	ldrb	r3, [r1, #0]
 8004732:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004734:	784b      	ldrb	r3, [r1, #1]
 8004736:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004738:	78ca      	ldrb	r2, [r1, #3]
 800473a:	788b      	ldrb	r3, [r1, #2]
 800473c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004740:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004742:	794a      	ldrb	r2, [r1, #5]
 8004744:	790b      	ldrb	r3, [r1, #4]
 8004746:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800474a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800474c:	79ca      	ldrb	r2, [r1, #7]
 800474e:	798b      	ldrb	r3, [r1, #6]
 8004750:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004754:	80c3      	strh	r3, [r0, #6]
}
 8004756:	4770      	bx	lr

08004758 <USBD_CtlError>:
{
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	f001 fdad 	bl	80062bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004762:	4620      	mov	r0, r4
}
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004768:	2100      	movs	r1, #0
 800476a:	f001 bda7 	b.w	80062bc <USBD_LL_StallEP>

0800476e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800476e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8004770:	b188      	cbz	r0, 8004796 <USBD_GetString+0x28>
 8004772:	4605      	mov	r5, r0
 8004774:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2c00      	cmp	r4, #0
 800477e:	d1f9      	bne.n	8004774 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004780:	3301      	adds	r3, #1
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004786:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004788:	2303      	movs	r3, #3
 800478a:	704b      	strb	r3, [r1, #1]
 800478c:	2302      	movs	r3, #2
 800478e:	3801      	subs	r0, #1
    while (*desc != '\0')
 8004790:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004794:	b905      	cbnz	r5, 8004798 <USBD_GetString+0x2a>
}
 8004796:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	54cd      	strb	r5, [r1, r3]
 800479c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800479e:	3302      	adds	r3, #2
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	548c      	strb	r4, [r1, r2]
 80047a4:	e7f4      	b.n	8004790 <USBD_GetString+0x22>

080047a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80047a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047a8:	2202      	movs	r2, #2
{
 80047aa:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047ac:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80047b0:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047b4:	460a      	mov	r2, r1
 80047b6:	2100      	movs	r1, #0
 80047b8:	f001 fdba 	bl	8006330 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047bc:	2000      	movs	r0, #0
 80047be:	bd10      	pop	{r4, pc}

080047c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80047c0:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80047c2:	4613      	mov	r3, r2
 80047c4:	460a      	mov	r2, r1
 80047c6:	2100      	movs	r1, #0
 80047c8:	f001 fdb2 	bl	8006330 <USBD_LL_Transmit>

  return USBD_OK;
}
 80047cc:	2000      	movs	r0, #0
 80047ce:	bd08      	pop	{r3, pc}

080047d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80047d0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047d2:	2203      	movs	r2, #3
{
 80047d4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80047d6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80047da:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047de:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80047e0:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047e4:	2100      	movs	r1, #0
 80047e6:	f001 fdb1 	bl	800634c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80047ea:	2000      	movs	r0, #0
 80047ec:	bd10      	pop	{r4, pc}

080047ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80047ee:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80047f0:	4613      	mov	r3, r2
 80047f2:	460a      	mov	r2, r1
 80047f4:	2100      	movs	r1, #0
 80047f6:	f001 fda9 	bl	800634c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80047fa:	2000      	movs	r0, #0
 80047fc:	bd08      	pop	{r3, pc}

080047fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80047fe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004800:	2304      	movs	r3, #4
 8004802:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004806:	2300      	movs	r3, #0
 8004808:	461a      	mov	r2, r3
 800480a:	4619      	mov	r1, r3
 800480c:	f001 fd90 	bl	8006330 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004810:	2000      	movs	r0, #0
 8004812:	bd08      	pop	{r3, pc}

08004814 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004814:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004816:	2305      	movs	r3, #5
 8004818:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800481c:	2300      	movs	r3, #0
 800481e:	461a      	mov	r2, r3
 8004820:	4619      	mov	r1, r3
 8004822:	f001 fd93 	bl	800634c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004826:	2000      	movs	r0, #0
 8004828:	bd08      	pop	{r3, pc}

0800482a <SX1278_hw_SetNSS>:
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800482a:	1e4b      	subs	r3, r1, #1
 800482c:	425a      	negs	r2, r3
 800482e:	8a01      	ldrh	r1, [r0, #16]
 8004830:	415a      	adcs	r2, r3
 8004832:	6940      	ldr	r0, [r0, #20]
 8004834:	f7fc bf46 	b.w	80016c4 <HAL_GPIO_WritePin>

08004838 <SX1278_hw_init>:
__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t * hw) {
 8004838:	b510      	push	{r4, lr}
 800483a:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 800483c:	2101      	movs	r1, #1
 800483e:	f7ff fff4 	bl	800482a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004842:	8821      	ldrh	r1, [r4, #0]
 8004844:	6860      	ldr	r0, [r4, #4]
 8004846:	2201      	movs	r2, #1
}
 8004848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800484c:	f7fc bf3a 	b.w	80016c4 <HAL_GPIO_WritePin>

08004850 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8004850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	ac02      	add	r4, sp, #8
 8004856:	f804 1d01 	strb.w	r1, [r4, #-1]!
	SX1278_hw_SetNSS(hw, 0);
 800485a:	2100      	movs	r1, #0
 800485c:	f7ff ffe5 	bl	800482a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004860:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004864:	2201      	movs	r2, #1
 8004866:	4621      	mov	r1, r4
 8004868:	69a8      	ldr	r0, [r5, #24]
 800486a:	f7fe fc23 	bl	80030b4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800486e:	69a8      	ldr	r0, [r5, #24]
 8004870:	f7fe fe36 	bl	80034e0 <HAL_SPI_GetState>
 8004874:	2801      	cmp	r0, #1
 8004876:	d1fa      	bne.n	800486e <SX1278_hw_SPICommand+0x1e>
		;
}
 8004878:	b003      	add	sp, #12
 800487a:	bd30      	pop	{r4, r5, pc}

0800487c <SX1278_SPIBurstWrite.part.1>:
		}
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	460d      	mov	r5, r1
 8004880:	4606      	mov	r6, r0
 8004882:	461f      	mov	r7, r3
		uint8_t length) {
	unsigned char i;
	if (length <= 1) {
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004884:	2100      	movs	r1, #0
 8004886:	6800      	ldr	r0, [r0, #0]
void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 8004888:	4614      	mov	r4, r2
		SX1278_hw_SetNSS(module->hw, 0);
 800488a:	f7ff ffce 	bl	800482a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800488e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8004892:	6830      	ldr	r0, [r6, #0]
 8004894:	f7ff ffdc 	bl	8004850 <SX1278_hw_SPICommand>
 8004898:	3f01      	subs	r7, #1
 800489a:	1e65      	subs	r5, r4, #1
 800489c:	443c      	add	r4, r7
		for (i = 0; i < length; i++) {
 800489e:	42a5      	cmp	r5, r4
 80048a0:	6830      	ldr	r0, [r6, #0]
 80048a2:	d103      	bne.n	80048ac <SX1278_SPIBurstWrite.part.1+0x30>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80048a4:	2101      	movs	r1, #1
 80048a6:	f7ff ffc0 	bl	800482a <SX1278_hw_SetNSS>
	}
}
 80048aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80048ac:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80048b0:	f7ff ffce 	bl	8004850 <SX1278_hw_SPICommand>
 80048b4:	e7f3      	b.n	800489e <SX1278_SPIBurstWrite.part.1+0x22>

080048b6 <SX1278_hw_SPIReadByte>:
	uint8_t txByte = 0x00;
 80048b6:	2100      	movs	r1, #0
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80048b8:	b530      	push	{r4, r5, lr}
 80048ba:	b085      	sub	sp, #20
	uint8_t rxByte = 0x00;
 80048bc:	ac04      	add	r4, sp, #16
 80048be:	f804 1d01 	strb.w	r1, [r4, #-1]!
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 80048c2:	4605      	mov	r5, r0
	uint8_t txByte = 0x00;
 80048c4:	f88d 100e 	strb.w	r1, [sp, #14]
	SX1278_hw_SetNSS(hw, 0);
 80048c8:	f7ff ffaf 	bl	800482a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80048cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d0:	4622      	mov	r2, r4
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	f10d 010e 	add.w	r1, sp, #14
 80048d8:	2301      	movs	r3, #1
 80048da:	69a8      	ldr	r0, [r5, #24]
 80048dc:	f7fe fc93 	bl	8003206 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80048e0:	69a8      	ldr	r0, [r5, #24]
 80048e2:	f7fe fdfd 	bl	80034e0 <HAL_SPI_GetState>
 80048e6:	2801      	cmp	r0, #1
 80048e8:	d1fa      	bne.n	80048e0 <SX1278_hw_SPIReadByte+0x2a>
}
 80048ea:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80048ee:	b005      	add	sp, #20
 80048f0:	bd30      	pop	{r4, r5, pc}

080048f2 <SX1278_hw_DelayMs>:
	HAL_Delay(msec);
 80048f2:	f7fc bb03 	b.w	8000efc <HAL_Delay>

080048f6 <SX1278_hw_Reset>:
__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80048f6:	b510      	push	{r4, lr}
 80048f8:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80048fa:	2101      	movs	r1, #1
 80048fc:	f7ff ff95 	bl	800482a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8004900:	8821      	ldrh	r1, [r4, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	6860      	ldr	r0, [r4, #4]
 8004906:	f7fc fedd 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(1);
 800490a:	2001      	movs	r0, #1
 800490c:	f7ff fff1 	bl	80048f2 <SX1278_hw_DelayMs>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8004910:	6860      	ldr	r0, [r4, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	8821      	ldrh	r1, [r4, #0]
 8004916:	f7fc fed5 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(100);
 800491a:	2064      	movs	r0, #100	; 0x64
 800491c:	f7ff ffe9 	bl	80048f2 <SX1278_hw_DelayMs>
}
 8004920:	bd10      	pop	{r4, pc}

08004922 <SX1278_hw_GetDIO0>:
__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8004922:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8004924:	8901      	ldrh	r1, [r0, #8]
 8004926:	68c0      	ldr	r0, [r0, #12]
 8004928:	f7fc fec6 	bl	80016b8 <HAL_GPIO_ReadPin>
}
 800492c:	1e43      	subs	r3, r0, #1
 800492e:	4258      	negs	r0, r3
 8004930:	4158      	adcs	r0, r3
 8004932:	bd08      	pop	{r3, pc}

08004934 <SX1278_SPIRead>:
uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4604      	mov	r4, r0
	SX1278_hw_SPICommand(module->hw, addr);
 8004938:	6800      	ldr	r0, [r0, #0]
 800493a:	f7ff ff89 	bl	8004850 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800493e:	6820      	ldr	r0, [r4, #0]
 8004940:	f7ff ffb9 	bl	80048b6 <SX1278_hw_SPIReadByte>
 8004944:	4605      	mov	r5, r0
	SX1278_hw_SetNSS(module->hw, 1);
 8004946:	2101      	movs	r1, #1
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	f7ff ff6e 	bl	800482a <SX1278_hw_SetNSS>
}
 800494e:	4628      	mov	r0, r5
 8004950:	bd38      	pop	{r3, r4, r5, pc}

08004952 <SX1278_SPIWrite>:
void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8004952:	b570      	push	{r4, r5, r6, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	460e      	mov	r6, r1
 8004958:	4615      	mov	r5, r2
	SX1278_hw_SetNSS(module->hw, 0);
 800495a:	2100      	movs	r1, #0
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f7ff ff64 	bl	800482a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8004962:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	f7ff ff72 	bl	8004850 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800496c:	4629      	mov	r1, r5
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	f7ff ff6e 	bl	8004850 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8004974:	2101      	movs	r1, #1
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	f7ff ff57 	bl	800482a <SX1278_hw_SetNSS>
}
 800497c:	bd70      	pop	{r4, r5, r6, pc}

0800497e <SX1278_SPIBurstRead>:
	if (length <= 1) {
 800497e:	2b01      	cmp	r3, #1
		uint8_t length) {
 8004980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	460f      	mov	r7, r1
 8004986:	4616      	mov	r6, r2
 8004988:	461c      	mov	r4, r3
	if (length <= 1) {
 800498a:	d916      	bls.n	80049ba <SX1278_SPIBurstRead+0x3c>
		SX1278_hw_SetNSS(module->hw, 0);
 800498c:	2100      	movs	r1, #0
 800498e:	6800      	ldr	r0, [r0, #0]
 8004990:	f7ff ff4b 	bl	800482a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8004994:	4639      	mov	r1, r7
 8004996:	6828      	ldr	r0, [r5, #0]
 8004998:	f7ff ff5a 	bl	8004850 <SX1278_hw_SPICommand>
 800499c:	3c01      	subs	r4, #1
 800499e:	b2e4      	uxtb	r4, r4
 80049a0:	1e77      	subs	r7, r6, #1
 80049a2:	4434      	add	r4, r6
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80049a4:	6828      	ldr	r0, [r5, #0]
 80049a6:	f7ff ff86 	bl	80048b6 <SX1278_hw_SPIReadByte>
 80049aa:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++) {
 80049ae:	42a7      	cmp	r7, r4
 80049b0:	d1f8      	bne.n	80049a4 <SX1278_SPIBurstRead+0x26>
		SX1278_hw_SetNSS(module->hw, 1);
 80049b2:	2101      	movs	r1, #1
 80049b4:	6828      	ldr	r0, [r5, #0]
 80049b6:	f7ff ff38 	bl	800482a <SX1278_hw_SetNSS>
}
 80049ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049bc <SX1278_standby>:
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
	module->readBytes = 0;
	SX1278_standby(module); //Entry standby mode
}

void SX1278_standby(SX1278_t * module) {
 80049bc:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80049be:	2209      	movs	r2, #9
 80049c0:	2101      	movs	r1, #1
void SX1278_standby(SX1278_t * module) {
 80049c2:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80049c4:	f7ff ffc5 	bl	8004952 <SX1278_SPIWrite>
	module->status = STANDBY;
 80049c8:	2301      	movs	r3, #1
 80049ca:	7523      	strb	r3, [r4, #20]
}
 80049cc:	bd10      	pop	{r4, pc}

080049ce <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80049ce:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80049d0:	2208      	movs	r2, #8
 80049d2:	2101      	movs	r1, #1
void SX1278_sleep(SX1278_t * module) {
 80049d4:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80049d6:	f7ff ffbc 	bl	8004952 <SX1278_SPIWrite>
	module->status = SLEEP;
 80049da:	2300      	movs	r3, #0
 80049dc:	7523      	strb	r3, [r4, #20]
}
 80049de:	bd10      	pop	{r4, pc}

080049e0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80049e0:	2288      	movs	r2, #136	; 0x88
 80049e2:	2101      	movs	r1, #1
 80049e4:	f7ff bfb5 	b.w	8004952 <SX1278_SPIWrite>

080049e8 <SX1278_config>:
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80049e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049ea:	4604      	mov	r4, r0
 80049ec:	461d      	mov	r5, r3
 80049ee:	4616      	mov	r6, r2
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80049f0:	f7ff ffed 	bl	80049ce <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80049f4:	200f      	movs	r0, #15
 80049f6:	f7ff ff7c 	bl	80048f2 <SX1278_hw_DelayMs>
	SX1278_entryLoRa(module);
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff fff0 	bl	80049e0 <SX1278_entryLoRa>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004a00:	04e9      	lsls	r1, r5, #19
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <SX1278_config+0x10c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	04f0      	lsls	r0, r6, #19
 8004a08:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 8004a0c:	f7fc f8ac 	bl	8000b68 <__aeabi_uldivmod>
	Frequency_to_device[0] = (uint8_t)(frf >> 16);
 8004a10:	0c03      	lsrs	r3, r0, #16
 8004a12:	f88d 3004 	strb.w	r3, [sp, #4]
	Frequency_to_device[1] = (uint8_t)(frf >> 8);
 8004a16:	0a03      	lsrs	r3, r0, #8
 8004a18:	f88d 3005 	strb.w	r3, [sp, #5]
	Frequency_to_device[2] = (uint8_t)(frf >> 0);
 8004a1c:	f88d 0006 	strb.w	r0, [sp, #6]
 8004a20:	2303      	movs	r3, #3
 8004a22:	aa01      	add	r2, sp, #4
 8004a24:	2106      	movs	r1, #6
 8004a26:	4620      	mov	r0, r4
 8004a28:	f7ff ff28 	bl	800487c <SX1278_SPIBurstWrite.part.1>
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8004a2c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004a30:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <SX1278_config+0x110>)
 8004a32:	2109      	movs	r1, #9
 8004a34:	5cd2      	ldrb	r2, [r2, r3]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f7ff ff8b 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8004a3c:	220b      	movs	r2, #11
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4611      	mov	r1, r2
 8004a42:	f7ff ff86 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8004a46:	2223      	movs	r2, #35	; 0x23
 8004a48:	210c      	movs	r1, #12
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff ff81 	bl	8004952 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8004a50:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <SX1278_config+0x114>)
 8004a56:	5cd5      	ldrb	r5, [r2, r3]
 8004a58:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004a5c:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <SX1278_config+0x118>)
 8004a5e:	2d06      	cmp	r5, #6
 8004a60:	5cd2      	ldrb	r2, [r2, r3]
 8004a62:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	d137      	bne.n	8004ada <SX1278_config+0xf2>
		SX1278_SPIWrite(module,
 8004a6a:	3203      	adds	r2, #3
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	211d      	movs	r1, #29
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff ff6e 	bl	8004952 <SX1278_SPIWrite>
		SX1278_SPIWrite(module,
 8004a76:	2267      	movs	r2, #103	; 0x67
 8004a78:	211e      	movs	r1, #30
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7ff ff69 	bl	8004952 <SX1278_SPIWrite>
		tmp = SX1278_SPIRead(module, 0x31);
 8004a80:	2131      	movs	r1, #49	; 0x31
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7ff ff56 	bl	8004934 <SX1278_SPIRead>
		tmp &= 0xF8;
 8004a88:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		SX1278_SPIWrite(module, 0x31, tmp);
 8004a8c:	f042 0205 	orr.w	r2, r2, #5
 8004a90:	2131      	movs	r1, #49	; 0x31
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff ff5d 	bl	8004952 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8004a98:	220c      	movs	r2, #12
 8004a9a:	2137      	movs	r1, #55	; 0x37
		SX1278_SPIWrite(module,
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ff58 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	211f      	movs	r1, #31
 8004aa8:	f7ff ff53 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8004aac:	4620      	mov	r0, r4
 8004aae:	2200      	movs	r2, #0
 8004ab0:	2120      	movs	r1, #32
 8004ab2:	f7ff ff4e 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	220c      	movs	r2, #12
 8004aba:	2121      	movs	r1, #33	; 0x21
 8004abc:	f7ff ff49 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2141      	movs	r1, #65	; 0x41
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff ff44 	bl	8004952 <SX1278_SPIWrite>
	module->readBytes = 0;
 8004aca:	2300      	movs	r3, #0
	SX1278_standby(module); //Entry standby mode
 8004acc:	4620      	mov	r0, r4
	module->readBytes = 0;
 8004ace:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
	SX1278_standby(module); //Entry standby mode
 8004ad2:	f7ff ff73 	bl	80049bc <SX1278_standby>
}
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd70      	pop	{r4, r5, r6, pc}
		SX1278_SPIWrite(module,
 8004ada:	3202      	adds	r2, #2
 8004adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ae0:	211d      	movs	r1, #29
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff ff35 	bl	8004952 <SX1278_SPIWrite>
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8004ae8:	012a      	lsls	r2, r5, #4
		SX1278_SPIWrite(module,
 8004aea:	3207      	adds	r2, #7
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	211e      	movs	r1, #30
 8004af0:	e7d4      	b.n	8004a9c <SX1278_config+0xb4>
 8004af2:	bf00      	nop
 8004af4:	01e84800 	.word	0x01e84800
 8004af8:	0800b23e 	.word	0x0800b23e
 8004afc:	0800b242 	.word	0x0800b242
 8004b00:	0800b234 	.word	0x0800b234

08004b04 <SX1278_defaultConfig>:
void SX1278_defaultConfig(SX1278_t * module) {
 8004b04:	b530      	push	{r4, r5, lr}
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8004b06:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 8004b0a:	7c82      	ldrb	r2, [r0, #18]
void SX1278_defaultConfig(SX1278_t * module) {
 8004b0c:	b085      	sub	sp, #20
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8004b0e:	7c03      	ldrb	r3, [r0, #16]
 8004b10:	9202      	str	r2, [sp, #8]
 8004b12:	7c42      	ldrb	r2, [r0, #17]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	9201      	str	r2, [sp, #4]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	f7ff ff64 	bl	80049e8 <SX1278_config>
}
 8004b20:	b005      	add	sp, #20
 8004b22:	bd30      	pop	{r4, r5, pc}

08004b24 <SX1278_clearLoRaIrq>:
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	2112      	movs	r1, #18
 8004b28:	f7ff bf13 	b.w	8004952 <SX1278_SPIWrite>

08004b2c <SX1278_LoRaEntryRx>:
}

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	460e      	mov	r6, r1
	uint8_t addr;

	module->packetLength = length;
 8004b32:	74e1      	strb	r1, [r4, #19]
int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8004b34:	4615      	mov	r5, r2

	SX1278_defaultConfig(module);		//Setting base parameter
 8004b36:	f7ff ffe5 	bl	8004b04 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004b3a:	2284      	movs	r2, #132	; 0x84
 8004b3c:	214d      	movs	r1, #77	; 0x4d
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff ff07 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8004b44:	22ff      	movs	r2, #255	; 0xff
 8004b46:	2124      	movs	r1, #36	; 0x24
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff ff02 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2140      	movs	r1, #64	; 0x40
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7ff fefd 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8004b58:	223f      	movs	r2, #63	; 0x3f
 8004b5a:	2111      	movs	r1, #17
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff fef8 	bl	8004952 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff ffde 	bl	8004b24 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8004b68:	4632      	mov	r2, r6
 8004b6a:	2122      	movs	r1, #34	; 0x22
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff fef0 	bl	8004952 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004b72:	210f      	movs	r1, #15
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff fedd 	bl	8004934 <SX1278_SPIRead>
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004b7a:	210d      	movs	r1, #13
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7ff fee7 	bl	8004952 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8004b84:	228d      	movs	r2, #141	; 0x8d
 8004b86:	2101      	movs	r1, #1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7ff fee2 	bl	8004952 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8004b94:	2118      	movs	r1, #24
 8004b96:	4620      	mov	r0, r4
 8004b98:	f7ff fecc 	bl	8004934 <SX1278_SPIRead>
 8004b9c:	0743      	lsls	r3, r0, #29
 8004b9e:	d503      	bpl.n	8004ba8 <SX1278_LoRaEntryRx+0x7c>
			module->status = RX;
 8004ba0:	2303      	movs	r3, #3
			return 1;
 8004ba2:	2001      	movs	r0, #1
			module->status = RX;
 8004ba4:	7523      	strb	r3, [r4, #20]
			SX1278_defaultConfig(module);
			return 0;
		}
		SX1278_hw_DelayMs(1);
	}
}
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
		if (--timeout == 0) {
 8004ba8:	3d01      	subs	r5, #1
 8004baa:	d107      	bne.n	8004bbc <SX1278_LoRaEntryRx+0x90>
			SX1278_hw_Reset(module->hw);
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	f7ff fea2 	bl	80048f6 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7ff ffa6 	bl	8004b04 <SX1278_defaultConfig>
			return 0;
 8004bb8:	4628      	mov	r0, r5
 8004bba:	e7f4      	b.n	8004ba6 <SX1278_LoRaEntryRx+0x7a>
		SX1278_hw_DelayMs(1);
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f7ff fe98 	bl	80048f2 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8004bc2:	e7e7      	b.n	8004b94 <SX1278_LoRaEntryRx+0x68>

08004bc4 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8004bc8:	6800      	ldr	r0, [r0, #0]
 8004bca:	f7ff feaa 	bl	8004922 <SX1278_hw_GetDIO0>
 8004bce:	b1f0      	cbz	r0, 8004c0e <SX1278_LoRaRxPacket+0x4a>
	//if (1) {
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8004bd0:	f104 0615 	add.w	r6, r4, #21
 8004bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f001 fcd6 	bl	800658c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004be0:	2110      	movs	r1, #16
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff fea6 	bl	8004934 <SX1278_SPIRead>
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004be8:	210d      	movs	r1, #13
 8004bea:	4602      	mov	r2, r0
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7ff feb0 	bl	8004952 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004bf2:	7c63      	ldrb	r3, [r4, #17]
 8004bf4:	b973      	cbnz	r3, 8004c14 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8004bf6:	7ce5      	ldrb	r5, [r4, #19]
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f7ff febd 	bl	800497e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8004c04:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
		SX1278_clearLoRaIrq(module);
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f7ff ff8b 	bl	8004b24 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
}
 8004c0e:	f894 0115 	ldrb.w	r0, [r4, #277]	; 0x115
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004c14:	2113      	movs	r1, #19
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff fe8c 	bl	8004934 <SX1278_SPIRead>
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	e7eb      	b.n	8004bf8 <SX1278_LoRaRxPacket+0x34>

08004c20 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4604      	mov	r4, r0
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	f89d a020 	ldrb.w	sl, [sp, #32]
 8004c2e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8004c32:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8004c36:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	SX1278_hw_init(module->hw);
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	f7ff fdfc 	bl	8004838 <SX1278_hw_init>
	module->frequency = frequency;
 8004c40:	e9c4 8902 	strd	r8, r9, [r4, #8]
	module->power = power;
 8004c44:	f884 a010 	strb.w	sl, [r4, #16]
	module->LoRa_Rate = LoRa_Rate;
 8004c48:	7467      	strb	r7, [r4, #17]
	module->LoRa_BW = LoRa_BW;
 8004c4a:	74a6      	strb	r6, [r4, #18]
	module->packetLength = packetLength;
 8004c4c:	74e5      	strb	r5, [r4, #19]
	SX1278_defaultConfig(module);
 8004c4e:	4620      	mov	r0, r4
}
 8004c50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SX1278_defaultConfig(module);
 8004c54:	f7ff bf56 	b.w	8004b04 <SX1278_defaultConfig>

08004c58 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	460e      	mov	r6, r1
	if (length != module->readBytes)
 8004c5c:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8004c60:	4605      	mov	r5, r0
		length = module->readBytes;
	memcpy(rxBuf, module->rxBuffer, length);
 8004c62:	f100 0115 	add.w	r1, r0, #21
 8004c66:	4622      	mov	r2, r4
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f001 fc6b 	bl	8006544 <memcpy>
	rxBuf[length] = '\0';
 8004c6e:	2300      	movs	r3, #0
	module->readBytes = 0;
	return length;
}
 8004c70:	4620      	mov	r0, r4
	rxBuf[length] = '\0';
 8004c72:	5533      	strb	r3, [r6, r4]
	module->readBytes = 0;
 8004c74:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 8004c78:	bd70      	pop	{r4, r5, r6, pc}

08004c7a <SX1278_SNR_LoRa>:

uint8_t SX1278_SNR_LoRa(SX1278_t * module) {
 8004c7a:	b508      	push	{r3, lr}
	uint32_t temp = 10;
	temp = SX1278_SPIRead(module, LR_RegPktSnrValue); //Read RegRssiValue, Snr value
 8004c7c:	2119      	movs	r1, #25
 8004c7e:	f7ff fe59 	bl	8004934 <SX1278_SPIRead>
	temp /= 4;
	return (uint8_t) temp;
}
 8004c82:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8004c86:	bd08      	pop	{r3, pc}

08004c88 <SX1278_RSSI_LoRa>:

uint8_t SX1278_RSSI_LoRa(SX1278_t * module) {
	uint32_t temp = 10;
	temp = SX1278_SPIRead(module, LR_RegRssiValue); //Read RegRssiValue, Rssi value
 8004c88:	211b      	movs	r1, #27
 8004c8a:	f7ff be53 	b.w	8004934 <SX1278_SPIRead>
	...

08004c90 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004c90:	4811      	ldr	r0, [pc, #68]	; (8004cd8 <MX_ADC1_Init+0x48>)
 8004c92:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <MX_ADC1_Init+0x4c>)
{
 8004c94:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c96:	2400      	movs	r4, #0
  hadc1.Instance = ADC1;
 8004c98:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8004c9a:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c9c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 8004ca0:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004ca2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004ca6:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004ca8:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004caa:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cac:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cae:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004cb0:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004cb2:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004cb4:	f7fc faec 	bl	8001290 <HAL_ADC_Init>
 8004cb8:	b108      	cbz	r0, 8004cbe <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 8004cba:	f000 fb09 	bl	80052d0 <Error_Handler>
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cbe:	a901      	add	r1, sp, #4
 8004cc0:	4805      	ldr	r0, [pc, #20]	; (8004cd8 <MX_ADC1_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cc2:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004cc6:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cc8:	f7fc f9a4 	bl	8001014 <HAL_ADC_ConfigChannel>
 8004ccc:	b108      	cbz	r0, 8004cd2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8004cce:	f000 faff 	bl	80052d0 <Error_Handler>
  }

}
 8004cd2:	b005      	add	sp, #20
 8004cd4:	bd30      	pop	{r4, r5, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200009c4 	.word	0x200009c4
 8004cdc:	40012400 	.word	0x40012400

08004ce0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	2100      	movs	r1, #0
 8004cea:	a802      	add	r0, sp, #8
 8004cec:	f001 fc4e 	bl	800658c <memset>
  if(adcHandle->Instance==ADC1)
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <HAL_ADC_MspInit+0x64>)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d123      	bne.n	8004d40 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004cf8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004cfc:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8004cfe:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	619a      	str	r2, [r3, #24]
 8004d06:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8004d08:	480f      	ldr	r0, [pc, #60]	; (8004d48 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d0a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004d0e:	9200      	str	r2, [sp, #0]
 8004d10:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	f042 0204 	orr.w	r2, r2, #4
 8004d18:	619a      	str	r2, [r3, #24]
 8004d1a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d1c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8004d2c:	f7fc fbe4 	bl	80014f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2012      	movs	r0, #18
 8004d34:	4611      	mov	r1, r2
 8004d36:	f7fc fb3f 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d3a:	2012      	movs	r0, #18
 8004d3c:	f7fc fb70 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004d40:	b006      	add	sp, #24
 8004d42:	bd10      	pop	{r4, pc}
 8004d44:	40012400 	.word	0x40012400
 8004d48:	40010800 	.word	0x40010800

08004d4c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4c:	2210      	movs	r2, #16
{
 8004d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d54:	eb0d 0002 	add.w	r0, sp, r2
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f001 fc17 	bl	800658c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d5e:	4b3c      	ldr	r3, [pc, #240]	; (8004e50 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d60:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8004e5c <MX_GPIO_Init+0x110>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d64:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8004d66:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8004e60 <MX_GPIO_Init+0x114>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6a:	f042 0210 	orr.w	r2, r2, #16
 8004d6e:	619a      	str	r2, [r3, #24]
 8004d70:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8004d72:	4d38      	ldr	r5, [pc, #224]	; (8004e54 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d74:	f002 0210 	and.w	r2, r2, #16
 8004d78:	9200      	str	r2, [sp, #0]
 8004d7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d7c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d7e:	4648      	mov	r0, r9
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d80:	f042 0220 	orr.w	r2, r2, #32
 8004d84:	619a      	str	r2, [r3, #24]
 8004d86:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d8c:	f002 0220 	and.w	r2, r2, #32
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d94:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d98:	f042 0204 	orr.w	r2, r2, #4
 8004d9c:	619a      	str	r2, [r3, #24]
 8004d9e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da2:	f002 0204 	and.w	r2, r2, #4
 8004da6:	9202      	str	r2, [sp, #8]
 8004da8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004daa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dac:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]
 8004db4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004db6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004dc0:	f7fc fc80 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f248 0102 	movw	r1, #32770	; 0x8002
 8004dcc:	f7fc fc7a 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	2181      	movs	r1, #129	; 0x81
 8004dd6:	f7fc fc75 	bl	80016c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004dde:	a904      	add	r1, sp, #16
 8004de0:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de2:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de6:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004dea:	f7fc fb85 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|CS_RF_Pin;
 8004dee:	f248 0302 	movw	r3, #32770	; 0x8002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df2:	a904      	add	r1, sp, #16
 8004df4:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004df6:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dfe:	f7fc fb7b 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RST_RF_Pin|D_C_Pin;
 8004e02:	2381      	movs	r3, #129	; 0x81
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e04:	a904      	add	r1, sp, #16
 8004e06:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e08:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0c:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e10:	f7fc fb72 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_Pin|FIRE_Pin;
 8004e14:	2342      	movs	r3, #66	; 0x42
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e16:	a904      	add	r1, sp, #16
 8004e18:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e20:	f7fc fb6a 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DO_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e28:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e32:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8004e34:	f7fc fb60 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	2028      	movs	r0, #40	; 0x28
 8004e3e:	f7fc fabb 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e42:	2028      	movs	r0, #40	; 0x28
 8004e44:	f7fc faec 	bl	8001420 <HAL_NVIC_EnableIRQ>

}
 8004e48:	b009      	add	sp, #36	; 0x24
 8004e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40010c00 	.word	0x40010c00
 8004e58:	10110000 	.word	0x10110000
 8004e5c:	40011000 	.word	0x40011000
 8004e60:	40010800 	.word	0x40010800

08004e64 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004e64:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004e66:	480b      	ldr	r0, [pc, #44]	; (8004e94 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 8004e68:	4a0b      	ldr	r2, [pc, #44]	; (8004e98 <MX_I2C2_Init+0x34>)
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <MX_I2C2_Init+0x38>)
 8004e6c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e70:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8004e76:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e7a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e7e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e82:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004e84:	f7fc fd54 	bl	8001930 <HAL_I2C_Init>
 8004e88:	b118      	cbz	r0, 8004e92 <MX_I2C2_Init+0x2e>
  {
    Error_Handler();
  }

}
 8004e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004e8e:	f000 ba1f 	b.w	80052d0 <Error_Handler>
}
 8004e92:	bd08      	pop	{r3, pc}
 8004e94:	200009f4 	.word	0x200009f4
 8004e98:	40005800 	.word	0x40005800
 8004e9c:	000186a0 	.word	0x000186a0

08004ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	a802      	add	r0, sp, #8
 8004eac:	f001 fb6e 	bl	800658c <memset>
  if(i2cHandle->Instance==I2C2)
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_I2C_MspInit+0x58>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d11d      	bne.n	8004ef4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb8:	4c10      	ldr	r4, [pc, #64]	; (8004efc <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eba:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ebe:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	f043 0308 	orr.w	r3, r3, #8
 8004ec6:	61a3      	str	r3, [r4, #24]
 8004ec8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eca:	480d      	ldr	r0, [pc, #52]	; (8004f00 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ed4:	2312      	movs	r3, #18
 8004ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eda:	2303      	movs	r3, #3
 8004edc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ede:	f7fc fb0b 	bl	80014f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ee2:	69e3      	ldr	r3, [r4, #28]
 8004ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ee8:	61e3      	str	r3, [r4, #28]
 8004eea:	69e3      	ldr	r3, [r4, #28]
 8004eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004ef4:	b006      	add	sp, #24
 8004ef6:	bd10      	pop	{r4, pc}
 8004ef8:	40005800 	.word	0x40005800
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40010c00 	.word	0x40010c00

08004f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f04:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f06:	2414      	movs	r4, #20
{
 8004f08:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	a80c      	add	r0, sp, #48	; 0x30
 8004f10:	f001 fb3c 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f14:	4622      	mov	r2, r4
 8004f16:	eb0d 0004 	add.w	r0, sp, r4
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	f001 fb36 	bl	800658c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f20:	2100      	movs	r1, #0
 8004f22:	2210      	movs	r2, #16
 8004f24:	a801      	add	r0, sp, #4
 8004f26:	f001 fb31 	bl	800658c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f2a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f30:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f32:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004f3a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f40:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f42:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f46:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f48:	f7fd fa04 	bl	8002354 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f4c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f4e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f50:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f58:	4629      	mov	r1, r5
 8004f5a:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f5c:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f60:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f62:	f7fd fbcf 	bl	8002704 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f66:	2113      	movs	r1, #19
 8004f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f6c:	e9cd 1301 	strd	r1, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f74:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8004f76:	e9cd 3403 	strd	r3, r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f7a:	f7fd fc7f 	bl	800287c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004f7e:	b015      	add	sp, #84	; 0x54
 8004f80:	bd30      	pop	{r4, r5, pc}
	...

08004f84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == DO_RF_Pin){
 8004f84:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8004f88:	b508      	push	{r3, lr}
	if(GPIO_Pin == DO_RF_Pin){
 8004f8a:	d114      	bne.n	8004fb6 <HAL_GPIO_EXTI_Callback+0x32>
			ret = SX1278_LoRaRxPacket(&SX1278);
 8004f8c:	480a      	ldr	r0, [pc, #40]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0x34>)
 8004f8e:	f7ff fe19 	bl	8004bc4 <SX1278_LoRaRxPacket>
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <HAL_GPIO_EXTI_Callback+0x38>)
 8004f94:	4602      	mov	r2, r0
 8004f96:	6018      	str	r0, [r3, #0]
				 	if (ret > 0) {
 8004f98:	b130      	cbz	r0, 8004fa8 <HAL_GPIO_EXTI_Callback+0x24>
				 		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8004f9a:	4909      	ldr	r1, [pc, #36]	; (8004fc0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004f9c:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <HAL_GPIO_EXTI_Callback+0x34>)
 8004f9e:	f7ff fe5b 	bl	8004c58 <SX1278_read>
					 	//printf("Zawartość pakietu (%d): %s\r\n", ret, buffer);
					 	flag_new_position = 1;
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_GPIO_EXTI_Callback+0x40>)
 8004fa6:	601a      	str	r2, [r3, #0]
				 	}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		}
}
 8004fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004fb0:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8004fb2:	f7fc bb8c 	b.w	80016ce <HAL_GPIO_TogglePin>
}
 8004fb6:	bd08      	pop	{r3, pc}
 8004fb8:	20000a98 	.word	0x20000a98
 8004fbc:	20000bb0 	.word	0x20000bb0
 8004fc0:	20000a53 	.word	0x20000a53
 8004fc4:	20000388 	.word	0x20000388
 8004fc8:	40011000 	.word	0x40011000

08004fcc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef *hadc){
 8004fcc:	b508      	push	{r3, lr}
	if(hadc == &hadc1){
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_ADC_ConvCpltCallback+0x18>)
 8004fd0:	4283      	cmp	r3, r0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_ADC_ConvCpltCallback+0x16>
		adc_flag = 1;
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004fd8:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(hadc);
 8004fda:	f7fb ffa1 	bl	8000f20 <HAL_ADC_GetValue>
 8004fde:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_ADC_ConvCpltCallback+0x20>)
 8004fe0:	6018      	str	r0, [r3, #0]
	}
}
 8004fe2:	bd08      	pop	{r3, pc}
 8004fe4:	200009c4 	.word	0x200009c4
 8004fe8:	20000a48 	.word	0x20000a48
 8004fec:	20000a4c 	.word	0x20000a4c

08004ff0 <Beep>:
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void Beep(int time_delay){
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004ff4:	4c07      	ldr	r4, [pc, #28]	; (8005014 <Beep+0x24>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7fc fb62 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8005000:	4628      	mov	r0, r5
 8005002:	f7fb ff7b 	bl	8000efc <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005006:	4620      	mov	r0, r4
}
 8005008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800500c:	2200      	movs	r2, #0
 800500e:	2102      	movs	r1, #2
 8005010:	f7fc bb58 	b.w	80016c4 <HAL_GPIO_WritePin>
 8005014:	40010800 	.word	0x40010800

08005018 <main>:
{
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 800501e:	f7fb ff49 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 8005022:	f7ff ff6f 	bl	8004f04 <SystemClock_Config>
  MX_GPIO_Init();
 8005026:	f7ff fe91 	bl	8004d4c <MX_GPIO_Init>
  MX_ADC1_Init();
 800502a:	f7ff fe31 	bl	8004c90 <MX_ADC1_Init>
  MX_SPI1_Init();
 800502e:	f000 f9a3 	bl	8005378 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8005032:	f000 ffd1 	bl	8005fd8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8005036:	f7ff ff15 	bl	8004e64 <MX_I2C2_Init>
  MX_RTC_Init();
 800503a:	f000 f94b 	bl	80052d4 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 800503e:	f001 f821 	bl	8006084 <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2023      	movs	r0, #35	; 0x23
 8005046:	4611      	mov	r1, r2
 8005048:	f7fc f9b6 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800504c:	2023      	movs	r0, #35	; 0x23
 800504e:	f7fc f9e7 	bl	8001420 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc1);
 8005052:	4887      	ldr	r0, [pc, #540]	; (8005270 <main+0x258>)
 8005054:	f7fc f894 	bl	8001180 <HAL_ADC_Start_IT>
  ssd1306_Init();
 8005058:	f000 fb1a 	bl	8005690 <ssd1306_Init>
  ssd1306_Print_initial_screen();
 800505c:	f000 fed0 	bl	8005e00 <ssd1306_Print_initial_screen>
  HAL_Delay(2000);
 8005060:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005064:	f7fb ff4a 	bl	8000efc <HAL_Delay>
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8005068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 800506c:	4b81      	ldr	r3, [pc, #516]	; (8005274 <main+0x25c>)
	SX1278_hw.dio0.pin = DO_RF_Pin;
 800506e:	4a82      	ldr	r2, [pc, #520]	; (8005278 <main+0x260>)
	SX1278.hw = &SX1278_hw;
 8005070:	4d82      	ldr	r5, [pc, #520]	; (800527c <main+0x264>)
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8005072:	e9c3 1202 	strd	r1, r2, [r3, #8]
	SX1278_hw.reset.port = RST_RF_GPIO_Port;
 8005076:	605a      	str	r2, [r3, #4]
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 8005078:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
	SX1278_hw.reset.pin = RST_RF_Pin;
 800507c:	2201      	movs	r2, #1
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 800507e:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8005082:	6159      	str	r1, [r3, #20]
	SX1278_hw.nss.pin = CS_RF_Pin;
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	SX1278_hw.reset.pin = RST_RF_Pin;
 8005088:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 800508a:	4a7d      	ldr	r2, [pc, #500]	; (8005280 <main+0x268>)
	SX1278_hw.nss.pin = CS_RF_Pin;
 800508c:	6119      	str	r1, [r3, #16]
	SX1278_hw.spi = &hspi1;
 800508e:	619a      	str	r2, [r3, #24]
	SX1278.hw = &SX1278_hw;
 8005090:	602b      	str	r3, [r5, #0]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8005092:	220a      	movs	r2, #10
 8005094:	2307      	movs	r3, #7
 8005096:	2400      	movs	r4, #0
 8005098:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800509c:	2302      	movs	r3, #2
 800509e:	4628      	mov	r0, r5
 80050a0:	e9cd 4300 	strd	r4, r3, [sp]
 80050a4:	a36c      	add	r3, pc, #432	; (adr r3, 8005258 <main+0x240>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7ff fdb9 	bl	8004c20 <SX1278_begin>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80050ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80050b2:	2110      	movs	r1, #16
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7ff fd39 	bl	8004b2c <SX1278_LoRaEntryRx>
	float V_Bat = 0.0;
 80050ba:	2700      	movs	r7, #0
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80050bc:	4a71      	ldr	r2, [pc, #452]	; (8005284 <main+0x26c>)
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80050be:	4b72      	ldr	r3, [pc, #456]	; (8005288 <main+0x270>)
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80050c0:	6851      	ldr	r1, [r2, #4]
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80050c2:	6018      	str	r0, [r3, #0]
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80050c4:	6810      	ldr	r0, [r2, #0]
 80050c6:	ab10      	add	r3, sp, #64	; 0x40
 80050c8:	c303      	stmia	r3!, {r0, r1}
 80050ca:	7a12      	ldrb	r2, [r2, #8]
		if(flag_new_position){
 80050cc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80052b4 <main+0x29c>
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	ab13      	add	r3, sp, #76	; 0x4c
 80050d4:	c303      	stmia	r3!, {r0, r1}
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	4b6c      	ldr	r3, [pc, #432]	; (800528c <main+0x274>)
 80050da:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	889a      	ldrh	r2, [r3, #4]
 80050e2:	799b      	ldrb	r3, [r3, #6]
 80050e4:	900e      	str	r0, [sp, #56]	; 0x38
 80050e6:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 80050ea:	4b69      	ldr	r3, [pc, #420]	; (8005290 <main+0x278>)
 80050ec:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	791b      	ldrb	r3, [r3, #4]
 80050f4:	900c      	str	r0, [sp, #48]	; 0x30
 80050f6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80050fa:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
		if(flag_new_position){
 80050fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d07e      	beq.n	8005204 <main+0x1ec>
				str_lat[c] = buffer[position + c - 1];
 8005106:	4b63      	ldr	r3, [pc, #396]	; (8005294 <main+0x27c>)
			flag_new_position = 0;
 8005108:	2200      	movs	r2, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f8c8 2000 	str.w	r2, [r8]
				str_lat[c] = buffer[position + c - 1];
 8005110:	18d1      	adds	r1, r2, r3
 8005112:	7889      	ldrb	r1, [r1, #2]
 8005114:	f809 1002 	strb.w	r1, [r9, r2]
				c++;
 8005118:	3201      	adds	r2, #1
			while (c < length) {
 800511a:	2a08      	cmp	r2, #8
 800511c:	d1f8      	bne.n	8005110 <main+0xf8>
			str_lat[c] = '\0';
 800511e:	2200      	movs	r2, #0
 8005120:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				str_lon[c] = buffer[position + c - 1];
 8005124:	1881      	adds	r1, r0, r2
 8005126:	7ac9      	ldrb	r1, [r1, #11]
 8005128:	f80a 1002 	strb.w	r1, [sl, r2]
				c++;
 800512c:	3201      	adds	r2, #1
			while (c < length) {
 800512e:	2a08      	cmp	r2, #8
 8005130:	d1f8      	bne.n	8005124 <main+0x10c>
			str_lon[c] = '\0';
 8005132:	2400      	movs	r4, #0
				str_alt[c] = buffer[position + c - 1];
 8005134:	7d1a      	ldrb	r2, [r3, #20]
			sscanf(str_lat,"%f",&lat);
 8005136:	4958      	ldr	r1, [pc, #352]	; (8005298 <main+0x280>)
				str_alt[c] = buffer[position + c - 1];
 8005138:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800513c:	7d5a      	ldrb	r2, [r3, #21]
			sscanf(str_lat,"%f",&lat);
 800513e:	4648      	mov	r0, r9
				str_alt[c] = buffer[position + c - 1];
 8005140:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8005144:	7d9a      	ldrb	r2, [r3, #22]
			str_lon[c] = '\0';
 8005146:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
				str_alt[c] = buffer[position + c - 1];
 800514a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800514e:	7dda      	ldrb	r2, [r3, #23]
			str_alt[c] = '\0';
 8005150:	f88d 403d 	strb.w	r4, [sp, #61]	; 0x3d
				str_alt[c] = buffer[position + c - 1];
 8005154:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8005158:	7e1a      	ldrb	r2, [r3, #24]
			str_vel[c] = '\0';
 800515a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
				str_alt[c] = buffer[position + c - 1];
 800515e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
				str_vel[c] = buffer[position + c - 1];
 8005162:	7e9a      	ldrb	r2, [r3, #26]
			HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8005164:	4d4d      	ldr	r5, [pc, #308]	; (800529c <main+0x284>)
				str_vel[c] = buffer[position + c - 1];
 8005166:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800516a:	7eda      	ldrb	r2, [r3, #27]
			HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800516c:	4e4c      	ldr	r6, [pc, #304]	; (80052a0 <main+0x288>)
				str_vel[c] = buffer[position + c - 1];
 800516e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8005172:	7f1a      	ldrb	r2, [r3, #28]
 8005174:	7f5b      	ldrb	r3, [r3, #29]
 8005176:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			sscanf(str_lat,"%f",&lat);
 800517a:	aa08      	add	r2, sp, #32
				str_vel[c] = buffer[position + c - 1];
 800517c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
			sscanf(str_lat,"%f",&lat);
 8005180:	f002 f878 	bl	8007274 <siscanf>
			sscanf(str_lon,"%f",&lon);
 8005184:	aa09      	add	r2, sp, #36	; 0x24
 8005186:	4944      	ldr	r1, [pc, #272]	; (8005298 <main+0x280>)
 8005188:	4650      	mov	r0, sl
 800518a:	f002 f873 	bl	8007274 <siscanf>
			sscanf(str_alt,"%f",&alt);
 800518e:	aa0a      	add	r2, sp, #40	; 0x28
 8005190:	4941      	ldr	r1, [pc, #260]	; (8005298 <main+0x280>)
 8005192:	a80e      	add	r0, sp, #56	; 0x38
 8005194:	f002 f86e 	bl	8007274 <siscanf>
			sscanf(str_vel,"%f",&vel);
 8005198:	aa0b      	add	r2, sp, #44	; 0x2c
 800519a:	493f      	ldr	r1, [pc, #252]	; (8005298 <main+0x280>)
 800519c:	a80c      	add	r0, sp, #48	; 0x30
 800519e:	f002 f869 	bl	8007274 <siscanf>
			int rssi = SX1278_RSSI_LoRa(&SX1278);
 80051a2:	4836      	ldr	r0, [pc, #216]	; (800527c <main+0x264>)
 80051a4:	f7ff fd70 	bl	8004c88 <SX1278_RSSI_LoRa>
 80051a8:	4683      	mov	fp, r0
			int snr = SX1278_SNR_LoRa(&SX1278);
 80051aa:	4834      	ldr	r0, [pc, #208]	; (800527c <main+0x264>)
 80051ac:	f7ff fd65 	bl	8004c7a <SX1278_SNR_LoRa>
			HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80051b0:	4622      	mov	r2, r4
			int snr = SX1278_SNR_LoRa(&SX1278);
 80051b2:	9007      	str	r0, [sp, #28]
			HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80051b4:	4629      	mov	r1, r5
 80051b6:	483b      	ldr	r0, [pc, #236]	; (80052a4 <main+0x28c>)
 80051b8:	f7fd fd52 	bl	8002c60 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80051bc:	4622      	mov	r2, r4
 80051be:	4631      	mov	r1, r6
 80051c0:	4838      	ldr	r0, [pc, #224]	; (80052a4 <main+0x28c>)
 80051c2:	f7fd fe5b 	bl	8002e7c <HAL_RTC_GetDate>
			ssd1306_Print(lat, lon, alt, vel, V_Bat, rssi, snr, RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80051c6:	78aa      	ldrb	r2, [r5, #2]
			int snr = SX1278_SNR_LoRa(&SX1278);
 80051c8:	9b07      	ldr	r3, [sp, #28]
			ssd1306_Print(lat, lon, alt, vel, V_Bat, rssi, snr, RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80051ca:	9205      	str	r2, [sp, #20]
 80051cc:	786a      	ldrb	r2, [r5, #1]
 80051ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051d0:	9204      	str	r2, [sp, #16]
 80051d2:	782a      	ldrb	r2, [r5, #0]
 80051d4:	9808      	ldr	r0, [sp, #32]
 80051d6:	9203      	str	r2, [sp, #12]
			int rssi = SX1278_RSSI_LoRa(&SX1278);
 80051d8:	e9cd b301 	strd	fp, r3, [sp, #4]
			ssd1306_Print(lat, lon, alt, vel, V_Bat, rssi, snr, RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80051dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e0:	9700      	str	r7, [sp, #0]
 80051e2:	f000 fbad 	bl	8005940 <ssd1306_Print>
			printf("Date: %02d.%02d.20%02d Time: %02d:%02d:%02d\n\r", RtcDate.Date, RtcDate.Month, RtcDate.Year, RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80051e6:	78a8      	ldrb	r0, [r5, #2]
 80051e8:	78f3      	ldrb	r3, [r6, #3]
 80051ea:	9002      	str	r0, [sp, #8]
 80051ec:	7868      	ldrb	r0, [r5, #1]
 80051ee:	7872      	ldrb	r2, [r6, #1]
 80051f0:	9001      	str	r0, [sp, #4]
 80051f2:	7828      	ldrb	r0, [r5, #0]
 80051f4:	78b1      	ldrb	r1, [r6, #2]
 80051f6:	9000      	str	r0, [sp, #0]
 80051f8:	482b      	ldr	r0, [pc, #172]	; (80052a8 <main+0x290>)
 80051fa:	f001 ffff 	bl	80071fc <iprintf>
			Beep(2);
 80051fe:	2002      	movs	r0, #2
 8005200:	f7ff fef6 	bl	8004ff0 <Beep>
		  if (adc_flag == 1 ){
 8005204:	4b29      	ldr	r3, [pc, #164]	; (80052ac <main+0x294>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2a01      	cmp	r2, #1
 800520a:	d115      	bne.n	8005238 <main+0x220>
			  adc_flag=0;
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
			  V_Bat = adc_value * (4.2/4096) *1.33;
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <main+0x298>)
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	f7fb f8f6 	bl	8000404 <__aeabi_i2d>
 8005218:	a311      	add	r3, pc, #68	; (adr r3, 8005260 <main+0x248>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb f95b 	bl	80004d8 <__aeabi_dmul>
 8005222:	a311      	add	r3, pc, #68	; (adr r3, 8005268 <main+0x250>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f956 	bl	80004d8 <__aeabi_dmul>
 800522c:	f7fb fc4c 	bl	8000ac8 <__aeabi_d2f>
 8005230:	4607      	mov	r7, r0
			  HAL_ADC_Start_IT(&hadc1);
 8005232:	480f      	ldr	r0, [pc, #60]	; (8005270 <main+0x258>)
 8005234:	f7fb ffa4 	bl	8001180 <HAL_ADC_Start_IT>
		watchdog++;
 8005238:	3401      	adds	r4, #1
		HAL_Delay(100);
 800523a:	2064      	movs	r0, #100	; 0x64
 800523c:	f7fb fe5e 	bl	8000efc <HAL_Delay>
		if(watchdog >= 50){
 8005240:	2c31      	cmp	r4, #49	; 0x31
 8005242:	f77f af5c 	ble.w	80050fe <main+0xe6>
			ssd1306_Print_No_Signal(V_Bat);
 8005246:	4638      	mov	r0, r7
 8005248:	f000 fd22 	bl	8005c90 <ssd1306_Print_No_Signal>
			Beep(200);
 800524c:	20c8      	movs	r0, #200	; 0xc8
 800524e:	f7ff fecf 	bl	8004ff0 <Beep>
 8005252:	e754      	b.n	80050fe <main+0xe6>
 8005254:	f3af 8000 	nop.w
 8005258:	33bca100 	.word	0x33bca100
 800525c:	00000000 	.word	0x00000000
 8005260:	cccccccd 	.word	0xcccccccd
 8005264:	3f50cccc 	.word	0x3f50cccc
 8005268:	147ae148 	.word	0x147ae148
 800526c:	3ff547ae 	.word	0x3ff547ae
 8005270:	200009c4 	.word	0x200009c4
 8005274:	20000bb4 	.word	0x20000bb4
 8005278:	40010c00 	.word	0x40010c00
 800527c:	20000a98 	.word	0x20000a98
 8005280:	20000be4 	.word	0x20000be4
 8005284:	0800b27a 	.word	0x0800b27a
 8005288:	20000bb0 	.word	0x20000bb0
 800528c:	0800b27c 	.word	0x0800b27c
 8005290:	0800b27e 	.word	0x0800b27e
 8005294:	20000a53 	.word	0x20000a53
 8005298:	0800b249 	.word	0x0800b249
 800529c:	20000a50 	.word	0x20000a50
 80052a0:	20000a93 	.word	0x20000a93
 80052a4:	20000bd0 	.word	0x20000bd0
 80052a8:	0800b24c 	.word	0x0800b24c
 80052ac:	20000a48 	.word	0x20000a48
 80052b0:	20000a4c 	.word	0x20000a4c
 80052b4:	20000388 	.word	0x20000388

080052b8 <_write>:

int _write(int file, char *ptr, int len){
 80052b8:	b510      	push	{r4, lr}
 80052ba:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 80052bc:	2332      	movs	r3, #50	; 0x32
 80052be:	b292      	uxth	r2, r2
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <_write+0x14>)
 80052c2:	f7fe f9a1 	bl	8003608 <HAL_UART_Transmit>
    return len;
}
 80052c6:	4620      	mov	r0, r4
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop
 80052cc:	20000c3c 	.word	0x20000c3c

080052d0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052d0:	4770      	bx	lr
	...

080052d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80052d4:	b513      	push	{r0, r1, r4, lr}
  RTC_DateTypeDef DateToUpdate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 80052da:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 80052dc:	4814      	ldr	r0, [pc, #80]	; (8005330 <MX_RTC_Init+0x5c>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80052de:	4a15      	ldr	r2, [pc, #84]	; (8005334 <MX_RTC_Init+0x60>)
  RTC_TimeTypeDef sTime = {0};
 80052e0:	f8ad 4000 	strh.w	r4, [sp]
 80052e4:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80052e8:	9401      	str	r4, [sp, #4]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80052ea:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80052ee:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80052f0:	f7fd fe0c 	bl	8002f0c <HAL_RTC_Init>
 80052f4:	b108      	cbz	r0, 80052fa <MX_RTC_Init+0x26>
  {
    Error_Handler();
 80052f6:	f7ff ffeb 	bl	80052d0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 17;
 80052fa:	f640 1311 	movw	r3, #2321	; 0x911
  sTime.Minutes = 9;
  sTime.Seconds = 0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80052fe:	2200      	movs	r2, #0
 8005300:	4669      	mov	r1, sp
 8005302:	480b      	ldr	r0, [pc, #44]	; (8005330 <MX_RTC_Init+0x5c>)
  sTime.Hours = 17;
 8005304:	f8ad 3000 	strh.w	r3, [sp]
  sTime.Minutes = 9;
 8005308:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800530c:	f7fd fc56 	bl	8002bbc <HAL_RTC_SetTime>
 8005310:	b108      	cbz	r0, 8005316 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8005312:	f7ff ffdd 	bl	80052d0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <MX_RTC_Init+0x64>)
 8005318:	a902      	add	r1, sp, #8
 800531a:	f841 3d04 	str.w	r3, [r1, #-4]!
  DateToUpdate.Month = RTC_MONTH_JUNE;
  DateToUpdate.Date = 21;
  DateToUpdate.Year = 20;

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800531e:	2200      	movs	r2, #0
 8005320:	4803      	ldr	r0, [pc, #12]	; (8005330 <MX_RTC_Init+0x5c>)
 8005322:	f7fd fd53 	bl	8002dcc <HAL_RTC_SetDate>
 8005326:	b108      	cbz	r0, 800532c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8005328:	f7ff ffd2 	bl	80052d0 <Error_Handler>
  }

}
 800532c:	b002      	add	sp, #8
 800532e:	bd10      	pop	{r4, pc}
 8005330:	20000bd0 	.word	0x20000bd0
 8005334:	40002800 	.word	0x40002800
 8005338:	14150600 	.word	0x14150600

0800533c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800533c:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RTC_MspInit+0x30>)
 8005340:	6802      	ldr	r2, [r0, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d10e      	bne.n	8005364 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005346:	f7fc ffef 	bl	8002328 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RTC_MspInit+0x34>)
 800534c:	69da      	ldr	r2, [r3, #28]
 800534e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005352:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005354:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_RTC_MspInit+0x38>)
 8005362:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005364:	b003      	add	sp, #12
 8005366:	f85d fb04 	ldr.w	pc, [sp], #4
 800536a:	bf00      	nop
 800536c:	40002800 	.word	0x40002800
 8005370:	40021000 	.word	0x40021000
 8005374:	4242043c 	.word	0x4242043c

08005378 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005378:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800537a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800537e:	480d      	ldr	r0, [pc, #52]	; (80053b4 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005380:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005382:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005386:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800538a:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800538c:	2208      	movs	r2, #8
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800538e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005392:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005396:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800539a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800539c:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800539e:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80053a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053a4:	f7fd fe4b 	bl	800303e <HAL_SPI_Init>
 80053a8:	b118      	cbz	r0, 80053b2 <MX_SPI1_Init+0x3a>
  {
    Error_Handler();
  }

}
 80053aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80053ae:	f7ff bf8f 	b.w	80052d0 <Error_Handler>
}
 80053b2:	bd08      	pop	{r3, pc}
 80053b4:	20000be4 	.word	0x20000be4
 80053b8:	40013000 	.word	0x40013000

080053bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80053bc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053be:	2410      	movs	r4, #16
{
 80053c0:	4605      	mov	r5, r0
 80053c2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c4:	4622      	mov	r2, r4
 80053c6:	2100      	movs	r1, #0
 80053c8:	a802      	add	r0, sp, #8
 80053ca:	f001 f8df 	bl	800658c <memset>
  if(spiHandle->Instance==SPI1)
 80053ce:	682a      	ldr	r2, [r5, #0]
 80053d0:	4b18      	ldr	r3, [pc, #96]	; (8005434 <HAL_SPI_MspInit+0x78>)
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d12c      	bne.n	8005430 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053d6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80053da:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053dc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e2:	619a      	str	r2, [r3, #24]
 80053e4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e6:	4814      	ldr	r0, [pc, #80]	; (8005438 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053ec:	9200      	str	r2, [sp, #0]
 80053ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	f042 0208 	orr.w	r2, r2, #8
 80053f6:	619a      	str	r2, [r3, #24]
 80053f8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053fa:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005404:	2302      	movs	r3, #2
 8005406:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800540a:	2303      	movs	r3, #3
 800540c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800540e:	f7fc f873 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005412:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8005414:	a902      	add	r1, sp, #8
 8005416:	4808      	ldr	r0, [pc, #32]	; (8005438 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 800541c:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 800541e:	f7fc f86b 	bl	80014f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8005422:	4a06      	ldr	r2, [pc, #24]	; (800543c <HAL_SPI_MspInit+0x80>)
 8005424:	6853      	ldr	r3, [r2, #4]
 8005426:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005430:	b007      	add	sp, #28
 8005432:	bd30      	pop	{r4, r5, pc}
 8005434:	40013000 	.word	0x40013000
 8005438:	40010c00 	.word	0x40010c00
 800543c:	40010000 	.word	0x40010000

08005440 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8005440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	461c      	mov	r4, r3
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8005446:	2c0a      	cmp	r4, #10
{
 8005448:	4692      	mov	sl, r2
 800544a:	4607      	mov	r7, r0
 800544c:	460e      	mov	r6, r1
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
	if (precision > MAX_PRECISION)
 8005456:	f300 80b1 	bgt.w	80055bc <ftoa+0x17c>
	if (f < 0)
 800545a:	f7fb faaf 	bl	80009bc <__aeabi_dcmplt>
 800545e:	2800      	cmp	r0, #0
 8005460:	d063      	beq.n	800552a <ftoa+0xea>
	{
		f = -f;
		*ptr++ = '-';
 8005462:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 8005464:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 8005468:	f10a 0801 	add.w	r8, sl, #1
 800546c:	f88a 3000 	strb.w	r3, [sl]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8005470:	2c00      	cmp	r4, #0
 8005472:	da5c      	bge.n	800552e <ftoa+0xee>
	{
		if (f < 1.0) precision = 6;
 8005474:	2200      	movs	r2, #0
 8005476:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <ftoa+0x1a0>)
 8005478:	4638      	mov	r0, r7
 800547a:	4631      	mov	r1, r6
 800547c:	f7fb fa9e 	bl	80009bc <__aeabi_dcmplt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d161      	bne.n	8005548 <ftoa+0x108>
		else if (f < 10.0) precision = 5;
 8005484:	2200      	movs	r2, #0
 8005486:	4b57      	ldr	r3, [pc, #348]	; (80055e4 <ftoa+0x1a4>)
 8005488:	4638      	mov	r0, r7
 800548a:	4631      	mov	r1, r6
 800548c:	f7fb fa96 	bl	80009bc <__aeabi_dcmplt>
 8005490:	2800      	cmp	r0, #0
 8005492:	d15b      	bne.n	800554c <ftoa+0x10c>
		else if (f < 100.0) precision = 4;
 8005494:	2200      	movs	r2, #0
 8005496:	4b54      	ldr	r3, [pc, #336]	; (80055e8 <ftoa+0x1a8>)
 8005498:	4638      	mov	r0, r7
 800549a:	4631      	mov	r1, r6
 800549c:	f7fb fa8e 	bl	80009bc <__aeabi_dcmplt>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d155      	bne.n	8005550 <ftoa+0x110>
		else if (f < 1000.0) precision = 3;
 80054a4:	2200      	movs	r2, #0
 80054a6:	4b51      	ldr	r3, [pc, #324]	; (80055ec <ftoa+0x1ac>)
 80054a8:	4638      	mov	r0, r7
 80054aa:	4631      	mov	r1, r6
 80054ac:	f7fb fa86 	bl	80009bc <__aeabi_dcmplt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d14f      	bne.n	8005554 <ftoa+0x114>
		else if (f < 10000.0) precision = 2;
 80054b4:	a346      	add	r3, pc, #280	; (adr r3, 80055d0 <ftoa+0x190>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	4638      	mov	r0, r7
 80054bc:	4631      	mov	r1, r6
 80054be:	f7fb fa7d 	bl	80009bc <__aeabi_dcmplt>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d148      	bne.n	8005558 <ftoa+0x118>
		else if (f < 100000.0) precision = 1;
 80054c6:	a344      	add	r3, pc, #272	; (adr r3, 80055d8 <ftoa+0x198>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	4638      	mov	r0, r7
 80054ce:	4631      	mov	r1, r6
 80054d0:	f7fb fa74 	bl	80009bc <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d141      	bne.n	800555c <ftoa+0x11c>
		else precision = 0;
 80054d8:	4604      	mov	r4, r0
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 80054da:	4638      	mov	r0, r7
 80054dc:	4631      	mov	r1, r6
 80054de:	f7fb faab 	bl	8000a38 <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d13c      	bne.n	8005560 <ftoa+0x120>
		*ptr++ = '0';
 80054e6:	2330      	movs	r3, #48	; 0x30
 80054e8:	f108 0501 	add.w	r5, r8, #1
 80054ec:	f888 3000 	strb.w	r3, [r8]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 80054f0:	b19c      	cbz	r4, 800551a <ftoa+0xda>
	f -= intPart;
 80054f2:	f7fa ff87 	bl	8000404 <__aeabi_i2d>
 80054f6:	460b      	mov	r3, r1
 80054f8:	4602      	mov	r2, r0
 80054fa:	4631      	mov	r1, r6
 80054fc:	4638      	mov	r0, r7
 80054fe:	f7fa fe33 	bl	8000168 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 8005502:	232e      	movs	r3, #46	; 0x2e
 8005504:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 8005506:	2600      	movs	r6, #0
		*ptr++ = '.';
 8005508:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 800550a:	4f36      	ldr	r7, [pc, #216]	; (80055e4 <ftoa+0x1a4>)
 800550c:	192b      	adds	r3, r5, r4
 800550e:	9301      	str	r3, [sp, #4]
		while (precision--)
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	455b      	cmp	r3, fp
 8005514:	d13c      	bne.n	8005590 <ftoa+0x150>
 8005516:	3401      	adds	r4, #1
 8005518:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 800551a:	2300      	movs	r3, #0

	return buf;
}
 800551c:	4650      	mov	r0, sl
	*ptr = 0;
 800551e:	702b      	strb	r3, [r5, #0]
}
 8005520:	b003      	add	sp, #12
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		precision = MAX_PRECISION;
 8005526:	240a      	movs	r4, #10
 8005528:	e79b      	b.n	8005462 <ftoa+0x22>
 800552a:	46d0      	mov	r8, sl
 800552c:	e7a0      	b.n	8005470 <ftoa+0x30>
	if (precision)
 800552e:	d0d4      	beq.n	80054da <ftoa+0x9a>
		f += rounders[precision];
 8005530:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <ftoa+0x1b0>)
 8005532:	4638      	mov	r0, r7
 8005534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005538:	4631      	mov	r1, r6
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fa fe15 	bl	800016c <__adddf3>
 8005542:	4607      	mov	r7, r0
 8005544:	460e      	mov	r6, r1
 8005546:	e7c8      	b.n	80054da <ftoa+0x9a>
		if (f < 1.0) precision = 6;
 8005548:	2406      	movs	r4, #6
 800554a:	e7f1      	b.n	8005530 <ftoa+0xf0>
		else if (f < 10.0) precision = 5;
 800554c:	2405      	movs	r4, #5
 800554e:	e7ef      	b.n	8005530 <ftoa+0xf0>
		else if (f < 100.0) precision = 4;
 8005550:	2404      	movs	r4, #4
 8005552:	e7ed      	b.n	8005530 <ftoa+0xf0>
		else if (f < 1000.0) precision = 3;
 8005554:	2403      	movs	r4, #3
 8005556:	e7eb      	b.n	8005530 <ftoa+0xf0>
		else if (f < 10000.0) precision = 2;
 8005558:	2402      	movs	r4, #2
 800555a:	e7e9      	b.n	8005530 <ftoa+0xf0>
		else if (f < 100000.0) precision = 1;
 800555c:	2401      	movs	r4, #1
 800555e:	e7e7      	b.n	8005530 <ftoa+0xf0>
 8005560:	4603      	mov	r3, r0
 8005562:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 8005564:	210a      	movs	r1, #10
 8005566:	fb93 f2f1 	sdiv	r2, r3, r1
 800556a:	fb01 3312 	mls	r3, r1, r2, r3
 800556e:	3330      	adds	r3, #48	; 0x30
 8005570:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 8005574:	4613      	mov	r3, r2
 8005576:	2a00      	cmp	r2, #0
 8005578:	d1f5      	bne.n	8005566 <ftoa+0x126>
			*p++ = '0' + intPart % 10;
 800557a:	462b      	mov	r3, r5
		while (p > ptr)
 800557c:	4598      	cmp	r8, r3
 800557e:	d2b7      	bcs.n	80054f0 <ftoa+0xb0>
			c = *--p;
 8005580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 8005584:	f898 1000 	ldrb.w	r1, [r8]
 8005588:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 800558a:	f808 2b01 	strb.w	r2, [r8], #1
 800558e:	e7f5      	b.n	800557c <ftoa+0x13c>
			f *= 10.0;
 8005590:	4632      	mov	r2, r6
 8005592:	463b      	mov	r3, r7
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	4689      	mov	r9, r1
 800559a:	4680      	mov	r8, r0
			c = f;
 800559c:	f7fb fa74 	bl	8000a88 <__aeabi_d2uiz>
 80055a0:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 80055a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055a6:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 80055aa:	f7fa ff2b 	bl	8000404 <__aeabi_i2d>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	4640      	mov	r0, r8
 80055b4:	4649      	mov	r1, r9
 80055b6:	f7fa fdd7 	bl	8000168 <__aeabi_dsub>
 80055ba:	e7a9      	b.n	8005510 <ftoa+0xd0>
	if (f < 0)
 80055bc:	f7fb f9fe 	bl	80009bc <__aeabi_dcmplt>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d1b0      	bne.n	8005526 <ftoa+0xe6>
 80055c4:	46d0      	mov	r8, sl
		precision = MAX_PRECISION;
 80055c6:	240a      	movs	r4, #10
 80055c8:	e7b2      	b.n	8005530 <ftoa+0xf0>
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	00000000 	.word	0x00000000
 80055d4:	40c38800 	.word	0x40c38800
 80055d8:	00000000 	.word	0x00000000
 80055dc:	40f86a00 	.word	0x40f86a00
 80055e0:	3ff00000 	.word	0x3ff00000
 80055e4:	40240000 	.word	0x40240000
 80055e8:	40590000 	.word	0x40590000
 80055ec:	408f4000 	.word	0x408f4000
 80055f0:	0800b288 	.word	0x0800b288

080055f4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80055f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80055f6:	2301      	movs	r3, #1
 80055f8:	f04f 31ff 	mov.w	r1, #4294967295
void ssd1306_WriteCommand(uint8_t byte) {
 80055fc:	aa06      	add	r2, sp, #24
 80055fe:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005602:	9200      	str	r2, [sp, #0]
 8005604:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	2178      	movs	r1, #120	; 0x78
 800560c:	4802      	ldr	r0, [pc, #8]	; (8005618 <ssd1306_WriteCommand+0x24>)
 800560e:	f7fc fa33 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 8005612:	b007      	add	sp, #28
 8005614:	f85d fb04 	ldr.w	pc, [sp], #4
 8005618:	200009f4 	.word	0x200009f4

0800561c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800561c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	b289      	uxth	r1, r1
 8005624:	e9cd 0100 	strd	r0, r1, [sp]
 8005628:	9302      	str	r3, [sp, #8]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	2301      	movs	r3, #1
 800562e:	2178      	movs	r1, #120	; 0x78
 8005630:	4802      	ldr	r0, [pc, #8]	; (800563c <ssd1306_WriteData+0x20>)
 8005632:	f7fc fa21 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 8005636:	b005      	add	sp, #20
 8005638:	f85d fb04 	ldr.w	pc, [sp], #4
 800563c:	200009f4 	.word	0x200009f4

08005640 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005640:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8005642:	4905      	ldr	r1, [pc, #20]	; (8005658 <ssd1306_Fill+0x18>)
 8005644:	1c02      	adds	r2, r0, #0
 8005646:	bf18      	it	ne
 8005648:	2201      	movne	r2, #1
 800564a:	4252      	negs	r2, r2
 800564c:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800564e:	3301      	adds	r3, #1
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	d1f6      	bne.n	8005644 <ssd1306_Fill+0x4>
    }
}
 8005656:	4770      	bx	lr
 8005658:	20000392 	.word	0x20000392

0800565c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005660:	4d0a      	ldr	r5, [pc, #40]	; (800568c <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005662:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8005666:	b2c0      	uxtb	r0, r0
 8005668:	f7ff ffc4 	bl	80055f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800566c:	2000      	movs	r0, #0
 800566e:	f7ff ffc1 	bl	80055f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8005672:	2010      	movs	r0, #16
 8005674:	f7ff ffbe 	bl	80055f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005678:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	3401      	adds	r4, #1
 8005680:	f7ff ffcc 	bl	800561c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005684:	2c08      	cmp	r4, #8
 8005686:	d1ec      	bne.n	8005662 <ssd1306_UpdateScreen+0x6>
    }
}
 8005688:	bd38      	pop	{r3, r4, r5, pc}
 800568a:	bf00      	nop
 800568c:	20000392 	.word	0x20000392

08005690 <ssd1306_Init>:
void ssd1306_Init(void) {
 8005690:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8005692:	2064      	movs	r0, #100	; 0x64
 8005694:	f7fb fc32 	bl	8000efc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8005698:	20ae      	movs	r0, #174	; 0xae
 800569a:	f7ff ffab 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800569e:	2020      	movs	r0, #32
 80056a0:	f7ff ffa8 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80056a4:	2000      	movs	r0, #0
 80056a6:	f7ff ffa5 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80056aa:	20b0      	movs	r0, #176	; 0xb0
 80056ac:	f7ff ffa2 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80056b0:	20c8      	movs	r0, #200	; 0xc8
 80056b2:	f7ff ff9f 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7ff ff9c 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80056bc:	2010      	movs	r0, #16
 80056be:	f7ff ff99 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80056c2:	2040      	movs	r0, #64	; 0x40
 80056c4:	f7ff ff96 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80056c8:	2081      	movs	r0, #129	; 0x81
 80056ca:	f7ff ff93 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80056ce:	20ff      	movs	r0, #255	; 0xff
 80056d0:	f7ff ff90 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80056d4:	20a1      	movs	r0, #161	; 0xa1
 80056d6:	f7ff ff8d 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80056da:	20a6      	movs	r0, #166	; 0xa6
 80056dc:	f7ff ff8a 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80056e0:	20a8      	movs	r0, #168	; 0xa8
 80056e2:	f7ff ff87 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80056e6:	203f      	movs	r0, #63	; 0x3f
 80056e8:	f7ff ff84 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80056ec:	20a4      	movs	r0, #164	; 0xa4
 80056ee:	f7ff ff81 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80056f2:	20d3      	movs	r0, #211	; 0xd3
 80056f4:	f7ff ff7e 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7ff ff7b 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80056fe:	20d5      	movs	r0, #213	; 0xd5
 8005700:	f7ff ff78 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005704:	20f0      	movs	r0, #240	; 0xf0
 8005706:	f7ff ff75 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800570a:	20d9      	movs	r0, #217	; 0xd9
 800570c:	f7ff ff72 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005710:	2022      	movs	r0, #34	; 0x22
 8005712:	f7ff ff6f 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005716:	20da      	movs	r0, #218	; 0xda
 8005718:	f7ff ff6c 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800571c:	2012      	movs	r0, #18
 800571e:	f7ff ff69 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005722:	20db      	movs	r0, #219	; 0xdb
 8005724:	f7ff ff66 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005728:	2020      	movs	r0, #32
 800572a:	f7ff ff63 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800572e:	208d      	movs	r0, #141	; 0x8d
 8005730:	f7ff ff60 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005734:	2014      	movs	r0, #20
 8005736:	f7ff ff5d 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800573a:	20af      	movs	r0, #175	; 0xaf
 800573c:	f7ff ff5a 	bl	80055f4 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8005740:	2000      	movs	r0, #0
 8005742:	f7ff ff7d 	bl	8005640 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8005746:	f7ff ff89 	bl	800565c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800574a:	2200      	movs	r2, #0
 800574c:	4b02      	ldr	r3, [pc, #8]	; (8005758 <ssd1306_Init+0xc8>)
 800574e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005750:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8005752:	2201      	movs	r2, #1
 8005754:	715a      	strb	r2, [r3, #5]
}
 8005756:	bd08      	pop	{r3, pc}
 8005758:	2000038c 	.word	0x2000038c

0800575c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800575c:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800575e:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005760:	d416      	bmi.n	8005790 <ssd1306_DrawPixel+0x34>
 8005762:	293f      	cmp	r1, #63	; 0x3f
 8005764:	d814      	bhi.n	8005790 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <ssd1306_DrawPixel+0x38>)
 8005768:	791b      	ldrb	r3, [r3, #4]
 800576a:	b113      	cbz	r3, 8005772 <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 800576c:	fab2 f282 	clz	r2, r2
 8005770:	0952      	lsrs	r2, r2, #5
 8005772:	08cb      	lsrs	r3, r1, #3
 8005774:	f001 0407 	and.w	r4, r1, #7
 8005778:	2101      	movs	r1, #1
 800577a:	4d07      	ldr	r5, [pc, #28]	; (8005798 <ssd1306_DrawPixel+0x3c>)
 800577c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8005780:	562b      	ldrsb	r3, [r5, r0]
 8005782:	40a1      	lsls	r1, r4
 8005784:	b249      	sxtb	r1, r1
    }
    
    // Draw in the right color
    if(color == White) {
 8005786:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005788:	bf0c      	ite	eq
 800578a:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800578c:	438b      	bicne	r3, r1
 800578e:	542b      	strb	r3, [r5, r0]
    }
}
 8005790:	bd30      	pop	{r4, r5, pc}
 8005792:	bf00      	nop
 8005794:	2000038c 	.word	0x2000038c
 8005798:	20000392 	.word	0x20000392

0800579c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	4604      	mov	r4, r0
 80057a2:	b087      	sub	sp, #28
 80057a4:	a806      	add	r0, sp, #24
 80057a6:	e900 0006 	stmdb	r0, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80057aa:	f1a4 0220 	sub.w	r2, r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80057ae:	469b      	mov	fp, r3
    if (ch < 32 || ch > 126)
 80057b0:	b2d3      	uxtb	r3, r2
 80057b2:	2b5e      	cmp	r3, #94	; 0x5e
 80057b4:	d83e      	bhi.n	8005834 <ssd1306_WriteChar+0x98>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80057b6:	4b20      	ldr	r3, [pc, #128]	; (8005838 <ssd1306_WriteChar+0x9c>)
 80057b8:	f89d 9010 	ldrb.w	r9, [sp, #16]
 80057bc:	881d      	ldrh	r5, [r3, #0]
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	eb05 0109 	add.w	r1, r5, r9
 80057c4:	2980      	cmp	r1, #128	; 0x80
 80057c6:	dc35      	bgt.n	8005834 <ssd1306_WriteChar+0x98>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80057c8:	885b      	ldrh	r3, [r3, #2]
 80057ca:	f89d a011 	ldrb.w	sl, [sp, #17]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	eb03 010a 	add.w	r1, r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80057d4:	2940      	cmp	r1, #64	; 0x40
 80057d6:	dc2d      	bgt.n	8005834 <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80057d8:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80057da:	fb0a f302 	mul.w	r3, sl, r2
 80057de:	9302      	str	r3, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 80057e0:	45b2      	cmp	sl, r6
 80057e2:	d806      	bhi.n	80057f2 <ssd1306_WriteChar+0x56>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	444d      	add	r5, r9
 80057e8:	801d      	strh	r5, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 80057ea:	4620      	mov	r0, r4
 80057ec:	b007      	add	sp, #28
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 80057f2:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	9905      	ldr	r1, [sp, #20]
 80057f8:	199a      	adds	r2, r3, r6
 80057fa:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80057fe:	9303      	str	r3, [sp, #12]
 8005800:	9b00      	ldr	r3, [sp, #0]
 8005802:	eb06 0803 	add.w	r8, r6, r3
 8005806:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 800580a:	45b9      	cmp	r9, r7
 800580c:	d801      	bhi.n	8005812 <ssd1306_WriteChar+0x76>
    for(i = 0; i < Font.FontHeight; i++) {
 800580e:	3601      	adds	r6, #1
 8005810:	e7e6      	b.n	80057e0 <ssd1306_WriteChar+0x44>
            if((b << j) & 0x8000)  {
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	1978      	adds	r0, r7, r5
 8005816:	fa03 f207 	lsl.w	r2, r3, r7
 800581a:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800581c:	bf58      	it	pl
 800581e:	fabb f28b 	clzpl	r2, fp
 8005822:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005824:	bf4c      	ite	mi
 8005826:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005828:	0952      	lsrpl	r2, r2, #5
 800582a:	4641      	mov	r1, r8
 800582c:	f7ff ff96 	bl	800575c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8005830:	3701      	adds	r7, #1
 8005832:	e7ea      	b.n	800580a <ssd1306_WriteChar+0x6e>
        return 0;
 8005834:	2400      	movs	r4, #0
 8005836:	e7d8      	b.n	80057ea <ssd1306_WriteChar+0x4e>
 8005838:	2000038c 	.word	0x2000038c

0800583c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800583c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800583e:	466d      	mov	r5, sp
 8005840:	461f      	mov	r7, r3
 8005842:	e885 0006 	stmia.w	r5, {r1, r2}
 8005846:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 8005848:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800584c:	b144      	cbz	r4, 8005860 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800584e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005852:	4620      	mov	r0, r4
 8005854:	463b      	mov	r3, r7
 8005856:	f7ff ffa1 	bl	800579c <ssd1306_WriteChar>
 800585a:	7834      	ldrb	r4, [r6, #0]
 800585c:	42a0      	cmp	r0, r4
 800585e:	d0f3      	beq.n	8005848 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8005860:	4620      	mov	r0, r4
 8005862:	b003      	add	sp, #12
 8005864:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005866 <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t deltaX = abs(x2 - x1);
 800586a:	1a17      	subs	r7, r2, r0
  int32_t deltaY = abs(y2 - y1);
 800586c:	eba3 0801 	sub.w	r8, r3, r1
  int32_t deltaX = abs(x2 - x1);
 8005870:	2f00      	cmp	r7, #0
 8005872:	bfb8      	it	lt
 8005874:	427f      	neglt	r7, r7
  int32_t deltaY = abs(y2 - y1);
 8005876:	f1b8 0f00 	cmp.w	r8, #0
 800587a:	bfb8      	it	lt
 800587c:	f1c8 0800 	rsblt	r8, r8, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005880:	4699      	mov	r9, r3
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8005882:	4282      	cmp	r2, r0
 8005884:	bf8c      	ite	hi
 8005886:	2301      	movhi	r3, #1
 8005888:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800588c:	b085      	sub	sp, #20
 800588e:	4692      	mov	sl, r2
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8005890:	9301      	str	r3, [sp, #4]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8005892:	4589      	cmp	r9, r1
 8005894:	bf8c      	ite	hi
 8005896:	2301      	movhi	r3, #1
 8005898:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800589c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80058a0:	4605      	mov	r5, r0
 80058a2:	460c      	mov	r4, r1
  int32_t error = deltaX - deltaY;
  int32_t error2;
	
  ssd1306_DrawPixel(x2, y2, color);
 80058a4:	465a      	mov	r2, fp
 80058a6:	4649      	mov	r1, r9
 80058a8:	4650      	mov	r0, sl
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80058aa:	9302      	str	r3, [sp, #8]
  int32_t error = deltaX - deltaY;
 80058ac:	eba7 0608 	sub.w	r6, r7, r8
  ssd1306_DrawPixel(x2, y2, color);
 80058b0:	f7ff ff54 	bl	800575c <ssd1306_DrawPixel>
	while((x1 != x2) || (y1 != y2))
	{
    ssd1306_DrawPixel(x1, y1, color);
    error2 = error * 2;
    if(error2 > -deltaY)
 80058b4:	f1c8 0300 	rsb	r3, r8, #0
	while((x1 != x2) || (y1 != y2))
 80058b8:	4555      	cmp	r5, sl
 80058ba:	d104      	bne.n	80058c6 <ssd1306_Line+0x60>
 80058bc:	454c      	cmp	r4, r9
 80058be:	d102      	bne.n	80058c6 <ssd1306_Line+0x60>
    {
    /*nothing to do*/
    }
  }
  return;
}
 80058c0:	b005      	add	sp, #20
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ssd1306_DrawPixel(x1, y1, color);
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	465a      	mov	r2, fp
 80058cc:	9303      	str	r3, [sp, #12]
 80058ce:	f7ff ff45 	bl	800575c <ssd1306_DrawPixel>
    if(error2 > -deltaY)
 80058d2:	9b03      	ldr	r3, [sp, #12]
    error2 = error * 2;
 80058d4:	0072      	lsls	r2, r6, #1
    if(error2 > -deltaY)
 80058d6:	4293      	cmp	r3, r2
      x1 += signX;
 80058d8:	bfbf      	itttt	lt
 80058da:	9901      	ldrlt	r1, [sp, #4]
      error -= deltaY;
 80058dc:	eba6 0608 	sublt.w	r6, r6, r8
      x1 += signX;
 80058e0:	186d      	addlt	r5, r5, r1
 80058e2:	b2ed      	uxtblt	r5, r5
    if(error2 < deltaX)
 80058e4:	4297      	cmp	r7, r2
      y1 += signY;
 80058e6:	bfc1      	itttt	gt
 80058e8:	9a02      	ldrgt	r2, [sp, #8]
      error += deltaX;
 80058ea:	19f6      	addgt	r6, r6, r7
      y1 += signY;
 80058ec:	18a4      	addgt	r4, r4, r2
 80058ee:	b2e4      	uxtbgt	r4, r4
 80058f0:	e7e2      	b.n	80058b8 <ssd1306_Line+0x52>

080058f2 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80058f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80058f6:	461c      	mov	r4, r3
 80058f8:	4617      	mov	r7, r2
 80058fa:	460e      	mov	r6, r1
 80058fc:	4680      	mov	r8, r0
 80058fe:	f89d 5020 	ldrb.w	r5, [sp, #32]
  ssd1306_Line(x1,y1,x2,y1,color);
 8005902:	460b      	mov	r3, r1
 8005904:	9500      	str	r5, [sp, #0]
 8005906:	f7ff ffae 	bl	8005866 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 800590a:	4623      	mov	r3, r4
 800590c:	463a      	mov	r2, r7
 800590e:	4631      	mov	r1, r6
 8005910:	4638      	mov	r0, r7
 8005912:	9500      	str	r5, [sp, #0]
 8005914:	f7ff ffa7 	bl	8005866 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8005918:	4623      	mov	r3, r4
 800591a:	4642      	mov	r2, r8
 800591c:	4621      	mov	r1, r4
 800591e:	4638      	mov	r0, r7
 8005920:	9500      	str	r5, [sp, #0]
 8005922:	f7ff ffa0 	bl	8005866 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8005926:	4633      	mov	r3, r6
 8005928:	4642      	mov	r2, r8
 800592a:	4621      	mov	r1, r4
 800592c:	4640      	mov	r0, r8
 800592e:	9508      	str	r5, [sp, #32]

  return;
}
 8005930:	b002      	add	sp, #8
 8005932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_Line(x1,y2,x1,y1,color);
 8005936:	f7ff bf96 	b.w	8005866 <ssd1306_Line>
 800593a:	0000      	movs	r0, r0
 800593c:	0000      	movs	r0, r0
	...

08005940 <ssd1306_Print>:

void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr, int hours, int minutes, int seconds){
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	b09f      	sub	sp, #124	; 0x7c
 8005946:	4683      	mov	fp, r0
	char lati[10], longi[10], alti[10], velo[10], rssi_c[10], snr_c[10], hours_c[10], minutes_c[10], seconds_c[10];
	//float lines = (voltage - 3.0)/0.0635789;
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 8005948:	9828      	ldr	r0, [sp, #160]	; 0xa0
void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr, int hours, int minutes, int seconds){
 800594a:	4698      	mov	r8, r3
 800594c:	4691      	mov	r9, r2
 800594e:	468a      	mov	sl, r1
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 8005950:	f7fa fd6a 	bl	8000428 <__aeabi_f2d>
 8005954:	2200      	movs	r2, #0
 8005956:	4bbe      	ldr	r3, [pc, #760]	; (8005c50 <ssd1306_Print+0x310>)
 8005958:	f7fa fc06 	bl	8000168 <__aeabi_dsub>
 800595c:	f7fb f86c 	bl	8000a38 <__aeabi_d2iz>
 8005960:	f7fa fd50 	bl	8000404 <__aeabi_i2d>
 8005964:	a3b8      	add	r3, pc, #736	; (adr r3, 8005c48 <ssd1306_Print+0x308>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fedf 	bl	800072c <__aeabi_ddiv>
 800596e:	f7fb f863 	bl	8000a38 <__aeabi_d2iz>
 8005972:	2813      	cmp	r0, #19
 8005974:	bfa8      	it	ge
 8005976:	2013      	movge	r0, #19
 8005978:	4607      	mov	r7, r0
	if ( lines_i > 19 ) lines_i = 19;

	ftoa(latitude, lati, 6);
 800597a:	4658      	mov	r0, fp
 800597c:	f7fa fd54 	bl	8000428 <__aeabi_f2d>
 8005980:	2306      	movs	r3, #6
 8005982:	aa03      	add	r2, sp, #12
void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr, int hours, int minutes, int seconds){
 8005984:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005986:	9e2b      	ldr	r6, [sp, #172]	; 0xac
	ftoa(latitude, lati, 6);
 8005988:	f7ff fd5a 	bl	8005440 <ftoa>
	ftoa(longitude, longi, 6);
 800598c:	4650      	mov	r0, sl
 800598e:	f7fa fd4b 	bl	8000428 <__aeabi_f2d>
 8005992:	2306      	movs	r3, #6
 8005994:	aa06      	add	r2, sp, #24
 8005996:	f7ff fd53 	bl	8005440 <ftoa>
	ftoa(altitude, alti, 1);
 800599a:	4648      	mov	r0, r9
 800599c:	f7fa fd44 	bl	8000428 <__aeabi_f2d>
 80059a0:	2301      	movs	r3, #1
 80059a2:	aa09      	add	r2, sp, #36	; 0x24
 80059a4:	f7ff fd4c 	bl	8005440 <ftoa>
	ftoa(velocity, velo, 1);
 80059a8:	4640      	mov	r0, r8
 80059aa:	f7fa fd3d 	bl	8000428 <__aeabi_f2d>
 80059ae:	2301      	movs	r3, #1
 80059b0:	aa0c      	add	r2, sp, #48	; 0x30
 80059b2:	f7ff fd45 	bl	8005440 <ftoa>
	itoa(-rssi, rssi_c, 10);
 80059b6:	220a      	movs	r2, #10
 80059b8:	a90f      	add	r1, sp, #60	; 0x3c
 80059ba:	4260      	negs	r0, r4
 80059bc:	f000 fdc0 	bl	8006540 <itoa>
	itoa(snr, snr_c, 10);
 80059c0:	220a      	movs	r2, #10
 80059c2:	a912      	add	r1, sp, #72	; 0x48
 80059c4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80059c6:	f000 fdbb 	bl	8006540 <itoa>
	itoa(hours, hours_c, 10);
 80059ca:	220a      	movs	r2, #10
 80059cc:	a915      	add	r1, sp, #84	; 0x54
 80059ce:	4630      	mov	r0, r6
 80059d0:	f000 fdb6 	bl	8006540 <itoa>
	itoa(minutes, minutes_c, 10);
 80059d4:	220a      	movs	r2, #10
 80059d6:	a918      	add	r1, sp, #96	; 0x60
 80059d8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80059da:	f000 fdb1 	bl	8006540 <itoa>
	itoa(seconds, seconds_c, 10);
 80059de:	220a      	movs	r2, #10
 80059e0:	a91b      	add	r1, sp, #108	; 0x6c
 80059e2:	982d      	ldr	r0, [sp, #180]	; 0xb4
 80059e4:	f000 fdac 	bl	8006540 <itoa>



	//time_t

    ssd1306_Fill(Black);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7ff fe29 	bl	8005640 <ssd1306_Fill>

    //rysowanie wskaźnika baterii
    ssd1306_DrawRectangle( 0, 0, 20, 8, White);
 80059ee:	2501      	movs	r5, #1
 80059f0:	2100      	movs	r1, #0
 80059f2:	2308      	movs	r3, #8
 80059f4:	4608      	mov	r0, r1
 80059f6:	2214      	movs	r2, #20
 80059f8:	9500      	str	r5, [sp, #0]
 80059fa:	f7ff ff7a 	bl	80058f2 <ssd1306_DrawRectangle>
    ssd1306_DrawRectangle( 21, 2, 22, 6, White);
 80059fe:	9500      	str	r5, [sp, #0]
 8005a00:	2306      	movs	r3, #6
 8005a02:	2216      	movs	r2, #22
 8005a04:	2102      	movs	r1, #2
 8005a06:	2015      	movs	r0, #21
 8005a08:	f7ff ff73 	bl	80058f2 <ssd1306_DrawRectangle>
    for(int i = 1; i<=lines_i ;i++){
 8005a0c:	46a8      	mov	r8, r5
 8005a0e:	45b8      	cmp	r8, r7
 8005a10:	f340 80f8 	ble.w	8005c04 <ssd1306_Print+0x2c4>
    	ssd1306_Line(i,1,i,7,White);
    }

    //rysowanie wskaźnika sygnału
    ssd1306_DrawRectangle( 111, 5, 112, 8, White);
 8005a14:	9500      	str	r5, [sp, #0]
 8005a16:	2308      	movs	r3, #8
 8005a18:	2270      	movs	r2, #112	; 0x70
 8005a1a:	2105      	movs	r1, #5
 8005a1c:	206f      	movs	r0, #111	; 0x6f
 8005a1e:	f7ff ff68 	bl	80058f2 <ssd1306_DrawRectangle>
    if( rssi < 100) ssd1306_DrawRectangle( 114, 4, 115, 8, White);
 8005a22:	2c63      	cmp	r4, #99	; 0x63
 8005a24:	dc2a      	bgt.n	8005a7c <ssd1306_Print+0x13c>
 8005a26:	9500      	str	r5, [sp, #0]
 8005a28:	2308      	movs	r3, #8
 8005a2a:	2273      	movs	r2, #115	; 0x73
 8005a2c:	2104      	movs	r1, #4
 8005a2e:	2072      	movs	r0, #114	; 0x72
 8005a30:	f7ff ff5f 	bl	80058f2 <ssd1306_DrawRectangle>
    if( rssi < 90) ssd1306_DrawRectangle( 117, 3, 118, 8, White);
 8005a34:	2c59      	cmp	r4, #89	; 0x59
 8005a36:	dc21      	bgt.n	8005a7c <ssd1306_Print+0x13c>
 8005a38:	9500      	str	r5, [sp, #0]
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	2276      	movs	r2, #118	; 0x76
 8005a3e:	2103      	movs	r1, #3
 8005a40:	2075      	movs	r0, #117	; 0x75
 8005a42:	f7ff ff56 	bl	80058f2 <ssd1306_DrawRectangle>
    if( rssi < 80) ssd1306_DrawRectangle( 120, 2, 121, 8, White);
 8005a46:	2c4f      	cmp	r4, #79	; 0x4f
 8005a48:	dc18      	bgt.n	8005a7c <ssd1306_Print+0x13c>
 8005a4a:	9500      	str	r5, [sp, #0]
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	2279      	movs	r2, #121	; 0x79
 8005a50:	2102      	movs	r1, #2
 8005a52:	2078      	movs	r0, #120	; 0x78
 8005a54:	f7ff ff4d 	bl	80058f2 <ssd1306_DrawRectangle>
    if( rssi < 70) ssd1306_DrawRectangle( 123, 1, 124, 8, White);
 8005a58:	2c45      	cmp	r4, #69	; 0x45
 8005a5a:	dc0f      	bgt.n	8005a7c <ssd1306_Print+0x13c>
 8005a5c:	9500      	str	r5, [sp, #0]
 8005a5e:	2308      	movs	r3, #8
 8005a60:	227c      	movs	r2, #124	; 0x7c
 8005a62:	2101      	movs	r1, #1
 8005a64:	207b      	movs	r0, #123	; 0x7b
 8005a66:	f7ff ff44 	bl	80058f2 <ssd1306_DrawRectangle>
    if( rssi < 60) ssd1306_DrawRectangle( 126, 0, 127, 8, White);
 8005a6a:	2c3b      	cmp	r4, #59	; 0x3b
 8005a6c:	dc06      	bgt.n	8005a7c <ssd1306_Print+0x13c>
 8005a6e:	9500      	str	r5, [sp, #0]
 8005a70:	2308      	movs	r3, #8
 8005a72:	227f      	movs	r2, #127	; 0x7f
 8005a74:	2100      	movs	r1, #0
 8005a76:	207e      	movs	r0, #126	; 0x7e
 8005a78:	f7ff ff3b 	bl	80058f2 <ssd1306_DrawRectangle>
    SSD1306.CurrentX = x;
 8005a7c:	222b      	movs	r2, #43	; 0x2b
 8005a7e:	4b75      	ldr	r3, [pc, #468]	; (8005c54 <ssd1306_Print+0x314>)
 8005a80:	4c75      	ldr	r4, [pc, #468]	; (8005c58 <ssd1306_Print+0x318>)
 8005a82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005a84:	2200      	movs	r2, #0

    //rysowanie czasu
    ssd1306_SetCursor(43, 0);
	if(hours >= 10) ssd1306_WriteString((char*)hours_c, Font_6x8, White);
 8005a86:	2e09      	cmp	r6, #9
    SSD1306.CurrentY = y;
 8005a88:	805a      	strh	r2, [r3, #2]
 8005a8a:	461e      	mov	r6, r3
	if(hours >= 10) ssd1306_WriteString((char*)hours_c, Font_6x8, White);
 8005a8c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005a90:	f04f 0301 	mov.w	r3, #1
 8005a94:	f340 80c1 	ble.w	8005c1a <ssd1306_Print+0x2da>
	else{
		ssd1306_WriteString("0", Font_6x8, White);
		ssd1306_WriteString((char*)hours_c, Font_6x8, White);
 8005a98:	a815      	add	r0, sp, #84	; 0x54
 8005a9a:	f7ff fecf 	bl	800583c <ssd1306_WriteString>
	}
	ssd1306_WriteString(":", Font_6x8, White);
 8005a9e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	486d      	ldr	r0, [pc, #436]	; (8005c5c <ssd1306_Print+0x31c>)
 8005aa6:	f7ff fec9 	bl	800583c <ssd1306_WriteString>

	if(minutes >= 10) ssd1306_WriteString((char*)minutes_c, Font_6x8, White);
 8005aaa:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005aae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005ab0:	2b09      	cmp	r3, #9
 8005ab2:	f04f 0301 	mov.w	r3, #1
 8005ab6:	f340 80b7 	ble.w	8005c28 <ssd1306_Print+0x2e8>
	else{
		ssd1306_WriteString("0", Font_6x8, White);
		ssd1306_WriteString((char*)minutes_c, Font_6x8, White);
 8005aba:	a818      	add	r0, sp, #96	; 0x60
 8005abc:	f7ff febe 	bl	800583c <ssd1306_WriteString>
	}
	ssd1306_WriteString(":", Font_6x8, White);
 8005ac0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4865      	ldr	r0, [pc, #404]	; (8005c5c <ssd1306_Print+0x31c>)
 8005ac8:	f7ff feb8 	bl	800583c <ssd1306_WriteString>

	if(seconds >= 10) ssd1306_WriteString((char*)seconds_c, Font_6x8, White);
 8005acc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005ad0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005ad2:	2b09      	cmp	r3, #9
 8005ad4:	f04f 0301 	mov.w	r3, #1
 8005ad8:	f340 80ad 	ble.w	8005c36 <ssd1306_Print+0x2f6>
    SSD1306.CurrentX = x;
 8005adc:	2502      	movs	r5, #2
    SSD1306.CurrentY = y;
 8005ade:	270e      	movs	r7, #14
		ssd1306_WriteString((char*)seconds_c, Font_6x8, White);
	}


    ssd1306_SetCursor(2, 6+8);
    ssd1306_WriteString("RSSI:", Font_6x8, White);
 8005ae0:	4c5d      	ldr	r4, [pc, #372]	; (8005c58 <ssd1306_Print+0x318>)
		ssd1306_WriteString((char*)seconds_c, Font_6x8, White);
 8005ae2:	a81b      	add	r0, sp, #108	; 0x6c
 8005ae4:	f7ff feaa 	bl	800583c <ssd1306_WriteString>
    ssd1306_WriteString("RSSI:", Font_6x8, White);
 8005ae8:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005aec:	2301      	movs	r3, #1
 8005aee:	485c      	ldr	r0, [pc, #368]	; (8005c60 <ssd1306_Print+0x320>)
    SSD1306.CurrentX = x;
 8005af0:	8035      	strh	r5, [r6, #0]
    SSD1306.CurrentY = y;
 8005af2:	8077      	strh	r7, [r6, #2]
    ssd1306_WriteString("RSSI:", Font_6x8, White);
 8005af4:	f7ff fea2 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(2+30, 6+8);
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8005af8:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8005afc:	2320      	movs	r3, #32
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8005afe:	a80f      	add	r0, sp, #60	; 0x3c
    SSD1306.CurrentX = x;
 8005b00:	8033      	strh	r3, [r6, #0]
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8005b02:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8005b04:	8077      	strh	r7, [r6, #2]
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8005b06:	f7ff fe99 	bl	800583c <ssd1306_WriteString>
    ssd1306_WriteString("dBm", Font_6x8, White);
 8005b0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4854      	ldr	r0, [pc, #336]	; (8005c64 <ssd1306_Print+0x324>)
 8005b12:	f7ff fe93 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(75, 6+8);
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8005b16:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8005b1a:	234b      	movs	r3, #75	; 0x4b
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8005b1c:	4852      	ldr	r0, [pc, #328]	; (8005c68 <ssd1306_Print+0x328>)
    SSD1306.CurrentX = x;
 8005b1e:	8033      	strh	r3, [r6, #0]
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8005b20:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8005b22:	8077      	strh	r7, [r6, #2]
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8005b24:	f7ff fe8a 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(75+25, 6+8);
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 8005b28:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8005b2c:	2364      	movs	r3, #100	; 0x64
    SSD1306.CurrentY = y;
 8005b2e:	f04f 0818 	mov.w	r8, #24
    SSD1306.CurrentX = x;
 8005b32:	8033      	strh	r3, [r6, #0]
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 8005b34:	a812      	add	r0, sp, #72	; 0x48
 8005b36:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8005b38:	8077      	strh	r7, [r6, #2]
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 8005b3a:	f7ff fe7f 	bl	800583c <ssd1306_WriteString>
    ssd1306_WriteString("dB", Font_6x8, White);
 8005b3e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005b42:	2301      	movs	r3, #1
 8005b44:	4849      	ldr	r0, [pc, #292]	; (8005c6c <ssd1306_Print+0x32c>)
 8005b46:	f7ff fe79 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(2, 2*(2+8)+4);
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8005b4a:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8005b4e:	273e      	movs	r7, #62	; 0x3e
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8005b50:	2301      	movs	r3, #1
 8005b52:	4847      	ldr	r0, [pc, #284]	; (8005c70 <ssd1306_Print+0x330>)
    SSD1306.CurrentX = x;
 8005b54:	8035      	strh	r5, [r6, #0]
    SSD1306.CurrentY = y;
 8005b56:	f8a6 8002 	strh.w	r8, [r6, #2]
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8005b5a:	f7ff fe6f 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 2*(2+8)+4);
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8005b5e:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005b62:	f8a6 8002 	strh.w	r8, [r6, #2]
 8005b66:	f04f 0822 	mov.w	r8, #34	; 0x22
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	a803      	add	r0, sp, #12
    SSD1306.CurrentX = x;
 8005b6e:	8037      	strh	r7, [r6, #0]
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8005b70:	f7ff fe64 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(2, 3*(2+8)+4);
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8005b74:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005b78:	2301      	movs	r3, #1
 8005b7a:	483e      	ldr	r0, [pc, #248]	; (8005c74 <ssd1306_Print+0x334>)
    SSD1306.CurrentX = x;
 8005b7c:	8035      	strh	r5, [r6, #0]
    SSD1306.CurrentY = y;
 8005b7e:	f8a6 8002 	strh.w	r8, [r6, #2]
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8005b82:	f7ff fe5b 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 3*(2+8)+4);
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8005b86:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005b8a:	f8a6 8002 	strh.w	r8, [r6, #2]
 8005b8e:	f04f 082c 	mov.w	r8, #44	; 0x2c
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8005b92:	2301      	movs	r3, #1
 8005b94:	a806      	add	r0, sp, #24
    SSD1306.CurrentX = x;
 8005b96:	8037      	strh	r7, [r6, #0]
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8005b98:	f7ff fe50 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(2, 4*(2+8)+4);
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 8005b9c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4835      	ldr	r0, [pc, #212]	; (8005c78 <ssd1306_Print+0x338>)
    SSD1306.CurrentX = x;
 8005ba4:	8035      	strh	r5, [r6, #0]
    SSD1306.CurrentY = y;
 8005ba6:	f8a6 8002 	strh.w	r8, [r6, #2]
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 8005baa:	f7ff fe47 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 4*(2+8)+4);
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 8005bae:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	a809      	add	r0, sp, #36	; 0x24
    SSD1306.CurrentX = x;
 8005bb6:	8037      	strh	r7, [r6, #0]
    SSD1306.CurrentY = y;
 8005bb8:	f8a6 8002 	strh.w	r8, [r6, #2]
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 8005bbc:	f7ff fe3e 	bl	800583c <ssd1306_WriteString>
    ssd1306_WriteString(" m", Font_6x8, White);
 8005bc0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	482d      	ldr	r0, [pc, #180]	; (8005c7c <ssd1306_Print+0x33c>)
 8005bc8:	f7ff fe38 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(2, 5*(2+8)+4);
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 8005bcc:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8005bd0:	8035      	strh	r5, [r6, #0]
    SSD1306.CurrentY = y;
 8005bd2:	2536      	movs	r5, #54	; 0x36
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	482a      	ldr	r0, [pc, #168]	; (8005c80 <ssd1306_Print+0x340>)
    SSD1306.CurrentY = y;
 8005bd8:	8075      	strh	r5, [r6, #2]
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 8005bda:	f7ff fe2f 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 5*(2+8)+4);
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 8005bde:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005be2:	2301      	movs	r3, #1
 8005be4:	a80c      	add	r0, sp, #48	; 0x30
    SSD1306.CurrentX = x;
 8005be6:	8037      	strh	r7, [r6, #0]
    SSD1306.CurrentY = y;
 8005be8:	8075      	strh	r5, [r6, #2]
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 8005bea:	f7ff fe27 	bl	800583c <ssd1306_WriteString>
    ssd1306_WriteString(" km/h", Font_6x8, White);
 8005bee:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	4823      	ldr	r0, [pc, #140]	; (8005c84 <ssd1306_Print+0x344>)
 8005bf6:	f7ff fe21 	bl	800583c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8005bfa:	f7ff fd2f 	bl	800565c <ssd1306_UpdateScreen>
}
 8005bfe:	b01f      	add	sp, #124	; 0x7c
 8005c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	ssd1306_Line(i,1,i,7,White);
 8005c04:	fa5f f288 	uxtb.w	r2, r8
 8005c08:	9500      	str	r5, [sp, #0]
 8005c0a:	2307      	movs	r3, #7
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7ff fe29 	bl	8005866 <ssd1306_Line>
    for(int i = 1; i<=lines_i ;i++){
 8005c14:	f108 0801 	add.w	r8, r8, #1
 8005c18:	e6f9      	b.n	8005a0e <ssd1306_Print+0xce>
		ssd1306_WriteString("0", Font_6x8, White);
 8005c1a:	481b      	ldr	r0, [pc, #108]	; (8005c88 <ssd1306_Print+0x348>)
 8005c1c:	f7ff fe0e 	bl	800583c <ssd1306_WriteString>
		ssd1306_WriteString((char*)hours_c, Font_6x8, White);
 8005c20:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005c24:	2301      	movs	r3, #1
 8005c26:	e737      	b.n	8005a98 <ssd1306_Print+0x158>
		ssd1306_WriteString("0", Font_6x8, White);
 8005c28:	4817      	ldr	r0, [pc, #92]	; (8005c88 <ssd1306_Print+0x348>)
 8005c2a:	f7ff fe07 	bl	800583c <ssd1306_WriteString>
		ssd1306_WriteString((char*)minutes_c, Font_6x8, White);
 8005c2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005c32:	2301      	movs	r3, #1
 8005c34:	e741      	b.n	8005aba <ssd1306_Print+0x17a>
		ssd1306_WriteString("0", Font_6x8, White);
 8005c36:	4814      	ldr	r0, [pc, #80]	; (8005c88 <ssd1306_Print+0x348>)
 8005c38:	f7ff fe00 	bl	800583c <ssd1306_WriteString>
		ssd1306_WriteString((char*)seconds_c, Font_6x8, White);
 8005c3c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8005c40:	2301      	movs	r3, #1
 8005c42:	e74b      	b.n	8005adc <ssd1306_Print+0x19c>
 8005c44:	f3af 8000 	nop.w
 8005c48:	f0373520 	.word	0xf0373520
 8005c4c:	3fb046b4 	.word	0x3fb046b4
 8005c50:	40080000 	.word	0x40080000
 8005c54:	2000038c 	.word	0x2000038c
 8005c58:	20000120 	.word	0x20000120
 8005c5c:	0800b2e4 	.word	0x0800b2e4
 8005c60:	0800b2e0 	.word	0x0800b2e0
 8005c64:	0800b2e6 	.word	0x0800b2e6
 8005c68:	0800b2ea 	.word	0x0800b2ea
 8005c6c:	0800b2ef 	.word	0x0800b2ef
 8005c70:	0800b2f2 	.word	0x0800b2f2
 8005c74:	0800b2fc 	.word	0x0800b2fc
 8005c78:	0800b307 	.word	0x0800b307
 8005c7c:	0800b311 	.word	0x0800b311
 8005c80:	0800b314 	.word	0x0800b314
 8005c84:	0800b31e 	.word	0x0800b31e
 8005c88:	0800b281 	.word	0x0800b281
 8005c8c:	00000000 	.word	0x00000000

08005c90 <ssd1306_Print_No_Signal>:

void ssd1306_Print_No_Signal(float voltage){
 8005c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c94:	4604      	mov	r4, r0

    ssd1306_Fill(Black);
 8005c96:	2000      	movs	r0, #0
 8005c98:	f7ff fcd2 	bl	8005640 <ssd1306_Fill>
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7fa fbc3 	bl	8000428 <__aeabi_f2d>
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <ssd1306_Print_No_Signal+0x140>)
 8005ca6:	f7fa fa5f 	bl	8000168 <__aeabi_dsub>
 8005caa:	f7fa fec5 	bl	8000a38 <__aeabi_d2iz>
 8005cae:	f7fa fba9 	bl	8000404 <__aeabi_i2d>
 8005cb2:	a345      	add	r3, pc, #276	; (adr r3, 8005dc8 <ssd1306_Print_No_Signal+0x138>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fd38 	bl	800072c <__aeabi_ddiv>
 8005cbc:	f7fa febc 	bl	8000a38 <__aeabi_d2iz>
 8005cc0:	2813      	cmp	r0, #19
 8005cc2:	bfa8      	it	ge
 8005cc4:	2013      	movge	r0, #19
	if ( lines_i > 19 ) lines_i = 19;

    //rysowanie wskaźnika baterii
    ssd1306_DrawRectangle( 0, 0, 20, 8, White);
 8005cc6:	2401      	movs	r4, #1
 8005cc8:	2100      	movs	r1, #0
 8005cca:	2308      	movs	r3, #8
 8005ccc:	2214      	movs	r2, #20
 8005cce:	4605      	mov	r5, r0
 8005cd0:	9400      	str	r4, [sp, #0]
 8005cd2:	4608      	mov	r0, r1
 8005cd4:	f7ff fe0d 	bl	80058f2 <ssd1306_DrawRectangle>
    ssd1306_DrawRectangle( 21, 2, 22, 6, White);
 8005cd8:	9400      	str	r4, [sp, #0]
 8005cda:	2306      	movs	r3, #6
 8005cdc:	2216      	movs	r2, #22
 8005cde:	2102      	movs	r1, #2
 8005ce0:	2015      	movs	r0, #21
 8005ce2:	f7ff fe06 	bl	80058f2 <ssd1306_DrawRectangle>
    for(int i = 1; i<=lines_i ;i++){
    	ssd1306_Line(i,1,i,7,White);
 8005ce6:	4626      	mov	r6, r4
    for(int i = 1; i<=lines_i ;i++){
 8005ce8:	42ac      	cmp	r4, r5
 8005cea:	dd62      	ble.n	8005db2 <ssd1306_Print_No_Signal+0x122>
    SSD1306.CurrentX = x;
 8005cec:	236e      	movs	r3, #110	; 0x6e
    SSD1306.CurrentY = y;
 8005cee:	2600      	movs	r6, #0
    SSD1306.CurrentX = x;
 8005cf0:	272d      	movs	r7, #45	; 0x2d
 8005cf2:	4c38      	ldr	r4, [pc, #224]	; (8005dd4 <ssd1306_Print_No_Signal+0x144>)
    }

    //rysowanie wskaźnika sygnału
    ssd1306_SetCursor(110, 0);
    ssd1306_WriteString("???", Font_6x8, White);
 8005cf4:	4d38      	ldr	r5, [pc, #224]	; (8005dd8 <ssd1306_Print_No_Signal+0x148>)
    SSD1306.CurrentX = x;
 8005cf6:	8023      	strh	r3, [r4, #0]
    ssd1306_WriteString("???", Font_6x8, White);
 8005cf8:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4837      	ldr	r0, [pc, #220]	; (8005ddc <ssd1306_Print_No_Signal+0x14c>)
    SSD1306.CurrentY = y;
 8005d00:	8066      	strh	r6, [r4, #2]
    ssd1306_WriteString("???", Font_6x8, White);
 8005d02:	f7ff fd9b 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(45, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8005d06:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4834      	ldr	r0, [pc, #208]	; (8005de0 <ssd1306_Print_No_Signal+0x150>)
    SSD1306.CurrentY = y;
 8005d0e:	8066      	strh	r6, [r4, #2]
    SSD1306.CurrentX = x;
 8005d10:	8027      	strh	r7, [r4, #0]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8005d12:	f7ff fd93 	bl	800583c <ssd1306_WriteString>
    SSD1306.CurrentX = x;
 8005d16:	2311      	movs	r3, #17
 8005d18:	8023      	strh	r3, [r4, #0]
    SSD1306.CurrentY = y;
 8005d1a:	231a      	movs	r3, #26

    ssd1306_SetCursor(17, 26);
    ssd1306_WriteString("!", Font_16x26, White);
 8005d1c:	4a31      	ldr	r2, [pc, #196]	; (8005de4 <ssd1306_Print_No_Signal+0x154>)
    SSD1306.CurrentY = y;
 8005d1e:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("!", Font_16x26, White);
 8005d20:	ca06      	ldmia	r2, {r1, r2}
 8005d22:	2301      	movs	r3, #1
 8005d24:	4830      	ldr	r0, [pc, #192]	; (8005de8 <ssd1306_Print_No_Signal+0x158>)

    ssd1306_Line(5,50,45,50,White);
 8005d26:	2601      	movs	r6, #1
    ssd1306_WriteString("!", Font_16x26, White);
 8005d28:	f7ff fd88 	bl	800583c <ssd1306_WriteString>
    ssd1306_Line(5,50,45,50,White);
 8005d2c:	2332      	movs	r3, #50	; 0x32
 8005d2e:	463a      	mov	r2, r7
 8005d30:	4619      	mov	r1, r3
 8005d32:	9600      	str	r6, [sp, #0]
 8005d34:	2005      	movs	r0, #5
 8005d36:	f7ff fd96 	bl	8005866 <ssd1306_Line>
    ssd1306_Line(25,15,45,50,White);
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	9600      	str	r6, [sp, #0]
 8005d3e:	2332      	movs	r3, #50	; 0x32
 8005d40:	210f      	movs	r1, #15
 8005d42:	2019      	movs	r0, #25
 8005d44:	f7ff fd8f 	bl	8005866 <ssd1306_Line>
    ssd1306_Line(25,15,5,50,White);
 8005d48:	9600      	str	r6, [sp, #0]
 8005d4a:	2332      	movs	r3, #50	; 0x32
 8005d4c:	2205      	movs	r2, #5
 8005d4e:	210f      	movs	r1, #15
 8005d50:	2019      	movs	r0, #25
 8005d52:	f7ff fd88 	bl	8005866 <ssd1306_Line>
    SSD1306.CurrentX = x;
 8005d56:	2341      	movs	r3, #65	; 0x41
 8005d58:	8023      	strh	r3, [r4, #0]
    SSD1306.CurrentY = y;
 8005d5a:	230c      	movs	r3, #12

    ssd1306_SetCursor(65, 12);
    ssd1306_WriteString("ERROR", Font_7x10, White);
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <ssd1306_Print_No_Signal+0x15c>)
    SSD1306.CurrentY = y;
 8005d5e:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("ERROR", Font_7x10, White);
 8005d60:	ca06      	ldmia	r2, {r1, r2}
 8005d62:	4633      	mov	r3, r6
 8005d64:	4822      	ldr	r0, [pc, #136]	; (8005df0 <ssd1306_Print_No_Signal+0x160>)
 8005d66:	f7ff fd69 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(50, 25);
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8005d6a:	e895 0006 	ldmia.w	r5, {r1, r2}
    SSD1306.CurrentY = y;
 8005d6e:	2319      	movs	r3, #25
    SSD1306.CurrentX = x;
 8005d70:	f04f 0832 	mov.w	r8, #50	; 0x32
    SSD1306.CurrentY = y;
 8005d74:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8005d76:	481f      	ldr	r0, [pc, #124]	; (8005df4 <ssd1306_Print_No_Signal+0x164>)
 8005d78:	4633      	mov	r3, r6
    SSD1306.CurrentX = x;
 8005d7a:	f8a4 8000 	strh.w	r8, [r4]
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8005d7e:	f7ff fd5d 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(50, 25 + 10);
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8005d82:	e895 0006 	ldmia.w	r5, {r1, r2}
    SSD1306.CurrentY = y;
 8005d86:	2323      	movs	r3, #35	; 0x23
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8005d88:	481b      	ldr	r0, [pc, #108]	; (8005df8 <ssd1306_Print_No_Signal+0x168>)
    SSD1306.CurrentY = y;
 8005d8a:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8005d8c:	4633      	mov	r3, r6
    SSD1306.CurrentX = x;
 8005d8e:	f8a4 8000 	strh.w	r8, [r4]
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8005d92:	f7ff fd53 	bl	800583c <ssd1306_WriteString>
    ssd1306_SetCursor(50, 25 + 20);
    ssd1306_WriteString("  packets!", Font_6x8, White);
 8005d96:	e895 0006 	ldmia.w	r5, {r1, r2}
 8005d9a:	4633      	mov	r3, r6
 8005d9c:	4817      	ldr	r0, [pc, #92]	; (8005dfc <ssd1306_Print_No_Signal+0x16c>)
    SSD1306.CurrentX = x;
 8005d9e:	f8a4 8000 	strh.w	r8, [r4]
    SSD1306.CurrentY = y;
 8005da2:	8067      	strh	r7, [r4, #2]
    ssd1306_WriteString("  packets!", Font_6x8, White);
 8005da4:	f7ff fd4a 	bl	800583c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8005da8:	b002      	add	sp, #8
 8005daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_UpdateScreen();
 8005dae:	f7ff bc55 	b.w	800565c <ssd1306_UpdateScreen>
    	ssd1306_Line(i,1,i,7,White);
 8005db2:	b2e2      	uxtb	r2, r4
 8005db4:	9600      	str	r6, [sp, #0]
 8005db6:	2307      	movs	r3, #7
 8005db8:	2101      	movs	r1, #1
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7ff fd53 	bl	8005866 <ssd1306_Line>
    for(int i = 1; i<=lines_i ;i++){
 8005dc0:	3401      	adds	r4, #1
 8005dc2:	e791      	b.n	8005ce8 <ssd1306_Print_No_Signal+0x58>
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	f0373520 	.word	0xf0373520
 8005dcc:	3fb046b4 	.word	0x3fb046b4
 8005dd0:	40080000 	.word	0x40080000
 8005dd4:	2000038c 	.word	0x2000038c
 8005dd8:	20000120 	.word	0x20000120
 8005ddc:	0800b324 	.word	0x0800b324
 8005de0:	0800b328 	.word	0x0800b328
 8005de4:	20000118 	.word	0x20000118
 8005de8:	0800b35c 	.word	0x0800b35c
 8005dec:	20000128 	.word	0x20000128
 8005df0:	0800b331 	.word	0x0800b331
 8005df4:	0800b337 	.word	0x0800b337
 8005df8:	0800b345 	.word	0x0800b345
 8005dfc:	0800b353 	.word	0x0800b353

08005e00 <ssd1306_Print_initial_screen>:

void ssd1306_Print_initial_screen(){
 8005e00:	b570      	push	{r4, r5, r6, lr}

    ssd1306_Fill(Black);
 8005e02:	2000      	movs	r0, #0
 8005e04:	f7ff fc1c 	bl	8005640 <ssd1306_Fill>
    SSD1306.CurrentX = x;
 8005e08:	232d      	movs	r3, #45	; 0x2d
 8005e0a:	4d15      	ldr	r5, [pc, #84]	; (8005e60 <ssd1306_Print_initial_screen+0x60>)

    ssd1306_SetCursor(45, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8005e0c:	4c15      	ldr	r4, [pc, #84]	; (8005e64 <ssd1306_Print_initial_screen+0x64>)
    SSD1306.CurrentX = x;
 8005e0e:	802b      	strh	r3, [r5, #0]
    SSD1306.CurrentY = y;
 8005e10:	2300      	movs	r3, #0
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8005e12:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005e16:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8005e18:	4813      	ldr	r0, [pc, #76]	; (8005e68 <ssd1306_Print_initial_screen+0x68>)
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f7ff fd0e 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(5, 20);
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8005e20:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005e24:	2314      	movs	r3, #20
    SSD1306.CurrentX = x;
 8005e26:	2605      	movs	r6, #5
    SSD1306.CurrentY = y;
 8005e28:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8005e2a:	4810      	ldr	r0, [pc, #64]	; (8005e6c <ssd1306_Print_initial_screen+0x6c>)
 8005e2c:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8005e2e:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8005e30:	f7ff fd04 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(5, 30);
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8005e34:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005e38:	231e      	movs	r3, #30
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8005e3a:	480d      	ldr	r0, [pc, #52]	; (8005e70 <ssd1306_Print_initial_screen+0x70>)
    SSD1306.CurrentY = y;
 8005e3c:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8005e3e:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8005e40:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8005e42:	f7ff fcfb 	bl	800583c <ssd1306_WriteString>

    ssd1306_SetCursor(5, 40);
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8005e46:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8005e4a:	2328      	movs	r3, #40	; 0x28
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8005e4c:	4809      	ldr	r0, [pc, #36]	; (8005e74 <ssd1306_Print_initial_screen+0x74>)
    SSD1306.CurrentY = y;
 8005e4e:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8005e50:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8005e52:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8005e54:	f7ff fcf2 	bl	800583c <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8005e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ssd1306_UpdateScreen();
 8005e5c:	f7ff bbfe 	b.w	800565c <ssd1306_UpdateScreen>
 8005e60:	2000038c 	.word	0x2000038c
 8005e64:	20000120 	.word	0x20000120
 8005e68:	0800b328 	.word	0x0800b328
 8005e6c:	0800b35e 	.word	0x0800b35e
 8005e70:	0800b36b 	.word	0x0800b36b
 8005e74:	0800b37b 	.word	0x0800b37b

08005e78 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e78:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <HAL_MspInit+0x5c>)
{
 8005e7a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e7c:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005e7e:	2001      	movs	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e80:	f042 0201 	orr.w	r2, r2, #1
 8005e84:	619a      	str	r2, [r3, #24]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	f002 0201 	and.w	r2, r2, #1
 8005e8c:	9200      	str	r2, [sp, #0]
 8005e8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e96:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005e98:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e9a:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005e9c:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8005ea6:	f7fb fa87 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f7fb fab8 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2005      	movs	r0, #5
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	f7fb fa7f 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005eba:	2005      	movs	r0, #5
 8005ebc:	f7fb fab0 	bl	8001420 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ec0:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <HAL_MspInit+0x60>)
 8005ec2:	6853      	ldr	r3, [r2, #4]
 8005ec4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ece:	b003      	add	sp, #12
 8005ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40010000 	.word	0x40010000

08005edc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005edc:	4770      	bx	lr

08005ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ede:	e7fe      	b.n	8005ede <HardFault_Handler>

08005ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ee0:	e7fe      	b.n	8005ee0 <MemManage_Handler>

08005ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ee2:	e7fe      	b.n	8005ee2 <BusFault_Handler>

08005ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ee4:	e7fe      	b.n	8005ee4 <UsageFault_Handler>

08005ee6 <SVC_Handler>:
 8005ee6:	4770      	bx	lr

08005ee8 <DebugMon_Handler>:
 8005ee8:	4770      	bx	lr

08005eea <PendSV_Handler>:
 8005eea:	4770      	bx	lr

08005eec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eec:	f7fa bff4 	b.w	8000ed8 <HAL_IncTick>

08005ef0 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005ef0:	f7fc ba22 	b.w	8002338 <HAL_PWR_PVD_IRQHandler>

08005ef4 <RCC_IRQHandler>:
 8005ef4:	4770      	bx	lr
	...

08005ef8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <ADC1_2_IRQHandler+0x8>)
 8005efa:	f7fb b815 	b.w	8000f28 <HAL_ADC_IRQHandler>
 8005efe:	bf00      	nop
 8005f00:	200009c4 	.word	0x200009c4

08005f04 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005f06:	f7fb bf79 	b.w	8001dfc <HAL_PCD_IRQHandler>
 8005f0a:	bf00      	nop
 8005f0c:	20001710 	.word	0x20001710

08005f10 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <SPI1_IRQHandler+0x8>)
 8005f12:	f7fd ba69 	b.w	80033e8 <HAL_SPI_IRQHandler>
 8005f16:	bf00      	nop
 8005f18:	20000be4 	.word	0x20000be4

08005f1c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005f1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f20:	f7fb bbdc 	b.w	80016dc <HAL_GPIO_EXTI_IRQHandler>

08005f24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	460e      	mov	r6, r1
 8005f28:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	1ba3      	subs	r3, r4, r6
 8005f2e:	429d      	cmp	r5, r3
 8005f30:	dc01      	bgt.n	8005f36 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005f32:	4628      	mov	r0, r5
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005f36:	f3af 8000 	nop.w
 8005f3a:	f804 0b01 	strb.w	r0, [r4], #1
 8005f3e:	e7f5      	b.n	8005f2c <_read+0x8>

08005f40 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005f40:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <_sbrk+0x2c>)
{
 8005f44:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	b909      	cbnz	r1, 8005f4e <_sbrk+0xe>
		heap_end = &end;
 8005f4a:	4909      	ldr	r1, [pc, #36]	; (8005f70 <_sbrk+0x30>)
 8005f4c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005f4e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005f50:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005f52:	4402      	add	r2, r0
 8005f54:	428a      	cmp	r2, r1
 8005f56:	d906      	bls.n	8005f66 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005f58:	f000 fab0 	bl	80064bc <__errno>
 8005f5c:	230c      	movs	r3, #12
 8005f5e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005f64:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8005f66:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8005f68:	e7fc      	b.n	8005f64 <_sbrk+0x24>
 8005f6a:	bf00      	nop
 8005f6c:	20000794 	.word	0x20000794
 8005f70:	20001b80 	.word	0x20001b80

08005f74 <_close>:

int _close(int file)
{
	return -1;
}
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	4770      	bx	lr

08005f7a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005f7e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005f80:	604b      	str	r3, [r1, #4]
}
 8005f82:	4770      	bx	lr

08005f84 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005f84:	2001      	movs	r0, #1
 8005f86:	4770      	bx	lr

08005f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005f88:	2000      	movs	r0, #0
 8005f8a:	4770      	bx	lr

08005f8c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <SystemInit+0x40>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f042 0201 	orr.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	4a0d      	ldr	r2, [pc, #52]	; (8005fd0 <SystemInit+0x44>)
 8005f9a:	400a      	ands	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005fa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fa8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005fba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005fbe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005fc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <SystemInit+0x48>)
 8005fc6:	609a      	str	r2, [r3, #8]
#endif 
}
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	f8ff0000 	.word	0xf8ff0000
 8005fd4:	e000ed00 	.word	0xe000ed00

08005fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005fd8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8005fda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8005fde:	480a      	ldr	r0, [pc, #40]	; (8006008 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8005fe0:	4a0a      	ldr	r2, [pc, #40]	; (800600c <MX_USART2_UART_Init+0x34>)
 8005fe2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005fe6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fe8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005fee:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ff0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ff4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ff6:	f7fd fad9 	bl	80035ac <HAL_UART_Init>
 8005ffa:	b118      	cbz	r0, 8006004 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005ffc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006000:	f7ff b966 	b.w	80052d0 <Error_Handler>
}
 8006004:	bd08      	pop	{r3, pc}
 8006006:	bf00      	nop
 8006008:	20000c3c 	.word	0x20000c3c
 800600c:	40004400 	.word	0x40004400

08006010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006010:	b510      	push	{r4, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006016:	2210      	movs	r2, #16
 8006018:	2100      	movs	r1, #0
 800601a:	a802      	add	r0, sp, #8
 800601c:	f000 fab6 	bl	800658c <memset>
  if(uartHandle->Instance==USART2)
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	4b16      	ldr	r3, [pc, #88]	; (800607c <HAL_UART_MspInit+0x6c>)
 8006024:	429a      	cmp	r2, r3
 8006026:	d126      	bne.n	8006076 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006028:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800602c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 800602e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8006030:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006034:	61da      	str	r2, [r3, #28]
 8006036:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8006038:	4811      	ldr	r0, [pc, #68]	; (8006080 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800603a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800603e:	9200      	str	r2, [sp, #0]
 8006040:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	f042 0204 	orr.w	r2, r2, #4
 8006048:	619a      	str	r2, [r3, #24]
 800604a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	9301      	str	r3, [sp, #4]
 8006054:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006056:	2302      	movs	r3, #2
 8006058:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800605c:	2303      	movs	r3, #3
 800605e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8006060:	f7fb fa4a 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006064:	2108      	movs	r1, #8
 8006066:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8006068:	4805      	ldr	r0, [pc, #20]	; (8006080 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800606a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800606e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8006072:	f7fb fa41 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006076:	b006      	add	sp, #24
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	40004400 	.word	0x40004400
 8006080:	40010800 	.word	0x40010800

08006084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006084:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006086:	2200      	movs	r2, #0
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <MX_USB_DEVICE_Init+0x40>)
 800608a:	480f      	ldr	r0, [pc, #60]	; (80060c8 <MX_USB_DEVICE_Init+0x44>)
 800608c:	f7fe f835 	bl	80040fa <USBD_Init>
 8006090:	b108      	cbz	r0, 8006096 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006092:	f7ff f91d 	bl	80052d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006096:	490d      	ldr	r1, [pc, #52]	; (80060cc <MX_USB_DEVICE_Init+0x48>)
 8006098:	480b      	ldr	r0, [pc, #44]	; (80060c8 <MX_USB_DEVICE_Init+0x44>)
 800609a:	f7fe f843 	bl	8004124 <USBD_RegisterClass>
 800609e:	b108      	cbz	r0, 80060a4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80060a0:	f7ff f916 	bl	80052d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80060a4:	490a      	ldr	r1, [pc, #40]	; (80060d0 <MX_USB_DEVICE_Init+0x4c>)
 80060a6:	4808      	ldr	r0, [pc, #32]	; (80060c8 <MX_USB_DEVICE_Init+0x44>)
 80060a8:	f7fd ffff 	bl	80040aa <USBD_CDC_RegisterInterface>
 80060ac:	b108      	cbz	r0, 80060b2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80060ae:	f7ff f90f 	bl	80052d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060b2:	4805      	ldr	r0, [pc, #20]	; (80060c8 <MX_USB_DEVICE_Init+0x44>)
 80060b4:	f7fe f83d 	bl	8004132 <USBD_Start>
 80060b8:	b118      	cbz	r0, 80060c2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80060be:	f7ff b907 	b.w	80052d0 <Error_Handler>
}
 80060c2:	bd08      	pop	{r3, pc}
 80060c4:	20000144 	.word	0x20000144
 80060c8:	20000c7c 	.word	0x20000c7c
 80060cc:	20000008 	.word	0x20000008
 80060d0:	20000134 	.word	0x20000134

080060d4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80060d4:	2000      	movs	r0, #0
 80060d6:	4770      	bx	lr

080060d8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80060d8:	2000      	movs	r0, #0
 80060da:	4770      	bx	lr

080060dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80060dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80060de:	4c05      	ldr	r4, [pc, #20]	; (80060f4 <CDC_Receive_FS+0x18>)
 80060e0:	4601      	mov	r1, r0
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7fd fff0 	bl	80040c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7fd fff3 	bl	80040d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	20000c7c 	.word	0x20000c7c

080060f8 <CDC_Init_FS>:
{
 80060f8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80060fa:	4c06      	ldr	r4, [pc, #24]	; (8006114 <CDC_Init_FS+0x1c>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	4906      	ldr	r1, [pc, #24]	; (8006118 <CDC_Init_FS+0x20>)
 8006100:	4620      	mov	r0, r4
 8006102:	f7fd ffd9 	bl	80040b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006106:	4905      	ldr	r1, [pc, #20]	; (800611c <CDC_Init_FS+0x24>)
 8006108:	4620      	mov	r0, r4
 800610a:	f7fd ffdd 	bl	80040c8 <USBD_CDC_SetRxBuffer>
}
 800610e:	2000      	movs	r0, #0
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop
 8006114:	20000c7c 	.word	0x20000c7c
 8006118:	20001328 	.word	0x20001328
 800611c:	20000f40 	.word	0x20000f40

08006120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006120:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8006122:	4b0e      	ldr	r3, [pc, #56]	; (800615c <HAL_PCD_MspInit+0x3c>)
 8006124:	6802      	ldr	r2, [r0, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d115      	bne.n	8006156 <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800612a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800612e:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006130:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8006132:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006136:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006138:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800613a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800613c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800613e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006146:	f7fb f937 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800614a:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800614c:	b003      	add	sp, #12
 800614e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006152:	f7fb b965 	b.w	8001420 <HAL_NVIC_EnableIRQ>
}
 8006156:	b003      	add	sp, #12
 8006158:	f85d fb04 	ldr.w	pc, [sp], #4
 800615c:	40005c00 	.word	0x40005c00

08006160 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006160:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8006164:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006168:	f7fd bffa 	b.w	8004160 <USBD_LL_SetupStage>

0800616c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800616c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006170:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8006174:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006178:	f7fe b81f 	b.w	80041ba <USBD_LL_DataOutStage>

0800617c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800617c:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006182:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8006186:	f7fe b852 	b.w	800422e <USBD_LL_DataInStage>

0800618a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800618a:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800618e:	f7fe b8e6 	b.w	800435e <USBD_LL_SOF>

08006192 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006192:	6883      	ldr	r3, [r0, #8]
{ 
 8006194:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006196:	2b02      	cmp	r3, #2
{ 
 8006198:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800619a:	d001      	beq.n	80061a0 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800619c:	f7ff f898 	bl	80052d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061a0:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80061a4:	2101      	movs	r1, #1
 80061a6:	f7fe f8c4 	bl	8004332 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061aa:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80061ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061b2:	f7fe b897 	b.w	80042e4 <USBD_LL_Reset>
	...

080061b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b8:	b510      	push	{r4, lr}
 80061ba:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061bc:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80061c0:	f7fe f8ba 	bl	8004338 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80061c4:	69a3      	ldr	r3, [r4, #24]
 80061c6:	b123      	cbz	r3, 80061d2 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061c8:	4a02      	ldr	r2, [pc, #8]	; (80061d4 <HAL_PCD_SuspendCallback+0x1c>)
 80061ca:	6913      	ldr	r3, [r2, #16]
 80061cc:	f043 0306 	orr.w	r3, r3, #6
 80061d0:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80061d2:	bd10      	pop	{r4, pc}
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80061d8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80061dc:	f7fe b8b5 	b.w	800434a <USBD_LL_Resume>

080061e0 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061e0:	2308      	movs	r3, #8
{
 80061e2:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061e4:	4a1d      	ldr	r2, [pc, #116]	; (800625c <USBD_LL_Init+0x7c>)
{
 80061e6:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80061e8:	481d      	ldr	r0, [pc, #116]	; (8006260 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061ea:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80061ee:	2302      	movs	r3, #2
 80061f0:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80061f2:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80061f4:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 80061f8:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80061fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006200:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006202:	f7fb fcc9 	bl	8001b98 <HAL_PCD_Init>
 8006206:	b108      	cbz	r0, 800620c <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8006208:	f7ff f862 	bl	80052d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800620c:	2200      	movs	r2, #0
 800620e:	2318      	movs	r3, #24
 8006210:	4611      	mov	r1, r2
 8006212:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006216:	f7fc f86e 	bl	80022f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800621a:	2358      	movs	r3, #88	; 0x58
 800621c:	2200      	movs	r2, #0
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006224:	f7fc f867 	bl	80022f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006228:	23c0      	movs	r3, #192	; 0xc0
 800622a:	2200      	movs	r2, #0
 800622c:	2181      	movs	r1, #129	; 0x81
 800622e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006232:	f7fc f860 	bl	80022f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006236:	f44f 7388 	mov.w	r3, #272	; 0x110
 800623a:	2200      	movs	r2, #0
 800623c:	2101      	movs	r1, #1
 800623e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006242:	f7fc f858 	bl	80022f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800624a:	2200      	movs	r2, #0
 800624c:	2182      	movs	r1, #130	; 0x82
 800624e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006252:	f7fc f850 	bl	80022f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8006256:	2000      	movs	r0, #0
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	40005c00 	.word	0x40005c00
 8006260:	20001710 	.word	0x20001710

08006264 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006264:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006266:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800626a:	f7fb fd0a 	bl	8001c82 <HAL_PCD_Start>
 800626e:	2803      	cmp	r0, #3
 8006270:	bf96      	itet	ls
 8006272:	4b02      	ldrls	r3, [pc, #8]	; (800627c <USBD_LL_Start+0x18>)
 8006274:	2002      	movhi	r0, #2
 8006276:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006278:	bd08      	pop	{r3, pc}
 800627a:	bf00      	nop
 800627c:	0800d448 	.word	0x0800d448

08006280 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006280:	b510      	push	{r4, lr}
 8006282:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006284:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006288:	4613      	mov	r3, r2
 800628a:	4622      	mov	r2, r4
 800628c:	f7fb fd24 	bl	8001cd8 <HAL_PCD_EP_Open>
 8006290:	2803      	cmp	r0, #3
 8006292:	bf96      	itet	ls
 8006294:	4b01      	ldrls	r3, [pc, #4]	; (800629c <USBD_LL_OpenEP+0x1c>)
 8006296:	2002      	movhi	r0, #2
 8006298:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800629a:	bd10      	pop	{r4, pc}
 800629c:	0800d448 	.word	0x0800d448

080062a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062a0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80062a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062a6:	f7fb fd4a 	bl	8001d3e <HAL_PCD_EP_Close>
 80062aa:	2803      	cmp	r0, #3
 80062ac:	bf96      	itet	ls
 80062ae:	4b02      	ldrls	r3, [pc, #8]	; (80062b8 <USBD_LL_CloseEP+0x18>)
 80062b0:	2002      	movhi	r0, #2
 80062b2:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80062b4:	bd08      	pop	{r3, pc}
 80062b6:	bf00      	nop
 80062b8:	0800d448 	.word	0x0800d448

080062bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062bc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80062be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062c2:	f7fb ffb1 	bl	8002228 <HAL_PCD_EP_SetStall>
 80062c6:	2803      	cmp	r0, #3
 80062c8:	bf96      	itet	ls
 80062ca:	4b02      	ldrls	r3, [pc, #8]	; (80062d4 <USBD_LL_StallEP+0x18>)
 80062cc:	2002      	movhi	r0, #2
 80062ce:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 80062d0:	bd08      	pop	{r3, pc}
 80062d2:	bf00      	nop
 80062d4:	0800d448 	.word	0x0800d448

080062d8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80062da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80062de:	f7fb ffd7 	bl	8002290 <HAL_PCD_EP_ClrStall>
 80062e2:	2803      	cmp	r0, #3
 80062e4:	bf96      	itet	ls
 80062e6:	4b02      	ldrls	r3, [pc, #8]	; (80062f0 <USBD_LL_ClearStallEP+0x18>)
 80062e8:	2002      	movhi	r0, #2
 80062ea:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 80062ec:	bd08      	pop	{r3, pc}
 80062ee:	bf00      	nop
 80062f0:	0800d448 	.word	0x0800d448

080062f4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80062f4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80062f6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80062fa:	bf45      	ittet	mi
 80062fc:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8006300:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006304:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006308:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800630c:	bf58      	it	pl
 800630e:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8006312:	4770      	bx	lr

08006314 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006314:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006316:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800631a:	f7fb fcc9 	bl	8001cb0 <HAL_PCD_SetAddress>
 800631e:	2803      	cmp	r0, #3
 8006320:	bf96      	itet	ls
 8006322:	4b02      	ldrls	r3, [pc, #8]	; (800632c <USBD_LL_SetUSBAddress+0x18>)
 8006324:	2002      	movhi	r0, #2
 8006326:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8006328:	bd08      	pop	{r3, pc}
 800632a:	bf00      	nop
 800632c:	0800d448 	.word	0x0800d448

08006330 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006330:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006332:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006336:	f7fb fd4a 	bl	8001dce <HAL_PCD_EP_Transmit>
 800633a:	2803      	cmp	r0, #3
 800633c:	bf96      	itet	ls
 800633e:	4b02      	ldrls	r3, [pc, #8]	; (8006348 <USBD_LL_Transmit+0x18>)
 8006340:	2002      	movhi	r0, #2
 8006342:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8006344:	bd08      	pop	{r3, pc}
 8006346:	bf00      	nop
 8006348:	0800d448 	.word	0x0800d448

0800634c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800634c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800634e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006352:	f7fb fd1d 	bl	8001d90 <HAL_PCD_EP_Receive>
 8006356:	2803      	cmp	r0, #3
 8006358:	bf96      	itet	ls
 800635a:	4b02      	ldrls	r3, [pc, #8]	; (8006364 <USBD_LL_PrepareReceive+0x18>)
 800635c:	2002      	movhi	r0, #2
 800635e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8006360:	bd08      	pop	{r3, pc}
 8006362:	bf00      	nop
 8006364:	0800d448 	.word	0x0800d448

08006368 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006368:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800636c:	f7fb bd28 	b.w	8001dc0 <HAL_PCD_EP_GetRxCount>

08006370 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006370:	4800      	ldr	r0, [pc, #0]	; (8006374 <USBD_static_malloc+0x4>)
 8006372:	4770      	bx	lr
 8006374:	20000798 	.word	0x20000798

08006378 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006378:	4770      	bx	lr

0800637a <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800637a:	4770      	bx	lr

0800637c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800637c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800637e:	4801      	ldr	r0, [pc, #4]	; (8006384 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006380:	800b      	strh	r3, [r1, #0]
}
 8006382:	4770      	bx	lr
 8006384:	20000160 	.word	0x20000160

08006388 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006388:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800638a:	4801      	ldr	r0, [pc, #4]	; (8006390 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800638c:	800b      	strh	r3, [r1, #0]
}
 800638e:	4770      	bx	lr
 8006390:	20000174 	.word	0x20000174

08006394 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006394:	2300      	movs	r3, #0
 8006396:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006398:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800639a:	0f05      	lsrs	r5, r0, #28
 800639c:	b2ec      	uxtb	r4, r5
 800639e:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80063a0:	bf94      	ite	ls
 80063a2:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063a4:	3437      	addhi	r4, #55	; 0x37
 80063a6:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80063aa:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80063ae:	3301      	adds	r3, #1
 80063b0:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 80063b2:	b2dc      	uxtb	r4, r3
 80063b4:	42a2      	cmp	r2, r4
    value = value << 4;
 80063b6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80063ba:	d8ee      	bhi.n	800639a <IntToUnicode+0x6>
  }
}
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080063c0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80063c0:	231a      	movs	r3, #26
{
 80063c2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80063c4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <USBD_FS_SerialStrDescriptor+0x2c>)
 80063c8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80063ca:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80063cc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80063ce:	18c0      	adds	r0, r0, r3
 80063d0:	d00a      	beq.n	80063e8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063d2:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063d4:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063d6:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063d8:	4906      	ldr	r1, [pc, #24]	; (80063f4 <USBD_FS_SerialStrDescriptor+0x34>)
 80063da:	f7ff ffdb 	bl	8006394 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063de:	2204      	movs	r2, #4
 80063e0:	4905      	ldr	r1, [pc, #20]	; (80063f8 <USBD_FS_SerialStrDescriptor+0x38>)
 80063e2:	4620      	mov	r0, r4
 80063e4:	f7ff ffd6 	bl	8006394 <IntToUnicode>
}
 80063e8:	4804      	ldr	r0, [pc, #16]	; (80063fc <USBD_FS_SerialStrDescriptor+0x3c>)
 80063ea:	bd10      	pop	{r4, pc}
 80063ec:	1ffff7e8 	.word	0x1ffff7e8
 80063f0:	1ffff7ec 	.word	0x1ffff7ec
 80063f4:	2000017a 	.word	0x2000017a
 80063f8:	2000018a 	.word	0x2000018a
 80063fc:	20000178 	.word	0x20000178

08006400 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006400:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006402:	4c04      	ldr	r4, [pc, #16]	; (8006414 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8006404:	460a      	mov	r2, r1
 8006406:	4804      	ldr	r0, [pc, #16]	; (8006418 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006408:	4621      	mov	r1, r4
 800640a:	f7fe f9b0 	bl	800476e <USBD_GetString>
}
 800640e:	4620      	mov	r0, r4
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop
 8006414:	2000197c 	.word	0x2000197c
 8006418:	0800d465 	.word	0x0800d465

0800641c <USBD_FS_ProductStrDescriptor>:
{
 800641c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800641e:	4c04      	ldr	r4, [pc, #16]	; (8006430 <USBD_FS_ProductStrDescriptor+0x14>)
 8006420:	460a      	mov	r2, r1
 8006422:	4804      	ldr	r0, [pc, #16]	; (8006434 <USBD_FS_ProductStrDescriptor+0x18>)
 8006424:	4621      	mov	r1, r4
 8006426:	f7fe f9a2 	bl	800476e <USBD_GetString>
}
 800642a:	4620      	mov	r0, r4
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	2000197c 	.word	0x2000197c
 8006434:	0800d478 	.word	0x0800d478

08006438 <USBD_FS_ConfigStrDescriptor>:
{
 8006438:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800643a:	4c04      	ldr	r4, [pc, #16]	; (800644c <USBD_FS_ConfigStrDescriptor+0x14>)
 800643c:	460a      	mov	r2, r1
 800643e:	4804      	ldr	r0, [pc, #16]	; (8006450 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006440:	4621      	mov	r1, r4
 8006442:	f7fe f994 	bl	800476e <USBD_GetString>
}
 8006446:	4620      	mov	r0, r4
 8006448:	bd10      	pop	{r4, pc}
 800644a:	bf00      	nop
 800644c:	2000197c 	.word	0x2000197c
 8006450:	0800d44c 	.word	0x0800d44c

08006454 <USBD_FS_InterfaceStrDescriptor>:
{
 8006454:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006456:	4c04      	ldr	r4, [pc, #16]	; (8006468 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8006458:	460a      	mov	r2, r1
 800645a:	4804      	ldr	r0, [pc, #16]	; (800646c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800645c:	4621      	mov	r1, r4
 800645e:	f7fe f986 	bl	800476e <USBD_GetString>
}
 8006462:	4620      	mov	r0, r4
 8006464:	bd10      	pop	{r4, pc}
 8006466:	bf00      	nop
 8006468:	2000197c 	.word	0x2000197c
 800646c:	0800d457 	.word	0x0800d457

08006470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006470:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006472:	e003      	b.n	800647c <LoopCopyDataInit>

08006474 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006474:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006476:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006478:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800647a:	3104      	adds	r1, #4

0800647c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800647c:	480a      	ldr	r0, [pc, #40]	; (80064a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006480:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006482:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006484:	d3f6      	bcc.n	8006474 <CopyDataInit>
  ldr r2, =_sbss
 8006486:	4a0a      	ldr	r2, [pc, #40]	; (80064b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006488:	e002      	b.n	8006490 <LoopFillZerobss>

0800648a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800648a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800648c:	f842 3b04 	str.w	r3, [r2], #4

08006490 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006492:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006494:	d3f9      	bcc.n	800648a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006496:	f7ff fd79 	bl	8005f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800649a:	f000 f815 	bl	80064c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800649e:	f7fe fdbb 	bl	8005018 <main>
  bx lr
 80064a2:	4770      	bx	lr
  ldr r3, =_sidata
 80064a4:	0800d7f8 	.word	0x0800d7f8
  ldr r0, =_sdata
 80064a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80064ac:	20000364 	.word	0x20000364
  ldr r2, =_sbss
 80064b0:	20000368 	.word	0x20000368
  ldr r3, = _ebss
 80064b4:	20001b80 	.word	0x20001b80

080064b8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064b8:	e7fe      	b.n	80064b8 <CAN1_RX1_IRQHandler>
	...

080064bc <__errno>:
 80064bc:	4b01      	ldr	r3, [pc, #4]	; (80064c4 <__errno+0x8>)
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20000194 	.word	0x20000194

080064c8 <__libc_init_array>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	2500      	movs	r5, #0
 80064cc:	4e0c      	ldr	r6, [pc, #48]	; (8006500 <__libc_init_array+0x38>)
 80064ce:	4c0d      	ldr	r4, [pc, #52]	; (8006504 <__libc_init_array+0x3c>)
 80064d0:	1ba4      	subs	r4, r4, r6
 80064d2:	10a4      	asrs	r4, r4, #2
 80064d4:	42a5      	cmp	r5, r4
 80064d6:	d109      	bne.n	80064ec <__libc_init_array+0x24>
 80064d8:	f004 fe88 	bl	800b1ec <_init>
 80064dc:	2500      	movs	r5, #0
 80064de:	4e0a      	ldr	r6, [pc, #40]	; (8006508 <__libc_init_array+0x40>)
 80064e0:	4c0a      	ldr	r4, [pc, #40]	; (800650c <__libc_init_array+0x44>)
 80064e2:	1ba4      	subs	r4, r4, r6
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	42a5      	cmp	r5, r4
 80064e8:	d105      	bne.n	80064f6 <__libc_init_array+0x2e>
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064f0:	4798      	blx	r3
 80064f2:	3501      	adds	r5, #1
 80064f4:	e7ee      	b.n	80064d4 <__libc_init_array+0xc>
 80064f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064fa:	4798      	blx	r3
 80064fc:	3501      	adds	r5, #1
 80064fe:	e7f2      	b.n	80064e6 <__libc_init_array+0x1e>
 8006500:	0800d7f0 	.word	0x0800d7f0
 8006504:	0800d7f0 	.word	0x0800d7f0
 8006508:	0800d7f0 	.word	0x0800d7f0
 800650c:	0800d7f4 	.word	0x0800d7f4

08006510 <__itoa>:
 8006510:	1e93      	subs	r3, r2, #2
 8006512:	2b22      	cmp	r3, #34	; 0x22
 8006514:	b510      	push	{r4, lr}
 8006516:	460c      	mov	r4, r1
 8006518:	d904      	bls.n	8006524 <__itoa+0x14>
 800651a:	2300      	movs	r3, #0
 800651c:	461c      	mov	r4, r3
 800651e:	700b      	strb	r3, [r1, #0]
 8006520:	4620      	mov	r0, r4
 8006522:	bd10      	pop	{r4, pc}
 8006524:	2a0a      	cmp	r2, #10
 8006526:	d109      	bne.n	800653c <__itoa+0x2c>
 8006528:	2800      	cmp	r0, #0
 800652a:	da07      	bge.n	800653c <__itoa+0x2c>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	700b      	strb	r3, [r1, #0]
 8006530:	2101      	movs	r1, #1
 8006532:	4240      	negs	r0, r0
 8006534:	4421      	add	r1, r4
 8006536:	f001 fdcd 	bl	80080d4 <__utoa>
 800653a:	e7f1      	b.n	8006520 <__itoa+0x10>
 800653c:	2100      	movs	r1, #0
 800653e:	e7f9      	b.n	8006534 <__itoa+0x24>

08006540 <itoa>:
 8006540:	f7ff bfe6 	b.w	8006510 <__itoa>

08006544 <memcpy>:
 8006544:	b510      	push	{r4, lr}
 8006546:	1e43      	subs	r3, r0, #1
 8006548:	440a      	add	r2, r1
 800654a:	4291      	cmp	r1, r2
 800654c:	d100      	bne.n	8006550 <memcpy+0xc>
 800654e:	bd10      	pop	{r4, pc}
 8006550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006558:	e7f7      	b.n	800654a <memcpy+0x6>

0800655a <memmove>:
 800655a:	4288      	cmp	r0, r1
 800655c:	b510      	push	{r4, lr}
 800655e:	eb01 0302 	add.w	r3, r1, r2
 8006562:	d807      	bhi.n	8006574 <memmove+0x1a>
 8006564:	1e42      	subs	r2, r0, #1
 8006566:	4299      	cmp	r1, r3
 8006568:	d00a      	beq.n	8006580 <memmove+0x26>
 800656a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006572:	e7f8      	b.n	8006566 <memmove+0xc>
 8006574:	4283      	cmp	r3, r0
 8006576:	d9f5      	bls.n	8006564 <memmove+0xa>
 8006578:	1881      	adds	r1, r0, r2
 800657a:	1ad2      	subs	r2, r2, r3
 800657c:	42d3      	cmn	r3, r2
 800657e:	d100      	bne.n	8006582 <memmove+0x28>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006586:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800658a:	e7f7      	b.n	800657c <memmove+0x22>

0800658c <memset>:
 800658c:	4603      	mov	r3, r0
 800658e:	4402      	add	r2, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <__cvt>:
 800659c:	2b00      	cmp	r3, #0
 800659e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a2:	461e      	mov	r6, r3
 80065a4:	bfbb      	ittet	lt
 80065a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	461e      	movlt	r6, r3
 80065ac:	2300      	movge	r3, #0
 80065ae:	232d      	movlt	r3, #45	; 0x2d
 80065b0:	b088      	sub	sp, #32
 80065b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065b4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80065b8:	f027 0720 	bic.w	r7, r7, #32
 80065bc:	2f46      	cmp	r7, #70	; 0x46
 80065be:	4614      	mov	r4, r2
 80065c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80065c2:	700b      	strb	r3, [r1, #0]
 80065c4:	d004      	beq.n	80065d0 <__cvt+0x34>
 80065c6:	2f45      	cmp	r7, #69	; 0x45
 80065c8:	d100      	bne.n	80065cc <__cvt+0x30>
 80065ca:	3501      	adds	r5, #1
 80065cc:	2302      	movs	r3, #2
 80065ce:	e000      	b.n	80065d2 <__cvt+0x36>
 80065d0:	2303      	movs	r3, #3
 80065d2:	aa07      	add	r2, sp, #28
 80065d4:	9204      	str	r2, [sp, #16]
 80065d6:	aa06      	add	r2, sp, #24
 80065d8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065dc:	e9cd 3500 	strd	r3, r5, [sp]
 80065e0:	4622      	mov	r2, r4
 80065e2:	4633      	mov	r3, r6
 80065e4:	f001 fe64 	bl	80082b0 <_dtoa_r>
 80065e8:	2f47      	cmp	r7, #71	; 0x47
 80065ea:	4680      	mov	r8, r0
 80065ec:	d102      	bne.n	80065f4 <__cvt+0x58>
 80065ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065f0:	07db      	lsls	r3, r3, #31
 80065f2:	d526      	bpl.n	8006642 <__cvt+0xa6>
 80065f4:	2f46      	cmp	r7, #70	; 0x46
 80065f6:	eb08 0905 	add.w	r9, r8, r5
 80065fa:	d111      	bne.n	8006620 <__cvt+0x84>
 80065fc:	f898 3000 	ldrb.w	r3, [r8]
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d10a      	bne.n	800661a <__cvt+0x7e>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	4620      	mov	r0, r4
 800660a:	4631      	mov	r1, r6
 800660c:	f7fa f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8006610:	b918      	cbnz	r0, 800661a <__cvt+0x7e>
 8006612:	f1c5 0501 	rsb	r5, r5, #1
 8006616:	f8ca 5000 	str.w	r5, [sl]
 800661a:	f8da 3000 	ldr.w	r3, [sl]
 800661e:	4499      	add	r9, r3
 8006620:	2200      	movs	r2, #0
 8006622:	2300      	movs	r3, #0
 8006624:	4620      	mov	r0, r4
 8006626:	4631      	mov	r1, r6
 8006628:	f7fa f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800662c:	b938      	cbnz	r0, 800663e <__cvt+0xa2>
 800662e:	2230      	movs	r2, #48	; 0x30
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	454b      	cmp	r3, r9
 8006634:	d205      	bcs.n	8006642 <__cvt+0xa6>
 8006636:	1c59      	adds	r1, r3, #1
 8006638:	9107      	str	r1, [sp, #28]
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	e7f8      	b.n	8006630 <__cvt+0x94>
 800663e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006642:	4640      	mov	r0, r8
 8006644:	9b07      	ldr	r3, [sp, #28]
 8006646:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006648:	eba3 0308 	sub.w	r3, r3, r8
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	b008      	add	sp, #32
 8006650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006654 <__exponent>:
 8006654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006656:	2900      	cmp	r1, #0
 8006658:	bfb4      	ite	lt
 800665a:	232d      	movlt	r3, #45	; 0x2d
 800665c:	232b      	movge	r3, #43	; 0x2b
 800665e:	4604      	mov	r4, r0
 8006660:	bfb8      	it	lt
 8006662:	4249      	neglt	r1, r1
 8006664:	2909      	cmp	r1, #9
 8006666:	f804 2b02 	strb.w	r2, [r4], #2
 800666a:	7043      	strb	r3, [r0, #1]
 800666c:	dd21      	ble.n	80066b2 <__exponent+0x5e>
 800666e:	f10d 0307 	add.w	r3, sp, #7
 8006672:	461f      	mov	r7, r3
 8006674:	260a      	movs	r6, #10
 8006676:	fb91 f5f6 	sdiv	r5, r1, r6
 800667a:	fb06 1115 	mls	r1, r6, r5, r1
 800667e:	2d09      	cmp	r5, #9
 8006680:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006684:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006688:	f103 32ff 	add.w	r2, r3, #4294967295
 800668c:	4629      	mov	r1, r5
 800668e:	dc09      	bgt.n	80066a4 <__exponent+0x50>
 8006690:	3130      	adds	r1, #48	; 0x30
 8006692:	3b02      	subs	r3, #2
 8006694:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006698:	42bb      	cmp	r3, r7
 800669a:	4622      	mov	r2, r4
 800669c:	d304      	bcc.n	80066a8 <__exponent+0x54>
 800669e:	1a10      	subs	r0, r2, r0
 80066a0:	b003      	add	sp, #12
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a4:	4613      	mov	r3, r2
 80066a6:	e7e6      	b.n	8006676 <__exponent+0x22>
 80066a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ac:	f804 2b01 	strb.w	r2, [r4], #1
 80066b0:	e7f2      	b.n	8006698 <__exponent+0x44>
 80066b2:	2330      	movs	r3, #48	; 0x30
 80066b4:	4419      	add	r1, r3
 80066b6:	7083      	strb	r3, [r0, #2]
 80066b8:	1d02      	adds	r2, r0, #4
 80066ba:	70c1      	strb	r1, [r0, #3]
 80066bc:	e7ef      	b.n	800669e <__exponent+0x4a>
	...

080066c0 <_printf_float>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	b091      	sub	sp, #68	; 0x44
 80066c6:	460c      	mov	r4, r1
 80066c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80066ca:	4693      	mov	fp, r2
 80066cc:	461e      	mov	r6, r3
 80066ce:	4605      	mov	r5, r0
 80066d0:	f002 ffa8 	bl	8009624 <_localeconv_r>
 80066d4:	6803      	ldr	r3, [r0, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	9309      	str	r3, [sp, #36]	; 0x24
 80066da:	f7f9 fd39 	bl	8000150 <strlen>
 80066de:	2300      	movs	r3, #0
 80066e0:	930e      	str	r3, [sp, #56]	; 0x38
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	900a      	str	r0, [sp, #40]	; 0x28
 80066e6:	3307      	adds	r3, #7
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	f103 0208 	add.w	r2, r3, #8
 80066f0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80066f4:	f8d4 a000 	ldr.w	sl, [r4]
 80066f8:	603a      	str	r2, [r7, #0]
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006702:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800670a:	930b      	str	r3, [sp, #44]	; 0x2c
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	4ba6      	ldr	r3, [pc, #664]	; (80069ac <_printf_float+0x2ec>)
 8006712:	4638      	mov	r0, r7
 8006714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006716:	f7fa f979 	bl	8000a0c <__aeabi_dcmpun>
 800671a:	bb68      	cbnz	r0, 8006778 <_printf_float+0xb8>
 800671c:	f04f 32ff 	mov.w	r2, #4294967295
 8006720:	4ba2      	ldr	r3, [pc, #648]	; (80069ac <_printf_float+0x2ec>)
 8006722:	4638      	mov	r0, r7
 8006724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006726:	f7fa f953 	bl	80009d0 <__aeabi_dcmple>
 800672a:	bb28      	cbnz	r0, 8006778 <_printf_float+0xb8>
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	4638      	mov	r0, r7
 8006732:	4649      	mov	r1, r9
 8006734:	f7fa f942 	bl	80009bc <__aeabi_dcmplt>
 8006738:	b110      	cbz	r0, 8006740 <_printf_float+0x80>
 800673a:	232d      	movs	r3, #45	; 0x2d
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006740:	4f9b      	ldr	r7, [pc, #620]	; (80069b0 <_printf_float+0x2f0>)
 8006742:	4b9c      	ldr	r3, [pc, #624]	; (80069b4 <_printf_float+0x2f4>)
 8006744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006748:	bf98      	it	ls
 800674a:	461f      	movls	r7, r3
 800674c:	2303      	movs	r3, #3
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	f02a 0304 	bic.w	r3, sl, #4
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	9600      	str	r6, [sp, #0]
 800675c:	465b      	mov	r3, fp
 800675e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	f000 f9e2 	bl	8006b2c <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	f040 8090 	bne.w	800688e <_printf_float+0x1ce>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	b011      	add	sp, #68	; 0x44
 8006774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006778:	463a      	mov	r2, r7
 800677a:	464b      	mov	r3, r9
 800677c:	4638      	mov	r0, r7
 800677e:	4649      	mov	r1, r9
 8006780:	f7fa f944 	bl	8000a0c <__aeabi_dcmpun>
 8006784:	b110      	cbz	r0, 800678c <_printf_float+0xcc>
 8006786:	4f8c      	ldr	r7, [pc, #560]	; (80069b8 <_printf_float+0x2f8>)
 8006788:	4b8c      	ldr	r3, [pc, #560]	; (80069bc <_printf_float+0x2fc>)
 800678a:	e7db      	b.n	8006744 <_printf_float+0x84>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	a80d      	add	r0, sp, #52	; 0x34
 8006796:	a90e      	add	r1, sp, #56	; 0x38
 8006798:	d140      	bne.n	800681c <_printf_float+0x15c>
 800679a:	2306      	movs	r3, #6
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	f04f 0c00 	mov.w	ip, #0
 80067a2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80067a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80067aa:	6863      	ldr	r3, [r4, #4]
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	463a      	mov	r2, r7
 80067b6:	464b      	mov	r3, r9
 80067b8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff feed 	bl	800659c <__cvt>
 80067c2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80067c6:	2b47      	cmp	r3, #71	; 0x47
 80067c8:	4607      	mov	r7, r0
 80067ca:	d109      	bne.n	80067e0 <_printf_float+0x120>
 80067cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ce:	1cd8      	adds	r0, r3, #3
 80067d0:	db02      	blt.n	80067d8 <_printf_float+0x118>
 80067d2:	6862      	ldr	r2, [r4, #4]
 80067d4:	4293      	cmp	r3, r2
 80067d6:	dd47      	ble.n	8006868 <_printf_float+0x1a8>
 80067d8:	f1a8 0802 	sub.w	r8, r8, #2
 80067dc:	fa5f f888 	uxtb.w	r8, r8
 80067e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80067e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067e6:	d824      	bhi.n	8006832 <_printf_float+0x172>
 80067e8:	3901      	subs	r1, #1
 80067ea:	4642      	mov	r2, r8
 80067ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067f0:	910d      	str	r1, [sp, #52]	; 0x34
 80067f2:	f7ff ff2f 	bl	8006654 <__exponent>
 80067f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067f8:	4681      	mov	r9, r0
 80067fa:	1813      	adds	r3, r2, r0
 80067fc:	2a01      	cmp	r2, #1
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	dc02      	bgt.n	8006808 <_printf_float+0x148>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	07d1      	lsls	r1, r2, #31
 8006806:	d501      	bpl.n	800680c <_printf_float+0x14c>
 8006808:	3301      	adds	r3, #1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0a2      	beq.n	800675a <_printf_float+0x9a>
 8006814:	232d      	movs	r3, #45	; 0x2d
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681a:	e79e      	b.n	800675a <_printf_float+0x9a>
 800681c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006820:	f000 816e 	beq.w	8006b00 <_printf_float+0x440>
 8006824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006828:	d1b9      	bne.n	800679e <_printf_float+0xde>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1b7      	bne.n	800679e <_printf_float+0xde>
 800682e:	2301      	movs	r3, #1
 8006830:	e7b4      	b.n	800679c <_printf_float+0xdc>
 8006832:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006836:	d119      	bne.n	800686c <_printf_float+0x1ac>
 8006838:	2900      	cmp	r1, #0
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	dd0c      	ble.n	8006858 <_printf_float+0x198>
 800683e:	6121      	str	r1, [r4, #16]
 8006840:	b913      	cbnz	r3, 8006848 <_printf_float+0x188>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	07d2      	lsls	r2, r2, #31
 8006846:	d502      	bpl.n	800684e <_printf_float+0x18e>
 8006848:	3301      	adds	r3, #1
 800684a:	440b      	add	r3, r1
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006850:	f04f 0900 	mov.w	r9, #0
 8006854:	65a3      	str	r3, [r4, #88]	; 0x58
 8006856:	e7d9      	b.n	800680c <_printf_float+0x14c>
 8006858:	b913      	cbnz	r3, 8006860 <_printf_float+0x1a0>
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	07d0      	lsls	r0, r2, #31
 800685e:	d501      	bpl.n	8006864 <_printf_float+0x1a4>
 8006860:	3302      	adds	r3, #2
 8006862:	e7f3      	b.n	800684c <_printf_float+0x18c>
 8006864:	2301      	movs	r3, #1
 8006866:	e7f1      	b.n	800684c <_printf_float+0x18c>
 8006868:	f04f 0867 	mov.w	r8, #103	; 0x67
 800686c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006870:	4293      	cmp	r3, r2
 8006872:	db05      	blt.n	8006880 <_printf_float+0x1c0>
 8006874:	6822      	ldr	r2, [r4, #0]
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	07d1      	lsls	r1, r2, #31
 800687a:	d5e8      	bpl.n	800684e <_printf_float+0x18e>
 800687c:	3301      	adds	r3, #1
 800687e:	e7e5      	b.n	800684c <_printf_float+0x18c>
 8006880:	2b00      	cmp	r3, #0
 8006882:	bfcc      	ite	gt
 8006884:	2301      	movgt	r3, #1
 8006886:	f1c3 0302 	rsble	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	e7de      	b.n	800684c <_printf_float+0x18c>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	055a      	lsls	r2, r3, #21
 8006892:	d407      	bmi.n	80068a4 <_printf_float+0x1e4>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	463a      	mov	r2, r7
 8006898:	4659      	mov	r1, fp
 800689a:	4628      	mov	r0, r5
 800689c:	47b0      	blx	r6
 800689e:	3001      	adds	r0, #1
 80068a0:	d129      	bne.n	80068f6 <_printf_float+0x236>
 80068a2:	e764      	b.n	800676e <_printf_float+0xae>
 80068a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80068a8:	f240 80d7 	bls.w	8006a5a <_printf_float+0x39a>
 80068ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	f7fa f878 	bl	80009a8 <__aeabi_dcmpeq>
 80068b8:	b388      	cbz	r0, 800691e <_printf_float+0x25e>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4a40      	ldr	r2, [pc, #256]	; (80069c0 <_printf_float+0x300>)
 80068be:	4659      	mov	r1, fp
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b0      	blx	r6
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f af52 	beq.w	800676e <_printf_float+0xae>
 80068ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068ce:	429a      	cmp	r2, r3
 80068d0:	db02      	blt.n	80068d8 <_printf_float+0x218>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	07d8      	lsls	r0, r3, #31
 80068d6:	d50e      	bpl.n	80068f6 <_printf_float+0x236>
 80068d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068dc:	4659      	mov	r1, fp
 80068de:	4628      	mov	r0, r5
 80068e0:	47b0      	blx	r6
 80068e2:	3001      	adds	r0, #1
 80068e4:	f43f af43 	beq.w	800676e <_printf_float+0xae>
 80068e8:	2700      	movs	r7, #0
 80068ea:	f104 081a 	add.w	r8, r4, #26
 80068ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f0:	3b01      	subs	r3, #1
 80068f2:	42bb      	cmp	r3, r7
 80068f4:	dc09      	bgt.n	800690a <_printf_float+0x24a>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	079f      	lsls	r7, r3, #30
 80068fa:	f100 80fd 	bmi.w	8006af8 <_printf_float+0x438>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e733      	b.n	8006772 <_printf_float+0xb2>
 800690a:	2301      	movs	r3, #1
 800690c:	4642      	mov	r2, r8
 800690e:	4659      	mov	r1, fp
 8006910:	4628      	mov	r0, r5
 8006912:	47b0      	blx	r6
 8006914:	3001      	adds	r0, #1
 8006916:	f43f af2a 	beq.w	800676e <_printf_float+0xae>
 800691a:	3701      	adds	r7, #1
 800691c:	e7e7      	b.n	80068ee <_printf_float+0x22e>
 800691e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006920:	2b00      	cmp	r3, #0
 8006922:	dc2b      	bgt.n	800697c <_printf_float+0x2bc>
 8006924:	2301      	movs	r3, #1
 8006926:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <_printf_float+0x300>)
 8006928:	4659      	mov	r1, fp
 800692a:	4628      	mov	r0, r5
 800692c:	47b0      	blx	r6
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af1d 	beq.w	800676e <_printf_float+0xae>
 8006934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006936:	b923      	cbnz	r3, 8006942 <_printf_float+0x282>
 8006938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800693a:	b913      	cbnz	r3, 8006942 <_printf_float+0x282>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	07d9      	lsls	r1, r3, #31
 8006940:	d5d9      	bpl.n	80068f6 <_printf_float+0x236>
 8006942:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006946:	4659      	mov	r1, fp
 8006948:	4628      	mov	r0, r5
 800694a:	47b0      	blx	r6
 800694c:	3001      	adds	r0, #1
 800694e:	f43f af0e 	beq.w	800676e <_printf_float+0xae>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 091a 	add.w	r9, r4, #26
 800695a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800695c:	425b      	negs	r3, r3
 800695e:	4543      	cmp	r3, r8
 8006960:	dc01      	bgt.n	8006966 <_printf_float+0x2a6>
 8006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006964:	e797      	b.n	8006896 <_printf_float+0x1d6>
 8006966:	2301      	movs	r3, #1
 8006968:	464a      	mov	r2, r9
 800696a:	4659      	mov	r1, fp
 800696c:	4628      	mov	r0, r5
 800696e:	47b0      	blx	r6
 8006970:	3001      	adds	r0, #1
 8006972:	f43f aefc 	beq.w	800676e <_printf_float+0xae>
 8006976:	f108 0801 	add.w	r8, r8, #1
 800697a:	e7ee      	b.n	800695a <_printf_float+0x29a>
 800697c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800697e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006980:	429a      	cmp	r2, r3
 8006982:	bfa8      	it	ge
 8006984:	461a      	movge	r2, r3
 8006986:	2a00      	cmp	r2, #0
 8006988:	4690      	mov	r8, r2
 800698a:	dd07      	ble.n	800699c <_printf_float+0x2dc>
 800698c:	4613      	mov	r3, r2
 800698e:	4659      	mov	r1, fp
 8006990:	463a      	mov	r2, r7
 8006992:	4628      	mov	r0, r5
 8006994:	47b0      	blx	r6
 8006996:	3001      	adds	r0, #1
 8006998:	f43f aee9 	beq.w	800676e <_printf_float+0xae>
 800699c:	f104 031a 	add.w	r3, r4, #26
 80069a0:	f04f 0a00 	mov.w	sl, #0
 80069a4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80069a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069aa:	e015      	b.n	80069d8 <_printf_float+0x318>
 80069ac:	7fefffff 	.word	0x7fefffff
 80069b0:	0800d498 	.word	0x0800d498
 80069b4:	0800d494 	.word	0x0800d494
 80069b8:	0800d4a0 	.word	0x0800d4a0
 80069bc:	0800d49c 	.word	0x0800d49c
 80069c0:	0800b281 	.word	0x0800b281
 80069c4:	2301      	movs	r3, #1
 80069c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069c8:	4659      	mov	r1, fp
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b0      	blx	r6
 80069ce:	3001      	adds	r0, #1
 80069d0:	f43f aecd 	beq.w	800676e <_printf_float+0xae>
 80069d4:	f10a 0a01 	add.w	sl, sl, #1
 80069d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80069dc:	eba9 0308 	sub.w	r3, r9, r8
 80069e0:	4553      	cmp	r3, sl
 80069e2:	dcef      	bgt.n	80069c4 <_printf_float+0x304>
 80069e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069e8:	429a      	cmp	r2, r3
 80069ea:	444f      	add	r7, r9
 80069ec:	db14      	blt.n	8006a18 <_printf_float+0x358>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	07da      	lsls	r2, r3, #31
 80069f2:	d411      	bmi.n	8006a18 <_printf_float+0x358>
 80069f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069f8:	eba3 0209 	sub.w	r2, r3, r9
 80069fc:	eba3 0901 	sub.w	r9, r3, r1
 8006a00:	4591      	cmp	r9, r2
 8006a02:	bfa8      	it	ge
 8006a04:	4691      	movge	r9, r2
 8006a06:	f1b9 0f00 	cmp.w	r9, #0
 8006a0a:	dc0d      	bgt.n	8006a28 <_printf_float+0x368>
 8006a0c:	2700      	movs	r7, #0
 8006a0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a12:	f104 081a 	add.w	r8, r4, #26
 8006a16:	e018      	b.n	8006a4a <_printf_float+0x38a>
 8006a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b0      	blx	r6
 8006a22:	3001      	adds	r0, #1
 8006a24:	d1e6      	bne.n	80069f4 <_printf_float+0x334>
 8006a26:	e6a2      	b.n	800676e <_printf_float+0xae>
 8006a28:	464b      	mov	r3, r9
 8006a2a:	463a      	mov	r2, r7
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b0      	blx	r6
 8006a32:	3001      	adds	r0, #1
 8006a34:	d1ea      	bne.n	8006a0c <_printf_float+0x34c>
 8006a36:	e69a      	b.n	800676e <_printf_float+0xae>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b0      	blx	r6
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f ae93 	beq.w	800676e <_printf_float+0xae>
 8006a48:	3701      	adds	r7, #1
 8006a4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	eba3 0309 	sub.w	r3, r3, r9
 8006a54:	42bb      	cmp	r3, r7
 8006a56:	dcef      	bgt.n	8006a38 <_printf_float+0x378>
 8006a58:	e74d      	b.n	80068f6 <_printf_float+0x236>
 8006a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5c:	2a01      	cmp	r2, #1
 8006a5e:	dc01      	bgt.n	8006a64 <_printf_float+0x3a4>
 8006a60:	07db      	lsls	r3, r3, #31
 8006a62:	d538      	bpl.n	8006ad6 <_printf_float+0x416>
 8006a64:	2301      	movs	r3, #1
 8006a66:	463a      	mov	r2, r7
 8006a68:	4659      	mov	r1, fp
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b0      	blx	r6
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f ae7d 	beq.w	800676e <_printf_float+0xae>
 8006a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a78:	4659      	mov	r1, fp
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	47b0      	blx	r6
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f107 0701 	add.w	r7, r7, #1
 8006a84:	f43f ae73 	beq.w	800676e <_printf_float+0xae>
 8006a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f103 38ff 	add.w	r8, r3, #4294967295
 8006a94:	2300      	movs	r3, #0
 8006a96:	f7f9 ff87 	bl	80009a8 <__aeabi_dcmpeq>
 8006a9a:	b9c0      	cbnz	r0, 8006ace <_printf_float+0x40e>
 8006a9c:	4643      	mov	r3, r8
 8006a9e:	463a      	mov	r2, r7
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b0      	blx	r6
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d10d      	bne.n	8006ac6 <_printf_float+0x406>
 8006aaa:	e660      	b.n	800676e <_printf_float+0xae>
 8006aac:	2301      	movs	r3, #1
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4659      	mov	r1, fp
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b0      	blx	r6
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f ae59 	beq.w	800676e <_printf_float+0xae>
 8006abc:	3701      	adds	r7, #1
 8006abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	dcf2      	bgt.n	8006aac <_printf_float+0x3ec>
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006acc:	e6e4      	b.n	8006898 <_printf_float+0x1d8>
 8006ace:	2700      	movs	r7, #0
 8006ad0:	f104 081a 	add.w	r8, r4, #26
 8006ad4:	e7f3      	b.n	8006abe <_printf_float+0x3fe>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e7e1      	b.n	8006a9e <_printf_float+0x3de>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4642      	mov	r2, r8
 8006ade:	4659      	mov	r1, fp
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b0      	blx	r6
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	f43f ae42 	beq.w	800676e <_printf_float+0xae>
 8006aea:	3701      	adds	r7, #1
 8006aec:	68e3      	ldr	r3, [r4, #12]
 8006aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	42bb      	cmp	r3, r7
 8006af4:	dcf1      	bgt.n	8006ada <_printf_float+0x41a>
 8006af6:	e702      	b.n	80068fe <_printf_float+0x23e>
 8006af8:	2700      	movs	r7, #0
 8006afa:	f104 0819 	add.w	r8, r4, #25
 8006afe:	e7f5      	b.n	8006aec <_printf_float+0x42c>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f43f ae94 	beq.w	800682e <_printf_float+0x16e>
 8006b06:	f04f 0c00 	mov.w	ip, #0
 8006b0a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006b0e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006b12:	6022      	str	r2, [r4, #0]
 8006b14:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006b18:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	463a      	mov	r2, r7
 8006b20:	464b      	mov	r3, r9
 8006b22:	4628      	mov	r0, r5
 8006b24:	f7ff fd3a 	bl	800659c <__cvt>
 8006b28:	4607      	mov	r7, r0
 8006b2a:	e64f      	b.n	80067cc <_printf_float+0x10c>

08006b2c <_printf_common>:
 8006b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	4691      	mov	r9, r2
 8006b32:	461f      	mov	r7, r3
 8006b34:	688a      	ldr	r2, [r1, #8]
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	4606      	mov	r6, r0
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	bfb8      	it	lt
 8006b3e:	4613      	movlt	r3, r2
 8006b40:	f8c9 3000 	str.w	r3, [r9]
 8006b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b48:	460c      	mov	r4, r1
 8006b4a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b4e:	b112      	cbz	r2, 8006b56 <_printf_common+0x2a>
 8006b50:	3301      	adds	r3, #1
 8006b52:	f8c9 3000 	str.w	r3, [r9]
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	0699      	lsls	r1, r3, #26
 8006b5a:	bf42      	ittt	mi
 8006b5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b60:	3302      	addmi	r3, #2
 8006b62:	f8c9 3000 	strmi.w	r3, [r9]
 8006b66:	6825      	ldr	r5, [r4, #0]
 8006b68:	f015 0506 	ands.w	r5, r5, #6
 8006b6c:	d107      	bne.n	8006b7e <_printf_common+0x52>
 8006b6e:	f104 0a19 	add.w	sl, r4, #25
 8006b72:	68e3      	ldr	r3, [r4, #12]
 8006b74:	f8d9 2000 	ldr.w	r2, [r9]
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	42ab      	cmp	r3, r5
 8006b7c:	dc29      	bgt.n	8006bd2 <_printf_common+0xa6>
 8006b7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	3300      	adds	r3, #0
 8006b86:	bf18      	it	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	0692      	lsls	r2, r2, #26
 8006b8c:	d42e      	bmi.n	8006bec <_printf_common+0xc0>
 8006b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b92:	4639      	mov	r1, r7
 8006b94:	4630      	mov	r0, r6
 8006b96:	47c0      	blx	r8
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d021      	beq.n	8006be0 <_printf_common+0xb4>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	68e5      	ldr	r5, [r4, #12]
 8006ba0:	f003 0306 	and.w	r3, r3, #6
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	bf18      	it	ne
 8006ba8:	2500      	movne	r5, #0
 8006baa:	f8d9 2000 	ldr.w	r2, [r9]
 8006bae:	f04f 0900 	mov.w	r9, #0
 8006bb2:	bf08      	it	eq
 8006bb4:	1aad      	subeq	r5, r5, r2
 8006bb6:	68a3      	ldr	r3, [r4, #8]
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	bf08      	it	eq
 8006bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	bfc4      	itt	gt
 8006bc4:	1a9b      	subgt	r3, r3, r2
 8006bc6:	18ed      	addgt	r5, r5, r3
 8006bc8:	341a      	adds	r4, #26
 8006bca:	454d      	cmp	r5, r9
 8006bcc:	d11a      	bne.n	8006c04 <_printf_common+0xd8>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e008      	b.n	8006be4 <_printf_common+0xb8>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4652      	mov	r2, sl
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4630      	mov	r0, r6
 8006bda:	47c0      	blx	r8
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d103      	bne.n	8006be8 <_printf_common+0xbc>
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be8:	3501      	adds	r5, #1
 8006bea:	e7c2      	b.n	8006b72 <_printf_common+0x46>
 8006bec:	2030      	movs	r0, #48	; 0x30
 8006bee:	18e1      	adds	r1, r4, r3
 8006bf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bfa:	4422      	add	r2, r4
 8006bfc:	3302      	adds	r3, #2
 8006bfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c02:	e7c4      	b.n	8006b8e <_printf_common+0x62>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4622      	mov	r2, r4
 8006c08:	4639      	mov	r1, r7
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	47c0      	blx	r8
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d0e6      	beq.n	8006be0 <_printf_common+0xb4>
 8006c12:	f109 0901 	add.w	r9, r9, #1
 8006c16:	e7d8      	b.n	8006bca <_printf_common+0x9e>

08006c18 <_printf_i>:
 8006c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c20:	460c      	mov	r4, r1
 8006c22:	7e09      	ldrb	r1, [r1, #24]
 8006c24:	b085      	sub	sp, #20
 8006c26:	296e      	cmp	r1, #110	; 0x6e
 8006c28:	4617      	mov	r7, r2
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	4698      	mov	r8, r3
 8006c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c30:	f000 80b3 	beq.w	8006d9a <_printf_i+0x182>
 8006c34:	d822      	bhi.n	8006c7c <_printf_i+0x64>
 8006c36:	2963      	cmp	r1, #99	; 0x63
 8006c38:	d036      	beq.n	8006ca8 <_printf_i+0x90>
 8006c3a:	d80a      	bhi.n	8006c52 <_printf_i+0x3a>
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	f000 80b9 	beq.w	8006db4 <_printf_i+0x19c>
 8006c42:	2958      	cmp	r1, #88	; 0x58
 8006c44:	f000 8083 	beq.w	8006d4e <_printf_i+0x136>
 8006c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c50:	e032      	b.n	8006cb8 <_printf_i+0xa0>
 8006c52:	2964      	cmp	r1, #100	; 0x64
 8006c54:	d001      	beq.n	8006c5a <_printf_i+0x42>
 8006c56:	2969      	cmp	r1, #105	; 0x69
 8006c58:	d1f6      	bne.n	8006c48 <_printf_i+0x30>
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	6813      	ldr	r3, [r2, #0]
 8006c5e:	0605      	lsls	r5, r0, #24
 8006c60:	f103 0104 	add.w	r1, r3, #4
 8006c64:	d52a      	bpl.n	8006cbc <_printf_i+0xa4>
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6011      	str	r1, [r2, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da03      	bge.n	8006c76 <_printf_i+0x5e>
 8006c6e:	222d      	movs	r2, #45	; 0x2d
 8006c70:	425b      	negs	r3, r3
 8006c72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c76:	486f      	ldr	r0, [pc, #444]	; (8006e34 <_printf_i+0x21c>)
 8006c78:	220a      	movs	r2, #10
 8006c7a:	e039      	b.n	8006cf0 <_printf_i+0xd8>
 8006c7c:	2973      	cmp	r1, #115	; 0x73
 8006c7e:	f000 809d 	beq.w	8006dbc <_printf_i+0x1a4>
 8006c82:	d808      	bhi.n	8006c96 <_printf_i+0x7e>
 8006c84:	296f      	cmp	r1, #111	; 0x6f
 8006c86:	d020      	beq.n	8006cca <_printf_i+0xb2>
 8006c88:	2970      	cmp	r1, #112	; 0x70
 8006c8a:	d1dd      	bne.n	8006c48 <_printf_i+0x30>
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	f043 0320 	orr.w	r3, r3, #32
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	e003      	b.n	8006c9e <_printf_i+0x86>
 8006c96:	2975      	cmp	r1, #117	; 0x75
 8006c98:	d017      	beq.n	8006cca <_printf_i+0xb2>
 8006c9a:	2978      	cmp	r1, #120	; 0x78
 8006c9c:	d1d4      	bne.n	8006c48 <_printf_i+0x30>
 8006c9e:	2378      	movs	r3, #120	; 0x78
 8006ca0:	4865      	ldr	r0, [pc, #404]	; (8006e38 <_printf_i+0x220>)
 8006ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ca6:	e055      	b.n	8006d54 <_printf_i+0x13c>
 8006ca8:	6813      	ldr	r3, [r2, #0]
 8006caa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cae:	1d19      	adds	r1, r3, #4
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6011      	str	r1, [r2, #0]
 8006cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e08c      	b.n	8006dd6 <_printf_i+0x1be>
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cc2:	6011      	str	r1, [r2, #0]
 8006cc4:	bf18      	it	ne
 8006cc6:	b21b      	sxthne	r3, r3
 8006cc8:	e7cf      	b.n	8006c6a <_printf_i+0x52>
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	6825      	ldr	r5, [r4, #0]
 8006cce:	1d18      	adds	r0, r3, #4
 8006cd0:	6010      	str	r0, [r2, #0]
 8006cd2:	0628      	lsls	r0, r5, #24
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0xc2>
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <_printf_i+0xc8>
 8006cda:	0668      	lsls	r0, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0xbe>
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	296f      	cmp	r1, #111	; 0x6f
 8006ce2:	bf14      	ite	ne
 8006ce4:	220a      	movne	r2, #10
 8006ce6:	2208      	moveq	r2, #8
 8006ce8:	4852      	ldr	r0, [pc, #328]	; (8006e34 <_printf_i+0x21c>)
 8006cea:	2100      	movs	r1, #0
 8006cec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cf0:	6865      	ldr	r5, [r4, #4]
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	60a5      	str	r5, [r4, #8]
 8006cf6:	f2c0 8095 	blt.w	8006e24 <_printf_i+0x20c>
 8006cfa:	6821      	ldr	r1, [r4, #0]
 8006cfc:	f021 0104 	bic.w	r1, r1, #4
 8006d00:	6021      	str	r1, [r4, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d13d      	bne.n	8006d82 <_printf_i+0x16a>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	f040 808e 	bne.w	8006e28 <_printf_i+0x210>
 8006d0c:	4665      	mov	r5, ip
 8006d0e:	2a08      	cmp	r2, #8
 8006d10:	d10b      	bne.n	8006d2a <_printf_i+0x112>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	07db      	lsls	r3, r3, #31
 8006d16:	d508      	bpl.n	8006d2a <_printf_i+0x112>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bfde      	ittt	le
 8006d20:	2330      	movle	r3, #48	; 0x30
 8006d22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d2a:	ebac 0305 	sub.w	r3, ip, r5
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	f8cd 8000 	str.w	r8, [sp]
 8006d34:	463b      	mov	r3, r7
 8006d36:	aa03      	add	r2, sp, #12
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff fef6 	bl	8006b2c <_printf_common>
 8006d40:	3001      	adds	r0, #1
 8006d42:	d14d      	bne.n	8006de0 <_printf_i+0x1c8>
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	b005      	add	sp, #20
 8006d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	4839      	ldr	r0, [pc, #228]	; (8006e34 <_printf_i+0x21c>)
 8006d50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d54:	6813      	ldr	r3, [r2, #0]
 8006d56:	6821      	ldr	r1, [r4, #0]
 8006d58:	1d1d      	adds	r5, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6015      	str	r5, [r2, #0]
 8006d5e:	060a      	lsls	r2, r1, #24
 8006d60:	d50b      	bpl.n	8006d7a <_printf_i+0x162>
 8006d62:	07ca      	lsls	r2, r1, #31
 8006d64:	bf44      	itt	mi
 8006d66:	f041 0120 	orrmi.w	r1, r1, #32
 8006d6a:	6021      	strmi	r1, [r4, #0]
 8006d6c:	b91b      	cbnz	r3, 8006d76 <_printf_i+0x15e>
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	f022 0220 	bic.w	r2, r2, #32
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	2210      	movs	r2, #16
 8006d78:	e7b7      	b.n	8006cea <_printf_i+0xd2>
 8006d7a:	064d      	lsls	r5, r1, #25
 8006d7c:	bf48      	it	mi
 8006d7e:	b29b      	uxthmi	r3, r3
 8006d80:	e7ef      	b.n	8006d62 <_printf_i+0x14a>
 8006d82:	4665      	mov	r5, ip
 8006d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d88:	fb02 3311 	mls	r3, r2, r1, r3
 8006d8c:	5cc3      	ldrb	r3, [r0, r3]
 8006d8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d92:	460b      	mov	r3, r1
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d1f5      	bne.n	8006d84 <_printf_i+0x16c>
 8006d98:	e7b9      	b.n	8006d0e <_printf_i+0xf6>
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	6825      	ldr	r5, [r4, #0]
 8006d9e:	1d18      	adds	r0, r3, #4
 8006da0:	6961      	ldr	r1, [r4, #20]
 8006da2:	6010      	str	r0, [r2, #0]
 8006da4:	0628      	lsls	r0, r5, #24
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	d501      	bpl.n	8006dae <_printf_i+0x196>
 8006daa:	6019      	str	r1, [r3, #0]
 8006dac:	e002      	b.n	8006db4 <_printf_i+0x19c>
 8006dae:	066a      	lsls	r2, r5, #25
 8006db0:	d5fb      	bpl.n	8006daa <_printf_i+0x192>
 8006db2:	8019      	strh	r1, [r3, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	4665      	mov	r5, ip
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	e7b9      	b.n	8006d30 <_printf_i+0x118>
 8006dbc:	6813      	ldr	r3, [r2, #0]
 8006dbe:	1d19      	adds	r1, r3, #4
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	681d      	ldr	r5, [r3, #0]
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f002 fc65 	bl	8009698 <memchr>
 8006dce:	b108      	cbz	r0, 8006dd4 <_printf_i+0x1bc>
 8006dd0:	1b40      	subs	r0, r0, r5
 8006dd2:	6060      	str	r0, [r4, #4]
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dde:	e7a7      	b.n	8006d30 <_printf_i+0x118>
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4639      	mov	r1, r7
 8006de6:	4630      	mov	r0, r6
 8006de8:	47c0      	blx	r8
 8006dea:	3001      	adds	r0, #1
 8006dec:	d0aa      	beq.n	8006d44 <_printf_i+0x12c>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	079b      	lsls	r3, r3, #30
 8006df2:	d413      	bmi.n	8006e1c <_printf_i+0x204>
 8006df4:	68e0      	ldr	r0, [r4, #12]
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	4298      	cmp	r0, r3
 8006dfa:	bfb8      	it	lt
 8006dfc:	4618      	movlt	r0, r3
 8006dfe:	e7a3      	b.n	8006d48 <_printf_i+0x130>
 8006e00:	2301      	movs	r3, #1
 8006e02:	464a      	mov	r2, r9
 8006e04:	4639      	mov	r1, r7
 8006e06:	4630      	mov	r0, r6
 8006e08:	47c0      	blx	r8
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d09a      	beq.n	8006d44 <_printf_i+0x12c>
 8006e0e:	3501      	adds	r5, #1
 8006e10:	68e3      	ldr	r3, [r4, #12]
 8006e12:	9a03      	ldr	r2, [sp, #12]
 8006e14:	1a9b      	subs	r3, r3, r2
 8006e16:	42ab      	cmp	r3, r5
 8006e18:	dcf2      	bgt.n	8006e00 <_printf_i+0x1e8>
 8006e1a:	e7eb      	b.n	8006df4 <_printf_i+0x1dc>
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	f104 0919 	add.w	r9, r4, #25
 8006e22:	e7f5      	b.n	8006e10 <_printf_i+0x1f8>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ac      	bne.n	8006d82 <_printf_i+0x16a>
 8006e28:	7803      	ldrb	r3, [r0, #0]
 8006e2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e32:	e76c      	b.n	8006d0e <_printf_i+0xf6>
 8006e34:	0800d4a4 	.word	0x0800d4a4
 8006e38:	0800d4b5 	.word	0x0800d4b5

08006e3c <_scanf_float>:
 8006e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e40:	469a      	mov	sl, r3
 8006e42:	688b      	ldr	r3, [r1, #8]
 8006e44:	4616      	mov	r6, r2
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e4c:	bf88      	it	hi
 8006e4e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006e52:	b087      	sub	sp, #28
 8006e54:	bf85      	ittet	hi
 8006e56:	189b      	addhi	r3, r3, r2
 8006e58:	9301      	strhi	r3, [sp, #4]
 8006e5a:	2300      	movls	r3, #0
 8006e5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e60:	4688      	mov	r8, r1
 8006e62:	f04f 0b00 	mov.w	fp, #0
 8006e66:	bf8c      	ite	hi
 8006e68:	608b      	strhi	r3, [r1, #8]
 8006e6a:	9301      	strls	r3, [sp, #4]
 8006e6c:	680b      	ldr	r3, [r1, #0]
 8006e6e:	4607      	mov	r7, r0
 8006e70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e74:	f848 3b1c 	str.w	r3, [r8], #28
 8006e78:	460c      	mov	r4, r1
 8006e7a:	4645      	mov	r5, r8
 8006e7c:	465a      	mov	r2, fp
 8006e7e:	46d9      	mov	r9, fp
 8006e80:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006e84:	f8cd b008 	str.w	fp, [sp, #8]
 8006e88:	68a1      	ldr	r1, [r4, #8]
 8006e8a:	b181      	cbz	r1, 8006eae <_scanf_float+0x72>
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b49      	cmp	r3, #73	; 0x49
 8006e92:	d071      	beq.n	8006f78 <_scanf_float+0x13c>
 8006e94:	d84d      	bhi.n	8006f32 <_scanf_float+0xf6>
 8006e96:	2b39      	cmp	r3, #57	; 0x39
 8006e98:	d840      	bhi.n	8006f1c <_scanf_float+0xe0>
 8006e9a:	2b31      	cmp	r3, #49	; 0x31
 8006e9c:	f080 8088 	bcs.w	8006fb0 <_scanf_float+0x174>
 8006ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8006ea2:	f000 8090 	beq.w	8006fc6 <_scanf_float+0x18a>
 8006ea6:	d815      	bhi.n	8006ed4 <_scanf_float+0x98>
 8006ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8006eaa:	f000 808c 	beq.w	8006fc6 <_scanf_float+0x18a>
 8006eae:	f1b9 0f00 	cmp.w	r9, #0
 8006eb2:	d003      	beq.n	8006ebc <_scanf_float+0x80>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eba:	6023      	str	r3, [r4, #0]
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	2a01      	cmp	r2, #1
 8006ec0:	f200 80ea 	bhi.w	8007098 <_scanf_float+0x25c>
 8006ec4:	4545      	cmp	r5, r8
 8006ec6:	f200 80dc 	bhi.w	8007082 <_scanf_float+0x246>
 8006eca:	2601      	movs	r6, #1
 8006ecc:	4630      	mov	r0, r6
 8006ece:	b007      	add	sp, #28
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed6:	f000 809f 	beq.w	8007018 <_scanf_float+0x1dc>
 8006eda:	2b30      	cmp	r3, #48	; 0x30
 8006edc:	d1e7      	bne.n	8006eae <_scanf_float+0x72>
 8006ede:	6820      	ldr	r0, [r4, #0]
 8006ee0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006ee4:	d064      	beq.n	8006fb0 <_scanf_float+0x174>
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006eec:	6020      	str	r0, [r4, #0]
 8006eee:	f109 0901 	add.w	r9, r9, #1
 8006ef2:	b11b      	cbz	r3, 8006efc <_scanf_float+0xc0>
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	60a1      	str	r1, [r4, #8]
 8006efc:	68a3      	ldr	r3, [r4, #8]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	60a3      	str	r3, [r4, #8]
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	3301      	adds	r3, #1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	6873      	ldr	r3, [r6, #4]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	6073      	str	r3, [r6, #4]
 8006f10:	f340 80ac 	ble.w	800706c <_scanf_float+0x230>
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	6033      	str	r3, [r6, #0]
 8006f1a:	e7b5      	b.n	8006e88 <_scanf_float+0x4c>
 8006f1c:	2b45      	cmp	r3, #69	; 0x45
 8006f1e:	f000 8085 	beq.w	800702c <_scanf_float+0x1f0>
 8006f22:	2b46      	cmp	r3, #70	; 0x46
 8006f24:	d06a      	beq.n	8006ffc <_scanf_float+0x1c0>
 8006f26:	2b41      	cmp	r3, #65	; 0x41
 8006f28:	d1c1      	bne.n	8006eae <_scanf_float+0x72>
 8006f2a:	2a01      	cmp	r2, #1
 8006f2c:	d1bf      	bne.n	8006eae <_scanf_float+0x72>
 8006f2e:	2202      	movs	r2, #2
 8006f30:	e046      	b.n	8006fc0 <_scanf_float+0x184>
 8006f32:	2b65      	cmp	r3, #101	; 0x65
 8006f34:	d07a      	beq.n	800702c <_scanf_float+0x1f0>
 8006f36:	d818      	bhi.n	8006f6a <_scanf_float+0x12e>
 8006f38:	2b54      	cmp	r3, #84	; 0x54
 8006f3a:	d066      	beq.n	800700a <_scanf_float+0x1ce>
 8006f3c:	d811      	bhi.n	8006f62 <_scanf_float+0x126>
 8006f3e:	2b4e      	cmp	r3, #78	; 0x4e
 8006f40:	d1b5      	bne.n	8006eae <_scanf_float+0x72>
 8006f42:	2a00      	cmp	r2, #0
 8006f44:	d146      	bne.n	8006fd4 <_scanf_float+0x198>
 8006f46:	f1b9 0f00 	cmp.w	r9, #0
 8006f4a:	d145      	bne.n	8006fd8 <_scanf_float+0x19c>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f52:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f56:	d13f      	bne.n	8006fd8 <_scanf_float+0x19c>
 8006f58:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f5c:	6021      	str	r1, [r4, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	e02e      	b.n	8006fc0 <_scanf_float+0x184>
 8006f62:	2b59      	cmp	r3, #89	; 0x59
 8006f64:	d01e      	beq.n	8006fa4 <_scanf_float+0x168>
 8006f66:	2b61      	cmp	r3, #97	; 0x61
 8006f68:	e7de      	b.n	8006f28 <_scanf_float+0xec>
 8006f6a:	2b6e      	cmp	r3, #110	; 0x6e
 8006f6c:	d0e9      	beq.n	8006f42 <_scanf_float+0x106>
 8006f6e:	d815      	bhi.n	8006f9c <_scanf_float+0x160>
 8006f70:	2b66      	cmp	r3, #102	; 0x66
 8006f72:	d043      	beq.n	8006ffc <_scanf_float+0x1c0>
 8006f74:	2b69      	cmp	r3, #105	; 0x69
 8006f76:	d19a      	bne.n	8006eae <_scanf_float+0x72>
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	d138      	bne.n	8006ff0 <_scanf_float+0x1b4>
 8006f7e:	f1b9 0f00 	cmp.w	r9, #0
 8006f82:	d197      	bne.n	8006eb4 <_scanf_float+0x78>
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006f8a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006f8e:	d195      	bne.n	8006ebc <_scanf_float+0x80>
 8006f90:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006f94:	6021      	str	r1, [r4, #0]
 8006f96:	f04f 0b01 	mov.w	fp, #1
 8006f9a:	e011      	b.n	8006fc0 <_scanf_float+0x184>
 8006f9c:	2b74      	cmp	r3, #116	; 0x74
 8006f9e:	d034      	beq.n	800700a <_scanf_float+0x1ce>
 8006fa0:	2b79      	cmp	r3, #121	; 0x79
 8006fa2:	d184      	bne.n	8006eae <_scanf_float+0x72>
 8006fa4:	f1bb 0f07 	cmp.w	fp, #7
 8006fa8:	d181      	bne.n	8006eae <_scanf_float+0x72>
 8006faa:	f04f 0b08 	mov.w	fp, #8
 8006fae:	e007      	b.n	8006fc0 <_scanf_float+0x184>
 8006fb0:	eb12 0f0b 	cmn.w	r2, fp
 8006fb4:	f47f af7b 	bne.w	8006eae <_scanf_float+0x72>
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006fbe:	6021      	str	r1, [r4, #0]
 8006fc0:	702b      	strb	r3, [r5, #0]
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	e79a      	b.n	8006efc <_scanf_float+0xc0>
 8006fc6:	6821      	ldr	r1, [r4, #0]
 8006fc8:	0608      	lsls	r0, r1, #24
 8006fca:	f57f af70 	bpl.w	8006eae <_scanf_float+0x72>
 8006fce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fd2:	e7f4      	b.n	8006fbe <_scanf_float+0x182>
 8006fd4:	2a02      	cmp	r2, #2
 8006fd6:	d047      	beq.n	8007068 <_scanf_float+0x22c>
 8006fd8:	f1bb 0f01 	cmp.w	fp, #1
 8006fdc:	d003      	beq.n	8006fe6 <_scanf_float+0x1aa>
 8006fde:	f1bb 0f04 	cmp.w	fp, #4
 8006fe2:	f47f af64 	bne.w	8006eae <_scanf_float+0x72>
 8006fe6:	f10b 0b01 	add.w	fp, fp, #1
 8006fea:	fa5f fb8b 	uxtb.w	fp, fp
 8006fee:	e7e7      	b.n	8006fc0 <_scanf_float+0x184>
 8006ff0:	f1bb 0f03 	cmp.w	fp, #3
 8006ff4:	d0f7      	beq.n	8006fe6 <_scanf_float+0x1aa>
 8006ff6:	f1bb 0f05 	cmp.w	fp, #5
 8006ffa:	e7f2      	b.n	8006fe2 <_scanf_float+0x1a6>
 8006ffc:	f1bb 0f02 	cmp.w	fp, #2
 8007000:	f47f af55 	bne.w	8006eae <_scanf_float+0x72>
 8007004:	f04f 0b03 	mov.w	fp, #3
 8007008:	e7da      	b.n	8006fc0 <_scanf_float+0x184>
 800700a:	f1bb 0f06 	cmp.w	fp, #6
 800700e:	f47f af4e 	bne.w	8006eae <_scanf_float+0x72>
 8007012:	f04f 0b07 	mov.w	fp, #7
 8007016:	e7d3      	b.n	8006fc0 <_scanf_float+0x184>
 8007018:	6821      	ldr	r1, [r4, #0]
 800701a:	0588      	lsls	r0, r1, #22
 800701c:	f57f af47 	bpl.w	8006eae <_scanf_float+0x72>
 8007020:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007024:	6021      	str	r1, [r4, #0]
 8007026:	f8cd 9008 	str.w	r9, [sp, #8]
 800702a:	e7c9      	b.n	8006fc0 <_scanf_float+0x184>
 800702c:	6821      	ldr	r1, [r4, #0]
 800702e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007032:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007036:	d006      	beq.n	8007046 <_scanf_float+0x20a>
 8007038:	0548      	lsls	r0, r1, #21
 800703a:	f57f af38 	bpl.w	8006eae <_scanf_float+0x72>
 800703e:	f1b9 0f00 	cmp.w	r9, #0
 8007042:	f43f af3b 	beq.w	8006ebc <_scanf_float+0x80>
 8007046:	0588      	lsls	r0, r1, #22
 8007048:	bf58      	it	pl
 800704a:	9802      	ldrpl	r0, [sp, #8]
 800704c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007050:	bf58      	it	pl
 8007052:	eba9 0000 	subpl.w	r0, r9, r0
 8007056:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800705a:	bf58      	it	pl
 800705c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007060:	6021      	str	r1, [r4, #0]
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	e7ab      	b.n	8006fc0 <_scanf_float+0x184>
 8007068:	2203      	movs	r2, #3
 800706a:	e7a9      	b.n	8006fc0 <_scanf_float+0x184>
 800706c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007070:	4631      	mov	r1, r6
 8007072:	4638      	mov	r0, r7
 8007074:	9205      	str	r2, [sp, #20]
 8007076:	4798      	blx	r3
 8007078:	9a05      	ldr	r2, [sp, #20]
 800707a:	2800      	cmp	r0, #0
 800707c:	f43f af04 	beq.w	8006e88 <_scanf_float+0x4c>
 8007080:	e715      	b.n	8006eae <_scanf_float+0x72>
 8007082:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007086:	4632      	mov	r2, r6
 8007088:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800708c:	4638      	mov	r0, r7
 800708e:	4798      	blx	r3
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	3b01      	subs	r3, #1
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	e715      	b.n	8006ec4 <_scanf_float+0x88>
 8007098:	f10b 33ff 	add.w	r3, fp, #4294967295
 800709c:	2b06      	cmp	r3, #6
 800709e:	d80a      	bhi.n	80070b6 <_scanf_float+0x27a>
 80070a0:	f1bb 0f02 	cmp.w	fp, #2
 80070a4:	d967      	bls.n	8007176 <_scanf_float+0x33a>
 80070a6:	f1ab 0b03 	sub.w	fp, fp, #3
 80070aa:	fa5f fb8b 	uxtb.w	fp, fp
 80070ae:	eba5 0b0b 	sub.w	fp, r5, fp
 80070b2:	455d      	cmp	r5, fp
 80070b4:	d14a      	bne.n	800714c <_scanf_float+0x310>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	05da      	lsls	r2, r3, #23
 80070ba:	d51f      	bpl.n	80070fc <_scanf_float+0x2c0>
 80070bc:	055b      	lsls	r3, r3, #21
 80070be:	d467      	bmi.n	8007190 <_scanf_float+0x354>
 80070c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	2965      	cmp	r1, #101	; 0x65
 80070c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80070cc:	f105 3bff 	add.w	fp, r5, #4294967295
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	d00d      	beq.n	80070f0 <_scanf_float+0x2b4>
 80070d4:	2945      	cmp	r1, #69	; 0x45
 80070d6:	d00b      	beq.n	80070f0 <_scanf_float+0x2b4>
 80070d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070dc:	4632      	mov	r2, r6
 80070de:	4638      	mov	r0, r7
 80070e0:	4798      	blx	r3
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f1a5 0b02 	sub.w	fp, r5, #2
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070f4:	4632      	mov	r2, r6
 80070f6:	4638      	mov	r0, r7
 80070f8:	4798      	blx	r3
 80070fa:	465d      	mov	r5, fp
 80070fc:	6826      	ldr	r6, [r4, #0]
 80070fe:	f016 0610 	ands.w	r6, r6, #16
 8007102:	d176      	bne.n	80071f2 <_scanf_float+0x3b6>
 8007104:	702e      	strb	r6, [r5, #0]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007110:	d141      	bne.n	8007196 <_scanf_float+0x35a>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	eba9 0303 	sub.w	r3, r9, r3
 8007118:	425a      	negs	r2, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d148      	bne.n	80071b0 <_scanf_float+0x374>
 800711e:	4641      	mov	r1, r8
 8007120:	2200      	movs	r2, #0
 8007122:	4638      	mov	r0, r7
 8007124:	f000 ff38 	bl	8007f98 <_strtod_r>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	4680      	mov	r8, r0
 800712c:	f015 0f02 	tst.w	r5, #2
 8007130:	4689      	mov	r9, r1
 8007132:	f8da 3000 	ldr.w	r3, [sl]
 8007136:	d046      	beq.n	80071c6 <_scanf_float+0x38a>
 8007138:	1d1a      	adds	r2, r3, #4
 800713a:	f8ca 2000 	str.w	r2, [sl]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	e9c3 8900 	strd	r8, r9, [r3]
 8007144:	68e3      	ldr	r3, [r4, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	60e3      	str	r3, [r4, #12]
 800714a:	e6bf      	b.n	8006ecc <_scanf_float+0x90>
 800714c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007150:	4632      	mov	r2, r6
 8007152:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007156:	4638      	mov	r0, r7
 8007158:	4798      	blx	r3
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	3b01      	subs	r3, #1
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	e7a7      	b.n	80070b2 <_scanf_float+0x276>
 8007162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007166:	4632      	mov	r2, r6
 8007168:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800716c:	4638      	mov	r0, r7
 800716e:	4798      	blx	r3
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	3b01      	subs	r3, #1
 8007174:	6123      	str	r3, [r4, #16]
 8007176:	4545      	cmp	r5, r8
 8007178:	d8f3      	bhi.n	8007162 <_scanf_float+0x326>
 800717a:	e6a6      	b.n	8006eca <_scanf_float+0x8e>
 800717c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007180:	4632      	mov	r2, r6
 8007182:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007186:	4638      	mov	r0, r7
 8007188:	4798      	blx	r3
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	3b01      	subs	r3, #1
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	4545      	cmp	r5, r8
 8007192:	d8f3      	bhi.n	800717c <_scanf_float+0x340>
 8007194:	e699      	b.n	8006eca <_scanf_float+0x8e>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0c0      	beq.n	800711e <_scanf_float+0x2e2>
 800719c:	9904      	ldr	r1, [sp, #16]
 800719e:	230a      	movs	r3, #10
 80071a0:	4632      	mov	r2, r6
 80071a2:	3101      	adds	r1, #1
 80071a4:	4638      	mov	r0, r7
 80071a6:	f000 ff83 	bl	80080b0 <_strtol_r>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	9d04      	ldr	r5, [sp, #16]
 80071ae:	1ac2      	subs	r2, r0, r3
 80071b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071b4:	429d      	cmp	r5, r3
 80071b6:	bf28      	it	cs
 80071b8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80071bc:	490e      	ldr	r1, [pc, #56]	; (80071f8 <_scanf_float+0x3bc>)
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f838 	bl	8007234 <siprintf>
 80071c4:	e7ab      	b.n	800711e <_scanf_float+0x2e2>
 80071c6:	1d1f      	adds	r7, r3, #4
 80071c8:	f015 0504 	ands.w	r5, r5, #4
 80071cc:	f8ca 7000 	str.w	r7, [sl]
 80071d0:	d1b5      	bne.n	800713e <_scanf_float+0x302>
 80071d2:	681f      	ldr	r7, [r3, #0]
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	f7f9 fc18 	bl	8000a0c <__aeabi_dcmpun>
 80071dc:	b120      	cbz	r0, 80071e8 <_scanf_float+0x3ac>
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f824 	bl	800722c <nanf>
 80071e4:	6038      	str	r0, [r7, #0]
 80071e6:	e7ad      	b.n	8007144 <_scanf_float+0x308>
 80071e8:	4640      	mov	r0, r8
 80071ea:	4649      	mov	r1, r9
 80071ec:	f7f9 fc6c 	bl	8000ac8 <__aeabi_d2f>
 80071f0:	e7f8      	b.n	80071e4 <_scanf_float+0x3a8>
 80071f2:	2600      	movs	r6, #0
 80071f4:	e66a      	b.n	8006ecc <_scanf_float+0x90>
 80071f6:	bf00      	nop
 80071f8:	0800d4c6 	.word	0x0800d4c6

080071fc <iprintf>:
 80071fc:	b40f      	push	{r0, r1, r2, r3}
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <iprintf+0x2c>)
 8007200:	b513      	push	{r0, r1, r4, lr}
 8007202:	681c      	ldr	r4, [r3, #0]
 8007204:	b124      	cbz	r4, 8007210 <iprintf+0x14>
 8007206:	69a3      	ldr	r3, [r4, #24]
 8007208:	b913      	cbnz	r3, 8007210 <iprintf+0x14>
 800720a:	4620      	mov	r0, r4
 800720c:	f001 fe44 	bl	8008e98 <__sinit>
 8007210:	ab05      	add	r3, sp, #20
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	68a1      	ldr	r1, [r4, #8]
 8007216:	4620      	mov	r0, r4
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	f003 fa1b 	bl	800a654 <_vfiprintf_r>
 800721e:	b002      	add	sp, #8
 8007220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007224:	b004      	add	sp, #16
 8007226:	4770      	bx	lr
 8007228:	20000194 	.word	0x20000194

0800722c <nanf>:
 800722c:	4800      	ldr	r0, [pc, #0]	; (8007230 <nanf+0x4>)
 800722e:	4770      	bx	lr
 8007230:	7fc00000 	.word	0x7fc00000

08007234 <siprintf>:
 8007234:	b40e      	push	{r1, r2, r3}
 8007236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723a:	b500      	push	{lr}
 800723c:	b09c      	sub	sp, #112	; 0x70
 800723e:	ab1d      	add	r3, sp, #116	; 0x74
 8007240:	9002      	str	r0, [sp, #8]
 8007242:	9006      	str	r0, [sp, #24]
 8007244:	9107      	str	r1, [sp, #28]
 8007246:	9104      	str	r1, [sp, #16]
 8007248:	4808      	ldr	r0, [pc, #32]	; (800726c <siprintf+0x38>)
 800724a:	4909      	ldr	r1, [pc, #36]	; (8007270 <siprintf+0x3c>)
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	9105      	str	r1, [sp, #20]
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	a902      	add	r1, sp, #8
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f002 ff32 	bl	800a0c0 <_svfiprintf_r>
 800725c:	2200      	movs	r2, #0
 800725e:	9b02      	ldr	r3, [sp, #8]
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	b01c      	add	sp, #112	; 0x70
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b003      	add	sp, #12
 800726a:	4770      	bx	lr
 800726c:	20000194 	.word	0x20000194
 8007270:	ffff0208 	.word	0xffff0208

08007274 <siscanf>:
 8007274:	b40e      	push	{r1, r2, r3}
 8007276:	f44f 7201 	mov.w	r2, #516	; 0x204
 800727a:	b530      	push	{r4, r5, lr}
 800727c:	b09c      	sub	sp, #112	; 0x70
 800727e:	ac1f      	add	r4, sp, #124	; 0x7c
 8007280:	f854 5b04 	ldr.w	r5, [r4], #4
 8007284:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007288:	9002      	str	r0, [sp, #8]
 800728a:	9006      	str	r0, [sp, #24]
 800728c:	f7f8 ff60 	bl	8000150 <strlen>
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <siscanf+0x4c>)
 8007292:	9003      	str	r0, [sp, #12]
 8007294:	930b      	str	r3, [sp, #44]	; 0x2c
 8007296:	2300      	movs	r3, #0
 8007298:	930f      	str	r3, [sp, #60]	; 0x3c
 800729a:	9314      	str	r3, [sp, #80]	; 0x50
 800729c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072a0:	9007      	str	r0, [sp, #28]
 80072a2:	4808      	ldr	r0, [pc, #32]	; (80072c4 <siscanf+0x50>)
 80072a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4623      	mov	r3, r4
 80072ac:	a902      	add	r1, sp, #8
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	9401      	str	r4, [sp, #4]
 80072b2:	f003 f857 	bl	800a364 <__ssvfiscanf_r>
 80072b6:	b01c      	add	sp, #112	; 0x70
 80072b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072bc:	b003      	add	sp, #12
 80072be:	4770      	bx	lr
 80072c0:	080072eb 	.word	0x080072eb
 80072c4:	20000194 	.word	0x20000194

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f003 fc2e 	bl	800ab30 <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__seofread>:
 80072ea:	2000      	movs	r0, #0
 80072ec:	4770      	bx	lr

080072ee <__swrite>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	461f      	mov	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	4605      	mov	r5, r0
 80072f8:	05db      	lsls	r3, r3, #23
 80072fa:	460c      	mov	r4, r1
 80072fc:	4616      	mov	r6, r2
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1e>
 8007300:	2302      	movs	r3, #2
 8007302:	2200      	movs	r2, #0
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	f002 f99a 	bl	8009640 <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	4632      	mov	r2, r6
 8007310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800731a:	463b      	mov	r3, r7
 800731c:	4628      	mov	r0, r5
 800731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	f000 bf15 	b.w	8008150 <_write_r>

08007326 <__sseek>:
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732e:	f002 f987 	bl	8009640 <_lseek_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	bf15      	itete	ne
 8007338:	6560      	strne	r0, [r4, #84]	; 0x54
 800733a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800733e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007342:	81a3      	strheq	r3, [r4, #12]
 8007344:	bf18      	it	ne
 8007346:	81a3      	strhne	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__sclose>:
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 bf11 	b.w	8008174 <_close_r>

08007352 <sulp>:
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	460f      	mov	r7, r1
 8007358:	4690      	mov	r8, r2
 800735a:	f002 fc75 	bl	8009c48 <__ulp>
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	f1b8 0f00 	cmp.w	r8, #0
 8007366:	d011      	beq.n	800738c <sulp+0x3a>
 8007368:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800736c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007370:	2b00      	cmp	r3, #0
 8007372:	dd0b      	ble.n	800738c <sulp+0x3a>
 8007374:	2400      	movs	r4, #0
 8007376:	051b      	lsls	r3, r3, #20
 8007378:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800737c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007380:	4622      	mov	r2, r4
 8007382:	462b      	mov	r3, r5
 8007384:	f7f9 f8a8 	bl	80004d8 <__aeabi_dmul>
 8007388:	4604      	mov	r4, r0
 800738a:	460d      	mov	r5, r1
 800738c:	4620      	mov	r0, r4
 800738e:	4629      	mov	r1, r5
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	0000      	movs	r0, r0
	...

08007398 <_strtod_l>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	461f      	mov	r7, r3
 800739e:	2300      	movs	r3, #0
 80073a0:	b0a1      	sub	sp, #132	; 0x84
 80073a2:	4683      	mov	fp, r0
 80073a4:	4638      	mov	r0, r7
 80073a6:	460e      	mov	r6, r1
 80073a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80073aa:	931c      	str	r3, [sp, #112]	; 0x70
 80073ac:	f002 f938 	bl	8009620 <__localeconv_l>
 80073b0:	4680      	mov	r8, r0
 80073b2:	6800      	ldr	r0, [r0, #0]
 80073b4:	f7f8 fecc 	bl	8000150 <strlen>
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	4604      	mov	r4, r0
 80073be:	f04f 0a00 	mov.w	sl, #0
 80073c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80073c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	2a0d      	cmp	r2, #13
 80073ca:	d832      	bhi.n	8007432 <_strtod_l+0x9a>
 80073cc:	2a09      	cmp	r2, #9
 80073ce:	d236      	bcs.n	800743e <_strtod_l+0xa6>
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d03e      	beq.n	8007452 <_strtod_l+0xba>
 80073d4:	2300      	movs	r3, #0
 80073d6:	930d      	str	r3, [sp, #52]	; 0x34
 80073d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073da:	782b      	ldrb	r3, [r5, #0]
 80073dc:	2b30      	cmp	r3, #48	; 0x30
 80073de:	f040 80ac 	bne.w	800753a <_strtod_l+0x1a2>
 80073e2:	786b      	ldrb	r3, [r5, #1]
 80073e4:	2b58      	cmp	r3, #88	; 0x58
 80073e6:	d001      	beq.n	80073ec <_strtod_l+0x54>
 80073e8:	2b78      	cmp	r3, #120	; 0x78
 80073ea:	d167      	bne.n	80074bc <_strtod_l+0x124>
 80073ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ee:	9702      	str	r7, [sp, #8]
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	ab1c      	add	r3, sp, #112	; 0x70
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4a89      	ldr	r2, [pc, #548]	; (800761c <_strtod_l+0x284>)
 80073f8:	ab1d      	add	r3, sp, #116	; 0x74
 80073fa:	a91b      	add	r1, sp, #108	; 0x6c
 80073fc:	4658      	mov	r0, fp
 80073fe:	f001 fe25 	bl	800904c <__gethex>
 8007402:	f010 0407 	ands.w	r4, r0, #7
 8007406:	4606      	mov	r6, r0
 8007408:	d005      	beq.n	8007416 <_strtod_l+0x7e>
 800740a:	2c06      	cmp	r4, #6
 800740c:	d12b      	bne.n	8007466 <_strtod_l+0xce>
 800740e:	2300      	movs	r3, #0
 8007410:	3501      	adds	r5, #1
 8007412:	951b      	str	r5, [sp, #108]	; 0x6c
 8007414:	930d      	str	r3, [sp, #52]	; 0x34
 8007416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007418:	2b00      	cmp	r3, #0
 800741a:	f040 85a6 	bne.w	8007f6a <_strtod_l+0xbd2>
 800741e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007420:	b1e3      	cbz	r3, 800745c <_strtod_l+0xc4>
 8007422:	464a      	mov	r2, r9
 8007424:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	b021      	add	sp, #132	; 0x84
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	2a2b      	cmp	r2, #43	; 0x2b
 8007434:	d015      	beq.n	8007462 <_strtod_l+0xca>
 8007436:	2a2d      	cmp	r2, #45	; 0x2d
 8007438:	d004      	beq.n	8007444 <_strtod_l+0xac>
 800743a:	2a20      	cmp	r2, #32
 800743c:	d1ca      	bne.n	80073d4 <_strtod_l+0x3c>
 800743e:	3301      	adds	r3, #1
 8007440:	931b      	str	r3, [sp, #108]	; 0x6c
 8007442:	e7bf      	b.n	80073c4 <_strtod_l+0x2c>
 8007444:	2201      	movs	r2, #1
 8007446:	920d      	str	r2, [sp, #52]	; 0x34
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	921b      	str	r2, [sp, #108]	; 0x6c
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1c2      	bne.n	80073d8 <_strtod_l+0x40>
 8007452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007454:	961b      	str	r6, [sp, #108]	; 0x6c
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 8585 	bne.w	8007f66 <_strtod_l+0xbce>
 800745c:	464a      	mov	r2, r9
 800745e:	4653      	mov	r3, sl
 8007460:	e7e2      	b.n	8007428 <_strtod_l+0x90>
 8007462:	2200      	movs	r2, #0
 8007464:	e7ef      	b.n	8007446 <_strtod_l+0xae>
 8007466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007468:	b13a      	cbz	r2, 800747a <_strtod_l+0xe2>
 800746a:	2135      	movs	r1, #53	; 0x35
 800746c:	a81e      	add	r0, sp, #120	; 0x78
 800746e:	f002 fcde 	bl	8009e2e <__copybits>
 8007472:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007474:	4658      	mov	r0, fp
 8007476:	f002 f951 	bl	800971c <_Bfree>
 800747a:	3c01      	subs	r4, #1
 800747c:	2c04      	cmp	r4, #4
 800747e:	d806      	bhi.n	800748e <_strtod_l+0xf6>
 8007480:	e8df f004 	tbb	[pc, r4]
 8007484:	1714030a 	.word	0x1714030a
 8007488:	0a          	.byte	0x0a
 8007489:	00          	.byte	0x00
 800748a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800748e:	0731      	lsls	r1, r6, #28
 8007490:	d5c1      	bpl.n	8007416 <_strtod_l+0x7e>
 8007492:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007496:	e7be      	b.n	8007416 <_strtod_l+0x7e>
 8007498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800749a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800749e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80074a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80074a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80074aa:	e7f0      	b.n	800748e <_strtod_l+0xf6>
 80074ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007620 <_strtod_l+0x288>
 80074b0:	e7ed      	b.n	800748e <_strtod_l+0xf6>
 80074b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80074b6:	f04f 39ff 	mov.w	r9, #4294967295
 80074ba:	e7e8      	b.n	800748e <_strtod_l+0xf6>
 80074bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b30      	cmp	r3, #48	; 0x30
 80074c6:	d0f9      	beq.n	80074bc <_strtod_l+0x124>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0a4      	beq.n	8007416 <_strtod_l+0x7e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	2500      	movs	r5, #0
 80074d0:	220a      	movs	r2, #10
 80074d2:	9307      	str	r3, [sp, #28]
 80074d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074d6:	9506      	str	r5, [sp, #24]
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	9504      	str	r5, [sp, #16]
 80074dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80074de:	7807      	ldrb	r7, [r0, #0]
 80074e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80074e4:	b2d9      	uxtb	r1, r3
 80074e6:	2909      	cmp	r1, #9
 80074e8:	d929      	bls.n	800753e <_strtod_l+0x1a6>
 80074ea:	4622      	mov	r2, r4
 80074ec:	f8d8 1000 	ldr.w	r1, [r8]
 80074f0:	f003 fb71 	bl	800abd6 <strncmp>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d031      	beq.n	800755c <_strtod_l+0x1c4>
 80074f8:	2000      	movs	r0, #0
 80074fa:	463b      	mov	r3, r7
 80074fc:	4602      	mov	r2, r0
 80074fe:	9c04      	ldr	r4, [sp, #16]
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	2b65      	cmp	r3, #101	; 0x65
 8007504:	d001      	beq.n	800750a <_strtod_l+0x172>
 8007506:	2b45      	cmp	r3, #69	; 0x45
 8007508:	d114      	bne.n	8007534 <_strtod_l+0x19c>
 800750a:	b924      	cbnz	r4, 8007516 <_strtod_l+0x17e>
 800750c:	b910      	cbnz	r0, 8007514 <_strtod_l+0x17c>
 800750e:	9b07      	ldr	r3, [sp, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d09e      	beq.n	8007452 <_strtod_l+0xba>
 8007514:	2400      	movs	r4, #0
 8007516:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007518:	1c73      	adds	r3, r6, #1
 800751a:	931b      	str	r3, [sp, #108]	; 0x6c
 800751c:	7873      	ldrb	r3, [r6, #1]
 800751e:	2b2b      	cmp	r3, #43	; 0x2b
 8007520:	d078      	beq.n	8007614 <_strtod_l+0x27c>
 8007522:	2b2d      	cmp	r3, #45	; 0x2d
 8007524:	d070      	beq.n	8007608 <_strtod_l+0x270>
 8007526:	f04f 0c00 	mov.w	ip, #0
 800752a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800752e:	2f09      	cmp	r7, #9
 8007530:	d97c      	bls.n	800762c <_strtod_l+0x294>
 8007532:	961b      	str	r6, [sp, #108]	; 0x6c
 8007534:	f04f 0e00 	mov.w	lr, #0
 8007538:	e09a      	b.n	8007670 <_strtod_l+0x2d8>
 800753a:	2300      	movs	r3, #0
 800753c:	e7c7      	b.n	80074ce <_strtod_l+0x136>
 800753e:	9904      	ldr	r1, [sp, #16]
 8007540:	3001      	adds	r0, #1
 8007542:	2908      	cmp	r1, #8
 8007544:	bfd7      	itett	le
 8007546:	9906      	ldrle	r1, [sp, #24]
 8007548:	fb02 3505 	mlagt	r5, r2, r5, r3
 800754c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007550:	9306      	strle	r3, [sp, #24]
 8007552:	9b04      	ldr	r3, [sp, #16]
 8007554:	901b      	str	r0, [sp, #108]	; 0x6c
 8007556:	3301      	adds	r3, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	e7bf      	b.n	80074dc <_strtod_l+0x144>
 800755c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800755e:	191a      	adds	r2, r3, r4
 8007560:	921b      	str	r2, [sp, #108]	; 0x6c
 8007562:	9a04      	ldr	r2, [sp, #16]
 8007564:	5d1b      	ldrb	r3, [r3, r4]
 8007566:	2a00      	cmp	r2, #0
 8007568:	d037      	beq.n	80075da <_strtod_l+0x242>
 800756a:	4602      	mov	r2, r0
 800756c:	9c04      	ldr	r4, [sp, #16]
 800756e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007572:	2909      	cmp	r1, #9
 8007574:	d913      	bls.n	800759e <_strtod_l+0x206>
 8007576:	2101      	movs	r1, #1
 8007578:	9105      	str	r1, [sp, #20]
 800757a:	e7c2      	b.n	8007502 <_strtod_l+0x16a>
 800757c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800757e:	3001      	adds	r0, #1
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	921b      	str	r2, [sp, #108]	; 0x6c
 8007584:	785b      	ldrb	r3, [r3, #1]
 8007586:	2b30      	cmp	r3, #48	; 0x30
 8007588:	d0f8      	beq.n	800757c <_strtod_l+0x1e4>
 800758a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800758e:	2a08      	cmp	r2, #8
 8007590:	f200 84f0 	bhi.w	8007f74 <_strtod_l+0xbdc>
 8007594:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007596:	9208      	str	r2, [sp, #32]
 8007598:	4602      	mov	r2, r0
 800759a:	2000      	movs	r0, #0
 800759c:	4604      	mov	r4, r0
 800759e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80075a2:	f100 0101 	add.w	r1, r0, #1
 80075a6:	d012      	beq.n	80075ce <_strtod_l+0x236>
 80075a8:	440a      	add	r2, r1
 80075aa:	270a      	movs	r7, #10
 80075ac:	4621      	mov	r1, r4
 80075ae:	eb00 0c04 	add.w	ip, r0, r4
 80075b2:	458c      	cmp	ip, r1
 80075b4:	d113      	bne.n	80075de <_strtod_l+0x246>
 80075b6:	1821      	adds	r1, r4, r0
 80075b8:	2908      	cmp	r1, #8
 80075ba:	f104 0401 	add.w	r4, r4, #1
 80075be:	4404      	add	r4, r0
 80075c0:	dc19      	bgt.n	80075f6 <_strtod_l+0x25e>
 80075c2:	210a      	movs	r1, #10
 80075c4:	9b06      	ldr	r3, [sp, #24]
 80075c6:	fb01 e303 	mla	r3, r1, r3, lr
 80075ca:	9306      	str	r3, [sp, #24]
 80075cc:	2100      	movs	r1, #0
 80075ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075d0:	1c58      	adds	r0, r3, #1
 80075d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80075d4:	785b      	ldrb	r3, [r3, #1]
 80075d6:	4608      	mov	r0, r1
 80075d8:	e7c9      	b.n	800756e <_strtod_l+0x1d6>
 80075da:	9804      	ldr	r0, [sp, #16]
 80075dc:	e7d3      	b.n	8007586 <_strtod_l+0x1ee>
 80075de:	2908      	cmp	r1, #8
 80075e0:	f101 0101 	add.w	r1, r1, #1
 80075e4:	dc03      	bgt.n	80075ee <_strtod_l+0x256>
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	437b      	muls	r3, r7
 80075ea:	9306      	str	r3, [sp, #24]
 80075ec:	e7e1      	b.n	80075b2 <_strtod_l+0x21a>
 80075ee:	2910      	cmp	r1, #16
 80075f0:	bfd8      	it	le
 80075f2:	437d      	mulle	r5, r7
 80075f4:	e7dd      	b.n	80075b2 <_strtod_l+0x21a>
 80075f6:	2c10      	cmp	r4, #16
 80075f8:	bfdc      	itt	le
 80075fa:	210a      	movle	r1, #10
 80075fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8007600:	e7e4      	b.n	80075cc <_strtod_l+0x234>
 8007602:	2301      	movs	r3, #1
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	e781      	b.n	800750c <_strtod_l+0x174>
 8007608:	f04f 0c01 	mov.w	ip, #1
 800760c:	1cb3      	adds	r3, r6, #2
 800760e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007610:	78b3      	ldrb	r3, [r6, #2]
 8007612:	e78a      	b.n	800752a <_strtod_l+0x192>
 8007614:	f04f 0c00 	mov.w	ip, #0
 8007618:	e7f8      	b.n	800760c <_strtod_l+0x274>
 800761a:	bf00      	nop
 800761c:	0800d4cc 	.word	0x0800d4cc
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007626:	1c5f      	adds	r7, r3, #1
 8007628:	971b      	str	r7, [sp, #108]	; 0x6c
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d0f9      	beq.n	8007624 <_strtod_l+0x28c>
 8007630:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007634:	2f08      	cmp	r7, #8
 8007636:	f63f af7d 	bhi.w	8007534 <_strtod_l+0x19c>
 800763a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800763e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007640:	9309      	str	r3, [sp, #36]	; 0x24
 8007642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007644:	1c5f      	adds	r7, r3, #1
 8007646:	971b      	str	r7, [sp, #108]	; 0x6c
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800764e:	f1b8 0f09 	cmp.w	r8, #9
 8007652:	d937      	bls.n	80076c4 <_strtod_l+0x32c>
 8007654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007656:	1a7f      	subs	r7, r7, r1
 8007658:	2f08      	cmp	r7, #8
 800765a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800765e:	dc37      	bgt.n	80076d0 <_strtod_l+0x338>
 8007660:	45be      	cmp	lr, r7
 8007662:	bfa8      	it	ge
 8007664:	46be      	movge	lr, r7
 8007666:	f1bc 0f00 	cmp.w	ip, #0
 800766a:	d001      	beq.n	8007670 <_strtod_l+0x2d8>
 800766c:	f1ce 0e00 	rsb	lr, lr, #0
 8007670:	2c00      	cmp	r4, #0
 8007672:	d151      	bne.n	8007718 <_strtod_l+0x380>
 8007674:	2800      	cmp	r0, #0
 8007676:	f47f aece 	bne.w	8007416 <_strtod_l+0x7e>
 800767a:	9a07      	ldr	r2, [sp, #28]
 800767c:	2a00      	cmp	r2, #0
 800767e:	f47f aeca 	bne.w	8007416 <_strtod_l+0x7e>
 8007682:	9a05      	ldr	r2, [sp, #20]
 8007684:	2a00      	cmp	r2, #0
 8007686:	f47f aee4 	bne.w	8007452 <_strtod_l+0xba>
 800768a:	2b4e      	cmp	r3, #78	; 0x4e
 800768c:	d027      	beq.n	80076de <_strtod_l+0x346>
 800768e:	dc21      	bgt.n	80076d4 <_strtod_l+0x33c>
 8007690:	2b49      	cmp	r3, #73	; 0x49
 8007692:	f47f aede 	bne.w	8007452 <_strtod_l+0xba>
 8007696:	49a4      	ldr	r1, [pc, #656]	; (8007928 <_strtod_l+0x590>)
 8007698:	a81b      	add	r0, sp, #108	; 0x6c
 800769a:	f001 ff0b 	bl	80094b4 <__match>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f43f aed7 	beq.w	8007452 <_strtod_l+0xba>
 80076a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076a6:	49a1      	ldr	r1, [pc, #644]	; (800792c <_strtod_l+0x594>)
 80076a8:	3b01      	subs	r3, #1
 80076aa:	a81b      	add	r0, sp, #108	; 0x6c
 80076ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ae:	f001 ff01 	bl	80094b4 <__match>
 80076b2:	b910      	cbnz	r0, 80076ba <_strtod_l+0x322>
 80076b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076b6:	3301      	adds	r3, #1
 80076b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80076ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007940 <_strtod_l+0x5a8>
 80076be:	f04f 0900 	mov.w	r9, #0
 80076c2:	e6a8      	b.n	8007416 <_strtod_l+0x7e>
 80076c4:	210a      	movs	r1, #10
 80076c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80076ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80076ce:	e7b8      	b.n	8007642 <_strtod_l+0x2aa>
 80076d0:	46be      	mov	lr, r7
 80076d2:	e7c8      	b.n	8007666 <_strtod_l+0x2ce>
 80076d4:	2b69      	cmp	r3, #105	; 0x69
 80076d6:	d0de      	beq.n	8007696 <_strtod_l+0x2fe>
 80076d8:	2b6e      	cmp	r3, #110	; 0x6e
 80076da:	f47f aeba 	bne.w	8007452 <_strtod_l+0xba>
 80076de:	4994      	ldr	r1, [pc, #592]	; (8007930 <_strtod_l+0x598>)
 80076e0:	a81b      	add	r0, sp, #108	; 0x6c
 80076e2:	f001 fee7 	bl	80094b4 <__match>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f43f aeb3 	beq.w	8007452 <_strtod_l+0xba>
 80076ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b28      	cmp	r3, #40	; 0x28
 80076f2:	d10e      	bne.n	8007712 <_strtod_l+0x37a>
 80076f4:	aa1e      	add	r2, sp, #120	; 0x78
 80076f6:	498f      	ldr	r1, [pc, #572]	; (8007934 <_strtod_l+0x59c>)
 80076f8:	a81b      	add	r0, sp, #108	; 0x6c
 80076fa:	f001 feef 	bl	80094dc <__hexnan>
 80076fe:	2805      	cmp	r0, #5
 8007700:	d107      	bne.n	8007712 <_strtod_l+0x37a>
 8007702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007704:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007708:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800770c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007710:	e681      	b.n	8007416 <_strtod_l+0x7e>
 8007712:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007948 <_strtod_l+0x5b0>
 8007716:	e7d2      	b.n	80076be <_strtod_l+0x326>
 8007718:	ebae 0302 	sub.w	r3, lr, r2
 800771c:	9307      	str	r3, [sp, #28]
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	9806      	ldr	r0, [sp, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf08      	it	eq
 8007726:	4623      	moveq	r3, r4
 8007728:	2c10      	cmp	r4, #16
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	46a0      	mov	r8, r4
 800772e:	bfa8      	it	ge
 8007730:	f04f 0810 	movge.w	r8, #16
 8007734:	f7f8 fe56 	bl	80003e4 <__aeabi_ui2d>
 8007738:	2c09      	cmp	r4, #9
 800773a:	4681      	mov	r9, r0
 800773c:	468a      	mov	sl, r1
 800773e:	dc13      	bgt.n	8007768 <_strtod_l+0x3d0>
 8007740:	9b07      	ldr	r3, [sp, #28]
 8007742:	2b00      	cmp	r3, #0
 8007744:	f43f ae67 	beq.w	8007416 <_strtod_l+0x7e>
 8007748:	9b07      	ldr	r3, [sp, #28]
 800774a:	dd7e      	ble.n	800784a <_strtod_l+0x4b2>
 800774c:	2b16      	cmp	r3, #22
 800774e:	dc65      	bgt.n	800781c <_strtod_l+0x484>
 8007750:	4a79      	ldr	r2, [pc, #484]	; (8007938 <_strtod_l+0x5a0>)
 8007752:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007756:	464a      	mov	r2, r9
 8007758:	e9de 0100 	ldrd	r0, r1, [lr]
 800775c:	4653      	mov	r3, sl
 800775e:	f7f8 febb 	bl	80004d8 <__aeabi_dmul>
 8007762:	4681      	mov	r9, r0
 8007764:	468a      	mov	sl, r1
 8007766:	e656      	b.n	8007416 <_strtod_l+0x7e>
 8007768:	4b73      	ldr	r3, [pc, #460]	; (8007938 <_strtod_l+0x5a0>)
 800776a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800776e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007772:	f7f8 feb1 	bl	80004d8 <__aeabi_dmul>
 8007776:	4606      	mov	r6, r0
 8007778:	4628      	mov	r0, r5
 800777a:	460f      	mov	r7, r1
 800777c:	f7f8 fe32 	bl	80003e4 <__aeabi_ui2d>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4630      	mov	r0, r6
 8007786:	4639      	mov	r1, r7
 8007788:	f7f8 fcf0 	bl	800016c <__adddf3>
 800778c:	2c0f      	cmp	r4, #15
 800778e:	4681      	mov	r9, r0
 8007790:	468a      	mov	sl, r1
 8007792:	ddd5      	ble.n	8007740 <_strtod_l+0x3a8>
 8007794:	9b07      	ldr	r3, [sp, #28]
 8007796:	eba4 0808 	sub.w	r8, r4, r8
 800779a:	4498      	add	r8, r3
 800779c:	f1b8 0f00 	cmp.w	r8, #0
 80077a0:	f340 809a 	ble.w	80078d8 <_strtod_l+0x540>
 80077a4:	f018 030f 	ands.w	r3, r8, #15
 80077a8:	d00a      	beq.n	80077c0 <_strtod_l+0x428>
 80077aa:	4963      	ldr	r1, [pc, #396]	; (8007938 <_strtod_l+0x5a0>)
 80077ac:	464a      	mov	r2, r9
 80077ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b6:	4653      	mov	r3, sl
 80077b8:	f7f8 fe8e 	bl	80004d8 <__aeabi_dmul>
 80077bc:	4681      	mov	r9, r0
 80077be:	468a      	mov	sl, r1
 80077c0:	f038 080f 	bics.w	r8, r8, #15
 80077c4:	d077      	beq.n	80078b6 <_strtod_l+0x51e>
 80077c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80077ca:	dd4b      	ble.n	8007864 <_strtod_l+0x4cc>
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80077d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80077d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80077dc:	2322      	movs	r3, #34	; 0x22
 80077de:	f04f 0900 	mov.w	r9, #0
 80077e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007940 <_strtod_l+0x5a8>
 80077e6:	f8cb 3000 	str.w	r3, [fp]
 80077ea:	9b08      	ldr	r3, [sp, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f43f ae12 	beq.w	8007416 <_strtod_l+0x7e>
 80077f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077f4:	4658      	mov	r0, fp
 80077f6:	f001 ff91 	bl	800971c <_Bfree>
 80077fa:	9906      	ldr	r1, [sp, #24]
 80077fc:	4658      	mov	r0, fp
 80077fe:	f001 ff8d 	bl	800971c <_Bfree>
 8007802:	9904      	ldr	r1, [sp, #16]
 8007804:	4658      	mov	r0, fp
 8007806:	f001 ff89 	bl	800971c <_Bfree>
 800780a:	9908      	ldr	r1, [sp, #32]
 800780c:	4658      	mov	r0, fp
 800780e:	f001 ff85 	bl	800971c <_Bfree>
 8007812:	4641      	mov	r1, r8
 8007814:	4658      	mov	r0, fp
 8007816:	f001 ff81 	bl	800971c <_Bfree>
 800781a:	e5fc      	b.n	8007416 <_strtod_l+0x7e>
 800781c:	9a07      	ldr	r2, [sp, #28]
 800781e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007822:	4293      	cmp	r3, r2
 8007824:	dbb6      	blt.n	8007794 <_strtod_l+0x3fc>
 8007826:	4d44      	ldr	r5, [pc, #272]	; (8007938 <_strtod_l+0x5a0>)
 8007828:	f1c4 040f 	rsb	r4, r4, #15
 800782c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007830:	464a      	mov	r2, r9
 8007832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007836:	4653      	mov	r3, sl
 8007838:	f7f8 fe4e 	bl	80004d8 <__aeabi_dmul>
 800783c:	9b07      	ldr	r3, [sp, #28]
 800783e:	1b1c      	subs	r4, r3, r4
 8007840:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007848:	e789      	b.n	800775e <_strtod_l+0x3c6>
 800784a:	f113 0f16 	cmn.w	r3, #22
 800784e:	dba1      	blt.n	8007794 <_strtod_l+0x3fc>
 8007850:	4a39      	ldr	r2, [pc, #228]	; (8007938 <_strtod_l+0x5a0>)
 8007852:	4648      	mov	r0, r9
 8007854:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007858:	e9d2 2300 	ldrd	r2, r3, [r2]
 800785c:	4651      	mov	r1, sl
 800785e:	f7f8 ff65 	bl	800072c <__aeabi_ddiv>
 8007862:	e77e      	b.n	8007762 <_strtod_l+0x3ca>
 8007864:	2300      	movs	r3, #0
 8007866:	4648      	mov	r0, r9
 8007868:	4651      	mov	r1, sl
 800786a:	461d      	mov	r5, r3
 800786c:	4e33      	ldr	r6, [pc, #204]	; (800793c <_strtod_l+0x5a4>)
 800786e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007872:	f1b8 0f01 	cmp.w	r8, #1
 8007876:	dc21      	bgt.n	80078bc <_strtod_l+0x524>
 8007878:	b10b      	cbz	r3, 800787e <_strtod_l+0x4e6>
 800787a:	4681      	mov	r9, r0
 800787c:	468a      	mov	sl, r1
 800787e:	4b2f      	ldr	r3, [pc, #188]	; (800793c <_strtod_l+0x5a4>)
 8007880:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007884:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007888:	464a      	mov	r2, r9
 800788a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800788e:	4653      	mov	r3, sl
 8007890:	f7f8 fe22 	bl	80004d8 <__aeabi_dmul>
 8007894:	4b2a      	ldr	r3, [pc, #168]	; (8007940 <_strtod_l+0x5a8>)
 8007896:	460a      	mov	r2, r1
 8007898:	400b      	ands	r3, r1
 800789a:	492a      	ldr	r1, [pc, #168]	; (8007944 <_strtod_l+0x5ac>)
 800789c:	4681      	mov	r9, r0
 800789e:	428b      	cmp	r3, r1
 80078a0:	d894      	bhi.n	80077cc <_strtod_l+0x434>
 80078a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80078a6:	428b      	cmp	r3, r1
 80078a8:	bf86      	itte	hi
 80078aa:	f04f 39ff 	movhi.w	r9, #4294967295
 80078ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800794c <_strtod_l+0x5b4>
 80078b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80078b6:	2300      	movs	r3, #0
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	e07b      	b.n	80079b4 <_strtod_l+0x61c>
 80078bc:	f018 0f01 	tst.w	r8, #1
 80078c0:	d006      	beq.n	80078d0 <_strtod_l+0x538>
 80078c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	f7f8 fe05 	bl	80004d8 <__aeabi_dmul>
 80078ce:	2301      	movs	r3, #1
 80078d0:	3501      	adds	r5, #1
 80078d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80078d6:	e7cc      	b.n	8007872 <_strtod_l+0x4da>
 80078d8:	d0ed      	beq.n	80078b6 <_strtod_l+0x51e>
 80078da:	f1c8 0800 	rsb	r8, r8, #0
 80078de:	f018 020f 	ands.w	r2, r8, #15
 80078e2:	d00a      	beq.n	80078fa <_strtod_l+0x562>
 80078e4:	4b14      	ldr	r3, [pc, #80]	; (8007938 <_strtod_l+0x5a0>)
 80078e6:	4648      	mov	r0, r9
 80078e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ec:	4651      	mov	r1, sl
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 ff1b 	bl	800072c <__aeabi_ddiv>
 80078f6:	4681      	mov	r9, r0
 80078f8:	468a      	mov	sl, r1
 80078fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80078fe:	d0da      	beq.n	80078b6 <_strtod_l+0x51e>
 8007900:	f1b8 0f1f 	cmp.w	r8, #31
 8007904:	dd24      	ble.n	8007950 <_strtod_l+0x5b8>
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	f8cd 8010 	str.w	r8, [sp, #16]
 800790e:	f8cd 8020 	str.w	r8, [sp, #32]
 8007912:	f8cd 8018 	str.w	r8, [sp, #24]
 8007916:	2322      	movs	r3, #34	; 0x22
 8007918:	f04f 0900 	mov.w	r9, #0
 800791c:	f04f 0a00 	mov.w	sl, #0
 8007920:	f8cb 3000 	str.w	r3, [fp]
 8007924:	e761      	b.n	80077ea <_strtod_l+0x452>
 8007926:	bf00      	nop
 8007928:	0800d499 	.word	0x0800d499
 800792c:	0800d548 	.word	0x0800d548
 8007930:	0800d4a1 	.word	0x0800d4a1
 8007934:	0800d4e0 	.word	0x0800d4e0
 8007938:	0800d5e8 	.word	0x0800d5e8
 800793c:	0800d5c0 	.word	0x0800d5c0
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	7ca00000 	.word	0x7ca00000
 8007948:	fff80000 	.word	0xfff80000
 800794c:	7fefffff 	.word	0x7fefffff
 8007950:	f018 0310 	ands.w	r3, r8, #16
 8007954:	bf18      	it	ne
 8007956:	236a      	movne	r3, #106	; 0x6a
 8007958:	4648      	mov	r0, r9
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	4651      	mov	r1, sl
 800795e:	2300      	movs	r3, #0
 8007960:	4da1      	ldr	r5, [pc, #644]	; (8007be8 <_strtod_l+0x850>)
 8007962:	f1b8 0f00 	cmp.w	r8, #0
 8007966:	f300 8113 	bgt.w	8007b90 <_strtod_l+0x7f8>
 800796a:	b10b      	cbz	r3, 8007970 <_strtod_l+0x5d8>
 800796c:	4681      	mov	r9, r0
 800796e:	468a      	mov	sl, r1
 8007970:	9b05      	ldr	r3, [sp, #20]
 8007972:	b1bb      	cbz	r3, 80079a4 <_strtod_l+0x60c>
 8007974:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800797c:	2b00      	cmp	r3, #0
 800797e:	4651      	mov	r1, sl
 8007980:	dd10      	ble.n	80079a4 <_strtod_l+0x60c>
 8007982:	2b1f      	cmp	r3, #31
 8007984:	f340 8110 	ble.w	8007ba8 <_strtod_l+0x810>
 8007988:	2b34      	cmp	r3, #52	; 0x34
 800798a:	bfd8      	it	le
 800798c:	f04f 32ff 	movle.w	r2, #4294967295
 8007990:	f04f 0900 	mov.w	r9, #0
 8007994:	bfcf      	iteee	gt
 8007996:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800799a:	3b20      	suble	r3, #32
 800799c:	fa02 f303 	lslle.w	r3, r2, r3
 80079a0:	ea03 0a01 	andle.w	sl, r3, r1
 80079a4:	2200      	movs	r2, #0
 80079a6:	2300      	movs	r3, #0
 80079a8:	4648      	mov	r0, r9
 80079aa:	4651      	mov	r1, sl
 80079ac:	f7f8 fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1a8      	bne.n	8007906 <_strtod_l+0x56e>
 80079b4:	9b06      	ldr	r3, [sp, #24]
 80079b6:	9a04      	ldr	r2, [sp, #16]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	9908      	ldr	r1, [sp, #32]
 80079bc:	4623      	mov	r3, r4
 80079be:	4658      	mov	r0, fp
 80079c0:	f001 fefe 	bl	80097c0 <__s2b>
 80079c4:	9008      	str	r0, [sp, #32]
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f43f af00 	beq.w	80077cc <_strtod_l+0x434>
 80079cc:	9a07      	ldr	r2, [sp, #28]
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	f1c3 0300 	rsb	r3, r3, #0
 80079d6:	bfa8      	it	ge
 80079d8:	2300      	movge	r3, #0
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	930e      	str	r3, [sp, #56]	; 0x38
 80079e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079e4:	9316      	str	r3, [sp, #88]	; 0x58
 80079e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80079ea:	9b08      	ldr	r3, [sp, #32]
 80079ec:	4658      	mov	r0, fp
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	f001 fe60 	bl	80096b4 <_Balloc>
 80079f4:	9006      	str	r0, [sp, #24]
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f43f aef0 	beq.w	80077dc <_strtod_l+0x444>
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	300c      	adds	r0, #12
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	f103 010c 	add.w	r1, r3, #12
 8007a06:	3202      	adds	r2, #2
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	f7fe fd9b 	bl	8006544 <memcpy>
 8007a0e:	ab1e      	add	r3, sp, #120	; 0x78
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	ab1d      	add	r3, sp, #116	; 0x74
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	464a      	mov	r2, r9
 8007a18:	4653      	mov	r3, sl
 8007a1a:	4658      	mov	r0, fp
 8007a1c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8007a20:	f002 f988 	bl	8009d34 <__d2b>
 8007a24:	901c      	str	r0, [sp, #112]	; 0x70
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f43f aed8 	beq.w	80077dc <_strtod_l+0x444>
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	4658      	mov	r0, fp
 8007a30:	f001 ff52 	bl	80098d8 <__i2b>
 8007a34:	9004      	str	r0, [sp, #16]
 8007a36:	4603      	mov	r3, r0
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	f43f aecf 	beq.w	80077dc <_strtod_l+0x444>
 8007a3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007a40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfab      	itete	ge
 8007a46:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007a48:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007a4a:	18ee      	addge	r6, r5, r3
 8007a4c:	1b5c      	sublt	r4, r3, r5
 8007a4e:	9b05      	ldr	r3, [sp, #20]
 8007a50:	bfa8      	it	ge
 8007a52:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007a54:	eba5 0503 	sub.w	r5, r5, r3
 8007a58:	4415      	add	r5, r2
 8007a5a:	4b64      	ldr	r3, [pc, #400]	; (8007bec <_strtod_l+0x854>)
 8007a5c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a60:	bfb8      	it	lt
 8007a62:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007a64:	429d      	cmp	r5, r3
 8007a66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007a6a:	f280 80af 	bge.w	8007bcc <_strtod_l+0x834>
 8007a6e:	1b5b      	subs	r3, r3, r5
 8007a70:	2b1f      	cmp	r3, #31
 8007a72:	eba2 0203 	sub.w	r2, r2, r3
 8007a76:	f04f 0701 	mov.w	r7, #1
 8007a7a:	f300 809c 	bgt.w	8007bb6 <_strtod_l+0x81e>
 8007a7e:	2500      	movs	r5, #0
 8007a80:	fa07 f303 	lsl.w	r3, r7, r3
 8007a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a86:	18b7      	adds	r7, r6, r2
 8007a88:	9b05      	ldr	r3, [sp, #20]
 8007a8a:	42be      	cmp	r6, r7
 8007a8c:	4414      	add	r4, r2
 8007a8e:	441c      	add	r4, r3
 8007a90:	4633      	mov	r3, r6
 8007a92:	bfa8      	it	ge
 8007a94:	463b      	movge	r3, r7
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	bfa8      	it	ge
 8007a9a:	4623      	movge	r3, r4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfc2      	ittt	gt
 8007aa0:	1aff      	subgt	r7, r7, r3
 8007aa2:	1ae4      	subgt	r4, r4, r3
 8007aa4:	1af6      	subgt	r6, r6, r3
 8007aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa8:	b1bb      	cbz	r3, 8007ada <_strtod_l+0x742>
 8007aaa:	461a      	mov	r2, r3
 8007aac:	9904      	ldr	r1, [sp, #16]
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f001 ffb0 	bl	8009a14 <__pow5mult>
 8007ab4:	9004      	str	r0, [sp, #16]
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae90 	beq.w	80077dc <_strtod_l+0x444>
 8007abc:	4601      	mov	r1, r0
 8007abe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ac0:	4658      	mov	r0, fp
 8007ac2:	f001 ff12 	bl	80098ea <__multiply>
 8007ac6:	9009      	str	r0, [sp, #36]	; 0x24
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f ae87 	beq.w	80077dc <_strtod_l+0x444>
 8007ace:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ad0:	4658      	mov	r0, fp
 8007ad2:	f001 fe23 	bl	800971c <_Bfree>
 8007ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad8:	931c      	str	r3, [sp, #112]	; 0x70
 8007ada:	2f00      	cmp	r7, #0
 8007adc:	dc7a      	bgt.n	8007bd4 <_strtod_l+0x83c>
 8007ade:	9b07      	ldr	r3, [sp, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dd08      	ble.n	8007af6 <_strtod_l+0x75e>
 8007ae4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ae6:	9906      	ldr	r1, [sp, #24]
 8007ae8:	4658      	mov	r0, fp
 8007aea:	f001 ff93 	bl	8009a14 <__pow5mult>
 8007aee:	9006      	str	r0, [sp, #24]
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f ae73 	beq.w	80077dc <_strtod_l+0x444>
 8007af6:	2c00      	cmp	r4, #0
 8007af8:	dd08      	ble.n	8007b0c <_strtod_l+0x774>
 8007afa:	4622      	mov	r2, r4
 8007afc:	9906      	ldr	r1, [sp, #24]
 8007afe:	4658      	mov	r0, fp
 8007b00:	f001 ffd6 	bl	8009ab0 <__lshift>
 8007b04:	9006      	str	r0, [sp, #24]
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f ae68 	beq.w	80077dc <_strtod_l+0x444>
 8007b0c:	2e00      	cmp	r6, #0
 8007b0e:	dd08      	ble.n	8007b22 <_strtod_l+0x78a>
 8007b10:	4632      	mov	r2, r6
 8007b12:	9904      	ldr	r1, [sp, #16]
 8007b14:	4658      	mov	r0, fp
 8007b16:	f001 ffcb 	bl	8009ab0 <__lshift>
 8007b1a:	9004      	str	r0, [sp, #16]
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f43f ae5d 	beq.w	80077dc <_strtod_l+0x444>
 8007b22:	9a06      	ldr	r2, [sp, #24]
 8007b24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b26:	4658      	mov	r0, fp
 8007b28:	f002 f830 	bl	8009b8c <__mdiff>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f43f ae54 	beq.w	80077dc <_strtod_l+0x444>
 8007b34:	2400      	movs	r4, #0
 8007b36:	68c3      	ldr	r3, [r0, #12]
 8007b38:	9904      	ldr	r1, [sp, #16]
 8007b3a:	60c4      	str	r4, [r0, #12]
 8007b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b3e:	f002 f80b 	bl	8009b58 <__mcmp>
 8007b42:	42a0      	cmp	r0, r4
 8007b44:	da54      	bge.n	8007bf0 <_strtod_l+0x858>
 8007b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b48:	b9f3      	cbnz	r3, 8007b88 <_strtod_l+0x7f0>
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	d11b      	bne.n	8007b88 <_strtod_l+0x7f0>
 8007b50:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007b54:	b9c3      	cbnz	r3, 8007b88 <_strtod_l+0x7f0>
 8007b56:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007b5a:	0d1b      	lsrs	r3, r3, #20
 8007b5c:	051b      	lsls	r3, r3, #20
 8007b5e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007b62:	d911      	bls.n	8007b88 <_strtod_l+0x7f0>
 8007b64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b68:	b91b      	cbnz	r3, 8007b72 <_strtod_l+0x7da>
 8007b6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	dd0a      	ble.n	8007b88 <_strtod_l+0x7f0>
 8007b72:	4641      	mov	r1, r8
 8007b74:	2201      	movs	r2, #1
 8007b76:	4658      	mov	r0, fp
 8007b78:	f001 ff9a 	bl	8009ab0 <__lshift>
 8007b7c:	9904      	ldr	r1, [sp, #16]
 8007b7e:	4680      	mov	r8, r0
 8007b80:	f001 ffea 	bl	8009b58 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dc68      	bgt.n	8007c5a <_strtod_l+0x8c2>
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d172      	bne.n	8007c74 <_strtod_l+0x8dc>
 8007b8e:	e630      	b.n	80077f2 <_strtod_l+0x45a>
 8007b90:	f018 0f01 	tst.w	r8, #1
 8007b94:	d004      	beq.n	8007ba0 <_strtod_l+0x808>
 8007b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b9a:	f7f8 fc9d 	bl	80004d8 <__aeabi_dmul>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ba4:	3508      	adds	r5, #8
 8007ba6:	e6dc      	b.n	8007962 <_strtod_l+0x5ca>
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	ea03 0909 	and.w	r9, r3, r9
 8007bb4:	e6f6      	b.n	80079a4 <_strtod_l+0x60c>
 8007bb6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007bba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007bbe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007bc2:	35e2      	adds	r5, #226	; 0xe2
 8007bc4:	fa07 f505 	lsl.w	r5, r7, r5
 8007bc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8007bca:	e75c      	b.n	8007a86 <_strtod_l+0x6ee>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	2500      	movs	r5, #0
 8007bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bd2:	e758      	b.n	8007a86 <_strtod_l+0x6ee>
 8007bd4:	463a      	mov	r2, r7
 8007bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bd8:	4658      	mov	r0, fp
 8007bda:	f001 ff69 	bl	8009ab0 <__lshift>
 8007bde:	901c      	str	r0, [sp, #112]	; 0x70
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f47f af7c 	bne.w	8007ade <_strtod_l+0x746>
 8007be6:	e5f9      	b.n	80077dc <_strtod_l+0x444>
 8007be8:	0800d4f8 	.word	0x0800d4f8
 8007bec:	fffffc02 	.word	0xfffffc02
 8007bf0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007bf4:	f040 8089 	bne.w	8007d0a <_strtod_l+0x972>
 8007bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bfa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007bfe:	b342      	cbz	r2, 8007c52 <_strtod_l+0x8ba>
 8007c00:	4aaf      	ldr	r2, [pc, #700]	; (8007ec0 <_strtod_l+0xb28>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d156      	bne.n	8007cb4 <_strtod_l+0x91c>
 8007c06:	9b05      	ldr	r3, [sp, #20]
 8007c08:	4648      	mov	r0, r9
 8007c0a:	b1eb      	cbz	r3, 8007c48 <_strtod_l+0x8b0>
 8007c0c:	4653      	mov	r3, sl
 8007c0e:	4aad      	ldr	r2, [pc, #692]	; (8007ec4 <_strtod_l+0xb2c>)
 8007c10:	f04f 31ff 	mov.w	r1, #4294967295
 8007c14:	401a      	ands	r2, r3
 8007c16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007c1a:	d818      	bhi.n	8007c4e <_strtod_l+0x8b6>
 8007c1c:	0d12      	lsrs	r2, r2, #20
 8007c1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c22:	fa01 f303 	lsl.w	r3, r1, r3
 8007c26:	4298      	cmp	r0, r3
 8007c28:	d144      	bne.n	8007cb4 <_strtod_l+0x91c>
 8007c2a:	4ba7      	ldr	r3, [pc, #668]	; (8007ec8 <_strtod_l+0xb30>)
 8007c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d102      	bne.n	8007c38 <_strtod_l+0x8a0>
 8007c32:	3001      	adds	r0, #1
 8007c34:	f43f add2 	beq.w	80077dc <_strtod_l+0x444>
 8007c38:	4ba2      	ldr	r3, [pc, #648]	; (8007ec4 <_strtod_l+0xb2c>)
 8007c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3c:	f04f 0900 	mov.w	r9, #0
 8007c40:	401a      	ands	r2, r3
 8007c42:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007c46:	e79f      	b.n	8007b88 <_strtod_l+0x7f0>
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e7eb      	b.n	8007c26 <_strtod_l+0x88e>
 8007c4e:	460b      	mov	r3, r1
 8007c50:	e7e9      	b.n	8007c26 <_strtod_l+0x88e>
 8007c52:	bb7b      	cbnz	r3, 8007cb4 <_strtod_l+0x91c>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	d12c      	bne.n	8007cb4 <_strtod_l+0x91c>
 8007c5a:	9905      	ldr	r1, [sp, #20]
 8007c5c:	4653      	mov	r3, sl
 8007c5e:	4a99      	ldr	r2, [pc, #612]	; (8007ec4 <_strtod_l+0xb2c>)
 8007c60:	b1f1      	cbz	r1, 8007ca0 <_strtod_l+0x908>
 8007c62:	ea02 010a 	and.w	r1, r2, sl
 8007c66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c6a:	dc19      	bgt.n	8007ca0 <_strtod_l+0x908>
 8007c6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c70:	f77f ae51 	ble.w	8007916 <_strtod_l+0x57e>
 8007c74:	2300      	movs	r3, #0
 8007c76:	4a95      	ldr	r2, [pc, #596]	; (8007ecc <_strtod_l+0xb34>)
 8007c78:	4648      	mov	r0, r9
 8007c7a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007c7e:	4651      	mov	r1, sl
 8007c80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	4681      	mov	r9, r0
 8007c8a:	468a      	mov	sl, r1
 8007c8c:	2900      	cmp	r1, #0
 8007c8e:	f47f adb0 	bne.w	80077f2 <_strtod_l+0x45a>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f47f adad 	bne.w	80077f2 <_strtod_l+0x45a>
 8007c98:	2322      	movs	r3, #34	; 0x22
 8007c9a:	f8cb 3000 	str.w	r3, [fp]
 8007c9e:	e5a8      	b.n	80077f2 <_strtod_l+0x45a>
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ca6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8007caa:	f04f 39ff 	mov.w	r9, #4294967295
 8007cae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007cb2:	e769      	b.n	8007b88 <_strtod_l+0x7f0>
 8007cb4:	b19d      	cbz	r5, 8007cde <_strtod_l+0x946>
 8007cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb8:	421d      	tst	r5, r3
 8007cba:	f43f af65 	beq.w	8007b88 <_strtod_l+0x7f0>
 8007cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc0:	9a05      	ldr	r2, [sp, #20]
 8007cc2:	4648      	mov	r0, r9
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	b173      	cbz	r3, 8007ce6 <_strtod_l+0x94e>
 8007cc8:	f7ff fb43 	bl	8007352 <sulp>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cd4:	f7f8 fa4a 	bl	800016c <__adddf3>
 8007cd8:	4681      	mov	r9, r0
 8007cda:	468a      	mov	sl, r1
 8007cdc:	e754      	b.n	8007b88 <_strtod_l+0x7f0>
 8007cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce0:	ea13 0f09 	tst.w	r3, r9
 8007ce4:	e7e9      	b.n	8007cba <_strtod_l+0x922>
 8007ce6:	f7ff fb34 	bl	8007352 <sulp>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cf2:	f7f8 fa39 	bl	8000168 <__aeabi_dsub>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4681      	mov	r9, r0
 8007cfc:	468a      	mov	sl, r1
 8007cfe:	f7f8 fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f47f ae07 	bne.w	8007916 <_strtod_l+0x57e>
 8007d08:	e73e      	b.n	8007b88 <_strtod_l+0x7f0>
 8007d0a:	9904      	ldr	r1, [sp, #16]
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f002 f860 	bl	8009dd2 <__ratio>
 8007d12:	2200      	movs	r2, #0
 8007d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d18:	4606      	mov	r6, r0
 8007d1a:	460f      	mov	r7, r1
 8007d1c:	f7f8 fe58 	bl	80009d0 <__aeabi_dcmple>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d075      	beq.n	8007e10 <_strtod_l+0xa78>
 8007d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d047      	beq.n	8007dba <_strtod_l+0xa22>
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	4f68      	ldr	r7, [pc, #416]	; (8007ed0 <_strtod_l+0xb38>)
 8007d2e:	4d68      	ldr	r5, [pc, #416]	; (8007ed0 <_strtod_l+0xb38>)
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d36:	0d1b      	lsrs	r3, r3, #20
 8007d38:	051b      	lsls	r3, r3, #20
 8007d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d3e:	4b65      	ldr	r3, [pc, #404]	; (8007ed4 <_strtod_l+0xb3c>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	f040 80cf 	bne.w	8007ee4 <_strtod_l+0xb4c>
 8007d46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d50:	4648      	mov	r0, r9
 8007d52:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007d56:	4651      	mov	r1, sl
 8007d58:	f001 ff76 	bl	8009c48 <__ulp>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fbb8 	bl	80004d8 <__aeabi_dmul>
 8007d68:	464a      	mov	r2, r9
 8007d6a:	4653      	mov	r3, sl
 8007d6c:	f7f8 f9fe 	bl	800016c <__adddf3>
 8007d70:	460b      	mov	r3, r1
 8007d72:	4954      	ldr	r1, [pc, #336]	; (8007ec4 <_strtod_l+0xb2c>)
 8007d74:	4a58      	ldr	r2, [pc, #352]	; (8007ed8 <_strtod_l+0xb40>)
 8007d76:	4019      	ands	r1, r3
 8007d78:	4291      	cmp	r1, r2
 8007d7a:	4681      	mov	r9, r0
 8007d7c:	d95e      	bls.n	8007e3c <_strtod_l+0xaa4>
 8007d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d103      	bne.n	8007d90 <_strtod_l+0x9f8>
 8007d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	f43f ad26 	beq.w	80077dc <_strtod_l+0x444>
 8007d90:	f04f 39ff 	mov.w	r9, #4294967295
 8007d94:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007ec8 <_strtod_l+0xb30>
 8007d98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d9a:	4658      	mov	r0, fp
 8007d9c:	f001 fcbe 	bl	800971c <_Bfree>
 8007da0:	9906      	ldr	r1, [sp, #24]
 8007da2:	4658      	mov	r0, fp
 8007da4:	f001 fcba 	bl	800971c <_Bfree>
 8007da8:	9904      	ldr	r1, [sp, #16]
 8007daa:	4658      	mov	r0, fp
 8007dac:	f001 fcb6 	bl	800971c <_Bfree>
 8007db0:	4641      	mov	r1, r8
 8007db2:	4658      	mov	r0, fp
 8007db4:	f001 fcb2 	bl	800971c <_Bfree>
 8007db8:	e617      	b.n	80079ea <_strtod_l+0x652>
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	d119      	bne.n	8007df4 <_strtod_l+0xa5c>
 8007dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dc6:	b9e3      	cbnz	r3, 8007e02 <_strtod_l+0xa6a>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b41      	ldr	r3, [pc, #260]	; (8007ed0 <_strtod_l+0xb38>)
 8007dcc:	4630      	mov	r0, r6
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f7f8 fdf4 	bl	80009bc <__aeabi_dcmplt>
 8007dd4:	b9c8      	cbnz	r0, 8007e0a <_strtod_l+0xa72>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4b40      	ldr	r3, [pc, #256]	; (8007edc <_strtod_l+0xb44>)
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7f8 fb7b 	bl	80004d8 <__aeabi_dmul>
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007dea:	9418      	str	r4, [sp, #96]	; 0x60
 8007dec:	9319      	str	r3, [sp, #100]	; 0x64
 8007dee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007df2:	e79d      	b.n	8007d30 <_strtod_l+0x998>
 8007df4:	f1b9 0f01 	cmp.w	r9, #1
 8007df8:	d103      	bne.n	8007e02 <_strtod_l+0xa6a>
 8007dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f43f ad8a 	beq.w	8007916 <_strtod_l+0x57e>
 8007e02:	2600      	movs	r6, #0
 8007e04:	4f36      	ldr	r7, [pc, #216]	; (8007ee0 <_strtod_l+0xb48>)
 8007e06:	2400      	movs	r4, #0
 8007e08:	e791      	b.n	8007d2e <_strtod_l+0x996>
 8007e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e0c:	4d33      	ldr	r5, [pc, #204]	; (8007edc <_strtod_l+0xb44>)
 8007e0e:	e7ea      	b.n	8007de6 <_strtod_l+0xa4e>
 8007e10:	4b32      	ldr	r3, [pc, #200]	; (8007edc <_strtod_l+0xb44>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fb5e 	bl	80004d8 <__aeabi_dmul>
 8007e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1e:	4604      	mov	r4, r0
 8007e20:	460d      	mov	r5, r1
 8007e22:	b933      	cbnz	r3, 8007e32 <_strtod_l+0xa9a>
 8007e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e28:	9010      	str	r0, [sp, #64]	; 0x40
 8007e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e30:	e77e      	b.n	8007d30 <_strtod_l+0x998>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e3a:	e7f7      	b.n	8007e2c <_strtod_l+0xa94>
 8007e3c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1a8      	bne.n	8007d98 <_strtod_l+0xa00>
 8007e46:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e4e:	051b      	lsls	r3, r3, #20
 8007e50:	429a      	cmp	r2, r3
 8007e52:	4656      	mov	r6, sl
 8007e54:	d1a0      	bne.n	8007d98 <_strtod_l+0xa00>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7f8 fded 	bl	8000a38 <__aeabi_d2iz>
 8007e5e:	f7f8 fad1 	bl	8000404 <__aeabi_i2d>
 8007e62:	460b      	mov	r3, r1
 8007e64:	4602      	mov	r2, r0
 8007e66:	4629      	mov	r1, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f7f8 f97d 	bl	8000168 <__aeabi_dsub>
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	b933      	cbnz	r3, 8007e84 <_strtod_l+0xaec>
 8007e76:	f1b9 0f00 	cmp.w	r9, #0
 8007e7a:	d103      	bne.n	8007e84 <_strtod_l+0xaec>
 8007e7c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d06a      	beq.n	8007f5a <_strtod_l+0xbc2>
 8007e84:	a30a      	add	r3, pc, #40	; (adr r3, 8007eb0 <_strtod_l+0xb18>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7f8 fd95 	bl	80009bc <__aeabi_dcmplt>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f47f acad 	bne.w	80077f2 <_strtod_l+0x45a>
 8007e98:	a307      	add	r3, pc, #28	; (adr r3, 8007eb8 <_strtod_l+0xb20>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fda9 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f43f af76 	beq.w	8007d98 <_strtod_l+0xa00>
 8007eac:	e4a1      	b.n	80077f2 <_strtod_l+0x45a>
 8007eae:	bf00      	nop
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	000fffff 	.word	0x000fffff
 8007ec4:	7ff00000 	.word	0x7ff00000
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	39500000 	.word	0x39500000
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	7fe00000 	.word	0x7fe00000
 8007ed8:	7c9fffff 	.word	0x7c9fffff
 8007edc:	3fe00000 	.word	0x3fe00000
 8007ee0:	bff00000 	.word	0xbff00000
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	b313      	cbz	r3, 8007f2e <_strtod_l+0xb96>
 8007ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007eee:	d81e      	bhi.n	8007f2e <_strtod_l+0xb96>
 8007ef0:	a325      	add	r3, pc, #148	; (adr r3, 8007f88 <_strtod_l+0xbf0>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fd69 	bl	80009d0 <__aeabi_dcmple>
 8007efe:	b190      	cbz	r0, 8007f26 <_strtod_l+0xb8e>
 8007f00:	4629      	mov	r1, r5
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7f8 fdc0 	bl	8000a88 <__aeabi_d2uiz>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	bf08      	it	eq
 8007f0c:	2001      	moveq	r0, #1
 8007f0e:	f7f8 fa69 	bl	80003e4 <__aeabi_ui2d>
 8007f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f14:	4604      	mov	r4, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	b9d3      	cbnz	r3, 8007f50 <_strtod_l+0xbb8>
 8007f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1e:	9012      	str	r0, [sp, #72]	; 0x48
 8007f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f28:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007f2c:	1a9f      	subs	r7, r3, r2
 8007f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f32:	f001 fe89 	bl	8009c48 <__ulp>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7f8 facb 	bl	80004d8 <__aeabi_dmul>
 8007f42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f46:	f7f8 f911 	bl	800016c <__adddf3>
 8007f4a:	4681      	mov	r9, r0
 8007f4c:	468a      	mov	sl, r1
 8007f4e:	e777      	b.n	8007e40 <_strtod_l+0xaa8>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007f58:	e7e3      	b.n	8007f22 <_strtod_l+0xb8a>
 8007f5a:	a30d      	add	r3, pc, #52	; (adr r3, 8007f90 <_strtod_l+0xbf8>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 fd2c 	bl	80009bc <__aeabi_dcmplt>
 8007f64:	e79f      	b.n	8007ea6 <_strtod_l+0xb0e>
 8007f66:	2300      	movs	r3, #0
 8007f68:	930d      	str	r3, [sp, #52]	; 0x34
 8007f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	f7ff ba55 	b.w	800741e <_strtod_l+0x86>
 8007f74:	2b65      	cmp	r3, #101	; 0x65
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	f43f ab42 	beq.w	8007602 <_strtod_l+0x26a>
 8007f7e:	2101      	movs	r1, #1
 8007f80:	4614      	mov	r4, r2
 8007f82:	9105      	str	r1, [sp, #20]
 8007f84:	f7ff babf 	b.w	8007506 <_strtod_l+0x16e>
 8007f88:	ffc00000 	.word	0xffc00000
 8007f8c:	41dfffff 	.word	0x41dfffff
 8007f90:	94a03595 	.word	0x94a03595
 8007f94:	3fcfffff 	.word	0x3fcfffff

08007f98 <_strtod_r>:
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <_strtod_r+0x18>)
 8007f9a:	b410      	push	{r4}
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4c05      	ldr	r4, [pc, #20]	; (8007fb4 <_strtod_r+0x1c>)
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bf08      	it	eq
 8007fa6:	4623      	moveq	r3, r4
 8007fa8:	bc10      	pop	{r4}
 8007faa:	f7ff b9f5 	b.w	8007398 <_strtod_l>
 8007fae:	bf00      	nop
 8007fb0:	20000194 	.word	0x20000194
 8007fb4:	200001f8 	.word	0x200001f8

08007fb8 <_strtol_l.isra.0>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	4692      	mov	sl, r2
 8007fc2:	461e      	mov	r6, r3
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	463d      	mov	r5, r7
 8007fc8:	9808      	ldr	r0, [sp, #32]
 8007fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fce:	f001 fb15 	bl	80095fc <__locale_ctype_ptr_l>
 8007fd2:	4420      	add	r0, r4
 8007fd4:	7843      	ldrb	r3, [r0, #1]
 8007fd6:	f013 0308 	ands.w	r3, r3, #8
 8007fda:	d132      	bne.n	8008042 <_strtol_l.isra.0+0x8a>
 8007fdc:	2c2d      	cmp	r4, #45	; 0x2d
 8007fde:	d132      	bne.n	8008046 <_strtol_l.isra.0+0x8e>
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	787c      	ldrb	r4, [r7, #1]
 8007fe4:	1cbd      	adds	r5, r7, #2
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	d05d      	beq.n	80080a6 <_strtol_l.isra.0+0xee>
 8007fea:	2e10      	cmp	r6, #16
 8007fec:	d109      	bne.n	8008002 <_strtol_l.isra.0+0x4a>
 8007fee:	2c30      	cmp	r4, #48	; 0x30
 8007ff0:	d107      	bne.n	8008002 <_strtol_l.isra.0+0x4a>
 8007ff2:	782b      	ldrb	r3, [r5, #0]
 8007ff4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ff8:	2b58      	cmp	r3, #88	; 0x58
 8007ffa:	d14f      	bne.n	800809c <_strtol_l.isra.0+0xe4>
 8007ffc:	2610      	movs	r6, #16
 8007ffe:	786c      	ldrb	r4, [r5, #1]
 8008000:	3502      	adds	r5, #2
 8008002:	2a00      	cmp	r2, #0
 8008004:	bf14      	ite	ne
 8008006:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800800a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800800e:	2700      	movs	r7, #0
 8008010:	fbb1 fcf6 	udiv	ip, r1, r6
 8008014:	4638      	mov	r0, r7
 8008016:	fb06 1e1c 	mls	lr, r6, ip, r1
 800801a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d817      	bhi.n	8008052 <_strtol_l.isra.0+0x9a>
 8008022:	461c      	mov	r4, r3
 8008024:	42a6      	cmp	r6, r4
 8008026:	dd23      	ble.n	8008070 <_strtol_l.isra.0+0xb8>
 8008028:	1c7b      	adds	r3, r7, #1
 800802a:	d007      	beq.n	800803c <_strtol_l.isra.0+0x84>
 800802c:	4584      	cmp	ip, r0
 800802e:	d31c      	bcc.n	800806a <_strtol_l.isra.0+0xb2>
 8008030:	d101      	bne.n	8008036 <_strtol_l.isra.0+0x7e>
 8008032:	45a6      	cmp	lr, r4
 8008034:	db19      	blt.n	800806a <_strtol_l.isra.0+0xb2>
 8008036:	2701      	movs	r7, #1
 8008038:	fb00 4006 	mla	r0, r0, r6, r4
 800803c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008040:	e7eb      	b.n	800801a <_strtol_l.isra.0+0x62>
 8008042:	462f      	mov	r7, r5
 8008044:	e7bf      	b.n	8007fc6 <_strtol_l.isra.0+0xe>
 8008046:	2c2b      	cmp	r4, #43	; 0x2b
 8008048:	bf04      	itt	eq
 800804a:	1cbd      	addeq	r5, r7, #2
 800804c:	787c      	ldrbeq	r4, [r7, #1]
 800804e:	461a      	mov	r2, r3
 8008050:	e7c9      	b.n	8007fe6 <_strtol_l.isra.0+0x2e>
 8008052:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008056:	2b19      	cmp	r3, #25
 8008058:	d801      	bhi.n	800805e <_strtol_l.isra.0+0xa6>
 800805a:	3c37      	subs	r4, #55	; 0x37
 800805c:	e7e2      	b.n	8008024 <_strtol_l.isra.0+0x6c>
 800805e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008062:	2b19      	cmp	r3, #25
 8008064:	d804      	bhi.n	8008070 <_strtol_l.isra.0+0xb8>
 8008066:	3c57      	subs	r4, #87	; 0x57
 8008068:	e7dc      	b.n	8008024 <_strtol_l.isra.0+0x6c>
 800806a:	f04f 37ff 	mov.w	r7, #4294967295
 800806e:	e7e5      	b.n	800803c <_strtol_l.isra.0+0x84>
 8008070:	1c7b      	adds	r3, r7, #1
 8008072:	d108      	bne.n	8008086 <_strtol_l.isra.0+0xce>
 8008074:	2322      	movs	r3, #34	; 0x22
 8008076:	4608      	mov	r0, r1
 8008078:	f8c8 3000 	str.w	r3, [r8]
 800807c:	f1ba 0f00 	cmp.w	sl, #0
 8008080:	d107      	bne.n	8008092 <_strtol_l.isra.0+0xda>
 8008082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008086:	b102      	cbz	r2, 800808a <_strtol_l.isra.0+0xd2>
 8008088:	4240      	negs	r0, r0
 800808a:	f1ba 0f00 	cmp.w	sl, #0
 800808e:	d0f8      	beq.n	8008082 <_strtol_l.isra.0+0xca>
 8008090:	b10f      	cbz	r7, 8008096 <_strtol_l.isra.0+0xde>
 8008092:	f105 39ff 	add.w	r9, r5, #4294967295
 8008096:	f8ca 9000 	str.w	r9, [sl]
 800809a:	e7f2      	b.n	8008082 <_strtol_l.isra.0+0xca>
 800809c:	2430      	movs	r4, #48	; 0x30
 800809e:	2e00      	cmp	r6, #0
 80080a0:	d1af      	bne.n	8008002 <_strtol_l.isra.0+0x4a>
 80080a2:	2608      	movs	r6, #8
 80080a4:	e7ad      	b.n	8008002 <_strtol_l.isra.0+0x4a>
 80080a6:	2c30      	cmp	r4, #48	; 0x30
 80080a8:	d0a3      	beq.n	8007ff2 <_strtol_l.isra.0+0x3a>
 80080aa:	260a      	movs	r6, #10
 80080ac:	e7a9      	b.n	8008002 <_strtol_l.isra.0+0x4a>
	...

080080b0 <_strtol_r>:
 80080b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b2:	4c06      	ldr	r4, [pc, #24]	; (80080cc <_strtol_r+0x1c>)
 80080b4:	4d06      	ldr	r5, [pc, #24]	; (80080d0 <_strtol_r+0x20>)
 80080b6:	6824      	ldr	r4, [r4, #0]
 80080b8:	6a24      	ldr	r4, [r4, #32]
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	bf08      	it	eq
 80080be:	462c      	moveq	r4, r5
 80080c0:	9400      	str	r4, [sp, #0]
 80080c2:	f7ff ff79 	bl	8007fb8 <_strtol_l.isra.0>
 80080c6:	b003      	add	sp, #12
 80080c8:	bd30      	pop	{r4, r5, pc}
 80080ca:	bf00      	nop
 80080cc:	20000194 	.word	0x20000194
 80080d0:	200001f8 	.word	0x200001f8

080080d4 <__utoa>:
 80080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d6:	b08b      	sub	sp, #44	; 0x2c
 80080d8:	4605      	mov	r5, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	466e      	mov	r6, sp
 80080de:	4b1b      	ldr	r3, [pc, #108]	; (800814c <__utoa+0x78>)
 80080e0:	f103 0c20 	add.w	ip, r3, #32
 80080e4:	4637      	mov	r7, r6
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	6859      	ldr	r1, [r3, #4]
 80080ea:	3308      	adds	r3, #8
 80080ec:	c703      	stmia	r7!, {r0, r1}
 80080ee:	4563      	cmp	r3, ip
 80080f0:	463e      	mov	r6, r7
 80080f2:	d1f7      	bne.n	80080e4 <__utoa+0x10>
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	6038      	str	r0, [r7, #0]
 80080fa:	713b      	strb	r3, [r7, #4]
 80080fc:	1e93      	subs	r3, r2, #2
 80080fe:	2b22      	cmp	r3, #34	; 0x22
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	d904      	bls.n	8008110 <__utoa+0x3c>
 8008106:	7023      	strb	r3, [r4, #0]
 8008108:	461c      	mov	r4, r3
 800810a:	4620      	mov	r0, r4
 800810c:	b00b      	add	sp, #44	; 0x2c
 800810e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008110:	1e66      	subs	r6, r4, #1
 8008112:	fbb5 f0f2 	udiv	r0, r5, r2
 8008116:	fb02 5510 	mls	r5, r2, r0, r5
 800811a:	af0a      	add	r7, sp, #40	; 0x28
 800811c:	443d      	add	r5, r7
 800811e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008122:	1c59      	adds	r1, r3, #1
 8008124:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008128:	4605      	mov	r5, r0
 800812a:	b968      	cbnz	r0, 8008148 <__utoa+0x74>
 800812c:	4622      	mov	r2, r4
 800812e:	5460      	strb	r0, [r4, r1]
 8008130:	4423      	add	r3, r4
 8008132:	1b19      	subs	r1, r3, r4
 8008134:	1b10      	subs	r0, r2, r4
 8008136:	4281      	cmp	r1, r0
 8008138:	dde7      	ble.n	800810a <__utoa+0x36>
 800813a:	7811      	ldrb	r1, [r2, #0]
 800813c:	7818      	ldrb	r0, [r3, #0]
 800813e:	f802 0b01 	strb.w	r0, [r2], #1
 8008142:	f803 1901 	strb.w	r1, [r3], #-1
 8008146:	e7f4      	b.n	8008132 <__utoa+0x5e>
 8008148:	460b      	mov	r3, r1
 800814a:	e7e2      	b.n	8008112 <__utoa+0x3e>
 800814c:	0800d520 	.word	0x0800d520

08008150 <_write_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4605      	mov	r5, r0
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
 8008158:	2200      	movs	r2, #0
 800815a:	4c05      	ldr	r4, [pc, #20]	; (8008170 <_write_r+0x20>)
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7fd f8aa 	bl	80052b8 <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_write_r+0x1e>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	b103      	cbz	r3, 800816e <_write_r+0x1e>
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	20001b7c 	.word	0x20001b7c

08008174 <_close_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4c05      	ldr	r4, [pc, #20]	; (8008190 <_close_r+0x1c>)
 800817a:	4605      	mov	r5, r0
 800817c:	4608      	mov	r0, r1
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	f7fd fef8 	bl	8005f74 <_close>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_close_r+0x1a>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	b103      	cbz	r3, 800818e <_close_r+0x1a>
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20001b7c 	.word	0x20001b7c

08008194 <quorem>:
 8008194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	6903      	ldr	r3, [r0, #16]
 800819a:	690c      	ldr	r4, [r1, #16]
 800819c:	4680      	mov	r8, r0
 800819e:	42a3      	cmp	r3, r4
 80081a0:	f2c0 8084 	blt.w	80082ac <quorem+0x118>
 80081a4:	3c01      	subs	r4, #1
 80081a6:	f101 0714 	add.w	r7, r1, #20
 80081aa:	f100 0614 	add.w	r6, r0, #20
 80081ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80081b6:	3501      	adds	r5, #1
 80081b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80081bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80081c0:	eb06 030c 	add.w	r3, r6, ip
 80081c4:	eb07 090c 	add.w	r9, r7, ip
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	b39d      	cbz	r5, 8008234 <quorem+0xa0>
 80081cc:	f04f 0a00 	mov.w	sl, #0
 80081d0:	4638      	mov	r0, r7
 80081d2:	46b6      	mov	lr, r6
 80081d4:	46d3      	mov	fp, sl
 80081d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80081da:	b293      	uxth	r3, r2
 80081dc:	fb05 a303 	mla	r3, r5, r3, sl
 80081e0:	0c12      	lsrs	r2, r2, #16
 80081e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081e6:	fb05 a202 	mla	r2, r5, r2, sl
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ebab 0303 	sub.w	r3, fp, r3
 80081f0:	f8de b000 	ldr.w	fp, [lr]
 80081f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80081f8:	fa1f fb8b 	uxth.w	fp, fp
 80081fc:	445b      	add	r3, fp
 80081fe:	fa1f fb82 	uxth.w	fp, r2
 8008202:	f8de 2000 	ldr.w	r2, [lr]
 8008206:	4581      	cmp	r9, r0
 8008208:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800820c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008210:	b29b      	uxth	r3, r3
 8008212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008216:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800821a:	f84e 3b04 	str.w	r3, [lr], #4
 800821e:	d2da      	bcs.n	80081d6 <quorem+0x42>
 8008220:	f856 300c 	ldr.w	r3, [r6, ip]
 8008224:	b933      	cbnz	r3, 8008234 <quorem+0xa0>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	3b04      	subs	r3, #4
 800822a:	429e      	cmp	r6, r3
 800822c:	461a      	mov	r2, r3
 800822e:	d331      	bcc.n	8008294 <quorem+0x100>
 8008230:	f8c8 4010 	str.w	r4, [r8, #16]
 8008234:	4640      	mov	r0, r8
 8008236:	f001 fc8f 	bl	8009b58 <__mcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	db26      	blt.n	800828c <quorem+0xf8>
 800823e:	4630      	mov	r0, r6
 8008240:	f04f 0c00 	mov.w	ip, #0
 8008244:	3501      	adds	r5, #1
 8008246:	f857 1b04 	ldr.w	r1, [r7], #4
 800824a:	f8d0 e000 	ldr.w	lr, [r0]
 800824e:	b28b      	uxth	r3, r1
 8008250:	ebac 0303 	sub.w	r3, ip, r3
 8008254:	fa1f f28e 	uxth.w	r2, lr
 8008258:	4413      	add	r3, r2
 800825a:	0c0a      	lsrs	r2, r1, #16
 800825c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008264:	b29b      	uxth	r3, r3
 8008266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800826a:	45b9      	cmp	r9, r7
 800826c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008270:	f840 3b04 	str.w	r3, [r0], #4
 8008274:	d2e7      	bcs.n	8008246 <quorem+0xb2>
 8008276:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800827a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800827e:	b92a      	cbnz	r2, 800828c <quorem+0xf8>
 8008280:	3b04      	subs	r3, #4
 8008282:	429e      	cmp	r6, r3
 8008284:	461a      	mov	r2, r3
 8008286:	d30b      	bcc.n	80082a0 <quorem+0x10c>
 8008288:	f8c8 4010 	str.w	r4, [r8, #16]
 800828c:	4628      	mov	r0, r5
 800828e:	b003      	add	sp, #12
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	3b04      	subs	r3, #4
 8008298:	2a00      	cmp	r2, #0
 800829a:	d1c9      	bne.n	8008230 <quorem+0x9c>
 800829c:	3c01      	subs	r4, #1
 800829e:	e7c4      	b.n	800822a <quorem+0x96>
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	3b04      	subs	r3, #4
 80082a4:	2a00      	cmp	r2, #0
 80082a6:	d1ef      	bne.n	8008288 <quorem+0xf4>
 80082a8:	3c01      	subs	r4, #1
 80082aa:	e7ea      	b.n	8008282 <quorem+0xee>
 80082ac:	2000      	movs	r0, #0
 80082ae:	e7ee      	b.n	800828e <quorem+0xfa>

080082b0 <_dtoa_r>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	461f      	mov	r7, r3
 80082b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082ba:	b095      	sub	sp, #84	; 0x54
 80082bc:	4604      	mov	r4, r0
 80082be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80082c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80082c6:	b93d      	cbnz	r5, 80082d8 <_dtoa_r+0x28>
 80082c8:	2010      	movs	r0, #16
 80082ca:	f001 f9cb 	bl	8009664 <malloc>
 80082ce:	6260      	str	r0, [r4, #36]	; 0x24
 80082d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082d4:	6005      	str	r5, [r0, #0]
 80082d6:	60c5      	str	r5, [r0, #12]
 80082d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	b151      	cbz	r1, 80082f4 <_dtoa_r+0x44>
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	2301      	movs	r3, #1
 80082e2:	4093      	lsls	r3, r2
 80082e4:	604a      	str	r2, [r1, #4]
 80082e6:	608b      	str	r3, [r1, #8]
 80082e8:	4620      	mov	r0, r4
 80082ea:	f001 fa17 	bl	800971c <_Bfree>
 80082ee:	2200      	movs	r2, #0
 80082f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	1e3b      	subs	r3, r7, #0
 80082f6:	bfaf      	iteee	ge
 80082f8:	2300      	movge	r3, #0
 80082fa:	2201      	movlt	r2, #1
 80082fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008300:	9303      	strlt	r3, [sp, #12]
 8008302:	bfac      	ite	ge
 8008304:	f8c8 3000 	strge.w	r3, [r8]
 8008308:	f8c8 2000 	strlt.w	r2, [r8]
 800830c:	4bae      	ldr	r3, [pc, #696]	; (80085c8 <_dtoa_r+0x318>)
 800830e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008312:	ea33 0308 	bics.w	r3, r3, r8
 8008316:	d11b      	bne.n	8008350 <_dtoa_r+0xa0>
 8008318:	f242 730f 	movw	r3, #9999	; 0x270f
 800831c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	b923      	cbnz	r3, 800832e <_dtoa_r+0x7e>
 8008324:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008328:	2800      	cmp	r0, #0
 800832a:	f000 8545 	beq.w	8008db8 <_dtoa_r+0xb08>
 800832e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008330:	b953      	cbnz	r3, 8008348 <_dtoa_r+0x98>
 8008332:	4ba6      	ldr	r3, [pc, #664]	; (80085cc <_dtoa_r+0x31c>)
 8008334:	e021      	b.n	800837a <_dtoa_r+0xca>
 8008336:	4ba6      	ldr	r3, [pc, #664]	; (80085d0 <_dtoa_r+0x320>)
 8008338:	9306      	str	r3, [sp, #24]
 800833a:	3308      	adds	r3, #8
 800833c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	9806      	ldr	r0, [sp, #24]
 8008342:	b015      	add	sp, #84	; 0x54
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	4ba0      	ldr	r3, [pc, #640]	; (80085cc <_dtoa_r+0x31c>)
 800834a:	9306      	str	r3, [sp, #24]
 800834c:	3303      	adds	r3, #3
 800834e:	e7f5      	b.n	800833c <_dtoa_r+0x8c>
 8008350:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8008360:	4682      	mov	sl, r0
 8008362:	b160      	cbz	r0, 800837e <_dtoa_r+0xce>
 8008364:	2301      	movs	r3, #1
 8008366:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8520 	beq.w	8008db2 <_dtoa_r+0xb02>
 8008372:	4b98      	ldr	r3, [pc, #608]	; (80085d4 <_dtoa_r+0x324>)
 8008374:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	e7e0      	b.n	8008340 <_dtoa_r+0x90>
 800837e:	ab12      	add	r3, sp, #72	; 0x48
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	ab13      	add	r3, sp, #76	; 0x4c
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4632      	mov	r2, r6
 8008388:	463b      	mov	r3, r7
 800838a:	4620      	mov	r0, r4
 800838c:	f001 fcd2 	bl	8009d34 <__d2b>
 8008390:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008394:	4683      	mov	fp, r0
 8008396:	2d00      	cmp	r5, #0
 8008398:	d07d      	beq.n	8008496 <_dtoa_r+0x1e6>
 800839a:	46b0      	mov	r8, r6
 800839c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80083a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80083a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80083b0:	2200      	movs	r2, #0
 80083b2:	4b89      	ldr	r3, [pc, #548]	; (80085d8 <_dtoa_r+0x328>)
 80083b4:	4640      	mov	r0, r8
 80083b6:	4649      	mov	r1, r9
 80083b8:	f7f7 fed6 	bl	8000168 <__aeabi_dsub>
 80083bc:	a37c      	add	r3, pc, #496	; (adr r3, 80085b0 <_dtoa_r+0x300>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f8 f889 	bl	80004d8 <__aeabi_dmul>
 80083c6:	a37c      	add	r3, pc, #496	; (adr r3, 80085b8 <_dtoa_r+0x308>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f7 fece 	bl	800016c <__adddf3>
 80083d0:	4606      	mov	r6, r0
 80083d2:	4628      	mov	r0, r5
 80083d4:	460f      	mov	r7, r1
 80083d6:	f7f8 f815 	bl	8000404 <__aeabi_i2d>
 80083da:	a379      	add	r3, pc, #484	; (adr r3, 80085c0 <_dtoa_r+0x310>)
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f7f8 f87a 	bl	80004d8 <__aeabi_dmul>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f7f7 febe 	bl	800016c <__adddf3>
 80083f0:	4606      	mov	r6, r0
 80083f2:	460f      	mov	r7, r1
 80083f4:	f7f8 fb20 	bl	8000a38 <__aeabi_d2iz>
 80083f8:	2200      	movs	r2, #0
 80083fa:	4682      	mov	sl, r0
 80083fc:	2300      	movs	r3, #0
 80083fe:	4630      	mov	r0, r6
 8008400:	4639      	mov	r1, r7
 8008402:	f7f8 fadb 	bl	80009bc <__aeabi_dcmplt>
 8008406:	b148      	cbz	r0, 800841c <_dtoa_r+0x16c>
 8008408:	4650      	mov	r0, sl
 800840a:	f7f7 fffb 	bl	8000404 <__aeabi_i2d>
 800840e:	4632      	mov	r2, r6
 8008410:	463b      	mov	r3, r7
 8008412:	f7f8 fac9 	bl	80009a8 <__aeabi_dcmpeq>
 8008416:	b908      	cbnz	r0, 800841c <_dtoa_r+0x16c>
 8008418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800841c:	f1ba 0f16 	cmp.w	sl, #22
 8008420:	d85a      	bhi.n	80084d8 <_dtoa_r+0x228>
 8008422:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008426:	496d      	ldr	r1, [pc, #436]	; (80085dc <_dtoa_r+0x32c>)
 8008428:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800842c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008430:	f7f8 fae2 	bl	80009f8 <__aeabi_dcmpgt>
 8008434:	2800      	cmp	r0, #0
 8008436:	d051      	beq.n	80084dc <_dtoa_r+0x22c>
 8008438:	2300      	movs	r3, #0
 800843a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800843e:	930d      	str	r3, [sp, #52]	; 0x34
 8008440:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008442:	1b5d      	subs	r5, r3, r5
 8008444:	1e6b      	subs	r3, r5, #1
 8008446:	9307      	str	r3, [sp, #28]
 8008448:	bf43      	ittte	mi
 800844a:	2300      	movmi	r3, #0
 800844c:	f1c5 0901 	rsbmi	r9, r5, #1
 8008450:	9307      	strmi	r3, [sp, #28]
 8008452:	f04f 0900 	movpl.w	r9, #0
 8008456:	f1ba 0f00 	cmp.w	sl, #0
 800845a:	db41      	blt.n	80084e0 <_dtoa_r+0x230>
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008462:	4453      	add	r3, sl
 8008464:	9307      	str	r3, [sp, #28]
 8008466:	2300      	movs	r3, #0
 8008468:	9308      	str	r3, [sp, #32]
 800846a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800846c:	2b09      	cmp	r3, #9
 800846e:	f200 808f 	bhi.w	8008590 <_dtoa_r+0x2e0>
 8008472:	2b05      	cmp	r3, #5
 8008474:	bfc4      	itt	gt
 8008476:	3b04      	subgt	r3, #4
 8008478:	931e      	strgt	r3, [sp, #120]	; 0x78
 800847a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800847c:	bfc8      	it	gt
 800847e:	2500      	movgt	r5, #0
 8008480:	f1a3 0302 	sub.w	r3, r3, #2
 8008484:	bfd8      	it	le
 8008486:	2501      	movle	r5, #1
 8008488:	2b03      	cmp	r3, #3
 800848a:	f200 808d 	bhi.w	80085a8 <_dtoa_r+0x2f8>
 800848e:	e8df f003 	tbb	[pc, r3]
 8008492:	7d7b      	.short	0x7d7b
 8008494:	6f2f      	.short	0x6f2f
 8008496:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800849a:	441d      	add	r5, r3
 800849c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80084a0:	2820      	cmp	r0, #32
 80084a2:	dd13      	ble.n	80084cc <_dtoa_r+0x21c>
 80084a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	fa08 f800 	lsl.w	r8, r8, r0
 80084ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80084b2:	fa23 f000 	lsr.w	r0, r3, r0
 80084b6:	ea48 0000 	orr.w	r0, r8, r0
 80084ba:	f7f7 ff93 	bl	80003e4 <__aeabi_ui2d>
 80084be:	2301      	movs	r3, #1
 80084c0:	4680      	mov	r8, r0
 80084c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80084c6:	3d01      	subs	r5, #1
 80084c8:	9310      	str	r3, [sp, #64]	; 0x40
 80084ca:	e771      	b.n	80083b0 <_dtoa_r+0x100>
 80084cc:	9b02      	ldr	r3, [sp, #8]
 80084ce:	f1c0 0020 	rsb	r0, r0, #32
 80084d2:	fa03 f000 	lsl.w	r0, r3, r0
 80084d6:	e7f0      	b.n	80084ba <_dtoa_r+0x20a>
 80084d8:	2301      	movs	r3, #1
 80084da:	e7b0      	b.n	800843e <_dtoa_r+0x18e>
 80084dc:	900d      	str	r0, [sp, #52]	; 0x34
 80084de:	e7af      	b.n	8008440 <_dtoa_r+0x190>
 80084e0:	f1ca 0300 	rsb	r3, sl, #0
 80084e4:	9308      	str	r3, [sp, #32]
 80084e6:	2300      	movs	r3, #0
 80084e8:	eba9 090a 	sub.w	r9, r9, sl
 80084ec:	930c      	str	r3, [sp, #48]	; 0x30
 80084ee:	e7bc      	b.n	800846a <_dtoa_r+0x1ba>
 80084f0:	2301      	movs	r3, #1
 80084f2:	9309      	str	r3, [sp, #36]	; 0x24
 80084f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd74      	ble.n	80085e4 <_dtoa_r+0x334>
 80084fa:	4698      	mov	r8, r3
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	2200      	movs	r2, #0
 8008500:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008502:	6072      	str	r2, [r6, #4]
 8008504:	2204      	movs	r2, #4
 8008506:	f102 0014 	add.w	r0, r2, #20
 800850a:	4298      	cmp	r0, r3
 800850c:	6871      	ldr	r1, [r6, #4]
 800850e:	d96e      	bls.n	80085ee <_dtoa_r+0x33e>
 8008510:	4620      	mov	r0, r4
 8008512:	f001 f8cf 	bl	80096b4 <_Balloc>
 8008516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008518:	6030      	str	r0, [r6, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f1b8 0f0e 	cmp.w	r8, #14
 8008520:	9306      	str	r3, [sp, #24]
 8008522:	f200 80ed 	bhi.w	8008700 <_dtoa_r+0x450>
 8008526:	2d00      	cmp	r5, #0
 8008528:	f000 80ea 	beq.w	8008700 <_dtoa_r+0x450>
 800852c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008538:	dd77      	ble.n	800862a <_dtoa_r+0x37a>
 800853a:	4a28      	ldr	r2, [pc, #160]	; (80085dc <_dtoa_r+0x32c>)
 800853c:	f00a 030f 	and.w	r3, sl, #15
 8008540:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008544:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008548:	06f0      	lsls	r0, r6, #27
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008552:	d568      	bpl.n	8008626 <_dtoa_r+0x376>
 8008554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008558:	4b21      	ldr	r3, [pc, #132]	; (80085e0 <_dtoa_r+0x330>)
 800855a:	2503      	movs	r5, #3
 800855c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008560:	f7f8 f8e4 	bl	800072c <__aeabi_ddiv>
 8008564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008568:	f006 060f 	and.w	r6, r6, #15
 800856c:	4f1c      	ldr	r7, [pc, #112]	; (80085e0 <_dtoa_r+0x330>)
 800856e:	e04f      	b.n	8008610 <_dtoa_r+0x360>
 8008570:	2301      	movs	r3, #1
 8008572:	9309      	str	r3, [sp, #36]	; 0x24
 8008574:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008576:	4453      	add	r3, sl
 8008578:	f103 0801 	add.w	r8, r3, #1
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	4643      	mov	r3, r8
 8008580:	2b01      	cmp	r3, #1
 8008582:	bfb8      	it	lt
 8008584:	2301      	movlt	r3, #1
 8008586:	e7ba      	b.n	80084fe <_dtoa_r+0x24e>
 8008588:	2300      	movs	r3, #0
 800858a:	e7b2      	b.n	80084f2 <_dtoa_r+0x242>
 800858c:	2300      	movs	r3, #0
 800858e:	e7f0      	b.n	8008572 <_dtoa_r+0x2c2>
 8008590:	2501      	movs	r5, #1
 8008592:	2300      	movs	r3, #0
 8008594:	9509      	str	r5, [sp, #36]	; 0x24
 8008596:	931e      	str	r3, [sp, #120]	; 0x78
 8008598:	f04f 33ff 	mov.w	r3, #4294967295
 800859c:	2200      	movs	r2, #0
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	4698      	mov	r8, r3
 80085a2:	2312      	movs	r3, #18
 80085a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80085a6:	e7aa      	b.n	80084fe <_dtoa_r+0x24e>
 80085a8:	2301      	movs	r3, #1
 80085aa:	9309      	str	r3, [sp, #36]	; 0x24
 80085ac:	e7f4      	b.n	8008598 <_dtoa_r+0x2e8>
 80085ae:	bf00      	nop
 80085b0:	636f4361 	.word	0x636f4361
 80085b4:	3fd287a7 	.word	0x3fd287a7
 80085b8:	8b60c8b3 	.word	0x8b60c8b3
 80085bc:	3fc68a28 	.word	0x3fc68a28
 80085c0:	509f79fb 	.word	0x509f79fb
 80085c4:	3fd34413 	.word	0x3fd34413
 80085c8:	7ff00000 	.word	0x7ff00000
 80085cc:	0800d54e 	.word	0x0800d54e
 80085d0:	0800d545 	.word	0x0800d545
 80085d4:	0800b282 	.word	0x0800b282
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800d5e8 	.word	0x0800d5e8
 80085e0:	0800d5c0 	.word	0x0800d5c0
 80085e4:	2301      	movs	r3, #1
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	4698      	mov	r8, r3
 80085ea:	461a      	mov	r2, r3
 80085ec:	e7da      	b.n	80085a4 <_dtoa_r+0x2f4>
 80085ee:	3101      	adds	r1, #1
 80085f0:	6071      	str	r1, [r6, #4]
 80085f2:	0052      	lsls	r2, r2, #1
 80085f4:	e787      	b.n	8008506 <_dtoa_r+0x256>
 80085f6:	07f1      	lsls	r1, r6, #31
 80085f8:	d508      	bpl.n	800860c <_dtoa_r+0x35c>
 80085fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008602:	f7f7 ff69 	bl	80004d8 <__aeabi_dmul>
 8008606:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800860a:	3501      	adds	r5, #1
 800860c:	1076      	asrs	r6, r6, #1
 800860e:	3708      	adds	r7, #8
 8008610:	2e00      	cmp	r6, #0
 8008612:	d1f0      	bne.n	80085f6 <_dtoa_r+0x346>
 8008614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008618:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800861c:	f7f8 f886 	bl	800072c <__aeabi_ddiv>
 8008620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008624:	e01b      	b.n	800865e <_dtoa_r+0x3ae>
 8008626:	2502      	movs	r5, #2
 8008628:	e7a0      	b.n	800856c <_dtoa_r+0x2bc>
 800862a:	f000 80a4 	beq.w	8008776 <_dtoa_r+0x4c6>
 800862e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008632:	f1ca 0600 	rsb	r6, sl, #0
 8008636:	4ba0      	ldr	r3, [pc, #640]	; (80088b8 <_dtoa_r+0x608>)
 8008638:	f006 020f 	and.w	r2, r6, #15
 800863c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 ff48 	bl	80004d8 <__aeabi_dmul>
 8008648:	2502      	movs	r5, #2
 800864a:	2300      	movs	r3, #0
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	4f9a      	ldr	r7, [pc, #616]	; (80088bc <_dtoa_r+0x60c>)
 8008652:	1136      	asrs	r6, r6, #4
 8008654:	2e00      	cmp	r6, #0
 8008656:	f040 8083 	bne.w	8008760 <_dtoa_r+0x4b0>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e0      	bne.n	8008620 <_dtoa_r+0x370>
 800865e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 808a 	beq.w	800877a <_dtoa_r+0x4ca>
 8008666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800866a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800866e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008672:	2200      	movs	r2, #0
 8008674:	4b92      	ldr	r3, [pc, #584]	; (80088c0 <_dtoa_r+0x610>)
 8008676:	f7f8 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800867a:	2800      	cmp	r0, #0
 800867c:	d07d      	beq.n	800877a <_dtoa_r+0x4ca>
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	d07a      	beq.n	800877a <_dtoa_r+0x4ca>
 8008684:	9b04      	ldr	r3, [sp, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd36      	ble.n	80086f8 <_dtoa_r+0x448>
 800868a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800868e:	2200      	movs	r2, #0
 8008690:	4b8c      	ldr	r3, [pc, #560]	; (80088c4 <_dtoa_r+0x614>)
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800869a:	9e04      	ldr	r6, [sp, #16]
 800869c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80086a0:	3501      	adds	r5, #1
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7f7 feae 	bl	8000404 <__aeabi_i2d>
 80086a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ac:	f7f7 ff14 	bl	80004d8 <__aeabi_dmul>
 80086b0:	2200      	movs	r2, #0
 80086b2:	4b85      	ldr	r3, [pc, #532]	; (80088c8 <_dtoa_r+0x618>)
 80086b4:	f7f7 fd5a 	bl	800016c <__adddf3>
 80086b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80086bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80086c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	d15c      	bne.n	8008780 <_dtoa_r+0x4d0>
 80086c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	4b7f      	ldr	r3, [pc, #508]	; (80088cc <_dtoa_r+0x61c>)
 80086ce:	f7f7 fd4b 	bl	8000168 <__aeabi_dsub>
 80086d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d4:	462b      	mov	r3, r5
 80086d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086da:	f7f8 f98d 	bl	80009f8 <__aeabi_dcmpgt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8281 	bne.w	8008be6 <_dtoa_r+0x936>
 80086e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80086ee:	f7f8 f965 	bl	80009bc <__aeabi_dcmplt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f040 8275 	bne.w	8008be2 <_dtoa_r+0x932>
 80086f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008702:	2b00      	cmp	r3, #0
 8008704:	f2c0 814b 	blt.w	800899e <_dtoa_r+0x6ee>
 8008708:	f1ba 0f0e 	cmp.w	sl, #14
 800870c:	f300 8147 	bgt.w	800899e <_dtoa_r+0x6ee>
 8008710:	4b69      	ldr	r3, [pc, #420]	; (80088b8 <_dtoa_r+0x608>)
 8008712:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800871e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008720:	2b00      	cmp	r3, #0
 8008722:	f280 80d7 	bge.w	80088d4 <_dtoa_r+0x624>
 8008726:	f1b8 0f00 	cmp.w	r8, #0
 800872a:	f300 80d3 	bgt.w	80088d4 <_dtoa_r+0x624>
 800872e:	f040 8257 	bne.w	8008be0 <_dtoa_r+0x930>
 8008732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008736:	2200      	movs	r2, #0
 8008738:	4b64      	ldr	r3, [pc, #400]	; (80088cc <_dtoa_r+0x61c>)
 800873a:	f7f7 fecd 	bl	80004d8 <__aeabi_dmul>
 800873e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008742:	f7f8 f94f 	bl	80009e4 <__aeabi_dcmpge>
 8008746:	4646      	mov	r6, r8
 8008748:	4647      	mov	r7, r8
 800874a:	2800      	cmp	r0, #0
 800874c:	f040 822d 	bne.w	8008baa <_dtoa_r+0x8fa>
 8008750:	9b06      	ldr	r3, [sp, #24]
 8008752:	9a06      	ldr	r2, [sp, #24]
 8008754:	1c5d      	adds	r5, r3, #1
 8008756:	2331      	movs	r3, #49	; 0x31
 8008758:	f10a 0a01 	add.w	sl, sl, #1
 800875c:	7013      	strb	r3, [r2, #0]
 800875e:	e228      	b.n	8008bb2 <_dtoa_r+0x902>
 8008760:	07f2      	lsls	r2, r6, #31
 8008762:	d505      	bpl.n	8008770 <_dtoa_r+0x4c0>
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	f7f7 feb6 	bl	80004d8 <__aeabi_dmul>
 800876c:	2301      	movs	r3, #1
 800876e:	3501      	adds	r5, #1
 8008770:	1076      	asrs	r6, r6, #1
 8008772:	3708      	adds	r7, #8
 8008774:	e76e      	b.n	8008654 <_dtoa_r+0x3a4>
 8008776:	2502      	movs	r5, #2
 8008778:	e771      	b.n	800865e <_dtoa_r+0x3ae>
 800877a:	4657      	mov	r7, sl
 800877c:	4646      	mov	r6, r8
 800877e:	e790      	b.n	80086a2 <_dtoa_r+0x3f2>
 8008780:	4b4d      	ldr	r3, [pc, #308]	; (80088b8 <_dtoa_r+0x608>)
 8008782:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008786:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	d048      	beq.n	8008822 <_dtoa_r+0x572>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	2000      	movs	r0, #0
 8008796:	494e      	ldr	r1, [pc, #312]	; (80088d0 <_dtoa_r+0x620>)
 8008798:	f7f7 ffc8 	bl	800072c <__aeabi_ddiv>
 800879c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087a0:	f7f7 fce2 	bl	8000168 <__aeabi_dsub>
 80087a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087a8:	9d06      	ldr	r5, [sp, #24]
 80087aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ae:	f7f8 f943 	bl	8000a38 <__aeabi_d2iz>
 80087b2:	9011      	str	r0, [sp, #68]	; 0x44
 80087b4:	f7f7 fe26 	bl	8000404 <__aeabi_i2d>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c0:	f7f7 fcd2 	bl	8000168 <__aeabi_dsub>
 80087c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ca:	3330      	adds	r3, #48	; 0x30
 80087cc:	f805 3b01 	strb.w	r3, [r5], #1
 80087d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087d4:	f7f8 f8f2 	bl	80009bc <__aeabi_dcmplt>
 80087d8:	2800      	cmp	r0, #0
 80087da:	d163      	bne.n	80088a4 <_dtoa_r+0x5f4>
 80087dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e0:	2000      	movs	r0, #0
 80087e2:	4937      	ldr	r1, [pc, #220]	; (80088c0 <_dtoa_r+0x610>)
 80087e4:	f7f7 fcc0 	bl	8000168 <__aeabi_dsub>
 80087e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087ec:	f7f8 f8e6 	bl	80009bc <__aeabi_dcmplt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f040 80b5 	bne.w	8008960 <_dtoa_r+0x6b0>
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	1aeb      	subs	r3, r5, r3
 80087fa:	429e      	cmp	r6, r3
 80087fc:	f77f af7c 	ble.w	80086f8 <_dtoa_r+0x448>
 8008800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008804:	2200      	movs	r2, #0
 8008806:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <_dtoa_r+0x614>)
 8008808:	f7f7 fe66 	bl	80004d8 <__aeabi_dmul>
 800880c:	2200      	movs	r2, #0
 800880e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008816:	4b2b      	ldr	r3, [pc, #172]	; (80088c4 <_dtoa_r+0x614>)
 8008818:	f7f7 fe5e 	bl	80004d8 <__aeabi_dmul>
 800881c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008820:	e7c3      	b.n	80087aa <_dtoa_r+0x4fa>
 8008822:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008826:	f7f7 fe57 	bl	80004d8 <__aeabi_dmul>
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008830:	199d      	adds	r5, r3, r6
 8008832:	461e      	mov	r6, r3
 8008834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008838:	f7f8 f8fe 	bl	8000a38 <__aeabi_d2iz>
 800883c:	9011      	str	r0, [sp, #68]	; 0x44
 800883e:	f7f7 fde1 	bl	8000404 <__aeabi_i2d>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884a:	f7f7 fc8d 	bl	8000168 <__aeabi_dsub>
 800884e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008854:	3330      	adds	r3, #48	; 0x30
 8008856:	f806 3b01 	strb.w	r3, [r6], #1
 800885a:	42ae      	cmp	r6, r5
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	d124      	bne.n	80088ac <_dtoa_r+0x5fc>
 8008862:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008866:	4b1a      	ldr	r3, [pc, #104]	; (80088d0 <_dtoa_r+0x620>)
 8008868:	f7f7 fc80 	bl	800016c <__adddf3>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008874:	f7f8 f8c0 	bl	80009f8 <__aeabi_dcmpgt>
 8008878:	2800      	cmp	r0, #0
 800887a:	d171      	bne.n	8008960 <_dtoa_r+0x6b0>
 800887c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008880:	2000      	movs	r0, #0
 8008882:	4913      	ldr	r1, [pc, #76]	; (80088d0 <_dtoa_r+0x620>)
 8008884:	f7f7 fc70 	bl	8000168 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008890:	f7f8 f894 	bl	80009bc <__aeabi_dcmplt>
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f af2f 	beq.w	80086f8 <_dtoa_r+0x448>
 800889a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800889e:	1e6a      	subs	r2, r5, #1
 80088a0:	2b30      	cmp	r3, #48	; 0x30
 80088a2:	d001      	beq.n	80088a8 <_dtoa_r+0x5f8>
 80088a4:	46ba      	mov	sl, r7
 80088a6:	e04a      	b.n	800893e <_dtoa_r+0x68e>
 80088a8:	4615      	mov	r5, r2
 80088aa:	e7f6      	b.n	800889a <_dtoa_r+0x5ea>
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <_dtoa_r+0x614>)
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088b6:	e7bd      	b.n	8008834 <_dtoa_r+0x584>
 80088b8:	0800d5e8 	.word	0x0800d5e8
 80088bc:	0800d5c0 	.word	0x0800d5c0
 80088c0:	3ff00000 	.word	0x3ff00000
 80088c4:	40240000 	.word	0x40240000
 80088c8:	401c0000 	.word	0x401c0000
 80088cc:	40140000 	.word	0x40140000
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	9d06      	ldr	r5, [sp, #24]
 80088d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80088da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088de:	4630      	mov	r0, r6
 80088e0:	4639      	mov	r1, r7
 80088e2:	f7f7 ff23 	bl	800072c <__aeabi_ddiv>
 80088e6:	f7f8 f8a7 	bl	8000a38 <__aeabi_d2iz>
 80088ea:	4681      	mov	r9, r0
 80088ec:	f7f7 fd8a 	bl	8000404 <__aeabi_i2d>
 80088f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f4:	f7f7 fdf0 	bl	80004d8 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f7 fc32 	bl	8000168 <__aeabi_dsub>
 8008904:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008908:	f805 6b01 	strb.w	r6, [r5], #1
 800890c:	9e06      	ldr	r6, [sp, #24]
 800890e:	4602      	mov	r2, r0
 8008910:	1bae      	subs	r6, r5, r6
 8008912:	45b0      	cmp	r8, r6
 8008914:	460b      	mov	r3, r1
 8008916:	d135      	bne.n	8008984 <_dtoa_r+0x6d4>
 8008918:	f7f7 fc28 	bl	800016c <__adddf3>
 800891c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	f7f8 f868 	bl	80009f8 <__aeabi_dcmpgt>
 8008928:	b9c8      	cbnz	r0, 800895e <_dtoa_r+0x6ae>
 800892a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892e:	4630      	mov	r0, r6
 8008930:	4639      	mov	r1, r7
 8008932:	f7f8 f839 	bl	80009a8 <__aeabi_dcmpeq>
 8008936:	b110      	cbz	r0, 800893e <_dtoa_r+0x68e>
 8008938:	f019 0f01 	tst.w	r9, #1
 800893c:	d10f      	bne.n	800895e <_dtoa_r+0x6ae>
 800893e:	4659      	mov	r1, fp
 8008940:	4620      	mov	r0, r4
 8008942:	f000 feeb 	bl	800971c <_Bfree>
 8008946:	2300      	movs	r3, #0
 8008948:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800894a:	702b      	strb	r3, [r5, #0]
 800894c:	f10a 0301 	add.w	r3, sl, #1
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008954:	2b00      	cmp	r3, #0
 8008956:	f43f acf3 	beq.w	8008340 <_dtoa_r+0x90>
 800895a:	601d      	str	r5, [r3, #0]
 800895c:	e4f0      	b.n	8008340 <_dtoa_r+0x90>
 800895e:	4657      	mov	r7, sl
 8008960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008964:	1e6b      	subs	r3, r5, #1
 8008966:	2a39      	cmp	r2, #57	; 0x39
 8008968:	d106      	bne.n	8008978 <_dtoa_r+0x6c8>
 800896a:	9a06      	ldr	r2, [sp, #24]
 800896c:	429a      	cmp	r2, r3
 800896e:	d107      	bne.n	8008980 <_dtoa_r+0x6d0>
 8008970:	2330      	movs	r3, #48	; 0x30
 8008972:	7013      	strb	r3, [r2, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	3701      	adds	r7, #1
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	3201      	adds	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e791      	b.n	80088a4 <_dtoa_r+0x5f4>
 8008980:	461d      	mov	r5, r3
 8008982:	e7ed      	b.n	8008960 <_dtoa_r+0x6b0>
 8008984:	2200      	movs	r2, #0
 8008986:	4b99      	ldr	r3, [pc, #612]	; (8008bec <_dtoa_r+0x93c>)
 8008988:	f7f7 fda6 	bl	80004d8 <__aeabi_dmul>
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	f7f8 f808 	bl	80009a8 <__aeabi_dcmpeq>
 8008998:	2800      	cmp	r0, #0
 800899a:	d09e      	beq.n	80088da <_dtoa_r+0x62a>
 800899c:	e7cf      	b.n	800893e <_dtoa_r+0x68e>
 800899e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	f000 8088 	beq.w	8008ab6 <_dtoa_r+0x806>
 80089a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80089a8:	2a01      	cmp	r2, #1
 80089aa:	dc6d      	bgt.n	8008a88 <_dtoa_r+0x7d8>
 80089ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d066      	beq.n	8008a80 <_dtoa_r+0x7d0>
 80089b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089b6:	464d      	mov	r5, r9
 80089b8:	9e08      	ldr	r6, [sp, #32]
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	2101      	movs	r1, #1
 80089be:	441a      	add	r2, r3
 80089c0:	4620      	mov	r0, r4
 80089c2:	4499      	add	r9, r3
 80089c4:	9207      	str	r2, [sp, #28]
 80089c6:	f000 ff87 	bl	80098d8 <__i2b>
 80089ca:	4607      	mov	r7, r0
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	dd0b      	ble.n	80089e8 <_dtoa_r+0x738>
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dd08      	ble.n	80089e8 <_dtoa_r+0x738>
 80089d6:	42ab      	cmp	r3, r5
 80089d8:	bfa8      	it	ge
 80089da:	462b      	movge	r3, r5
 80089dc:	9a07      	ldr	r2, [sp, #28]
 80089de:	eba9 0903 	sub.w	r9, r9, r3
 80089e2:	1aed      	subs	r5, r5, r3
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	9b08      	ldr	r3, [sp, #32]
 80089ea:	b1eb      	cbz	r3, 8008a28 <_dtoa_r+0x778>
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d065      	beq.n	8008abe <_dtoa_r+0x80e>
 80089f2:	b18e      	cbz	r6, 8008a18 <_dtoa_r+0x768>
 80089f4:	4639      	mov	r1, r7
 80089f6:	4632      	mov	r2, r6
 80089f8:	4620      	mov	r0, r4
 80089fa:	f001 f80b 	bl	8009a14 <__pow5mult>
 80089fe:	465a      	mov	r2, fp
 8008a00:	4601      	mov	r1, r0
 8008a02:	4607      	mov	r7, r0
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 ff70 	bl	80098ea <__multiply>
 8008a0a:	4659      	mov	r1, fp
 8008a0c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 fe84 	bl	800971c <_Bfree>
 8008a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a16:	469b      	mov	fp, r3
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	1b9a      	subs	r2, r3, r6
 8008a1c:	d004      	beq.n	8008a28 <_dtoa_r+0x778>
 8008a1e:	4659      	mov	r1, fp
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 fff7 	bl	8009a14 <__pow5mult>
 8008a26:	4683      	mov	fp, r0
 8008a28:	2101      	movs	r1, #1
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 ff54 	bl	80098d8 <__i2b>
 8008a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a32:	4606      	mov	r6, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 81c6 	beq.w	8008dc6 <_dtoa_r+0xb16>
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 ffe8 	bl	8009a14 <__pow5mult>
 8008a44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a46:	4606      	mov	r6, r0
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	dc3e      	bgt.n	8008aca <_dtoa_r+0x81a>
 8008a4c:	9b02      	ldr	r3, [sp, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d137      	bne.n	8008ac2 <_dtoa_r+0x812>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d134      	bne.n	8008ac6 <_dtoa_r+0x816>
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a62:	0d1b      	lsrs	r3, r3, #20
 8008a64:	051b      	lsls	r3, r3, #20
 8008a66:	b12b      	cbz	r3, 8008a74 <_dtoa_r+0x7c4>
 8008a68:	9b07      	ldr	r3, [sp, #28]
 8008a6a:	f109 0901 	add.w	r9, r9, #1
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	2301      	movs	r3, #1
 8008a74:	9308      	str	r3, [sp, #32]
 8008a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d128      	bne.n	8008ace <_dtoa_r+0x81e>
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e02e      	b.n	8008ade <_dtoa_r+0x82e>
 8008a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a86:	e796      	b.n	80089b6 <_dtoa_r+0x706>
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8008a8e:	42b3      	cmp	r3, r6
 8008a90:	bfb7      	itett	lt
 8008a92:	9b08      	ldrlt	r3, [sp, #32]
 8008a94:	1b9e      	subge	r6, r3, r6
 8008a96:	1af2      	sublt	r2, r6, r3
 8008a98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008a9a:	bfbf      	itttt	lt
 8008a9c:	9608      	strlt	r6, [sp, #32]
 8008a9e:	189b      	addlt	r3, r3, r2
 8008aa0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008aa2:	2600      	movlt	r6, #0
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	bfb9      	ittee	lt
 8008aaa:	eba9 0508 	sublt.w	r5, r9, r8
 8008aae:	2300      	movlt	r3, #0
 8008ab0:	464d      	movge	r5, r9
 8008ab2:	4643      	movge	r3, r8
 8008ab4:	e781      	b.n	80089ba <_dtoa_r+0x70a>
 8008ab6:	9e08      	ldr	r6, [sp, #32]
 8008ab8:	464d      	mov	r5, r9
 8008aba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008abc:	e786      	b.n	80089cc <_dtoa_r+0x71c>
 8008abe:	9a08      	ldr	r2, [sp, #32]
 8008ac0:	e7ad      	b.n	8008a1e <_dtoa_r+0x76e>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e7d6      	b.n	8008a74 <_dtoa_r+0x7c4>
 8008ac6:	9b02      	ldr	r3, [sp, #8]
 8008ac8:	e7d4      	b.n	8008a74 <_dtoa_r+0x7c4>
 8008aca:	2300      	movs	r3, #0
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	6933      	ldr	r3, [r6, #16]
 8008ad0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ad4:	6918      	ldr	r0, [r3, #16]
 8008ad6:	f000 feb1 	bl	800983c <__hi0bits>
 8008ada:	f1c0 0020 	rsb	r0, r0, #32
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	4418      	add	r0, r3
 8008ae2:	f010 001f 	ands.w	r0, r0, #31
 8008ae6:	d047      	beq.n	8008b78 <_dtoa_r+0x8c8>
 8008ae8:	f1c0 0320 	rsb	r3, r0, #32
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	dd3b      	ble.n	8008b68 <_dtoa_r+0x8b8>
 8008af0:	9b07      	ldr	r3, [sp, #28]
 8008af2:	f1c0 001c 	rsb	r0, r0, #28
 8008af6:	4481      	add	r9, r0
 8008af8:	4405      	add	r5, r0
 8008afa:	4403      	add	r3, r0
 8008afc:	9307      	str	r3, [sp, #28]
 8008afe:	f1b9 0f00 	cmp.w	r9, #0
 8008b02:	dd05      	ble.n	8008b10 <_dtoa_r+0x860>
 8008b04:	4659      	mov	r1, fp
 8008b06:	464a      	mov	r2, r9
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 ffd1 	bl	8009ab0 <__lshift>
 8008b0e:	4683      	mov	fp, r0
 8008b10:	9b07      	ldr	r3, [sp, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dd05      	ble.n	8008b22 <_dtoa_r+0x872>
 8008b16:	4631      	mov	r1, r6
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 ffc8 	bl	8009ab0 <__lshift>
 8008b20:	4606      	mov	r6, r0
 8008b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b24:	b353      	cbz	r3, 8008b7c <_dtoa_r+0x8cc>
 8008b26:	4631      	mov	r1, r6
 8008b28:	4658      	mov	r0, fp
 8008b2a:	f001 f815 	bl	8009b58 <__mcmp>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	da24      	bge.n	8008b7c <_dtoa_r+0x8cc>
 8008b32:	2300      	movs	r3, #0
 8008b34:	4659      	mov	r1, fp
 8008b36:	220a      	movs	r2, #10
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fe06 	bl	800974a <__multadd>
 8008b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b44:	4683      	mov	fp, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8144 	beq.w	8008dd4 <_dtoa_r+0xb24>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	4639      	mov	r1, r7
 8008b50:	220a      	movs	r2, #10
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fdf9 	bl	800974a <__multadd>
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dc4d      	bgt.n	8008bfc <_dtoa_r+0x94c>
 8008b60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	dd4a      	ble.n	8008bfc <_dtoa_r+0x94c>
 8008b66:	e011      	b.n	8008b8c <_dtoa_r+0x8dc>
 8008b68:	d0c9      	beq.n	8008afe <_dtoa_r+0x84e>
 8008b6a:	9a07      	ldr	r2, [sp, #28]
 8008b6c:	331c      	adds	r3, #28
 8008b6e:	441a      	add	r2, r3
 8008b70:	4499      	add	r9, r3
 8008b72:	441d      	add	r5, r3
 8008b74:	4613      	mov	r3, r2
 8008b76:	e7c1      	b.n	8008afc <_dtoa_r+0x84c>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	e7f6      	b.n	8008b6a <_dtoa_r+0x8ba>
 8008b7c:	f1b8 0f00 	cmp.w	r8, #0
 8008b80:	dc36      	bgt.n	8008bf0 <_dtoa_r+0x940>
 8008b82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	dd33      	ble.n	8008bf0 <_dtoa_r+0x940>
 8008b88:	f8cd 8010 	str.w	r8, [sp, #16]
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	b963      	cbnz	r3, 8008baa <_dtoa_r+0x8fa>
 8008b90:	4631      	mov	r1, r6
 8008b92:	2205      	movs	r2, #5
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fdd8 	bl	800974a <__multadd>
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	4658      	mov	r0, fp
 8008ba0:	f000 ffda 	bl	8009b58 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f73f add3 	bgt.w	8008750 <_dtoa_r+0x4a0>
 8008baa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bac:	9d06      	ldr	r5, [sp, #24]
 8008bae:	ea6f 0a03 	mvn.w	sl, r3
 8008bb2:	f04f 0900 	mov.w	r9, #0
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fdaf 	bl	800971c <_Bfree>
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	f43f aebd 	beq.w	800893e <_dtoa_r+0x68e>
 8008bc4:	f1b9 0f00 	cmp.w	r9, #0
 8008bc8:	d005      	beq.n	8008bd6 <_dtoa_r+0x926>
 8008bca:	45b9      	cmp	r9, r7
 8008bcc:	d003      	beq.n	8008bd6 <_dtoa_r+0x926>
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fda3 	bl	800971c <_Bfree>
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fd9f 	bl	800971c <_Bfree>
 8008bde:	e6ae      	b.n	800893e <_dtoa_r+0x68e>
 8008be0:	2600      	movs	r6, #0
 8008be2:	4637      	mov	r7, r6
 8008be4:	e7e1      	b.n	8008baa <_dtoa_r+0x8fa>
 8008be6:	46ba      	mov	sl, r7
 8008be8:	4637      	mov	r7, r6
 8008bea:	e5b1      	b.n	8008750 <_dtoa_r+0x4a0>
 8008bec:	40240000 	.word	0x40240000
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	f8cd 8010 	str.w	r8, [sp, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80f3 	beq.w	8008de2 <_dtoa_r+0xb32>
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	dd05      	ble.n	8008c0c <_dtoa_r+0x95c>
 8008c00:	4639      	mov	r1, r7
 8008c02:	462a      	mov	r2, r5
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 ff53 	bl	8009ab0 <__lshift>
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	9b08      	ldr	r3, [sp, #32]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d04c      	beq.n	8008cac <_dtoa_r+0x9fc>
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fd4d 	bl	80096b4 <_Balloc>
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	f107 010c 	add.w	r1, r7, #12
 8008c22:	3202      	adds	r2, #2
 8008c24:	0092      	lsls	r2, r2, #2
 8008c26:	300c      	adds	r0, #12
 8008c28:	f7fd fc8c 	bl	8006544 <memcpy>
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 ff3d 	bl	8009ab0 <__lshift>
 8008c36:	46b9      	mov	r9, r7
 8008c38:	4607      	mov	r7, r0
 8008c3a:	9b06      	ldr	r3, [sp, #24]
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	9b02      	ldr	r3, [sp, #8]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	9308      	str	r3, [sp, #32]
 8008c46:	4631      	mov	r1, r6
 8008c48:	4658      	mov	r0, fp
 8008c4a:	f7ff faa3 	bl	8008194 <quorem>
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4605      	mov	r5, r0
 8008c52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c56:	4658      	mov	r0, fp
 8008c58:	f000 ff7e 	bl	8009b58 <__mcmp>
 8008c5c:	463a      	mov	r2, r7
 8008c5e:	9002      	str	r0, [sp, #8]
 8008c60:	4631      	mov	r1, r6
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 ff92 	bl	8009b8c <__mdiff>
 8008c68:	68c3      	ldr	r3, [r0, #12]
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	bb03      	cbnz	r3, 8008cb0 <_dtoa_r+0xa00>
 8008c6e:	4601      	mov	r1, r0
 8008c70:	9009      	str	r0, [sp, #36]	; 0x24
 8008c72:	4658      	mov	r0, fp
 8008c74:	f000 ff70 	bl	8009b58 <__mcmp>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4620      	mov	r0, r4
 8008c80:	9309      	str	r3, [sp, #36]	; 0x24
 8008c82:	f000 fd4b 	bl	800971c <_Bfree>
 8008c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c88:	b9a3      	cbnz	r3, 8008cb4 <_dtoa_r+0xa04>
 8008c8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c8c:	b992      	cbnz	r2, 8008cb4 <_dtoa_r+0xa04>
 8008c8e:	9a08      	ldr	r2, [sp, #32]
 8008c90:	b982      	cbnz	r2, 8008cb4 <_dtoa_r+0xa04>
 8008c92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c96:	d029      	beq.n	8008cec <_dtoa_r+0xa3c>
 8008c98:	9b02      	ldr	r3, [sp, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dd01      	ble.n	8008ca2 <_dtoa_r+0x9f2>
 8008c9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	1c5d      	adds	r5, r3, #1
 8008ca6:	f883 8000 	strb.w	r8, [r3]
 8008caa:	e784      	b.n	8008bb6 <_dtoa_r+0x906>
 8008cac:	4638      	mov	r0, r7
 8008cae:	e7c2      	b.n	8008c36 <_dtoa_r+0x986>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e7e3      	b.n	8008c7c <_dtoa_r+0x9cc>
 8008cb4:	9a02      	ldr	r2, [sp, #8]
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	db04      	blt.n	8008cc4 <_dtoa_r+0xa14>
 8008cba:	d123      	bne.n	8008d04 <_dtoa_r+0xa54>
 8008cbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008cbe:	bb0a      	cbnz	r2, 8008d04 <_dtoa_r+0xa54>
 8008cc0:	9a08      	ldr	r2, [sp, #32]
 8008cc2:	b9fa      	cbnz	r2, 8008d04 <_dtoa_r+0xa54>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	ddec      	ble.n	8008ca2 <_dtoa_r+0x9f2>
 8008cc8:	4659      	mov	r1, fp
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 feef 	bl	8009ab0 <__lshift>
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4683      	mov	fp, r0
 8008cd6:	f000 ff3f 	bl	8009b58 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	dc03      	bgt.n	8008ce6 <_dtoa_r+0xa36>
 8008cde:	d1e0      	bne.n	8008ca2 <_dtoa_r+0x9f2>
 8008ce0:	f018 0f01 	tst.w	r8, #1
 8008ce4:	d0dd      	beq.n	8008ca2 <_dtoa_r+0x9f2>
 8008ce6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008cea:	d1d8      	bne.n	8008c9e <_dtoa_r+0x9ee>
 8008cec:	9b07      	ldr	r3, [sp, #28]
 8008cee:	9a07      	ldr	r2, [sp, #28]
 8008cf0:	1c5d      	adds	r5, r3, #1
 8008cf2:	2339      	movs	r3, #57	; 0x39
 8008cf4:	7013      	strb	r3, [r2, #0]
 8008cf6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cfa:	1e6a      	subs	r2, r5, #1
 8008cfc:	2b39      	cmp	r3, #57	; 0x39
 8008cfe:	d04d      	beq.n	8008d9c <_dtoa_r+0xaec>
 8008d00:	3301      	adds	r3, #1
 8008d02:	e052      	b.n	8008daa <_dtoa_r+0xafa>
 8008d04:	9a07      	ldr	r2, [sp, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f102 0501 	add.w	r5, r2, #1
 8008d0c:	dd06      	ble.n	8008d1c <_dtoa_r+0xa6c>
 8008d0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008d12:	d0eb      	beq.n	8008cec <_dtoa_r+0xa3c>
 8008d14:	f108 0801 	add.w	r8, r8, #1
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	e7c4      	b.n	8008ca6 <_dtoa_r+0x9f6>
 8008d1c:	9b06      	ldr	r3, [sp, #24]
 8008d1e:	9a04      	ldr	r2, [sp, #16]
 8008d20:	1aeb      	subs	r3, r5, r3
 8008d22:	4293      	cmp	r3, r2
 8008d24:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008d28:	d021      	beq.n	8008d6e <_dtoa_r+0xabe>
 8008d2a:	4659      	mov	r1, fp
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	220a      	movs	r2, #10
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fd0a 	bl	800974a <__multadd>
 8008d36:	45b9      	cmp	r9, r7
 8008d38:	4683      	mov	fp, r0
 8008d3a:	f04f 0300 	mov.w	r3, #0
 8008d3e:	f04f 020a 	mov.w	r2, #10
 8008d42:	4649      	mov	r1, r9
 8008d44:	4620      	mov	r0, r4
 8008d46:	d105      	bne.n	8008d54 <_dtoa_r+0xaa4>
 8008d48:	f000 fcff 	bl	800974a <__multadd>
 8008d4c:	4681      	mov	r9, r0
 8008d4e:	4607      	mov	r7, r0
 8008d50:	9507      	str	r5, [sp, #28]
 8008d52:	e778      	b.n	8008c46 <_dtoa_r+0x996>
 8008d54:	f000 fcf9 	bl	800974a <__multadd>
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4681      	mov	r9, r0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	220a      	movs	r2, #10
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fcf2 	bl	800974a <__multadd>
 8008d66:	4607      	mov	r7, r0
 8008d68:	e7f2      	b.n	8008d50 <_dtoa_r+0xaa0>
 8008d6a:	f04f 0900 	mov.w	r9, #0
 8008d6e:	4659      	mov	r1, fp
 8008d70:	2201      	movs	r2, #1
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fe9c 	bl	8009ab0 <__lshift>
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4683      	mov	fp, r0
 8008d7c:	f000 feec 	bl	8009b58 <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dcb8      	bgt.n	8008cf6 <_dtoa_r+0xa46>
 8008d84:	d102      	bne.n	8008d8c <_dtoa_r+0xadc>
 8008d86:	f018 0f01 	tst.w	r8, #1
 8008d8a:	d1b4      	bne.n	8008cf6 <_dtoa_r+0xa46>
 8008d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d90:	1e6a      	subs	r2, r5, #1
 8008d92:	2b30      	cmp	r3, #48	; 0x30
 8008d94:	f47f af0f 	bne.w	8008bb6 <_dtoa_r+0x906>
 8008d98:	4615      	mov	r5, r2
 8008d9a:	e7f7      	b.n	8008d8c <_dtoa_r+0xadc>
 8008d9c:	9b06      	ldr	r3, [sp, #24]
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d105      	bne.n	8008dae <_dtoa_r+0xafe>
 8008da2:	2331      	movs	r3, #49	; 0x31
 8008da4:	9a06      	ldr	r2, [sp, #24]
 8008da6:	f10a 0a01 	add.w	sl, sl, #1
 8008daa:	7013      	strb	r3, [r2, #0]
 8008dac:	e703      	b.n	8008bb6 <_dtoa_r+0x906>
 8008dae:	4615      	mov	r5, r2
 8008db0:	e7a1      	b.n	8008cf6 <_dtoa_r+0xa46>
 8008db2:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <_dtoa_r+0xb60>)
 8008db4:	f7ff bae1 	b.w	800837a <_dtoa_r+0xca>
 8008db8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f47f aabb 	bne.w	8008336 <_dtoa_r+0x86>
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <_dtoa_r+0xb64>)
 8008dc2:	f7ff bada 	b.w	800837a <_dtoa_r+0xca>
 8008dc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	f77f ae3f 	ble.w	8008a4c <_dtoa_r+0x79c>
 8008dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dd0:	9308      	str	r3, [sp, #32]
 8008dd2:	e653      	b.n	8008a7c <_dtoa_r+0x7cc>
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dc03      	bgt.n	8008de2 <_dtoa_r+0xb32>
 8008dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	f73f aed5 	bgt.w	8008b8c <_dtoa_r+0x8dc>
 8008de2:	9d06      	ldr	r5, [sp, #24]
 8008de4:	4631      	mov	r1, r6
 8008de6:	4658      	mov	r0, fp
 8008de8:	f7ff f9d4 	bl	8008194 <quorem>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008df2:	f805 8b01 	strb.w	r8, [r5], #1
 8008df6:	9a04      	ldr	r2, [sp, #16]
 8008df8:	1aeb      	subs	r3, r5, r3
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	ddb5      	ble.n	8008d6a <_dtoa_r+0xaba>
 8008dfe:	4659      	mov	r1, fp
 8008e00:	2300      	movs	r3, #0
 8008e02:	220a      	movs	r2, #10
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fca0 	bl	800974a <__multadd>
 8008e0a:	4683      	mov	fp, r0
 8008e0c:	e7ea      	b.n	8008de4 <_dtoa_r+0xb34>
 8008e0e:	bf00      	nop
 8008e10:	0800b281 	.word	0x0800b281
 8008e14:	0800d545 	.word	0x0800d545

08008e18 <std>:
 8008e18:	2300      	movs	r3, #0
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e22:	6083      	str	r3, [r0, #8]
 8008e24:	8181      	strh	r1, [r0, #12]
 8008e26:	6643      	str	r3, [r0, #100]	; 0x64
 8008e28:	81c2      	strh	r2, [r0, #14]
 8008e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e2e:	6183      	str	r3, [r0, #24]
 8008e30:	4619      	mov	r1, r3
 8008e32:	2208      	movs	r2, #8
 8008e34:	305c      	adds	r0, #92	; 0x5c
 8008e36:	f7fd fba9 	bl	800658c <memset>
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <std+0x38>)
 8008e3c:	6224      	str	r4, [r4, #32]
 8008e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <std+0x3c>)
 8008e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e44:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <std+0x40>)
 8008e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e48:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <std+0x44>)
 8008e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	bf00      	nop
 8008e50:	080072c9 	.word	0x080072c9
 8008e54:	080072ef 	.word	0x080072ef
 8008e58:	08007327 	.word	0x08007327
 8008e5c:	0800734b 	.word	0x0800734b

08008e60 <_cleanup_r>:
 8008e60:	4901      	ldr	r1, [pc, #4]	; (8008e68 <_cleanup_r+0x8>)
 8008e62:	f000 b885 	b.w	8008f70 <_fwalk_reent>
 8008e66:	bf00      	nop
 8008e68:	0800b02d 	.word	0x0800b02d

08008e6c <__sfmoreglue>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	2568      	movs	r5, #104	; 0x68
 8008e70:	1e4a      	subs	r2, r1, #1
 8008e72:	4355      	muls	r5, r2
 8008e74:	460e      	mov	r6, r1
 8008e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e7a:	f001 f86d 	bl	8009f58 <_malloc_r>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	b140      	cbz	r0, 8008e94 <__sfmoreglue+0x28>
 8008e82:	2100      	movs	r1, #0
 8008e84:	e9c0 1600 	strd	r1, r6, [r0]
 8008e88:	300c      	adds	r0, #12
 8008e8a:	60a0      	str	r0, [r4, #8]
 8008e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e90:	f7fd fb7c 	bl	800658c <memset>
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}

08008e98 <__sinit>:
 8008e98:	6983      	ldr	r3, [r0, #24]
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	bb33      	cbnz	r3, 8008eee <__sinit+0x56>
 8008ea0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008ea4:	6503      	str	r3, [r0, #80]	; 0x50
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <__sinit+0x58>)
 8008ea8:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <__sinit+0x5c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6282      	str	r2, [r0, #40]	; 0x28
 8008eae:	4298      	cmp	r0, r3
 8008eb0:	bf04      	itt	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	6183      	streq	r3, [r0, #24]
 8008eb6:	f000 f81f 	bl	8008ef8 <__sfp>
 8008eba:	6060      	str	r0, [r4, #4]
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f81b 	bl	8008ef8 <__sfp>
 8008ec2:	60a0      	str	r0, [r4, #8]
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 f817 	bl	8008ef8 <__sfp>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	60e0      	str	r0, [r4, #12]
 8008ece:	2104      	movs	r1, #4
 8008ed0:	6860      	ldr	r0, [r4, #4]
 8008ed2:	f7ff ffa1 	bl	8008e18 <std>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2109      	movs	r1, #9
 8008eda:	68a0      	ldr	r0, [r4, #8]
 8008edc:	f7ff ff9c 	bl	8008e18 <std>
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	2112      	movs	r1, #18
 8008ee4:	68e0      	ldr	r0, [r4, #12]
 8008ee6:	f7ff ff97 	bl	8008e18 <std>
 8008eea:	2301      	movs	r3, #1
 8008eec:	61a3      	str	r3, [r4, #24]
 8008eee:	bd10      	pop	{r4, pc}
 8008ef0:	0800d490 	.word	0x0800d490
 8008ef4:	08008e61 	.word	0x08008e61

08008ef8 <__sfp>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	4b1b      	ldr	r3, [pc, #108]	; (8008f68 <__sfp+0x70>)
 8008efc:	4607      	mov	r7, r0
 8008efe:	681e      	ldr	r6, [r3, #0]
 8008f00:	69b3      	ldr	r3, [r6, #24]
 8008f02:	b913      	cbnz	r3, 8008f0a <__sfp+0x12>
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ffc7 	bl	8008e98 <__sinit>
 8008f0a:	3648      	adds	r6, #72	; 0x48
 8008f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	d503      	bpl.n	8008f1c <__sfp+0x24>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	b133      	cbz	r3, 8008f26 <__sfp+0x2e>
 8008f18:	6836      	ldr	r6, [r6, #0]
 8008f1a:	e7f7      	b.n	8008f0c <__sfp+0x14>
 8008f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f20:	b16d      	cbz	r5, 8008f3e <__sfp+0x46>
 8008f22:	3468      	adds	r4, #104	; 0x68
 8008f24:	e7f4      	b.n	8008f10 <__sfp+0x18>
 8008f26:	2104      	movs	r1, #4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ff9f 	bl	8008e6c <__sfmoreglue>
 8008f2e:	6030      	str	r0, [r6, #0]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1f1      	bne.n	8008f18 <__sfp+0x20>
 8008f34:	230c      	movs	r3, #12
 8008f36:	4604      	mov	r4, r0
 8008f38:	603b      	str	r3, [r7, #0]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <__sfp+0x74>)
 8008f40:	6665      	str	r5, [r4, #100]	; 0x64
 8008f42:	e9c4 5500 	strd	r5, r5, [r4]
 8008f46:	60a5      	str	r5, [r4, #8]
 8008f48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008f4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008f50:	2208      	movs	r2, #8
 8008f52:	4629      	mov	r1, r5
 8008f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f58:	f7fd fb18 	bl	800658c <memset>
 8008f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f64:	e7e9      	b.n	8008f3a <__sfp+0x42>
 8008f66:	bf00      	nop
 8008f68:	0800d490 	.word	0x0800d490
 8008f6c:	ffff0001 	.word	0xffff0001

08008f70 <_fwalk_reent>:
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	2600      	movs	r6, #0
 8008f7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f7e:	b914      	cbnz	r4, 8008f86 <_fwalk_reent+0x16>
 8008f80:	4630      	mov	r0, r6
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008f8a:	3f01      	subs	r7, #1
 8008f8c:	d501      	bpl.n	8008f92 <_fwalk_reent+0x22>
 8008f8e:	6824      	ldr	r4, [r4, #0]
 8008f90:	e7f5      	b.n	8008f7e <_fwalk_reent+0xe>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d907      	bls.n	8008fa8 <_fwalk_reent+0x38>
 8008f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	d003      	beq.n	8008fa8 <_fwalk_reent+0x38>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	47c8      	blx	r9
 8008fa6:	4306      	orrs	r6, r0
 8008fa8:	3568      	adds	r5, #104	; 0x68
 8008faa:	e7ee      	b.n	8008f8a <_fwalk_reent+0x1a>

08008fac <rshift>:
 8008fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fae:	6906      	ldr	r6, [r0, #16]
 8008fb0:	114b      	asrs	r3, r1, #5
 8008fb2:	429e      	cmp	r6, r3
 8008fb4:	f100 0414 	add.w	r4, r0, #20
 8008fb8:	dd31      	ble.n	800901e <rshift+0x72>
 8008fba:	f011 011f 	ands.w	r1, r1, #31
 8008fbe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008fc2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008fc6:	d108      	bne.n	8008fda <rshift+0x2e>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	42b2      	cmp	r2, r6
 8008fcc:	460b      	mov	r3, r1
 8008fce:	d211      	bcs.n	8008ff4 <rshift+0x48>
 8008fd0:	f852 3b04 	ldr.w	r3, [r2], #4
 8008fd4:	f841 3b04 	str.w	r3, [r1], #4
 8008fd8:	e7f7      	b.n	8008fca <rshift+0x1e>
 8008fda:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008fde:	4623      	mov	r3, r4
 8008fe0:	f1c1 0c20 	rsb	ip, r1, #32
 8008fe4:	40cd      	lsrs	r5, r1
 8008fe6:	3204      	adds	r2, #4
 8008fe8:	42b2      	cmp	r2, r6
 8008fea:	4617      	mov	r7, r2
 8008fec:	d30d      	bcc.n	800900a <rshift+0x5e>
 8008fee:	601d      	str	r5, [r3, #0]
 8008ff0:	b105      	cbz	r5, 8008ff4 <rshift+0x48>
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	eba3 0204 	sub.w	r2, r3, r4
 8008ffa:	bf08      	it	eq
 8008ffc:	2300      	moveq	r3, #0
 8008ffe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009002:	6102      	str	r2, [r0, #16]
 8009004:	bf08      	it	eq
 8009006:	6143      	streq	r3, [r0, #20]
 8009008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900a:	683f      	ldr	r7, [r7, #0]
 800900c:	fa07 f70c 	lsl.w	r7, r7, ip
 8009010:	433d      	orrs	r5, r7
 8009012:	f843 5b04 	str.w	r5, [r3], #4
 8009016:	f852 5b04 	ldr.w	r5, [r2], #4
 800901a:	40cd      	lsrs	r5, r1
 800901c:	e7e4      	b.n	8008fe8 <rshift+0x3c>
 800901e:	4623      	mov	r3, r4
 8009020:	e7e8      	b.n	8008ff4 <rshift+0x48>

08009022 <__hexdig_fun>:
 8009022:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009026:	2b09      	cmp	r3, #9
 8009028:	d802      	bhi.n	8009030 <__hexdig_fun+0xe>
 800902a:	3820      	subs	r0, #32
 800902c:	b2c0      	uxtb	r0, r0
 800902e:	4770      	bx	lr
 8009030:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009034:	2b05      	cmp	r3, #5
 8009036:	d801      	bhi.n	800903c <__hexdig_fun+0x1a>
 8009038:	3847      	subs	r0, #71	; 0x47
 800903a:	e7f7      	b.n	800902c <__hexdig_fun+0xa>
 800903c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009040:	2b05      	cmp	r3, #5
 8009042:	d801      	bhi.n	8009048 <__hexdig_fun+0x26>
 8009044:	3827      	subs	r0, #39	; 0x27
 8009046:	e7f1      	b.n	800902c <__hexdig_fun+0xa>
 8009048:	2000      	movs	r0, #0
 800904a:	4770      	bx	lr

0800904c <__gethex>:
 800904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009050:	b08b      	sub	sp, #44	; 0x2c
 8009052:	9002      	str	r0, [sp, #8]
 8009054:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009056:	468a      	mov	sl, r1
 8009058:	4690      	mov	r8, r2
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	f000 fae0 	bl	8009620 <__localeconv_l>
 8009060:	6803      	ldr	r3, [r0, #0]
 8009062:	f04f 0b00 	mov.w	fp, #0
 8009066:	4618      	mov	r0, r3
 8009068:	9303      	str	r3, [sp, #12]
 800906a:	f7f7 f871 	bl	8000150 <strlen>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	9001      	str	r0, [sp, #4]
 8009072:	4403      	add	r3, r0
 8009074:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f8da 3000 	ldr.w	r3, [sl]
 800907e:	3302      	adds	r3, #2
 8009080:	461f      	mov	r7, r3
 8009082:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009086:	2830      	cmp	r0, #48	; 0x30
 8009088:	d06c      	beq.n	8009164 <__gethex+0x118>
 800908a:	f7ff ffca 	bl	8009022 <__hexdig_fun>
 800908e:	4604      	mov	r4, r0
 8009090:	2800      	cmp	r0, #0
 8009092:	d16a      	bne.n	800916a <__gethex+0x11e>
 8009094:	9a01      	ldr	r2, [sp, #4]
 8009096:	9903      	ldr	r1, [sp, #12]
 8009098:	4638      	mov	r0, r7
 800909a:	f001 fd9c 	bl	800abd6 <strncmp>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d166      	bne.n	8009170 <__gethex+0x124>
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	5cf8      	ldrb	r0, [r7, r3]
 80090a6:	18fe      	adds	r6, r7, r3
 80090a8:	f7ff ffbb 	bl	8009022 <__hexdig_fun>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d062      	beq.n	8009176 <__gethex+0x12a>
 80090b0:	4633      	mov	r3, r6
 80090b2:	7818      	ldrb	r0, [r3, #0]
 80090b4:	461f      	mov	r7, r3
 80090b6:	2830      	cmp	r0, #48	; 0x30
 80090b8:	f103 0301 	add.w	r3, r3, #1
 80090bc:	d0f9      	beq.n	80090b2 <__gethex+0x66>
 80090be:	f7ff ffb0 	bl	8009022 <__hexdig_fun>
 80090c2:	fab0 f580 	clz	r5, r0
 80090c6:	4634      	mov	r4, r6
 80090c8:	f04f 0b01 	mov.w	fp, #1
 80090cc:	096d      	lsrs	r5, r5, #5
 80090ce:	463a      	mov	r2, r7
 80090d0:	4616      	mov	r6, r2
 80090d2:	7830      	ldrb	r0, [r6, #0]
 80090d4:	3201      	adds	r2, #1
 80090d6:	f7ff ffa4 	bl	8009022 <__hexdig_fun>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d1f8      	bne.n	80090d0 <__gethex+0x84>
 80090de:	9a01      	ldr	r2, [sp, #4]
 80090e0:	9903      	ldr	r1, [sp, #12]
 80090e2:	4630      	mov	r0, r6
 80090e4:	f001 fd77 	bl	800abd6 <strncmp>
 80090e8:	b950      	cbnz	r0, 8009100 <__gethex+0xb4>
 80090ea:	b954      	cbnz	r4, 8009102 <__gethex+0xb6>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	18f4      	adds	r4, r6, r3
 80090f0:	4622      	mov	r2, r4
 80090f2:	4616      	mov	r6, r2
 80090f4:	7830      	ldrb	r0, [r6, #0]
 80090f6:	3201      	adds	r2, #1
 80090f8:	f7ff ff93 	bl	8009022 <__hexdig_fun>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d1f8      	bne.n	80090f2 <__gethex+0xa6>
 8009100:	b10c      	cbz	r4, 8009106 <__gethex+0xba>
 8009102:	1ba4      	subs	r4, r4, r6
 8009104:	00a4      	lsls	r4, r4, #2
 8009106:	7833      	ldrb	r3, [r6, #0]
 8009108:	2b50      	cmp	r3, #80	; 0x50
 800910a:	d001      	beq.n	8009110 <__gethex+0xc4>
 800910c:	2b70      	cmp	r3, #112	; 0x70
 800910e:	d140      	bne.n	8009192 <__gethex+0x146>
 8009110:	7873      	ldrb	r3, [r6, #1]
 8009112:	2b2b      	cmp	r3, #43	; 0x2b
 8009114:	d031      	beq.n	800917a <__gethex+0x12e>
 8009116:	2b2d      	cmp	r3, #45	; 0x2d
 8009118:	d033      	beq.n	8009182 <__gethex+0x136>
 800911a:	f04f 0900 	mov.w	r9, #0
 800911e:	1c71      	adds	r1, r6, #1
 8009120:	7808      	ldrb	r0, [r1, #0]
 8009122:	f7ff ff7e 	bl	8009022 <__hexdig_fun>
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b18      	cmp	r3, #24
 800912c:	d831      	bhi.n	8009192 <__gethex+0x146>
 800912e:	f1a0 0210 	sub.w	r2, r0, #16
 8009132:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009136:	f7ff ff74 	bl	8009022 <__hexdig_fun>
 800913a:	1e43      	subs	r3, r0, #1
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b18      	cmp	r3, #24
 8009140:	d922      	bls.n	8009188 <__gethex+0x13c>
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d000      	beq.n	800914a <__gethex+0xfe>
 8009148:	4252      	negs	r2, r2
 800914a:	4414      	add	r4, r2
 800914c:	f8ca 1000 	str.w	r1, [sl]
 8009150:	b30d      	cbz	r5, 8009196 <__gethex+0x14a>
 8009152:	f1bb 0f00 	cmp.w	fp, #0
 8009156:	bf0c      	ite	eq
 8009158:	2706      	moveq	r7, #6
 800915a:	2700      	movne	r7, #0
 800915c:	4638      	mov	r0, r7
 800915e:	b00b      	add	sp, #44	; 0x2c
 8009160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009164:	f10b 0b01 	add.w	fp, fp, #1
 8009168:	e78a      	b.n	8009080 <__gethex+0x34>
 800916a:	2500      	movs	r5, #0
 800916c:	462c      	mov	r4, r5
 800916e:	e7ae      	b.n	80090ce <__gethex+0x82>
 8009170:	463e      	mov	r6, r7
 8009172:	2501      	movs	r5, #1
 8009174:	e7c7      	b.n	8009106 <__gethex+0xba>
 8009176:	4604      	mov	r4, r0
 8009178:	e7fb      	b.n	8009172 <__gethex+0x126>
 800917a:	f04f 0900 	mov.w	r9, #0
 800917e:	1cb1      	adds	r1, r6, #2
 8009180:	e7ce      	b.n	8009120 <__gethex+0xd4>
 8009182:	f04f 0901 	mov.w	r9, #1
 8009186:	e7fa      	b.n	800917e <__gethex+0x132>
 8009188:	230a      	movs	r3, #10
 800918a:	fb03 0202 	mla	r2, r3, r2, r0
 800918e:	3a10      	subs	r2, #16
 8009190:	e7cf      	b.n	8009132 <__gethex+0xe6>
 8009192:	4631      	mov	r1, r6
 8009194:	e7da      	b.n	800914c <__gethex+0x100>
 8009196:	4629      	mov	r1, r5
 8009198:	1bf3      	subs	r3, r6, r7
 800919a:	3b01      	subs	r3, #1
 800919c:	2b07      	cmp	r3, #7
 800919e:	dc49      	bgt.n	8009234 <__gethex+0x1e8>
 80091a0:	9802      	ldr	r0, [sp, #8]
 80091a2:	f000 fa87 	bl	80096b4 <_Balloc>
 80091a6:	f04f 0b00 	mov.w	fp, #0
 80091aa:	4605      	mov	r5, r0
 80091ac:	46da      	mov	sl, fp
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	f100 0914 	add.w	r9, r0, #20
 80091b4:	f1c3 0301 	rsb	r3, r3, #1
 80091b8:	f8cd 9010 	str.w	r9, [sp, #16]
 80091bc:	9308      	str	r3, [sp, #32]
 80091be:	42b7      	cmp	r7, r6
 80091c0:	d33b      	bcc.n	800923a <__gethex+0x1ee>
 80091c2:	9804      	ldr	r0, [sp, #16]
 80091c4:	f840 ab04 	str.w	sl, [r0], #4
 80091c8:	eba0 0009 	sub.w	r0, r0, r9
 80091cc:	1080      	asrs	r0, r0, #2
 80091ce:	6128      	str	r0, [r5, #16]
 80091d0:	0147      	lsls	r7, r0, #5
 80091d2:	4650      	mov	r0, sl
 80091d4:	f000 fb32 	bl	800983c <__hi0bits>
 80091d8:	f8d8 6000 	ldr.w	r6, [r8]
 80091dc:	1a3f      	subs	r7, r7, r0
 80091de:	42b7      	cmp	r7, r6
 80091e0:	dd64      	ble.n	80092ac <__gethex+0x260>
 80091e2:	1bbf      	subs	r7, r7, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 fe3b 	bl	8009e62 <__any_on>
 80091ec:	4682      	mov	sl, r0
 80091ee:	b178      	cbz	r0, 8009210 <__gethex+0x1c4>
 80091f0:	f04f 0a01 	mov.w	sl, #1
 80091f4:	1e7b      	subs	r3, r7, #1
 80091f6:	1159      	asrs	r1, r3, #5
 80091f8:	f003 021f 	and.w	r2, r3, #31
 80091fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009200:	fa0a f202 	lsl.w	r2, sl, r2
 8009204:	420a      	tst	r2, r1
 8009206:	d003      	beq.n	8009210 <__gethex+0x1c4>
 8009208:	4553      	cmp	r3, sl
 800920a:	dc46      	bgt.n	800929a <__gethex+0x24e>
 800920c:	f04f 0a02 	mov.w	sl, #2
 8009210:	4639      	mov	r1, r7
 8009212:	4628      	mov	r0, r5
 8009214:	f7ff feca 	bl	8008fac <rshift>
 8009218:	443c      	add	r4, r7
 800921a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800921e:	42a3      	cmp	r3, r4
 8009220:	da52      	bge.n	80092c8 <__gethex+0x27c>
 8009222:	4629      	mov	r1, r5
 8009224:	9802      	ldr	r0, [sp, #8]
 8009226:	f000 fa79 	bl	800971c <_Bfree>
 800922a:	2300      	movs	r3, #0
 800922c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800922e:	27a3      	movs	r7, #163	; 0xa3
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	e793      	b.n	800915c <__gethex+0x110>
 8009234:	3101      	adds	r1, #1
 8009236:	105b      	asrs	r3, r3, #1
 8009238:	e7b0      	b.n	800919c <__gethex+0x150>
 800923a:	1e73      	subs	r3, r6, #1
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	9a07      	ldr	r2, [sp, #28]
 8009240:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <__gethex+0x22e>
 8009248:	f1bb 0f20 	cmp.w	fp, #32
 800924c:	d107      	bne.n	800925e <__gethex+0x212>
 800924e:	9b04      	ldr	r3, [sp, #16]
 8009250:	f8c3 a000 	str.w	sl, [r3]
 8009254:	f04f 0a00 	mov.w	sl, #0
 8009258:	46d3      	mov	fp, sl
 800925a:	3304      	adds	r3, #4
 800925c:	9304      	str	r3, [sp, #16]
 800925e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009262:	f7ff fede 	bl	8009022 <__hexdig_fun>
 8009266:	f000 000f 	and.w	r0, r0, #15
 800926a:	fa00 f00b 	lsl.w	r0, r0, fp
 800926e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009272:	f10b 0b04 	add.w	fp, fp, #4
 8009276:	9b05      	ldr	r3, [sp, #20]
 8009278:	e00d      	b.n	8009296 <__gethex+0x24a>
 800927a:	9b05      	ldr	r3, [sp, #20]
 800927c:	9a08      	ldr	r2, [sp, #32]
 800927e:	4413      	add	r3, r2
 8009280:	42bb      	cmp	r3, r7
 8009282:	d3e1      	bcc.n	8009248 <__gethex+0x1fc>
 8009284:	4618      	mov	r0, r3
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	9903      	ldr	r1, [sp, #12]
 800928a:	9309      	str	r3, [sp, #36]	; 0x24
 800928c:	f001 fca3 	bl	800abd6 <strncmp>
 8009290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009292:	2800      	cmp	r0, #0
 8009294:	d1d8      	bne.n	8009248 <__gethex+0x1fc>
 8009296:	461e      	mov	r6, r3
 8009298:	e791      	b.n	80091be <__gethex+0x172>
 800929a:	1eb9      	subs	r1, r7, #2
 800929c:	4628      	mov	r0, r5
 800929e:	f000 fde0 	bl	8009e62 <__any_on>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d0b2      	beq.n	800920c <__gethex+0x1c0>
 80092a6:	f04f 0a03 	mov.w	sl, #3
 80092aa:	e7b1      	b.n	8009210 <__gethex+0x1c4>
 80092ac:	da09      	bge.n	80092c2 <__gethex+0x276>
 80092ae:	1bf7      	subs	r7, r6, r7
 80092b0:	4629      	mov	r1, r5
 80092b2:	463a      	mov	r2, r7
 80092b4:	9802      	ldr	r0, [sp, #8]
 80092b6:	f000 fbfb 	bl	8009ab0 <__lshift>
 80092ba:	4605      	mov	r5, r0
 80092bc:	1be4      	subs	r4, r4, r7
 80092be:	f100 0914 	add.w	r9, r0, #20
 80092c2:	f04f 0a00 	mov.w	sl, #0
 80092c6:	e7a8      	b.n	800921a <__gethex+0x1ce>
 80092c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092cc:	42a0      	cmp	r0, r4
 80092ce:	dd6b      	ble.n	80093a8 <__gethex+0x35c>
 80092d0:	1b04      	subs	r4, r0, r4
 80092d2:	42a6      	cmp	r6, r4
 80092d4:	dc2e      	bgt.n	8009334 <__gethex+0x2e8>
 80092d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d022      	beq.n	8009324 <__gethex+0x2d8>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d024      	beq.n	800932c <__gethex+0x2e0>
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d115      	bne.n	8009312 <__gethex+0x2c6>
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	d113      	bne.n	8009312 <__gethex+0x2c6>
 80092ea:	2e01      	cmp	r6, #1
 80092ec:	dc0b      	bgt.n	8009306 <__gethex+0x2ba>
 80092ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092f2:	9a06      	ldr	r2, [sp, #24]
 80092f4:	2762      	movs	r7, #98	; 0x62
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	2301      	movs	r3, #1
 80092fa:	612b      	str	r3, [r5, #16]
 80092fc:	f8c9 3000 	str.w	r3, [r9]
 8009300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009302:	601d      	str	r5, [r3, #0]
 8009304:	e72a      	b.n	800915c <__gethex+0x110>
 8009306:	1e71      	subs	r1, r6, #1
 8009308:	4628      	mov	r0, r5
 800930a:	f000 fdaa 	bl	8009e62 <__any_on>
 800930e:	2800      	cmp	r0, #0
 8009310:	d1ed      	bne.n	80092ee <__gethex+0x2a2>
 8009312:	4629      	mov	r1, r5
 8009314:	9802      	ldr	r0, [sp, #8]
 8009316:	f000 fa01 	bl	800971c <_Bfree>
 800931a:	2300      	movs	r3, #0
 800931c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800931e:	2750      	movs	r7, #80	; 0x50
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e71b      	b.n	800915c <__gethex+0x110>
 8009324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009326:	2b00      	cmp	r3, #0
 8009328:	d0e1      	beq.n	80092ee <__gethex+0x2a2>
 800932a:	e7f2      	b.n	8009312 <__gethex+0x2c6>
 800932c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1dd      	bne.n	80092ee <__gethex+0x2a2>
 8009332:	e7ee      	b.n	8009312 <__gethex+0x2c6>
 8009334:	1e67      	subs	r7, r4, #1
 8009336:	f1ba 0f00 	cmp.w	sl, #0
 800933a:	d132      	bne.n	80093a2 <__gethex+0x356>
 800933c:	b127      	cbz	r7, 8009348 <__gethex+0x2fc>
 800933e:	4639      	mov	r1, r7
 8009340:	4628      	mov	r0, r5
 8009342:	f000 fd8e 	bl	8009e62 <__any_on>
 8009346:	4682      	mov	sl, r0
 8009348:	2301      	movs	r3, #1
 800934a:	117a      	asrs	r2, r7, #5
 800934c:	f007 071f 	and.w	r7, r7, #31
 8009350:	fa03 f707 	lsl.w	r7, r3, r7
 8009354:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009358:	4621      	mov	r1, r4
 800935a:	421f      	tst	r7, r3
 800935c:	f04f 0702 	mov.w	r7, #2
 8009360:	4628      	mov	r0, r5
 8009362:	bf18      	it	ne
 8009364:	f04a 0a02 	orrne.w	sl, sl, #2
 8009368:	1b36      	subs	r6, r6, r4
 800936a:	f7ff fe1f 	bl	8008fac <rshift>
 800936e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009372:	f1ba 0f00 	cmp.w	sl, #0
 8009376:	d048      	beq.n	800940a <__gethex+0x3be>
 8009378:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d015      	beq.n	80093ac <__gethex+0x360>
 8009380:	2b03      	cmp	r3, #3
 8009382:	d017      	beq.n	80093b4 <__gethex+0x368>
 8009384:	2b01      	cmp	r3, #1
 8009386:	d109      	bne.n	800939c <__gethex+0x350>
 8009388:	f01a 0f02 	tst.w	sl, #2
 800938c:	d006      	beq.n	800939c <__gethex+0x350>
 800938e:	f8d9 3000 	ldr.w	r3, [r9]
 8009392:	ea4a 0a03 	orr.w	sl, sl, r3
 8009396:	f01a 0f01 	tst.w	sl, #1
 800939a:	d10e      	bne.n	80093ba <__gethex+0x36e>
 800939c:	f047 0710 	orr.w	r7, r7, #16
 80093a0:	e033      	b.n	800940a <__gethex+0x3be>
 80093a2:	f04f 0a01 	mov.w	sl, #1
 80093a6:	e7cf      	b.n	8009348 <__gethex+0x2fc>
 80093a8:	2701      	movs	r7, #1
 80093aa:	e7e2      	b.n	8009372 <__gethex+0x326>
 80093ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ae:	f1c3 0301 	rsb	r3, r3, #1
 80093b2:	9315      	str	r3, [sp, #84]	; 0x54
 80093b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0f0      	beq.n	800939c <__gethex+0x350>
 80093ba:	f04f 0c00 	mov.w	ip, #0
 80093be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80093c2:	f105 0314 	add.w	r3, r5, #20
 80093c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80093ca:	eb03 010a 	add.w	r1, r3, sl
 80093ce:	4618      	mov	r0, r3
 80093d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093d8:	d01c      	beq.n	8009414 <__gethex+0x3c8>
 80093da:	3201      	adds	r2, #1
 80093dc:	6002      	str	r2, [r0, #0]
 80093de:	2f02      	cmp	r7, #2
 80093e0:	f105 0314 	add.w	r3, r5, #20
 80093e4:	d138      	bne.n	8009458 <__gethex+0x40c>
 80093e6:	f8d8 2000 	ldr.w	r2, [r8]
 80093ea:	3a01      	subs	r2, #1
 80093ec:	42b2      	cmp	r2, r6
 80093ee:	d10a      	bne.n	8009406 <__gethex+0x3ba>
 80093f0:	2201      	movs	r2, #1
 80093f2:	1171      	asrs	r1, r6, #5
 80093f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093f8:	f006 061f 	and.w	r6, r6, #31
 80093fc:	fa02 f606 	lsl.w	r6, r2, r6
 8009400:	421e      	tst	r6, r3
 8009402:	bf18      	it	ne
 8009404:	4617      	movne	r7, r2
 8009406:	f047 0720 	orr.w	r7, r7, #32
 800940a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800940c:	601d      	str	r5, [r3, #0]
 800940e:	9b06      	ldr	r3, [sp, #24]
 8009410:	601c      	str	r4, [r3, #0]
 8009412:	e6a3      	b.n	800915c <__gethex+0x110>
 8009414:	4299      	cmp	r1, r3
 8009416:	f843 cc04 	str.w	ip, [r3, #-4]
 800941a:	d8d8      	bhi.n	80093ce <__gethex+0x382>
 800941c:	68ab      	ldr	r3, [r5, #8]
 800941e:	4599      	cmp	r9, r3
 8009420:	db12      	blt.n	8009448 <__gethex+0x3fc>
 8009422:	6869      	ldr	r1, [r5, #4]
 8009424:	9802      	ldr	r0, [sp, #8]
 8009426:	3101      	adds	r1, #1
 8009428:	f000 f944 	bl	80096b4 <_Balloc>
 800942c:	4683      	mov	fp, r0
 800942e:	692a      	ldr	r2, [r5, #16]
 8009430:	f105 010c 	add.w	r1, r5, #12
 8009434:	3202      	adds	r2, #2
 8009436:	0092      	lsls	r2, r2, #2
 8009438:	300c      	adds	r0, #12
 800943a:	f7fd f883 	bl	8006544 <memcpy>
 800943e:	4629      	mov	r1, r5
 8009440:	9802      	ldr	r0, [sp, #8]
 8009442:	f000 f96b 	bl	800971c <_Bfree>
 8009446:	465d      	mov	r5, fp
 8009448:	692b      	ldr	r3, [r5, #16]
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	612a      	str	r2, [r5, #16]
 800944e:	2201      	movs	r2, #1
 8009450:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009454:	615a      	str	r2, [r3, #20]
 8009456:	e7c2      	b.n	80093de <__gethex+0x392>
 8009458:	692a      	ldr	r2, [r5, #16]
 800945a:	454a      	cmp	r2, r9
 800945c:	dd0b      	ble.n	8009476 <__gethex+0x42a>
 800945e:	2101      	movs	r1, #1
 8009460:	4628      	mov	r0, r5
 8009462:	f7ff fda3 	bl	8008fac <rshift>
 8009466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800946a:	3401      	adds	r4, #1
 800946c:	42a3      	cmp	r3, r4
 800946e:	f6ff aed8 	blt.w	8009222 <__gethex+0x1d6>
 8009472:	2701      	movs	r7, #1
 8009474:	e7c7      	b.n	8009406 <__gethex+0x3ba>
 8009476:	f016 061f 	ands.w	r6, r6, #31
 800947a:	d0fa      	beq.n	8009472 <__gethex+0x426>
 800947c:	449a      	add	sl, r3
 800947e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009482:	f000 f9db 	bl	800983c <__hi0bits>
 8009486:	f1c6 0620 	rsb	r6, r6, #32
 800948a:	42b0      	cmp	r0, r6
 800948c:	dbe7      	blt.n	800945e <__gethex+0x412>
 800948e:	e7f0      	b.n	8009472 <__gethex+0x426>

08009490 <L_shift>:
 8009490:	f1c2 0208 	rsb	r2, r2, #8
 8009494:	0092      	lsls	r2, r2, #2
 8009496:	b570      	push	{r4, r5, r6, lr}
 8009498:	f1c2 0620 	rsb	r6, r2, #32
 800949c:	6843      	ldr	r3, [r0, #4]
 800949e:	6804      	ldr	r4, [r0, #0]
 80094a0:	fa03 f506 	lsl.w	r5, r3, r6
 80094a4:	432c      	orrs	r4, r5
 80094a6:	40d3      	lsrs	r3, r2
 80094a8:	6004      	str	r4, [r0, #0]
 80094aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80094ae:	4288      	cmp	r0, r1
 80094b0:	d3f4      	bcc.n	800949c <L_shift+0xc>
 80094b2:	bd70      	pop	{r4, r5, r6, pc}

080094b4 <__match>:
 80094b4:	b530      	push	{r4, r5, lr}
 80094b6:	6803      	ldr	r3, [r0, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094be:	b914      	cbnz	r4, 80094c6 <__match+0x12>
 80094c0:	6003      	str	r3, [r0, #0]
 80094c2:	2001      	movs	r0, #1
 80094c4:	bd30      	pop	{r4, r5, pc}
 80094c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ce:	2d19      	cmp	r5, #25
 80094d0:	bf98      	it	ls
 80094d2:	3220      	addls	r2, #32
 80094d4:	42a2      	cmp	r2, r4
 80094d6:	d0f0      	beq.n	80094ba <__match+0x6>
 80094d8:	2000      	movs	r0, #0
 80094da:	e7f3      	b.n	80094c4 <__match+0x10>

080094dc <__hexnan>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	2500      	movs	r5, #0
 80094e2:	680b      	ldr	r3, [r1, #0]
 80094e4:	4682      	mov	sl, r0
 80094e6:	115f      	asrs	r7, r3, #5
 80094e8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80094ec:	f013 031f 	ands.w	r3, r3, #31
 80094f0:	bf18      	it	ne
 80094f2:	3704      	addne	r7, #4
 80094f4:	1f3e      	subs	r6, r7, #4
 80094f6:	4690      	mov	r8, r2
 80094f8:	46b1      	mov	r9, r6
 80094fa:	4634      	mov	r4, r6
 80094fc:	46ab      	mov	fp, r5
 80094fe:	b087      	sub	sp, #28
 8009500:	6801      	ldr	r1, [r0, #0]
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f847 5c04 	str.w	r5, [r7, #-4]
 8009508:	9502      	str	r5, [sp, #8]
 800950a:	784a      	ldrb	r2, [r1, #1]
 800950c:	1c4b      	adds	r3, r1, #1
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	b342      	cbz	r2, 8009564 <__hexnan+0x88>
 8009512:	4610      	mov	r0, r2
 8009514:	9105      	str	r1, [sp, #20]
 8009516:	9204      	str	r2, [sp, #16]
 8009518:	f7ff fd83 	bl	8009022 <__hexdig_fun>
 800951c:	2800      	cmp	r0, #0
 800951e:	d143      	bne.n	80095a8 <__hexnan+0xcc>
 8009520:	9a04      	ldr	r2, [sp, #16]
 8009522:	9905      	ldr	r1, [sp, #20]
 8009524:	2a20      	cmp	r2, #32
 8009526:	d818      	bhi.n	800955a <__hexnan+0x7e>
 8009528:	9b02      	ldr	r3, [sp, #8]
 800952a:	459b      	cmp	fp, r3
 800952c:	dd13      	ble.n	8009556 <__hexnan+0x7a>
 800952e:	454c      	cmp	r4, r9
 8009530:	d206      	bcs.n	8009540 <__hexnan+0x64>
 8009532:	2d07      	cmp	r5, #7
 8009534:	dc04      	bgt.n	8009540 <__hexnan+0x64>
 8009536:	462a      	mov	r2, r5
 8009538:	4649      	mov	r1, r9
 800953a:	4620      	mov	r0, r4
 800953c:	f7ff ffa8 	bl	8009490 <L_shift>
 8009540:	4544      	cmp	r4, r8
 8009542:	d944      	bls.n	80095ce <__hexnan+0xf2>
 8009544:	2300      	movs	r3, #0
 8009546:	f1a4 0904 	sub.w	r9, r4, #4
 800954a:	f844 3c04 	str.w	r3, [r4, #-4]
 800954e:	461d      	mov	r5, r3
 8009550:	464c      	mov	r4, r9
 8009552:	f8cd b008 	str.w	fp, [sp, #8]
 8009556:	9903      	ldr	r1, [sp, #12]
 8009558:	e7d7      	b.n	800950a <__hexnan+0x2e>
 800955a:	2a29      	cmp	r2, #41	; 0x29
 800955c:	d14a      	bne.n	80095f4 <__hexnan+0x118>
 800955e:	3102      	adds	r1, #2
 8009560:	f8ca 1000 	str.w	r1, [sl]
 8009564:	f1bb 0f00 	cmp.w	fp, #0
 8009568:	d044      	beq.n	80095f4 <__hexnan+0x118>
 800956a:	454c      	cmp	r4, r9
 800956c:	d206      	bcs.n	800957c <__hexnan+0xa0>
 800956e:	2d07      	cmp	r5, #7
 8009570:	dc04      	bgt.n	800957c <__hexnan+0xa0>
 8009572:	462a      	mov	r2, r5
 8009574:	4649      	mov	r1, r9
 8009576:	4620      	mov	r0, r4
 8009578:	f7ff ff8a 	bl	8009490 <L_shift>
 800957c:	4544      	cmp	r4, r8
 800957e:	d928      	bls.n	80095d2 <__hexnan+0xf6>
 8009580:	4643      	mov	r3, r8
 8009582:	f854 2b04 	ldr.w	r2, [r4], #4
 8009586:	42a6      	cmp	r6, r4
 8009588:	f843 2b04 	str.w	r2, [r3], #4
 800958c:	d2f9      	bcs.n	8009582 <__hexnan+0xa6>
 800958e:	2200      	movs	r2, #0
 8009590:	f843 2b04 	str.w	r2, [r3], #4
 8009594:	429e      	cmp	r6, r3
 8009596:	d2fb      	bcs.n	8009590 <__hexnan+0xb4>
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	b91b      	cbnz	r3, 80095a4 <__hexnan+0xc8>
 800959c:	4546      	cmp	r6, r8
 800959e:	d127      	bne.n	80095f0 <__hexnan+0x114>
 80095a0:	2301      	movs	r3, #1
 80095a2:	6033      	str	r3, [r6, #0]
 80095a4:	2005      	movs	r0, #5
 80095a6:	e026      	b.n	80095f6 <__hexnan+0x11a>
 80095a8:	3501      	adds	r5, #1
 80095aa:	2d08      	cmp	r5, #8
 80095ac:	f10b 0b01 	add.w	fp, fp, #1
 80095b0:	dd06      	ble.n	80095c0 <__hexnan+0xe4>
 80095b2:	4544      	cmp	r4, r8
 80095b4:	d9cf      	bls.n	8009556 <__hexnan+0x7a>
 80095b6:	2300      	movs	r3, #0
 80095b8:	2501      	movs	r5, #1
 80095ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80095be:	3c04      	subs	r4, #4
 80095c0:	6822      	ldr	r2, [r4, #0]
 80095c2:	f000 000f 	and.w	r0, r0, #15
 80095c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80095ca:	6020      	str	r0, [r4, #0]
 80095cc:	e7c3      	b.n	8009556 <__hexnan+0x7a>
 80095ce:	2508      	movs	r5, #8
 80095d0:	e7c1      	b.n	8009556 <__hexnan+0x7a>
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0df      	beq.n	8009598 <__hexnan+0xbc>
 80095d8:	f04f 32ff 	mov.w	r2, #4294967295
 80095dc:	f1c3 0320 	rsb	r3, r3, #32
 80095e0:	fa22 f303 	lsr.w	r3, r2, r3
 80095e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80095e8:	401a      	ands	r2, r3
 80095ea:	f847 2c04 	str.w	r2, [r7, #-4]
 80095ee:	e7d3      	b.n	8009598 <__hexnan+0xbc>
 80095f0:	3e04      	subs	r6, #4
 80095f2:	e7d1      	b.n	8009598 <__hexnan+0xbc>
 80095f4:	2004      	movs	r0, #4
 80095f6:	b007      	add	sp, #28
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095fc <__locale_ctype_ptr_l>:
 80095fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009600:	4770      	bx	lr
	...

08009604 <__locale_ctype_ptr>:
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <__locale_ctype_ptr+0x14>)
 8009606:	4a05      	ldr	r2, [pc, #20]	; (800961c <__locale_ctype_ptr+0x18>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf08      	it	eq
 8009610:	4613      	moveq	r3, r2
 8009612:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009616:	4770      	bx	lr
 8009618:	20000194 	.word	0x20000194
 800961c:	200001f8 	.word	0x200001f8

08009620 <__localeconv_l>:
 8009620:	30f0      	adds	r0, #240	; 0xf0
 8009622:	4770      	bx	lr

08009624 <_localeconv_r>:
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <_localeconv_r+0x14>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a18      	ldr	r0, [r3, #32]
 800962a:	4b04      	ldr	r3, [pc, #16]	; (800963c <_localeconv_r+0x18>)
 800962c:	2800      	cmp	r0, #0
 800962e:	bf08      	it	eq
 8009630:	4618      	moveq	r0, r3
 8009632:	30f0      	adds	r0, #240	; 0xf0
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000194 	.word	0x20000194
 800963c:	200001f8 	.word	0x200001f8

08009640 <_lseek_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4605      	mov	r5, r0
 8009644:	4608      	mov	r0, r1
 8009646:	4611      	mov	r1, r2
 8009648:	2200      	movs	r2, #0
 800964a:	4c05      	ldr	r4, [pc, #20]	; (8009660 <_lseek_r+0x20>)
 800964c:	6022      	str	r2, [r4, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f7fc fc9a 	bl	8005f88 <_lseek>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_lseek_r+0x1e>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	b103      	cbz	r3, 800965e <_lseek_r+0x1e>
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20001b7c 	.word	0x20001b7c

08009664 <malloc>:
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <malloc+0xc>)
 8009666:	4601      	mov	r1, r0
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f000 bc75 	b.w	8009f58 <_malloc_r>
 800966e:	bf00      	nop
 8009670:	20000194 	.word	0x20000194

08009674 <__ascii_mbtowc>:
 8009674:	b082      	sub	sp, #8
 8009676:	b901      	cbnz	r1, 800967a <__ascii_mbtowc+0x6>
 8009678:	a901      	add	r1, sp, #4
 800967a:	b142      	cbz	r2, 800968e <__ascii_mbtowc+0x1a>
 800967c:	b14b      	cbz	r3, 8009692 <__ascii_mbtowc+0x1e>
 800967e:	7813      	ldrb	r3, [r2, #0]
 8009680:	600b      	str	r3, [r1, #0]
 8009682:	7812      	ldrb	r2, [r2, #0]
 8009684:	1c10      	adds	r0, r2, #0
 8009686:	bf18      	it	ne
 8009688:	2001      	movne	r0, #1
 800968a:	b002      	add	sp, #8
 800968c:	4770      	bx	lr
 800968e:	4610      	mov	r0, r2
 8009690:	e7fb      	b.n	800968a <__ascii_mbtowc+0x16>
 8009692:	f06f 0001 	mvn.w	r0, #1
 8009696:	e7f8      	b.n	800968a <__ascii_mbtowc+0x16>

08009698 <memchr>:
 8009698:	b510      	push	{r4, lr}
 800969a:	b2c9      	uxtb	r1, r1
 800969c:	4402      	add	r2, r0
 800969e:	4290      	cmp	r0, r2
 80096a0:	4603      	mov	r3, r0
 80096a2:	d101      	bne.n	80096a8 <memchr+0x10>
 80096a4:	2300      	movs	r3, #0
 80096a6:	e003      	b.n	80096b0 <memchr+0x18>
 80096a8:	781c      	ldrb	r4, [r3, #0]
 80096aa:	3001      	adds	r0, #1
 80096ac:	428c      	cmp	r4, r1
 80096ae:	d1f6      	bne.n	800969e <memchr+0x6>
 80096b0:	4618      	mov	r0, r3
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <_Balloc>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096b8:	4604      	mov	r4, r0
 80096ba:	460e      	mov	r6, r1
 80096bc:	b93d      	cbnz	r5, 80096ce <_Balloc+0x1a>
 80096be:	2010      	movs	r0, #16
 80096c0:	f7ff ffd0 	bl	8009664 <malloc>
 80096c4:	6260      	str	r0, [r4, #36]	; 0x24
 80096c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096ca:	6005      	str	r5, [r0, #0]
 80096cc:	60c5      	str	r5, [r0, #12]
 80096ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096d0:	68eb      	ldr	r3, [r5, #12]
 80096d2:	b183      	cbz	r3, 80096f6 <_Balloc+0x42>
 80096d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096dc:	b9b8      	cbnz	r0, 800970e <_Balloc+0x5a>
 80096de:	2101      	movs	r1, #1
 80096e0:	fa01 f506 	lsl.w	r5, r1, r6
 80096e4:	1d6a      	adds	r2, r5, #5
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fbdb 	bl	8009ea4 <_calloc_r>
 80096ee:	b160      	cbz	r0, 800970a <_Balloc+0x56>
 80096f0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096f4:	e00e      	b.n	8009714 <_Balloc+0x60>
 80096f6:	2221      	movs	r2, #33	; 0x21
 80096f8:	2104      	movs	r1, #4
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fbd2 	bl	8009ea4 <_calloc_r>
 8009700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009702:	60e8      	str	r0, [r5, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e4      	bne.n	80096d4 <_Balloc+0x20>
 800970a:	2000      	movs	r0, #0
 800970c:	bd70      	pop	{r4, r5, r6, pc}
 800970e:	6802      	ldr	r2, [r0, #0]
 8009710:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009714:	2300      	movs	r3, #0
 8009716:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800971a:	e7f7      	b.n	800970c <_Balloc+0x58>

0800971c <_Bfree>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009720:	4606      	mov	r6, r0
 8009722:	460d      	mov	r5, r1
 8009724:	b93c      	cbnz	r4, 8009736 <_Bfree+0x1a>
 8009726:	2010      	movs	r0, #16
 8009728:	f7ff ff9c 	bl	8009664 <malloc>
 800972c:	6270      	str	r0, [r6, #36]	; 0x24
 800972e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009732:	6004      	str	r4, [r0, #0]
 8009734:	60c4      	str	r4, [r0, #12]
 8009736:	b13d      	cbz	r5, 8009748 <_Bfree+0x2c>
 8009738:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800973a:	686a      	ldr	r2, [r5, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009742:	6029      	str	r1, [r5, #0]
 8009744:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009748:	bd70      	pop	{r4, r5, r6, pc}

0800974a <__multadd>:
 800974a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974e:	461f      	mov	r7, r3
 8009750:	4606      	mov	r6, r0
 8009752:	460c      	mov	r4, r1
 8009754:	2300      	movs	r3, #0
 8009756:	690d      	ldr	r5, [r1, #16]
 8009758:	f101 0c14 	add.w	ip, r1, #20
 800975c:	f8dc 0000 	ldr.w	r0, [ip]
 8009760:	3301      	adds	r3, #1
 8009762:	b281      	uxth	r1, r0
 8009764:	fb02 7101 	mla	r1, r2, r1, r7
 8009768:	0c00      	lsrs	r0, r0, #16
 800976a:	0c0f      	lsrs	r7, r1, #16
 800976c:	fb02 7000 	mla	r0, r2, r0, r7
 8009770:	b289      	uxth	r1, r1
 8009772:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009776:	429d      	cmp	r5, r3
 8009778:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800977c:	f84c 1b04 	str.w	r1, [ip], #4
 8009780:	dcec      	bgt.n	800975c <__multadd+0x12>
 8009782:	b1d7      	cbz	r7, 80097ba <__multadd+0x70>
 8009784:	68a3      	ldr	r3, [r4, #8]
 8009786:	42ab      	cmp	r3, r5
 8009788:	dc12      	bgt.n	80097b0 <__multadd+0x66>
 800978a:	6861      	ldr	r1, [r4, #4]
 800978c:	4630      	mov	r0, r6
 800978e:	3101      	adds	r1, #1
 8009790:	f7ff ff90 	bl	80096b4 <_Balloc>
 8009794:	4680      	mov	r8, r0
 8009796:	6922      	ldr	r2, [r4, #16]
 8009798:	f104 010c 	add.w	r1, r4, #12
 800979c:	3202      	adds	r2, #2
 800979e:	0092      	lsls	r2, r2, #2
 80097a0:	300c      	adds	r0, #12
 80097a2:	f7fc fecf 	bl	8006544 <memcpy>
 80097a6:	4621      	mov	r1, r4
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7ff ffb7 	bl	800971c <_Bfree>
 80097ae:	4644      	mov	r4, r8
 80097b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097b4:	3501      	adds	r5, #1
 80097b6:	615f      	str	r7, [r3, #20]
 80097b8:	6125      	str	r5, [r4, #16]
 80097ba:	4620      	mov	r0, r4
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097c0 <__s2b>:
 80097c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c4:	4615      	mov	r5, r2
 80097c6:	2209      	movs	r2, #9
 80097c8:	461f      	mov	r7, r3
 80097ca:	3308      	adds	r3, #8
 80097cc:	460c      	mov	r4, r1
 80097ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80097d2:	4606      	mov	r6, r0
 80097d4:	2201      	movs	r2, #1
 80097d6:	2100      	movs	r1, #0
 80097d8:	429a      	cmp	r2, r3
 80097da:	db20      	blt.n	800981e <__s2b+0x5e>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ff69 	bl	80096b4 <_Balloc>
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	2d09      	cmp	r5, #9
 80097e6:	6143      	str	r3, [r0, #20]
 80097e8:	f04f 0301 	mov.w	r3, #1
 80097ec:	6103      	str	r3, [r0, #16]
 80097ee:	dd19      	ble.n	8009824 <__s2b+0x64>
 80097f0:	f104 0809 	add.w	r8, r4, #9
 80097f4:	46c1      	mov	r9, r8
 80097f6:	442c      	add	r4, r5
 80097f8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80097fc:	4601      	mov	r1, r0
 80097fe:	3b30      	subs	r3, #48	; 0x30
 8009800:	220a      	movs	r2, #10
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ffa1 	bl	800974a <__multadd>
 8009808:	45a1      	cmp	r9, r4
 800980a:	d1f5      	bne.n	80097f8 <__s2b+0x38>
 800980c:	eb08 0405 	add.w	r4, r8, r5
 8009810:	3c08      	subs	r4, #8
 8009812:	1b2d      	subs	r5, r5, r4
 8009814:	1963      	adds	r3, r4, r5
 8009816:	42bb      	cmp	r3, r7
 8009818:	db07      	blt.n	800982a <__s2b+0x6a>
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	0052      	lsls	r2, r2, #1
 8009820:	3101      	adds	r1, #1
 8009822:	e7d9      	b.n	80097d8 <__s2b+0x18>
 8009824:	340a      	adds	r4, #10
 8009826:	2509      	movs	r5, #9
 8009828:	e7f3      	b.n	8009812 <__s2b+0x52>
 800982a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800982e:	4601      	mov	r1, r0
 8009830:	3b30      	subs	r3, #48	; 0x30
 8009832:	220a      	movs	r2, #10
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff ff88 	bl	800974a <__multadd>
 800983a:	e7eb      	b.n	8009814 <__s2b+0x54>

0800983c <__hi0bits>:
 800983c:	0c02      	lsrs	r2, r0, #16
 800983e:	0412      	lsls	r2, r2, #16
 8009840:	4603      	mov	r3, r0
 8009842:	b9b2      	cbnz	r2, 8009872 <__hi0bits+0x36>
 8009844:	0403      	lsls	r3, r0, #16
 8009846:	2010      	movs	r0, #16
 8009848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800984c:	bf04      	itt	eq
 800984e:	021b      	lsleq	r3, r3, #8
 8009850:	3008      	addeq	r0, #8
 8009852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009856:	bf04      	itt	eq
 8009858:	011b      	lsleq	r3, r3, #4
 800985a:	3004      	addeq	r0, #4
 800985c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009860:	bf04      	itt	eq
 8009862:	009b      	lsleq	r3, r3, #2
 8009864:	3002      	addeq	r0, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	db06      	blt.n	8009878 <__hi0bits+0x3c>
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	d503      	bpl.n	8009876 <__hi0bits+0x3a>
 800986e:	3001      	adds	r0, #1
 8009870:	4770      	bx	lr
 8009872:	2000      	movs	r0, #0
 8009874:	e7e8      	b.n	8009848 <__hi0bits+0xc>
 8009876:	2020      	movs	r0, #32
 8009878:	4770      	bx	lr

0800987a <__lo0bits>:
 800987a:	6803      	ldr	r3, [r0, #0]
 800987c:	4601      	mov	r1, r0
 800987e:	f013 0207 	ands.w	r2, r3, #7
 8009882:	d00b      	beq.n	800989c <__lo0bits+0x22>
 8009884:	07da      	lsls	r2, r3, #31
 8009886:	d423      	bmi.n	80098d0 <__lo0bits+0x56>
 8009888:	0798      	lsls	r0, r3, #30
 800988a:	bf49      	itett	mi
 800988c:	085b      	lsrmi	r3, r3, #1
 800988e:	089b      	lsrpl	r3, r3, #2
 8009890:	2001      	movmi	r0, #1
 8009892:	600b      	strmi	r3, [r1, #0]
 8009894:	bf5c      	itt	pl
 8009896:	600b      	strpl	r3, [r1, #0]
 8009898:	2002      	movpl	r0, #2
 800989a:	4770      	bx	lr
 800989c:	b298      	uxth	r0, r3
 800989e:	b9a8      	cbnz	r0, 80098cc <__lo0bits+0x52>
 80098a0:	2010      	movs	r0, #16
 80098a2:	0c1b      	lsrs	r3, r3, #16
 80098a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098a8:	bf04      	itt	eq
 80098aa:	0a1b      	lsreq	r3, r3, #8
 80098ac:	3008      	addeq	r0, #8
 80098ae:	071a      	lsls	r2, r3, #28
 80098b0:	bf04      	itt	eq
 80098b2:	091b      	lsreq	r3, r3, #4
 80098b4:	3004      	addeq	r0, #4
 80098b6:	079a      	lsls	r2, r3, #30
 80098b8:	bf04      	itt	eq
 80098ba:	089b      	lsreq	r3, r3, #2
 80098bc:	3002      	addeq	r0, #2
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d402      	bmi.n	80098c8 <__lo0bits+0x4e>
 80098c2:	085b      	lsrs	r3, r3, #1
 80098c4:	d006      	beq.n	80098d4 <__lo0bits+0x5a>
 80098c6:	3001      	adds	r0, #1
 80098c8:	600b      	str	r3, [r1, #0]
 80098ca:	4770      	bx	lr
 80098cc:	4610      	mov	r0, r2
 80098ce:	e7e9      	b.n	80098a4 <__lo0bits+0x2a>
 80098d0:	2000      	movs	r0, #0
 80098d2:	4770      	bx	lr
 80098d4:	2020      	movs	r0, #32
 80098d6:	4770      	bx	lr

080098d8 <__i2b>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	2101      	movs	r1, #1
 80098de:	f7ff fee9 	bl	80096b4 <_Balloc>
 80098e2:	2201      	movs	r2, #1
 80098e4:	6144      	str	r4, [r0, #20]
 80098e6:	6102      	str	r2, [r0, #16]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__multiply>:
 80098ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ee:	4614      	mov	r4, r2
 80098f0:	690a      	ldr	r2, [r1, #16]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	4688      	mov	r8, r1
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bfbe      	ittt	lt
 80098fa:	460b      	movlt	r3, r1
 80098fc:	46a0      	movlt	r8, r4
 80098fe:	461c      	movlt	r4, r3
 8009900:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009904:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009908:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800990c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009910:	eb07 0609 	add.w	r6, r7, r9
 8009914:	42b3      	cmp	r3, r6
 8009916:	bfb8      	it	lt
 8009918:	3101      	addlt	r1, #1
 800991a:	f7ff fecb 	bl	80096b4 <_Balloc>
 800991e:	f100 0514 	add.w	r5, r0, #20
 8009922:	462b      	mov	r3, r5
 8009924:	2200      	movs	r2, #0
 8009926:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800992a:	4573      	cmp	r3, lr
 800992c:	d316      	bcc.n	800995c <__multiply+0x72>
 800992e:	f104 0214 	add.w	r2, r4, #20
 8009932:	f108 0114 	add.w	r1, r8, #20
 8009936:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800993a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	9b00      	ldr	r3, [sp, #0]
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	4293      	cmp	r3, r2
 8009946:	d80c      	bhi.n	8009962 <__multiply+0x78>
 8009948:	2e00      	cmp	r6, #0
 800994a:	dd03      	ble.n	8009954 <__multiply+0x6a>
 800994c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009950:	2b00      	cmp	r3, #0
 8009952:	d05d      	beq.n	8009a10 <__multiply+0x126>
 8009954:	6106      	str	r6, [r0, #16]
 8009956:	b003      	add	sp, #12
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	f843 2b04 	str.w	r2, [r3], #4
 8009960:	e7e3      	b.n	800992a <__multiply+0x40>
 8009962:	f8b2 b000 	ldrh.w	fp, [r2]
 8009966:	f1bb 0f00 	cmp.w	fp, #0
 800996a:	d023      	beq.n	80099b4 <__multiply+0xca>
 800996c:	4689      	mov	r9, r1
 800996e:	46ac      	mov	ip, r5
 8009970:	f04f 0800 	mov.w	r8, #0
 8009974:	f859 4b04 	ldr.w	r4, [r9], #4
 8009978:	f8dc a000 	ldr.w	sl, [ip]
 800997c:	b2a3      	uxth	r3, r4
 800997e:	fa1f fa8a 	uxth.w	sl, sl
 8009982:	fb0b a303 	mla	r3, fp, r3, sl
 8009986:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800998a:	f8dc 4000 	ldr.w	r4, [ip]
 800998e:	4443      	add	r3, r8
 8009990:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009994:	fb0b 840a 	mla	r4, fp, sl, r8
 8009998:	46e2      	mov	sl, ip
 800999a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800999e:	b29b      	uxth	r3, r3
 80099a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099a4:	454f      	cmp	r7, r9
 80099a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099aa:	f84a 3b04 	str.w	r3, [sl], #4
 80099ae:	d82b      	bhi.n	8009a08 <__multiply+0x11e>
 80099b0:	f8cc 8004 	str.w	r8, [ip, #4]
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	3204      	adds	r2, #4
 80099b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80099bc:	f1ba 0f00 	cmp.w	sl, #0
 80099c0:	d020      	beq.n	8009a04 <__multiply+0x11a>
 80099c2:	4689      	mov	r9, r1
 80099c4:	46a8      	mov	r8, r5
 80099c6:	f04f 0b00 	mov.w	fp, #0
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	f8b9 c000 	ldrh.w	ip, [r9]
 80099d0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	fb0a 440c 	mla	r4, sl, ip, r4
 80099da:	46c4      	mov	ip, r8
 80099dc:	445c      	add	r4, fp
 80099de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099e2:	f84c 3b04 	str.w	r3, [ip], #4
 80099e6:	f859 3b04 	ldr.w	r3, [r9], #4
 80099ea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80099ee:	0c1b      	lsrs	r3, r3, #16
 80099f0:	fb0a b303 	mla	r3, sl, r3, fp
 80099f4:	454f      	cmp	r7, r9
 80099f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80099fa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80099fe:	d805      	bhi.n	8009a0c <__multiply+0x122>
 8009a00:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a04:	3504      	adds	r5, #4
 8009a06:	e79b      	b.n	8009940 <__multiply+0x56>
 8009a08:	46d4      	mov	ip, sl
 8009a0a:	e7b3      	b.n	8009974 <__multiply+0x8a>
 8009a0c:	46e0      	mov	r8, ip
 8009a0e:	e7dd      	b.n	80099cc <__multiply+0xe2>
 8009a10:	3e01      	subs	r6, #1
 8009a12:	e799      	b.n	8009948 <__multiply+0x5e>

08009a14 <__pow5mult>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	4615      	mov	r5, r2
 8009a1a:	f012 0203 	ands.w	r2, r2, #3
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460f      	mov	r7, r1
 8009a22:	d007      	beq.n	8009a34 <__pow5mult+0x20>
 8009a24:	4c21      	ldr	r4, [pc, #132]	; (8009aac <__pow5mult+0x98>)
 8009a26:	3a01      	subs	r2, #1
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a2e:	f7ff fe8c 	bl	800974a <__multadd>
 8009a32:	4607      	mov	r7, r0
 8009a34:	10ad      	asrs	r5, r5, #2
 8009a36:	d035      	beq.n	8009aa4 <__pow5mult+0x90>
 8009a38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a3a:	b93c      	cbnz	r4, 8009a4c <__pow5mult+0x38>
 8009a3c:	2010      	movs	r0, #16
 8009a3e:	f7ff fe11 	bl	8009664 <malloc>
 8009a42:	6270      	str	r0, [r6, #36]	; 0x24
 8009a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a48:	6004      	str	r4, [r0, #0]
 8009a4a:	60c4      	str	r4, [r0, #12]
 8009a4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a54:	b94c      	cbnz	r4, 8009a6a <__pow5mult+0x56>
 8009a56:	f240 2171 	movw	r1, #625	; 0x271
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff3c 	bl	80098d8 <__i2b>
 8009a60:	2300      	movs	r3, #0
 8009a62:	4604      	mov	r4, r0
 8009a64:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	07eb      	lsls	r3, r5, #31
 8009a70:	d50a      	bpl.n	8009a88 <__pow5mult+0x74>
 8009a72:	4639      	mov	r1, r7
 8009a74:	4622      	mov	r2, r4
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7ff ff37 	bl	80098ea <__multiply>
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	4639      	mov	r1, r7
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff fe4b 	bl	800971c <_Bfree>
 8009a86:	464f      	mov	r7, r9
 8009a88:	106d      	asrs	r5, r5, #1
 8009a8a:	d00b      	beq.n	8009aa4 <__pow5mult+0x90>
 8009a8c:	6820      	ldr	r0, [r4, #0]
 8009a8e:	b938      	cbnz	r0, 8009aa0 <__pow5mult+0x8c>
 8009a90:	4622      	mov	r2, r4
 8009a92:	4621      	mov	r1, r4
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff ff28 	bl	80098ea <__multiply>
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	f8c0 8000 	str.w	r8, [r0]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	e7e4      	b.n	8009a6e <__pow5mult+0x5a>
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800d6b0 	.word	0x0800d6b0

08009ab0 <__lshift>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	4616      	mov	r6, r2
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac0:	eb0a 0903 	add.w	r9, sl, r3
 8009ac4:	6849      	ldr	r1, [r1, #4]
 8009ac6:	68a3      	ldr	r3, [r4, #8]
 8009ac8:	f109 0501 	add.w	r5, r9, #1
 8009acc:	42ab      	cmp	r3, r5
 8009ace:	db32      	blt.n	8009b36 <__lshift+0x86>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7ff fdef 	bl	80096b4 <_Balloc>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4680      	mov	r8, r0
 8009ada:	461a      	mov	r2, r3
 8009adc:	f100 0114 	add.w	r1, r0, #20
 8009ae0:	4553      	cmp	r3, sl
 8009ae2:	db2b      	blt.n	8009b3c <__lshift+0x8c>
 8009ae4:	6920      	ldr	r0, [r4, #16]
 8009ae6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aea:	f104 0314 	add.w	r3, r4, #20
 8009aee:	f016 021f 	ands.w	r2, r6, #31
 8009af2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009afa:	d025      	beq.n	8009b48 <__lshift+0x98>
 8009afc:	2000      	movs	r0, #0
 8009afe:	f1c2 0e20 	rsb	lr, r2, #32
 8009b02:	468a      	mov	sl, r1
 8009b04:	681e      	ldr	r6, [r3, #0]
 8009b06:	4096      	lsls	r6, r2
 8009b08:	4330      	orrs	r0, r6
 8009b0a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b0e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b12:	459c      	cmp	ip, r3
 8009b14:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b18:	d814      	bhi.n	8009b44 <__lshift+0x94>
 8009b1a:	6048      	str	r0, [r1, #4]
 8009b1c:	b108      	cbz	r0, 8009b22 <__lshift+0x72>
 8009b1e:	f109 0502 	add.w	r5, r9, #2
 8009b22:	3d01      	subs	r5, #1
 8009b24:	4638      	mov	r0, r7
 8009b26:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f7ff fdf6 	bl	800971c <_Bfree>
 8009b30:	4640      	mov	r0, r8
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	3101      	adds	r1, #1
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	e7c7      	b.n	8009acc <__lshift+0x1c>
 8009b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b40:	3301      	adds	r3, #1
 8009b42:	e7cd      	b.n	8009ae0 <__lshift+0x30>
 8009b44:	4651      	mov	r1, sl
 8009b46:	e7dc      	b.n	8009b02 <__lshift+0x52>
 8009b48:	3904      	subs	r1, #4
 8009b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4e:	459c      	cmp	ip, r3
 8009b50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b54:	d8f9      	bhi.n	8009b4a <__lshift+0x9a>
 8009b56:	e7e4      	b.n	8009b22 <__lshift+0x72>

08009b58 <__mcmp>:
 8009b58:	6903      	ldr	r3, [r0, #16]
 8009b5a:	690a      	ldr	r2, [r1, #16]
 8009b5c:	b530      	push	{r4, r5, lr}
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	d10c      	bne.n	8009b7c <__mcmp+0x24>
 8009b62:	0092      	lsls	r2, r2, #2
 8009b64:	3014      	adds	r0, #20
 8009b66:	3114      	adds	r1, #20
 8009b68:	1884      	adds	r4, r0, r2
 8009b6a:	4411      	add	r1, r2
 8009b6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b74:	4295      	cmp	r5, r2
 8009b76:	d003      	beq.n	8009b80 <__mcmp+0x28>
 8009b78:	d305      	bcc.n	8009b86 <__mcmp+0x2e>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d3f3      	bcc.n	8009b6c <__mcmp+0x14>
 8009b84:	e7fa      	b.n	8009b7c <__mcmp+0x24>
 8009b86:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8a:	e7f7      	b.n	8009b7c <__mcmp+0x24>

08009b8c <__mdiff>:
 8009b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	460d      	mov	r5, r1
 8009b92:	4607      	mov	r7, r0
 8009b94:	4611      	mov	r1, r2
 8009b96:	4628      	mov	r0, r5
 8009b98:	4614      	mov	r4, r2
 8009b9a:	f7ff ffdd 	bl	8009b58 <__mcmp>
 8009b9e:	1e06      	subs	r6, r0, #0
 8009ba0:	d108      	bne.n	8009bb4 <__mdiff+0x28>
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f7ff fd85 	bl	80096b4 <_Balloc>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb4:	bfa4      	itt	ge
 8009bb6:	4623      	movge	r3, r4
 8009bb8:	462c      	movge	r4, r5
 8009bba:	4638      	mov	r0, r7
 8009bbc:	6861      	ldr	r1, [r4, #4]
 8009bbe:	bfa6      	itte	ge
 8009bc0:	461d      	movge	r5, r3
 8009bc2:	2600      	movge	r6, #0
 8009bc4:	2601      	movlt	r6, #1
 8009bc6:	f7ff fd75 	bl	80096b4 <_Balloc>
 8009bca:	f04f 0e00 	mov.w	lr, #0
 8009bce:	60c6      	str	r6, [r0, #12]
 8009bd0:	692b      	ldr	r3, [r5, #16]
 8009bd2:	6926      	ldr	r6, [r4, #16]
 8009bd4:	f104 0214 	add.w	r2, r4, #20
 8009bd8:	f105 0914 	add.w	r9, r5, #20
 8009bdc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009be0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009be4:	f100 0114 	add.w	r1, r0, #20
 8009be8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009bec:	f859 5b04 	ldr.w	r5, [r9], #4
 8009bf0:	fa1f f38a 	uxth.w	r3, sl
 8009bf4:	4473      	add	r3, lr
 8009bf6:	b2ac      	uxth	r4, r5
 8009bf8:	1b1b      	subs	r3, r3, r4
 8009bfa:	0c2c      	lsrs	r4, r5, #16
 8009bfc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009c00:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009c0a:	45c8      	cmp	r8, r9
 8009c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009c10:	4694      	mov	ip, r2
 8009c12:	f841 4b04 	str.w	r4, [r1], #4
 8009c16:	d8e7      	bhi.n	8009be8 <__mdiff+0x5c>
 8009c18:	45bc      	cmp	ip, r7
 8009c1a:	d304      	bcc.n	8009c26 <__mdiff+0x9a>
 8009c1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009c20:	b183      	cbz	r3, 8009c44 <__mdiff+0xb8>
 8009c22:	6106      	str	r6, [r0, #16]
 8009c24:	e7c4      	b.n	8009bb0 <__mdiff+0x24>
 8009c26:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009c2a:	b2a2      	uxth	r2, r4
 8009c2c:	4472      	add	r2, lr
 8009c2e:	1413      	asrs	r3, r2, #16
 8009c30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009c34:	b292      	uxth	r2, r2
 8009c36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c3a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c3e:	f841 2b04 	str.w	r2, [r1], #4
 8009c42:	e7e9      	b.n	8009c18 <__mdiff+0x8c>
 8009c44:	3e01      	subs	r6, #1
 8009c46:	e7e9      	b.n	8009c1c <__mdiff+0x90>

08009c48 <__ulp>:
 8009c48:	4b10      	ldr	r3, [pc, #64]	; (8009c8c <__ulp+0x44>)
 8009c4a:	400b      	ands	r3, r1
 8009c4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	dd02      	ble.n	8009c5a <__ulp+0x12>
 8009c54:	2000      	movs	r0, #0
 8009c56:	4619      	mov	r1, r3
 8009c58:	4770      	bx	lr
 8009c5a:	425b      	negs	r3, r3
 8009c5c:	151b      	asrs	r3, r3, #20
 8009c5e:	2b13      	cmp	r3, #19
 8009c60:	f04f 0000 	mov.w	r0, #0
 8009c64:	f04f 0100 	mov.w	r1, #0
 8009c68:	dc04      	bgt.n	8009c74 <__ulp+0x2c>
 8009c6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c6e:	fa42 f103 	asr.w	r1, r2, r3
 8009c72:	4770      	bx	lr
 8009c74:	2201      	movs	r2, #1
 8009c76:	3b14      	subs	r3, #20
 8009c78:	2b1e      	cmp	r3, #30
 8009c7a:	bfce      	itee	gt
 8009c7c:	4613      	movgt	r3, r2
 8009c7e:	f1c3 031f 	rsble	r3, r3, #31
 8009c82:	fa02 f303 	lslle.w	r3, r2, r3
 8009c86:	4618      	mov	r0, r3
 8009c88:	4770      	bx	lr
 8009c8a:	bf00      	nop
 8009c8c:	7ff00000 	.word	0x7ff00000

08009c90 <__b2d>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	6907      	ldr	r7, [r0, #16]
 8009c96:	f100 0914 	add.w	r9, r0, #20
 8009c9a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009c9e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009ca2:	f1a7 0804 	sub.w	r8, r7, #4
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7ff fdc8 	bl	800983c <__hi0bits>
 8009cac:	f1c0 0320 	rsb	r3, r0, #32
 8009cb0:	280a      	cmp	r0, #10
 8009cb2:	600b      	str	r3, [r1, #0]
 8009cb4:	491e      	ldr	r1, [pc, #120]	; (8009d30 <__b2d+0xa0>)
 8009cb6:	dc17      	bgt.n	8009ce8 <__b2d+0x58>
 8009cb8:	45c1      	cmp	r9, r8
 8009cba:	bf28      	it	cs
 8009cbc:	2200      	movcs	r2, #0
 8009cbe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009cc2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009cc6:	bf38      	it	cc
 8009cc8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ccc:	ea43 0501 	orr.w	r5, r3, r1
 8009cd0:	f100 0315 	add.w	r3, r0, #21
 8009cd4:	fa06 f303 	lsl.w	r3, r6, r3
 8009cd8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009cdc:	ea43 0402 	orr.w	r4, r3, r2
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce8:	45c1      	cmp	r9, r8
 8009cea:	bf3a      	itte	cc
 8009cec:	f1a7 0808 	subcc.w	r8, r7, #8
 8009cf0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009cf4:	2200      	movcs	r2, #0
 8009cf6:	f1b0 030b 	subs.w	r3, r0, #11
 8009cfa:	d015      	beq.n	8009d28 <__b2d+0x98>
 8009cfc:	409e      	lsls	r6, r3
 8009cfe:	f1c3 0720 	rsb	r7, r3, #32
 8009d02:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009d06:	fa22 f107 	lsr.w	r1, r2, r7
 8009d0a:	45c8      	cmp	r8, r9
 8009d0c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009d10:	ea46 0501 	orr.w	r5, r6, r1
 8009d14:	bf94      	ite	ls
 8009d16:	2100      	movls	r1, #0
 8009d18:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009d1c:	fa02 f003 	lsl.w	r0, r2, r3
 8009d20:	40f9      	lsrs	r1, r7
 8009d22:	ea40 0401 	orr.w	r4, r0, r1
 8009d26:	e7db      	b.n	8009ce0 <__b2d+0x50>
 8009d28:	ea46 0501 	orr.w	r5, r6, r1
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	e7d7      	b.n	8009ce0 <__b2d+0x50>
 8009d30:	3ff00000 	.word	0x3ff00000

08009d34 <__d2b>:
 8009d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d38:	461c      	mov	r4, r3
 8009d3a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009d3e:	2101      	movs	r1, #1
 8009d40:	4690      	mov	r8, r2
 8009d42:	f7ff fcb7 	bl	80096b4 <_Balloc>
 8009d46:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009d4a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009d4e:	4607      	mov	r7, r0
 8009d50:	bb34      	cbnz	r4, 8009da0 <__d2b+0x6c>
 8009d52:	9201      	str	r2, [sp, #4]
 8009d54:	f1b8 0200 	subs.w	r2, r8, #0
 8009d58:	d027      	beq.n	8009daa <__d2b+0x76>
 8009d5a:	a802      	add	r0, sp, #8
 8009d5c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009d60:	f7ff fd8b 	bl	800987a <__lo0bits>
 8009d64:	9900      	ldr	r1, [sp, #0]
 8009d66:	b1f0      	cbz	r0, 8009da6 <__d2b+0x72>
 8009d68:	9a01      	ldr	r2, [sp, #4]
 8009d6a:	f1c0 0320 	rsb	r3, r0, #32
 8009d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d72:	430b      	orrs	r3, r1
 8009d74:	40c2      	lsrs	r2, r0
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	9201      	str	r2, [sp, #4]
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bf14      	ite	ne
 8009d80:	2102      	movne	r1, #2
 8009d82:	2101      	moveq	r1, #1
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	6139      	str	r1, [r7, #16]
 8009d88:	b1c4      	cbz	r4, 8009dbc <__d2b+0x88>
 8009d8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d8e:	4404      	add	r4, r0
 8009d90:	6034      	str	r4, [r6, #0]
 8009d92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d96:	6028      	str	r0, [r5, #0]
 8009d98:	4638      	mov	r0, r7
 8009d9a:	b002      	add	sp, #8
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009da4:	e7d5      	b.n	8009d52 <__d2b+0x1e>
 8009da6:	6179      	str	r1, [r7, #20]
 8009da8:	e7e7      	b.n	8009d7a <__d2b+0x46>
 8009daa:	a801      	add	r0, sp, #4
 8009dac:	f7ff fd65 	bl	800987a <__lo0bits>
 8009db0:	2101      	movs	r1, #1
 8009db2:	9b01      	ldr	r3, [sp, #4]
 8009db4:	6139      	str	r1, [r7, #16]
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	3020      	adds	r0, #32
 8009dba:	e7e5      	b.n	8009d88 <__d2b+0x54>
 8009dbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dc0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009dc4:	6030      	str	r0, [r6, #0]
 8009dc6:	6918      	ldr	r0, [r3, #16]
 8009dc8:	f7ff fd38 	bl	800983c <__hi0bits>
 8009dcc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009dd0:	e7e1      	b.n	8009d96 <__d2b+0x62>

08009dd2 <__ratio>:
 8009dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd6:	4688      	mov	r8, r1
 8009dd8:	4669      	mov	r1, sp
 8009dda:	4681      	mov	r9, r0
 8009ddc:	f7ff ff58 	bl	8009c90 <__b2d>
 8009de0:	468b      	mov	fp, r1
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	4640      	mov	r0, r8
 8009de8:	a901      	add	r1, sp, #4
 8009dea:	f7ff ff51 	bl	8009c90 <__b2d>
 8009dee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009df2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009df6:	460d      	mov	r5, r1
 8009df8:	eba3 0c02 	sub.w	ip, r3, r2
 8009dfc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfd5      	itete	le
 8009e0a:	460a      	movle	r2, r1
 8009e0c:	463a      	movgt	r2, r7
 8009e0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009e16:	bfd8      	it	le
 8009e18:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009e1c:	462b      	mov	r3, r5
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4659      	mov	r1, fp
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7f6 fc82 	bl	800072c <__aeabi_ddiv>
 8009e28:	b003      	add	sp, #12
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e2e <__copybits>:
 8009e2e:	3901      	subs	r1, #1
 8009e30:	b510      	push	{r4, lr}
 8009e32:	1149      	asrs	r1, r1, #5
 8009e34:	6914      	ldr	r4, [r2, #16]
 8009e36:	3101      	adds	r1, #1
 8009e38:	f102 0314 	add.w	r3, r2, #20
 8009e3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	4602      	mov	r2, r0
 8009e48:	d303      	bcc.n	8009e52 <__copybits+0x24>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d305      	bcc.n	8009e5c <__copybits+0x2e>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	f840 2b04 	str.w	r2, [r0], #4
 8009e5a:	e7f3      	b.n	8009e44 <__copybits+0x16>
 8009e5c:	f842 3b04 	str.w	r3, [r2], #4
 8009e60:	e7f4      	b.n	8009e4c <__copybits+0x1e>

08009e62 <__any_on>:
 8009e62:	f100 0214 	add.w	r2, r0, #20
 8009e66:	6900      	ldr	r0, [r0, #16]
 8009e68:	114b      	asrs	r3, r1, #5
 8009e6a:	4298      	cmp	r0, r3
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	db11      	blt.n	8009e94 <__any_on+0x32>
 8009e70:	dd0a      	ble.n	8009e88 <__any_on+0x26>
 8009e72:	f011 011f 	ands.w	r1, r1, #31
 8009e76:	d007      	beq.n	8009e88 <__any_on+0x26>
 8009e78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e7c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e80:	fa00 f101 	lsl.w	r1, r0, r1
 8009e84:	428c      	cmp	r4, r1
 8009e86:	d10b      	bne.n	8009ea0 <__any_on+0x3e>
 8009e88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d803      	bhi.n	8009e98 <__any_on+0x36>
 8009e90:	2000      	movs	r0, #0
 8009e92:	bd10      	pop	{r4, pc}
 8009e94:	4603      	mov	r3, r0
 8009e96:	e7f7      	b.n	8009e88 <__any_on+0x26>
 8009e98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d0f5      	beq.n	8009e8c <__any_on+0x2a>
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	e7f6      	b.n	8009e92 <__any_on+0x30>

08009ea4 <_calloc_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	fb02 f401 	mul.w	r4, r2, r1
 8009eaa:	4621      	mov	r1, r4
 8009eac:	f000 f854 	bl	8009f58 <_malloc_r>
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	b118      	cbz	r0, 8009ebc <_calloc_r+0x18>
 8009eb4:	4622      	mov	r2, r4
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	f7fc fb68 	bl	800658c <memset>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}

08009ec0 <_free_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d043      	beq.n	8009f50 <_free_r+0x90>
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f0c      	subs	r4, r1, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfb8      	it	lt
 8009ed2:	18e4      	addlt	r4, r4, r3
 8009ed4:	f001 f938 	bl	800b148 <__malloc_lock>
 8009ed8:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <_free_r+0x94>)
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	4610      	mov	r0, r2
 8009ede:	b933      	cbnz	r3, 8009eee <_free_r+0x2e>
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	6014      	str	r4, [r2, #0]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eea:	f001 b92e 	b.w	800b14a <__malloc_unlock>
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	d90b      	bls.n	8009f0a <_free_r+0x4a>
 8009ef2:	6821      	ldr	r1, [r4, #0]
 8009ef4:	1862      	adds	r2, r4, r1
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	bf01      	itttt	eq
 8009efa:	681a      	ldreq	r2, [r3, #0]
 8009efc:	685b      	ldreq	r3, [r3, #4]
 8009efe:	1852      	addeq	r2, r2, r1
 8009f00:	6022      	streq	r2, [r4, #0]
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	6004      	str	r4, [r0, #0]
 8009f06:	e7ed      	b.n	8009ee4 <_free_r+0x24>
 8009f08:	4613      	mov	r3, r2
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	b10a      	cbz	r2, 8009f12 <_free_r+0x52>
 8009f0e:	42a2      	cmp	r2, r4
 8009f10:	d9fa      	bls.n	8009f08 <_free_r+0x48>
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	1858      	adds	r0, r3, r1
 8009f16:	42a0      	cmp	r0, r4
 8009f18:	d10b      	bne.n	8009f32 <_free_r+0x72>
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	4401      	add	r1, r0
 8009f1e:	1858      	adds	r0, r3, r1
 8009f20:	4282      	cmp	r2, r0
 8009f22:	6019      	str	r1, [r3, #0]
 8009f24:	d1de      	bne.n	8009ee4 <_free_r+0x24>
 8009f26:	6810      	ldr	r0, [r2, #0]
 8009f28:	6852      	ldr	r2, [r2, #4]
 8009f2a:	4401      	add	r1, r0
 8009f2c:	6019      	str	r1, [r3, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
 8009f30:	e7d8      	b.n	8009ee4 <_free_r+0x24>
 8009f32:	d902      	bls.n	8009f3a <_free_r+0x7a>
 8009f34:	230c      	movs	r3, #12
 8009f36:	602b      	str	r3, [r5, #0]
 8009f38:	e7d4      	b.n	8009ee4 <_free_r+0x24>
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	1821      	adds	r1, r4, r0
 8009f3e:	428a      	cmp	r2, r1
 8009f40:	bf01      	itttt	eq
 8009f42:	6811      	ldreq	r1, [r2, #0]
 8009f44:	6852      	ldreq	r2, [r2, #4]
 8009f46:	1809      	addeq	r1, r1, r0
 8009f48:	6021      	streq	r1, [r4, #0]
 8009f4a:	6062      	str	r2, [r4, #4]
 8009f4c:	605c      	str	r4, [r3, #4]
 8009f4e:	e7c9      	b.n	8009ee4 <_free_r+0x24>
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	200009b8 	.word	0x200009b8

08009f58 <_malloc_r>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	1ccd      	adds	r5, r1, #3
 8009f5c:	f025 0503 	bic.w	r5, r5, #3
 8009f60:	3508      	adds	r5, #8
 8009f62:	2d0c      	cmp	r5, #12
 8009f64:	bf38      	it	cc
 8009f66:	250c      	movcc	r5, #12
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	db01      	blt.n	8009f72 <_malloc_r+0x1a>
 8009f6e:	42a9      	cmp	r1, r5
 8009f70:	d903      	bls.n	8009f7a <_malloc_r+0x22>
 8009f72:	230c      	movs	r3, #12
 8009f74:	6033      	str	r3, [r6, #0]
 8009f76:	2000      	movs	r0, #0
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	f001 f8e5 	bl	800b148 <__malloc_lock>
 8009f7e:	4a21      	ldr	r2, [pc, #132]	; (800a004 <_malloc_r+0xac>)
 8009f80:	6814      	ldr	r4, [r2, #0]
 8009f82:	4621      	mov	r1, r4
 8009f84:	b991      	cbnz	r1, 8009fac <_malloc_r+0x54>
 8009f86:	4c20      	ldr	r4, [pc, #128]	; (800a008 <_malloc_r+0xb0>)
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	b91b      	cbnz	r3, 8009f94 <_malloc_r+0x3c>
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 fde1 	bl	800ab54 <_sbrk_r>
 8009f92:	6020      	str	r0, [r4, #0]
 8009f94:	4629      	mov	r1, r5
 8009f96:	4630      	mov	r0, r6
 8009f98:	f000 fddc 	bl	800ab54 <_sbrk_r>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d124      	bne.n	8009fea <_malloc_r+0x92>
 8009fa0:	230c      	movs	r3, #12
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	6033      	str	r3, [r6, #0]
 8009fa6:	f001 f8d0 	bl	800b14a <__malloc_unlock>
 8009faa:	e7e4      	b.n	8009f76 <_malloc_r+0x1e>
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	1b5b      	subs	r3, r3, r5
 8009fb0:	d418      	bmi.n	8009fe4 <_malloc_r+0x8c>
 8009fb2:	2b0b      	cmp	r3, #11
 8009fb4:	d90f      	bls.n	8009fd6 <_malloc_r+0x7e>
 8009fb6:	600b      	str	r3, [r1, #0]
 8009fb8:	18cc      	adds	r4, r1, r3
 8009fba:	50cd      	str	r5, [r1, r3]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f001 f8c4 	bl	800b14a <__malloc_unlock>
 8009fc2:	f104 000b 	add.w	r0, r4, #11
 8009fc6:	1d23      	adds	r3, r4, #4
 8009fc8:	f020 0007 	bic.w	r0, r0, #7
 8009fcc:	1ac3      	subs	r3, r0, r3
 8009fce:	d0d3      	beq.n	8009f78 <_malloc_r+0x20>
 8009fd0:	425a      	negs	r2, r3
 8009fd2:	50e2      	str	r2, [r4, r3]
 8009fd4:	e7d0      	b.n	8009f78 <_malloc_r+0x20>
 8009fd6:	684b      	ldr	r3, [r1, #4]
 8009fd8:	428c      	cmp	r4, r1
 8009fda:	bf16      	itet	ne
 8009fdc:	6063      	strne	r3, [r4, #4]
 8009fde:	6013      	streq	r3, [r2, #0]
 8009fe0:	460c      	movne	r4, r1
 8009fe2:	e7eb      	b.n	8009fbc <_malloc_r+0x64>
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	6849      	ldr	r1, [r1, #4]
 8009fe8:	e7cc      	b.n	8009f84 <_malloc_r+0x2c>
 8009fea:	1cc4      	adds	r4, r0, #3
 8009fec:	f024 0403 	bic.w	r4, r4, #3
 8009ff0:	42a0      	cmp	r0, r4
 8009ff2:	d005      	beq.n	800a000 <_malloc_r+0xa8>
 8009ff4:	1a21      	subs	r1, r4, r0
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f000 fdac 	bl	800ab54 <_sbrk_r>
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	d0cf      	beq.n	8009fa0 <_malloc_r+0x48>
 800a000:	6025      	str	r5, [r4, #0]
 800a002:	e7db      	b.n	8009fbc <_malloc_r+0x64>
 800a004:	200009b8 	.word	0x200009b8
 800a008:	200009bc 	.word	0x200009bc

0800a00c <__ssputs_r>:
 800a00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	688e      	ldr	r6, [r1, #8]
 800a012:	4682      	mov	sl, r0
 800a014:	429e      	cmp	r6, r3
 800a016:	460c      	mov	r4, r1
 800a018:	4690      	mov	r8, r2
 800a01a:	4699      	mov	r9, r3
 800a01c:	d837      	bhi.n	800a08e <__ssputs_r+0x82>
 800a01e:	898a      	ldrh	r2, [r1, #12]
 800a020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a024:	d031      	beq.n	800a08a <__ssputs_r+0x7e>
 800a026:	2302      	movs	r3, #2
 800a028:	6825      	ldr	r5, [r4, #0]
 800a02a:	6909      	ldr	r1, [r1, #16]
 800a02c:	1a6f      	subs	r7, r5, r1
 800a02e:	6965      	ldr	r5, [r4, #20]
 800a030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a034:	fb95 f5f3 	sdiv	r5, r5, r3
 800a038:	f109 0301 	add.w	r3, r9, #1
 800a03c:	443b      	add	r3, r7
 800a03e:	429d      	cmp	r5, r3
 800a040:	bf38      	it	cc
 800a042:	461d      	movcc	r5, r3
 800a044:	0553      	lsls	r3, r2, #21
 800a046:	d530      	bpl.n	800a0aa <__ssputs_r+0x9e>
 800a048:	4629      	mov	r1, r5
 800a04a:	f7ff ff85 	bl	8009f58 <_malloc_r>
 800a04e:	4606      	mov	r6, r0
 800a050:	b950      	cbnz	r0, 800a068 <__ssputs_r+0x5c>
 800a052:	230c      	movs	r3, #12
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	f8ca 3000 	str.w	r3, [sl]
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a068:	463a      	mov	r2, r7
 800a06a:	6921      	ldr	r1, [r4, #16]
 800a06c:	f7fc fa6a 	bl	8006544 <memcpy>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	6126      	str	r6, [r4, #16]
 800a07e:	443e      	add	r6, r7
 800a080:	6026      	str	r6, [r4, #0]
 800a082:	464e      	mov	r6, r9
 800a084:	6165      	str	r5, [r4, #20]
 800a086:	1bed      	subs	r5, r5, r7
 800a088:	60a5      	str	r5, [r4, #8]
 800a08a:	454e      	cmp	r6, r9
 800a08c:	d900      	bls.n	800a090 <__ssputs_r+0x84>
 800a08e:	464e      	mov	r6, r9
 800a090:	4632      	mov	r2, r6
 800a092:	4641      	mov	r1, r8
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	f7fc fa60 	bl	800655a <memmove>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	2000      	movs	r0, #0
 800a09e:	1b9b      	subs	r3, r3, r6
 800a0a0:	60a3      	str	r3, [r4, #8]
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	441e      	add	r6, r3
 800a0a6:	6026      	str	r6, [r4, #0]
 800a0a8:	e7dc      	b.n	800a064 <__ssputs_r+0x58>
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	f001 f84e 	bl	800b14c <_realloc_r>
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d1e2      	bne.n	800a07c <__ssputs_r+0x70>
 800a0b6:	6921      	ldr	r1, [r4, #16]
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	f7ff ff01 	bl	8009ec0 <_free_r>
 800a0be:	e7c8      	b.n	800a052 <__ssputs_r+0x46>

0800a0c0 <_svfiprintf_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	461d      	mov	r5, r3
 800a0c6:	898b      	ldrh	r3, [r1, #12]
 800a0c8:	b09d      	sub	sp, #116	; 0x74
 800a0ca:	061f      	lsls	r7, r3, #24
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4616      	mov	r6, r2
 800a0d2:	d50f      	bpl.n	800a0f4 <_svfiprintf_r+0x34>
 800a0d4:	690b      	ldr	r3, [r1, #16]
 800a0d6:	b96b      	cbnz	r3, 800a0f4 <_svfiprintf_r+0x34>
 800a0d8:	2140      	movs	r1, #64	; 0x40
 800a0da:	f7ff ff3d 	bl	8009f58 <_malloc_r>
 800a0de:	6020      	str	r0, [r4, #0]
 800a0e0:	6120      	str	r0, [r4, #16]
 800a0e2:	b928      	cbnz	r0, 800a0f0 <_svfiprintf_r+0x30>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	f8c8 3000 	str.w	r3, [r8]
 800a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ee:	e0c8      	b.n	800a282 <_svfiprintf_r+0x1c2>
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	6163      	str	r3, [r4, #20]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0fe:	2330      	movs	r3, #48	; 0x30
 800a100:	f04f 0b01 	mov.w	fp, #1
 800a104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a108:	9503      	str	r5, [sp, #12]
 800a10a:	4637      	mov	r7, r6
 800a10c:	463d      	mov	r5, r7
 800a10e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a112:	b10b      	cbz	r3, 800a118 <_svfiprintf_r+0x58>
 800a114:	2b25      	cmp	r3, #37	; 0x25
 800a116:	d13e      	bne.n	800a196 <_svfiprintf_r+0xd6>
 800a118:	ebb7 0a06 	subs.w	sl, r7, r6
 800a11c:	d00b      	beq.n	800a136 <_svfiprintf_r+0x76>
 800a11e:	4653      	mov	r3, sl
 800a120:	4632      	mov	r2, r6
 800a122:	4621      	mov	r1, r4
 800a124:	4640      	mov	r0, r8
 800a126:	f7ff ff71 	bl	800a00c <__ssputs_r>
 800a12a:	3001      	adds	r0, #1
 800a12c:	f000 80a4 	beq.w	800a278 <_svfiprintf_r+0x1b8>
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	4453      	add	r3, sl
 800a134:	9309      	str	r3, [sp, #36]	; 0x24
 800a136:	783b      	ldrb	r3, [r7, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 809d 	beq.w	800a278 <_svfiprintf_r+0x1b8>
 800a13e:	2300      	movs	r3, #0
 800a140:	f04f 32ff 	mov.w	r2, #4294967295
 800a144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	9307      	str	r3, [sp, #28]
 800a14c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a150:	931a      	str	r3, [sp, #104]	; 0x68
 800a152:	462f      	mov	r7, r5
 800a154:	2205      	movs	r2, #5
 800a156:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a15a:	4850      	ldr	r0, [pc, #320]	; (800a29c <_svfiprintf_r+0x1dc>)
 800a15c:	f7ff fa9c 	bl	8009698 <memchr>
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	b9d0      	cbnz	r0, 800a19a <_svfiprintf_r+0xda>
 800a164:	06d9      	lsls	r1, r3, #27
 800a166:	bf44      	itt	mi
 800a168:	2220      	movmi	r2, #32
 800a16a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a16e:	071a      	lsls	r2, r3, #28
 800a170:	bf44      	itt	mi
 800a172:	222b      	movmi	r2, #43	; 0x2b
 800a174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a178:	782a      	ldrb	r2, [r5, #0]
 800a17a:	2a2a      	cmp	r2, #42	; 0x2a
 800a17c:	d015      	beq.n	800a1aa <_svfiprintf_r+0xea>
 800a17e:	462f      	mov	r7, r5
 800a180:	2000      	movs	r0, #0
 800a182:	250a      	movs	r5, #10
 800a184:	9a07      	ldr	r2, [sp, #28]
 800a186:	4639      	mov	r1, r7
 800a188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a18c:	3b30      	subs	r3, #48	; 0x30
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d94d      	bls.n	800a22e <_svfiprintf_r+0x16e>
 800a192:	b1b8      	cbz	r0, 800a1c4 <_svfiprintf_r+0x104>
 800a194:	e00f      	b.n	800a1b6 <_svfiprintf_r+0xf6>
 800a196:	462f      	mov	r7, r5
 800a198:	e7b8      	b.n	800a10c <_svfiprintf_r+0x4c>
 800a19a:	4a40      	ldr	r2, [pc, #256]	; (800a29c <_svfiprintf_r+0x1dc>)
 800a19c:	463d      	mov	r5, r7
 800a19e:	1a80      	subs	r0, r0, r2
 800a1a0:	fa0b f000 	lsl.w	r0, fp, r0
 800a1a4:	4318      	orrs	r0, r3
 800a1a6:	9004      	str	r0, [sp, #16]
 800a1a8:	e7d3      	b.n	800a152 <_svfiprintf_r+0x92>
 800a1aa:	9a03      	ldr	r2, [sp, #12]
 800a1ac:	1d11      	adds	r1, r2, #4
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	9103      	str	r1, [sp, #12]
 800a1b2:	2a00      	cmp	r2, #0
 800a1b4:	db01      	blt.n	800a1ba <_svfiprintf_r+0xfa>
 800a1b6:	9207      	str	r2, [sp, #28]
 800a1b8:	e004      	b.n	800a1c4 <_svfiprintf_r+0x104>
 800a1ba:	4252      	negs	r2, r2
 800a1bc:	f043 0302 	orr.w	r3, r3, #2
 800a1c0:	9207      	str	r2, [sp, #28]
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	783b      	ldrb	r3, [r7, #0]
 800a1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a1c8:	d10c      	bne.n	800a1e4 <_svfiprintf_r+0x124>
 800a1ca:	787b      	ldrb	r3, [r7, #1]
 800a1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ce:	d133      	bne.n	800a238 <_svfiprintf_r+0x178>
 800a1d0:	9b03      	ldr	r3, [sp, #12]
 800a1d2:	3702      	adds	r7, #2
 800a1d4:	1d1a      	adds	r2, r3, #4
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	9203      	str	r2, [sp, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bfb8      	it	lt
 800a1de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1e2:	9305      	str	r3, [sp, #20]
 800a1e4:	4d2e      	ldr	r5, [pc, #184]	; (800a2a0 <_svfiprintf_r+0x1e0>)
 800a1e6:	2203      	movs	r2, #3
 800a1e8:	7839      	ldrb	r1, [r7, #0]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	f7ff fa54 	bl	8009698 <memchr>
 800a1f0:	b138      	cbz	r0, 800a202 <_svfiprintf_r+0x142>
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	1b40      	subs	r0, r0, r5
 800a1f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	3701      	adds	r7, #1
 800a1fe:	4303      	orrs	r3, r0
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	7839      	ldrb	r1, [r7, #0]
 800a204:	2206      	movs	r2, #6
 800a206:	4827      	ldr	r0, [pc, #156]	; (800a2a4 <_svfiprintf_r+0x1e4>)
 800a208:	1c7e      	adds	r6, r7, #1
 800a20a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a20e:	f7ff fa43 	bl	8009698 <memchr>
 800a212:	2800      	cmp	r0, #0
 800a214:	d038      	beq.n	800a288 <_svfiprintf_r+0x1c8>
 800a216:	4b24      	ldr	r3, [pc, #144]	; (800a2a8 <_svfiprintf_r+0x1e8>)
 800a218:	bb13      	cbnz	r3, 800a260 <_svfiprintf_r+0x1a0>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	3307      	adds	r3, #7
 800a21e:	f023 0307 	bic.w	r3, r3, #7
 800a222:	3308      	adds	r3, #8
 800a224:	9303      	str	r3, [sp, #12]
 800a226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a228:	444b      	add	r3, r9
 800a22a:	9309      	str	r3, [sp, #36]	; 0x24
 800a22c:	e76d      	b.n	800a10a <_svfiprintf_r+0x4a>
 800a22e:	fb05 3202 	mla	r2, r5, r2, r3
 800a232:	2001      	movs	r0, #1
 800a234:	460f      	mov	r7, r1
 800a236:	e7a6      	b.n	800a186 <_svfiprintf_r+0xc6>
 800a238:	2300      	movs	r3, #0
 800a23a:	250a      	movs	r5, #10
 800a23c:	4619      	mov	r1, r3
 800a23e:	3701      	adds	r7, #1
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	4638      	mov	r0, r7
 800a244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a248:	3a30      	subs	r2, #48	; 0x30
 800a24a:	2a09      	cmp	r2, #9
 800a24c:	d903      	bls.n	800a256 <_svfiprintf_r+0x196>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0c8      	beq.n	800a1e4 <_svfiprintf_r+0x124>
 800a252:	9105      	str	r1, [sp, #20]
 800a254:	e7c6      	b.n	800a1e4 <_svfiprintf_r+0x124>
 800a256:	fb05 2101 	mla	r1, r5, r1, r2
 800a25a:	2301      	movs	r3, #1
 800a25c:	4607      	mov	r7, r0
 800a25e:	e7f0      	b.n	800a242 <_svfiprintf_r+0x182>
 800a260:	ab03      	add	r3, sp, #12
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4622      	mov	r2, r4
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <_svfiprintf_r+0x1ec>)
 800a268:	a904      	add	r1, sp, #16
 800a26a:	4640      	mov	r0, r8
 800a26c:	f7fc fa28 	bl	80066c0 <_printf_float>
 800a270:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a274:	4681      	mov	r9, r0
 800a276:	d1d6      	bne.n	800a226 <_svfiprintf_r+0x166>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	065b      	lsls	r3, r3, #25
 800a27c:	f53f af35 	bmi.w	800a0ea <_svfiprintf_r+0x2a>
 800a280:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a282:	b01d      	add	sp, #116	; 0x74
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4622      	mov	r2, r4
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <_svfiprintf_r+0x1ec>)
 800a290:	a904      	add	r1, sp, #16
 800a292:	4640      	mov	r0, r8
 800a294:	f7fc fcc0 	bl	8006c18 <_printf_i>
 800a298:	e7ea      	b.n	800a270 <_svfiprintf_r+0x1b0>
 800a29a:	bf00      	nop
 800a29c:	0800d6bc 	.word	0x0800d6bc
 800a2a0:	0800d6c2 	.word	0x0800d6c2
 800a2a4:	0800d6c6 	.word	0x0800d6c6
 800a2a8:	080066c1 	.word	0x080066c1
 800a2ac:	0800a00d 	.word	0x0800a00d

0800a2b0 <_sungetc_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	1c4b      	adds	r3, r1, #1
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	d103      	bne.n	800a2c0 <_sungetc_r+0x10>
 800a2b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a2bc:	4628      	mov	r0, r5
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	8993      	ldrh	r3, [r2, #12]
 800a2c2:	b2cd      	uxtb	r5, r1
 800a2c4:	f023 0320 	bic.w	r3, r3, #32
 800a2c8:	8193      	strh	r3, [r2, #12]
 800a2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2cc:	6852      	ldr	r2, [r2, #4]
 800a2ce:	b18b      	cbz	r3, 800a2f4 <_sungetc_r+0x44>
 800a2d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	dd08      	ble.n	800a2e8 <_sungetc_r+0x38>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	1e5a      	subs	r2, r3, #1
 800a2da:	6022      	str	r2, [r4, #0]
 800a2dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	6063      	str	r3, [r4, #4]
 800a2e6:	e7e9      	b.n	800a2bc <_sungetc_r+0xc>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f000 fd13 	bl	800ad14 <__submore>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0f1      	beq.n	800a2d6 <_sungetc_r+0x26>
 800a2f2:	e7e1      	b.n	800a2b8 <_sungetc_r+0x8>
 800a2f4:	6921      	ldr	r1, [r4, #16]
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	b151      	cbz	r1, 800a310 <_sungetc_r+0x60>
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	d208      	bcs.n	800a310 <_sungetc_r+0x60>
 800a2fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a302:	42a9      	cmp	r1, r5
 800a304:	d104      	bne.n	800a310 <_sungetc_r+0x60>
 800a306:	3b01      	subs	r3, #1
 800a308:	3201      	adds	r2, #1
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	6062      	str	r2, [r4, #4]
 800a30e:	e7d5      	b.n	800a2bc <_sungetc_r+0xc>
 800a310:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a318:	6363      	str	r3, [r4, #52]	; 0x34
 800a31a:	2303      	movs	r3, #3
 800a31c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a31e:	4623      	mov	r3, r4
 800a320:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	2301      	movs	r3, #1
 800a328:	e7dc      	b.n	800a2e4 <_sungetc_r+0x34>

0800a32a <__ssrefill_r>:
 800a32a:	b510      	push	{r4, lr}
 800a32c:	460c      	mov	r4, r1
 800a32e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a330:	b169      	cbz	r1, 800a34e <__ssrefill_r+0x24>
 800a332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a336:	4299      	cmp	r1, r3
 800a338:	d001      	beq.n	800a33e <__ssrefill_r+0x14>
 800a33a:	f7ff fdc1 	bl	8009ec0 <_free_r>
 800a33e:	2000      	movs	r0, #0
 800a340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a342:	6360      	str	r0, [r4, #52]	; 0x34
 800a344:	6063      	str	r3, [r4, #4]
 800a346:	b113      	cbz	r3, 800a34e <__ssrefill_r+0x24>
 800a348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	2300      	movs	r3, #0
 800a358:	6063      	str	r3, [r4, #4]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0320 	orr.w	r3, r3, #32
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	e7f3      	b.n	800a34c <__ssrefill_r+0x22>

0800a364 <__ssvfiscanf_r>:
 800a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	2100      	movs	r1, #0
 800a36c:	4606      	mov	r6, r0
 800a36e:	4692      	mov	sl, r2
 800a370:	270a      	movs	r7, #10
 800a372:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a376:	9144      	str	r1, [sp, #272]	; 0x110
 800a378:	9145      	str	r1, [sp, #276]	; 0x114
 800a37a:	499e      	ldr	r1, [pc, #632]	; (800a5f4 <__ssvfiscanf_r+0x290>)
 800a37c:	f10d 0804 	add.w	r8, sp, #4
 800a380:	91a0      	str	r1, [sp, #640]	; 0x280
 800a382:	499d      	ldr	r1, [pc, #628]	; (800a5f8 <__ssvfiscanf_r+0x294>)
 800a384:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800a5fc <__ssvfiscanf_r+0x298>
 800a388:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a38c:	91a1      	str	r1, [sp, #644]	; 0x284
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	f89a 3000 	ldrb.w	r3, [sl]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 812a 	beq.w	800a5ee <__ssvfiscanf_r+0x28a>
 800a39a:	4655      	mov	r5, sl
 800a39c:	f7ff f932 	bl	8009604 <__locale_ctype_ptr>
 800a3a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a3a4:	4458      	add	r0, fp
 800a3a6:	7843      	ldrb	r3, [r0, #1]
 800a3a8:	f013 0308 	ands.w	r3, r3, #8
 800a3ac:	d01c      	beq.n	800a3e8 <__ssvfiscanf_r+0x84>
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dd12      	ble.n	800a3da <__ssvfiscanf_r+0x76>
 800a3b4:	f7ff f926 	bl	8009604 <__locale_ctype_ptr>
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	781a      	ldrb	r2, [r3, #0]
 800a3bc:	4410      	add	r0, r2
 800a3be:	7842      	ldrb	r2, [r0, #1]
 800a3c0:	0712      	lsls	r2, r2, #28
 800a3c2:	d401      	bmi.n	800a3c8 <__ssvfiscanf_r+0x64>
 800a3c4:	46aa      	mov	sl, r5
 800a3c6:	e7e3      	b.n	800a390 <__ssvfiscanf_r+0x2c>
 800a3c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	3201      	adds	r2, #1
 800a3ce:	9245      	str	r2, [sp, #276]	; 0x114
 800a3d0:	6862      	ldr	r2, [r4, #4]
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	3a01      	subs	r2, #1
 800a3d6:	6062      	str	r2, [r4, #4]
 800a3d8:	e7e9      	b.n	800a3ae <__ssvfiscanf_r+0x4a>
 800a3da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4798      	blx	r3
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d0e6      	beq.n	800a3b4 <__ssvfiscanf_r+0x50>
 800a3e6:	e7ed      	b.n	800a3c4 <__ssvfiscanf_r+0x60>
 800a3e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a3ec:	f040 8082 	bne.w	800a4f4 <__ssvfiscanf_r+0x190>
 800a3f0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a3f2:	9341      	str	r3, [sp, #260]	; 0x104
 800a3f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fa:	d103      	bne.n	800a404 <__ssvfiscanf_r+0xa0>
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	f10a 0502 	add.w	r5, sl, #2
 800a402:	9341      	str	r3, [sp, #260]	; 0x104
 800a404:	46aa      	mov	sl, r5
 800a406:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a40a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a40e:	2a09      	cmp	r2, #9
 800a410:	d922      	bls.n	800a458 <__ssvfiscanf_r+0xf4>
 800a412:	2203      	movs	r2, #3
 800a414:	4879      	ldr	r0, [pc, #484]	; (800a5fc <__ssvfiscanf_r+0x298>)
 800a416:	f7ff f93f 	bl	8009698 <memchr>
 800a41a:	b138      	cbz	r0, 800a42c <__ssvfiscanf_r+0xc8>
 800a41c:	eba0 0309 	sub.w	r3, r0, r9
 800a420:	2001      	movs	r0, #1
 800a422:	46aa      	mov	sl, r5
 800a424:	4098      	lsls	r0, r3
 800a426:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a428:	4318      	orrs	r0, r3
 800a42a:	9041      	str	r0, [sp, #260]	; 0x104
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	f10a 0501 	add.w	r5, sl, #1
 800a434:	2b67      	cmp	r3, #103	; 0x67
 800a436:	d82b      	bhi.n	800a490 <__ssvfiscanf_r+0x12c>
 800a438:	2b65      	cmp	r3, #101	; 0x65
 800a43a:	f080 809f 	bcs.w	800a57c <__ssvfiscanf_r+0x218>
 800a43e:	2b47      	cmp	r3, #71	; 0x47
 800a440:	d810      	bhi.n	800a464 <__ssvfiscanf_r+0x100>
 800a442:	2b45      	cmp	r3, #69	; 0x45
 800a444:	f080 809a 	bcs.w	800a57c <__ssvfiscanf_r+0x218>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d06c      	beq.n	800a526 <__ssvfiscanf_r+0x1c2>
 800a44c:	2b25      	cmp	r3, #37	; 0x25
 800a44e:	d051      	beq.n	800a4f4 <__ssvfiscanf_r+0x190>
 800a450:	2303      	movs	r3, #3
 800a452:	9742      	str	r7, [sp, #264]	; 0x108
 800a454:	9347      	str	r3, [sp, #284]	; 0x11c
 800a456:	e027      	b.n	800a4a8 <__ssvfiscanf_r+0x144>
 800a458:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a45a:	fb07 1303 	mla	r3, r7, r3, r1
 800a45e:	3b30      	subs	r3, #48	; 0x30
 800a460:	9343      	str	r3, [sp, #268]	; 0x10c
 800a462:	e7cf      	b.n	800a404 <__ssvfiscanf_r+0xa0>
 800a464:	2b5b      	cmp	r3, #91	; 0x5b
 800a466:	d06a      	beq.n	800a53e <__ssvfiscanf_r+0x1da>
 800a468:	d80c      	bhi.n	800a484 <__ssvfiscanf_r+0x120>
 800a46a:	2b58      	cmp	r3, #88	; 0x58
 800a46c:	d1f0      	bne.n	800a450 <__ssvfiscanf_r+0xec>
 800a46e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a474:	9241      	str	r2, [sp, #260]	; 0x104
 800a476:	2210      	movs	r2, #16
 800a478:	9242      	str	r2, [sp, #264]	; 0x108
 800a47a:	2b6e      	cmp	r3, #110	; 0x6e
 800a47c:	bf8c      	ite	hi
 800a47e:	2304      	movhi	r3, #4
 800a480:	2303      	movls	r3, #3
 800a482:	e010      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a484:	2b63      	cmp	r3, #99	; 0x63
 800a486:	d065      	beq.n	800a554 <__ssvfiscanf_r+0x1f0>
 800a488:	2b64      	cmp	r3, #100	; 0x64
 800a48a:	d1e1      	bne.n	800a450 <__ssvfiscanf_r+0xec>
 800a48c:	9742      	str	r7, [sp, #264]	; 0x108
 800a48e:	e7f4      	b.n	800a47a <__ssvfiscanf_r+0x116>
 800a490:	2b70      	cmp	r3, #112	; 0x70
 800a492:	d04b      	beq.n	800a52c <__ssvfiscanf_r+0x1c8>
 800a494:	d826      	bhi.n	800a4e4 <__ssvfiscanf_r+0x180>
 800a496:	2b6e      	cmp	r3, #110	; 0x6e
 800a498:	d062      	beq.n	800a560 <__ssvfiscanf_r+0x1fc>
 800a49a:	d84c      	bhi.n	800a536 <__ssvfiscanf_r+0x1d2>
 800a49c:	2b69      	cmp	r3, #105	; 0x69
 800a49e:	d1d7      	bne.n	800a450 <__ssvfiscanf_r+0xec>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9342      	str	r3, [sp, #264]	; 0x108
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	9347      	str	r3, [sp, #284]	; 0x11c
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dd68      	ble.n	800a580 <__ssvfiscanf_r+0x21c>
 800a4ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a4b0:	0659      	lsls	r1, r3, #25
 800a4b2:	d407      	bmi.n	800a4c4 <__ssvfiscanf_r+0x160>
 800a4b4:	f7ff f8a6 	bl	8009604 <__locale_ctype_ptr>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	781a      	ldrb	r2, [r3, #0]
 800a4bc:	4410      	add	r0, r2
 800a4be:	7842      	ldrb	r2, [r0, #1]
 800a4c0:	0712      	lsls	r2, r2, #28
 800a4c2:	d464      	bmi.n	800a58e <__ssvfiscanf_r+0x22a>
 800a4c4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	dc73      	bgt.n	800a5b2 <__ssvfiscanf_r+0x24e>
 800a4ca:	466b      	mov	r3, sp
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	a941      	add	r1, sp, #260	; 0x104
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f9d5 	bl	800a880 <_scanf_chars>
 800a4d6:	2801      	cmp	r0, #1
 800a4d8:	f000 8089 	beq.w	800a5ee <__ssvfiscanf_r+0x28a>
 800a4dc:	2802      	cmp	r0, #2
 800a4de:	f47f af71 	bne.w	800a3c4 <__ssvfiscanf_r+0x60>
 800a4e2:	e01d      	b.n	800a520 <__ssvfiscanf_r+0x1bc>
 800a4e4:	2b75      	cmp	r3, #117	; 0x75
 800a4e6:	d0d1      	beq.n	800a48c <__ssvfiscanf_r+0x128>
 800a4e8:	2b78      	cmp	r3, #120	; 0x78
 800a4ea:	d0c0      	beq.n	800a46e <__ssvfiscanf_r+0x10a>
 800a4ec:	2b73      	cmp	r3, #115	; 0x73
 800a4ee:	d1af      	bne.n	800a450 <__ssvfiscanf_r+0xec>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e7d8      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a4f4:	6863      	ldr	r3, [r4, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd0c      	ble.n	800a514 <__ssvfiscanf_r+0x1b0>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	455a      	cmp	r2, fp
 800a500:	d175      	bne.n	800a5ee <__ssvfiscanf_r+0x28a>
 800a502:	3301      	adds	r3, #1
 800a504:	6862      	ldr	r2, [r4, #4]
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a50a:	3a01      	subs	r2, #1
 800a50c:	3301      	adds	r3, #1
 800a50e:	6062      	str	r2, [r4, #4]
 800a510:	9345      	str	r3, [sp, #276]	; 0x114
 800a512:	e757      	b.n	800a3c4 <__ssvfiscanf_r+0x60>
 800a514:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a516:	4621      	mov	r1, r4
 800a518:	4630      	mov	r0, r6
 800a51a:	4798      	blx	r3
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0ec      	beq.n	800a4fa <__ssvfiscanf_r+0x196>
 800a520:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a522:	2800      	cmp	r0, #0
 800a524:	d159      	bne.n	800a5da <__ssvfiscanf_r+0x276>
 800a526:	f04f 30ff 	mov.w	r0, #4294967295
 800a52a:	e05c      	b.n	800a5e6 <__ssvfiscanf_r+0x282>
 800a52c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a52e:	f042 0220 	orr.w	r2, r2, #32
 800a532:	9241      	str	r2, [sp, #260]	; 0x104
 800a534:	e79b      	b.n	800a46e <__ssvfiscanf_r+0x10a>
 800a536:	2308      	movs	r3, #8
 800a538:	9342      	str	r3, [sp, #264]	; 0x108
 800a53a:	2304      	movs	r3, #4
 800a53c:	e7b3      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a53e:	4629      	mov	r1, r5
 800a540:	4640      	mov	r0, r8
 800a542:	f000 fb17 	bl	800ab74 <__sccl>
 800a546:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a548:	4605      	mov	r5, r0
 800a54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54e:	9341      	str	r3, [sp, #260]	; 0x104
 800a550:	2301      	movs	r3, #1
 800a552:	e7a8      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a554:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55a:	9341      	str	r3, [sp, #260]	; 0x104
 800a55c:	2300      	movs	r3, #0
 800a55e:	e7a2      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a560:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a562:	06c3      	lsls	r3, r0, #27
 800a564:	f53f af2e 	bmi.w	800a3c4 <__ssvfiscanf_r+0x60>
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a56c:	1d19      	adds	r1, r3, #4
 800a56e:	9100      	str	r1, [sp, #0]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	07c0      	lsls	r0, r0, #31
 800a574:	bf4c      	ite	mi
 800a576:	801a      	strhmi	r2, [r3, #0]
 800a578:	601a      	strpl	r2, [r3, #0]
 800a57a:	e723      	b.n	800a3c4 <__ssvfiscanf_r+0x60>
 800a57c:	2305      	movs	r3, #5
 800a57e:	e792      	b.n	800a4a6 <__ssvfiscanf_r+0x142>
 800a580:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a582:	4621      	mov	r1, r4
 800a584:	4630      	mov	r0, r6
 800a586:	4798      	blx	r3
 800a588:	2800      	cmp	r0, #0
 800a58a:	d090      	beq.n	800a4ae <__ssvfiscanf_r+0x14a>
 800a58c:	e7c8      	b.n	800a520 <__ssvfiscanf_r+0x1bc>
 800a58e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a590:	3201      	adds	r2, #1
 800a592:	9245      	str	r2, [sp, #276]	; 0x114
 800a594:	6862      	ldr	r2, [r4, #4]
 800a596:	3a01      	subs	r2, #1
 800a598:	2a00      	cmp	r2, #0
 800a59a:	6062      	str	r2, [r4, #4]
 800a59c:	dd02      	ble.n	800a5a4 <__ssvfiscanf_r+0x240>
 800a59e:	3301      	adds	r3, #1
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	e787      	b.n	800a4b4 <__ssvfiscanf_r+0x150>
 800a5a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4798      	blx	r3
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d081      	beq.n	800a4b4 <__ssvfiscanf_r+0x150>
 800a5b0:	e7b6      	b.n	800a520 <__ssvfiscanf_r+0x1bc>
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	dc06      	bgt.n	800a5c4 <__ssvfiscanf_r+0x260>
 800a5b6:	466b      	mov	r3, sp
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	a941      	add	r1, sp, #260	; 0x104
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f000 f9c1 	bl	800a944 <_scanf_i>
 800a5c2:	e788      	b.n	800a4d6 <__ssvfiscanf_r+0x172>
 800a5c4:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <__ssvfiscanf_r+0x29c>)
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f43f aefc 	beq.w	800a3c4 <__ssvfiscanf_r+0x60>
 800a5cc:	466b      	mov	r3, sp
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	a941      	add	r1, sp, #260	; 0x104
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7fc fc32 	bl	8006e3c <_scanf_float>
 800a5d8:	e77d      	b.n	800a4d6 <__ssvfiscanf_r+0x172>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a5e0:	bf18      	it	ne
 800a5e2:	f04f 30ff 	movne.w	r0, #4294967295
 800a5e6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a5f0:	e7f9      	b.n	800a5e6 <__ssvfiscanf_r+0x282>
 800a5f2:	bf00      	nop
 800a5f4:	0800a2b1 	.word	0x0800a2b1
 800a5f8:	0800a32b 	.word	0x0800a32b
 800a5fc:	0800d6c2 	.word	0x0800d6c2
 800a600:	08006e3d 	.word	0x08006e3d

0800a604 <__sfputc_r>:
 800a604:	6893      	ldr	r3, [r2, #8]
 800a606:	b410      	push	{r4}
 800a608:	3b01      	subs	r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	6093      	str	r3, [r2, #8]
 800a60e:	da07      	bge.n	800a620 <__sfputc_r+0x1c>
 800a610:	6994      	ldr	r4, [r2, #24]
 800a612:	42a3      	cmp	r3, r4
 800a614:	db01      	blt.n	800a61a <__sfputc_r+0x16>
 800a616:	290a      	cmp	r1, #10
 800a618:	d102      	bne.n	800a620 <__sfputc_r+0x1c>
 800a61a:	bc10      	pop	{r4}
 800a61c:	f000 bbb2 	b.w	800ad84 <__swbuf_r>
 800a620:	6813      	ldr	r3, [r2, #0]
 800a622:	1c58      	adds	r0, r3, #1
 800a624:	6010      	str	r0, [r2, #0]
 800a626:	7019      	strb	r1, [r3, #0]
 800a628:	4608      	mov	r0, r1
 800a62a:	bc10      	pop	{r4}
 800a62c:	4770      	bx	lr

0800a62e <__sfputs_r>:
 800a62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a630:	4606      	mov	r6, r0
 800a632:	460f      	mov	r7, r1
 800a634:	4614      	mov	r4, r2
 800a636:	18d5      	adds	r5, r2, r3
 800a638:	42ac      	cmp	r4, r5
 800a63a:	d101      	bne.n	800a640 <__sfputs_r+0x12>
 800a63c:	2000      	movs	r0, #0
 800a63e:	e007      	b.n	800a650 <__sfputs_r+0x22>
 800a640:	463a      	mov	r2, r7
 800a642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a646:	4630      	mov	r0, r6
 800a648:	f7ff ffdc 	bl	800a604 <__sfputc_r>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d1f3      	bne.n	800a638 <__sfputs_r+0xa>
 800a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a654 <_vfiprintf_r>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	460c      	mov	r4, r1
 800a65a:	b09d      	sub	sp, #116	; 0x74
 800a65c:	4617      	mov	r7, r2
 800a65e:	461d      	mov	r5, r3
 800a660:	4606      	mov	r6, r0
 800a662:	b118      	cbz	r0, 800a66c <_vfiprintf_r+0x18>
 800a664:	6983      	ldr	r3, [r0, #24]
 800a666:	b90b      	cbnz	r3, 800a66c <_vfiprintf_r+0x18>
 800a668:	f7fe fc16 	bl	8008e98 <__sinit>
 800a66c:	4b7c      	ldr	r3, [pc, #496]	; (800a860 <_vfiprintf_r+0x20c>)
 800a66e:	429c      	cmp	r4, r3
 800a670:	d158      	bne.n	800a724 <_vfiprintf_r+0xd0>
 800a672:	6874      	ldr	r4, [r6, #4]
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	0718      	lsls	r0, r3, #28
 800a678:	d55e      	bpl.n	800a738 <_vfiprintf_r+0xe4>
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d05b      	beq.n	800a738 <_vfiprintf_r+0xe4>
 800a680:	2300      	movs	r3, #0
 800a682:	9309      	str	r3, [sp, #36]	; 0x24
 800a684:	2320      	movs	r3, #32
 800a686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a68a:	2330      	movs	r3, #48	; 0x30
 800a68c:	f04f 0b01 	mov.w	fp, #1
 800a690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a694:	9503      	str	r5, [sp, #12]
 800a696:	46b8      	mov	r8, r7
 800a698:	4645      	mov	r5, r8
 800a69a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a69e:	b10b      	cbz	r3, 800a6a4 <_vfiprintf_r+0x50>
 800a6a0:	2b25      	cmp	r3, #37	; 0x25
 800a6a2:	d154      	bne.n	800a74e <_vfiprintf_r+0xfa>
 800a6a4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a6a8:	d00b      	beq.n	800a6c2 <_vfiprintf_r+0x6e>
 800a6aa:	4653      	mov	r3, sl
 800a6ac:	463a      	mov	r2, r7
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff ffbc 	bl	800a62e <__sfputs_r>
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	f000 80c2 	beq.w	800a840 <_vfiprintf_r+0x1ec>
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	4453      	add	r3, sl
 800a6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c2:	f898 3000 	ldrb.w	r3, [r8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f000 80ba 	beq.w	800a840 <_vfiprintf_r+0x1ec>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6d6:	9304      	str	r3, [sp, #16]
 800a6d8:	9307      	str	r3, [sp, #28]
 800a6da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6de:	931a      	str	r3, [sp, #104]	; 0x68
 800a6e0:	46a8      	mov	r8, r5
 800a6e2:	2205      	movs	r2, #5
 800a6e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a6e8:	485e      	ldr	r0, [pc, #376]	; (800a864 <_vfiprintf_r+0x210>)
 800a6ea:	f7fe ffd5 	bl	8009698 <memchr>
 800a6ee:	9b04      	ldr	r3, [sp, #16]
 800a6f0:	bb78      	cbnz	r0, 800a752 <_vfiprintf_r+0xfe>
 800a6f2:	06d9      	lsls	r1, r3, #27
 800a6f4:	bf44      	itt	mi
 800a6f6:	2220      	movmi	r2, #32
 800a6f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6fc:	071a      	lsls	r2, r3, #28
 800a6fe:	bf44      	itt	mi
 800a700:	222b      	movmi	r2, #43	; 0x2b
 800a702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a706:	782a      	ldrb	r2, [r5, #0]
 800a708:	2a2a      	cmp	r2, #42	; 0x2a
 800a70a:	d02a      	beq.n	800a762 <_vfiprintf_r+0x10e>
 800a70c:	46a8      	mov	r8, r5
 800a70e:	2000      	movs	r0, #0
 800a710:	250a      	movs	r5, #10
 800a712:	9a07      	ldr	r2, [sp, #28]
 800a714:	4641      	mov	r1, r8
 800a716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a71a:	3b30      	subs	r3, #48	; 0x30
 800a71c:	2b09      	cmp	r3, #9
 800a71e:	d969      	bls.n	800a7f4 <_vfiprintf_r+0x1a0>
 800a720:	b360      	cbz	r0, 800a77c <_vfiprintf_r+0x128>
 800a722:	e024      	b.n	800a76e <_vfiprintf_r+0x11a>
 800a724:	4b50      	ldr	r3, [pc, #320]	; (800a868 <_vfiprintf_r+0x214>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <_vfiprintf_r+0xda>
 800a72a:	68b4      	ldr	r4, [r6, #8]
 800a72c:	e7a2      	b.n	800a674 <_vfiprintf_r+0x20>
 800a72e:	4b4f      	ldr	r3, [pc, #316]	; (800a86c <_vfiprintf_r+0x218>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68f4      	ldreq	r4, [r6, #12]
 800a736:	e79d      	b.n	800a674 <_vfiprintf_r+0x20>
 800a738:	4621      	mov	r1, r4
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 fb82 	bl	800ae44 <__swsetup_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	d09d      	beq.n	800a680 <_vfiprintf_r+0x2c>
 800a744:	f04f 30ff 	mov.w	r0, #4294967295
 800a748:	b01d      	add	sp, #116	; 0x74
 800a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74e:	46a8      	mov	r8, r5
 800a750:	e7a2      	b.n	800a698 <_vfiprintf_r+0x44>
 800a752:	4a44      	ldr	r2, [pc, #272]	; (800a864 <_vfiprintf_r+0x210>)
 800a754:	4645      	mov	r5, r8
 800a756:	1a80      	subs	r0, r0, r2
 800a758:	fa0b f000 	lsl.w	r0, fp, r0
 800a75c:	4318      	orrs	r0, r3
 800a75e:	9004      	str	r0, [sp, #16]
 800a760:	e7be      	b.n	800a6e0 <_vfiprintf_r+0x8c>
 800a762:	9a03      	ldr	r2, [sp, #12]
 800a764:	1d11      	adds	r1, r2, #4
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	9103      	str	r1, [sp, #12]
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	db01      	blt.n	800a772 <_vfiprintf_r+0x11e>
 800a76e:	9207      	str	r2, [sp, #28]
 800a770:	e004      	b.n	800a77c <_vfiprintf_r+0x128>
 800a772:	4252      	negs	r2, r2
 800a774:	f043 0302 	orr.w	r3, r3, #2
 800a778:	9207      	str	r2, [sp, #28]
 800a77a:	9304      	str	r3, [sp, #16]
 800a77c:	f898 3000 	ldrb.w	r3, [r8]
 800a780:	2b2e      	cmp	r3, #46	; 0x2e
 800a782:	d10e      	bne.n	800a7a2 <_vfiprintf_r+0x14e>
 800a784:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d138      	bne.n	800a7fe <_vfiprintf_r+0x1aa>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	f108 0802 	add.w	r8, r8, #2
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9203      	str	r2, [sp, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bfb8      	it	lt
 800a79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	4d33      	ldr	r5, [pc, #204]	; (800a870 <_vfiprintf_r+0x21c>)
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	f898 1000 	ldrb.w	r1, [r8]
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f7fe ff74 	bl	8009698 <memchr>
 800a7b0:	b140      	cbz	r0, 800a7c4 <_vfiprintf_r+0x170>
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	1b40      	subs	r0, r0, r5
 800a7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	f108 0801 	add.w	r8, r8, #1
 800a7c0:	4303      	orrs	r3, r0
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	f898 1000 	ldrb.w	r1, [r8]
 800a7c8:	2206      	movs	r2, #6
 800a7ca:	482a      	ldr	r0, [pc, #168]	; (800a874 <_vfiprintf_r+0x220>)
 800a7cc:	f108 0701 	add.w	r7, r8, #1
 800a7d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d4:	f7fe ff60 	bl	8009698 <memchr>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d037      	beq.n	800a84c <_vfiprintf_r+0x1f8>
 800a7dc:	4b26      	ldr	r3, [pc, #152]	; (800a878 <_vfiprintf_r+0x224>)
 800a7de:	bb1b      	cbnz	r3, 800a828 <_vfiprintf_r+0x1d4>
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	3307      	adds	r3, #7
 800a7e4:	f023 0307 	bic.w	r3, r3, #7
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ee:	444b      	add	r3, r9
 800a7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f2:	e750      	b.n	800a696 <_vfiprintf_r+0x42>
 800a7f4:	fb05 3202 	mla	r2, r5, r2, r3
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	4688      	mov	r8, r1
 800a7fc:	e78a      	b.n	800a714 <_vfiprintf_r+0xc0>
 800a7fe:	2300      	movs	r3, #0
 800a800:	250a      	movs	r5, #10
 800a802:	4619      	mov	r1, r3
 800a804:	f108 0801 	add.w	r8, r8, #1
 800a808:	9305      	str	r3, [sp, #20]
 800a80a:	4640      	mov	r0, r8
 800a80c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a810:	3a30      	subs	r2, #48	; 0x30
 800a812:	2a09      	cmp	r2, #9
 800a814:	d903      	bls.n	800a81e <_vfiprintf_r+0x1ca>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0c3      	beq.n	800a7a2 <_vfiprintf_r+0x14e>
 800a81a:	9105      	str	r1, [sp, #20]
 800a81c:	e7c1      	b.n	800a7a2 <_vfiprintf_r+0x14e>
 800a81e:	fb05 2101 	mla	r1, r5, r1, r2
 800a822:	2301      	movs	r3, #1
 800a824:	4680      	mov	r8, r0
 800a826:	e7f0      	b.n	800a80a <_vfiprintf_r+0x1b6>
 800a828:	ab03      	add	r3, sp, #12
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	4622      	mov	r2, r4
 800a82e:	4b13      	ldr	r3, [pc, #76]	; (800a87c <_vfiprintf_r+0x228>)
 800a830:	a904      	add	r1, sp, #16
 800a832:	4630      	mov	r0, r6
 800a834:	f7fb ff44 	bl	80066c0 <_printf_float>
 800a838:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a83c:	4681      	mov	r9, r0
 800a83e:	d1d5      	bne.n	800a7ec <_vfiprintf_r+0x198>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	065b      	lsls	r3, r3, #25
 800a844:	f53f af7e 	bmi.w	800a744 <_vfiprintf_r+0xf0>
 800a848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a84a:	e77d      	b.n	800a748 <_vfiprintf_r+0xf4>
 800a84c:	ab03      	add	r3, sp, #12
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	4622      	mov	r2, r4
 800a852:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <_vfiprintf_r+0x228>)
 800a854:	a904      	add	r1, sp, #16
 800a856:	4630      	mov	r0, r6
 800a858:	f7fc f9de 	bl	8006c18 <_printf_i>
 800a85c:	e7ec      	b.n	800a838 <_vfiprintf_r+0x1e4>
 800a85e:	bf00      	nop
 800a860:	0800d574 	.word	0x0800d574
 800a864:	0800d6bc 	.word	0x0800d6bc
 800a868:	0800d594 	.word	0x0800d594
 800a86c:	0800d554 	.word	0x0800d554
 800a870:	0800d6c2 	.word	0x0800d6c2
 800a874:	0800d6c6 	.word	0x0800d6c6
 800a878:	080066c1 	.word	0x080066c1
 800a87c:	0800a62f 	.word	0x0800a62f

0800a880 <_scanf_chars>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	4615      	mov	r5, r2
 800a886:	688a      	ldr	r2, [r1, #8]
 800a888:	4680      	mov	r8, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b932      	cbnz	r2, 800a89c <_scanf_chars+0x1c>
 800a88e:	698a      	ldr	r2, [r1, #24]
 800a890:	2a00      	cmp	r2, #0
 800a892:	bf14      	ite	ne
 800a894:	f04f 32ff 	movne.w	r2, #4294967295
 800a898:	2201      	moveq	r2, #1
 800a89a:	608a      	str	r2, [r1, #8]
 800a89c:	2600      	movs	r6, #0
 800a89e:	6822      	ldr	r2, [r4, #0]
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf5f      	itttt	pl
 800a8a4:	681a      	ldrpl	r2, [r3, #0]
 800a8a6:	1d11      	addpl	r1, r2, #4
 800a8a8:	6019      	strpl	r1, [r3, #0]
 800a8aa:	6817      	ldrpl	r7, [r2, #0]
 800a8ac:	69a3      	ldr	r3, [r4, #24]
 800a8ae:	b1db      	cbz	r3, 800a8e8 <_scanf_chars+0x68>
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d107      	bne.n	800a8c4 <_scanf_chars+0x44>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	6962      	ldr	r2, [r4, #20]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	5cd3      	ldrb	r3, [r2, r3]
 800a8bc:	b9a3      	cbnz	r3, 800a8e8 <_scanf_chars+0x68>
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	d131      	bne.n	800a926 <_scanf_chars+0xa6>
 800a8c2:	e006      	b.n	800a8d2 <_scanf_chars+0x52>
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d007      	beq.n	800a8d8 <_scanf_chars+0x58>
 800a8c8:	2e00      	cmp	r6, #0
 800a8ca:	d12c      	bne.n	800a926 <_scanf_chars+0xa6>
 800a8cc:	69a3      	ldr	r3, [r4, #24]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d129      	bne.n	800a926 <_scanf_chars+0xa6>
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d8:	f7fe fe94 	bl	8009604 <__locale_ctype_ptr>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4418      	add	r0, r3
 800a8e2:	7843      	ldrb	r3, [r0, #1]
 800a8e4:	071b      	lsls	r3, r3, #28
 800a8e6:	d4ef      	bmi.n	800a8c8 <_scanf_chars+0x48>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	3601      	adds	r6, #1
 800a8ec:	06da      	lsls	r2, r3, #27
 800a8ee:	bf5e      	ittt	pl
 800a8f0:	682b      	ldrpl	r3, [r5, #0]
 800a8f2:	781b      	ldrbpl	r3, [r3, #0]
 800a8f4:	703b      	strbpl	r3, [r7, #0]
 800a8f6:	682a      	ldr	r2, [r5, #0]
 800a8f8:	686b      	ldr	r3, [r5, #4]
 800a8fa:	f102 0201 	add.w	r2, r2, #1
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	68a2      	ldr	r2, [r4, #8]
 800a902:	f103 33ff 	add.w	r3, r3, #4294967295
 800a906:	f102 32ff 	add.w	r2, r2, #4294967295
 800a90a:	606b      	str	r3, [r5, #4]
 800a90c:	bf58      	it	pl
 800a90e:	3701      	addpl	r7, #1
 800a910:	60a2      	str	r2, [r4, #8]
 800a912:	b142      	cbz	r2, 800a926 <_scanf_chars+0xa6>
 800a914:	2b00      	cmp	r3, #0
 800a916:	dcc9      	bgt.n	800a8ac <_scanf_chars+0x2c>
 800a918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a91c:	4629      	mov	r1, r5
 800a91e:	4640      	mov	r0, r8
 800a920:	4798      	blx	r3
 800a922:	2800      	cmp	r0, #0
 800a924:	d0c2      	beq.n	800a8ac <_scanf_chars+0x2c>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	f013 0310 	ands.w	r3, r3, #16
 800a92c:	d105      	bne.n	800a93a <_scanf_chars+0xba>
 800a92e:	68e2      	ldr	r2, [r4, #12]
 800a930:	3201      	adds	r2, #1
 800a932:	60e2      	str	r2, [r4, #12]
 800a934:	69a2      	ldr	r2, [r4, #24]
 800a936:	b102      	cbz	r2, 800a93a <_scanf_chars+0xba>
 800a938:	703b      	strb	r3, [r7, #0]
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	2000      	movs	r0, #0
 800a93e:	441e      	add	r6, r3
 800a940:	6126      	str	r6, [r4, #16]
 800a942:	e7c7      	b.n	800a8d4 <_scanf_chars+0x54>

0800a944 <_scanf_i>:
 800a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	460c      	mov	r4, r1
 800a94a:	469a      	mov	sl, r3
 800a94c:	4b74      	ldr	r3, [pc, #464]	; (800ab20 <_scanf_i+0x1dc>)
 800a94e:	b087      	sub	sp, #28
 800a950:	4683      	mov	fp, r0
 800a952:	4616      	mov	r6, r2
 800a954:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a958:	ab03      	add	r3, sp, #12
 800a95a:	68a7      	ldr	r7, [r4, #8]
 800a95c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a960:	4b70      	ldr	r3, [pc, #448]	; (800ab24 <_scanf_i+0x1e0>)
 800a962:	69a1      	ldr	r1, [r4, #24]
 800a964:	4a70      	ldr	r2, [pc, #448]	; (800ab28 <_scanf_i+0x1e4>)
 800a966:	f104 091c 	add.w	r9, r4, #28
 800a96a:	2903      	cmp	r1, #3
 800a96c:	bf08      	it	eq
 800a96e:	461a      	moveq	r2, r3
 800a970:	1e7b      	subs	r3, r7, #1
 800a972:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a976:	bf84      	itt	hi
 800a978:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a97c:	60a3      	strhi	r3, [r4, #8]
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	bf88      	it	hi
 800a982:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a986:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	bf98      	it	ls
 800a98e:	2700      	movls	r7, #0
 800a990:	464b      	mov	r3, r9
 800a992:	f04f 0800 	mov.w	r8, #0
 800a996:	9200      	str	r2, [sp, #0]
 800a998:	bf88      	it	hi
 800a99a:	197f      	addhi	r7, r7, r5
 800a99c:	6831      	ldr	r1, [r6, #0]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	ab03      	add	r3, sp, #12
 800a9a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	7809      	ldrb	r1, [r1, #0]
 800a9aa:	f7fe fe75 	bl	8009698 <memchr>
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	b330      	cbz	r0, 800aa00 <_scanf_i+0xbc>
 800a9b2:	f1b8 0f01 	cmp.w	r8, #1
 800a9b6:	d15a      	bne.n	800aa6e <_scanf_i+0x12a>
 800a9b8:	6862      	ldr	r2, [r4, #4]
 800a9ba:	b92a      	cbnz	r2, 800a9c8 <_scanf_i+0x84>
 800a9bc:	2108      	movs	r1, #8
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	6061      	str	r1, [r4, #4]
 800a9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c6:	6022      	str	r2, [r4, #0]
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	68a2      	ldr	r2, [r4, #8]
 800a9d2:	1e51      	subs	r1, r2, #1
 800a9d4:	60a1      	str	r1, [r4, #8]
 800a9d6:	b19a      	cbz	r2, 800aa00 <_scanf_i+0xbc>
 800a9d8:	6832      	ldr	r2, [r6, #0]
 800a9da:	1c5d      	adds	r5, r3, #1
 800a9dc:	1c51      	adds	r1, r2, #1
 800a9de:	6031      	str	r1, [r6, #0]
 800a9e0:	7812      	ldrb	r2, [r2, #0]
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	6873      	ldr	r3, [r6, #4]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	6073      	str	r3, [r6, #4]
 800a9ec:	dc07      	bgt.n	800a9fe <_scanf_i+0xba>
 800a9ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4658      	mov	r0, fp
 800a9f6:	4798      	blx	r3
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f040 8087 	bne.w	800ab0c <_scanf_i+0x1c8>
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f108 0801 	add.w	r8, r8, #1
 800aa04:	f1b8 0f03 	cmp.w	r8, #3
 800aa08:	d1c8      	bne.n	800a99c <_scanf_i+0x58>
 800aa0a:	6862      	ldr	r2, [r4, #4]
 800aa0c:	b90a      	cbnz	r2, 800aa12 <_scanf_i+0xce>
 800aa0e:	220a      	movs	r2, #10
 800aa10:	6062      	str	r2, [r4, #4]
 800aa12:	6862      	ldr	r2, [r4, #4]
 800aa14:	4945      	ldr	r1, [pc, #276]	; (800ab2c <_scanf_i+0x1e8>)
 800aa16:	6960      	ldr	r0, [r4, #20]
 800aa18:	1a89      	subs	r1, r1, r2
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	f000 f8aa 	bl	800ab74 <__sccl>
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	461d      	mov	r5, r3
 800aa28:	68a3      	ldr	r3, [r4, #8]
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d03b      	beq.n	800aaa8 <_scanf_i+0x164>
 800aa30:	6831      	ldr	r1, [r6, #0]
 800aa32:	6960      	ldr	r0, [r4, #20]
 800aa34:	f891 c000 	ldrb.w	ip, [r1]
 800aa38:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d033      	beq.n	800aaa8 <_scanf_i+0x164>
 800aa40:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aa44:	d121      	bne.n	800aa8a <_scanf_i+0x146>
 800aa46:	0510      	lsls	r0, r2, #20
 800aa48:	d51f      	bpl.n	800aa8a <_scanf_i+0x146>
 800aa4a:	f108 0801 	add.w	r8, r8, #1
 800aa4e:	b117      	cbz	r7, 800aa56 <_scanf_i+0x112>
 800aa50:	3301      	adds	r3, #1
 800aa52:	3f01      	subs	r7, #1
 800aa54:	60a3      	str	r3, [r4, #8]
 800aa56:	6873      	ldr	r3, [r6, #4]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	6073      	str	r3, [r6, #4]
 800aa5e:	dd1c      	ble.n	800aa9a <_scanf_i+0x156>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	6033      	str	r3, [r6, #0]
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	e7dc      	b.n	800aa28 <_scanf_i+0xe4>
 800aa6e:	f1b8 0f02 	cmp.w	r8, #2
 800aa72:	d1ad      	bne.n	800a9d0 <_scanf_i+0x8c>
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aa7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aa7e:	d1bf      	bne.n	800aa00 <_scanf_i+0xbc>
 800aa80:	2110      	movs	r1, #16
 800aa82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa86:	6061      	str	r1, [r4, #4]
 800aa88:	e7a1      	b.n	800a9ce <_scanf_i+0x8a>
 800aa8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aa8e:	6022      	str	r2, [r4, #0]
 800aa90:	780b      	ldrb	r3, [r1, #0]
 800aa92:	3501      	adds	r5, #1
 800aa94:	f805 3c01 	strb.w	r3, [r5, #-1]
 800aa98:	e7dd      	b.n	800aa56 <_scanf_i+0x112>
 800aa9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	4658      	mov	r0, fp
 800aaa2:	4798      	blx	r3
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d0de      	beq.n	800aa66 <_scanf_i+0x122>
 800aaa8:	6823      	ldr	r3, [r4, #0]
 800aaaa:	05d9      	lsls	r1, r3, #23
 800aaac:	d50c      	bpl.n	800aac8 <_scanf_i+0x184>
 800aaae:	454d      	cmp	r5, r9
 800aab0:	d908      	bls.n	800aac4 <_scanf_i+0x180>
 800aab2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aab6:	1e6f      	subs	r7, r5, #1
 800aab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aabc:	4632      	mov	r2, r6
 800aabe:	4658      	mov	r0, fp
 800aac0:	4798      	blx	r3
 800aac2:	463d      	mov	r5, r7
 800aac4:	454d      	cmp	r5, r9
 800aac6:	d029      	beq.n	800ab1c <_scanf_i+0x1d8>
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	f012 0210 	ands.w	r2, r2, #16
 800aace:	d113      	bne.n	800aaf8 <_scanf_i+0x1b4>
 800aad0:	702a      	strb	r2, [r5, #0]
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	4649      	mov	r1, r9
 800aad6:	4658      	mov	r0, fp
 800aad8:	9e00      	ldr	r6, [sp, #0]
 800aada:	47b0      	blx	r6
 800aadc:	f8da 3000 	ldr.w	r3, [sl]
 800aae0:	6821      	ldr	r1, [r4, #0]
 800aae2:	1d1a      	adds	r2, r3, #4
 800aae4:	f8ca 2000 	str.w	r2, [sl]
 800aae8:	f011 0f20 	tst.w	r1, #32
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	d010      	beq.n	800ab12 <_scanf_i+0x1ce>
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	68e3      	ldr	r3, [r4, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60e3      	str	r3, [r4, #12]
 800aaf8:	2000      	movs	r0, #0
 800aafa:	eba5 0509 	sub.w	r5, r5, r9
 800aafe:	44a8      	add	r8, r5
 800ab00:	6925      	ldr	r5, [r4, #16]
 800ab02:	4445      	add	r5, r8
 800ab04:	6125      	str	r5, [r4, #16]
 800ab06:	b007      	add	sp, #28
 800ab08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0c:	f04f 0800 	mov.w	r8, #0
 800ab10:	e7ca      	b.n	800aaa8 <_scanf_i+0x164>
 800ab12:	07ca      	lsls	r2, r1, #31
 800ab14:	bf4c      	ite	mi
 800ab16:	8018      	strhmi	r0, [r3, #0]
 800ab18:	6018      	strpl	r0, [r3, #0]
 800ab1a:	e7ea      	b.n	800aaf2 <_scanf_i+0x1ae>
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	e7f2      	b.n	800ab06 <_scanf_i+0x1c2>
 800ab20:	0800b228 	.word	0x0800b228
 800ab24:	080080b1 	.word	0x080080b1
 800ab28:	0800acf1 	.word	0x0800acf1
 800ab2c:	0800d6dd 	.word	0x0800d6dd

0800ab30 <_read_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4605      	mov	r5, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4c05      	ldr	r4, [pc, #20]	; (800ab50 <_read_r+0x20>)
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7fb f9f0 	bl	8005f24 <_read>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_read_r+0x1e>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_read_r+0x1e>
 800ab4c:	602b      	str	r3, [r5, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	20001b7c 	.word	0x20001b7c

0800ab54 <_sbrk_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	2300      	movs	r3, #0
 800ab58:	4c05      	ldr	r4, [pc, #20]	; (800ab70 <_sbrk_r+0x1c>)
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	f7fb f9ee 	bl	8005f40 <_sbrk>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_sbrk_r+0x1a>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_sbrk_r+0x1a>
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	20001b7c 	.word	0x20001b7c

0800ab74 <__sccl>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	780b      	ldrb	r3, [r1, #0]
 800ab78:	1e44      	subs	r4, r0, #1
 800ab7a:	2b5e      	cmp	r3, #94	; 0x5e
 800ab7c:	bf13      	iteet	ne
 800ab7e:	1c4a      	addne	r2, r1, #1
 800ab80:	1c8a      	addeq	r2, r1, #2
 800ab82:	784b      	ldrbeq	r3, [r1, #1]
 800ab84:	2100      	movne	r1, #0
 800ab86:	bf08      	it	eq
 800ab88:	2101      	moveq	r1, #1
 800ab8a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800ab8e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ab92:	42ac      	cmp	r4, r5
 800ab94:	d1fb      	bne.n	800ab8e <__sccl+0x1a>
 800ab96:	b913      	cbnz	r3, 800ab9e <__sccl+0x2a>
 800ab98:	3a01      	subs	r2, #1
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	f081 0401 	eor.w	r4, r1, #1
 800aba2:	54c4      	strb	r4, [r0, r3]
 800aba4:	1c51      	adds	r1, r2, #1
 800aba6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800abaa:	1e4e      	subs	r6, r1, #1
 800abac:	2d2d      	cmp	r5, #45	; 0x2d
 800abae:	460a      	mov	r2, r1
 800abb0:	d006      	beq.n	800abc0 <__sccl+0x4c>
 800abb2:	2d5d      	cmp	r5, #93	; 0x5d
 800abb4:	d0f1      	beq.n	800ab9a <__sccl+0x26>
 800abb6:	b90d      	cbnz	r5, 800abbc <__sccl+0x48>
 800abb8:	4632      	mov	r2, r6
 800abba:	e7ee      	b.n	800ab9a <__sccl+0x26>
 800abbc:	462b      	mov	r3, r5
 800abbe:	e7f0      	b.n	800aba2 <__sccl+0x2e>
 800abc0:	780e      	ldrb	r6, [r1, #0]
 800abc2:	2e5d      	cmp	r6, #93	; 0x5d
 800abc4:	d0fa      	beq.n	800abbc <__sccl+0x48>
 800abc6:	42b3      	cmp	r3, r6
 800abc8:	dcf8      	bgt.n	800abbc <__sccl+0x48>
 800abca:	3301      	adds	r3, #1
 800abcc:	429e      	cmp	r6, r3
 800abce:	54c4      	strb	r4, [r0, r3]
 800abd0:	dcfb      	bgt.n	800abca <__sccl+0x56>
 800abd2:	3102      	adds	r1, #2
 800abd4:	e7e7      	b.n	800aba6 <__sccl+0x32>

0800abd6 <strncmp>:
 800abd6:	b510      	push	{r4, lr}
 800abd8:	b16a      	cbz	r2, 800abf6 <strncmp+0x20>
 800abda:	3901      	subs	r1, #1
 800abdc:	1884      	adds	r4, r0, r2
 800abde:	f810 3b01 	ldrb.w	r3, [r0], #1
 800abe2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d103      	bne.n	800abf2 <strncmp+0x1c>
 800abea:	42a0      	cmp	r0, r4
 800abec:	d001      	beq.n	800abf2 <strncmp+0x1c>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f5      	bne.n	800abde <strncmp+0x8>
 800abf2:	1a98      	subs	r0, r3, r2
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	4610      	mov	r0, r2
 800abf8:	e7fc      	b.n	800abf4 <strncmp+0x1e>

0800abfa <_strtoul_l.isra.0>:
 800abfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfe:	4680      	mov	r8, r0
 800ac00:	4689      	mov	r9, r1
 800ac02:	4692      	mov	sl, r2
 800ac04:	461e      	mov	r6, r3
 800ac06:	460f      	mov	r7, r1
 800ac08:	463d      	mov	r5, r7
 800ac0a:	9808      	ldr	r0, [sp, #32]
 800ac0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac10:	f7fe fcf4 	bl	80095fc <__locale_ctype_ptr_l>
 800ac14:	4420      	add	r0, r4
 800ac16:	7843      	ldrb	r3, [r0, #1]
 800ac18:	f013 0308 	ands.w	r3, r3, #8
 800ac1c:	d130      	bne.n	800ac80 <_strtoul_l.isra.0+0x86>
 800ac1e:	2c2d      	cmp	r4, #45	; 0x2d
 800ac20:	d130      	bne.n	800ac84 <_strtoul_l.isra.0+0x8a>
 800ac22:	2101      	movs	r1, #1
 800ac24:	787c      	ldrb	r4, [r7, #1]
 800ac26:	1cbd      	adds	r5, r7, #2
 800ac28:	2e00      	cmp	r6, #0
 800ac2a:	d05c      	beq.n	800ace6 <_strtoul_l.isra.0+0xec>
 800ac2c:	2e10      	cmp	r6, #16
 800ac2e:	d109      	bne.n	800ac44 <_strtoul_l.isra.0+0x4a>
 800ac30:	2c30      	cmp	r4, #48	; 0x30
 800ac32:	d107      	bne.n	800ac44 <_strtoul_l.isra.0+0x4a>
 800ac34:	782b      	ldrb	r3, [r5, #0]
 800ac36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac3a:	2b58      	cmp	r3, #88	; 0x58
 800ac3c:	d14e      	bne.n	800acdc <_strtoul_l.isra.0+0xe2>
 800ac3e:	2610      	movs	r6, #16
 800ac40:	786c      	ldrb	r4, [r5, #1]
 800ac42:	3502      	adds	r5, #2
 800ac44:	f04f 32ff 	mov.w	r2, #4294967295
 800ac48:	fbb2 f2f6 	udiv	r2, r2, r6
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	fb06 fc02 	mul.w	ip, r6, r2
 800ac52:	4618      	mov	r0, r3
 800ac54:	ea6f 0c0c 	mvn.w	ip, ip
 800ac58:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ac5c:	2f09      	cmp	r7, #9
 800ac5e:	d817      	bhi.n	800ac90 <_strtoul_l.isra.0+0x96>
 800ac60:	463c      	mov	r4, r7
 800ac62:	42a6      	cmp	r6, r4
 800ac64:	dd23      	ble.n	800acae <_strtoul_l.isra.0+0xb4>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	db1e      	blt.n	800aca8 <_strtoul_l.isra.0+0xae>
 800ac6a:	4282      	cmp	r2, r0
 800ac6c:	d31c      	bcc.n	800aca8 <_strtoul_l.isra.0+0xae>
 800ac6e:	d101      	bne.n	800ac74 <_strtoul_l.isra.0+0x7a>
 800ac70:	45a4      	cmp	ip, r4
 800ac72:	db19      	blt.n	800aca8 <_strtoul_l.isra.0+0xae>
 800ac74:	2301      	movs	r3, #1
 800ac76:	fb00 4006 	mla	r0, r0, r6, r4
 800ac7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac7e:	e7eb      	b.n	800ac58 <_strtoul_l.isra.0+0x5e>
 800ac80:	462f      	mov	r7, r5
 800ac82:	e7c1      	b.n	800ac08 <_strtoul_l.isra.0+0xe>
 800ac84:	2c2b      	cmp	r4, #43	; 0x2b
 800ac86:	bf04      	itt	eq
 800ac88:	1cbd      	addeq	r5, r7, #2
 800ac8a:	787c      	ldrbeq	r4, [r7, #1]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	e7cb      	b.n	800ac28 <_strtoul_l.isra.0+0x2e>
 800ac90:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ac94:	2f19      	cmp	r7, #25
 800ac96:	d801      	bhi.n	800ac9c <_strtoul_l.isra.0+0xa2>
 800ac98:	3c37      	subs	r4, #55	; 0x37
 800ac9a:	e7e2      	b.n	800ac62 <_strtoul_l.isra.0+0x68>
 800ac9c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800aca0:	2f19      	cmp	r7, #25
 800aca2:	d804      	bhi.n	800acae <_strtoul_l.isra.0+0xb4>
 800aca4:	3c57      	subs	r4, #87	; 0x57
 800aca6:	e7dc      	b.n	800ac62 <_strtoul_l.isra.0+0x68>
 800aca8:	f04f 33ff 	mov.w	r3, #4294967295
 800acac:	e7e5      	b.n	800ac7a <_strtoul_l.isra.0+0x80>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	da09      	bge.n	800acc6 <_strtoul_l.isra.0+0xcc>
 800acb2:	2322      	movs	r3, #34	; 0x22
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	f8c8 3000 	str.w	r3, [r8]
 800acbc:	f1ba 0f00 	cmp.w	sl, #0
 800acc0:	d107      	bne.n	800acd2 <_strtoul_l.isra.0+0xd8>
 800acc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc6:	b101      	cbz	r1, 800acca <_strtoul_l.isra.0+0xd0>
 800acc8:	4240      	negs	r0, r0
 800acca:	f1ba 0f00 	cmp.w	sl, #0
 800acce:	d0f8      	beq.n	800acc2 <_strtoul_l.isra.0+0xc8>
 800acd0:	b10b      	cbz	r3, 800acd6 <_strtoul_l.isra.0+0xdc>
 800acd2:	f105 39ff 	add.w	r9, r5, #4294967295
 800acd6:	f8ca 9000 	str.w	r9, [sl]
 800acda:	e7f2      	b.n	800acc2 <_strtoul_l.isra.0+0xc8>
 800acdc:	2430      	movs	r4, #48	; 0x30
 800acde:	2e00      	cmp	r6, #0
 800ace0:	d1b0      	bne.n	800ac44 <_strtoul_l.isra.0+0x4a>
 800ace2:	2608      	movs	r6, #8
 800ace4:	e7ae      	b.n	800ac44 <_strtoul_l.isra.0+0x4a>
 800ace6:	2c30      	cmp	r4, #48	; 0x30
 800ace8:	d0a4      	beq.n	800ac34 <_strtoul_l.isra.0+0x3a>
 800acea:	260a      	movs	r6, #10
 800acec:	e7aa      	b.n	800ac44 <_strtoul_l.isra.0+0x4a>
	...

0800acf0 <_strtoul_r>:
 800acf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acf2:	4c06      	ldr	r4, [pc, #24]	; (800ad0c <_strtoul_r+0x1c>)
 800acf4:	4d06      	ldr	r5, [pc, #24]	; (800ad10 <_strtoul_r+0x20>)
 800acf6:	6824      	ldr	r4, [r4, #0]
 800acf8:	6a24      	ldr	r4, [r4, #32]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	bf08      	it	eq
 800acfe:	462c      	moveq	r4, r5
 800ad00:	9400      	str	r4, [sp, #0]
 800ad02:	f7ff ff7a 	bl	800abfa <_strtoul_l.isra.0>
 800ad06:	b003      	add	sp, #12
 800ad08:	bd30      	pop	{r4, r5, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000194 	.word	0x20000194
 800ad10:	200001f8 	.word	0x200001f8

0800ad14 <__submore>:
 800ad14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad18:	460c      	mov	r4, r1
 800ad1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad20:	4299      	cmp	r1, r3
 800ad22:	d11b      	bne.n	800ad5c <__submore+0x48>
 800ad24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad28:	f7ff f916 	bl	8009f58 <_malloc_r>
 800ad2c:	b918      	cbnz	r0, 800ad36 <__submore+0x22>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3a:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad3c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ad40:	6360      	str	r0, [r4, #52]	; 0x34
 800ad42:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad4e:	7043      	strb	r3, [r0, #1]
 800ad50:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad54:	7003      	strb	r3, [r0, #0]
 800ad56:	6020      	str	r0, [r4, #0]
 800ad58:	2000      	movs	r0, #0
 800ad5a:	e7ea      	b.n	800ad32 <__submore+0x1e>
 800ad5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad5e:	0077      	lsls	r7, r6, #1
 800ad60:	463a      	mov	r2, r7
 800ad62:	f000 f9f3 	bl	800b14c <_realloc_r>
 800ad66:	4605      	mov	r5, r0
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d0e0      	beq.n	800ad2e <__submore+0x1a>
 800ad6c:	eb00 0806 	add.w	r8, r0, r6
 800ad70:	4601      	mov	r1, r0
 800ad72:	4632      	mov	r2, r6
 800ad74:	4640      	mov	r0, r8
 800ad76:	f7fb fbe5 	bl	8006544 <memcpy>
 800ad7a:	f8c4 8000 	str.w	r8, [r4]
 800ad7e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ad82:	e7e9      	b.n	800ad58 <__submore+0x44>

0800ad84 <__swbuf_r>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	460e      	mov	r6, r1
 800ad88:	4614      	mov	r4, r2
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	b118      	cbz	r0, 800ad96 <__swbuf_r+0x12>
 800ad8e:	6983      	ldr	r3, [r0, #24]
 800ad90:	b90b      	cbnz	r3, 800ad96 <__swbuf_r+0x12>
 800ad92:	f7fe f881 	bl	8008e98 <__sinit>
 800ad96:	4b21      	ldr	r3, [pc, #132]	; (800ae1c <__swbuf_r+0x98>)
 800ad98:	429c      	cmp	r4, r3
 800ad9a:	d12a      	bne.n	800adf2 <__swbuf_r+0x6e>
 800ad9c:	686c      	ldr	r4, [r5, #4]
 800ad9e:	69a3      	ldr	r3, [r4, #24]
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	071a      	lsls	r2, r3, #28
 800ada6:	d52e      	bpl.n	800ae06 <__swbuf_r+0x82>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	b363      	cbz	r3, 800ae06 <__swbuf_r+0x82>
 800adac:	6923      	ldr	r3, [r4, #16]
 800adae:	6820      	ldr	r0, [r4, #0]
 800adb0:	b2f6      	uxtb	r6, r6
 800adb2:	1ac0      	subs	r0, r0, r3
 800adb4:	6963      	ldr	r3, [r4, #20]
 800adb6:	4637      	mov	r7, r6
 800adb8:	4283      	cmp	r3, r0
 800adba:	dc04      	bgt.n	800adc6 <__swbuf_r+0x42>
 800adbc:	4621      	mov	r1, r4
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 f934 	bl	800b02c <_fflush_r>
 800adc4:	bb28      	cbnz	r0, 800ae12 <__swbuf_r+0x8e>
 800adc6:	68a3      	ldr	r3, [r4, #8]
 800adc8:	3001      	adds	r0, #1
 800adca:	3b01      	subs	r3, #1
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	6022      	str	r2, [r4, #0]
 800add4:	701e      	strb	r6, [r3, #0]
 800add6:	6963      	ldr	r3, [r4, #20]
 800add8:	4283      	cmp	r3, r0
 800adda:	d004      	beq.n	800ade6 <__swbuf_r+0x62>
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	07db      	lsls	r3, r3, #31
 800ade0:	d519      	bpl.n	800ae16 <__swbuf_r+0x92>
 800ade2:	2e0a      	cmp	r6, #10
 800ade4:	d117      	bne.n	800ae16 <__swbuf_r+0x92>
 800ade6:	4621      	mov	r1, r4
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 f91f 	bl	800b02c <_fflush_r>
 800adee:	b190      	cbz	r0, 800ae16 <__swbuf_r+0x92>
 800adf0:	e00f      	b.n	800ae12 <__swbuf_r+0x8e>
 800adf2:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <__swbuf_r+0x9c>)
 800adf4:	429c      	cmp	r4, r3
 800adf6:	d101      	bne.n	800adfc <__swbuf_r+0x78>
 800adf8:	68ac      	ldr	r4, [r5, #8]
 800adfa:	e7d0      	b.n	800ad9e <__swbuf_r+0x1a>
 800adfc:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <__swbuf_r+0xa0>)
 800adfe:	429c      	cmp	r4, r3
 800ae00:	bf08      	it	eq
 800ae02:	68ec      	ldreq	r4, [r5, #12]
 800ae04:	e7cb      	b.n	800ad9e <__swbuf_r+0x1a>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 f81b 	bl	800ae44 <__swsetup_r>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d0cc      	beq.n	800adac <__swbuf_r+0x28>
 800ae12:	f04f 37ff 	mov.w	r7, #4294967295
 800ae16:	4638      	mov	r0, r7
 800ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800d574 	.word	0x0800d574
 800ae20:	0800d594 	.word	0x0800d594
 800ae24:	0800d554 	.word	0x0800d554

0800ae28 <__ascii_wctomb>:
 800ae28:	b149      	cbz	r1, 800ae3e <__ascii_wctomb+0x16>
 800ae2a:	2aff      	cmp	r2, #255	; 0xff
 800ae2c:	bf8b      	itete	hi
 800ae2e:	238a      	movhi	r3, #138	; 0x8a
 800ae30:	700a      	strbls	r2, [r1, #0]
 800ae32:	6003      	strhi	r3, [r0, #0]
 800ae34:	2001      	movls	r0, #1
 800ae36:	bf88      	it	hi
 800ae38:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae3c:	4770      	bx	lr
 800ae3e:	4608      	mov	r0, r1
 800ae40:	4770      	bx	lr
	...

0800ae44 <__swsetup_r>:
 800ae44:	4b32      	ldr	r3, [pc, #200]	; (800af10 <__swsetup_r+0xcc>)
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	681d      	ldr	r5, [r3, #0]
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	b125      	cbz	r5, 800ae5a <__swsetup_r+0x16>
 800ae50:	69ab      	ldr	r3, [r5, #24]
 800ae52:	b913      	cbnz	r3, 800ae5a <__swsetup_r+0x16>
 800ae54:	4628      	mov	r0, r5
 800ae56:	f7fe f81f 	bl	8008e98 <__sinit>
 800ae5a:	4b2e      	ldr	r3, [pc, #184]	; (800af14 <__swsetup_r+0xd0>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	d10f      	bne.n	800ae80 <__swsetup_r+0x3c>
 800ae60:	686c      	ldr	r4, [r5, #4]
 800ae62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	0715      	lsls	r5, r2, #28
 800ae6a:	d42c      	bmi.n	800aec6 <__swsetup_r+0x82>
 800ae6c:	06d0      	lsls	r0, r2, #27
 800ae6e:	d411      	bmi.n	800ae94 <__swsetup_r+0x50>
 800ae70:	2209      	movs	r2, #9
 800ae72:	6032      	str	r2, [r6, #0]
 800ae74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae78:	81a3      	strh	r3, [r4, #12]
 800ae7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7e:	e03e      	b.n	800aefe <__swsetup_r+0xba>
 800ae80:	4b25      	ldr	r3, [pc, #148]	; (800af18 <__swsetup_r+0xd4>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <__swsetup_r+0x46>
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	e7eb      	b.n	800ae62 <__swsetup_r+0x1e>
 800ae8a:	4b24      	ldr	r3, [pc, #144]	; (800af1c <__swsetup_r+0xd8>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68ec      	ldreq	r4, [r5, #12]
 800ae92:	e7e6      	b.n	800ae62 <__swsetup_r+0x1e>
 800ae94:	0751      	lsls	r1, r2, #29
 800ae96:	d512      	bpl.n	800aebe <__swsetup_r+0x7a>
 800ae98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae9a:	b141      	cbz	r1, 800aeae <__swsetup_r+0x6a>
 800ae9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea0:	4299      	cmp	r1, r3
 800aea2:	d002      	beq.n	800aeaa <__swsetup_r+0x66>
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7ff f80b 	bl	8009ec0 <_free_r>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6363      	str	r3, [r4, #52]	; 0x34
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f043 0308 	orr.w	r3, r3, #8
 800aec4:	81a3      	strh	r3, [r4, #12]
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	b94b      	cbnz	r3, 800aede <__swsetup_r+0x9a>
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aed4:	d003      	beq.n	800aede <__swsetup_r+0x9a>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4630      	mov	r0, r6
 800aeda:	f000 f8f5 	bl	800b0c8 <__smakebuf_r>
 800aede:	89a2      	ldrh	r2, [r4, #12]
 800aee0:	f012 0301 	ands.w	r3, r2, #1
 800aee4:	d00c      	beq.n	800af00 <__swsetup_r+0xbc>
 800aee6:	2300      	movs	r3, #0
 800aee8:	60a3      	str	r3, [r4, #8]
 800aeea:	6963      	ldr	r3, [r4, #20]
 800aeec:	425b      	negs	r3, r3
 800aeee:	61a3      	str	r3, [r4, #24]
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	b953      	cbnz	r3, 800af0a <__swsetup_r+0xc6>
 800aef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800aefc:	d1ba      	bne.n	800ae74 <__swsetup_r+0x30>
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
 800af00:	0792      	lsls	r2, r2, #30
 800af02:	bf58      	it	pl
 800af04:	6963      	ldrpl	r3, [r4, #20]
 800af06:	60a3      	str	r3, [r4, #8]
 800af08:	e7f2      	b.n	800aef0 <__swsetup_r+0xac>
 800af0a:	2000      	movs	r0, #0
 800af0c:	e7f7      	b.n	800aefe <__swsetup_r+0xba>
 800af0e:	bf00      	nop
 800af10:	20000194 	.word	0x20000194
 800af14:	0800d574 	.word	0x0800d574
 800af18:	0800d594 	.word	0x0800d594
 800af1c:	0800d554 	.word	0x0800d554

0800af20 <__sflush_r>:
 800af20:	898a      	ldrh	r2, [r1, #12]
 800af22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af26:	4605      	mov	r5, r0
 800af28:	0710      	lsls	r0, r2, #28
 800af2a:	460c      	mov	r4, r1
 800af2c:	d458      	bmi.n	800afe0 <__sflush_r+0xc0>
 800af2e:	684b      	ldr	r3, [r1, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc05      	bgt.n	800af40 <__sflush_r+0x20>
 800af34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af36:	2b00      	cmp	r3, #0
 800af38:	dc02      	bgt.n	800af40 <__sflush_r+0x20>
 800af3a:	2000      	movs	r0, #0
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af42:	2e00      	cmp	r6, #0
 800af44:	d0f9      	beq.n	800af3a <__sflush_r+0x1a>
 800af46:	2300      	movs	r3, #0
 800af48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af4c:	682f      	ldr	r7, [r5, #0]
 800af4e:	6a21      	ldr	r1, [r4, #32]
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	d032      	beq.n	800afba <__sflush_r+0x9a>
 800af54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	075a      	lsls	r2, r3, #29
 800af5a:	d505      	bpl.n	800af68 <__sflush_r+0x48>
 800af5c:	6863      	ldr	r3, [r4, #4]
 800af5e:	1ac0      	subs	r0, r0, r3
 800af60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af62:	b10b      	cbz	r3, 800af68 <__sflush_r+0x48>
 800af64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af66:	1ac0      	subs	r0, r0, r3
 800af68:	2300      	movs	r3, #0
 800af6a:	4602      	mov	r2, r0
 800af6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6e:	6a21      	ldr	r1, [r4, #32]
 800af70:	4628      	mov	r0, r5
 800af72:	47b0      	blx	r6
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	d106      	bne.n	800af88 <__sflush_r+0x68>
 800af7a:	6829      	ldr	r1, [r5, #0]
 800af7c:	291d      	cmp	r1, #29
 800af7e:	d848      	bhi.n	800b012 <__sflush_r+0xf2>
 800af80:	4a29      	ldr	r2, [pc, #164]	; (800b028 <__sflush_r+0x108>)
 800af82:	40ca      	lsrs	r2, r1
 800af84:	07d6      	lsls	r6, r2, #31
 800af86:	d544      	bpl.n	800b012 <__sflush_r+0xf2>
 800af88:	2200      	movs	r2, #0
 800af8a:	6062      	str	r2, [r4, #4]
 800af8c:	6922      	ldr	r2, [r4, #16]
 800af8e:	04d9      	lsls	r1, r3, #19
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	d504      	bpl.n	800af9e <__sflush_r+0x7e>
 800af94:	1c42      	adds	r2, r0, #1
 800af96:	d101      	bne.n	800af9c <__sflush_r+0x7c>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b903      	cbnz	r3, 800af9e <__sflush_r+0x7e>
 800af9c:	6560      	str	r0, [r4, #84]	; 0x54
 800af9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afa0:	602f      	str	r7, [r5, #0]
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d0c9      	beq.n	800af3a <__sflush_r+0x1a>
 800afa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afaa:	4299      	cmp	r1, r3
 800afac:	d002      	beq.n	800afb4 <__sflush_r+0x94>
 800afae:	4628      	mov	r0, r5
 800afb0:	f7fe ff86 	bl	8009ec0 <_free_r>
 800afb4:	2000      	movs	r0, #0
 800afb6:	6360      	str	r0, [r4, #52]	; 0x34
 800afb8:	e7c0      	b.n	800af3c <__sflush_r+0x1c>
 800afba:	2301      	movs	r3, #1
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b0      	blx	r6
 800afc0:	1c41      	adds	r1, r0, #1
 800afc2:	d1c8      	bne.n	800af56 <__sflush_r+0x36>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0c5      	beq.n	800af56 <__sflush_r+0x36>
 800afca:	2b1d      	cmp	r3, #29
 800afcc:	d001      	beq.n	800afd2 <__sflush_r+0xb2>
 800afce:	2b16      	cmp	r3, #22
 800afd0:	d101      	bne.n	800afd6 <__sflush_r+0xb6>
 800afd2:	602f      	str	r7, [r5, #0]
 800afd4:	e7b1      	b.n	800af3a <__sflush_r+0x1a>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	e7ad      	b.n	800af3c <__sflush_r+0x1c>
 800afe0:	690f      	ldr	r7, [r1, #16]
 800afe2:	2f00      	cmp	r7, #0
 800afe4:	d0a9      	beq.n	800af3a <__sflush_r+0x1a>
 800afe6:	0793      	lsls	r3, r2, #30
 800afe8:	bf18      	it	ne
 800afea:	2300      	movne	r3, #0
 800afec:	680e      	ldr	r6, [r1, #0]
 800afee:	bf08      	it	eq
 800aff0:	694b      	ldreq	r3, [r1, #20]
 800aff2:	eba6 0807 	sub.w	r8, r6, r7
 800aff6:	600f      	str	r7, [r1, #0]
 800aff8:	608b      	str	r3, [r1, #8]
 800affa:	f1b8 0f00 	cmp.w	r8, #0
 800affe:	dd9c      	ble.n	800af3a <__sflush_r+0x1a>
 800b000:	4643      	mov	r3, r8
 800b002:	463a      	mov	r2, r7
 800b004:	6a21      	ldr	r1, [r4, #32]
 800b006:	4628      	mov	r0, r5
 800b008:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b00a:	47b0      	blx	r6
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dc06      	bgt.n	800b01e <__sflush_r+0xfe>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b016:	81a3      	strh	r3, [r4, #12]
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	e78e      	b.n	800af3c <__sflush_r+0x1c>
 800b01e:	4407      	add	r7, r0
 800b020:	eba8 0800 	sub.w	r8, r8, r0
 800b024:	e7e9      	b.n	800affa <__sflush_r+0xda>
 800b026:	bf00      	nop
 800b028:	20400001 	.word	0x20400001

0800b02c <_fflush_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	690b      	ldr	r3, [r1, #16]
 800b030:	4605      	mov	r5, r0
 800b032:	460c      	mov	r4, r1
 800b034:	b1db      	cbz	r3, 800b06e <_fflush_r+0x42>
 800b036:	b118      	cbz	r0, 800b040 <_fflush_r+0x14>
 800b038:	6983      	ldr	r3, [r0, #24]
 800b03a:	b90b      	cbnz	r3, 800b040 <_fflush_r+0x14>
 800b03c:	f7fd ff2c 	bl	8008e98 <__sinit>
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <_fflush_r+0x48>)
 800b042:	429c      	cmp	r4, r3
 800b044:	d109      	bne.n	800b05a <_fflush_r+0x2e>
 800b046:	686c      	ldr	r4, [r5, #4]
 800b048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b04c:	b17b      	cbz	r3, 800b06e <_fflush_r+0x42>
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b056:	f7ff bf63 	b.w	800af20 <__sflush_r>
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <_fflush_r+0x4c>)
 800b05c:	429c      	cmp	r4, r3
 800b05e:	d101      	bne.n	800b064 <_fflush_r+0x38>
 800b060:	68ac      	ldr	r4, [r5, #8]
 800b062:	e7f1      	b.n	800b048 <_fflush_r+0x1c>
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <_fflush_r+0x50>)
 800b066:	429c      	cmp	r4, r3
 800b068:	bf08      	it	eq
 800b06a:	68ec      	ldreq	r4, [r5, #12]
 800b06c:	e7ec      	b.n	800b048 <_fflush_r+0x1c>
 800b06e:	2000      	movs	r0, #0
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	bf00      	nop
 800b074:	0800d574 	.word	0x0800d574
 800b078:	0800d594 	.word	0x0800d594
 800b07c:	0800d554 	.word	0x0800d554

0800b080 <__swhatbuf_r>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	460e      	mov	r6, r1
 800b084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b088:	b096      	sub	sp, #88	; 0x58
 800b08a:	2900      	cmp	r1, #0
 800b08c:	4614      	mov	r4, r2
 800b08e:	461d      	mov	r5, r3
 800b090:	da07      	bge.n	800b0a2 <__swhatbuf_r+0x22>
 800b092:	2300      	movs	r3, #0
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	89b3      	ldrh	r3, [r6, #12]
 800b098:	061a      	lsls	r2, r3, #24
 800b09a:	d410      	bmi.n	800b0be <__swhatbuf_r+0x3e>
 800b09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a0:	e00e      	b.n	800b0c0 <__swhatbuf_r+0x40>
 800b0a2:	466a      	mov	r2, sp
 800b0a4:	f000 f878 	bl	800b198 <_fstat_r>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	dbf2      	blt.n	800b092 <__swhatbuf_r+0x12>
 800b0ac:	9a01      	ldr	r2, [sp, #4]
 800b0ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0b6:	425a      	negs	r2, r3
 800b0b8:	415a      	adcs	r2, r3
 800b0ba:	602a      	str	r2, [r5, #0]
 800b0bc:	e7ee      	b.n	800b09c <__swhatbuf_r+0x1c>
 800b0be:	2340      	movs	r3, #64	; 0x40
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	6023      	str	r3, [r4, #0]
 800b0c4:	b016      	add	sp, #88	; 0x58
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}

0800b0c8 <__smakebuf_r>:
 800b0c8:	898b      	ldrh	r3, [r1, #12]
 800b0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0cc:	079d      	lsls	r5, r3, #30
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	d507      	bpl.n	800b0e4 <__smakebuf_r+0x1c>
 800b0d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	2301      	movs	r3, #1
 800b0de:	6163      	str	r3, [r4, #20]
 800b0e0:	b002      	add	sp, #8
 800b0e2:	bd70      	pop	{r4, r5, r6, pc}
 800b0e4:	ab01      	add	r3, sp, #4
 800b0e6:	466a      	mov	r2, sp
 800b0e8:	f7ff ffca 	bl	800b080 <__swhatbuf_r>
 800b0ec:	9900      	ldr	r1, [sp, #0]
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7fe ff31 	bl	8009f58 <_malloc_r>
 800b0f6:	b948      	cbnz	r0, 800b10c <__smakebuf_r+0x44>
 800b0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fc:	059a      	lsls	r2, r3, #22
 800b0fe:	d4ef      	bmi.n	800b0e0 <__smakebuf_r+0x18>
 800b100:	f023 0303 	bic.w	r3, r3, #3
 800b104:	f043 0302 	orr.w	r3, r3, #2
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	e7e3      	b.n	800b0d4 <__smakebuf_r+0xc>
 800b10c:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <__smakebuf_r+0x7c>)
 800b10e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	6020      	str	r0, [r4, #0]
 800b114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b118:	81a3      	strh	r3, [r4, #12]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	6120      	str	r0, [r4, #16]
 800b11e:	6163      	str	r3, [r4, #20]
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	b15b      	cbz	r3, 800b13c <__smakebuf_r+0x74>
 800b124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f847 	bl	800b1bc <_isatty_r>
 800b12e:	b128      	cbz	r0, 800b13c <__smakebuf_r+0x74>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	f023 0303 	bic.w	r3, r3, #3
 800b136:	f043 0301 	orr.w	r3, r3, #1
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	431d      	orrs	r5, r3
 800b140:	81a5      	strh	r5, [r4, #12]
 800b142:	e7cd      	b.n	800b0e0 <__smakebuf_r+0x18>
 800b144:	08008e61 	.word	0x08008e61

0800b148 <__malloc_lock>:
 800b148:	4770      	bx	lr

0800b14a <__malloc_unlock>:
 800b14a:	4770      	bx	lr

0800b14c <_realloc_r>:
 800b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14e:	4607      	mov	r7, r0
 800b150:	4614      	mov	r4, r2
 800b152:	460e      	mov	r6, r1
 800b154:	b921      	cbnz	r1, 800b160 <_realloc_r+0x14>
 800b156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b15a:	4611      	mov	r1, r2
 800b15c:	f7fe befc 	b.w	8009f58 <_malloc_r>
 800b160:	b922      	cbnz	r2, 800b16c <_realloc_r+0x20>
 800b162:	f7fe fead 	bl	8009ec0 <_free_r>
 800b166:	4625      	mov	r5, r4
 800b168:	4628      	mov	r0, r5
 800b16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b16c:	f000 f836 	bl	800b1dc <_malloc_usable_size_r>
 800b170:	42a0      	cmp	r0, r4
 800b172:	d20f      	bcs.n	800b194 <_realloc_r+0x48>
 800b174:	4621      	mov	r1, r4
 800b176:	4638      	mov	r0, r7
 800b178:	f7fe feee 	bl	8009f58 <_malloc_r>
 800b17c:	4605      	mov	r5, r0
 800b17e:	2800      	cmp	r0, #0
 800b180:	d0f2      	beq.n	800b168 <_realloc_r+0x1c>
 800b182:	4631      	mov	r1, r6
 800b184:	4622      	mov	r2, r4
 800b186:	f7fb f9dd 	bl	8006544 <memcpy>
 800b18a:	4631      	mov	r1, r6
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7fe fe97 	bl	8009ec0 <_free_r>
 800b192:	e7e9      	b.n	800b168 <_realloc_r+0x1c>
 800b194:	4635      	mov	r5, r6
 800b196:	e7e7      	b.n	800b168 <_realloc_r+0x1c>

0800b198 <_fstat_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	2300      	movs	r3, #0
 800b19c:	4c06      	ldr	r4, [pc, #24]	; (800b1b8 <_fstat_r+0x20>)
 800b19e:	4605      	mov	r5, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	f7fa fee8 	bl	8005f7a <_fstat>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d102      	bne.n	800b1b4 <_fstat_r+0x1c>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	b103      	cbz	r3, 800b1b4 <_fstat_r+0x1c>
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	bd38      	pop	{r3, r4, r5, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20001b7c 	.word	0x20001b7c

0800b1bc <_isatty_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4c05      	ldr	r4, [pc, #20]	; (800b1d8 <_isatty_r+0x1c>)
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	f7fa fedc 	bl	8005f84 <_isatty>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_isatty_r+0x1a>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_isatty_r+0x1a>
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	20001b7c 	.word	0x20001b7c

0800b1dc <_malloc_usable_size_r>:
 800b1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1e0:	1f18      	subs	r0, r3, #4
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfbc      	itt	lt
 800b1e6:	580b      	ldrlt	r3, [r1, r0]
 800b1e8:	18c0      	addlt	r0, r0, r3
 800b1ea:	4770      	bx	lr

0800b1ec <_init>:
 800b1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ee:	bf00      	nop
 800b1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1f2:	bc08      	pop	{r3}
 800b1f4:	469e      	mov	lr, r3
 800b1f6:	4770      	bx	lr

0800b1f8 <_fini>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	bf00      	nop
 800b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fe:	bc08      	pop	{r3}
 800b200:	469e      	mov	lr, r3
 800b202:	4770      	bx	lr
