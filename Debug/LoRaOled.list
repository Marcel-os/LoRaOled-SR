
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080059c0  080059c0  000159c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d4  200001e0  08005f04  000201e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200008b4  08005f04  000208b4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013931  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ec5  00000000  00000000  00033b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009612  00000000  00000000  000369fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c08  00000000  00000000  00040010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012b8  00000000  00000000  00040c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000164d7  00000000  00000000  00041ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c243  00000000  00000000  000583a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007652a  00000000  00000000  000645ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000dab14  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000033d0  00000000  00000000  000dab90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080059a8 	.word	0x080059a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080059a8 	.word	0x080059a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b974 	b.w	8000d88 <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	468c      	mov	ip, r1
 8000abe:	4604      	mov	r4, r0
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d14b      	bne.n	8000b5e <__udivmoddi4+0xa6>
 8000ac6:	428a      	cmp	r2, r1
 8000ac8:	4615      	mov	r5, r2
 8000aca:	d967      	bls.n	8000b9c <__udivmoddi4+0xe4>
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	b14a      	cbz	r2, 8000ae6 <__udivmoddi4+0x2e>
 8000ad2:	f1c2 0720 	rsb	r7, r2, #32
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	fa20 f707 	lsr.w	r7, r0, r7
 8000ade:	4095      	lsls	r5, r2
 8000ae0:	ea47 0c03 	orr.w	ip, r7, r3
 8000ae4:	4094      	lsls	r4, r2
 8000ae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aea:	fbbc f7fe 	udiv	r7, ip, lr
 8000aee:	fa1f f885 	uxth.w	r8, r5
 8000af2:	fb0e c317 	mls	r3, lr, r7, ip
 8000af6:	fb07 f908 	mul.w	r9, r7, r8
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b00:	4599      	cmp	r9, r3
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x60>
 8000b04:	18eb      	adds	r3, r5, r3
 8000b06:	f107 31ff 	add.w	r1, r7, #4294967295
 8000b0a:	f080 811c 	bcs.w	8000d46 <__udivmoddi4+0x28e>
 8000b0e:	4599      	cmp	r9, r3
 8000b10:	f240 8119 	bls.w	8000d46 <__udivmoddi4+0x28e>
 8000b14:	3f02      	subs	r7, #2
 8000b16:	442b      	add	r3, r5
 8000b18:	eba3 0309 	sub.w	r3, r3, r9
 8000b1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b24:	fb00 f108 	mul.w	r1, r0, r8
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2e:	42a1      	cmp	r1, r4
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0x8e>
 8000b32:	192c      	adds	r4, r5, r4
 8000b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b38:	f080 8107 	bcs.w	8000d4a <__udivmoddi4+0x292>
 8000b3c:	42a1      	cmp	r1, r4
 8000b3e:	f240 8104 	bls.w	8000d4a <__udivmoddi4+0x292>
 8000b42:	3802      	subs	r0, #2
 8000b44:	442c      	add	r4, r5
 8000b46:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4a:	2700      	movs	r7, #0
 8000b4c:	1a64      	subs	r4, r4, r1
 8000b4e:	b11e      	cbz	r6, 8000b58 <__udivmoddi4+0xa0>
 8000b50:	2300      	movs	r3, #0
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	e9c6 4300 	strd	r4, r3, [r6]
 8000b58:	4639      	mov	r1, r7
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d909      	bls.n	8000b76 <__udivmoddi4+0xbe>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f000 80ec 	beq.w	8000d40 <__udivmoddi4+0x288>
 8000b68:	2700      	movs	r7, #0
 8000b6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b6e:	4638      	mov	r0, r7
 8000b70:	4639      	mov	r1, r7
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f783 	clz	r7, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d148      	bne.n	8000c10 <__udivmoddi4+0x158>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xd0>
 8000b82:	4282      	cmp	r2, r0
 8000b84:	f200 80fb 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000b88:	1a84      	subs	r4, r0, r2
 8000b8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	469c      	mov	ip, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0e0      	beq.n	8000b58 <__udivmoddi4+0xa0>
 8000b96:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b9a:	e7dd      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000b9c:	b902      	cbnz	r2, 8000ba0 <__udivmoddi4+0xe8>
 8000b9e:	deff      	udf	#255	; 0xff
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	2a00      	cmp	r2, #0
 8000ba6:	f040 808f 	bne.w	8000cc8 <__udivmoddi4+0x210>
 8000baa:	2701      	movs	r7, #1
 8000bac:	1b49      	subs	r1, r1, r5
 8000bae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bb2:	fa1f f985 	uxth.w	r9, r5
 8000bb6:	fbb1 fef8 	udiv	lr, r1, r8
 8000bba:	fb08 111e 	mls	r1, r8, lr, r1
 8000bbe:	fb09 f00e 	mul.w	r0, r9, lr
 8000bc2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000bc6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x126>
 8000bce:	18eb      	adds	r3, r5, r3
 8000bd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000bd4:	d202      	bcs.n	8000bdc <__udivmoddi4+0x124>
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	f200 80cd 	bhi.w	8000d76 <__udivmoddi4+0x2be>
 8000bdc:	468e      	mov	lr, r1
 8000bde:	1a1b      	subs	r3, r3, r0
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	fb09 f900 	mul.w	r9, r9, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x14e>
 8000bf6:	192c      	adds	r4, r5, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	d202      	bcs.n	8000c04 <__udivmoddi4+0x14c>
 8000bfe:	45a1      	cmp	r9, r4
 8000c00:	f200 80b6 	bhi.w	8000d70 <__udivmoddi4+0x2b8>
 8000c04:	4618      	mov	r0, r3
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c0e:	e79e      	b.n	8000b4e <__udivmoddi4+0x96>
 8000c10:	f1c7 0520 	rsb	r5, r7, #32
 8000c14:	40bb      	lsls	r3, r7
 8000c16:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c26:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c2a:	fa1f f88c 	uxth.w	r8, ip
 8000c2e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000c32:	fa20 f305 	lsr.w	r3, r0, r5
 8000c36:	40b9      	lsls	r1, r7
 8000c38:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c44:	45a2      	cmp	sl, r4
 8000c46:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4a:	fa00 f307 	lsl.w	r3, r0, r7
 8000c4e:	d90b      	bls.n	8000c68 <__udivmoddi4+0x1b0>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c58:	f080 8088 	bcs.w	8000d6c <__udivmoddi4+0x2b4>
 8000c5c:	45a2      	cmp	sl, r4
 8000c5e:	f240 8085 	bls.w	8000d6c <__udivmoddi4+0x2b4>
 8000c62:	f1a9 0902 	sub.w	r9, r9, #2
 8000c66:	4464      	add	r4, ip
 8000c68:	eba4 040a 	sub.w	r4, r4, sl
 8000c6c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000c70:	fb0e 4410 	mls	r4, lr, r0, r4
 8000c74:	fb00 fa08 	mul.w	sl, r0, r8
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000c7e:	45a2      	cmp	sl, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x1dc>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8a:	d26b      	bcs.n	8000d64 <__udivmoddi4+0x2ac>
 8000c8c:	45a2      	cmp	sl, r4
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0x2ac>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4464      	add	r4, ip
 8000c94:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c98:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ca0:	454c      	cmp	r4, r9
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	d354      	bcc.n	8000d52 <__udivmoddi4+0x29a>
 8000ca8:	d051      	beq.n	8000d4e <__udivmoddi4+0x296>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d069      	beq.n	8000d82 <__udivmoddi4+0x2ca>
 8000cae:	1a5a      	subs	r2, r3, r1
 8000cb0:	eb64 040e 	sbc.w	r4, r4, lr
 8000cb4:	fa04 f505 	lsl.w	r5, r4, r5
 8000cb8:	fa22 f307 	lsr.w	r3, r2, r7
 8000cbc:	40fc      	lsrs	r4, r7
 8000cbe:	431d      	orrs	r5, r3
 8000cc0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc4:	2700      	movs	r7, #0
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000cc8:	4095      	lsls	r5, r2
 8000cca:	f1c2 0320 	rsb	r3, r2, #32
 8000cce:	fa21 f003 	lsr.w	r0, r1, r3
 8000cd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cd6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000cda:	fa1f f985 	uxth.w	r9, r5
 8000cde:	fb08 0017 	mls	r0, r8, r7, r0
 8000ce2:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fb07 fc09 	mul.w	ip, r7, r9
 8000cec:	430b      	orrs	r3, r1
 8000cee:	0c19      	lsrs	r1, r3, #16
 8000cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf4:	458c      	cmp	ip, r1
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x254>
 8000cfc:	1869      	adds	r1, r5, r1
 8000cfe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d02:	d231      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d04:	458c      	cmp	ip, r1
 8000d06:	d92f      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d08:	3f02      	subs	r7, #2
 8000d0a:	4429      	add	r1, r5
 8000d0c:	eba1 010c 	sub.w	r1, r1, ip
 8000d10:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d14:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d18:	fb00 fe09 	mul.w	lr, r0, r9
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d22:	458e      	cmp	lr, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x27e>
 8000d26:	1869      	adds	r1, r5, r1
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d218      	bcs.n	8000d60 <__udivmoddi4+0x2a8>
 8000d2e:	458e      	cmp	lr, r1
 8000d30:	d916      	bls.n	8000d60 <__udivmoddi4+0x2a8>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4429      	add	r1, r5
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d3e:	e73a      	b.n	8000bb6 <__udivmoddi4+0xfe>
 8000d40:	4637      	mov	r7, r6
 8000d42:	4630      	mov	r0, r6
 8000d44:	e708      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d46:	460f      	mov	r7, r1
 8000d48:	e6e6      	b.n	8000b18 <__udivmoddi4+0x60>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	e6fb      	b.n	8000b46 <__udivmoddi4+0x8e>
 8000d4e:	4543      	cmp	r3, r8
 8000d50:	d2ab      	bcs.n	8000caa <__udivmoddi4+0x1f2>
 8000d52:	ebb8 0102 	subs.w	r1, r8, r2
 8000d56:	eb69 020c 	sbc.w	r2, r9, ip
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	4696      	mov	lr, r2
 8000d5e:	e7a4      	b.n	8000caa <__udivmoddi4+0x1f2>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e7e8      	b.n	8000d36 <__udivmoddi4+0x27e>
 8000d64:	4608      	mov	r0, r1
 8000d66:	e795      	b.n	8000c94 <__udivmoddi4+0x1dc>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e7cf      	b.n	8000d0c <__udivmoddi4+0x254>
 8000d6c:	4681      	mov	r9, r0
 8000d6e:	e77b      	b.n	8000c68 <__udivmoddi4+0x1b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	e747      	b.n	8000c06 <__udivmoddi4+0x14e>
 8000d76:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7a:	442b      	add	r3, r5
 8000d7c:	e72f      	b.n	8000bde <__udivmoddi4+0x126>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e707      	b.n	8000b92 <__udivmoddi4+0xda>
 8000d82:	4637      	mov	r7, r6
 8000d84:	e6e8      	b.n	8000b58 <__udivmoddi4+0xa0>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_InitTick+0x3c>)
{
 8000d90:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d92:	7818      	ldrb	r0, [r3, #0]
 8000d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d98:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_InitTick+0x40>)
 8000d9e:	6810      	ldr	r0, [r2, #0]
 8000da0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da4:	f000 f9c0 	bl	8001128 <HAL_SYSTICK_Config>
 8000da8:	4604      	mov	r4, r0
 8000daa:	b958      	cbnz	r0, 8000dc4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dac:	2d0f      	cmp	r5, #15
 8000dae:	d809      	bhi.n	8000dc4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	4602      	mov	r2, r0
 8000db2:	4629      	mov	r1, r5
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f974 	bl	80010a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_InitTick+0x44>)
 8000dc0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e7fc      	b.n	8000dc2 <HAL_InitTick+0x36>
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_Init+0x20>)
{
 8000dd6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	f000 f94d 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ffd0 	bl	8000d8c <HAL_InitTick>
  HAL_MspInit();
 8000dec:	f002 f84a 	bl	8002e84 <HAL_MspInit>
}
 8000df0:	2000      	movs	r0, #0
 8000df2:	bd08      	pop	{r3, pc}
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_IncTick+0x10>)
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_IncTick+0x14>)
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	440b      	add	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000610 	.word	0x20000610
 8000e0c:	20000000 	.word	0x20000000

08000e10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e10:	4b01      	ldr	r3, [pc, #4]	; (8000e18 <HAL_GetTick+0x8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000610 	.word	0x20000610

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b538      	push	{r3, r4, r5, lr}
 8000e1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff fff6 	bl	8000e10 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e28:	bf1e      	ittt	ne
 8000e2a:	4b04      	ldrne	r3, [pc, #16]	; (8000e3c <HAL_Delay+0x20>)
 8000e2c:	781b      	ldrbne	r3, [r3, #0]
 8000e2e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	42a0      	cmp	r0, r4
 8000e38:	d3fa      	bcc.n	8000e30 <HAL_Delay+0x14>
  {
  }
}
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000e40:	2300      	movs	r3, #0
{ 
 8000e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000e44:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d06d      	beq.n	8000f2a <HAL_ADC_ConfigChannel+0xea>
 8000e4e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e50:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000e52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000e56:	2d06      	cmp	r5, #6
 8000e58:	6802      	ldr	r2, [r0, #0]
 8000e5a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000e5e:	680c      	ldr	r4, [r1, #0]
 8000e60:	d823      	bhi.n	8000eaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e62:	261f      	movs	r6, #31
 8000e64:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8000e66:	3b05      	subs	r3, #5
 8000e68:	409e      	lsls	r6, r3
 8000e6a:	ea25 0506 	bic.w	r5, r5, r6
 8000e6e:	fa04 f303 	lsl.w	r3, r4, r3
 8000e72:	432b      	orrs	r3, r5
 8000e74:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e76:	2c09      	cmp	r4, #9
 8000e78:	688b      	ldr	r3, [r1, #8]
 8000e7a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8000e7e:	f04f 0107 	mov.w	r1, #7
 8000e82:	d92a      	bls.n	8000eda <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e84:	68d6      	ldr	r6, [r2, #12]
 8000e86:	3d1e      	subs	r5, #30
 8000e88:	40a9      	lsls	r1, r5
 8000e8a:	ea26 0101 	bic.w	r1, r6, r1
 8000e8e:	40ab      	lsls	r3, r5
 8000e90:	430b      	orrs	r3, r1
 8000e92:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e94:	f1a4 0310 	sub.w	r3, r4, #16
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d926      	bls.n	8000eea <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000eaa:	2d0c      	cmp	r5, #12
 8000eac:	f04f 051f 	mov.w	r5, #31
 8000eb0:	d809      	bhi.n	8000ec6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eb2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000eb4:	3b23      	subs	r3, #35	; 0x23
 8000eb6:	409d      	lsls	r5, r3
 8000eb8:	ea26 0505 	bic.w	r5, r6, r5
 8000ebc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ec0:	432b      	orrs	r3, r5
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	e7d7      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ec6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000ec8:	3b41      	subs	r3, #65	; 0x41
 8000eca:	409d      	lsls	r5, r3
 8000ecc:	ea26 0505 	bic.w	r5, r6, r5
 8000ed0:	fa04 f303 	lsl.w	r3, r4, r3
 8000ed4:	432b      	orrs	r3, r5
 8000ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ed8:	e7cd      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eda:	6916      	ldr	r6, [r2, #16]
 8000edc:	40a9      	lsls	r1, r5
 8000ede:	ea26 0101 	bic.w	r1, r6, r1
 8000ee2:	40ab      	lsls	r3, r5
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6113      	str	r3, [r2, #16]
 8000ee8:	e7d4      	b.n	8000e94 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_ADC_ConfigChannel+0xf0>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d116      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ef0:	6893      	ldr	r3, [r2, #8]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	d4d2      	bmi.n	8000e9c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ef6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ef8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000efe:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f00:	d1cc      	bne.n	8000e9c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_ADC_ConfigChannel+0xf4>)
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_ADC_ConfigChannel+0xf8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000f10:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0c1      	beq.n	8000e9c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000f18:	9b01      	ldr	r3, [sp, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	e7f8      	b.n	8000f10 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e7b9      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e7ba      	b.n	8000ea4 <HAL_ADC_ConfigChannel+0x64>
 8000f2e:	bf00      	nop
 8000f30:	40012400 	.word	0x40012400
 8000f34:	20000008 	.word	0x20000008
 8000f38:	000f4240 	.word	0x000f4240

08000f3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f3e:	6803      	ldr	r3, [r0, #0]
{
 8000f40:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	07d2      	lsls	r2, r2, #31
 8000f46:	d401      	bmi.n	8000f4c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f48:	2000      	movs	r0, #0
}
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f54:	f7ff ff5c 	bl	8000e10 <HAL_GetTick>
 8000f58:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	07db      	lsls	r3, r3, #31
 8000f60:	d5f2      	bpl.n	8000f48 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f62:	f7ff ff55 	bl	8000e10 <HAL_GetTick>
 8000f66:	1b40      	subs	r0, r0, r5
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9f6      	bls.n	8000f5a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f6e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f7e:	e7e4      	b.n	8000f4a <ADC_ConversionStop_Disable+0xe>

08000f80 <HAL_ADC_Init>:
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000f82:	4604      	mov	r4, r0
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d070      	beq.n	800106a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f8a:	b923      	cbnz	r3, 8000f96 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000f8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000f92:	f001 ff99 	bl	8002ec8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff ffd0 	bl	8000f3c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f9e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fa4:	d163      	bne.n	800106e <HAL_ADC_Init+0xee>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d161      	bne.n	800106e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000faa:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fb0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	f023 0302 	bic.w	r3, r3, #2
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fba:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fbc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000fbe:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fc0:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fc2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fca:	d037      	beq.n	800103c <HAL_ADC_Init+0xbc>
 8000fcc:	2901      	cmp	r1, #1
 8000fce:	bf14      	ite	ne
 8000fd0:	4606      	movne	r6, r0
 8000fd2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd6:	7d25      	ldrb	r5, [r4, #20]
 8000fd8:	2d01      	cmp	r5, #1
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fdc:	bb83      	cbnz	r3, 8001040 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fde:	69a3      	ldr	r3, [r4, #24]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000fe6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000fea:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000ff0:	685d      	ldr	r5, [r3, #4]
 8000ff2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000ff6:	ea45 0506 	orr.w	r5, r5, r6
 8000ffa:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000ffc:	689e      	ldr	r6, [r3, #8]
 8000ffe:	4d1e      	ldr	r5, [pc, #120]	; (8001078 <HAL_ADC_Init+0xf8>)
 8001000:	ea05 0506 	and.w	r5, r5, r6
 8001004:	ea45 0502 	orr.w	r5, r5, r2
 8001008:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800100a:	d001      	beq.n	8001010 <HAL_ADC_Init+0x90>
 800100c:	2901      	cmp	r1, #1
 800100e:	d120      	bne.n	8001052 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001010:	6921      	ldr	r1, [r4, #16]
 8001012:	3901      	subs	r1, #1
 8001014:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001016:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001018:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800101c:	4329      	orrs	r1, r5
 800101e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001020:	6899      	ldr	r1, [r3, #8]
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_Init+0xfc>)
 8001024:	400b      	ands	r3, r1
 8001026:	429a      	cmp	r2, r3
 8001028:	d115      	bne.n	8001056 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800102a:	2300      	movs	r3, #0
 800102c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800102e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800103a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800103c:	460e      	mov	r6, r1
 800103e:	e7ca      	b.n	8000fd6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001042:	f043 0320 	orr.w	r3, r3, #32
 8001046:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001050:	e7cb      	b.n	8000fea <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001052:	2100      	movs	r1, #0
 8001054:	e7df      	b.n	8001016 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001058:	f023 0312 	bic.w	r3, r3, #18
 800105c:	f043 0310 	orr.w	r3, r3, #16
 8001060:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e7e5      	b.n	800103a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	62a3      	str	r3, [r4, #40]	; 0x28
 8001074:	e7f9      	b.n	800106a <HAL_ADC_Init+0xea>
 8001076:	bf00      	nop
 8001078:	ffe1f7fd 	.word	0xffe1f7fd
 800107c:	ff1f0efe 	.word	0xff1f0efe

08001080 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001082:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001086:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108e:	041b      	lsls	r3, r3, #16
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800109a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800109c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b570      	push	{r4, r5, r6, lr}
 80010a8:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010aa:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b2:	f1c4 0507 	rsb	r5, r4, #7
 80010b6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	bf28      	it	cs
 80010be:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c0:	2b06      	cmp	r3, #6
 80010c2:	bf98      	it	ls
 80010c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	bf88      	it	hi
 80010cc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ce:	ea21 0303 	bic.w	r3, r1, r3
 80010d2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	fa06 f404 	lsl.w	r4, r6, r4
 80010d8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80010dc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010de:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	bfa8      	it	ge
 80010e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80010e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	bfb8      	it	lt
 80010ee:	4a06      	ldrlt	r2, [pc, #24]	; (8001108 <HAL_NVIC_SetPriority+0x64>)
 80010f0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	bfab      	itete	ge
 80010f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001102:	bd70      	pop	{r4, r5, r6, pc}
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	e000ed14 	.word	0xe000ed14

0800110c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800110c:	2800      	cmp	r0, #0
 800110e:	db08      	blt.n	8001122 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001110:	2301      	movs	r3, #1
 8001112:	0942      	lsrs	r2, r0, #5
 8001114:	f000 001f 	and.w	r0, r0, #31
 8001118:	fa03 f000 	lsl.w	r0, r3, r0
 800111c:	4b01      	ldr	r3, [pc, #4]	; (8001124 <HAL_NVIC_EnableIRQ+0x18>)
 800111e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100

08001128 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	3801      	subs	r0, #1
 800112a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800112e:	d20a      	bcs.n	8001146 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001154:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001158:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800115a:	2b02      	cmp	r3, #2
 800115c:	d003      	beq.n	8001166 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	2304      	movs	r3, #4
 8001160:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001162:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001164:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001166:	6803      	ldr	r3, [r0, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	f022 020e 	bic.w	r2, r2, #14
 800116e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_DMA_Abort_IT+0x88>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_DMA_Abort_IT+0x6a>
 800117e:	3214      	adds	r2, #20
 8001180:	4293      	cmp	r3, r2
 8001182:	d01e      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x6e>
 8001184:	3214      	adds	r2, #20
 8001186:	4293      	cmp	r3, r2
 8001188:	d01d      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x72>
 800118a:	3214      	adds	r2, #20
 800118c:	4293      	cmp	r3, r2
 800118e:	d01d      	beq.n	80011cc <HAL_DMA_Abort_IT+0x78>
 8001190:	3214      	adds	r2, #20
 8001192:	4293      	cmp	r3, r2
 8001194:	d01d      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x7e>
 8001196:	3214      	adds	r2, #20
 8001198:	4293      	cmp	r3, r2
 800119a:	bf0c      	ite	eq
 800119c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80011a0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80011a6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80011b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80011b2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80011b6:	b17b      	cbz	r3, 80011d8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80011b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	4620      	mov	r0, r4
 80011bc:	e7d2      	b.n	8001164 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011be:	2301      	movs	r3, #1
 80011c0:	e7f0      	b.n	80011a4 <HAL_DMA_Abort_IT+0x50>
 80011c2:	2310      	movs	r3, #16
 80011c4:	e7ee      	b.n	80011a4 <HAL_DMA_Abort_IT+0x50>
 80011c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ca:	e7eb      	b.n	80011a4 <HAL_DMA_Abort_IT+0x50>
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	e7e8      	b.n	80011a4 <HAL_DMA_Abort_IT+0x50>
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	e7e5      	b.n	80011a4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80011d8:	4618      	mov	r0, r3
 80011da:	e7c3      	b.n	8001164 <HAL_DMA_Abort_IT+0x10>
 80011dc:	40020008 	.word	0x40020008
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80011ea:	4626      	mov	r6, r4
 80011ec:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001394 <HAL_GPIO_Init+0x1b0>
 80011f2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001398 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	680a      	ldr	r2, [r1, #0]
 80011f8:	fa32 f506 	lsrs.w	r5, r2, r6
 80011fc:	d102      	bne.n	8001204 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80011fe:	b003      	add	sp, #12
 8001200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001204:	f04f 0801 	mov.w	r8, #1
 8001208:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001210:	4590      	cmp	r8, r2
 8001212:	d17e      	bne.n	8001312 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001214:	684d      	ldr	r5, [r1, #4]
 8001216:	2d12      	cmp	r5, #18
 8001218:	f000 80a9 	beq.w	800136e <HAL_GPIO_Init+0x18a>
 800121c:	f200 8082 	bhi.w	8001324 <HAL_GPIO_Init+0x140>
 8001220:	2d02      	cmp	r5, #2
 8001222:	f000 80a1 	beq.w	8001368 <HAL_GPIO_Init+0x184>
 8001226:	d876      	bhi.n	8001316 <HAL_GPIO_Init+0x132>
 8001228:	2d00      	cmp	r5, #0
 800122a:	f000 8088 	beq.w	800133e <HAL_GPIO_Init+0x15a>
 800122e:	2d01      	cmp	r5, #1
 8001230:	f000 8098 	beq.w	8001364 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001238:	2aff      	cmp	r2, #255	; 0xff
 800123a:	bf93      	iteet	ls
 800123c:	4682      	movls	sl, r0
 800123e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001242:	3d08      	subhi	r5, #8
 8001244:	f8d0 b000 	ldrls.w	fp, [r0]
 8001248:	bf92      	itee	ls
 800124a:	00b5      	lslls	r5, r6, #2
 800124c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001250:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001252:	fa09 f805 	lsl.w	r8, r9, r5
 8001256:	ea2b 0808 	bic.w	r8, fp, r8
 800125a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800125e:	bf88      	it	hi
 8001260:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001264:	ea48 0505 	orr.w	r5, r8, r5
 8001268:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001270:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001274:	d04d      	beq.n	8001312 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001276:	4f44      	ldr	r7, [pc, #272]	; (8001388 <HAL_GPIO_Init+0x1a4>)
 8001278:	f026 0803 	bic.w	r8, r6, #3
 800127c:	69bd      	ldr	r5, [r7, #24]
 800127e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001282:	f045 0501 	orr.w	r5, r5, #1
 8001286:	61bd      	str	r5, [r7, #24]
 8001288:	69bd      	ldr	r5, [r7, #24]
 800128a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800128e:	f005 0501 	and.w	r5, r5, #1
 8001292:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001294:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001298:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800129a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800129e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a2:	fa09 f90b 	lsl.w	r9, r9, fp
 80012a6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012aa:	4d38      	ldr	r5, [pc, #224]	; (800138c <HAL_GPIO_Init+0x1a8>)
 80012ac:	42a8      	cmp	r0, r5
 80012ae:	d063      	beq.n	8001378 <HAL_GPIO_Init+0x194>
 80012b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012b4:	42a8      	cmp	r0, r5
 80012b6:	d061      	beq.n	800137c <HAL_GPIO_Init+0x198>
 80012b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012bc:	42a8      	cmp	r0, r5
 80012be:	d05f      	beq.n	8001380 <HAL_GPIO_Init+0x19c>
 80012c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012c4:	42a8      	cmp	r0, r5
 80012c6:	bf0c      	ite	eq
 80012c8:	2503      	moveq	r5, #3
 80012ca:	2504      	movne	r5, #4
 80012cc:	fa05 f50b 	lsl.w	r5, r5, fp
 80012d0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80012d4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80012d8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012da:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80012de:	bf14      	ite	ne
 80012e0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e2:	4395      	biceq	r5, r2
 80012e4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80012e6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012ec:	bf14      	ite	ne
 80012ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012f0:	4395      	biceq	r5, r2
 80012f2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fa:	bf14      	ite	ne
 80012fc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4395      	biceq	r5, r2
 8001300:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001302:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001308:	bf14      	ite	ne
 800130a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800130c:	ea25 0202 	biceq.w	r2, r5, r2
 8001310:	60da      	str	r2, [r3, #12]
	position++;
 8001312:	3601      	adds	r6, #1
 8001314:	e76f      	b.n	80011f6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001316:	2d03      	cmp	r5, #3
 8001318:	d022      	beq.n	8001360 <HAL_GPIO_Init+0x17c>
 800131a:	2d11      	cmp	r5, #17
 800131c:	d18a      	bne.n	8001234 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800131e:	68cc      	ldr	r4, [r1, #12]
 8001320:	3404      	adds	r4, #4
          break;
 8001322:	e787      	b.n	8001234 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001324:	4f1a      	ldr	r7, [pc, #104]	; (8001390 <HAL_GPIO_Init+0x1ac>)
 8001326:	42bd      	cmp	r5, r7
 8001328:	d009      	beq.n	800133e <HAL_GPIO_Init+0x15a>
 800132a:	d812      	bhi.n	8001352 <HAL_GPIO_Init+0x16e>
 800132c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800139c <HAL_GPIO_Init+0x1b8>
 8001330:	454d      	cmp	r5, r9
 8001332:	d004      	beq.n	800133e <HAL_GPIO_Init+0x15a>
 8001334:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001338:	454d      	cmp	r5, r9
 800133a:	f47f af7b 	bne.w	8001234 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	688c      	ldr	r4, [r1, #8]
 8001340:	b1c4      	cbz	r4, 8001374 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001342:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001344:	bf0c      	ite	eq
 8001346:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800134a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134e:	2408      	movs	r4, #8
 8001350:	e770      	b.n	8001234 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001352:	4565      	cmp	r5, ip
 8001354:	d0f3      	beq.n	800133e <HAL_GPIO_Init+0x15a>
 8001356:	4575      	cmp	r5, lr
 8001358:	d0f1      	beq.n	800133e <HAL_GPIO_Init+0x15a>
 800135a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80013a0 <HAL_GPIO_Init+0x1bc>
 800135e:	e7eb      	b.n	8001338 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2400      	movs	r4, #0
 8001362:	e767      	b.n	8001234 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	68cc      	ldr	r4, [r1, #12]
          break;
 8001366:	e765      	b.n	8001234 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001368:	68cc      	ldr	r4, [r1, #12]
 800136a:	3408      	adds	r4, #8
          break;
 800136c:	e762      	b.n	8001234 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800136e:	68cc      	ldr	r4, [r1, #12]
 8001370:	340c      	adds	r4, #12
          break;
 8001372:	e75f      	b.n	8001234 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001374:	2404      	movs	r4, #4
 8001376:	e75d      	b.n	8001234 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001378:	2500      	movs	r5, #0
 800137a:	e7a7      	b.n	80012cc <HAL_GPIO_Init+0xe8>
 800137c:	2501      	movs	r5, #1
 800137e:	e7a5      	b.n	80012cc <HAL_GPIO_Init+0xe8>
 8001380:	2502      	movs	r5, #2
 8001382:	e7a3      	b.n	80012cc <HAL_GPIO_Init+0xe8>
 8001384:	40010400 	.word	0x40010400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800
 8001390:	10210000 	.word	0x10210000
 8001394:	10310000 	.word	0x10310000
 8001398:	10320000 	.word	0x10320000
 800139c:	10110000 	.word	0x10110000
 80013a0:	10220000 	.word	0x10220000

080013a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80013a8:	bf14      	ite	ne
 80013aa:	2001      	movne	r0, #1
 80013ac:	2000      	moveq	r0, #0
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b0:	b10a      	cbz	r2, 80013b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b2:	6101      	str	r1, [r0, #16]
  }
}
 80013b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b6:	0409      	lsls	r1, r1, #16
 80013b8:	e7fb      	b.n	80013b2 <HAL_GPIO_WritePin+0x2>

080013ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013ba:	68c3      	ldr	r3, [r0, #12]
 80013bc:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013be:	bf14      	ite	ne
 80013c0:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c2:	6101      	streq	r1, [r0, #16]
  }
}
 80013c4:	4770      	bx	lr

080013c6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013c6:	6801      	ldr	r1, [r0, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	694b      	ldr	r3, [r1, #20]
 80013cc:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80013d0:	d010      	beq.n	80013f4 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80013d6:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80013d8:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80013da:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80013dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013e0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013e4:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80013f0:	2001      	movs	r0, #1
 80013f2:	4770      	bx	lr
  }
  return HAL_OK;
 80013f4:	4618      	mov	r0, r3
}
 80013f6:	4770      	bx	lr

080013f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fc:	4604      	mov	r4, r0
 80013fe:	4616      	mov	r6, r2
 8001400:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001402:	b28f      	uxth	r7, r1
 8001404:	6825      	ldr	r5, [r4, #0]
 8001406:	6968      	ldr	r0, [r5, #20]
 8001408:	ea37 0000 	bics.w	r0, r7, r0
 800140c:	d017      	beq.n	800143e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800140e:	696b      	ldr	r3, [r5, #20]
 8001410:	055a      	lsls	r2, r3, #21
 8001412:	d516      	bpl.n	8001442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001416:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800141e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001422:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001428:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800142c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001430:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001432:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001436:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800143a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001442:	1c73      	adds	r3, r6, #1
 8001444:	d0df      	beq.n	8001406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001446:	f7ff fce3 	bl	8000e10 <HAL_GetTick>
 800144a:	eba0 0008 	sub.w	r0, r0, r8
 800144e:	42b0      	cmp	r0, r6
 8001450:	d801      	bhi.n	8001456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001452:	2e00      	cmp	r6, #0
 8001454:	d1d6      	bne.n	8001404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001456:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001458:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800145a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800145c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001460:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001464:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001466:	f042 0220 	orr.w	r2, r2, #32
 800146a:	e7e4      	b.n	8001436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800146c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	4604      	mov	r4, r0
 8001470:	460d      	mov	r5, r1
 8001472:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	075b      	lsls	r3, r3, #29
 800147a:	d501      	bpl.n	8001480 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
}
 800147e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff ffa0 	bl	80013c6 <I2C_IsAcknowledgeFailed>
 8001486:	b9a8      	cbnz	r0, 80014b4 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001488:	1c6a      	adds	r2, r5, #1
 800148a:	d0f3      	beq.n	8001474 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148c:	f7ff fcc0 	bl	8000e10 <HAL_GetTick>
 8001490:	1b80      	subs	r0, r0, r6
 8001492:	42a8      	cmp	r0, r5
 8001494:	d801      	bhi.n	800149a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001496:	2d00      	cmp	r5, #0
 8001498:	d1ec      	bne.n	8001474 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800149a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800149c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800149e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80014aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014ae:	f042 0220 	orr.w	r2, r2, #32
 80014b2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80014b4:	2001      	movs	r0, #1
 80014b6:	e7e2      	b.n	800147e <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080014b8 <I2C_WaitOnFlagUntilTimeout>:
{
 80014b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014bc:	4604      	mov	r4, r0
 80014be:	4690      	mov	r8, r2
 80014c0:	461f      	mov	r7, r3
 80014c2:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014c4:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80014c8:	b28d      	uxth	r5, r1
 80014ca:	6821      	ldr	r1, [r4, #0]
 80014cc:	f1b9 0f01 	cmp.w	r9, #1
 80014d0:	bf0c      	ite	eq
 80014d2:	694b      	ldreq	r3, [r1, #20]
 80014d4:	698b      	ldrne	r3, [r1, #24]
 80014d6:	ea35 0303 	bics.w	r3, r5, r3
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	4598      	cmp	r8, r3
 80014e2:	d001      	beq.n	80014e8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80014e4:	2000      	movs	r0, #0
 80014e6:	e016      	b.n	8001516 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80014e8:	1c7b      	adds	r3, r7, #1
 80014ea:	d0ef      	beq.n	80014cc <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ec:	f7ff fc90 	bl	8000e10 <HAL_GetTick>
 80014f0:	1b80      	subs	r0, r0, r6
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d801      	bhi.n	80014fa <I2C_WaitOnFlagUntilTimeout+0x42>
 80014f6:	2f00      	cmp	r7, #0
 80014f8:	d1e7      	bne.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014fa:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80014fc:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80014fe:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001500:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001502:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001506:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800150a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800150c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001510:	f042 0220 	orr.w	r2, r2, #32
 8001514:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800151a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800151a:	b570      	push	{r4, r5, r6, lr}
 800151c:	4604      	mov	r4, r0
 800151e:	460d      	mov	r5, r1
 8001520:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	061b      	lsls	r3, r3, #24
 8001528:	d501      	bpl.n	800152e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
}
 800152c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff ff49 	bl	80013c6 <I2C_IsAcknowledgeFailed>
 8001534:	b9a8      	cbnz	r0, 8001562 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001536:	1c6a      	adds	r2, r5, #1
 8001538:	d0f3      	beq.n	8001522 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153a:	f7ff fc69 	bl	8000e10 <HAL_GetTick>
 800153e:	1b80      	subs	r0, r0, r6
 8001540:	42a8      	cmp	r0, r5
 8001542:	d801      	bhi.n	8001548 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001544:	2d00      	cmp	r5, #0
 8001546:	d1ec      	bne.n	8001522 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001548:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800154a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800154c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800154e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001552:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001556:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001558:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800155c:	f042 0220 	orr.w	r2, r2, #32
 8001560:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e7e2      	b.n	800152c <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001568 <I2C_RequestMemoryWrite>:
{
 8001568:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800156c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800156e:	6802      	ldr	r2, [r0, #0]
{
 8001570:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001572:	6813      	ldr	r3, [r2, #0]
{
 8001574:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
{
 800157c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800157e:	9600      	str	r6, [sp, #0]
 8001580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001588:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800158a:	f7ff ff95 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 800158e:	b118      	cbz	r0, 8001598 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
}
 8001592:	b004      	add	sp, #16
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800159e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80015a2:	4633      	mov	r3, r6
 80015a4:	4916      	ldr	r1, [pc, #88]	; (8001600 <I2C_RequestMemoryWrite+0x98>)
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ff26 	bl	80013f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d1ef      	bne.n	8001590 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	9003      	str	r0, [sp, #12]
 80015b4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b8:	9203      	str	r2, [sp, #12]
 80015ba:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015bc:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015be:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c4:	f7ff ffa9 	bl	800151a <I2C_WaitOnTXEFlagUntilTimeout>
 80015c8:	b140      	cbz	r0, 80015dc <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015cc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ce:	bf01      	itttt	eq
 80015d0:	6822      	ldreq	r2, [r4, #0]
 80015d2:	6813      	ldreq	r3, [r2, #0]
 80015d4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80015d8:	6013      	streq	r3, [r2, #0]
 80015da:	e7d9      	b.n	8001590 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015dc:	f1b8 0f01 	cmp.w	r8, #1
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	d102      	bne.n	80015ea <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015e4:	b2ed      	uxtb	r5, r5
 80015e6:	611d      	str	r5, [r3, #16]
 80015e8:	e7d3      	b.n	8001592 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80015ea:	0a2a      	lsrs	r2, r5, #8
 80015ec:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015f0:	4632      	mov	r2, r6
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff91 	bl	800151a <I2C_WaitOnTXEFlagUntilTimeout>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d1e6      	bne.n	80015ca <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	e7f1      	b.n	80015e4 <I2C_RequestMemoryWrite+0x7c>
 8001600:	00010002 	.word	0x00010002

08001604 <HAL_I2C_Init>:
{
 8001604:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001606:	4604      	mov	r4, r0
 8001608:	b908      	cbnz	r0, 800160e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
}
 800160c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001616:	b91b      	cbnz	r3, 8001620 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001618:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800161c:	f001 fc82 	bl	8002f24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001622:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001630:	f000 fb90 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001634:	6863      	ldr	r3, [r4, #4]
 8001636:	4a41      	ldr	r2, [pc, #260]	; (800173c <HAL_I2C_Init+0x138>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d84d      	bhi.n	80016d8 <HAL_I2C_Init+0xd4>
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <HAL_I2C_Init+0x13c>)
 800163e:	4290      	cmp	r0, r2
 8001640:	d9e3      	bls.n	800160a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001642:	4940      	ldr	r1, [pc, #256]	; (8001744 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001644:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001646:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164a:	6855      	ldr	r5, [r2, #4]
 800164c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001650:	430d      	orrs	r5, r1
 8001652:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001654:	6a15      	ldr	r5, [r2, #32]
 8001656:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800165a:	3101      	adds	r1, #1
 800165c:	4329      	orrs	r1, r5
 800165e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001660:	69d1      	ldr	r1, [r2, #28]
 8001662:	4d36      	ldr	r5, [pc, #216]	; (800173c <HAL_I2C_Init+0x138>)
 8001664:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001668:	42ab      	cmp	r3, r5
 800166a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800166e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001672:	d848      	bhi.n	8001706 <HAL_I2C_Init+0x102>
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fbb0 f0f3 	udiv	r0, r0, r3
 800167a:	1c43      	adds	r3, r0, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b04      	cmp	r3, #4
 8001682:	bf38      	it	cc
 8001684:	2304      	movcc	r3, #4
 8001686:	430b      	orrs	r3, r1
 8001688:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800168a:	6811      	ldr	r1, [r2, #0]
 800168c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001690:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001694:	4303      	orrs	r3, r0
 8001696:	430b      	orrs	r3, r1
 8001698:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800169a:	6891      	ldr	r1, [r2, #8]
 800169c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80016a0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80016a4:	4303      	orrs	r3, r0
 80016a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016ae:	68d1      	ldr	r1, [r2, #12]
 80016b0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80016b4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80016b8:	4303      	orrs	r3, r0
 80016ba:	430b      	orrs	r3, r1
 80016bc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80016be:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80016c8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ca:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80016d6:	e799      	b.n	800160c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_I2C_Init+0x144>)
 80016da:	4290      	cmp	r0, r2
 80016dc:	d995      	bls.n	800160a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80016de:	4e19      	ldr	r6, [pc, #100]	; (8001744 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80016e4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ea:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ec:	6855      	ldr	r5, [r2, #4]
 80016ee:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80016f2:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f8:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fa:	6a15      	ldr	r5, [r2, #32]
 80016fc:	fbb1 f1f6 	udiv	r1, r1, r6
 8001700:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001704:	e7a9      	b.n	800165a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001706:	68a5      	ldr	r5, [r4, #8]
 8001708:	b955      	cbnz	r5, 8001720 <HAL_I2C_Init+0x11c>
 800170a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800170e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	b16b      	cbz	r3, 8001736 <HAL_I2C_Init+0x132>
 800171a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171e:	e7b2      	b.n	8001686 <HAL_I2C_Init+0x82>
 8001720:	2519      	movs	r5, #25
 8001722:	436b      	muls	r3, r5
 8001724:	fbb0 f0f3 	udiv	r0, r0, r3
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	b113      	cbz	r3, 8001736 <HAL_I2C_Init+0x132>
 8001730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001734:	e7a7      	b.n	8001686 <HAL_I2C_Init+0x82>
 8001736:	2301      	movs	r3, #1
 8001738:	e7a5      	b.n	8001686 <HAL_I2C_Init+0x82>
 800173a:	bf00      	nop
 800173c:	000186a0 	.word	0x000186a0
 8001740:	001e847f 	.word	0x001e847f
 8001744:	000f4240 	.word	0x000f4240
 8001748:	003d08ff 	.word	0x003d08ff

0800174c <HAL_I2C_Mem_Write>:
{
 800174c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001750:	4604      	mov	r4, r0
 8001752:	4699      	mov	r9, r3
 8001754:	460f      	mov	r7, r1
 8001756:	4690      	mov	r8, r2
 8001758:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800175a:	f7ff fb59 	bl	8000e10 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800175e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001762:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001764:	2b20      	cmp	r3, #32
 8001766:	d003      	beq.n	8001770 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001768:	2002      	movs	r0, #2
}
 800176a:	b003      	add	sp, #12
 800176c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	9000      	str	r0, [sp, #0]
 8001772:	2319      	movs	r3, #25
 8001774:	2201      	movs	r2, #1
 8001776:	493b      	ldr	r1, [pc, #236]	; (8001864 <HAL_I2C_Mem_Write+0x118>)
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff fe9d 	bl	80014b8 <I2C_WaitOnFlagUntilTimeout>
 800177e:	2800      	cmp	r0, #0
 8001780:	d1f2      	bne.n	8001768 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001782:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001786:	2b01      	cmp	r3, #1
 8001788:	d0ee      	beq.n	8001768 <HAL_I2C_Mem_Write+0x1c>
 800178a:	2301      	movs	r3, #1
 800178c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001790:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001792:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001798:	bf58      	it	pl
 800179a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800179c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800179e:	bf5c      	itt	pl
 80017a0:	f042 0201 	orrpl.w	r2, r2, #1
 80017a4:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ac:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017ae:	2321      	movs	r3, #33	; 0x21
 80017b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80017be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017c0:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 80017c4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ca:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 80017cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_I2C_Mem_Write+0x11c>)
 80017d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017d6:	464b      	mov	r3, r9
 80017d8:	f7ff fec6 	bl	8001568 <I2C_RequestMemoryWrite>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d02a      	beq.n	8001836 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80017e0:	2001      	movs	r0, #1
 80017e2:	e7c2      	b.n	800176a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e4:	f7ff fe99 	bl	800151a <I2C_WaitOnTXEFlagUntilTimeout>
 80017e8:	b140      	cbz	r0, 80017fc <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ec:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ee:	bf01      	itttt	eq
 80017f0:	6822      	ldreq	r2, [r4, #0]
 80017f2:	6813      	ldreq	r3, [r2, #0]
 80017f4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80017f8:	6013      	streq	r3, [r2, #0]
 80017fa:	e7f1      	b.n	80017e0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017fe:	6827      	ldr	r7, [r4, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001806:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001808:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800180a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800180c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800180e:	3a01      	subs	r2, #1
 8001810:	b292      	uxth	r2, r2
 8001812:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001814:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001816:	1e48      	subs	r0, r1, #1
 8001818:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800181c:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181e:	d50a      	bpl.n	8001836 <HAL_I2C_Mem_Write+0xea>
 8001820:	b148      	cbz	r0, 8001836 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001822:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001824:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001826:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001828:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800182a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800182c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800182e:	3b01      	subs	r3, #1
 8001830:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001832:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001834:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001838:	462a      	mov	r2, r5
 800183a:	4631      	mov	r1, r6
 800183c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1d0      	bne.n	80017e4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001842:	f7ff fe13 	bl	800146c <I2C_WaitOnBTFFlagUntilTimeout>
 8001846:	2800      	cmp	r0, #0
 8001848:	d1cf      	bne.n	80017ea <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	6813      	ldr	r3, [r2, #0]
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001854:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001856:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800185a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800185e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001862:	e782      	b.n	800176a <HAL_I2C_Mem_Write+0x1e>
 8001864:	00100002 	.word	0x00100002
 8001868:	ffff0000 	.word	0xffff0000

0800186c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800186c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001870:	4605      	mov	r5, r0
 8001872:	b908      	cbnz	r0, 8001878 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001874:	2001      	movs	r0, #1
 8001876:	e03c      	b.n	80018f2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001878:	6803      	ldr	r3, [r0, #0]
 800187a:	07db      	lsls	r3, r3, #31
 800187c:	d410      	bmi.n	80018a0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	079f      	lsls	r7, r3, #30
 8001882:	d45d      	bmi.n	8001940 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	0719      	lsls	r1, r3, #28
 8001888:	f100 8094 	bmi.w	80019b4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	682b      	ldr	r3, [r5, #0]
 800188e:	075a      	lsls	r2, r3, #29
 8001890:	f100 80be 	bmi.w	8001a10 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001894:	69e8      	ldr	r0, [r5, #28]
 8001896:	2800      	cmp	r0, #0
 8001898:	f040 812c 	bne.w	8001af4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800189c:	2000      	movs	r0, #0
 800189e:	e028      	b.n	80018f2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	4c8f      	ldr	r4, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80018a2:	6863      	ldr	r3, [r4, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d007      	beq.n	80018bc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ac:	6863      	ldr	r3, [r4, #4]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_OscConfig+0x5e>
 80018b6:	6863      	ldr	r3, [r4, #4]
 80018b8:	03de      	lsls	r6, r3, #15
 80018ba:	d506      	bpl.n	80018ca <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	039c      	lsls	r4, r3, #14
 80018c0:	d5dd      	bpl.n	800187e <HAL_RCC_OscConfig+0x12>
 80018c2:	686b      	ldr	r3, [r5, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1da      	bne.n	800187e <HAL_RCC_OscConfig+0x12>
 80018c8:	e7d4      	b.n	8001874 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	686b      	ldr	r3, [r5, #4]
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d112      	bne.n	80018f8 <HAL_RCC_OscConfig+0x8c>
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018da:	f7ff fa99 	bl	8000e10 <HAL_GetTick>
 80018de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	0398      	lsls	r0, r3, #14
 80018e4:	d4cb      	bmi.n	800187e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa93 	bl	8000e10 <HAL_GetTick>
 80018ea:	1b80      	subs	r0, r0, r6
 80018ec:	2864      	cmp	r0, #100	; 0x64
 80018ee:	d9f7      	bls.n	80018e0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
}
 80018f2:	b002      	add	sp, #8
 80018f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	b99b      	cbnz	r3, 8001922 <HAL_RCC_OscConfig+0xb6>
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800190a:	f7ff fa81 	bl	8000e10 <HAL_GetTick>
 800190e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	0399      	lsls	r1, r3, #14
 8001914:	d5b3      	bpl.n	800187e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001916:	f7ff fa7b 	bl	8000e10 <HAL_GetTick>
 800191a:	1b80      	subs	r0, r0, r6
 800191c:	2864      	cmp	r0, #100	; 0x64
 800191e:	d9f7      	bls.n	8001910 <HAL_RCC_OscConfig+0xa4>
 8001920:	e7e6      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	d103      	bne.n	8001932 <HAL_RCC_OscConfig+0xc6>
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	6023      	str	r3, [r4, #0]
 8001930:	e7cf      	b.n	80018d2 <HAL_RCC_OscConfig+0x66>
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6023      	str	r3, [r4, #0]
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	e7cb      	b.n	80018d8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001940:	4c67      	ldr	r4, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	f013 0f0c 	tst.w	r3, #12
 8001948:	d007      	beq.n	800195a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d110      	bne.n	8001976 <HAL_RCC_OscConfig+0x10a>
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	03da      	lsls	r2, r3, #15
 8001958:	d40d      	bmi.n	8001976 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	079b      	lsls	r3, r3, #30
 800195e:	d502      	bpl.n	8001966 <HAL_RCC_OscConfig+0xfa>
 8001960:	692b      	ldr	r3, [r5, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d186      	bne.n	8001874 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	696a      	ldr	r2, [r5, #20]
 800196a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800196e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001972:	6023      	str	r3, [r4, #0]
 8001974:	e786      	b.n	8001884 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001976:	692a      	ldr	r2, [r5, #16]
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x278>)
 800197a:	b16a      	cbz	r2, 8001998 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001980:	f7ff fa46 	bl	8000e10 <HAL_GetTick>
 8001984:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	079f      	lsls	r7, r3, #30
 800198a:	d4ec      	bmi.n	8001966 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198c:	f7ff fa40 	bl	8000e10 <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f7      	bls.n	8001986 <HAL_RCC_OscConfig+0x11a>
 8001996:	e7ab      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001998:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800199a:	f7ff fa39 	bl	8000e10 <HAL_GetTick>
 800199e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	0798      	lsls	r0, r3, #30
 80019a4:	f57f af6e 	bpl.w	8001884 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa32 	bl	8000e10 <HAL_GetTick>
 80019ac:	1b80      	subs	r0, r0, r6
 80019ae:	2802      	cmp	r0, #2
 80019b0:	d9f6      	bls.n	80019a0 <HAL_RCC_OscConfig+0x134>
 80019b2:	e79d      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b4:	69aa      	ldr	r2, [r5, #24]
 80019b6:	4c4a      	ldr	r4, [pc, #296]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	b1da      	cbz	r2, 80019f4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa26 	bl	8000e10 <HAL_GetTick>
 80019c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019c8:	079b      	lsls	r3, r3, #30
 80019ca:	d50d      	bpl.n	80019e8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019d0:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80019d8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80019da:	bf00      	nop
  }
  while (Delay --);
 80019dc:	9b01      	ldr	r3, [sp, #4]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_RCC_OscConfig+0x16e>
 80019e6:	e751      	b.n	800188c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff fa12 	bl	8000e10 <HAL_GetTick>
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9e9      	bls.n	80019c6 <HAL_RCC_OscConfig+0x15a>
 80019f2:	e77d      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80019f4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa0b 	bl	8000e10 <HAL_GetTick>
 80019fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019fe:	079f      	lsls	r7, r3, #30
 8001a00:	f57f af44 	bpl.w	800188c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff fa04 	bl	8000e10 <HAL_GetTick>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	2802      	cmp	r0, #2
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCC_OscConfig+0x190>
 8001a0e:	e76f      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a10:	4c33      	ldr	r4, [pc, #204]	; (8001ae0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	69e3      	ldr	r3, [r4, #28]
 8001a14:	00d8      	lsls	r0, r3, #3
 8001a16:	d424      	bmi.n	8001a62 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001a18:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	69e3      	ldr	r3, [r4, #28]
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61e3      	str	r3, [r4, #28]
 8001a22:	69e3      	ldr	r3, [r4, #28]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4e30      	ldr	r6, [pc, #192]	; (8001af0 <HAL_RCC_OscConfig+0x284>)
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	05d9      	lsls	r1, r3, #23
 8001a32:	d518      	bpl.n	8001a66 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	68eb      	ldr	r3, [r5, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d126      	bne.n	8001a88 <HAL_RCC_OscConfig+0x21c>
 8001a3a:	6a23      	ldr	r3, [r4, #32]
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a42:	f7ff f9e5 	bl	8000e10 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a4a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	6a23      	ldr	r3, [r4, #32]
 8001a4e:	079b      	lsls	r3, r3, #30
 8001a50:	d53f      	bpl.n	8001ad2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001a52:	2f00      	cmp	r7, #0
 8001a54:	f43f af1e 	beq.w	8001894 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	69e3      	ldr	r3, [r4, #28]
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	61e3      	str	r3, [r4, #28]
 8001a60:	e718      	b.n	8001894 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001a62:	2700      	movs	r7, #0
 8001a64:	e7e2      	b.n	8001a2c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	6833      	ldr	r3, [r6, #0]
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f9cf 	bl	8000e10 <HAL_GetTick>
 8001a72:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	6833      	ldr	r3, [r6, #0]
 8001a76:	05da      	lsls	r2, r3, #23
 8001a78:	d4dc      	bmi.n	8001a34 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff f9c9 	bl	8000e10 <HAL_GetTick>
 8001a7e:	eba0 0008 	sub.w	r0, r0, r8
 8001a82:	2864      	cmp	r0, #100	; 0x64
 8001a84:	d9f6      	bls.n	8001a74 <HAL_RCC_OscConfig+0x208>
 8001a86:	e733      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	b9ab      	cbnz	r3, 8001ab6 <HAL_RCC_OscConfig+0x24a>
 8001a8a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6223      	str	r3, [r4, #32]
 8001a96:	6a23      	ldr	r3, [r4, #32]
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f9b7 	bl	8000e10 <HAL_GetTick>
 8001aa2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	6a23      	ldr	r3, [r4, #32]
 8001aa6:	0798      	lsls	r0, r3, #30
 8001aa8:	d5d3      	bpl.n	8001a52 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7ff f9b1 	bl	8000e10 <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	4540      	cmp	r0, r8
 8001ab2:	d9f7      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x238>
 8001ab4:	e71c      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	6a23      	ldr	r3, [r4, #32]
 8001aba:	d103      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x258>
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6223      	str	r3, [r4, #32]
 8001ac2:	e7ba      	b.n	8001a3a <HAL_RCC_OscConfig+0x1ce>
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6223      	str	r3, [r4, #32]
 8001aca:	6a23      	ldr	r3, [r4, #32]
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	e7b6      	b.n	8001a40 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad2:	f7ff f99d 	bl	8000e10 <HAL_GetTick>
 8001ad6:	eba0 0008 	sub.w	r0, r0, r8
 8001ada:	42b0      	cmp	r0, r6
 8001adc:	d9b6      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1e0>
 8001ade:	e707      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	42420000 	.word	0x42420000
 8001ae8:	42420480 	.word	0x42420480
 8001aec:	20000008 	.word	0x20000008
 8001af0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x334>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	461c      	mov	r4, r3
 8001afa:	f002 020c 	and.w	r2, r2, #12
 8001afe:	2a08      	cmp	r2, #8
 8001b00:	d03d      	beq.n	8001b7e <HAL_RCC_OscConfig+0x312>
 8001b02:	2300      	movs	r3, #0
 8001b04:	4e27      	ldr	r6, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b06:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001b08:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0a:	d12b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f980 	bl	8000e10 <HAL_GetTick>
 8001b10:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	0199      	lsls	r1, r3, #6
 8001b16:	d41f      	bmi.n	8001b58 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b18:	6a2b      	ldr	r3, [r5, #32]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b20:	6862      	ldr	r2, [r4, #4]
 8001b22:	68a9      	ldr	r1, [r5, #8]
 8001b24:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001b2e:	6862      	ldr	r2, [r4, #4]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f967 	bl	8000e10 <HAL_GetTick>
 8001b42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	019a      	lsls	r2, r3, #6
 8001b48:	f53f aea8 	bmi.w	800189c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f960 	bl	8000e10 <HAL_GetTick>
 8001b50:	1b40      	subs	r0, r0, r5
 8001b52:	2802      	cmp	r0, #2
 8001b54:	d9f6      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2d8>
 8001b56:	e6cb      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f95a 	bl	8000e10 <HAL_GetTick>
 8001b5c:	1bc0      	subs	r0, r0, r7
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9d7      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2a6>
 8001b62:	e6c5      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001b64:	f7ff f954 	bl	8000e10 <HAL_GetTick>
 8001b68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	f57f ae95 	bpl.w	800189c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f94d 	bl	8000e10 <HAL_GetTick>
 8001b76:	1b40      	subs	r0, r0, r5
 8001b78:	2802      	cmp	r0, #2
 8001b7a:	d9f6      	bls.n	8001b6a <HAL_RCC_OscConfig+0x2fe>
 8001b7c:	e6b8      	b.n	80018f0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7e:	2801      	cmp	r0, #1
 8001b80:	f43f aeb7 	beq.w	80018f2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001b84:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	6a2b      	ldr	r3, [r5, #32]
 8001b88:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f47f ae71 	bne.w	8001874 <HAL_RCC_OscConfig+0x8>
 8001b92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b94:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001b98:	1ac0      	subs	r0, r0, r3
 8001b9a:	bf18      	it	ne
 8001b9c:	2001      	movne	r0, #1
 8001b9e:	e6a8      	b.n	80018f2 <HAL_RCC_OscConfig+0x86>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	42420060 	.word	0x42420060

08001ba8 <HAL_RCC_GetSysClockFreq>:
{
 8001ba8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001bac:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bae:	ac02      	add	r4, sp, #8
 8001bb0:	f103 0510 	add.w	r5, r3, #16
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	c203      	stmia	r2!, {r0, r1}
 8001bbe:	42ab      	cmp	r3, r5
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	d1f7      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bc4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001bc8:	4911      	ldr	r1, [pc, #68]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bca:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001bce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd0:	f003 020c 	and.w	r2, r3, #12
 8001bd4:	2a08      	cmp	r2, #8
 8001bd6:	d117      	bne.n	8001c08 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bd8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001bdc:	a806      	add	r0, sp, #24
 8001bde:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be6:	d50c      	bpl.n	8001c02 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bf0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bf2:	aa06      	add	r2, sp, #24
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001bfe:	b007      	add	sp, #28
 8001c00:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x70>)
 8001c04:	4350      	muls	r0, r2
 8001c06:	e7fa      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001c0a:	e7f8      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x56>
 8001c0c:	080059c0 	.word	0x080059c0
 8001c10:	40021000 	.word	0x40021000
 8001c14:	007a1200 	.word	0x007a1200
 8001c18:	003d0900 	.word	0x003d0900

08001c1c <HAL_RCC_ClockConfig>:
{
 8001c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c20:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c22:	4604      	mov	r4, r0
 8001c24:	b910      	cbnz	r0, 8001c2c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
}
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4a44      	ldr	r2, [pc, #272]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d328      	bcc.n	8001c8a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	6821      	ldr	r1, [r4, #0]
 8001c3a:	078e      	lsls	r6, r1, #30
 8001c3c:	d430      	bmi.n	8001ca0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	07ca      	lsls	r2, r1, #31
 8001c40:	d443      	bmi.n	8001cca <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <HAL_RCC_ClockConfig+0x124>)
 8001c44:	6813      	ldr	r3, [r2, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	d865      	bhi.n	8001d1a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	4d3c      	ldr	r5, [pc, #240]	; (8001d44 <HAL_RCC_ClockConfig+0x128>)
 8001c52:	f012 0f04 	tst.w	r2, #4
 8001c56:	d16c      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	0713      	lsls	r3, r2, #28
 8001c5a:	d506      	bpl.n	8001c6a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5c:	686b      	ldr	r3, [r5, #4]
 8001c5e:	6922      	ldr	r2, [r4, #16]
 8001c60:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001c64:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c68:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c6a:	f7ff ff9d 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001c6e:	686b      	ldr	r3, [r5, #4]
 8001c70:	4a35      	ldr	r2, [pc, #212]	; (8001d48 <HAL_RCC_ClockConfig+0x12c>)
 8001c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	40d8      	lsrs	r0, r3
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_RCC_ClockConfig+0x130>)
 8001c7c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_ClockConfig+0x134>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f7ff f883 	bl	8000d8c <HAL_InitTick>
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7ce      	b.n	8001c28 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	f023 0307 	bic.w	r3, r3, #7
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	428b      	cmp	r3, r1
 8001c9c:	d1c3      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xa>
 8001c9e:	e7cb      	b.n	8001c38 <HAL_RCC_ClockConfig+0x1c>
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca6:	bf1e      	ittt	ne
 8001ca8:	685a      	ldrne	r2, [r3, #4]
 8001caa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001cae:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb2:	bf42      	ittt	mi
 8001cb4:	685a      	ldrmi	r2, [r3, #4]
 8001cb6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001cba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	68a0      	ldr	r0, [r4, #8]
 8001cc0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cc4:	4302      	orrs	r2, r0
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	e7b9      	b.n	8001c3e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	6862      	ldr	r2, [r4, #4]
 8001ccc:	4e1d      	ldr	r6, [pc, #116]	; (8001d44 <HAL_RCC_ClockConfig+0x128>)
 8001cce:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	d11a      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	d0a5      	beq.n	8001c26 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f892 	bl	8000e10 <HAL_GetTick>
 8001cec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	6873      	ldr	r3, [r6, #4]
 8001cf0:	6862      	ldr	r2, [r4, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cfa:	d0a2      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f888 	bl	8000e10 <HAL_GetTick>
 8001d00:	1bc0      	subs	r0, r0, r7
 8001d02:	4540      	cmp	r0, r8
 8001d04:	d9f3      	bls.n	8001cee <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001d06:	2003      	movs	r0, #3
 8001d08:	e78e      	b.n	8001c28 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0a:	2a02      	cmp	r2, #2
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d12:	e7e1      	b.n	8001cd8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	f013 0f02 	tst.w	r3, #2
 8001d18:	e7de      	b.n	8001cd8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	432b      	orrs	r3, r5
 8001d22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	42ab      	cmp	r3, r5
 8001d2c:	f47f af7b 	bne.w	8001c26 <HAL_RCC_ClockConfig+0xa>
 8001d30:	e78d      	b.n	8001c4e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d32:	686b      	ldr	r3, [r5, #4]
 8001d34:	68e1      	ldr	r1, [r4, #12]
 8001d36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	606b      	str	r3, [r5, #4]
 8001d3e:	e78b      	b.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08005a3c 	.word	0x08005a3c
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d62:	6810      	ldr	r0, [r2, #0]
}
 8001d64:	40d8      	lsrs	r0, r3
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08005a4c 	.word	0x08005a4c
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d82:	6810      	ldr	r0, [r2, #0]
}
 8001d84:	40d8      	lsrs	r0, r3
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08005a4c 	.word	0x08005a4c
 8001d90:	20000008 	.word	0x20000008

08001d94 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d94:	6803      	ldr	r3, [r0, #0]
{
 8001d96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d9a:	07d9      	lsls	r1, r3, #31
{
 8001d9c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d9e:	d520      	bpl.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	4c35      	ldr	r4, [pc, #212]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001da2:	69e3      	ldr	r3, [r4, #28]
 8001da4:	00da      	lsls	r2, r3, #3
 8001da6:	d432      	bmi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001da8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	69e3      	ldr	r3, [r4, #28]
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61e3      	str	r3, [r4, #28]
 8001db2:	69e3      	ldr	r3, [r4, #28]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4e2f      	ldr	r6, [pc, #188]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001dbe:	6833      	ldr	r3, [r6, #0]
 8001dc0:	05db      	lsls	r3, r3, #23
 8001dc2:	d526      	bpl.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001dca:	d136      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dcc:	6a23      	ldr	r3, [r4, #32]
 8001dce:	686a      	ldr	r2, [r5, #4]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd8:	b11f      	cbz	r7, 8001de2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	69e3      	ldr	r3, [r4, #28]
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de2:	6828      	ldr	r0, [r5, #0]
 8001de4:	0783      	lsls	r3, r0, #30
 8001de6:	d506      	bpl.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001dea:	68a9      	ldr	r1, [r5, #8]
 8001dec:	6853      	ldr	r3, [r2, #4]
 8001dee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001df2:	430b      	orrs	r3, r1
 8001df4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001df6:	f010 0010 	ands.w	r0, r0, #16
 8001dfa:	d01b      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001dfe:	68e9      	ldr	r1, [r5, #12]
 8001e00:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6053      	str	r3, [r2, #4]
 8001e0c:	e012      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2700      	movs	r7, #0
 8001e10:	e7d4      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e12:	6833      	ldr	r3, [r6, #0]
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001e1a:	f7fe fff9 	bl	8000e10 <HAL_GetTick>
 8001e1e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	05d8      	lsls	r0, r3, #23
 8001e24:	d4ce      	bmi.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7fe fff3 	bl	8000e10 <HAL_GetTick>
 8001e2a:	eba0 0008 	sub.w	r0, r0, r8
 8001e2e:	2864      	cmp	r0, #100	; 0x64
 8001e30:	d9f6      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001e32:	2003      	movs	r0, #3
}
 8001e34:	b002      	add	sp, #8
 8001e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e3a:	686a      	ldr	r2, [r5, #4]
 8001e3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d0c3      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e44:	2001      	movs	r0, #1
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e48:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e4a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e52:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001e54:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e56:	07d9      	lsls	r1, r3, #31
 8001e58:	d5b8      	bpl.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ffd9 	bl	8000e10 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001e62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	6a23      	ldr	r3, [r4, #32]
 8001e66:	079a      	lsls	r2, r3, #30
 8001e68:	d4b0      	bmi.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe ffd1 	bl	8000e10 <HAL_GetTick>
 8001e6e:	1b80      	subs	r0, r0, r6
 8001e70:	4540      	cmp	r0, r8
 8001e72:	d9f7      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001e74:	e7dd      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42420440 	.word	0x42420440

08001e84 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	4604      	mov	r4, r0
 8001e88:	460e      	mov	r6, r1
 8001e8a:	4615      	mov	r5, r2
 8001e8c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8e:	6821      	ldr	r1, [r4, #0]
 8001e90:	688a      	ldr	r2, [r1, #8]
 8001e92:	ea36 0302 	bics.w	r3, r6, r2
 8001e96:	d001      	beq.n	8001e9c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e02d      	b.n	8001ef8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001e9c:	1c6b      	adds	r3, r5, #1
 8001e9e:	d0f7      	beq.n	8001e90 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ea0:	f7fe ffb6 	bl	8000e10 <HAL_GetTick>
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d8f1      	bhi.n	8001e8e <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eb2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb4:	6862      	ldr	r2, [r4, #4]
 8001eb6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001eba:	d10a      	bne.n	8001ed2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8001ebc:	68a2      	ldr	r2, [r4, #8]
 8001ebe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ec2:	d002      	beq.n	8001eca <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ec4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ec8:	d103      	bne.n	8001ed2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ed4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ed8:	d107      	bne.n	8001eea <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001efa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001efa:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001efc:	4613      	mov	r3, r2
 8001efe:	460a      	mov	r2, r1
 8001f00:	2180      	movs	r1, #128	; 0x80
{
 8001f02:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f04:	f7ff ffbe 	bl	8001e84 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001f08:	b120      	cbz	r0, 8001f14 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001f0a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001f14:	bd10      	pop	{r4, pc}

08001f16 <HAL_SPI_Init>:
{
 8001f16:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001f18:	4604      	mov	r4, r0
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d034      	beq.n	8001f88 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f22:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f2a:	b91b      	cbnz	r3, 8001f34 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001f2c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001f30:	f001 f82a 	bl	8002f88 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f34:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001f36:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001f3c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f3e:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f44:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f46:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001f4a:	4303      	orrs	r3, r0
 8001f4c:	68e0      	ldr	r0, [r4, #12]
 8001f4e:	4303      	orrs	r3, r0
 8001f50:	6920      	ldr	r0, [r4, #16]
 8001f52:	4303      	orrs	r3, r0
 8001f54:	6960      	ldr	r0, [r4, #20]
 8001f56:	4303      	orrs	r3, r0
 8001f58:	69e0      	ldr	r0, [r4, #28]
 8001f5a:	4303      	orrs	r3, r0
 8001f5c:	6a20      	ldr	r0, [r4, #32]
 8001f5e:	4303      	orrs	r3, r0
 8001f60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f62:	4303      	orrs	r3, r0
 8001f64:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f68:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f6a:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f6c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f72:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f74:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f76:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f7c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001f7e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f80:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001f86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
 8001f8a:	e7fc      	b.n	8001f86 <HAL_SPI_Init+0x70>

08001f8c <HAL_SPI_Transmit>:
{
 8001f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f90:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001f92:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001f96:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001f98:	2b01      	cmp	r3, #1
{
 8001f9a:	460d      	mov	r5, r1
 8001f9c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001f9e:	f000 809c 	beq.w	80020da <HAL_SPI_Transmit+0x14e>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001fa8:	f7fe ff32 	bl	8000e10 <HAL_GetTick>
 8001fac:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001fae:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001fb2:	b2c0      	uxtb	r0, r0
 8001fb4:	2801      	cmp	r0, #1
 8001fb6:	f040 808e 	bne.w	80020d6 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d05e      	beq.n	800207c <HAL_SPI_Transmit+0xf0>
 8001fbe:	f1b8 0f00 	cmp.w	r8, #0
 8001fc2:	d05b      	beq.n	800207c <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fc4:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc6:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fcc:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fce:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fd0:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001fd2:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001fd6:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fd8:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001fda:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8001fde:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001fe4:	bf08      	it	eq
 8001fe6:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fe8:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001fea:	bf08      	it	eq
 8001fec:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8001ff0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001ff4:	bf08      	it	eq
 8001ff6:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff8:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ffa:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ffc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001ffe:	bf5e      	ittt	pl
 8002000:	6803      	ldrpl	r3, [r0, #0]
 8002002:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002006:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002008:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	d13e      	bne.n	800208e <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002010:	b113      	cbz	r3, 8002018 <HAL_SPI_Transmit+0x8c>
 8002012:	f1b8 0f01 	cmp.w	r8, #1
 8002016:	d107      	bne.n	8002028 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002018:	f835 3b02 	ldrh.w	r3, [r5], #2
 800201c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800201e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002020:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002022:	3b01      	subs	r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002028:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800202a:	b29b      	uxth	r3, r3
 800202c:	b9a3      	cbnz	r3, 8002058 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800202e:	463a      	mov	r2, r7
 8002030:	4631      	mov	r1, r6
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff ff61 	bl	8001efa <SPI_EndRxTxTransaction>
 8002038:	2800      	cmp	r0, #0
 800203a:	d149      	bne.n	80020d0 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800203c:	68a3      	ldr	r3, [r4, #8]
 800203e:	b933      	cbnz	r3, 800204e <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	9201      	str	r2, [sp, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800204e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002050:	3000      	adds	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
error:
 8002056:	e011      	b.n	800207c <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	6893      	ldr	r3, [r2, #8]
 800205c:	0798      	lsls	r0, r3, #30
 800205e:	d505      	bpl.n	800206c <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002060:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002062:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002066:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002068:	6323      	str	r3, [r4, #48]	; 0x30
 800206a:	e7d9      	b.n	8002020 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800206c:	f7fe fed0 	bl	8000e10 <HAL_GetTick>
 8002070:	1bc0      	subs	r0, r0, r7
 8002072:	42b0      	cmp	r0, r6
 8002074:	d3d8      	bcc.n	8002028 <HAL_SPI_Transmit+0x9c>
 8002076:	1c71      	adds	r1, r6, #1
 8002078:	d0d6      	beq.n	8002028 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800207c:	2301      	movs	r3, #1
 800207e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002082:	2300      	movs	r3, #0
 8002084:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002088:	b002      	add	sp, #8
 800208a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208e:	b113      	cbz	r3, 8002096 <HAL_SPI_Transmit+0x10a>
 8002090:	f1b8 0f01 	cmp.w	r8, #1
 8002094:	d108      	bne.n	80020a8 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002096:	782b      	ldrb	r3, [r5, #0]
 8002098:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800209a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800209c:	3301      	adds	r3, #1
 800209e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80020a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80020a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0be      	beq.n	800202e <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	0792      	lsls	r2, r2, #30
 80020b6:	d503      	bpl.n	80020c0 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	731a      	strb	r2, [r3, #12]
 80020be:	e7ec      	b.n	800209a <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020c0:	f7fe fea6 	bl	8000e10 <HAL_GetTick>
 80020c4:	1bc0      	subs	r0, r0, r7
 80020c6:	42b0      	cmp	r0, r6
 80020c8:	d3ee      	bcc.n	80020a8 <HAL_SPI_Transmit+0x11c>
 80020ca:	1c73      	adds	r3, r6, #1
 80020cc:	d0ec      	beq.n	80020a8 <HAL_SPI_Transmit+0x11c>
 80020ce:	e7d4      	b.n	800207a <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d0:	2320      	movs	r3, #32
 80020d2:	6563      	str	r3, [r4, #84]	; 0x54
 80020d4:	e7b2      	b.n	800203c <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 80020d6:	2002      	movs	r0, #2
 80020d8:	e7d0      	b.n	800207c <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 80020da:	2002      	movs	r0, #2
 80020dc:	e7d4      	b.n	8002088 <HAL_SPI_Transmit+0xfc>

080020de <HAL_SPI_TransmitReceive>:
{
 80020de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020e2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80020e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80020e8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80020ea:	2b01      	cmp	r3, #1
{
 80020ec:	460d      	mov	r5, r1
 80020ee:	4691      	mov	r9, r2
 80020f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80020f2:	f000 80e2 	beq.w	80022ba <HAL_SPI_TransmitReceive+0x1dc>
 80020f6:	2301      	movs	r3, #1
 80020f8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80020fc:	f7fe fe88 	bl	8000e10 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002100:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002104:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002106:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002108:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800210a:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800210c:	d00a      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x46>
 800210e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002112:	f040 80d0 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002116:	68a0      	ldr	r0, [r4, #8]
 8002118:	2800      	cmp	r0, #0
 800211a:	f040 80cc 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x1d8>
 800211e:	2b04      	cmp	r3, #4
 8002120:	f040 80c9 	bne.w	80022b6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002124:	2d00      	cmp	r5, #0
 8002126:	f000 80c4 	beq.w	80022b2 <HAL_SPI_TransmitReceive+0x1d4>
 800212a:	f1b9 0f00 	cmp.w	r9, #0
 800212e:	f000 80c0 	beq.w	80022b2 <HAL_SPI_TransmitReceive+0x1d4>
 8002132:	2e00      	cmp	r6, #0
 8002134:	f000 80bd 	beq.w	80022b2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002138:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800213c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002140:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002142:	bf1c      	itt	ne
 8002144:	2305      	movne	r3, #5
 8002146:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800214a:	2300      	movs	r3, #0
 800214c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800214e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002152:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002154:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002156:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002158:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800215a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800215e:	bf58      	it	pl
 8002160:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002162:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002164:	bf58      	it	pl
 8002166:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800216a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800216c:	bf58      	it	pl
 800216e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002170:	68e2      	ldr	r2, [r4, #12]
 8002172:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002176:	d158      	bne.n	800222a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002178:	b109      	cbz	r1, 800217e <HAL_SPI_TransmitReceive+0xa0>
 800217a:	2e01      	cmp	r6, #1
 800217c:	d107      	bne.n	800218e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002182:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002184:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002186:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800218e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002190:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002192:	b29b      	uxth	r3, r3
 8002194:	b9ab      	cbnz	r3, 80021c2 <HAL_SPI_TransmitReceive+0xe4>
 8002196:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002198:	b29b      	uxth	r3, r3
 800219a:	b993      	cbnz	r3, 80021c2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800219c:	4642      	mov	r2, r8
 800219e:	4639      	mov	r1, r7
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff feaa 	bl	8001efa <SPI_EndRxTxTransaction>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	f040 8081 	bne.w	80022ae <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021ac:	68a3      	ldr	r3, [r4, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d132      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	9001      	str	r0, [sp, #4]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	9201      	str	r2, [sp, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	9b01      	ldr	r3, [sp, #4]
 80021c0:	e02a      	b.n	8002218 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6893      	ldr	r3, [r2, #8]
 80021c6:	0799      	lsls	r1, r3, #30
 80021c8:	d50d      	bpl.n	80021e6 <HAL_SPI_TransmitReceive+0x108>
 80021ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	b153      	cbz	r3, 80021e6 <HAL_SPI_TransmitReceive+0x108>
 80021d0:	b14d      	cbz	r5, 80021e6 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 80021d2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021d6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80021da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80021de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021e6:	6893      	ldr	r3, [r2, #8]
 80021e8:	07db      	lsls	r3, r3, #31
 80021ea:	d50c      	bpl.n	8002206 <HAL_SPI_TransmitReceive+0x128>
 80021ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b14b      	cbz	r3, 8002206 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80021f2:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021f8:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80021fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002200:	3b01      	subs	r3, #1
 8002202:	b29b      	uxth	r3, r3
 8002204:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002206:	f7fe fe03 	bl	8000e10 <HAL_GetTick>
 800220a:	eba0 0008 	sub.w	r0, r0, r8
 800220e:	4287      	cmp	r7, r0
 8002210:	d8be      	bhi.n	8002190 <HAL_SPI_TransmitReceive+0xb2>
 8002212:	1c7e      	adds	r6, r7, #1
 8002214:	d0bc      	beq.n	8002190 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002216:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002218:	2301      	movs	r3, #1
 800221a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800221e:	2300      	movs	r3, #0
 8002220:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002224:	b003      	add	sp, #12
 8002226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800222a:	b109      	cbz	r1, 8002230 <HAL_SPI_TransmitReceive+0x152>
 800222c:	2e01      	cmp	r6, #1
 800222e:	d108      	bne.n	8002242 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002230:	782a      	ldrb	r2, [r5, #0]
 8002232:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002236:	3301      	adds	r3, #1
 8002238:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800223a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800223c:	3b01      	subs	r3, #1
 800223e:	b29b      	uxth	r3, r3
 8002240:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002242:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002244:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	b91b      	cbnz	r3, 8002252 <HAL_SPI_TransmitReceive+0x174>
 800224a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0a4      	beq.n	800219c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6893      	ldr	r3, [r2, #8]
 8002256:	0798      	lsls	r0, r3, #30
 8002258:	d50e      	bpl.n	8002278 <HAL_SPI_TransmitReceive+0x19a>
 800225a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800225c:	b29b      	uxth	r3, r3
 800225e:	b15b      	cbz	r3, 8002278 <HAL_SPI_TransmitReceive+0x19a>
 8002260:	b155      	cbz	r5, 8002278 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8002262:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800226a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800226c:	3301      	adds	r3, #1
 800226e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002270:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002272:	3b01      	subs	r3, #1
 8002274:	b29b      	uxth	r3, r3
 8002276:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	6893      	ldr	r3, [r2, #8]
 800227c:	07d9      	lsls	r1, r3, #31
 800227e:	d50d      	bpl.n	800229c <HAL_SPI_TransmitReceive+0x1be>
 8002280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002282:	b29b      	uxth	r3, r3
 8002284:	b153      	cbz	r3, 800229c <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8002286:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002288:	68d2      	ldr	r2, [r2, #12]
 800228a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800228c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800228e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002290:	3301      	adds	r3, #1
 8002292:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002294:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002296:	3b01      	subs	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800229c:	f7fe fdb8 	bl	8000e10 <HAL_GetTick>
 80022a0:	eba0 0008 	sub.w	r0, r0, r8
 80022a4:	4287      	cmp	r7, r0
 80022a6:	d8cd      	bhi.n	8002244 <HAL_SPI_TransmitReceive+0x166>
 80022a8:	1c7b      	adds	r3, r7, #1
 80022aa:	d0cb      	beq.n	8002244 <HAL_SPI_TransmitReceive+0x166>
 80022ac:	e7b3      	b.n	8002216 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022ae:	2320      	movs	r3, #32
 80022b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
 80022b4:	e7b0      	b.n	8002218 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80022b6:	2002      	movs	r0, #2
 80022b8:	e7ae      	b.n	8002218 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80022ba:	2002      	movs	r0, #2
 80022bc:	e7b2      	b.n	8002224 <HAL_SPI_TransmitReceive+0x146>

080022be <HAL_SPI_ErrorCallback>:
 80022be:	4770      	bx	lr

080022c0 <HAL_SPI_IRQHandler>:
{
 80022c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80022c2:	6803      	ldr	r3, [r0, #0]
{
 80022c4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80022c6:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80022c8:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022ca:	0991      	lsrs	r1, r2, #6
 80022cc:	f011 0601 	ands.w	r6, r1, #1
 80022d0:	d10a      	bne.n	80022e8 <HAL_SPI_IRQHandler+0x28>
 80022d2:	f012 0f01 	tst.w	r2, #1
 80022d6:	d007      	beq.n	80022e8 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022d8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022dc:	d004      	beq.n	80022e8 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 80022de:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80022e0:	b004      	add	sp, #16
 80022e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 80022e6:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022e8:	0790      	lsls	r0, r2, #30
 80022ea:	d504      	bpl.n	80022f6 <HAL_SPI_IRQHandler+0x36>
 80022ec:	0628      	lsls	r0, r5, #24
 80022ee:	d502      	bpl.n	80022f6 <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 80022f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022f2:	4620      	mov	r0, r4
 80022f4:	e7f4      	b.n	80022e0 <HAL_SPI_IRQHandler+0x20>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80022f6:	0952      	lsrs	r2, r2, #5
 80022f8:	4311      	orrs	r1, r2
 80022fa:	07c9      	lsls	r1, r1, #31
 80022fc:	d54c      	bpl.n	8002398 <HAL_SPI_IRQHandler+0xd8>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022fe:	06a8      	lsls	r0, r5, #26
 8002300:	d54a      	bpl.n	8002398 <HAL_SPI_IRQHandler+0xd8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002302:	b176      	cbz	r6, 8002322 <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002304:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8002308:	2000      	movs	r0, #0
 800230a:	2903      	cmp	r1, #3
 800230c:	d03e      	beq.n	800238c <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800230e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002310:	f041 0104 	orr.w	r1, r1, #4
 8002314:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002316:	9001      	str	r0, [sp, #4]
 8002318:	68d9      	ldr	r1, [r3, #12]
 800231a:	9101      	str	r1, [sp, #4]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	9101      	str	r1, [sp, #4]
 8002320:	9901      	ldr	r1, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002322:	07d1      	lsls	r1, r2, #31
 8002324:	d50c      	bpl.n	8002340 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002326:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800232e:	2200      	movs	r2, #0
 8002330:	9203      	str	r2, [sp, #12]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	9203      	str	r2, [sp, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002340:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002342:	b34a      	cbz	r2, 8002398 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800234a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800234c:	2201      	movs	r2, #1
 800234e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002352:	07aa      	lsls	r2, r5, #30
 8002354:	d022      	beq.n	800239c <HAL_SPI_IRQHandler+0xdc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002356:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002358:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800235a:	f022 0203 	bic.w	r2, r2, #3
 800235e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002360:	b140      	cbz	r0, 8002374 <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_SPI_IRQHandler+0xe4>)
 8002364:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002366:	f7fe fef5 	bl	8001154 <HAL_DMA_Abort_IT>
 800236a:	b118      	cbz	r0, 8002374 <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800236c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800236e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002372:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002374:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002376:	b178      	cbz	r0, 8002398 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_SPI_IRQHandler+0xe4>)
 800237a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800237c:	f7fe feea 	bl	8001154 <HAL_DMA_Abort_IT>
 8002380:	b150      	cbz	r0, 8002398 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002382:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	6563      	str	r3, [r4, #84]	; 0x54
 800238a:	e005      	b.n	8002398 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800238c:	9002      	str	r0, [sp, #8]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	9202      	str	r2, [sp, #8]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	9302      	str	r3, [sp, #8]
 8002396:	9b02      	ldr	r3, [sp, #8]
}
 8002398:	b004      	add	sp, #16
 800239a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_ErrorCallback(hspi);
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff ff8e 	bl	80022be <HAL_SPI_ErrorCallback>
 80023a2:	e7f9      	b.n	8002398 <HAL_SPI_IRQHandler+0xd8>
 80023a4:	080023a9 	.word	0x080023a9

080023a8 <SPI_DMAAbortOnError>:
{
 80023a8:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80023aa:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80023ae:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80023b0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80023b2:	f7ff ff84 	bl	80022be <HAL_SPI_ErrorCallback>
}
 80023b6:	bd08      	pop	{r3, pc}

080023b8 <HAL_SPI_GetState>:
  return hspi->State;
 80023b8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80023bc:	4770      	bx	lr
	...

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	6803      	ldr	r3, [r0, #0]
 80023c6:	68c1      	ldr	r1, [r0, #12]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	2419      	movs	r4, #25
 80023cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023d0:	430a      	orrs	r2, r1
 80023d2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023d4:	6882      	ldr	r2, [r0, #8]
 80023d6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80023d8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023da:	4302      	orrs	r2, r0
 80023dc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80023de:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80023e2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023e6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	69a9      	ldr	r1, [r5, #24]
 80023f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023f4:	430a      	orrs	r2, r1
 80023f6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <UART_SetConfig+0x70>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d114      	bne.n	8002428 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023fe:	f7ff fcb9 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002402:	4360      	muls	r0, r4
 8002404:	686c      	ldr	r4, [r5, #4]
 8002406:	2264      	movs	r2, #100	; 0x64
 8002408:	00a4      	lsls	r4, r4, #2
 800240a:	fbb0 f0f4 	udiv	r0, r0, r4
 800240e:	fbb0 f1f2 	udiv	r1, r0, r2
 8002412:	fb02 0311 	mls	r3, r2, r1, r0
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	fbb3 f3f2 	udiv	r3, r3, r2
 800241e:	682c      	ldr	r4, [r5, #0]
 8002420:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002424:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002426:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002428:	f7ff fc94 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 800242c:	e7e9      	b.n	8002402 <UART_SetConfig+0x42>
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800

08002434 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	460e      	mov	r6, r1
 800243a:	4617      	mov	r7, r2
 800243c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243e:	6821      	ldr	r1, [r4, #0]
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	ea36 0303 	bics.w	r3, r6, r3
 8002446:	d101      	bne.n	800244c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002448:	2000      	movs	r0, #0
 800244a:	e014      	b.n	8002476 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800244c:	1c6b      	adds	r3, r5, #1
 800244e:	d0f7      	beq.n	8002440 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002450:	b995      	cbnz	r5, 8002478 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002452:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002454:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800245c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002466:	2320      	movs	r3, #32
 8002468:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800246c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002470:	2300      	movs	r3, #0
 8002472:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002478:	f7fe fcca 	bl	8000e10 <HAL_GetTick>
 800247c:	1bc0      	subs	r0, r0, r7
 800247e:	4285      	cmp	r5, r0
 8002480:	d2dd      	bcs.n	800243e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002482:	e7e6      	b.n	8002452 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002484 <HAL_UART_Init>:
{
 8002484:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002486:	4604      	mov	r4, r0
 8002488:	b340      	cbz	r0, 80024dc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800248a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800248e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002492:	b91b      	cbnz	r3, 800249c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002494:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002498:	f000 fdb8 	bl	800300c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800249c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800249e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80024a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80024a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024ae:	f7ff ff87 	bl	80023c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024cc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80024ce:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80024da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
 80024de:	e7fc      	b.n	80024da <HAL_UART_Init+0x56>

080024e0 <HAL_UART_Transmit>:
{
 80024e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80024ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80024ec:	2b20      	cmp	r3, #32
{
 80024ee:	460d      	mov	r5, r1
 80024f0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80024f2:	d14c      	bne.n	800258e <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d048      	beq.n	800258a <HAL_UART_Transmit+0xaa>
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d046      	beq.n	800258a <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80024fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002500:	2b01      	cmp	r3, #1
 8002502:	d044      	beq.n	800258e <HAL_UART_Transmit+0xae>
 8002504:	2301      	movs	r3, #1
 8002506:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250e:	2321      	movs	r3, #33	; 0x21
 8002510:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002514:	f7fe fc7c 	bl	8000e10 <HAL_GetTick>
 8002518:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800251a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800251e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002522:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002524:	b29b      	uxth	r3, r3
 8002526:	b963      	cbnz	r3, 8002542 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4632      	mov	r2, r6
 800252c:	2140      	movs	r1, #64	; 0x40
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff ff80 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002534:	b9a0      	cbnz	r0, 8002560 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002536:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002538:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800253c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002540:	e00f      	b.n	8002562 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002542:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002544:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800254c:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002554:	4620      	mov	r0, r4
 8002556:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002558:	d10e      	bne.n	8002578 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800255a:	f7ff ff6b 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800255e:	b110      	cbz	r0, 8002566 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8002560:	2003      	movs	r0, #3
}
 8002562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002566:	882b      	ldrh	r3, [r5, #0]
 8002568:	6822      	ldr	r2, [r4, #0]
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	b943      	cbnz	r3, 8002586 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8002574:	3502      	adds	r5, #2
 8002576:	e7d4      	b.n	8002522 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002578:	f7ff ff5c 	bl	8002434 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800257c:	2800      	cmp	r0, #0
 800257e:	d1ef      	bne.n	8002560 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	782a      	ldrb	r2, [r5, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	3501      	adds	r5, #1
 8002588:	e7cb      	b.n	8002522 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800258a:	2001      	movs	r0, #1
 800258c:	e7e9      	b.n	8002562 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800258e:	2002      	movs	r0, #2
 8002590:	e7e7      	b.n	8002562 <HAL_UART_Transmit+0x82>

08002592 <SX1278_hw_SetNSS>:
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8002592:	1e4b      	subs	r3, r1, #1
 8002594:	425a      	negs	r2, r3
 8002596:	8a01      	ldrh	r1, [r0, #16]
 8002598:	415a      	adcs	r2, r3
 800259a:	6940      	ldr	r0, [r0, #20]
 800259c:	f7fe bf08 	b.w	80013b0 <HAL_GPIO_WritePin>

080025a0 <SX1278_hw_init>:
__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t * hw) {
 80025a0:	b510      	push	{r4, lr}
 80025a2:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80025a4:	2101      	movs	r1, #1
 80025a6:	f7ff fff4 	bl	8002592 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80025aa:	8821      	ldrh	r1, [r4, #0]
 80025ac:	6860      	ldr	r0, [r4, #4]
 80025ae:	2201      	movs	r2, #1
}
 80025b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80025b4:	f7fe befc 	b.w	80013b0 <HAL_GPIO_WritePin>

080025b8 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80025b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025ba:	4605      	mov	r5, r0
 80025bc:	ac02      	add	r4, sp, #8
 80025be:	f804 1d01 	strb.w	r1, [r4, #-1]!
	SX1278_hw_SetNSS(hw, 0);
 80025c2:	2100      	movs	r1, #0
 80025c4:	f7ff ffe5 	bl	8002592 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80025c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025cc:	2201      	movs	r2, #1
 80025ce:	4621      	mov	r1, r4
 80025d0:	69a8      	ldr	r0, [r5, #24]
 80025d2:	f7ff fcdb 	bl	8001f8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80025d6:	69a8      	ldr	r0, [r5, #24]
 80025d8:	f7ff feee 	bl	80023b8 <HAL_SPI_GetState>
 80025dc:	2801      	cmp	r0, #1
 80025de:	d1fa      	bne.n	80025d6 <SX1278_hw_SPICommand+0x1e>
		;
}
 80025e0:	b003      	add	sp, #12
 80025e2:	bd30      	pop	{r4, r5, pc}

080025e4 <SX1278_SPIBurstWrite.part.1>:
		}
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	460d      	mov	r5, r1
 80025e8:	4606      	mov	r6, r0
 80025ea:	461f      	mov	r7, r3
		uint8_t length) {
	unsigned char i;
	if (length <= 1) {
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80025ec:	2100      	movs	r1, #0
 80025ee:	6800      	ldr	r0, [r0, #0]
void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 80025f0:	4614      	mov	r4, r2
		SX1278_hw_SetNSS(module->hw, 0);
 80025f2:	f7ff ffce 	bl	8002592 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80025f6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80025fa:	6830      	ldr	r0, [r6, #0]
 80025fc:	f7ff ffdc 	bl	80025b8 <SX1278_hw_SPICommand>
 8002600:	3f01      	subs	r7, #1
 8002602:	1e65      	subs	r5, r4, #1
 8002604:	443c      	add	r4, r7
		for (i = 0; i < length; i++) {
 8002606:	42a5      	cmp	r5, r4
 8002608:	6830      	ldr	r0, [r6, #0]
 800260a:	d103      	bne.n	8002614 <SX1278_SPIBurstWrite.part.1+0x30>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800260c:	2101      	movs	r1, #1
 800260e:	f7ff ffc0 	bl	8002592 <SX1278_hw_SetNSS>
	}
}
 8002612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002614:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002618:	f7ff ffce 	bl	80025b8 <SX1278_hw_SPICommand>
 800261c:	e7f3      	b.n	8002606 <SX1278_SPIBurstWrite.part.1+0x22>

0800261e <SX1278_hw_SPIReadByte>:
	uint8_t txByte = 0x00;
 800261e:	2100      	movs	r1, #0
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8002620:	b530      	push	{r4, r5, lr}
 8002622:	b085      	sub	sp, #20
	uint8_t rxByte = 0x00;
 8002624:	ac04      	add	r4, sp, #16
 8002626:	f804 1d01 	strb.w	r1, [r4, #-1]!
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800262a:	4605      	mov	r5, r0
	uint8_t txByte = 0x00;
 800262c:	f88d 100e 	strb.w	r1, [sp, #14]
	SX1278_hw_SetNSS(hw, 0);
 8002630:	f7ff ffaf 	bl	8002592 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	4622      	mov	r2, r4
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f10d 010e 	add.w	r1, sp, #14
 8002640:	2301      	movs	r3, #1
 8002642:	69a8      	ldr	r0, [r5, #24]
 8002644:	f7ff fd4b 	bl	80020de <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002648:	69a8      	ldr	r0, [r5, #24]
 800264a:	f7ff feb5 	bl	80023b8 <HAL_SPI_GetState>
 800264e:	2801      	cmp	r0, #1
 8002650:	d1fa      	bne.n	8002648 <SX1278_hw_SPIReadByte+0x2a>
}
 8002652:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002656:	b005      	add	sp, #20
 8002658:	bd30      	pop	{r4, r5, pc}

0800265a <SX1278_hw_DelayMs>:
	HAL_Delay(msec);
 800265a:	f7fe bbdf 	b.w	8000e1c <HAL_Delay>

0800265e <SX1278_hw_Reset>:
__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t * hw) {
 800265e:	b510      	push	{r4, lr}
 8002660:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 8002662:	2101      	movs	r1, #1
 8002664:	f7ff ff95 	bl	8002592 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8002668:	8821      	ldrh	r1, [r4, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	6860      	ldr	r0, [r4, #4]
 800266e:	f7fe fe9f 	bl	80013b0 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f7ff fff1 	bl	800265a <SX1278_hw_DelayMs>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002678:	6860      	ldr	r0, [r4, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	8821      	ldrh	r1, [r4, #0]
 800267e:	f7fe fe97 	bl	80013b0 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(100);
 8002682:	2064      	movs	r0, #100	; 0x64
 8002684:	f7ff ffe9 	bl	800265a <SX1278_hw_DelayMs>
}
 8002688:	bd10      	pop	{r4, pc}

0800268a <SX1278_hw_GetDIO0>:
__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 800268a:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800268c:	8901      	ldrh	r1, [r0, #8]
 800268e:	68c0      	ldr	r0, [r0, #12]
 8002690:	f7fe fe88 	bl	80013a4 <HAL_GPIO_ReadPin>
}
 8002694:	1e43      	subs	r3, r0, #1
 8002696:	4258      	negs	r0, r3
 8002698:	4158      	adcs	r0, r3
 800269a:	bd08      	pop	{r3, pc}

0800269c <SX1278_SPIRead>:
uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	4604      	mov	r4, r0
	SX1278_hw_SPICommand(module->hw, addr);
 80026a0:	6800      	ldr	r0, [r0, #0]
 80026a2:	f7ff ff89 	bl	80025b8 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80026a6:	6820      	ldr	r0, [r4, #0]
 80026a8:	f7ff ffb9 	bl	800261e <SX1278_hw_SPIReadByte>
 80026ac:	4605      	mov	r5, r0
	SX1278_hw_SetNSS(module->hw, 1);
 80026ae:	2101      	movs	r1, #1
 80026b0:	6820      	ldr	r0, [r4, #0]
 80026b2:	f7ff ff6e 	bl	8002592 <SX1278_hw_SetNSS>
}
 80026b6:	4628      	mov	r0, r5
 80026b8:	bd38      	pop	{r3, r4, r5, pc}

080026ba <SX1278_SPIWrite>:
void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80026ba:	b570      	push	{r4, r5, r6, lr}
 80026bc:	4604      	mov	r4, r0
 80026be:	460e      	mov	r6, r1
 80026c0:	4615      	mov	r5, r2
	SX1278_hw_SetNSS(module->hw, 0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	6800      	ldr	r0, [r0, #0]
 80026c6:	f7ff ff64 	bl	8002592 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80026ca:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	f7ff ff72 	bl	80025b8 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80026d4:	4629      	mov	r1, r5
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	f7ff ff6e 	bl	80025b8 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80026dc:	2101      	movs	r1, #1
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	f7ff ff57 	bl	8002592 <SX1278_hw_SetNSS>
}
 80026e4:	bd70      	pop	{r4, r5, r6, pc}

080026e6 <SX1278_SPIBurstRead>:
	if (length <= 1) {
 80026e6:	2b01      	cmp	r3, #1
		uint8_t length) {
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	4605      	mov	r5, r0
 80026ec:	460f      	mov	r7, r1
 80026ee:	4616      	mov	r6, r2
 80026f0:	461c      	mov	r4, r3
	if (length <= 1) {
 80026f2:	d916      	bls.n	8002722 <SX1278_SPIBurstRead+0x3c>
		SX1278_hw_SetNSS(module->hw, 0);
 80026f4:	2100      	movs	r1, #0
 80026f6:	6800      	ldr	r0, [r0, #0]
 80026f8:	f7ff ff4b 	bl	8002592 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80026fc:	4639      	mov	r1, r7
 80026fe:	6828      	ldr	r0, [r5, #0]
 8002700:	f7ff ff5a 	bl	80025b8 <SX1278_hw_SPICommand>
 8002704:	3c01      	subs	r4, #1
 8002706:	b2e4      	uxtb	r4, r4
 8002708:	1e77      	subs	r7, r6, #1
 800270a:	4434      	add	r4, r6
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 800270c:	6828      	ldr	r0, [r5, #0]
 800270e:	f7ff ff86 	bl	800261e <SX1278_hw_SPIReadByte>
 8002712:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++) {
 8002716:	42a7      	cmp	r7, r4
 8002718:	d1f8      	bne.n	800270c <SX1278_SPIBurstRead+0x26>
		SX1278_hw_SetNSS(module->hw, 1);
 800271a:	2101      	movs	r1, #1
 800271c:	6828      	ldr	r0, [r5, #0]
 800271e:	f7ff ff38 	bl	8002592 <SX1278_hw_SetNSS>
}
 8002722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002724 <SX1278_standby>:
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
	module->readBytes = 0;
	SX1278_standby(module); //Entry standby mode
}

void SX1278_standby(SX1278_t * module) {
 8002724:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002726:	2209      	movs	r2, #9
 8002728:	2101      	movs	r1, #1
void SX1278_standby(SX1278_t * module) {
 800272a:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800272c:	f7ff ffc5 	bl	80026ba <SX1278_SPIWrite>
	module->status = STANDBY;
 8002730:	2301      	movs	r3, #1
 8002732:	7523      	strb	r3, [r4, #20]
}
 8002734:	bd10      	pop	{r4, pc}

08002736 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8002736:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002738:	2208      	movs	r2, #8
 800273a:	2101      	movs	r1, #1
void SX1278_sleep(SX1278_t * module) {
 800273c:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800273e:	f7ff ffbc 	bl	80026ba <SX1278_SPIWrite>
	module->status = SLEEP;
 8002742:	2300      	movs	r3, #0
 8002744:	7523      	strb	r3, [r4, #20]
}
 8002746:	bd10      	pop	{r4, pc}

08002748 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002748:	2288      	movs	r2, #136	; 0x88
 800274a:	2101      	movs	r1, #1
 800274c:	f7ff bfb5 	b.w	80026ba <SX1278_SPIWrite>

08002750 <SX1278_config>:
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8002750:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	461d      	mov	r5, r3
 8002756:	4616      	mov	r6, r2
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002758:	f7ff ffed 	bl	8002736 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff ff7c 	bl	800265a <SX1278_hw_DelayMs>
	SX1278_entryLoRa(module);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fff0 	bl	8002748 <SX1278_entryLoRa>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002768:	04e9      	lsls	r1, r5, #19
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <SX1278_config+0x10c>)
 800276c:	2300      	movs	r3, #0
 800276e:	04f0      	lsls	r0, r6, #19
 8002770:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 8002774:	f7fe f988 	bl	8000a88 <__aeabi_uldivmod>
	Frequency_to_device[0] = (uint8_t)(frf >> 16);
 8002778:	0c03      	lsrs	r3, r0, #16
 800277a:	f88d 3004 	strb.w	r3, [sp, #4]
	Frequency_to_device[1] = (uint8_t)(frf >> 8);
 800277e:	0a03      	lsrs	r3, r0, #8
 8002780:	f88d 3005 	strb.w	r3, [sp, #5]
	Frequency_to_device[2] = (uint8_t)(frf >> 0);
 8002784:	f88d 0006 	strb.w	r0, [sp, #6]
 8002788:	2303      	movs	r3, #3
 800278a:	aa01      	add	r2, sp, #4
 800278c:	2106      	movs	r1, #6
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff28 	bl	80025e4 <SX1278_SPIBurstWrite.part.1>
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8002794:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <SX1278_config+0x110>)
 800279a:	2109      	movs	r1, #9
 800279c:	5cd2      	ldrb	r2, [r2, r3]
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff ff8b 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80027a4:	220b      	movs	r2, #11
 80027a6:	4620      	mov	r0, r4
 80027a8:	4611      	mov	r1, r2
 80027aa:	f7ff ff86 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80027ae:	2223      	movs	r2, #35	; 0x23
 80027b0:	210c      	movs	r1, #12
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff81 	bl	80026ba <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80027b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80027bc:	4a29      	ldr	r2, [pc, #164]	; (8002864 <SX1278_config+0x114>)
 80027be:	5cd5      	ldrb	r5, [r2, r3]
 80027c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <SX1278_config+0x118>)
 80027c6:	2d06      	cmp	r5, #6
 80027c8:	5cd2      	ldrb	r2, [r2, r3]
 80027ca:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	d137      	bne.n	8002842 <SX1278_config+0xf2>
		SX1278_SPIWrite(module,
 80027d2:	3203      	adds	r2, #3
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	211d      	movs	r1, #29
 80027d8:	4620      	mov	r0, r4
 80027da:	f7ff ff6e 	bl	80026ba <SX1278_SPIWrite>
		SX1278_SPIWrite(module,
 80027de:	2267      	movs	r2, #103	; 0x67
 80027e0:	211e      	movs	r1, #30
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff69 	bl	80026ba <SX1278_SPIWrite>
		tmp = SX1278_SPIRead(module, 0x31);
 80027e8:	2131      	movs	r1, #49	; 0x31
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff ff56 	bl	800269c <SX1278_SPIRead>
		tmp &= 0xF8;
 80027f0:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		SX1278_SPIWrite(module, 0x31, tmp);
 80027f4:	f042 0205 	orr.w	r2, r2, #5
 80027f8:	2131      	movs	r1, #49	; 0x31
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ff5d 	bl	80026ba <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002800:	220c      	movs	r2, #12
 8002802:	2137      	movs	r1, #55	; 0x37
		SX1278_SPIWrite(module,
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff ff58 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800280a:	4620      	mov	r0, r4
 800280c:	22ff      	movs	r2, #255	; 0xff
 800280e:	211f      	movs	r1, #31
 8002810:	f7ff ff53 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002814:	4620      	mov	r0, r4
 8002816:	2200      	movs	r2, #0
 8002818:	2120      	movs	r1, #32
 800281a:	f7ff ff4e 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 800281e:	4620      	mov	r0, r4
 8002820:	220c      	movs	r2, #12
 8002822:	2121      	movs	r1, #33	; 0x21
 8002824:	f7ff ff49 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002828:	2201      	movs	r2, #1
 800282a:	2141      	movs	r1, #65	; 0x41
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ff44 	bl	80026ba <SX1278_SPIWrite>
	module->readBytes = 0;
 8002832:	2300      	movs	r3, #0
	SX1278_standby(module); //Entry standby mode
 8002834:	4620      	mov	r0, r4
	module->readBytes = 0;
 8002836:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
	SX1278_standby(module); //Entry standby mode
 800283a:	f7ff ff73 	bl	8002724 <SX1278_standby>
}
 800283e:	b002      	add	sp, #8
 8002840:	bd70      	pop	{r4, r5, r6, pc}
		SX1278_SPIWrite(module,
 8002842:	3202      	adds	r2, #2
 8002844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002848:	211d      	movs	r1, #29
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ff35 	bl	80026ba <SX1278_SPIWrite>
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8002850:	012a      	lsls	r2, r5, #4
		SX1278_SPIWrite(module,
 8002852:	3207      	adds	r2, #7
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	211e      	movs	r1, #30
 8002858:	e7d4      	b.n	8002804 <SX1278_config+0xb4>
 800285a:	bf00      	nop
 800285c:	01e84800 	.word	0x01e84800
 8002860:	080059da 	.word	0x080059da
 8002864:	080059de 	.word	0x080059de
 8002868:	080059d0 	.word	0x080059d0

0800286c <SX1278_defaultConfig>:
void SX1278_defaultConfig(SX1278_t * module) {
 800286c:	b530      	push	{r4, r5, lr}
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 800286e:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 8002872:	7c82      	ldrb	r2, [r0, #18]
void SX1278_defaultConfig(SX1278_t * module) {
 8002874:	b085      	sub	sp, #20
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8002876:	7c03      	ldrb	r3, [r0, #16]
 8002878:	9202      	str	r2, [sp, #8]
 800287a:	7c42      	ldrb	r2, [r0, #17]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	462b      	mov	r3, r5
 8002882:	4622      	mov	r2, r4
 8002884:	f7ff ff64 	bl	8002750 <SX1278_config>
}
 8002888:	b005      	add	sp, #20
 800288a:	bd30      	pop	{r4, r5, pc}

0800288c <SX1278_clearLoRaIrq>:
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	2112      	movs	r1, #18
 8002890:	f7ff bf13 	b.w	80026ba <SX1278_SPIWrite>

08002894 <SX1278_LoRaEntryRx>:
}

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002894:	b570      	push	{r4, r5, r6, lr}
 8002896:	4604      	mov	r4, r0
 8002898:	460e      	mov	r6, r1
	uint8_t addr;

	module->packetLength = length;
 800289a:	74e1      	strb	r1, [r4, #19]
int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 800289c:	4615      	mov	r5, r2

	SX1278_defaultConfig(module);		//Setting base parameter
 800289e:	f7ff ffe5 	bl	800286c <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80028a2:	2284      	movs	r2, #132	; 0x84
 80028a4:	214d      	movs	r1, #77	; 0x4d
 80028a6:	4620      	mov	r0, r4
 80028a8:	f7ff ff07 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80028ac:	22ff      	movs	r2, #255	; 0xff
 80028ae:	2124      	movs	r1, #36	; 0x24
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ff02 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80028b6:	2201      	movs	r2, #1
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7ff fefd 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	2111      	movs	r1, #17
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7ff fef8 	bl	80026ba <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff ffde 	bl	800288c <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80028d0:	4632      	mov	r2, r6
 80028d2:	2122      	movs	r1, #34	; 0x22
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fef0 	bl	80026ba <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80028da:	210f      	movs	r1, #15
 80028dc:	4620      	mov	r0, r4
 80028de:	f7ff fedd 	bl	800269c <SX1278_SPIRead>
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80028e2:	210d      	movs	r1, #13
 80028e4:	4602      	mov	r2, r0
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff fee7 	bl	80026ba <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80028ec:	228d      	movs	r2, #141	; 0x8d
 80028ee:	2101      	movs	r1, #1
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7ff fee2 	bl	80026ba <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80028fc:	2118      	movs	r1, #24
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fecc 	bl	800269c <SX1278_SPIRead>
 8002904:	0743      	lsls	r3, r0, #29
 8002906:	d503      	bpl.n	8002910 <SX1278_LoRaEntryRx+0x7c>
			module->status = RX;
 8002908:	2303      	movs	r3, #3
			return 1;
 800290a:	2001      	movs	r0, #1
			module->status = RX;
 800290c:	7523      	strb	r3, [r4, #20]
			SX1278_defaultConfig(module);
			return 0;
		}
		SX1278_hw_DelayMs(1);
	}
}
 800290e:	bd70      	pop	{r4, r5, r6, pc}
		if (--timeout == 0) {
 8002910:	3d01      	subs	r5, #1
 8002912:	d107      	bne.n	8002924 <SX1278_LoRaEntryRx+0x90>
			SX1278_hw_Reset(module->hw);
 8002914:	6820      	ldr	r0, [r4, #0]
 8002916:	f7ff fea2 	bl	800265e <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff ffa6 	bl	800286c <SX1278_defaultConfig>
			return 0;
 8002920:	4628      	mov	r0, r5
 8002922:	e7f4      	b.n	800290e <SX1278_LoRaEntryRx+0x7a>
		SX1278_hw_DelayMs(1);
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff fe98 	bl	800265a <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800292a:	e7e7      	b.n	80028fc <SX1278_LoRaEntryRx+0x68>

0800292c <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8002930:	6800      	ldr	r0, [r0, #0]
 8002932:	f7ff feaa 	bl	800268a <SX1278_hw_GetDIO0>
 8002936:	b1f0      	cbz	r0, 8002976 <SX1278_LoRaRxPacket+0x4a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002938:	f104 0615 	add.w	r6, r4, #21
 800293c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002940:	2100      	movs	r1, #0
 8002942:	4630      	mov	r0, r6
 8002944:	f000 fc61 	bl	800320a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002948:	2110      	movs	r1, #16
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff fea6 	bl	800269c <SX1278_SPIRead>
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002950:	210d      	movs	r1, #13
 8002952:	4602      	mov	r2, r0
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff feb0 	bl	80026ba <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800295a:	7c63      	ldrb	r3, [r4, #17]
 800295c:	b973      	cbnz	r3, 800297c <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800295e:	7ce5      	ldrb	r5, [r4, #19]
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002960:	4620      	mov	r0, r4
 8002962:	462b      	mov	r3, r5
 8002964:	4632      	mov	r2, r6
 8002966:	2100      	movs	r1, #0
 8002968:	f7ff febd 	bl	80026e6 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800296c:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
		SX1278_clearLoRaIrq(module);
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff ff8b 	bl	800288c <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
}
 8002976:	f894 0115 	ldrb.w	r0, [r4, #277]	; 0x115
 800297a:	bd70      	pop	{r4, r5, r6, pc}
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800297c:	2113      	movs	r1, #19
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fe8c 	bl	800269c <SX1278_SPIRead>
 8002984:	4605      	mov	r5, r0
 8002986:	e7eb      	b.n	8002960 <SX1278_LoRaRxPacket+0x34>

08002988 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8002988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	4604      	mov	r4, r0
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	f89d a020 	ldrb.w	sl, [sp, #32]
 8002996:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 800299a:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 800299e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	SX1278_hw_init(module->hw);
 80029a2:	6800      	ldr	r0, [r0, #0]
 80029a4:	f7ff fdfc 	bl	80025a0 <SX1278_hw_init>
	module->frequency = frequency;
 80029a8:	e9c4 8902 	strd	r8, r9, [r4, #8]
	module->power = power;
 80029ac:	f884 a010 	strb.w	sl, [r4, #16]
	module->LoRa_Rate = LoRa_Rate;
 80029b0:	7467      	strb	r7, [r4, #17]
	module->LoRa_BW = LoRa_BW;
 80029b2:	74a6      	strb	r6, [r4, #18]
	module->packetLength = packetLength;
 80029b4:	74e5      	strb	r5, [r4, #19]
	SX1278_defaultConfig(module);
 80029b6:	4620      	mov	r0, r4
}
 80029b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SX1278_defaultConfig(module);
 80029bc:	f7ff bf56 	b.w	800286c <SX1278_defaultConfig>

080029c0 <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	460e      	mov	r6, r1
	if (length != module->readBytes)
 80029c4:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 80029c8:	4605      	mov	r5, r0
		length = module->readBytes;
	memcpy(rxBuf, module->rxBuffer, length);
 80029ca:	f100 0115 	add.w	r1, r0, #21
 80029ce:	4622      	mov	r2, r4
 80029d0:	4630      	mov	r0, r6
 80029d2:	f000 fc0f 	bl	80031f4 <memcpy>
	rxBuf[length] = '\0';
 80029d6:	2300      	movs	r3, #0
	module->readBytes = 0;
	return length;
}
 80029d8:	4620      	mov	r0, r4
	rxBuf[length] = '\0';
 80029da:	5533      	strb	r3, [r6, r4]
	module->readBytes = 0;
 80029dc:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 80029e0:	bd70      	pop	{r4, r5, r6, pc}

080029e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029e2:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e4:	2414      	movs	r4, #20
{
 80029e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e8:	4622      	mov	r2, r4
 80029ea:	2100      	movs	r1, #0
 80029ec:	a80c      	add	r0, sp, #48	; 0x30
 80029ee:	f000 fc0c 	bl	800320a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f2:	4622      	mov	r2, r4
 80029f4:	eb0d 0004 	add.w	r0, sp, r4
 80029f8:	2100      	movs	r1, #0
 80029fa:	f000 fc06 	bl	800320a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029fe:	2100      	movs	r1, #0
 8002a00:	2210      	movs	r2, #16
 8002a02:	a801      	add	r0, sp, #4
 8002a04:	f000 fc01 	bl	800320a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a08:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a14:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a20:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a22:	f7fe ff23 	bl	800186c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a26:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a30:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a32:	4621      	mov	r1, r4
 8002a34:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a36:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a3c:	f7ff f8ee 	bl	8001c1c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a44:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a46:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a48:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a4a:	f7ff f9a3 	bl	8001d94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002a4e:	b014      	add	sp, #80	; 0x50
 8002a50:	bd10      	pop	{r4, pc}
 8002a52:	0000      	movs	r0, r0
 8002a54:	0000      	movs	r0, r0
	...

08002a58 <main>:
{
 8002a58:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002a5c:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8002a5e:	f7fe f9b9 	bl	8000dd4 <HAL_Init>
  SystemClock_Config();
 8002a62:	f7ff ffbe 	bl	80029e2 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	2210      	movs	r2, #16
 8002a68:	2100      	movs	r1, #0
 8002a6a:	a808      	add	r0, sp, #32
 8002a6c:	f000 fbcd 	bl	800320a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a70:	4b8f      	ldr	r3, [pc, #572]	; (8002cb0 <main+0x258>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002a72:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8002cf8 <main+0x2a0>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002a78:	4f8e      	ldr	r7, [pc, #568]	; (8002cb4 <main+0x25c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	f042 0210 	orr.w	r2, r2, #16
 8002a7e:	619a      	str	r2, [r3, #24]
 8002a80:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	f002 0210 	and.w	r2, r2, #16
 8002a8a:	9204      	str	r2, [sp, #16]
 8002a8c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a90:	4889      	ldr	r0, [pc, #548]	; (8002cb8 <main+0x260>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a9c:	f002 0220 	and.w	r2, r2, #32
 8002aa0:	9205      	str	r2, [sp, #20]
 8002aa2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa6:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	f042 0204 	orr.w	r2, r2, #4
 8002aac:	619a      	str	r2, [r3, #24]
 8002aae:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	f002 0204 	and.w	r2, r2, #4
 8002ab8:	9206      	str	r2, [sp, #24]
 8002aba:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : SCL_OLED_Pin SDA_OLED_Pin */
  GPIO_InitStruct.Pin = SCL_OLED_Pin|SDA_OLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002abe:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	f042 0208 	orr.w	r2, r2, #8
 8002ac6:	619a      	str	r2, [r3, #24]
 8002ac8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002aca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	9307      	str	r3, [sp, #28]
 8002ad2:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ad4:	f7fe fc6c 	bl	80013b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ade:	4648      	mov	r0, r9
 8002ae0:	f7fe fc66 	bl	80013b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	2181      	movs	r1, #129	; 0x81
 8002aea:	f7fe fc61 	bl	80013b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002af2:	a908      	add	r1, sp, #32
 8002af4:	4870      	ldr	r0, [pc, #448]	; (8002cb8 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	e9cd 480a 	strd	r4, r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f7fe fb71 	bl	80011e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUZZER_Pin|CS_RF_Pin;
 8002b02:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	a908      	add	r1, sp, #32
 8002b08:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0a:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	e9cd 480a 	strd	r4, r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f7fe fb67 	bl	80011e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|D_C_Pin;
 8002b16:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	4638      	mov	r0, r7
 8002b1a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	e9cd 480a 	strd	r4, r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f7fe fb5e 	bl	80011e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_RF_Pin|FIRE_Pin;
 8002b28:	f44f 5382 	mov.w	r3, #4160	; 0x1040
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b30:	e9cd 3408 	strd	r3, r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f7fe fb55 	bl	80011e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b3e:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b40:	a908      	add	r1, sp, #32
 8002b42:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b44:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b48:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	f7fe fb4a 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b50:	4a5a      	ldr	r2, [pc, #360]	; (8002cbc <main+0x264>)
  hadc1.Instance = ADC1;
 8002b52:	4d5b      	ldr	r5, [pc, #364]	; (8002cc0 <main+0x268>)
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b54:	6853      	ldr	r3, [r2, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b56:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b5c:	ea43 0308 	orr.w	r3, r3, r8
 8002b60:	6053      	str	r3, [r2, #4]
  hadc1.Instance = ADC1;
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <main+0x26c>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b64:	60ac      	str	r4, [r5, #8]
  hadc1.Instance = ADC1;
 8002b66:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b68:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b6c:	732c      	strb	r4, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b6e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b70:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b72:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002b74:	612e      	str	r6, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b76:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8002b7a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b7c:	f7fe fa00 	bl	8000f80 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b80:	a908      	add	r1, sp, #32
 8002b82:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b84:	e9cd 4608 	strd	r4, r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002b88:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b8a:	f7fe f959 	bl	8000e40 <HAL_ADC_ConfigChannel>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8002b92:	4d4d      	ldr	r5, [pc, #308]	; (8002cc8 <main+0x270>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <main+0x274>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b96:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9a:	e9c5 1300 	strd	r1, r3, [r5]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b9e:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 10;
 8002ba0:	f04f 0b0a 	mov.w	fp, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ba4:	e9c5 0306 	strd	r0, r3, [r5, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ba8:	4628      	mov	r0, r5
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002baa:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bae:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bb2:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb6:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bb8:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bbc:	f7ff f9ab 	bl	8001f16 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8002bc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002bc4:	f8df c134 	ldr.w	ip, [pc, #308]	; 8002cfc <main+0x2a4>
  huart2.Instance = USART2;
 8002bc8:	4841      	ldr	r0, [pc, #260]	; (8002cd0 <main+0x278>)
  huart2.Init.BaudRate = 115200;
 8002bca:	e9c0 c300 	strd	ip, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bce:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd4:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd8:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bda:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bdc:	f7ff fc52 	bl	8002484 <HAL_UART_Init>
  hi2c2.Init.ClockSpeed = 100000;
 8002be0:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002d00 <main+0x2a8>
  hi2c2.Instance = I2C2;
 8002be4:	483b      	ldr	r0, [pc, #236]	; (8002cd4 <main+0x27c>)
  hi2c2.Init.ClockSpeed = 100000;
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <main+0x280>)
  hi2c2.Init.OwnAddress1 = 0;
 8002be8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8002bec:	e9c0 e300 	strd	lr, r3, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bf4:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf8:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bfc:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002bfe:	f7fe fd01 	bl	8001604 <HAL_I2C_Init>
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002c02:	4621      	mov	r1, r4
 8002c04:	4622      	mov	r2, r4
 8002c06:	2023      	movs	r0, #35	; 0x23
 8002c08:	f7fe fa4c 	bl	80010a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c0c:	2023      	movs	r0, #35	; 0x23
 8002c0e:	f7fe fa7d 	bl	800110c <HAL_NVIC_EnableIRQ>
  ssd1306_Init();
 8002c12:	f000 f8d1 	bl	8002db8 <ssd1306_Init>
	printf("Odbiornik/nadajnik radia LoRa\r\n");
 8002c16:	4831      	ldr	r0, [pc, #196]	; (8002cdc <main+0x284>)
 8002c18:	f000 ffd6 	bl	8003bc8 <puts>
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8002c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 8002c20:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <main+0x288>)
	SX1278.hw = &SX1278_hw;
 8002c22:	4c30      	ldr	r4, [pc, #192]	; (8002ce4 <main+0x28c>)
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8002c24:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.pin = CS_RF_Pin;
 8002c26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	SX1278_hw.reset.pin = RST_RF_Pin;
 8002c2a:	e9c3 6700 	strd	r6, r7, [r3]
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 8002c2e:	60df      	str	r7, [r3, #12]
	SX1278_hw.spi = &hspi1;
 8002c30:	619d      	str	r5, [r3, #24]
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 8002c32:	f8c3 9014 	str.w	r9, [r3, #20]
	SX1278_hw.nss.pin = CS_RF_Pin;
 8002c36:	611a      	str	r2, [r3, #16]
	SX1278.hw = &SX1278_hw;
 8002c38:	6023      	str	r3, [r4, #0]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_17DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_20_8KHZ, 10);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	a31a      	add	r3, pc, #104	; (adr r3, 8002ca8 <main+0x250>)
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	e9cd 6800 	strd	r6, r8, [sp]
 8002c46:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002c4a:	f7ff fe9d 	bl	8002988 <SX1278_begin>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8002c4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002c52:	2110      	movs	r1, #16
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fe1d 	bl	8002894 <SX1278_LoRaEntryRx>
 8002c5a:	4d23      	ldr	r5, [pc, #140]	; (8002ce8 <main+0x290>)
			SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8002c5c:	4e23      	ldr	r6, [pc, #140]	; (8002cec <main+0x294>)
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8002c5e:	6028      	str	r0, [r5, #0]
	printf("Konfiguracja zakonczona\r\n");
 8002c60:	4823      	ldr	r0, [pc, #140]	; (8002cf0 <main+0x298>)
 8002c62:	f000 ffb1 	bl	8003bc8 <puts>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c66:	f507 6780 	add.w	r7, r7, #1024	; 0x400
		HAL_Delay(1000);
 8002c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c6e:	f7fe f8d5 	bl	8000e1c <HAL_Delay>
		ret = SX1278_LoRaRxPacket(&SX1278);
 8002c72:	4620      	mov	r0, r4
 8002c74:	f7ff fe5a 	bl	800292c <SX1278_LoRaRxPacket>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6028      	str	r0, [r5, #0]
		if (ret > 0) {
 8002c7c:	b170      	cbz	r0, 8002c9c <main+0x244>
			SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8002c7e:	4631      	mov	r1, r6
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff fe9d 	bl	80029c0 <SX1278_read>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c86:	4638      	mov	r0, r7
 8002c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c8c:	f7fe fb95 	bl	80013ba <HAL_GPIO_TogglePin>
			printf("Zawartość pakietu (%d): %s\r\n", ret, buffer);
 8002c90:	4632      	mov	r2, r6
 8002c92:	6829      	ldr	r1, [r5, #0]
 8002c94:	4817      	ldr	r0, [pc, #92]	; (8002cf4 <main+0x29c>)
 8002c96:	f000 ff0f 	bl	8003ab8 <iprintf>
 8002c9a:	e7e6      	b.n	8002c6a <main+0x212>
			printf(".");
 8002c9c:	202e      	movs	r0, #46	; 0x2e
 8002c9e:	f000 ff23 	bl	8003ae8 <putchar>
 8002ca2:	e7e2      	b.n	8002c6a <main+0x212>
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	33bca100 	.word	0x33bca100
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40010c00 	.word	0x40010c00
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	2000066c 	.word	0x2000066c
 8002cc4:	40012400 	.word	0x40012400
 8002cc8:	200006dc 	.word	0x200006dc
 8002ccc:	40013000 	.word	0x40013000
 8002cd0:	20000734 	.word	0x20000734
 8002cd4:	20000618 	.word	0x20000618
 8002cd8:	000186a0 	.word	0x000186a0
 8002cdc:	080059e5 	.word	0x080059e5
 8002ce0:	20000894 	.word	0x20000894
 8002ce4:	20000778 	.word	0x20000778
 8002ce8:	20000890 	.word	0x20000890
 8002cec:	2000069c 	.word	0x2000069c
 8002cf0:	08005a04 	.word	0x08005a04
 8002cf4:	08005a1d 	.word	0x08005a1d
 8002cf8:	40010800 	.word	0x40010800
 8002cfc:	40004400 	.word	0x40004400
 8002d00:	40005800 	.word	0x40005800

08002d04 <_write>:
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
	HAL_Delay(time_delay);
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
}

int _write(int file, char *ptr, int len){
 8002d04:	b510      	push	{r4, lr}
 8002d06:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8002d08:	2332      	movs	r3, #50	; 0x32
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <_write+0x14>)
 8002d0e:	f7ff fbe7 	bl	80024e0 <HAL_UART_Transmit>
    return len;
}
 8002d12:	4620      	mov	r0, r4
 8002d14:	bd10      	pop	{r4, pc}
 8002d16:	bf00      	nop
 8002d18:	20000734 	.word	0x20000734

08002d1c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
void ssd1306_WriteCommand(uint8_t byte) {
 8002d24:	aa06      	add	r2, sp, #24
 8002d26:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d2a:	9200      	str	r2, [sp, #0]
 8002d2c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2178      	movs	r1, #120	; 0x78
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <ssd1306_WriteCommand+0x24>)
 8002d36:	f7fe fd09 	bl	800174c <HAL_I2C_Mem_Write>
}
 8002d3a:	b007      	add	sp, #28
 8002d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d40:	20000618 	.word	0x20000618

08002d44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	b289      	uxth	r1, r1
 8002d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8002d50:	9302      	str	r3, [sp, #8]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	2301      	movs	r3, #1
 8002d56:	2178      	movs	r1, #120	; 0x78
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <ssd1306_WriteData+0x20>)
 8002d5a:	f7fe fcf7 	bl	800174c <HAL_I2C_Mem_Write>
}
 8002d5e:	b005      	add	sp, #20
 8002d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d64:	20000618 	.word	0x20000618

08002d68 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002d68:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002d6a:	4905      	ldr	r1, [pc, #20]	; (8002d80 <ssd1306_Fill+0x18>)
 8002d6c:	1c02      	adds	r2, r0, #0
 8002d6e:	bf18      	it	ne
 8002d70:	2201      	movne	r2, #1
 8002d72:	4252      	negs	r2, r2
 8002d74:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002d76:	3301      	adds	r3, #1
 8002d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7c:	d1f6      	bne.n	8002d6c <ssd1306_Fill+0x4>
    }
}
 8002d7e:	4770      	bx	lr
 8002d80:	20000202 	.word	0x20000202

08002d84 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002d84:	b538      	push	{r3, r4, r5, lr}
 8002d86:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d88:	4d0a      	ldr	r5, [pc, #40]	; (8002db4 <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002d8a:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8002d8e:	b2c0      	uxtb	r0, r0
 8002d90:	f7ff ffc4 	bl	8002d1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff ffc1 	bl	8002d1c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002d9a:	2010      	movs	r0, #16
 8002d9c:	f7ff ffbe 	bl	8002d1c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002da0:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	3401      	adds	r4, #1
 8002da8:	f7ff ffcc 	bl	8002d44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dac:	2c08      	cmp	r4, #8
 8002dae:	d1ec      	bne.n	8002d8a <ssd1306_UpdateScreen+0x6>
    }
}
 8002db0:	bd38      	pop	{r3, r4, r5, pc}
 8002db2:	bf00      	nop
 8002db4:	20000202 	.word	0x20000202

08002db8 <ssd1306_Init>:
void ssd1306_Init(void) {
 8002db8:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8002dba:	2064      	movs	r0, #100	; 0x64
 8002dbc:	f7fe f82e 	bl	8000e1c <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8002dc0:	20ae      	movs	r0, #174	; 0xae
 8002dc2:	f7ff ffab 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8002dc6:	2020      	movs	r0, #32
 8002dc8:	f7ff ffa8 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7ff ffa5 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002dd2:	20b0      	movs	r0, #176	; 0xb0
 8002dd4:	f7ff ffa2 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002dd8:	20c8      	movs	r0, #200	; 0xc8
 8002dda:	f7ff ff9f 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7ff ff9c 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002de4:	2010      	movs	r0, #16
 8002de6:	f7ff ff99 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002dea:	2040      	movs	r0, #64	; 0x40
 8002dec:	f7ff ff96 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8002df0:	2081      	movs	r0, #129	; 0x81
 8002df2:	f7ff ff93 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8002df6:	20ff      	movs	r0, #255	; 0xff
 8002df8:	f7ff ff90 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002dfc:	20a1      	movs	r0, #161	; 0xa1
 8002dfe:	f7ff ff8d 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e02:	20a6      	movs	r0, #166	; 0xa6
 8002e04:	f7ff ff8a 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e08:	20a8      	movs	r0, #168	; 0xa8
 8002e0a:	f7ff ff87 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8002e0e:	203f      	movs	r0, #63	; 0x3f
 8002e10:	f7ff ff84 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e14:	20a4      	movs	r0, #164	; 0xa4
 8002e16:	f7ff ff81 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e1a:	20d3      	movs	r0, #211	; 0xd3
 8002e1c:	f7ff ff7e 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7ff ff7b 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e26:	20d5      	movs	r0, #213	; 0xd5
 8002e28:	f7ff ff78 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e2c:	20f0      	movs	r0, #240	; 0xf0
 8002e2e:	f7ff ff75 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e32:	20d9      	movs	r0, #217	; 0xd9
 8002e34:	f7ff ff72 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002e38:	2022      	movs	r0, #34	; 0x22
 8002e3a:	f7ff ff6f 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002e3e:	20da      	movs	r0, #218	; 0xda
 8002e40:	f7ff ff6c 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8002e44:	2012      	movs	r0, #18
 8002e46:	f7ff ff69 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002e4a:	20db      	movs	r0, #219	; 0xdb
 8002e4c:	f7ff ff66 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002e50:	2020      	movs	r0, #32
 8002e52:	f7ff ff63 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002e56:	208d      	movs	r0, #141	; 0x8d
 8002e58:	f7ff ff60 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002e5c:	2014      	movs	r0, #20
 8002e5e:	f7ff ff5d 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002e62:	20af      	movs	r0, #175	; 0xaf
 8002e64:	f7ff ff5a 	bl	8002d1c <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff ff7d 	bl	8002d68 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8002e6e:	f7ff ff89 	bl	8002d84 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <ssd1306_Init+0xc8>)
 8002e76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002e78:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	715a      	strb	r2, [r3, #5]
}
 8002e7e:	bd08      	pop	{r3, pc}
 8002e80:	200001fc 	.word	0x200001fc

08002e84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_MspInit+0x3c>)
{
 8002e86:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	619a      	str	r2, [r3, #24]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	f002 0201 	and.w	r2, r2, #1
 8002e96:	9200      	str	r2, [sp, #0]
 8002e98:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ea0:	61da      	str	r2, [r3, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002eae:	6853      	ldr	r3, [r2, #4]
 8002eb0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	b002      	add	sp, #8
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b510      	push	{r4, lr}
 8002eca:	4604      	mov	r4, r0
 8002ecc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	2210      	movs	r2, #16
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	a802      	add	r0, sp, #8
 8002ed4:	f000 f999 	bl	800320a <memset>
  if(hadc->Instance==ADC1)
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_ADC_MspInit+0x54>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d11b      	bne.n	8002f18 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002ee4:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eec:	619a      	str	r2, [r3, #24]
 8002eee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	480b      	ldr	r0, [pc, #44]	; (8002f20 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ef2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ef6:	9200      	str	r2, [sp, #0]
 8002ef8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	f042 0204 	orr.w	r2, r2, #4
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f04:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f7fe f966 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd10      	pop	{r4, pc}
 8002f1c:	40012400 	.word	0x40012400
 8002f20:	40010800 	.word	0x40010800

08002f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
 8002f28:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	2210      	movs	r2, #16
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	a802      	add	r0, sp, #8
 8002f30:	f000 f96b 	bl	800320a <memset>
  if(hi2c->Instance==I2C2)
 8002f34:	6822      	ldr	r2, [r4, #0]
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_I2C_MspInit+0x58>)
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d11d      	bne.n	8002f78 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	4c10      	ldr	r4, [pc, #64]	; (8002f80 <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f3e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	61a3      	str	r3, [r4, #24]
 8002f4c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	480d      	ldr	r0, [pc, #52]	; (8002f84 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f58:	2312      	movs	r3, #18
 8002f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f62:	f7fe f93f 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f66:	69e3      	ldr	r3, [r4, #28]
 8002f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6c:	61e3      	str	r3, [r4, #28]
 8002f6e:	69e3      	ldr	r3, [r4, #28]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f78:	b006      	add	sp, #24
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	40005800 	.word	0x40005800
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010c00 	.word	0x40010c00

08002f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f88:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8a:	2410      	movs	r4, #16
{
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	4622      	mov	r2, r4
 8002f92:	2100      	movs	r1, #0
 8002f94:	a802      	add	r0, sp, #8
 8002f96:	f000 f938 	bl	800320a <memset>
  if(hspi->Instance==SPI1)
 8002f9a:	682a      	ldr	r2, [r5, #0]
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_SPI_MspInit+0x78>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d12c      	bne.n	8002ffc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fa2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002fa6:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fae:	619a      	str	r2, [r3, #24]
 8002fb0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	4814      	ldr	r0, [pc, #80]	; (8003004 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fb4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	f042 0208 	orr.w	r2, r2, #8
 8002fc2:	619a      	str	r2, [r3, #24]
 8002fc4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f7fe f903 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fde:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	a902      	add	r1, sp, #8
 8002fe2:	4808      	ldr	r0, [pc, #32]	; (8003004 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8002fe8:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f7fe f8fb 	bl	80011e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_SPI_MspInit+0x80>)
 8002ff0:	6853      	ldr	r3, [r2, #4]
 8002ff2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ffc:	b007      	add	sp, #28
 8002ffe:	bd30      	pop	{r4, r5, pc}
 8003000:	40013000 	.word	0x40013000
 8003004:	40010c00 	.word	0x40010c00
 8003008:	40010000 	.word	0x40010000

0800300c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	2210      	movs	r2, #16
 8003014:	2100      	movs	r1, #0
 8003016:	a802      	add	r0, sp, #8
 8003018:	f000 f8f7 	bl	800320a <memset>
  if(huart->Instance==USART2)
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_UART_MspInit+0x6c>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d126      	bne.n	8003072 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003024:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003028:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 800302a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800302c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003030:	61da      	str	r2, [r3, #28]
 8003032:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003034:	4811      	ldr	r0, [pc, #68]	; (800307c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003036:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800303a:	9200      	str	r2, [sp, #0]
 800303c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	619a      	str	r2, [r3, #24]
 8003046:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 800305c:	f7fe f8c2 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	2108      	movs	r1, #8
 8003062:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003066:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800306a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 800306e:	f7fe f8b9 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003072:	b006      	add	sp, #24
 8003074:	bd10      	pop	{r4, pc}
 8003076:	bf00      	nop
 8003078:	40004400 	.word	0x40004400
 800307c:	40010800 	.word	0x40010800

08003080 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003080:	4770      	bx	lr

08003082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	e7fe      	b.n	8003086 <BusFault_Handler>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	e7fe      	b.n	8003088 <UsageFault_Handler>

0800308a <SVC_Handler>:
 800308a:	4770      	bx	lr

0800308c <DebugMon_Handler>:
 800308c:	4770      	bx	lr

0800308e <PendSV_Handler>:
 800308e:	4770      	bx	lr

08003090 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003090:	f7fd beb2 	b.w	8000df8 <HAL_IncTick>

08003094 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003094:	4801      	ldr	r0, [pc, #4]	; (800309c <SPI1_IRQHandler+0x8>)
 8003096:	f7ff b913 	b.w	80022c0 <HAL_SPI_IRQHandler>
 800309a:	bf00      	nop
 800309c:	200006dc 	.word	0x200006dc

080030a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	460e      	mov	r6, r1
 80030a4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a6:	460c      	mov	r4, r1
 80030a8:	1ba3      	subs	r3, r4, r6
 80030aa:	429d      	cmp	r5, r3
 80030ac:	dc01      	bgt.n	80030b2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80030ae:	4628      	mov	r0, r5
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80030b2:	f3af 8000 	nop.w
 80030b6:	f804 0b01 	strb.w	r0, [r4], #1
 80030ba:	e7f5      	b.n	80030a8 <_read+0x8>

080030bc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80030bc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <_sbrk+0x2c>)
{
 80030c0:	4602      	mov	r2, r0
	if (heap_end == 0)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	b909      	cbnz	r1, 80030ca <_sbrk+0xe>
		heap_end = &end;
 80030c6:	4909      	ldr	r1, [pc, #36]	; (80030ec <_sbrk+0x30>)
 80030c8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80030ca:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80030cc:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80030ce:	4402      	add	r2, r0
 80030d0:	428a      	cmp	r2, r1
 80030d2:	d906      	bls.n	80030e2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80030d4:	f000 f864 	bl	80031a0 <__errno>
 80030d8:	230c      	movs	r3, #12
 80030da:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80030e0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80030e2:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80030e4:	e7fc      	b.n	80030e0 <_sbrk+0x24>
 80030e6:	bf00      	nop
 80030e8:	20000604 	.word	0x20000604
 80030ec:	200008b4 	.word	0x200008b4

080030f0 <_close>:

int _close(int file)
{
	return -1;
}
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	4770      	bx	lr

080030f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80030f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80030fa:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80030fc:	604b      	str	r3, [r1, #4]
}
 80030fe:	4770      	bx	lr

08003100 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003100:	2001      	movs	r0, #1
 8003102:	4770      	bx	lr

08003104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003104:	2000      	movs	r0, #0
 8003106:	4770      	bx	lr

08003108 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <SystemInit+0x40>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <SystemInit+0x44>)
 8003116:	400a      	ands	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003124:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800312c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003134:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003136:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800313a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800313c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <SystemInit+0x48>)
 8003142:	609a      	str	r2, [r3, #8]
#endif 
}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	f8ff0000 	.word	0xf8ff0000
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003154:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003156:	e003      	b.n	8003160 <LoopCopyDataInit>

08003158 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800315a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800315c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800315e:	3104      	adds	r1, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003160:	480a      	ldr	r0, [pc, #40]	; (800318c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003164:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003166:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003168:	d3f6      	bcc.n	8003158 <CopyDataInit>
  ldr r2, =_sbss
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800316c:	e002      	b.n	8003174 <LoopFillZerobss>

0800316e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003170:	f842 3b04 	str.w	r3, [r2], #4

08003174 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003176:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003178:	d3f9      	bcc.n	800316e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800317a:	f7ff ffc5 	bl	8003108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f000 f815 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003182:	f7ff fc69 	bl	8002a58 <main>
  bx lr
 8003186:	4770      	bx	lr
  ldr r3, =_sidata
 8003188:	08005d28 	.word	0x08005d28
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003190:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8003194:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8003198:	200008b4 	.word	0x200008b4

0800319c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_2_IRQHandler>
	...

080031a0 <__errno>:
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <__errno+0x8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000000c 	.word	0x2000000c

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	2500      	movs	r5, #0
 80031b0:	4e0c      	ldr	r6, [pc, #48]	; (80031e4 <__libc_init_array+0x38>)
 80031b2:	4c0d      	ldr	r4, [pc, #52]	; (80031e8 <__libc_init_array+0x3c>)
 80031b4:	1ba4      	subs	r4, r4, r6
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	42a5      	cmp	r5, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	f002 fbf4 	bl	80059a8 <_init>
 80031c0:	2500      	movs	r5, #0
 80031c2:	4e0a      	ldr	r6, [pc, #40]	; (80031ec <__libc_init_array+0x40>)
 80031c4:	4c0a      	ldr	r4, [pc, #40]	; (80031f0 <__libc_init_array+0x44>)
 80031c6:	1ba4      	subs	r4, r4, r6
 80031c8:	10a4      	asrs	r4, r4, #2
 80031ca:	42a5      	cmp	r5, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d4:	4798      	blx	r3
 80031d6:	3501      	adds	r5, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031de:	4798      	blx	r3
 80031e0:	3501      	adds	r5, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	08005d20 	.word	0x08005d20
 80031e8:	08005d20 	.word	0x08005d20
 80031ec:	08005d20 	.word	0x08005d20
 80031f0:	08005d24 	.word	0x08005d24

080031f4 <memcpy>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	1e43      	subs	r3, r0, #1
 80031f8:	440a      	add	r2, r1
 80031fa:	4291      	cmp	r1, r2
 80031fc:	d100      	bne.n	8003200 <memcpy+0xc>
 80031fe:	bd10      	pop	{r4, pc}
 8003200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003208:	e7f7      	b.n	80031fa <memcpy+0x6>

0800320a <memset>:
 800320a:	4603      	mov	r3, r0
 800320c:	4402      	add	r2, r0
 800320e:	4293      	cmp	r3, r2
 8003210:	d100      	bne.n	8003214 <memset+0xa>
 8003212:	4770      	bx	lr
 8003214:	f803 1b01 	strb.w	r1, [r3], #1
 8003218:	e7f9      	b.n	800320e <memset+0x4>

0800321a <__cvt>:
 800321a:	2b00      	cmp	r3, #0
 800321c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	461e      	mov	r6, r3
 8003222:	bfbb      	ittet	lt
 8003224:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003228:	461e      	movlt	r6, r3
 800322a:	2300      	movge	r3, #0
 800322c:	232d      	movlt	r3, #45	; 0x2d
 800322e:	b088      	sub	sp, #32
 8003230:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003232:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003236:	f027 0720 	bic.w	r7, r7, #32
 800323a:	2f46      	cmp	r7, #70	; 0x46
 800323c:	4614      	mov	r4, r2
 800323e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003240:	700b      	strb	r3, [r1, #0]
 8003242:	d004      	beq.n	800324e <__cvt+0x34>
 8003244:	2f45      	cmp	r7, #69	; 0x45
 8003246:	d100      	bne.n	800324a <__cvt+0x30>
 8003248:	3501      	adds	r5, #1
 800324a:	2302      	movs	r3, #2
 800324c:	e000      	b.n	8003250 <__cvt+0x36>
 800324e:	2303      	movs	r3, #3
 8003250:	aa07      	add	r2, sp, #28
 8003252:	9204      	str	r2, [sp, #16]
 8003254:	aa06      	add	r2, sp, #24
 8003256:	e9cd a202 	strd	sl, r2, [sp, #8]
 800325a:	e9cd 3500 	strd	r3, r5, [sp]
 800325e:	4622      	mov	r2, r4
 8003260:	4633      	mov	r3, r6
 8003262:	f000 fe09 	bl	8003e78 <_dtoa_r>
 8003266:	2f47      	cmp	r7, #71	; 0x47
 8003268:	4680      	mov	r8, r0
 800326a:	d102      	bne.n	8003272 <__cvt+0x58>
 800326c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800326e:	07db      	lsls	r3, r3, #31
 8003270:	d526      	bpl.n	80032c0 <__cvt+0xa6>
 8003272:	2f46      	cmp	r7, #70	; 0x46
 8003274:	eb08 0905 	add.w	r9, r8, r5
 8003278:	d111      	bne.n	800329e <__cvt+0x84>
 800327a:	f898 3000 	ldrb.w	r3, [r8]
 800327e:	2b30      	cmp	r3, #48	; 0x30
 8003280:	d10a      	bne.n	8003298 <__cvt+0x7e>
 8003282:	2200      	movs	r2, #0
 8003284:	2300      	movs	r3, #0
 8003286:	4620      	mov	r0, r4
 8003288:	4631      	mov	r1, r6
 800328a:	f7fd fb8d 	bl	80009a8 <__aeabi_dcmpeq>
 800328e:	b918      	cbnz	r0, 8003298 <__cvt+0x7e>
 8003290:	f1c5 0501 	rsb	r5, r5, #1
 8003294:	f8ca 5000 	str.w	r5, [sl]
 8003298:	f8da 3000 	ldr.w	r3, [sl]
 800329c:	4499      	add	r9, r3
 800329e:	2200      	movs	r2, #0
 80032a0:	2300      	movs	r3, #0
 80032a2:	4620      	mov	r0, r4
 80032a4:	4631      	mov	r1, r6
 80032a6:	f7fd fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80032aa:	b938      	cbnz	r0, 80032bc <__cvt+0xa2>
 80032ac:	2230      	movs	r2, #48	; 0x30
 80032ae:	9b07      	ldr	r3, [sp, #28]
 80032b0:	454b      	cmp	r3, r9
 80032b2:	d205      	bcs.n	80032c0 <__cvt+0xa6>
 80032b4:	1c59      	adds	r1, r3, #1
 80032b6:	9107      	str	r1, [sp, #28]
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e7f8      	b.n	80032ae <__cvt+0x94>
 80032bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80032c0:	4640      	mov	r0, r8
 80032c2:	9b07      	ldr	r3, [sp, #28]
 80032c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80032c6:	eba3 0308 	sub.w	r3, r3, r8
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	b008      	add	sp, #32
 80032ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080032d2 <__exponent>:
 80032d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d4:	2900      	cmp	r1, #0
 80032d6:	bfb4      	ite	lt
 80032d8:	232d      	movlt	r3, #45	; 0x2d
 80032da:	232b      	movge	r3, #43	; 0x2b
 80032dc:	4604      	mov	r4, r0
 80032de:	bfb8      	it	lt
 80032e0:	4249      	neglt	r1, r1
 80032e2:	2909      	cmp	r1, #9
 80032e4:	f804 2b02 	strb.w	r2, [r4], #2
 80032e8:	7043      	strb	r3, [r0, #1]
 80032ea:	dd21      	ble.n	8003330 <__exponent+0x5e>
 80032ec:	f10d 0307 	add.w	r3, sp, #7
 80032f0:	461f      	mov	r7, r3
 80032f2:	260a      	movs	r6, #10
 80032f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80032f8:	fb06 1115 	mls	r1, r6, r5, r1
 80032fc:	2d09      	cmp	r5, #9
 80032fe:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003302:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003306:	f103 32ff 	add.w	r2, r3, #4294967295
 800330a:	4629      	mov	r1, r5
 800330c:	dc09      	bgt.n	8003322 <__exponent+0x50>
 800330e:	3130      	adds	r1, #48	; 0x30
 8003310:	3b02      	subs	r3, #2
 8003312:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003316:	42bb      	cmp	r3, r7
 8003318:	4622      	mov	r2, r4
 800331a:	d304      	bcc.n	8003326 <__exponent+0x54>
 800331c:	1a10      	subs	r0, r2, r0
 800331e:	b003      	add	sp, #12
 8003320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003322:	4613      	mov	r3, r2
 8003324:	e7e6      	b.n	80032f4 <__exponent+0x22>
 8003326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800332a:	f804 2b01 	strb.w	r2, [r4], #1
 800332e:	e7f2      	b.n	8003316 <__exponent+0x44>
 8003330:	2330      	movs	r3, #48	; 0x30
 8003332:	4419      	add	r1, r3
 8003334:	7083      	strb	r3, [r0, #2]
 8003336:	1d02      	adds	r2, r0, #4
 8003338:	70c1      	strb	r1, [r0, #3]
 800333a:	e7ef      	b.n	800331c <__exponent+0x4a>

0800333c <_printf_float>:
 800333c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	b091      	sub	sp, #68	; 0x44
 8003342:	460c      	mov	r4, r1
 8003344:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003346:	4693      	mov	fp, r2
 8003348:	461e      	mov	r6, r3
 800334a:	4605      	mov	r5, r0
 800334c:	f001 fcc2 	bl	8004cd4 <_localeconv_r>
 8003350:	6803      	ldr	r3, [r0, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	9309      	str	r3, [sp, #36]	; 0x24
 8003356:	f7fc fefb 	bl	8000150 <strlen>
 800335a:	2300      	movs	r3, #0
 800335c:	930e      	str	r3, [sp, #56]	; 0x38
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	900a      	str	r0, [sp, #40]	; 0x28
 8003362:	3307      	adds	r3, #7
 8003364:	f023 0307 	bic.w	r3, r3, #7
 8003368:	f103 0208 	add.w	r2, r3, #8
 800336c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003370:	f8d4 a000 	ldr.w	sl, [r4]
 8003374:	603a      	str	r2, [r7, #0]
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800337e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003386:	930b      	str	r3, [sp, #44]	; 0x2c
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <_printf_float+0x2ec>)
 800338e:	4638      	mov	r0, r7
 8003390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003392:	f7fd fb3b 	bl	8000a0c <__aeabi_dcmpun>
 8003396:	bb68      	cbnz	r0, 80033f4 <_printf_float+0xb8>
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	4ba2      	ldr	r3, [pc, #648]	; (8003628 <_printf_float+0x2ec>)
 800339e:	4638      	mov	r0, r7
 80033a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033a2:	f7fd fb15 	bl	80009d0 <__aeabi_dcmple>
 80033a6:	bb28      	cbnz	r0, 80033f4 <_printf_float+0xb8>
 80033a8:	2200      	movs	r2, #0
 80033aa:	2300      	movs	r3, #0
 80033ac:	4638      	mov	r0, r7
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fd fb04 	bl	80009bc <__aeabi_dcmplt>
 80033b4:	b110      	cbz	r0, 80033bc <_printf_float+0x80>
 80033b6:	232d      	movs	r3, #45	; 0x2d
 80033b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033bc:	4f9b      	ldr	r7, [pc, #620]	; (800362c <_printf_float+0x2f0>)
 80033be:	4b9c      	ldr	r3, [pc, #624]	; (8003630 <_printf_float+0x2f4>)
 80033c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033c4:	bf98      	it	ls
 80033c6:	461f      	movls	r7, r3
 80033c8:	2303      	movs	r3, #3
 80033ca:	f04f 0900 	mov.w	r9, #0
 80033ce:	6123      	str	r3, [r4, #16]
 80033d0:	f02a 0304 	bic.w	r3, sl, #4
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	9600      	str	r6, [sp, #0]
 80033d8:	465b      	mov	r3, fp
 80033da:	aa0f      	add	r2, sp, #60	; 0x3c
 80033dc:	4621      	mov	r1, r4
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 f9e2 	bl	80037a8 <_printf_common>
 80033e4:	3001      	adds	r0, #1
 80033e6:	f040 8090 	bne.w	800350a <_printf_float+0x1ce>
 80033ea:	f04f 30ff 	mov.w	r0, #4294967295
 80033ee:	b011      	add	sp, #68	; 0x44
 80033f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f4:	463a      	mov	r2, r7
 80033f6:	464b      	mov	r3, r9
 80033f8:	4638      	mov	r0, r7
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fd fb06 	bl	8000a0c <__aeabi_dcmpun>
 8003400:	b110      	cbz	r0, 8003408 <_printf_float+0xcc>
 8003402:	4f8c      	ldr	r7, [pc, #560]	; (8003634 <_printf_float+0x2f8>)
 8003404:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <_printf_float+0x2fc>)
 8003406:	e7db      	b.n	80033c0 <_printf_float+0x84>
 8003408:	6863      	ldr	r3, [r4, #4]
 800340a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	a80d      	add	r0, sp, #52	; 0x34
 8003412:	a90e      	add	r1, sp, #56	; 0x38
 8003414:	d140      	bne.n	8003498 <_printf_float+0x15c>
 8003416:	2306      	movs	r3, #6
 8003418:	6063      	str	r3, [r4, #4]
 800341a:	f04f 0c00 	mov.w	ip, #0
 800341e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003422:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003426:	6863      	ldr	r3, [r4, #4]
 8003428:	6022      	str	r2, [r4, #0]
 800342a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	463a      	mov	r2, r7
 8003432:	464b      	mov	r3, r9
 8003434:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003438:	4628      	mov	r0, r5
 800343a:	f7ff feee 	bl	800321a <__cvt>
 800343e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003442:	2b47      	cmp	r3, #71	; 0x47
 8003444:	4607      	mov	r7, r0
 8003446:	d109      	bne.n	800345c <_printf_float+0x120>
 8003448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800344a:	1cd8      	adds	r0, r3, #3
 800344c:	db02      	blt.n	8003454 <_printf_float+0x118>
 800344e:	6862      	ldr	r2, [r4, #4]
 8003450:	4293      	cmp	r3, r2
 8003452:	dd47      	ble.n	80034e4 <_printf_float+0x1a8>
 8003454:	f1a8 0802 	sub.w	r8, r8, #2
 8003458:	fa5f f888 	uxtb.w	r8, r8
 800345c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003460:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003462:	d824      	bhi.n	80034ae <_printf_float+0x172>
 8003464:	3901      	subs	r1, #1
 8003466:	4642      	mov	r2, r8
 8003468:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800346c:	910d      	str	r1, [sp, #52]	; 0x34
 800346e:	f7ff ff30 	bl	80032d2 <__exponent>
 8003472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003474:	4681      	mov	r9, r0
 8003476:	1813      	adds	r3, r2, r0
 8003478:	2a01      	cmp	r2, #1
 800347a:	6123      	str	r3, [r4, #16]
 800347c:	dc02      	bgt.n	8003484 <_printf_float+0x148>
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	07d1      	lsls	r1, r2, #31
 8003482:	d501      	bpl.n	8003488 <_printf_float+0x14c>
 8003484:	3301      	adds	r3, #1
 8003486:	6123      	str	r3, [r4, #16]
 8003488:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0a2      	beq.n	80033d6 <_printf_float+0x9a>
 8003490:	232d      	movs	r3, #45	; 0x2d
 8003492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003496:	e79e      	b.n	80033d6 <_printf_float+0x9a>
 8003498:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800349c:	f000 816e 	beq.w	800377c <_printf_float+0x440>
 80034a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80034a4:	d1b9      	bne.n	800341a <_printf_float+0xde>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1b7      	bne.n	800341a <_printf_float+0xde>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e7b4      	b.n	8003418 <_printf_float+0xdc>
 80034ae:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80034b2:	d119      	bne.n	80034e8 <_printf_float+0x1ac>
 80034b4:	2900      	cmp	r1, #0
 80034b6:	6863      	ldr	r3, [r4, #4]
 80034b8:	dd0c      	ble.n	80034d4 <_printf_float+0x198>
 80034ba:	6121      	str	r1, [r4, #16]
 80034bc:	b913      	cbnz	r3, 80034c4 <_printf_float+0x188>
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	07d2      	lsls	r2, r2, #31
 80034c2:	d502      	bpl.n	80034ca <_printf_float+0x18e>
 80034c4:	3301      	adds	r3, #1
 80034c6:	440b      	add	r3, r1
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034cc:	f04f 0900 	mov.w	r9, #0
 80034d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80034d2:	e7d9      	b.n	8003488 <_printf_float+0x14c>
 80034d4:	b913      	cbnz	r3, 80034dc <_printf_float+0x1a0>
 80034d6:	6822      	ldr	r2, [r4, #0]
 80034d8:	07d0      	lsls	r0, r2, #31
 80034da:	d501      	bpl.n	80034e0 <_printf_float+0x1a4>
 80034dc:	3302      	adds	r3, #2
 80034de:	e7f3      	b.n	80034c8 <_printf_float+0x18c>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e7f1      	b.n	80034c8 <_printf_float+0x18c>
 80034e4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80034e8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80034ec:	4293      	cmp	r3, r2
 80034ee:	db05      	blt.n	80034fc <_printf_float+0x1c0>
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	6123      	str	r3, [r4, #16]
 80034f4:	07d1      	lsls	r1, r2, #31
 80034f6:	d5e8      	bpl.n	80034ca <_printf_float+0x18e>
 80034f8:	3301      	adds	r3, #1
 80034fa:	e7e5      	b.n	80034c8 <_printf_float+0x18c>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bfcc      	ite	gt
 8003500:	2301      	movgt	r3, #1
 8003502:	f1c3 0302 	rsble	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	e7de      	b.n	80034c8 <_printf_float+0x18c>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	055a      	lsls	r2, r3, #21
 800350e:	d407      	bmi.n	8003520 <_printf_float+0x1e4>
 8003510:	6923      	ldr	r3, [r4, #16]
 8003512:	463a      	mov	r2, r7
 8003514:	4659      	mov	r1, fp
 8003516:	4628      	mov	r0, r5
 8003518:	47b0      	blx	r6
 800351a:	3001      	adds	r0, #1
 800351c:	d129      	bne.n	8003572 <_printf_float+0x236>
 800351e:	e764      	b.n	80033ea <_printf_float+0xae>
 8003520:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003524:	f240 80d7 	bls.w	80036d6 <_printf_float+0x39a>
 8003528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800352c:	2200      	movs	r2, #0
 800352e:	2300      	movs	r3, #0
 8003530:	f7fd fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8003534:	b388      	cbz	r0, 800359a <_printf_float+0x25e>
 8003536:	2301      	movs	r3, #1
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <_printf_float+0x300>)
 800353a:	4659      	mov	r1, fp
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	3001      	adds	r0, #1
 8003542:	f43f af52 	beq.w	80033ea <_printf_float+0xae>
 8003546:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800354a:	429a      	cmp	r2, r3
 800354c:	db02      	blt.n	8003554 <_printf_float+0x218>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	07d8      	lsls	r0, r3, #31
 8003552:	d50e      	bpl.n	8003572 <_printf_float+0x236>
 8003554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003558:	4659      	mov	r1, fp
 800355a:	4628      	mov	r0, r5
 800355c:	47b0      	blx	r6
 800355e:	3001      	adds	r0, #1
 8003560:	f43f af43 	beq.w	80033ea <_printf_float+0xae>
 8003564:	2700      	movs	r7, #0
 8003566:	f104 081a 	add.w	r8, r4, #26
 800356a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800356c:	3b01      	subs	r3, #1
 800356e:	42bb      	cmp	r3, r7
 8003570:	dc09      	bgt.n	8003586 <_printf_float+0x24a>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	079f      	lsls	r7, r3, #30
 8003576:	f100 80fd 	bmi.w	8003774 <_printf_float+0x438>
 800357a:	68e0      	ldr	r0, [r4, #12]
 800357c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800357e:	4298      	cmp	r0, r3
 8003580:	bfb8      	it	lt
 8003582:	4618      	movlt	r0, r3
 8003584:	e733      	b.n	80033ee <_printf_float+0xb2>
 8003586:	2301      	movs	r3, #1
 8003588:	4642      	mov	r2, r8
 800358a:	4659      	mov	r1, fp
 800358c:	4628      	mov	r0, r5
 800358e:	47b0      	blx	r6
 8003590:	3001      	adds	r0, #1
 8003592:	f43f af2a 	beq.w	80033ea <_printf_float+0xae>
 8003596:	3701      	adds	r7, #1
 8003598:	e7e7      	b.n	800356a <_printf_float+0x22e>
 800359a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	dc2b      	bgt.n	80035f8 <_printf_float+0x2bc>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4a26      	ldr	r2, [pc, #152]	; (800363c <_printf_float+0x300>)
 80035a4:	4659      	mov	r1, fp
 80035a6:	4628      	mov	r0, r5
 80035a8:	47b0      	blx	r6
 80035aa:	3001      	adds	r0, #1
 80035ac:	f43f af1d 	beq.w	80033ea <_printf_float+0xae>
 80035b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035b2:	b923      	cbnz	r3, 80035be <_printf_float+0x282>
 80035b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035b6:	b913      	cbnz	r3, 80035be <_printf_float+0x282>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	07d9      	lsls	r1, r3, #31
 80035bc:	d5d9      	bpl.n	8003572 <_printf_float+0x236>
 80035be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c2:	4659      	mov	r1, fp
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b0      	blx	r6
 80035c8:	3001      	adds	r0, #1
 80035ca:	f43f af0e 	beq.w	80033ea <_printf_float+0xae>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	f104 091a 	add.w	r9, r4, #26
 80035d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035d8:	425b      	negs	r3, r3
 80035da:	4543      	cmp	r3, r8
 80035dc:	dc01      	bgt.n	80035e2 <_printf_float+0x2a6>
 80035de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035e0:	e797      	b.n	8003512 <_printf_float+0x1d6>
 80035e2:	2301      	movs	r3, #1
 80035e4:	464a      	mov	r2, r9
 80035e6:	4659      	mov	r1, fp
 80035e8:	4628      	mov	r0, r5
 80035ea:	47b0      	blx	r6
 80035ec:	3001      	adds	r0, #1
 80035ee:	f43f aefc 	beq.w	80033ea <_printf_float+0xae>
 80035f2:	f108 0801 	add.w	r8, r8, #1
 80035f6:	e7ee      	b.n	80035d6 <_printf_float+0x29a>
 80035f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035fc:	429a      	cmp	r2, r3
 80035fe:	bfa8      	it	ge
 8003600:	461a      	movge	r2, r3
 8003602:	2a00      	cmp	r2, #0
 8003604:	4690      	mov	r8, r2
 8003606:	dd07      	ble.n	8003618 <_printf_float+0x2dc>
 8003608:	4613      	mov	r3, r2
 800360a:	4659      	mov	r1, fp
 800360c:	463a      	mov	r2, r7
 800360e:	4628      	mov	r0, r5
 8003610:	47b0      	blx	r6
 8003612:	3001      	adds	r0, #1
 8003614:	f43f aee9 	beq.w	80033ea <_printf_float+0xae>
 8003618:	f104 031a 	add.w	r3, r4, #26
 800361c:	f04f 0a00 	mov.w	sl, #0
 8003620:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003624:	930b      	str	r3, [sp, #44]	; 0x2c
 8003626:	e015      	b.n	8003654 <_printf_float+0x318>
 8003628:	7fefffff 	.word	0x7fefffff
 800362c:	08005a5c 	.word	0x08005a5c
 8003630:	08005a58 	.word	0x08005a58
 8003634:	08005a64 	.word	0x08005a64
 8003638:	08005a60 	.word	0x08005a60
 800363c:	08005a68 	.word	0x08005a68
 8003640:	2301      	movs	r3, #1
 8003642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003644:	4659      	mov	r1, fp
 8003646:	4628      	mov	r0, r5
 8003648:	47b0      	blx	r6
 800364a:	3001      	adds	r0, #1
 800364c:	f43f aecd 	beq.w	80033ea <_printf_float+0xae>
 8003650:	f10a 0a01 	add.w	sl, sl, #1
 8003654:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003658:	eba9 0308 	sub.w	r3, r9, r8
 800365c:	4553      	cmp	r3, sl
 800365e:	dcef      	bgt.n	8003640 <_printf_float+0x304>
 8003660:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003664:	429a      	cmp	r2, r3
 8003666:	444f      	add	r7, r9
 8003668:	db14      	blt.n	8003694 <_printf_float+0x358>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	07da      	lsls	r2, r3, #31
 800366e:	d411      	bmi.n	8003694 <_printf_float+0x358>
 8003670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003672:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003674:	eba3 0209 	sub.w	r2, r3, r9
 8003678:	eba3 0901 	sub.w	r9, r3, r1
 800367c:	4591      	cmp	r9, r2
 800367e:	bfa8      	it	ge
 8003680:	4691      	movge	r9, r2
 8003682:	f1b9 0f00 	cmp.w	r9, #0
 8003686:	dc0d      	bgt.n	80036a4 <_printf_float+0x368>
 8003688:	2700      	movs	r7, #0
 800368a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800368e:	f104 081a 	add.w	r8, r4, #26
 8003692:	e018      	b.n	80036c6 <_printf_float+0x38a>
 8003694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003698:	4659      	mov	r1, fp
 800369a:	4628      	mov	r0, r5
 800369c:	47b0      	blx	r6
 800369e:	3001      	adds	r0, #1
 80036a0:	d1e6      	bne.n	8003670 <_printf_float+0x334>
 80036a2:	e6a2      	b.n	80033ea <_printf_float+0xae>
 80036a4:	464b      	mov	r3, r9
 80036a6:	463a      	mov	r2, r7
 80036a8:	4659      	mov	r1, fp
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b0      	blx	r6
 80036ae:	3001      	adds	r0, #1
 80036b0:	d1ea      	bne.n	8003688 <_printf_float+0x34c>
 80036b2:	e69a      	b.n	80033ea <_printf_float+0xae>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4642      	mov	r2, r8
 80036b8:	4659      	mov	r1, fp
 80036ba:	4628      	mov	r0, r5
 80036bc:	47b0      	blx	r6
 80036be:	3001      	adds	r0, #1
 80036c0:	f43f ae93 	beq.w	80033ea <_printf_float+0xae>
 80036c4:	3701      	adds	r7, #1
 80036c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	eba3 0309 	sub.w	r3, r3, r9
 80036d0:	42bb      	cmp	r3, r7
 80036d2:	dcef      	bgt.n	80036b4 <_printf_float+0x378>
 80036d4:	e74d      	b.n	8003572 <_printf_float+0x236>
 80036d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036d8:	2a01      	cmp	r2, #1
 80036da:	dc01      	bgt.n	80036e0 <_printf_float+0x3a4>
 80036dc:	07db      	lsls	r3, r3, #31
 80036de:	d538      	bpl.n	8003752 <_printf_float+0x416>
 80036e0:	2301      	movs	r3, #1
 80036e2:	463a      	mov	r2, r7
 80036e4:	4659      	mov	r1, fp
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b0      	blx	r6
 80036ea:	3001      	adds	r0, #1
 80036ec:	f43f ae7d 	beq.w	80033ea <_printf_float+0xae>
 80036f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f4:	4659      	mov	r1, fp
 80036f6:	4628      	mov	r0, r5
 80036f8:	47b0      	blx	r6
 80036fa:	3001      	adds	r0, #1
 80036fc:	f107 0701 	add.w	r7, r7, #1
 8003700:	f43f ae73 	beq.w	80033ea <_printf_float+0xae>
 8003704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800370a:	2200      	movs	r2, #0
 800370c:	f103 38ff 	add.w	r8, r3, #4294967295
 8003710:	2300      	movs	r3, #0
 8003712:	f7fd f949 	bl	80009a8 <__aeabi_dcmpeq>
 8003716:	b9c0      	cbnz	r0, 800374a <_printf_float+0x40e>
 8003718:	4643      	mov	r3, r8
 800371a:	463a      	mov	r2, r7
 800371c:	4659      	mov	r1, fp
 800371e:	4628      	mov	r0, r5
 8003720:	47b0      	blx	r6
 8003722:	3001      	adds	r0, #1
 8003724:	d10d      	bne.n	8003742 <_printf_float+0x406>
 8003726:	e660      	b.n	80033ea <_printf_float+0xae>
 8003728:	2301      	movs	r3, #1
 800372a:	4642      	mov	r2, r8
 800372c:	4659      	mov	r1, fp
 800372e:	4628      	mov	r0, r5
 8003730:	47b0      	blx	r6
 8003732:	3001      	adds	r0, #1
 8003734:	f43f ae59 	beq.w	80033ea <_printf_float+0xae>
 8003738:	3701      	adds	r7, #1
 800373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800373c:	3b01      	subs	r3, #1
 800373e:	42bb      	cmp	r3, r7
 8003740:	dcf2      	bgt.n	8003728 <_printf_float+0x3ec>
 8003742:	464b      	mov	r3, r9
 8003744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003748:	e6e4      	b.n	8003514 <_printf_float+0x1d8>
 800374a:	2700      	movs	r7, #0
 800374c:	f104 081a 	add.w	r8, r4, #26
 8003750:	e7f3      	b.n	800373a <_printf_float+0x3fe>
 8003752:	2301      	movs	r3, #1
 8003754:	e7e1      	b.n	800371a <_printf_float+0x3de>
 8003756:	2301      	movs	r3, #1
 8003758:	4642      	mov	r2, r8
 800375a:	4659      	mov	r1, fp
 800375c:	4628      	mov	r0, r5
 800375e:	47b0      	blx	r6
 8003760:	3001      	adds	r0, #1
 8003762:	f43f ae42 	beq.w	80033ea <_printf_float+0xae>
 8003766:	3701      	adds	r7, #1
 8003768:	68e3      	ldr	r3, [r4, #12]
 800376a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	42bb      	cmp	r3, r7
 8003770:	dcf1      	bgt.n	8003756 <_printf_float+0x41a>
 8003772:	e702      	b.n	800357a <_printf_float+0x23e>
 8003774:	2700      	movs	r7, #0
 8003776:	f104 0819 	add.w	r8, r4, #25
 800377a:	e7f5      	b.n	8003768 <_printf_float+0x42c>
 800377c:	2b00      	cmp	r3, #0
 800377e:	f43f ae94 	beq.w	80034aa <_printf_float+0x16e>
 8003782:	f04f 0c00 	mov.w	ip, #0
 8003786:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800378a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800378e:	6022      	str	r2, [r4, #0]
 8003790:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003794:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	463a      	mov	r2, r7
 800379c:	464b      	mov	r3, r9
 800379e:	4628      	mov	r0, r5
 80037a0:	f7ff fd3b 	bl	800321a <__cvt>
 80037a4:	4607      	mov	r7, r0
 80037a6:	e64f      	b.n	8003448 <_printf_float+0x10c>

080037a8 <_printf_common>:
 80037a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ac:	4691      	mov	r9, r2
 80037ae:	461f      	mov	r7, r3
 80037b0:	688a      	ldr	r2, [r1, #8]
 80037b2:	690b      	ldr	r3, [r1, #16]
 80037b4:	4606      	mov	r6, r0
 80037b6:	4293      	cmp	r3, r2
 80037b8:	bfb8      	it	lt
 80037ba:	4613      	movlt	r3, r2
 80037bc:	f8c9 3000 	str.w	r3, [r9]
 80037c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037c4:	460c      	mov	r4, r1
 80037c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ca:	b112      	cbz	r2, 80037d2 <_printf_common+0x2a>
 80037cc:	3301      	adds	r3, #1
 80037ce:	f8c9 3000 	str.w	r3, [r9]
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	0699      	lsls	r1, r3, #26
 80037d6:	bf42      	ittt	mi
 80037d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037dc:	3302      	addmi	r3, #2
 80037de:	f8c9 3000 	strmi.w	r3, [r9]
 80037e2:	6825      	ldr	r5, [r4, #0]
 80037e4:	f015 0506 	ands.w	r5, r5, #6
 80037e8:	d107      	bne.n	80037fa <_printf_common+0x52>
 80037ea:	f104 0a19 	add.w	sl, r4, #25
 80037ee:	68e3      	ldr	r3, [r4, #12]
 80037f0:	f8d9 2000 	ldr.w	r2, [r9]
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	42ab      	cmp	r3, r5
 80037f8:	dc29      	bgt.n	800384e <_printf_common+0xa6>
 80037fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	3300      	adds	r3, #0
 8003802:	bf18      	it	ne
 8003804:	2301      	movne	r3, #1
 8003806:	0692      	lsls	r2, r2, #26
 8003808:	d42e      	bmi.n	8003868 <_printf_common+0xc0>
 800380a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800380e:	4639      	mov	r1, r7
 8003810:	4630      	mov	r0, r6
 8003812:	47c0      	blx	r8
 8003814:	3001      	adds	r0, #1
 8003816:	d021      	beq.n	800385c <_printf_common+0xb4>
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	68e5      	ldr	r5, [r4, #12]
 800381c:	f003 0306 	and.w	r3, r3, #6
 8003820:	2b04      	cmp	r3, #4
 8003822:	bf18      	it	ne
 8003824:	2500      	movne	r5, #0
 8003826:	f8d9 2000 	ldr.w	r2, [r9]
 800382a:	f04f 0900 	mov.w	r9, #0
 800382e:	bf08      	it	eq
 8003830:	1aad      	subeq	r5, r5, r2
 8003832:	68a3      	ldr	r3, [r4, #8]
 8003834:	6922      	ldr	r2, [r4, #16]
 8003836:	bf08      	it	eq
 8003838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800383c:	4293      	cmp	r3, r2
 800383e:	bfc4      	itt	gt
 8003840:	1a9b      	subgt	r3, r3, r2
 8003842:	18ed      	addgt	r5, r5, r3
 8003844:	341a      	adds	r4, #26
 8003846:	454d      	cmp	r5, r9
 8003848:	d11a      	bne.n	8003880 <_printf_common+0xd8>
 800384a:	2000      	movs	r0, #0
 800384c:	e008      	b.n	8003860 <_printf_common+0xb8>
 800384e:	2301      	movs	r3, #1
 8003850:	4652      	mov	r2, sl
 8003852:	4639      	mov	r1, r7
 8003854:	4630      	mov	r0, r6
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d103      	bne.n	8003864 <_printf_common+0xbc>
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003864:	3501      	adds	r5, #1
 8003866:	e7c2      	b.n	80037ee <_printf_common+0x46>
 8003868:	2030      	movs	r0, #48	; 0x30
 800386a:	18e1      	adds	r1, r4, r3
 800386c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003876:	4422      	add	r2, r4
 8003878:	3302      	adds	r3, #2
 800387a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800387e:	e7c4      	b.n	800380a <_printf_common+0x62>
 8003880:	2301      	movs	r3, #1
 8003882:	4622      	mov	r2, r4
 8003884:	4639      	mov	r1, r7
 8003886:	4630      	mov	r0, r6
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d0e6      	beq.n	800385c <_printf_common+0xb4>
 800388e:	f109 0901 	add.w	r9, r9, #1
 8003892:	e7d8      	b.n	8003846 <_printf_common+0x9e>

08003894 <_printf_i>:
 8003894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003898:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800389c:	460c      	mov	r4, r1
 800389e:	7e09      	ldrb	r1, [r1, #24]
 80038a0:	b085      	sub	sp, #20
 80038a2:	296e      	cmp	r1, #110	; 0x6e
 80038a4:	4617      	mov	r7, r2
 80038a6:	4606      	mov	r6, r0
 80038a8:	4698      	mov	r8, r3
 80038aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038ac:	f000 80b3 	beq.w	8003a16 <_printf_i+0x182>
 80038b0:	d822      	bhi.n	80038f8 <_printf_i+0x64>
 80038b2:	2963      	cmp	r1, #99	; 0x63
 80038b4:	d036      	beq.n	8003924 <_printf_i+0x90>
 80038b6:	d80a      	bhi.n	80038ce <_printf_i+0x3a>
 80038b8:	2900      	cmp	r1, #0
 80038ba:	f000 80b9 	beq.w	8003a30 <_printf_i+0x19c>
 80038be:	2958      	cmp	r1, #88	; 0x58
 80038c0:	f000 8083 	beq.w	80039ca <_printf_i+0x136>
 80038c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038cc:	e032      	b.n	8003934 <_printf_i+0xa0>
 80038ce:	2964      	cmp	r1, #100	; 0x64
 80038d0:	d001      	beq.n	80038d6 <_printf_i+0x42>
 80038d2:	2969      	cmp	r1, #105	; 0x69
 80038d4:	d1f6      	bne.n	80038c4 <_printf_i+0x30>
 80038d6:	6820      	ldr	r0, [r4, #0]
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	0605      	lsls	r5, r0, #24
 80038dc:	f103 0104 	add.w	r1, r3, #4
 80038e0:	d52a      	bpl.n	8003938 <_printf_i+0xa4>
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6011      	str	r1, [r2, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	da03      	bge.n	80038f2 <_printf_i+0x5e>
 80038ea:	222d      	movs	r2, #45	; 0x2d
 80038ec:	425b      	negs	r3, r3
 80038ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038f2:	486f      	ldr	r0, [pc, #444]	; (8003ab0 <_printf_i+0x21c>)
 80038f4:	220a      	movs	r2, #10
 80038f6:	e039      	b.n	800396c <_printf_i+0xd8>
 80038f8:	2973      	cmp	r1, #115	; 0x73
 80038fa:	f000 809d 	beq.w	8003a38 <_printf_i+0x1a4>
 80038fe:	d808      	bhi.n	8003912 <_printf_i+0x7e>
 8003900:	296f      	cmp	r1, #111	; 0x6f
 8003902:	d020      	beq.n	8003946 <_printf_i+0xb2>
 8003904:	2970      	cmp	r1, #112	; 0x70
 8003906:	d1dd      	bne.n	80038c4 <_printf_i+0x30>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	6023      	str	r3, [r4, #0]
 8003910:	e003      	b.n	800391a <_printf_i+0x86>
 8003912:	2975      	cmp	r1, #117	; 0x75
 8003914:	d017      	beq.n	8003946 <_printf_i+0xb2>
 8003916:	2978      	cmp	r1, #120	; 0x78
 8003918:	d1d4      	bne.n	80038c4 <_printf_i+0x30>
 800391a:	2378      	movs	r3, #120	; 0x78
 800391c:	4865      	ldr	r0, [pc, #404]	; (8003ab4 <_printf_i+0x220>)
 800391e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003922:	e055      	b.n	80039d0 <_printf_i+0x13c>
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800392a:	1d19      	adds	r1, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6011      	str	r1, [r2, #0]
 8003930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003934:	2301      	movs	r3, #1
 8003936:	e08c      	b.n	8003a52 <_printf_i+0x1be>
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800393e:	6011      	str	r1, [r2, #0]
 8003940:	bf18      	it	ne
 8003942:	b21b      	sxthne	r3, r3
 8003944:	e7cf      	b.n	80038e6 <_printf_i+0x52>
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	6825      	ldr	r5, [r4, #0]
 800394a:	1d18      	adds	r0, r3, #4
 800394c:	6010      	str	r0, [r2, #0]
 800394e:	0628      	lsls	r0, r5, #24
 8003950:	d501      	bpl.n	8003956 <_printf_i+0xc2>
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	e002      	b.n	800395c <_printf_i+0xc8>
 8003956:	0668      	lsls	r0, r5, #25
 8003958:	d5fb      	bpl.n	8003952 <_printf_i+0xbe>
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	296f      	cmp	r1, #111	; 0x6f
 800395e:	bf14      	ite	ne
 8003960:	220a      	movne	r2, #10
 8003962:	2208      	moveq	r2, #8
 8003964:	4852      	ldr	r0, [pc, #328]	; (8003ab0 <_printf_i+0x21c>)
 8003966:	2100      	movs	r1, #0
 8003968:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800396c:	6865      	ldr	r5, [r4, #4]
 800396e:	2d00      	cmp	r5, #0
 8003970:	60a5      	str	r5, [r4, #8]
 8003972:	f2c0 8095 	blt.w	8003aa0 <_printf_i+0x20c>
 8003976:	6821      	ldr	r1, [r4, #0]
 8003978:	f021 0104 	bic.w	r1, r1, #4
 800397c:	6021      	str	r1, [r4, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d13d      	bne.n	80039fe <_printf_i+0x16a>
 8003982:	2d00      	cmp	r5, #0
 8003984:	f040 808e 	bne.w	8003aa4 <_printf_i+0x210>
 8003988:	4665      	mov	r5, ip
 800398a:	2a08      	cmp	r2, #8
 800398c:	d10b      	bne.n	80039a6 <_printf_i+0x112>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07db      	lsls	r3, r3, #31
 8003992:	d508      	bpl.n	80039a6 <_printf_i+0x112>
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	6862      	ldr	r2, [r4, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	bfde      	ittt	le
 800399c:	2330      	movle	r3, #48	; 0x30
 800399e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039a6:	ebac 0305 	sub.w	r3, ip, r5
 80039aa:	6123      	str	r3, [r4, #16]
 80039ac:	f8cd 8000 	str.w	r8, [sp]
 80039b0:	463b      	mov	r3, r7
 80039b2:	aa03      	add	r2, sp, #12
 80039b4:	4621      	mov	r1, r4
 80039b6:	4630      	mov	r0, r6
 80039b8:	f7ff fef6 	bl	80037a8 <_printf_common>
 80039bc:	3001      	adds	r0, #1
 80039be:	d14d      	bne.n	8003a5c <_printf_i+0x1c8>
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	b005      	add	sp, #20
 80039c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ca:	4839      	ldr	r0, [pc, #228]	; (8003ab0 <_printf_i+0x21c>)
 80039cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	1d1d      	adds	r5, r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6015      	str	r5, [r2, #0]
 80039da:	060a      	lsls	r2, r1, #24
 80039dc:	d50b      	bpl.n	80039f6 <_printf_i+0x162>
 80039de:	07ca      	lsls	r2, r1, #31
 80039e0:	bf44      	itt	mi
 80039e2:	f041 0120 	orrmi.w	r1, r1, #32
 80039e6:	6021      	strmi	r1, [r4, #0]
 80039e8:	b91b      	cbnz	r3, 80039f2 <_printf_i+0x15e>
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	f022 0220 	bic.w	r2, r2, #32
 80039f0:	6022      	str	r2, [r4, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	e7b7      	b.n	8003966 <_printf_i+0xd2>
 80039f6:	064d      	lsls	r5, r1, #25
 80039f8:	bf48      	it	mi
 80039fa:	b29b      	uxthmi	r3, r3
 80039fc:	e7ef      	b.n	80039de <_printf_i+0x14a>
 80039fe:	4665      	mov	r5, ip
 8003a00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a04:	fb02 3311 	mls	r3, r2, r1, r3
 8003a08:	5cc3      	ldrb	r3, [r0, r3]
 8003a0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a0e:	460b      	mov	r3, r1
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d1f5      	bne.n	8003a00 <_printf_i+0x16c>
 8003a14:	e7b9      	b.n	800398a <_printf_i+0xf6>
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	6825      	ldr	r5, [r4, #0]
 8003a1a:	1d18      	adds	r0, r3, #4
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	6010      	str	r0, [r2, #0]
 8003a20:	0628      	lsls	r0, r5, #24
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	d501      	bpl.n	8003a2a <_printf_i+0x196>
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	e002      	b.n	8003a30 <_printf_i+0x19c>
 8003a2a:	066a      	lsls	r2, r5, #25
 8003a2c:	d5fb      	bpl.n	8003a26 <_printf_i+0x192>
 8003a2e:	8019      	strh	r1, [r3, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	4665      	mov	r5, ip
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	e7b9      	b.n	80039ac <_printf_i+0x118>
 8003a38:	6813      	ldr	r3, [r2, #0]
 8003a3a:	1d19      	adds	r1, r3, #4
 8003a3c:	6011      	str	r1, [r2, #0]
 8003a3e:	681d      	ldr	r5, [r3, #0]
 8003a40:	6862      	ldr	r2, [r4, #4]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4628      	mov	r0, r5
 8003a46:	f001 f9bf 	bl	8004dc8 <memchr>
 8003a4a:	b108      	cbz	r0, 8003a50 <_printf_i+0x1bc>
 8003a4c:	1b40      	subs	r0, r0, r5
 8003a4e:	6060      	str	r0, [r4, #4]
 8003a50:	6863      	ldr	r3, [r4, #4]
 8003a52:	6123      	str	r3, [r4, #16]
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5a:	e7a7      	b.n	80039ac <_printf_i+0x118>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	462a      	mov	r2, r5
 8003a60:	4639      	mov	r1, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	47c0      	blx	r8
 8003a66:	3001      	adds	r0, #1
 8003a68:	d0aa      	beq.n	80039c0 <_printf_i+0x12c>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	079b      	lsls	r3, r3, #30
 8003a6e:	d413      	bmi.n	8003a98 <_printf_i+0x204>
 8003a70:	68e0      	ldr	r0, [r4, #12]
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	4298      	cmp	r0, r3
 8003a76:	bfb8      	it	lt
 8003a78:	4618      	movlt	r0, r3
 8003a7a:	e7a3      	b.n	80039c4 <_printf_i+0x130>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	464a      	mov	r2, r9
 8003a80:	4639      	mov	r1, r7
 8003a82:	4630      	mov	r0, r6
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d09a      	beq.n	80039c0 <_printf_i+0x12c>
 8003a8a:	3501      	adds	r5, #1
 8003a8c:	68e3      	ldr	r3, [r4, #12]
 8003a8e:	9a03      	ldr	r2, [sp, #12]
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	42ab      	cmp	r3, r5
 8003a94:	dcf2      	bgt.n	8003a7c <_printf_i+0x1e8>
 8003a96:	e7eb      	b.n	8003a70 <_printf_i+0x1dc>
 8003a98:	2500      	movs	r5, #0
 8003a9a:	f104 0919 	add.w	r9, r4, #25
 8003a9e:	e7f5      	b.n	8003a8c <_printf_i+0x1f8>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ac      	bne.n	80039fe <_printf_i+0x16a>
 8003aa4:	7803      	ldrb	r3, [r0, #0]
 8003aa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aae:	e76c      	b.n	800398a <_printf_i+0xf6>
 8003ab0:	08005a6a 	.word	0x08005a6a
 8003ab4:	08005a7b 	.word	0x08005a7b

08003ab8 <iprintf>:
 8003ab8:	b40f      	push	{r0, r1, r2, r3}
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <iprintf+0x2c>)
 8003abc:	b513      	push	{r0, r1, r4, lr}
 8003abe:	681c      	ldr	r4, [r3, #0]
 8003ac0:	b124      	cbz	r4, 8003acc <iprintf+0x14>
 8003ac2:	69a3      	ldr	r3, [r4, #24]
 8003ac4:	b913      	cbnz	r3, 8003acc <iprintf+0x14>
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f001 f87a 	bl	8004bc0 <__sinit>
 8003acc:	ab05      	add	r3, sp, #20
 8003ace:	9a04      	ldr	r2, [sp, #16]
 8003ad0:	68a1      	ldr	r1, [r4, #8]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	f001 fd3d 	bl	8005554 <_vfiprintf_r>
 8003ada:	b002      	add	sp, #8
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae0:	b004      	add	sp, #16
 8003ae2:	4770      	bx	lr
 8003ae4:	2000000c 	.word	0x2000000c

08003ae8 <putchar>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <putchar+0x24>)
 8003aec:	4605      	mov	r5, r0
 8003aee:	681c      	ldr	r4, [r3, #0]
 8003af0:	b124      	cbz	r4, 8003afc <putchar+0x14>
 8003af2:	69a3      	ldr	r3, [r4, #24]
 8003af4:	b913      	cbnz	r3, 8003afc <putchar+0x14>
 8003af6:	4620      	mov	r0, r4
 8003af8:	f001 f862 	bl	8004bc0 <__sinit>
 8003afc:	68a2      	ldr	r2, [r4, #8]
 8003afe:	4629      	mov	r1, r5
 8003b00:	4620      	mov	r0, r4
 8003b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b06:	f001 be3b 	b.w	8005780 <_putc_r>
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <_puts_r>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	460e      	mov	r6, r1
 8003b14:	4605      	mov	r5, r0
 8003b16:	b118      	cbz	r0, 8003b20 <_puts_r+0x10>
 8003b18:	6983      	ldr	r3, [r0, #24]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <_puts_r+0x10>
 8003b1c:	f001 f850 	bl	8004bc0 <__sinit>
 8003b20:	69ab      	ldr	r3, [r5, #24]
 8003b22:	68ac      	ldr	r4, [r5, #8]
 8003b24:	b913      	cbnz	r3, 8003b2c <_puts_r+0x1c>
 8003b26:	4628      	mov	r0, r5
 8003b28:	f001 f84a 	bl	8004bc0 <__sinit>
 8003b2c:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <_puts_r+0xac>)
 8003b2e:	429c      	cmp	r4, r3
 8003b30:	d117      	bne.n	8003b62 <_puts_r+0x52>
 8003b32:	686c      	ldr	r4, [r5, #4]
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	071b      	lsls	r3, r3, #28
 8003b38:	d51d      	bpl.n	8003b76 <_puts_r+0x66>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	b1db      	cbz	r3, 8003b76 <_puts_r+0x66>
 8003b3e:	3e01      	subs	r6, #1
 8003b40:	68a3      	ldr	r3, [r4, #8]
 8003b42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b46:	3b01      	subs	r3, #1
 8003b48:	60a3      	str	r3, [r4, #8]
 8003b4a:	b9e9      	cbnz	r1, 8003b88 <_puts_r+0x78>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da2e      	bge.n	8003bae <_puts_r+0x9e>
 8003b50:	4622      	mov	r2, r4
 8003b52:	210a      	movs	r1, #10
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 f83f 	bl	8003bd8 <__swbuf_r>
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d011      	beq.n	8003b82 <_puts_r+0x72>
 8003b5e:	200a      	movs	r0, #10
 8003b60:	e011      	b.n	8003b86 <_puts_r+0x76>
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <_puts_r+0xb0>)
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d101      	bne.n	8003b6c <_puts_r+0x5c>
 8003b68:	68ac      	ldr	r4, [r5, #8]
 8003b6a:	e7e3      	b.n	8003b34 <_puts_r+0x24>
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <_puts_r+0xb4>)
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	bf08      	it	eq
 8003b72:	68ec      	ldreq	r4, [r5, #12]
 8003b74:	e7de      	b.n	8003b34 <_puts_r+0x24>
 8003b76:	4621      	mov	r1, r4
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f87f 	bl	8003c7c <__swsetup_r>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d0dd      	beq.n	8003b3e <_puts_r+0x2e>
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	da04      	bge.n	8003b96 <_puts_r+0x86>
 8003b8c:	69a2      	ldr	r2, [r4, #24]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	dc06      	bgt.n	8003ba0 <_puts_r+0x90>
 8003b92:	290a      	cmp	r1, #10
 8003b94:	d004      	beq.n	8003ba0 <_puts_r+0x90>
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	6022      	str	r2, [r4, #0]
 8003b9c:	7019      	strb	r1, [r3, #0]
 8003b9e:	e7cf      	b.n	8003b40 <_puts_r+0x30>
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	f000 f818 	bl	8003bd8 <__swbuf_r>
 8003ba8:	3001      	adds	r0, #1
 8003baa:	d1c9      	bne.n	8003b40 <_puts_r+0x30>
 8003bac:	e7e9      	b.n	8003b82 <_puts_r+0x72>
 8003bae:	200a      	movs	r0, #10
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	6022      	str	r2, [r4, #0]
 8003bb6:	7018      	strb	r0, [r3, #0]
 8003bb8:	e7e5      	b.n	8003b86 <_puts_r+0x76>
 8003bba:	bf00      	nop
 8003bbc:	08005abc 	.word	0x08005abc
 8003bc0:	08005adc 	.word	0x08005adc
 8003bc4:	08005a9c 	.word	0x08005a9c

08003bc8 <puts>:
 8003bc8:	4b02      	ldr	r3, [pc, #8]	; (8003bd4 <puts+0xc>)
 8003bca:	4601      	mov	r1, r0
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	f7ff bf9f 	b.w	8003b10 <_puts_r>
 8003bd2:	bf00      	nop
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <__swbuf_r>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	460e      	mov	r6, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	4605      	mov	r5, r0
 8003be0:	b118      	cbz	r0, 8003bea <__swbuf_r+0x12>
 8003be2:	6983      	ldr	r3, [r0, #24]
 8003be4:	b90b      	cbnz	r3, 8003bea <__swbuf_r+0x12>
 8003be6:	f000 ffeb 	bl	8004bc0 <__sinit>
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <__swbuf_r+0x98>)
 8003bec:	429c      	cmp	r4, r3
 8003bee:	d12a      	bne.n	8003c46 <__swbuf_r+0x6e>
 8003bf0:	686c      	ldr	r4, [r5, #4]
 8003bf2:	69a3      	ldr	r3, [r4, #24]
 8003bf4:	60a3      	str	r3, [r4, #8]
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	071a      	lsls	r2, r3, #28
 8003bfa:	d52e      	bpl.n	8003c5a <__swbuf_r+0x82>
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	b363      	cbz	r3, 8003c5a <__swbuf_r+0x82>
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	6820      	ldr	r0, [r4, #0]
 8003c04:	b2f6      	uxtb	r6, r6
 8003c06:	1ac0      	subs	r0, r0, r3
 8003c08:	6963      	ldr	r3, [r4, #20]
 8003c0a:	4637      	mov	r7, r6
 8003c0c:	4283      	cmp	r3, r0
 8003c0e:	dc04      	bgt.n	8003c1a <__swbuf_r+0x42>
 8003c10:	4621      	mov	r1, r4
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 ff6a 	bl	8004aec <_fflush_r>
 8003c18:	bb28      	cbnz	r0, 8003c66 <__swbuf_r+0x8e>
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60a3      	str	r3, [r4, #8]
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	701e      	strb	r6, [r3, #0]
 8003c2a:	6963      	ldr	r3, [r4, #20]
 8003c2c:	4283      	cmp	r3, r0
 8003c2e:	d004      	beq.n	8003c3a <__swbuf_r+0x62>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	07db      	lsls	r3, r3, #31
 8003c34:	d519      	bpl.n	8003c6a <__swbuf_r+0x92>
 8003c36:	2e0a      	cmp	r6, #10
 8003c38:	d117      	bne.n	8003c6a <__swbuf_r+0x92>
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 ff55 	bl	8004aec <_fflush_r>
 8003c42:	b190      	cbz	r0, 8003c6a <__swbuf_r+0x92>
 8003c44:	e00f      	b.n	8003c66 <__swbuf_r+0x8e>
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <__swbuf_r+0x9c>)
 8003c48:	429c      	cmp	r4, r3
 8003c4a:	d101      	bne.n	8003c50 <__swbuf_r+0x78>
 8003c4c:	68ac      	ldr	r4, [r5, #8]
 8003c4e:	e7d0      	b.n	8003bf2 <__swbuf_r+0x1a>
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <__swbuf_r+0xa0>)
 8003c52:	429c      	cmp	r4, r3
 8003c54:	bf08      	it	eq
 8003c56:	68ec      	ldreq	r4, [r5, #12]
 8003c58:	e7cb      	b.n	8003bf2 <__swbuf_r+0x1a>
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 f80d 	bl	8003c7c <__swsetup_r>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d0cc      	beq.n	8003c00 <__swbuf_r+0x28>
 8003c66:	f04f 37ff 	mov.w	r7, #4294967295
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	08005abc 	.word	0x08005abc
 8003c74:	08005adc 	.word	0x08005adc
 8003c78:	08005a9c 	.word	0x08005a9c

08003c7c <__swsetup_r>:
 8003c7c:	4b32      	ldr	r3, [pc, #200]	; (8003d48 <__swsetup_r+0xcc>)
 8003c7e:	b570      	push	{r4, r5, r6, lr}
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	4606      	mov	r6, r0
 8003c84:	460c      	mov	r4, r1
 8003c86:	b125      	cbz	r5, 8003c92 <__swsetup_r+0x16>
 8003c88:	69ab      	ldr	r3, [r5, #24]
 8003c8a:	b913      	cbnz	r3, 8003c92 <__swsetup_r+0x16>
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 ff97 	bl	8004bc0 <__sinit>
 8003c92:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <__swsetup_r+0xd0>)
 8003c94:	429c      	cmp	r4, r3
 8003c96:	d10f      	bne.n	8003cb8 <__swsetup_r+0x3c>
 8003c98:	686c      	ldr	r4, [r5, #4]
 8003c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	0715      	lsls	r5, r2, #28
 8003ca2:	d42c      	bmi.n	8003cfe <__swsetup_r+0x82>
 8003ca4:	06d0      	lsls	r0, r2, #27
 8003ca6:	d411      	bmi.n	8003ccc <__swsetup_r+0x50>
 8003ca8:	2209      	movs	r2, #9
 8003caa:	6032      	str	r2, [r6, #0]
 8003cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb0:	81a3      	strh	r3, [r4, #12]
 8003cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb6:	e03e      	b.n	8003d36 <__swsetup_r+0xba>
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <__swsetup_r+0xd4>)
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	d101      	bne.n	8003cc2 <__swsetup_r+0x46>
 8003cbe:	68ac      	ldr	r4, [r5, #8]
 8003cc0:	e7eb      	b.n	8003c9a <__swsetup_r+0x1e>
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <__swsetup_r+0xd8>)
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	bf08      	it	eq
 8003cc8:	68ec      	ldreq	r4, [r5, #12]
 8003cca:	e7e6      	b.n	8003c9a <__swsetup_r+0x1e>
 8003ccc:	0751      	lsls	r1, r2, #29
 8003cce:	d512      	bpl.n	8003cf6 <__swsetup_r+0x7a>
 8003cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cd2:	b141      	cbz	r1, 8003ce6 <__swsetup_r+0x6a>
 8003cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd8:	4299      	cmp	r1, r3
 8003cda:	d002      	beq.n	8003ce2 <__swsetup_r+0x66>
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f001 fb6b 	bl	80053b8 <_free_r>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cec:	81a3      	strh	r3, [r4, #12]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6063      	str	r3, [r4, #4]
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	b94b      	cbnz	r3, 8003d16 <__swsetup_r+0x9a>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d003      	beq.n	8003d16 <__swsetup_r+0x9a>
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4630      	mov	r0, r6
 8003d12:	f001 f811 	bl	8004d38 <__smakebuf_r>
 8003d16:	89a2      	ldrh	r2, [r4, #12]
 8003d18:	f012 0301 	ands.w	r3, r2, #1
 8003d1c:	d00c      	beq.n	8003d38 <__swsetup_r+0xbc>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	6963      	ldr	r3, [r4, #20]
 8003d24:	425b      	negs	r3, r3
 8003d26:	61a3      	str	r3, [r4, #24]
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	b953      	cbnz	r3, 8003d42 <__swsetup_r+0xc6>
 8003d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d34:	d1ba      	bne.n	8003cac <__swsetup_r+0x30>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	0792      	lsls	r2, r2, #30
 8003d3a:	bf58      	it	pl
 8003d3c:	6963      	ldrpl	r3, [r4, #20]
 8003d3e:	60a3      	str	r3, [r4, #8]
 8003d40:	e7f2      	b.n	8003d28 <__swsetup_r+0xac>
 8003d42:	2000      	movs	r0, #0
 8003d44:	e7f7      	b.n	8003d36 <__swsetup_r+0xba>
 8003d46:	bf00      	nop
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	08005abc 	.word	0x08005abc
 8003d50:	08005adc 	.word	0x08005adc
 8003d54:	08005a9c 	.word	0x08005a9c

08003d58 <quorem>:
 8003d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	6903      	ldr	r3, [r0, #16]
 8003d5e:	690c      	ldr	r4, [r1, #16]
 8003d60:	4680      	mov	r8, r0
 8003d62:	42a3      	cmp	r3, r4
 8003d64:	f2c0 8084 	blt.w	8003e70 <quorem+0x118>
 8003d68:	3c01      	subs	r4, #1
 8003d6a:	f101 0714 	add.w	r7, r1, #20
 8003d6e:	f100 0614 	add.w	r6, r0, #20
 8003d72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003d76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d7a:	3501      	adds	r5, #1
 8003d7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003d80:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003d84:	eb06 030c 	add.w	r3, r6, ip
 8003d88:	eb07 090c 	add.w	r9, r7, ip
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	b39d      	cbz	r5, 8003df8 <quorem+0xa0>
 8003d90:	f04f 0a00 	mov.w	sl, #0
 8003d94:	4638      	mov	r0, r7
 8003d96:	46b6      	mov	lr, r6
 8003d98:	46d3      	mov	fp, sl
 8003d9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d9e:	b293      	uxth	r3, r2
 8003da0:	fb05 a303 	mla	r3, r5, r3, sl
 8003da4:	0c12      	lsrs	r2, r2, #16
 8003da6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003daa:	fb05 a202 	mla	r2, r5, r2, sl
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	ebab 0303 	sub.w	r3, fp, r3
 8003db4:	f8de b000 	ldr.w	fp, [lr]
 8003db8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003dbc:	fa1f fb8b 	uxth.w	fp, fp
 8003dc0:	445b      	add	r3, fp
 8003dc2:	fa1f fb82 	uxth.w	fp, r2
 8003dc6:	f8de 2000 	ldr.w	r2, [lr]
 8003dca:	4581      	cmp	r9, r0
 8003dcc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003dd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dda:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003dde:	f84e 3b04 	str.w	r3, [lr], #4
 8003de2:	d2da      	bcs.n	8003d9a <quorem+0x42>
 8003de4:	f856 300c 	ldr.w	r3, [r6, ip]
 8003de8:	b933      	cbnz	r3, 8003df8 <quorem+0xa0>
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	3b04      	subs	r3, #4
 8003dee:	429e      	cmp	r6, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	d331      	bcc.n	8003e58 <quorem+0x100>
 8003df4:	f8c8 4010 	str.w	r4, [r8, #16]
 8003df8:	4640      	mov	r0, r8
 8003dfa:	f001 fa07 	bl	800520c <__mcmp>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	db26      	blt.n	8003e50 <quorem+0xf8>
 8003e02:	4630      	mov	r0, r6
 8003e04:	f04f 0c00 	mov.w	ip, #0
 8003e08:	3501      	adds	r5, #1
 8003e0a:	f857 1b04 	ldr.w	r1, [r7], #4
 8003e0e:	f8d0 e000 	ldr.w	lr, [r0]
 8003e12:	b28b      	uxth	r3, r1
 8003e14:	ebac 0303 	sub.w	r3, ip, r3
 8003e18:	fa1f f28e 	uxth.w	r2, lr
 8003e1c:	4413      	add	r3, r2
 8003e1e:	0c0a      	lsrs	r2, r1, #16
 8003e20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e2e:	45b9      	cmp	r9, r7
 8003e30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e34:	f840 3b04 	str.w	r3, [r0], #4
 8003e38:	d2e7      	bcs.n	8003e0a <quorem+0xb2>
 8003e3a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003e3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003e42:	b92a      	cbnz	r2, 8003e50 <quorem+0xf8>
 8003e44:	3b04      	subs	r3, #4
 8003e46:	429e      	cmp	r6, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	d30b      	bcc.n	8003e64 <quorem+0x10c>
 8003e4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e50:	4628      	mov	r0, r5
 8003e52:	b003      	add	sp, #12
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d1c9      	bne.n	8003df4 <quorem+0x9c>
 8003e60:	3c01      	subs	r4, #1
 8003e62:	e7c4      	b.n	8003dee <quorem+0x96>
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	3b04      	subs	r3, #4
 8003e68:	2a00      	cmp	r2, #0
 8003e6a:	d1ef      	bne.n	8003e4c <quorem+0xf4>
 8003e6c:	3c01      	subs	r4, #1
 8003e6e:	e7ea      	b.n	8003e46 <quorem+0xee>
 8003e70:	2000      	movs	r0, #0
 8003e72:	e7ee      	b.n	8003e52 <quorem+0xfa>
 8003e74:	0000      	movs	r0, r0
	...

08003e78 <_dtoa_r>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	4616      	mov	r6, r2
 8003e7e:	461f      	mov	r7, r3
 8003e80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e82:	b095      	sub	sp, #84	; 0x54
 8003e84:	4604      	mov	r4, r0
 8003e86:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003e8a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003e8e:	b93d      	cbnz	r5, 8003ea0 <_dtoa_r+0x28>
 8003e90:	2010      	movs	r0, #16
 8003e92:	f000 ff91 	bl	8004db8 <malloc>
 8003e96:	6260      	str	r0, [r4, #36]	; 0x24
 8003e98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e9c:	6005      	str	r5, [r0, #0]
 8003e9e:	60c5      	str	r5, [r0, #12]
 8003ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	b151      	cbz	r1, 8003ebc <_dtoa_r+0x44>
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4093      	lsls	r3, r2
 8003eac:	604a      	str	r2, [r1, #4]
 8003eae:	608b      	str	r3, [r1, #8]
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 ffcb 	bl	8004e4c <_Bfree>
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	1e3b      	subs	r3, r7, #0
 8003ebe:	bfaf      	iteee	ge
 8003ec0:	2300      	movge	r3, #0
 8003ec2:	2201      	movlt	r2, #1
 8003ec4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	9303      	strlt	r3, [sp, #12]
 8003eca:	bfac      	ite	ge
 8003ecc:	f8c8 3000 	strge.w	r3, [r8]
 8003ed0:	f8c8 2000 	strlt.w	r2, [r8]
 8003ed4:	4bae      	ldr	r3, [pc, #696]	; (8004190 <_dtoa_r+0x318>)
 8003ed6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003eda:	ea33 0308 	bics.w	r3, r3, r8
 8003ede:	d11b      	bne.n	8003f18 <_dtoa_r+0xa0>
 8003ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ee4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	9b02      	ldr	r3, [sp, #8]
 8003eea:	b923      	cbnz	r3, 8003ef6 <_dtoa_r+0x7e>
 8003eec:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	f000 8545 	beq.w	8004980 <_dtoa_r+0xb08>
 8003ef6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ef8:	b953      	cbnz	r3, 8003f10 <_dtoa_r+0x98>
 8003efa:	4ba6      	ldr	r3, [pc, #664]	; (8004194 <_dtoa_r+0x31c>)
 8003efc:	e021      	b.n	8003f42 <_dtoa_r+0xca>
 8003efe:	4ba6      	ldr	r3, [pc, #664]	; (8004198 <_dtoa_r+0x320>)
 8003f00:	9306      	str	r3, [sp, #24]
 8003f02:	3308      	adds	r3, #8
 8003f04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	9806      	ldr	r0, [sp, #24]
 8003f0a:	b015      	add	sp, #84	; 0x54
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <_dtoa_r+0x31c>)
 8003f12:	9306      	str	r3, [sp, #24]
 8003f14:	3303      	adds	r3, #3
 8003f16:	e7f5      	b.n	8003f04 <_dtoa_r+0x8c>
 8003f18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8003f28:	4682      	mov	sl, r0
 8003f2a:	b160      	cbz	r0, 8003f46 <_dtoa_r+0xce>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8520 	beq.w	800497a <_dtoa_r+0xb02>
 8003f3a:	4b98      	ldr	r3, [pc, #608]	; (800419c <_dtoa_r+0x324>)
 8003f3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	9306      	str	r3, [sp, #24]
 8003f44:	e7e0      	b.n	8003f08 <_dtoa_r+0x90>
 8003f46:	ab12      	add	r3, sp, #72	; 0x48
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	ab13      	add	r3, sp, #76	; 0x4c
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4632      	mov	r2, r6
 8003f50:	463b      	mov	r3, r7
 8003f52:	4620      	mov	r0, r4
 8003f54:	f001 f9d2 	bl	80052fc <__d2b>
 8003f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003f5c:	4683      	mov	fp, r0
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	d07d      	beq.n	800405e <_dtoa_r+0x1e6>
 8003f62:	46b0      	mov	r8, r6
 8003f64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f68:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003f6c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003f70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f74:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b89      	ldr	r3, [pc, #548]	; (80041a0 <_dtoa_r+0x328>)
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	4649      	mov	r1, r9
 8003f80:	f7fc f8f2 	bl	8000168 <__aeabi_dsub>
 8003f84:	a37c      	add	r3, pc, #496	; (adr r3, 8004178 <_dtoa_r+0x300>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc faa5 	bl	80004d8 <__aeabi_dmul>
 8003f8e:	a37c      	add	r3, pc, #496	; (adr r3, 8004180 <_dtoa_r+0x308>)
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f7fc f8ea 	bl	800016c <__adddf3>
 8003f98:	4606      	mov	r6, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	460f      	mov	r7, r1
 8003f9e:	f7fc fa31 	bl	8000404 <__aeabi_i2d>
 8003fa2:	a379      	add	r3, pc, #484	; (adr r3, 8004188 <_dtoa_r+0x310>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fa96 	bl	80004d8 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	f7fc f8da 	bl	800016c <__adddf3>
 8003fb8:	4606      	mov	r6, r0
 8003fba:	460f      	mov	r7, r1
 8003fbc:	f7fc fd3c 	bl	8000a38 <__aeabi_d2iz>
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4682      	mov	sl, r0
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	4639      	mov	r1, r7
 8003fca:	f7fc fcf7 	bl	80009bc <__aeabi_dcmplt>
 8003fce:	b148      	cbz	r0, 8003fe4 <_dtoa_r+0x16c>
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	f7fc fa17 	bl	8000404 <__aeabi_i2d>
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	463b      	mov	r3, r7
 8003fda:	f7fc fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8003fde:	b908      	cbnz	r0, 8003fe4 <_dtoa_r+0x16c>
 8003fe0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fe4:	f1ba 0f16 	cmp.w	sl, #22
 8003fe8:	d85a      	bhi.n	80040a0 <_dtoa_r+0x228>
 8003fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fee:	496d      	ldr	r1, [pc, #436]	; (80041a4 <_dtoa_r+0x32c>)
 8003ff0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ff8:	f7fc fcfe 	bl	80009f8 <__aeabi_dcmpgt>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d051      	beq.n	80040a4 <_dtoa_r+0x22c>
 8004000:	2300      	movs	r3, #0
 8004002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004006:	930d      	str	r3, [sp, #52]	; 0x34
 8004008:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800400a:	1b5d      	subs	r5, r3, r5
 800400c:	1e6b      	subs	r3, r5, #1
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	bf43      	ittte	mi
 8004012:	2300      	movmi	r3, #0
 8004014:	f1c5 0901 	rsbmi	r9, r5, #1
 8004018:	9307      	strmi	r3, [sp, #28]
 800401a:	f04f 0900 	movpl.w	r9, #0
 800401e:	f1ba 0f00 	cmp.w	sl, #0
 8004022:	db41      	blt.n	80040a8 <_dtoa_r+0x230>
 8004024:	9b07      	ldr	r3, [sp, #28]
 8004026:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800402a:	4453      	add	r3, sl
 800402c:	9307      	str	r3, [sp, #28]
 800402e:	2300      	movs	r3, #0
 8004030:	9308      	str	r3, [sp, #32]
 8004032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004034:	2b09      	cmp	r3, #9
 8004036:	f200 808f 	bhi.w	8004158 <_dtoa_r+0x2e0>
 800403a:	2b05      	cmp	r3, #5
 800403c:	bfc4      	itt	gt
 800403e:	3b04      	subgt	r3, #4
 8004040:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004042:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004044:	bfc8      	it	gt
 8004046:	2500      	movgt	r5, #0
 8004048:	f1a3 0302 	sub.w	r3, r3, #2
 800404c:	bfd8      	it	le
 800404e:	2501      	movle	r5, #1
 8004050:	2b03      	cmp	r3, #3
 8004052:	f200 808d 	bhi.w	8004170 <_dtoa_r+0x2f8>
 8004056:	e8df f003 	tbb	[pc, r3]
 800405a:	7d7b      	.short	0x7d7b
 800405c:	6f2f      	.short	0x6f2f
 800405e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004062:	441d      	add	r5, r3
 8004064:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004068:	2820      	cmp	r0, #32
 800406a:	dd13      	ble.n	8004094 <_dtoa_r+0x21c>
 800406c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004070:	9b02      	ldr	r3, [sp, #8]
 8004072:	fa08 f800 	lsl.w	r8, r8, r0
 8004076:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800407a:	fa23 f000 	lsr.w	r0, r3, r0
 800407e:	ea48 0000 	orr.w	r0, r8, r0
 8004082:	f7fc f9af 	bl	80003e4 <__aeabi_ui2d>
 8004086:	2301      	movs	r3, #1
 8004088:	4680      	mov	r8, r0
 800408a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800408e:	3d01      	subs	r5, #1
 8004090:	9310      	str	r3, [sp, #64]	; 0x40
 8004092:	e771      	b.n	8003f78 <_dtoa_r+0x100>
 8004094:	9b02      	ldr	r3, [sp, #8]
 8004096:	f1c0 0020 	rsb	r0, r0, #32
 800409a:	fa03 f000 	lsl.w	r0, r3, r0
 800409e:	e7f0      	b.n	8004082 <_dtoa_r+0x20a>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e7b0      	b.n	8004006 <_dtoa_r+0x18e>
 80040a4:	900d      	str	r0, [sp, #52]	; 0x34
 80040a6:	e7af      	b.n	8004008 <_dtoa_r+0x190>
 80040a8:	f1ca 0300 	rsb	r3, sl, #0
 80040ac:	9308      	str	r3, [sp, #32]
 80040ae:	2300      	movs	r3, #0
 80040b0:	eba9 090a 	sub.w	r9, r9, sl
 80040b4:	930c      	str	r3, [sp, #48]	; 0x30
 80040b6:	e7bc      	b.n	8004032 <_dtoa_r+0x1ba>
 80040b8:	2301      	movs	r3, #1
 80040ba:	9309      	str	r3, [sp, #36]	; 0x24
 80040bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	dd74      	ble.n	80041ac <_dtoa_r+0x334>
 80040c2:	4698      	mov	r8, r3
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	2200      	movs	r2, #0
 80040c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040ca:	6072      	str	r2, [r6, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	f102 0014 	add.w	r0, r2, #20
 80040d2:	4298      	cmp	r0, r3
 80040d4:	6871      	ldr	r1, [r6, #4]
 80040d6:	d96e      	bls.n	80041b6 <_dtoa_r+0x33e>
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 fe83 	bl	8004de4 <_Balloc>
 80040de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b8 0f0e 	cmp.w	r8, #14
 80040e8:	9306      	str	r3, [sp, #24]
 80040ea:	f200 80ed 	bhi.w	80042c8 <_dtoa_r+0x450>
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	f000 80ea 	beq.w	80042c8 <_dtoa_r+0x450>
 80040f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040f8:	f1ba 0f00 	cmp.w	sl, #0
 80040fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004100:	dd77      	ble.n	80041f2 <_dtoa_r+0x37a>
 8004102:	4a28      	ldr	r2, [pc, #160]	; (80041a4 <_dtoa_r+0x32c>)
 8004104:	f00a 030f 	and.w	r3, sl, #15
 8004108:	ea4f 162a 	mov.w	r6, sl, asr #4
 800410c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004110:	06f0      	lsls	r0, r6, #27
 8004112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004116:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800411a:	d568      	bpl.n	80041ee <_dtoa_r+0x376>
 800411c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <_dtoa_r+0x330>)
 8004122:	2503      	movs	r5, #3
 8004124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004128:	f7fc fb00 	bl	800072c <__aeabi_ddiv>
 800412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004130:	f006 060f 	and.w	r6, r6, #15
 8004134:	4f1c      	ldr	r7, [pc, #112]	; (80041a8 <_dtoa_r+0x330>)
 8004136:	e04f      	b.n	80041d8 <_dtoa_r+0x360>
 8004138:	2301      	movs	r3, #1
 800413a:	9309      	str	r3, [sp, #36]	; 0x24
 800413c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800413e:	4453      	add	r3, sl
 8004140:	f103 0801 	add.w	r8, r3, #1
 8004144:	9304      	str	r3, [sp, #16]
 8004146:	4643      	mov	r3, r8
 8004148:	2b01      	cmp	r3, #1
 800414a:	bfb8      	it	lt
 800414c:	2301      	movlt	r3, #1
 800414e:	e7ba      	b.n	80040c6 <_dtoa_r+0x24e>
 8004150:	2300      	movs	r3, #0
 8004152:	e7b2      	b.n	80040ba <_dtoa_r+0x242>
 8004154:	2300      	movs	r3, #0
 8004156:	e7f0      	b.n	800413a <_dtoa_r+0x2c2>
 8004158:	2501      	movs	r5, #1
 800415a:	2300      	movs	r3, #0
 800415c:	9509      	str	r5, [sp, #36]	; 0x24
 800415e:	931e      	str	r3, [sp, #120]	; 0x78
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	2200      	movs	r2, #0
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	4698      	mov	r8, r3
 800416a:	2312      	movs	r3, #18
 800416c:	921f      	str	r2, [sp, #124]	; 0x7c
 800416e:	e7aa      	b.n	80040c6 <_dtoa_r+0x24e>
 8004170:	2301      	movs	r3, #1
 8004172:	9309      	str	r3, [sp, #36]	; 0x24
 8004174:	e7f4      	b.n	8004160 <_dtoa_r+0x2e8>
 8004176:	bf00      	nop
 8004178:	636f4361 	.word	0x636f4361
 800417c:	3fd287a7 	.word	0x3fd287a7
 8004180:	8b60c8b3 	.word	0x8b60c8b3
 8004184:	3fc68a28 	.word	0x3fc68a28
 8004188:	509f79fb 	.word	0x509f79fb
 800418c:	3fd34413 	.word	0x3fd34413
 8004190:	7ff00000 	.word	0x7ff00000
 8004194:	08005a95 	.word	0x08005a95
 8004198:	08005a8c 	.word	0x08005a8c
 800419c:	08005a69 	.word	0x08005a69
 80041a0:	3ff80000 	.word	0x3ff80000
 80041a4:	08005b28 	.word	0x08005b28
 80041a8:	08005b00 	.word	0x08005b00
 80041ac:	2301      	movs	r3, #1
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	4698      	mov	r8, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	e7da      	b.n	800416c <_dtoa_r+0x2f4>
 80041b6:	3101      	adds	r1, #1
 80041b8:	6071      	str	r1, [r6, #4]
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	e787      	b.n	80040ce <_dtoa_r+0x256>
 80041be:	07f1      	lsls	r1, r6, #31
 80041c0:	d508      	bpl.n	80041d4 <_dtoa_r+0x35c>
 80041c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ca:	f7fc f985 	bl	80004d8 <__aeabi_dmul>
 80041ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80041d2:	3501      	adds	r5, #1
 80041d4:	1076      	asrs	r6, r6, #1
 80041d6:	3708      	adds	r7, #8
 80041d8:	2e00      	cmp	r6, #0
 80041da:	d1f0      	bne.n	80041be <_dtoa_r+0x346>
 80041dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041e4:	f7fc faa2 	bl	800072c <__aeabi_ddiv>
 80041e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041ec:	e01b      	b.n	8004226 <_dtoa_r+0x3ae>
 80041ee:	2502      	movs	r5, #2
 80041f0:	e7a0      	b.n	8004134 <_dtoa_r+0x2bc>
 80041f2:	f000 80a4 	beq.w	800433e <_dtoa_r+0x4c6>
 80041f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80041fa:	f1ca 0600 	rsb	r6, sl, #0
 80041fe:	4ba0      	ldr	r3, [pc, #640]	; (8004480 <_dtoa_r+0x608>)
 8004200:	f006 020f 	and.w	r2, r6, #15
 8004204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f7fc f964 	bl	80004d8 <__aeabi_dmul>
 8004210:	2502      	movs	r5, #2
 8004212:	2300      	movs	r3, #0
 8004214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004218:	4f9a      	ldr	r7, [pc, #616]	; (8004484 <_dtoa_r+0x60c>)
 800421a:	1136      	asrs	r6, r6, #4
 800421c:	2e00      	cmp	r6, #0
 800421e:	f040 8083 	bne.w	8004328 <_dtoa_r+0x4b0>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e0      	bne.n	80041e8 <_dtoa_r+0x370>
 8004226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 808a 	beq.w	8004342 <_dtoa_r+0x4ca>
 800422e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004232:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800423a:	2200      	movs	r2, #0
 800423c:	4b92      	ldr	r3, [pc, #584]	; (8004488 <_dtoa_r+0x610>)
 800423e:	f7fc fbbd 	bl	80009bc <__aeabi_dcmplt>
 8004242:	2800      	cmp	r0, #0
 8004244:	d07d      	beq.n	8004342 <_dtoa_r+0x4ca>
 8004246:	f1b8 0f00 	cmp.w	r8, #0
 800424a:	d07a      	beq.n	8004342 <_dtoa_r+0x4ca>
 800424c:	9b04      	ldr	r3, [sp, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	dd36      	ble.n	80042c0 <_dtoa_r+0x448>
 8004252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004256:	2200      	movs	r2, #0
 8004258:	4b8c      	ldr	r3, [pc, #560]	; (800448c <_dtoa_r+0x614>)
 800425a:	f7fc f93d 	bl	80004d8 <__aeabi_dmul>
 800425e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004262:	9e04      	ldr	r6, [sp, #16]
 8004264:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004268:	3501      	adds	r5, #1
 800426a:	4628      	mov	r0, r5
 800426c:	f7fc f8ca 	bl	8000404 <__aeabi_i2d>
 8004270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004274:	f7fc f930 	bl	80004d8 <__aeabi_dmul>
 8004278:	2200      	movs	r2, #0
 800427a:	4b85      	ldr	r3, [pc, #532]	; (8004490 <_dtoa_r+0x618>)
 800427c:	f7fb ff76 	bl	800016c <__adddf3>
 8004280:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004284:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004288:	950b      	str	r5, [sp, #44]	; 0x2c
 800428a:	2e00      	cmp	r6, #0
 800428c:	d15c      	bne.n	8004348 <_dtoa_r+0x4d0>
 800428e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <_dtoa_r+0x61c>)
 8004296:	f7fb ff67 	bl	8000168 <__aeabi_dsub>
 800429a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800429c:	462b      	mov	r3, r5
 800429e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042a2:	f7fc fba9 	bl	80009f8 <__aeabi_dcmpgt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	f040 8281 	bne.w	80047ae <_dtoa_r+0x936>
 80042ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80042b6:	f7fc fb81 	bl	80009bc <__aeabi_dcmplt>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f040 8275 	bne.w	80047aa <_dtoa_r+0x932>
 80042c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80042c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f2c0 814b 	blt.w	8004566 <_dtoa_r+0x6ee>
 80042d0:	f1ba 0f0e 	cmp.w	sl, #14
 80042d4:	f300 8147 	bgt.w	8004566 <_dtoa_r+0x6ee>
 80042d8:	4b69      	ldr	r3, [pc, #420]	; (8004480 <_dtoa_r+0x608>)
 80042da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f280 80d7 	bge.w	800449c <_dtoa_r+0x624>
 80042ee:	f1b8 0f00 	cmp.w	r8, #0
 80042f2:	f300 80d3 	bgt.w	800449c <_dtoa_r+0x624>
 80042f6:	f040 8257 	bne.w	80047a8 <_dtoa_r+0x930>
 80042fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042fe:	2200      	movs	r2, #0
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <_dtoa_r+0x61c>)
 8004302:	f7fc f8e9 	bl	80004d8 <__aeabi_dmul>
 8004306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800430a:	f7fc fb6b 	bl	80009e4 <__aeabi_dcmpge>
 800430e:	4646      	mov	r6, r8
 8004310:	4647      	mov	r7, r8
 8004312:	2800      	cmp	r0, #0
 8004314:	f040 822d 	bne.w	8004772 <_dtoa_r+0x8fa>
 8004318:	9b06      	ldr	r3, [sp, #24]
 800431a:	9a06      	ldr	r2, [sp, #24]
 800431c:	1c5d      	adds	r5, r3, #1
 800431e:	2331      	movs	r3, #49	; 0x31
 8004320:	f10a 0a01 	add.w	sl, sl, #1
 8004324:	7013      	strb	r3, [r2, #0]
 8004326:	e228      	b.n	800477a <_dtoa_r+0x902>
 8004328:	07f2      	lsls	r2, r6, #31
 800432a:	d505      	bpl.n	8004338 <_dtoa_r+0x4c0>
 800432c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004330:	f7fc f8d2 	bl	80004d8 <__aeabi_dmul>
 8004334:	2301      	movs	r3, #1
 8004336:	3501      	adds	r5, #1
 8004338:	1076      	asrs	r6, r6, #1
 800433a:	3708      	adds	r7, #8
 800433c:	e76e      	b.n	800421c <_dtoa_r+0x3a4>
 800433e:	2502      	movs	r5, #2
 8004340:	e771      	b.n	8004226 <_dtoa_r+0x3ae>
 8004342:	4657      	mov	r7, sl
 8004344:	4646      	mov	r6, r8
 8004346:	e790      	b.n	800426a <_dtoa_r+0x3f2>
 8004348:	4b4d      	ldr	r3, [pc, #308]	; (8004480 <_dtoa_r+0x608>)
 800434a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800434e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d048      	beq.n	80043ea <_dtoa_r+0x572>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	2000      	movs	r0, #0
 800435e:	494e      	ldr	r1, [pc, #312]	; (8004498 <_dtoa_r+0x620>)
 8004360:	f7fc f9e4 	bl	800072c <__aeabi_ddiv>
 8004364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004368:	f7fb fefe 	bl	8000168 <__aeabi_dsub>
 800436c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004370:	9d06      	ldr	r5, [sp, #24]
 8004372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004376:	f7fc fb5f 	bl	8000a38 <__aeabi_d2iz>
 800437a:	9011      	str	r0, [sp, #68]	; 0x44
 800437c:	f7fc f842 	bl	8000404 <__aeabi_i2d>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004388:	f7fb feee 	bl	8000168 <__aeabi_dsub>
 800438c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800438e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004392:	3330      	adds	r3, #48	; 0x30
 8004394:	f805 3b01 	strb.w	r3, [r5], #1
 8004398:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800439c:	f7fc fb0e 	bl	80009bc <__aeabi_dcmplt>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d163      	bne.n	800446c <_dtoa_r+0x5f4>
 80043a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043a8:	2000      	movs	r0, #0
 80043aa:	4937      	ldr	r1, [pc, #220]	; (8004488 <_dtoa_r+0x610>)
 80043ac:	f7fb fedc 	bl	8000168 <__aeabi_dsub>
 80043b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043b4:	f7fc fb02 	bl	80009bc <__aeabi_dcmplt>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	f040 80b5 	bne.w	8004528 <_dtoa_r+0x6b0>
 80043be:	9b06      	ldr	r3, [sp, #24]
 80043c0:	1aeb      	subs	r3, r5, r3
 80043c2:	429e      	cmp	r6, r3
 80043c4:	f77f af7c 	ble.w	80042c0 <_dtoa_r+0x448>
 80043c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043cc:	2200      	movs	r2, #0
 80043ce:	4b2f      	ldr	r3, [pc, #188]	; (800448c <_dtoa_r+0x614>)
 80043d0:	f7fc f882 	bl	80004d8 <__aeabi_dmul>
 80043d4:	2200      	movs	r2, #0
 80043d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043de:	4b2b      	ldr	r3, [pc, #172]	; (800448c <_dtoa_r+0x614>)
 80043e0:	f7fc f87a 	bl	80004d8 <__aeabi_dmul>
 80043e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e8:	e7c3      	b.n	8004372 <_dtoa_r+0x4fa>
 80043ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043ee:	f7fc f873 	bl	80004d8 <__aeabi_dmul>
 80043f2:	9b06      	ldr	r3, [sp, #24]
 80043f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80043f8:	199d      	adds	r5, r3, r6
 80043fa:	461e      	mov	r6, r3
 80043fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004400:	f7fc fb1a 	bl	8000a38 <__aeabi_d2iz>
 8004404:	9011      	str	r0, [sp, #68]	; 0x44
 8004406:	f7fb fffd 	bl	8000404 <__aeabi_i2d>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004412:	f7fb fea9 	bl	8000168 <__aeabi_dsub>
 8004416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800441c:	3330      	adds	r3, #48	; 0x30
 800441e:	f806 3b01 	strb.w	r3, [r6], #1
 8004422:	42ae      	cmp	r6, r5
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	d124      	bne.n	8004474 <_dtoa_r+0x5fc>
 800442a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <_dtoa_r+0x620>)
 8004430:	f7fb fe9c 	bl	800016c <__adddf3>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800443c:	f7fc fadc 	bl	80009f8 <__aeabi_dcmpgt>
 8004440:	2800      	cmp	r0, #0
 8004442:	d171      	bne.n	8004528 <_dtoa_r+0x6b0>
 8004444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004448:	2000      	movs	r0, #0
 800444a:	4913      	ldr	r1, [pc, #76]	; (8004498 <_dtoa_r+0x620>)
 800444c:	f7fb fe8c 	bl	8000168 <__aeabi_dsub>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004458:	f7fc fab0 	bl	80009bc <__aeabi_dcmplt>
 800445c:	2800      	cmp	r0, #0
 800445e:	f43f af2f 	beq.w	80042c0 <_dtoa_r+0x448>
 8004462:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004466:	1e6a      	subs	r2, r5, #1
 8004468:	2b30      	cmp	r3, #48	; 0x30
 800446a:	d001      	beq.n	8004470 <_dtoa_r+0x5f8>
 800446c:	46ba      	mov	sl, r7
 800446e:	e04a      	b.n	8004506 <_dtoa_r+0x68e>
 8004470:	4615      	mov	r5, r2
 8004472:	e7f6      	b.n	8004462 <_dtoa_r+0x5ea>
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <_dtoa_r+0x614>)
 8004476:	f7fc f82f 	bl	80004d8 <__aeabi_dmul>
 800447a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447e:	e7bd      	b.n	80043fc <_dtoa_r+0x584>
 8004480:	08005b28 	.word	0x08005b28
 8004484:	08005b00 	.word	0x08005b00
 8004488:	3ff00000 	.word	0x3ff00000
 800448c:	40240000 	.word	0x40240000
 8004490:	401c0000 	.word	0x401c0000
 8004494:	40140000 	.word	0x40140000
 8004498:	3fe00000 	.word	0x3fe00000
 800449c:	9d06      	ldr	r5, [sp, #24]
 800449e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80044a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044a6:	4630      	mov	r0, r6
 80044a8:	4639      	mov	r1, r7
 80044aa:	f7fc f93f 	bl	800072c <__aeabi_ddiv>
 80044ae:	f7fc fac3 	bl	8000a38 <__aeabi_d2iz>
 80044b2:	4681      	mov	r9, r0
 80044b4:	f7fb ffa6 	bl	8000404 <__aeabi_i2d>
 80044b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044bc:	f7fc f80c 	bl	80004d8 <__aeabi_dmul>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f7fb fe4e 	bl	8000168 <__aeabi_dsub>
 80044cc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80044d0:	f805 6b01 	strb.w	r6, [r5], #1
 80044d4:	9e06      	ldr	r6, [sp, #24]
 80044d6:	4602      	mov	r2, r0
 80044d8:	1bae      	subs	r6, r5, r6
 80044da:	45b0      	cmp	r8, r6
 80044dc:	460b      	mov	r3, r1
 80044de:	d135      	bne.n	800454c <_dtoa_r+0x6d4>
 80044e0:	f7fb fe44 	bl	800016c <__adddf3>
 80044e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044e8:	4606      	mov	r6, r0
 80044ea:	460f      	mov	r7, r1
 80044ec:	f7fc fa84 	bl	80009f8 <__aeabi_dcmpgt>
 80044f0:	b9c8      	cbnz	r0, 8004526 <_dtoa_r+0x6ae>
 80044f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044f6:	4630      	mov	r0, r6
 80044f8:	4639      	mov	r1, r7
 80044fa:	f7fc fa55 	bl	80009a8 <__aeabi_dcmpeq>
 80044fe:	b110      	cbz	r0, 8004506 <_dtoa_r+0x68e>
 8004500:	f019 0f01 	tst.w	r9, #1
 8004504:	d10f      	bne.n	8004526 <_dtoa_r+0x6ae>
 8004506:	4659      	mov	r1, fp
 8004508:	4620      	mov	r0, r4
 800450a:	f000 fc9f 	bl	8004e4c <_Bfree>
 800450e:	2300      	movs	r3, #0
 8004510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004512:	702b      	strb	r3, [r5, #0]
 8004514:	f10a 0301 	add.w	r3, sl, #1
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800451c:	2b00      	cmp	r3, #0
 800451e:	f43f acf3 	beq.w	8003f08 <_dtoa_r+0x90>
 8004522:	601d      	str	r5, [r3, #0]
 8004524:	e4f0      	b.n	8003f08 <_dtoa_r+0x90>
 8004526:	4657      	mov	r7, sl
 8004528:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800452c:	1e6b      	subs	r3, r5, #1
 800452e:	2a39      	cmp	r2, #57	; 0x39
 8004530:	d106      	bne.n	8004540 <_dtoa_r+0x6c8>
 8004532:	9a06      	ldr	r2, [sp, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <_dtoa_r+0x6d0>
 8004538:	2330      	movs	r3, #48	; 0x30
 800453a:	7013      	strb	r3, [r2, #0]
 800453c:	4613      	mov	r3, r2
 800453e:	3701      	adds	r7, #1
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	3201      	adds	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e791      	b.n	800446c <_dtoa_r+0x5f4>
 8004548:	461d      	mov	r5, r3
 800454a:	e7ed      	b.n	8004528 <_dtoa_r+0x6b0>
 800454c:	2200      	movs	r2, #0
 800454e:	4b99      	ldr	r3, [pc, #612]	; (80047b4 <_dtoa_r+0x93c>)
 8004550:	f7fb ffc2 	bl	80004d8 <__aeabi_dmul>
 8004554:	2200      	movs	r2, #0
 8004556:	2300      	movs	r3, #0
 8004558:	4606      	mov	r6, r0
 800455a:	460f      	mov	r7, r1
 800455c:	f7fc fa24 	bl	80009a8 <__aeabi_dcmpeq>
 8004560:	2800      	cmp	r0, #0
 8004562:	d09e      	beq.n	80044a2 <_dtoa_r+0x62a>
 8004564:	e7cf      	b.n	8004506 <_dtoa_r+0x68e>
 8004566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004568:	2a00      	cmp	r2, #0
 800456a:	f000 8088 	beq.w	800467e <_dtoa_r+0x806>
 800456e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004570:	2a01      	cmp	r2, #1
 8004572:	dc6d      	bgt.n	8004650 <_dtoa_r+0x7d8>
 8004574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004576:	2a00      	cmp	r2, #0
 8004578:	d066      	beq.n	8004648 <_dtoa_r+0x7d0>
 800457a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800457e:	464d      	mov	r5, r9
 8004580:	9e08      	ldr	r6, [sp, #32]
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	2101      	movs	r1, #1
 8004586:	441a      	add	r2, r3
 8004588:	4620      	mov	r0, r4
 800458a:	4499      	add	r9, r3
 800458c:	9207      	str	r2, [sp, #28]
 800458e:	f000 fcfd 	bl	8004f8c <__i2b>
 8004592:	4607      	mov	r7, r0
 8004594:	2d00      	cmp	r5, #0
 8004596:	dd0b      	ble.n	80045b0 <_dtoa_r+0x738>
 8004598:	9b07      	ldr	r3, [sp, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	dd08      	ble.n	80045b0 <_dtoa_r+0x738>
 800459e:	42ab      	cmp	r3, r5
 80045a0:	bfa8      	it	ge
 80045a2:	462b      	movge	r3, r5
 80045a4:	9a07      	ldr	r2, [sp, #28]
 80045a6:	eba9 0903 	sub.w	r9, r9, r3
 80045aa:	1aed      	subs	r5, r5, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	9307      	str	r3, [sp, #28]
 80045b0:	9b08      	ldr	r3, [sp, #32]
 80045b2:	b1eb      	cbz	r3, 80045f0 <_dtoa_r+0x778>
 80045b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d065      	beq.n	8004686 <_dtoa_r+0x80e>
 80045ba:	b18e      	cbz	r6, 80045e0 <_dtoa_r+0x768>
 80045bc:	4639      	mov	r1, r7
 80045be:	4632      	mov	r2, r6
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 fd81 	bl	80050c8 <__pow5mult>
 80045c6:	465a      	mov	r2, fp
 80045c8:	4601      	mov	r1, r0
 80045ca:	4607      	mov	r7, r0
 80045cc:	4620      	mov	r0, r4
 80045ce:	f000 fce6 	bl	8004f9e <__multiply>
 80045d2:	4659      	mov	r1, fp
 80045d4:	900a      	str	r0, [sp, #40]	; 0x28
 80045d6:	4620      	mov	r0, r4
 80045d8:	f000 fc38 	bl	8004e4c <_Bfree>
 80045dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045de:	469b      	mov	fp, r3
 80045e0:	9b08      	ldr	r3, [sp, #32]
 80045e2:	1b9a      	subs	r2, r3, r6
 80045e4:	d004      	beq.n	80045f0 <_dtoa_r+0x778>
 80045e6:	4659      	mov	r1, fp
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 fd6d 	bl	80050c8 <__pow5mult>
 80045ee:	4683      	mov	fp, r0
 80045f0:	2101      	movs	r1, #1
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 fcca 	bl	8004f8c <__i2b>
 80045f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045fa:	4606      	mov	r6, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 81c6 	beq.w	800498e <_dtoa_r+0xb16>
 8004602:	461a      	mov	r2, r3
 8004604:	4601      	mov	r1, r0
 8004606:	4620      	mov	r0, r4
 8004608:	f000 fd5e 	bl	80050c8 <__pow5mult>
 800460c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800460e:	4606      	mov	r6, r0
 8004610:	2b01      	cmp	r3, #1
 8004612:	dc3e      	bgt.n	8004692 <_dtoa_r+0x81a>
 8004614:	9b02      	ldr	r3, [sp, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d137      	bne.n	800468a <_dtoa_r+0x812>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004620:	2b00      	cmp	r3, #0
 8004622:	d134      	bne.n	800468e <_dtoa_r+0x816>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800462a:	0d1b      	lsrs	r3, r3, #20
 800462c:	051b      	lsls	r3, r3, #20
 800462e:	b12b      	cbz	r3, 800463c <_dtoa_r+0x7c4>
 8004630:	9b07      	ldr	r3, [sp, #28]
 8004632:	f109 0901 	add.w	r9, r9, #1
 8004636:	3301      	adds	r3, #1
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	2301      	movs	r3, #1
 800463c:	9308      	str	r3, [sp, #32]
 800463e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004640:	2b00      	cmp	r3, #0
 8004642:	d128      	bne.n	8004696 <_dtoa_r+0x81e>
 8004644:	2001      	movs	r0, #1
 8004646:	e02e      	b.n	80046a6 <_dtoa_r+0x82e>
 8004648:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800464a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800464e:	e796      	b.n	800457e <_dtoa_r+0x706>
 8004650:	9b08      	ldr	r3, [sp, #32]
 8004652:	f108 36ff 	add.w	r6, r8, #4294967295
 8004656:	42b3      	cmp	r3, r6
 8004658:	bfb7      	itett	lt
 800465a:	9b08      	ldrlt	r3, [sp, #32]
 800465c:	1b9e      	subge	r6, r3, r6
 800465e:	1af2      	sublt	r2, r6, r3
 8004660:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004662:	bfbf      	itttt	lt
 8004664:	9608      	strlt	r6, [sp, #32]
 8004666:	189b      	addlt	r3, r3, r2
 8004668:	930c      	strlt	r3, [sp, #48]	; 0x30
 800466a:	2600      	movlt	r6, #0
 800466c:	f1b8 0f00 	cmp.w	r8, #0
 8004670:	bfb9      	ittee	lt
 8004672:	eba9 0508 	sublt.w	r5, r9, r8
 8004676:	2300      	movlt	r3, #0
 8004678:	464d      	movge	r5, r9
 800467a:	4643      	movge	r3, r8
 800467c:	e781      	b.n	8004582 <_dtoa_r+0x70a>
 800467e:	9e08      	ldr	r6, [sp, #32]
 8004680:	464d      	mov	r5, r9
 8004682:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004684:	e786      	b.n	8004594 <_dtoa_r+0x71c>
 8004686:	9a08      	ldr	r2, [sp, #32]
 8004688:	e7ad      	b.n	80045e6 <_dtoa_r+0x76e>
 800468a:	2300      	movs	r3, #0
 800468c:	e7d6      	b.n	800463c <_dtoa_r+0x7c4>
 800468e:	9b02      	ldr	r3, [sp, #8]
 8004690:	e7d4      	b.n	800463c <_dtoa_r+0x7c4>
 8004692:	2300      	movs	r3, #0
 8004694:	9308      	str	r3, [sp, #32]
 8004696:	6933      	ldr	r3, [r6, #16]
 8004698:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800469c:	6918      	ldr	r0, [r3, #16]
 800469e:	f000 fc27 	bl	8004ef0 <__hi0bits>
 80046a2:	f1c0 0020 	rsb	r0, r0, #32
 80046a6:	9b07      	ldr	r3, [sp, #28]
 80046a8:	4418      	add	r0, r3
 80046aa:	f010 001f 	ands.w	r0, r0, #31
 80046ae:	d047      	beq.n	8004740 <_dtoa_r+0x8c8>
 80046b0:	f1c0 0320 	rsb	r3, r0, #32
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	dd3b      	ble.n	8004730 <_dtoa_r+0x8b8>
 80046b8:	9b07      	ldr	r3, [sp, #28]
 80046ba:	f1c0 001c 	rsb	r0, r0, #28
 80046be:	4481      	add	r9, r0
 80046c0:	4405      	add	r5, r0
 80046c2:	4403      	add	r3, r0
 80046c4:	9307      	str	r3, [sp, #28]
 80046c6:	f1b9 0f00 	cmp.w	r9, #0
 80046ca:	dd05      	ble.n	80046d8 <_dtoa_r+0x860>
 80046cc:	4659      	mov	r1, fp
 80046ce:	464a      	mov	r2, r9
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 fd47 	bl	8005164 <__lshift>
 80046d6:	4683      	mov	fp, r0
 80046d8:	9b07      	ldr	r3, [sp, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dd05      	ble.n	80046ea <_dtoa_r+0x872>
 80046de:	4631      	mov	r1, r6
 80046e0:	461a      	mov	r2, r3
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 fd3e 	bl	8005164 <__lshift>
 80046e8:	4606      	mov	r6, r0
 80046ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ec:	b353      	cbz	r3, 8004744 <_dtoa_r+0x8cc>
 80046ee:	4631      	mov	r1, r6
 80046f0:	4658      	mov	r0, fp
 80046f2:	f000 fd8b 	bl	800520c <__mcmp>
 80046f6:	2800      	cmp	r0, #0
 80046f8:	da24      	bge.n	8004744 <_dtoa_r+0x8cc>
 80046fa:	2300      	movs	r3, #0
 80046fc:	4659      	mov	r1, fp
 80046fe:	220a      	movs	r2, #10
 8004700:	4620      	mov	r0, r4
 8004702:	f000 fbba 	bl	8004e7a <__multadd>
 8004706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004708:	f10a 3aff 	add.w	sl, sl, #4294967295
 800470c:	4683      	mov	fp, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8144 	beq.w	800499c <_dtoa_r+0xb24>
 8004714:	2300      	movs	r3, #0
 8004716:	4639      	mov	r1, r7
 8004718:	220a      	movs	r2, #10
 800471a:	4620      	mov	r0, r4
 800471c:	f000 fbad 	bl	8004e7a <__multadd>
 8004720:	9b04      	ldr	r3, [sp, #16]
 8004722:	4607      	mov	r7, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc4d      	bgt.n	80047c4 <_dtoa_r+0x94c>
 8004728:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800472a:	2b02      	cmp	r3, #2
 800472c:	dd4a      	ble.n	80047c4 <_dtoa_r+0x94c>
 800472e:	e011      	b.n	8004754 <_dtoa_r+0x8dc>
 8004730:	d0c9      	beq.n	80046c6 <_dtoa_r+0x84e>
 8004732:	9a07      	ldr	r2, [sp, #28]
 8004734:	331c      	adds	r3, #28
 8004736:	441a      	add	r2, r3
 8004738:	4499      	add	r9, r3
 800473a:	441d      	add	r5, r3
 800473c:	4613      	mov	r3, r2
 800473e:	e7c1      	b.n	80046c4 <_dtoa_r+0x84c>
 8004740:	4603      	mov	r3, r0
 8004742:	e7f6      	b.n	8004732 <_dtoa_r+0x8ba>
 8004744:	f1b8 0f00 	cmp.w	r8, #0
 8004748:	dc36      	bgt.n	80047b8 <_dtoa_r+0x940>
 800474a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800474c:	2b02      	cmp	r3, #2
 800474e:	dd33      	ble.n	80047b8 <_dtoa_r+0x940>
 8004750:	f8cd 8010 	str.w	r8, [sp, #16]
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	b963      	cbnz	r3, 8004772 <_dtoa_r+0x8fa>
 8004758:	4631      	mov	r1, r6
 800475a:	2205      	movs	r2, #5
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fb8c 	bl	8004e7a <__multadd>
 8004762:	4601      	mov	r1, r0
 8004764:	4606      	mov	r6, r0
 8004766:	4658      	mov	r0, fp
 8004768:	f000 fd50 	bl	800520c <__mcmp>
 800476c:	2800      	cmp	r0, #0
 800476e:	f73f add3 	bgt.w	8004318 <_dtoa_r+0x4a0>
 8004772:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004774:	9d06      	ldr	r5, [sp, #24]
 8004776:	ea6f 0a03 	mvn.w	sl, r3
 800477a:	f04f 0900 	mov.w	r9, #0
 800477e:	4631      	mov	r1, r6
 8004780:	4620      	mov	r0, r4
 8004782:	f000 fb63 	bl	8004e4c <_Bfree>
 8004786:	2f00      	cmp	r7, #0
 8004788:	f43f aebd 	beq.w	8004506 <_dtoa_r+0x68e>
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	d005      	beq.n	800479e <_dtoa_r+0x926>
 8004792:	45b9      	cmp	r9, r7
 8004794:	d003      	beq.n	800479e <_dtoa_r+0x926>
 8004796:	4649      	mov	r1, r9
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fb57 	bl	8004e4c <_Bfree>
 800479e:	4639      	mov	r1, r7
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 fb53 	bl	8004e4c <_Bfree>
 80047a6:	e6ae      	b.n	8004506 <_dtoa_r+0x68e>
 80047a8:	2600      	movs	r6, #0
 80047aa:	4637      	mov	r7, r6
 80047ac:	e7e1      	b.n	8004772 <_dtoa_r+0x8fa>
 80047ae:	46ba      	mov	sl, r7
 80047b0:	4637      	mov	r7, r6
 80047b2:	e5b1      	b.n	8004318 <_dtoa_r+0x4a0>
 80047b4:	40240000 	.word	0x40240000
 80047b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80f3 	beq.w	80049aa <_dtoa_r+0xb32>
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	dd05      	ble.n	80047d4 <_dtoa_r+0x95c>
 80047c8:	4639      	mov	r1, r7
 80047ca:	462a      	mov	r2, r5
 80047cc:	4620      	mov	r0, r4
 80047ce:	f000 fcc9 	bl	8005164 <__lshift>
 80047d2:	4607      	mov	r7, r0
 80047d4:	9b08      	ldr	r3, [sp, #32]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d04c      	beq.n	8004874 <_dtoa_r+0x9fc>
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4620      	mov	r0, r4
 80047de:	f000 fb01 	bl	8004de4 <_Balloc>
 80047e2:	4605      	mov	r5, r0
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	f107 010c 	add.w	r1, r7, #12
 80047ea:	3202      	adds	r2, #2
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	300c      	adds	r0, #12
 80047f0:	f7fe fd00 	bl	80031f4 <memcpy>
 80047f4:	2201      	movs	r2, #1
 80047f6:	4629      	mov	r1, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fcb3 	bl	8005164 <__lshift>
 80047fe:	46b9      	mov	r9, r7
 8004800:	4607      	mov	r7, r0
 8004802:	9b06      	ldr	r3, [sp, #24]
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	9308      	str	r3, [sp, #32]
 800480e:	4631      	mov	r1, r6
 8004810:	4658      	mov	r0, fp
 8004812:	f7ff faa1 	bl	8003d58 <quorem>
 8004816:	4649      	mov	r1, r9
 8004818:	4605      	mov	r5, r0
 800481a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800481e:	4658      	mov	r0, fp
 8004820:	f000 fcf4 	bl	800520c <__mcmp>
 8004824:	463a      	mov	r2, r7
 8004826:	9002      	str	r0, [sp, #8]
 8004828:	4631      	mov	r1, r6
 800482a:	4620      	mov	r0, r4
 800482c:	f000 fd08 	bl	8005240 <__mdiff>
 8004830:	68c3      	ldr	r3, [r0, #12]
 8004832:	4602      	mov	r2, r0
 8004834:	bb03      	cbnz	r3, 8004878 <_dtoa_r+0xa00>
 8004836:	4601      	mov	r1, r0
 8004838:	9009      	str	r0, [sp, #36]	; 0x24
 800483a:	4658      	mov	r0, fp
 800483c:	f000 fce6 	bl	800520c <__mcmp>
 8004840:	4603      	mov	r3, r0
 8004842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004844:	4611      	mov	r1, r2
 8004846:	4620      	mov	r0, r4
 8004848:	9309      	str	r3, [sp, #36]	; 0x24
 800484a:	f000 faff 	bl	8004e4c <_Bfree>
 800484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004850:	b9a3      	cbnz	r3, 800487c <_dtoa_r+0xa04>
 8004852:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004854:	b992      	cbnz	r2, 800487c <_dtoa_r+0xa04>
 8004856:	9a08      	ldr	r2, [sp, #32]
 8004858:	b982      	cbnz	r2, 800487c <_dtoa_r+0xa04>
 800485a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800485e:	d029      	beq.n	80048b4 <_dtoa_r+0xa3c>
 8004860:	9b02      	ldr	r3, [sp, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	dd01      	ble.n	800486a <_dtoa_r+0x9f2>
 8004866:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800486a:	9b07      	ldr	r3, [sp, #28]
 800486c:	1c5d      	adds	r5, r3, #1
 800486e:	f883 8000 	strb.w	r8, [r3]
 8004872:	e784      	b.n	800477e <_dtoa_r+0x906>
 8004874:	4638      	mov	r0, r7
 8004876:	e7c2      	b.n	80047fe <_dtoa_r+0x986>
 8004878:	2301      	movs	r3, #1
 800487a:	e7e3      	b.n	8004844 <_dtoa_r+0x9cc>
 800487c:	9a02      	ldr	r2, [sp, #8]
 800487e:	2a00      	cmp	r2, #0
 8004880:	db04      	blt.n	800488c <_dtoa_r+0xa14>
 8004882:	d123      	bne.n	80048cc <_dtoa_r+0xa54>
 8004884:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004886:	bb0a      	cbnz	r2, 80048cc <_dtoa_r+0xa54>
 8004888:	9a08      	ldr	r2, [sp, #32]
 800488a:	b9fa      	cbnz	r2, 80048cc <_dtoa_r+0xa54>
 800488c:	2b00      	cmp	r3, #0
 800488e:	ddec      	ble.n	800486a <_dtoa_r+0x9f2>
 8004890:	4659      	mov	r1, fp
 8004892:	2201      	movs	r2, #1
 8004894:	4620      	mov	r0, r4
 8004896:	f000 fc65 	bl	8005164 <__lshift>
 800489a:	4631      	mov	r1, r6
 800489c:	4683      	mov	fp, r0
 800489e:	f000 fcb5 	bl	800520c <__mcmp>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	dc03      	bgt.n	80048ae <_dtoa_r+0xa36>
 80048a6:	d1e0      	bne.n	800486a <_dtoa_r+0x9f2>
 80048a8:	f018 0f01 	tst.w	r8, #1
 80048ac:	d0dd      	beq.n	800486a <_dtoa_r+0x9f2>
 80048ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048b2:	d1d8      	bne.n	8004866 <_dtoa_r+0x9ee>
 80048b4:	9b07      	ldr	r3, [sp, #28]
 80048b6:	9a07      	ldr	r2, [sp, #28]
 80048b8:	1c5d      	adds	r5, r3, #1
 80048ba:	2339      	movs	r3, #57	; 0x39
 80048bc:	7013      	strb	r3, [r2, #0]
 80048be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048c2:	1e6a      	subs	r2, r5, #1
 80048c4:	2b39      	cmp	r3, #57	; 0x39
 80048c6:	d04d      	beq.n	8004964 <_dtoa_r+0xaec>
 80048c8:	3301      	adds	r3, #1
 80048ca:	e052      	b.n	8004972 <_dtoa_r+0xafa>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f102 0501 	add.w	r5, r2, #1
 80048d4:	dd06      	ble.n	80048e4 <_dtoa_r+0xa6c>
 80048d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80048da:	d0eb      	beq.n	80048b4 <_dtoa_r+0xa3c>
 80048dc:	f108 0801 	add.w	r8, r8, #1
 80048e0:	9b07      	ldr	r3, [sp, #28]
 80048e2:	e7c4      	b.n	800486e <_dtoa_r+0x9f6>
 80048e4:	9b06      	ldr	r3, [sp, #24]
 80048e6:	9a04      	ldr	r2, [sp, #16]
 80048e8:	1aeb      	subs	r3, r5, r3
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f805 8c01 	strb.w	r8, [r5, #-1]
 80048f0:	d021      	beq.n	8004936 <_dtoa_r+0xabe>
 80048f2:	4659      	mov	r1, fp
 80048f4:	2300      	movs	r3, #0
 80048f6:	220a      	movs	r2, #10
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fabe 	bl	8004e7a <__multadd>
 80048fe:	45b9      	cmp	r9, r7
 8004900:	4683      	mov	fp, r0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	f04f 020a 	mov.w	r2, #10
 800490a:	4649      	mov	r1, r9
 800490c:	4620      	mov	r0, r4
 800490e:	d105      	bne.n	800491c <_dtoa_r+0xaa4>
 8004910:	f000 fab3 	bl	8004e7a <__multadd>
 8004914:	4681      	mov	r9, r0
 8004916:	4607      	mov	r7, r0
 8004918:	9507      	str	r5, [sp, #28]
 800491a:	e778      	b.n	800480e <_dtoa_r+0x996>
 800491c:	f000 faad 	bl	8004e7a <__multadd>
 8004920:	4639      	mov	r1, r7
 8004922:	4681      	mov	r9, r0
 8004924:	2300      	movs	r3, #0
 8004926:	220a      	movs	r2, #10
 8004928:	4620      	mov	r0, r4
 800492a:	f000 faa6 	bl	8004e7a <__multadd>
 800492e:	4607      	mov	r7, r0
 8004930:	e7f2      	b.n	8004918 <_dtoa_r+0xaa0>
 8004932:	f04f 0900 	mov.w	r9, #0
 8004936:	4659      	mov	r1, fp
 8004938:	2201      	movs	r2, #1
 800493a:	4620      	mov	r0, r4
 800493c:	f000 fc12 	bl	8005164 <__lshift>
 8004940:	4631      	mov	r1, r6
 8004942:	4683      	mov	fp, r0
 8004944:	f000 fc62 	bl	800520c <__mcmp>
 8004948:	2800      	cmp	r0, #0
 800494a:	dcb8      	bgt.n	80048be <_dtoa_r+0xa46>
 800494c:	d102      	bne.n	8004954 <_dtoa_r+0xadc>
 800494e:	f018 0f01 	tst.w	r8, #1
 8004952:	d1b4      	bne.n	80048be <_dtoa_r+0xa46>
 8004954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004958:	1e6a      	subs	r2, r5, #1
 800495a:	2b30      	cmp	r3, #48	; 0x30
 800495c:	f47f af0f 	bne.w	800477e <_dtoa_r+0x906>
 8004960:	4615      	mov	r5, r2
 8004962:	e7f7      	b.n	8004954 <_dtoa_r+0xadc>
 8004964:	9b06      	ldr	r3, [sp, #24]
 8004966:	4293      	cmp	r3, r2
 8004968:	d105      	bne.n	8004976 <_dtoa_r+0xafe>
 800496a:	2331      	movs	r3, #49	; 0x31
 800496c:	9a06      	ldr	r2, [sp, #24]
 800496e:	f10a 0a01 	add.w	sl, sl, #1
 8004972:	7013      	strb	r3, [r2, #0]
 8004974:	e703      	b.n	800477e <_dtoa_r+0x906>
 8004976:	4615      	mov	r5, r2
 8004978:	e7a1      	b.n	80048be <_dtoa_r+0xa46>
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <_dtoa_r+0xb60>)
 800497c:	f7ff bae1 	b.w	8003f42 <_dtoa_r+0xca>
 8004980:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f aabb 	bne.w	8003efe <_dtoa_r+0x86>
 8004988:	4b14      	ldr	r3, [pc, #80]	; (80049dc <_dtoa_r+0xb64>)
 800498a:	f7ff bada 	b.w	8003f42 <_dtoa_r+0xca>
 800498e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004990:	2b01      	cmp	r3, #1
 8004992:	f77f ae3f 	ble.w	8004614 <_dtoa_r+0x79c>
 8004996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004998:	9308      	str	r3, [sp, #32]
 800499a:	e653      	b.n	8004644 <_dtoa_r+0x7cc>
 800499c:	9b04      	ldr	r3, [sp, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dc03      	bgt.n	80049aa <_dtoa_r+0xb32>
 80049a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f73f aed5 	bgt.w	8004754 <_dtoa_r+0x8dc>
 80049aa:	9d06      	ldr	r5, [sp, #24]
 80049ac:	4631      	mov	r1, r6
 80049ae:	4658      	mov	r0, fp
 80049b0:	f7ff f9d2 	bl	8003d58 <quorem>
 80049b4:	9b06      	ldr	r3, [sp, #24]
 80049b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80049ba:	f805 8b01 	strb.w	r8, [r5], #1
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	1aeb      	subs	r3, r5, r3
 80049c2:	429a      	cmp	r2, r3
 80049c4:	ddb5      	ble.n	8004932 <_dtoa_r+0xaba>
 80049c6:	4659      	mov	r1, fp
 80049c8:	2300      	movs	r3, #0
 80049ca:	220a      	movs	r2, #10
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fa54 	bl	8004e7a <__multadd>
 80049d2:	4683      	mov	fp, r0
 80049d4:	e7ea      	b.n	80049ac <_dtoa_r+0xb34>
 80049d6:	bf00      	nop
 80049d8:	08005a68 	.word	0x08005a68
 80049dc:	08005a8c 	.word	0x08005a8c

080049e0 <__sflush_r>:
 80049e0:	898a      	ldrh	r2, [r1, #12]
 80049e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e6:	4605      	mov	r5, r0
 80049e8:	0710      	lsls	r0, r2, #28
 80049ea:	460c      	mov	r4, r1
 80049ec:	d458      	bmi.n	8004aa0 <__sflush_r+0xc0>
 80049ee:	684b      	ldr	r3, [r1, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dc05      	bgt.n	8004a00 <__sflush_r+0x20>
 80049f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc02      	bgt.n	8004a00 <__sflush_r+0x20>
 80049fa:	2000      	movs	r0, #0
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d0f9      	beq.n	80049fa <__sflush_r+0x1a>
 8004a06:	2300      	movs	r3, #0
 8004a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a0c:	682f      	ldr	r7, [r5, #0]
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	d032      	beq.n	8004a7a <__sflush_r+0x9a>
 8004a14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	075a      	lsls	r2, r3, #29
 8004a1a:	d505      	bpl.n	8004a28 <__sflush_r+0x48>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	1ac0      	subs	r0, r0, r3
 8004a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a22:	b10b      	cbz	r3, 8004a28 <__sflush_r+0x48>
 8004a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a26:	1ac0      	subs	r0, r0, r3
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	4628      	mov	r0, r5
 8004a32:	47b0      	blx	r6
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	d106      	bne.n	8004a48 <__sflush_r+0x68>
 8004a3a:	6829      	ldr	r1, [r5, #0]
 8004a3c:	291d      	cmp	r1, #29
 8004a3e:	d848      	bhi.n	8004ad2 <__sflush_r+0xf2>
 8004a40:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <__sflush_r+0x108>)
 8004a42:	40ca      	lsrs	r2, r1
 8004a44:	07d6      	lsls	r6, r2, #31
 8004a46:	d544      	bpl.n	8004ad2 <__sflush_r+0xf2>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	6062      	str	r2, [r4, #4]
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	04d9      	lsls	r1, r3, #19
 8004a50:	6022      	str	r2, [r4, #0]
 8004a52:	d504      	bpl.n	8004a5e <__sflush_r+0x7e>
 8004a54:	1c42      	adds	r2, r0, #1
 8004a56:	d101      	bne.n	8004a5c <__sflush_r+0x7c>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b903      	cbnz	r3, 8004a5e <__sflush_r+0x7e>
 8004a5c:	6560      	str	r0, [r4, #84]	; 0x54
 8004a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a60:	602f      	str	r7, [r5, #0]
 8004a62:	2900      	cmp	r1, #0
 8004a64:	d0c9      	beq.n	80049fa <__sflush_r+0x1a>
 8004a66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	d002      	beq.n	8004a74 <__sflush_r+0x94>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 fca2 	bl	80053b8 <_free_r>
 8004a74:	2000      	movs	r0, #0
 8004a76:	6360      	str	r0, [r4, #52]	; 0x34
 8004a78:	e7c0      	b.n	80049fc <__sflush_r+0x1c>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	47b0      	blx	r6
 8004a80:	1c41      	adds	r1, r0, #1
 8004a82:	d1c8      	bne.n	8004a16 <__sflush_r+0x36>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0c5      	beq.n	8004a16 <__sflush_r+0x36>
 8004a8a:	2b1d      	cmp	r3, #29
 8004a8c:	d001      	beq.n	8004a92 <__sflush_r+0xb2>
 8004a8e:	2b16      	cmp	r3, #22
 8004a90:	d101      	bne.n	8004a96 <__sflush_r+0xb6>
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	e7b1      	b.n	80049fa <__sflush_r+0x1a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	e7ad      	b.n	80049fc <__sflush_r+0x1c>
 8004aa0:	690f      	ldr	r7, [r1, #16]
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	d0a9      	beq.n	80049fa <__sflush_r+0x1a>
 8004aa6:	0793      	lsls	r3, r2, #30
 8004aa8:	bf18      	it	ne
 8004aaa:	2300      	movne	r3, #0
 8004aac:	680e      	ldr	r6, [r1, #0]
 8004aae:	bf08      	it	eq
 8004ab0:	694b      	ldreq	r3, [r1, #20]
 8004ab2:	eba6 0807 	sub.w	r8, r6, r7
 8004ab6:	600f      	str	r7, [r1, #0]
 8004ab8:	608b      	str	r3, [r1, #8]
 8004aba:	f1b8 0f00 	cmp.w	r8, #0
 8004abe:	dd9c      	ble.n	80049fa <__sflush_r+0x1a>
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	6a21      	ldr	r1, [r4, #32]
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004aca:	47b0      	blx	r6
 8004acc:	2800      	cmp	r0, #0
 8004ace:	dc06      	bgt.n	8004ade <__sflush_r+0xfe>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	e78e      	b.n	80049fc <__sflush_r+0x1c>
 8004ade:	4407      	add	r7, r0
 8004ae0:	eba8 0800 	sub.w	r8, r8, r0
 8004ae4:	e7e9      	b.n	8004aba <__sflush_r+0xda>
 8004ae6:	bf00      	nop
 8004ae8:	20400001 	.word	0x20400001

08004aec <_fflush_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	690b      	ldr	r3, [r1, #16]
 8004af0:	4605      	mov	r5, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b1db      	cbz	r3, 8004b2e <_fflush_r+0x42>
 8004af6:	b118      	cbz	r0, 8004b00 <_fflush_r+0x14>
 8004af8:	6983      	ldr	r3, [r0, #24]
 8004afa:	b90b      	cbnz	r3, 8004b00 <_fflush_r+0x14>
 8004afc:	f000 f860 	bl	8004bc0 <__sinit>
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <_fflush_r+0x48>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	d109      	bne.n	8004b1a <_fflush_r+0x2e>
 8004b06:	686c      	ldr	r4, [r5, #4]
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	b17b      	cbz	r3, 8004b2e <_fflush_r+0x42>
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b16:	f7ff bf63 	b.w	80049e0 <__sflush_r>
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <_fflush_r+0x4c>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d101      	bne.n	8004b24 <_fflush_r+0x38>
 8004b20:	68ac      	ldr	r4, [r5, #8]
 8004b22:	e7f1      	b.n	8004b08 <_fflush_r+0x1c>
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <_fflush_r+0x50>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68ec      	ldreq	r4, [r5, #12]
 8004b2c:	e7ec      	b.n	8004b08 <_fflush_r+0x1c>
 8004b2e:	2000      	movs	r0, #0
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	08005abc 	.word	0x08005abc
 8004b38:	08005adc 	.word	0x08005adc
 8004b3c:	08005a9c 	.word	0x08005a9c

08004b40 <std>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	e9c0 3300 	strd	r3, r3, [r0]
 8004b4a:	6083      	str	r3, [r0, #8]
 8004b4c:	8181      	strh	r1, [r0, #12]
 8004b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004b50:	81c2      	strh	r2, [r0, #14]
 8004b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b56:	6183      	str	r3, [r0, #24]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	305c      	adds	r0, #92	; 0x5c
 8004b5e:	f7fe fb54 	bl	800320a <memset>
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <std+0x38>)
 8004b64:	6224      	str	r4, [r4, #32]
 8004b66:	6263      	str	r3, [r4, #36]	; 0x24
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <std+0x3c>)
 8004b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <std+0x40>)
 8004b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <std+0x44>)
 8004b72:	6323      	str	r3, [r4, #48]	; 0x30
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	bf00      	nop
 8004b78:	0800580d 	.word	0x0800580d
 8004b7c:	0800582f 	.word	0x0800582f
 8004b80:	08005867 	.word	0x08005867
 8004b84:	0800588b 	.word	0x0800588b

08004b88 <_cleanup_r>:
 8004b88:	4901      	ldr	r1, [pc, #4]	; (8004b90 <_cleanup_r+0x8>)
 8004b8a:	f000 b885 	b.w	8004c98 <_fwalk_reent>
 8004b8e:	bf00      	nop
 8004b90:	08004aed 	.word	0x08004aed

08004b94 <__sfmoreglue>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	2568      	movs	r5, #104	; 0x68
 8004b98:	1e4a      	subs	r2, r1, #1
 8004b9a:	4355      	muls	r5, r2
 8004b9c:	460e      	mov	r6, r1
 8004b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ba2:	f000 fc55 	bl	8005450 <_malloc_r>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	b140      	cbz	r0, 8004bbc <__sfmoreglue+0x28>
 8004baa:	2100      	movs	r1, #0
 8004bac:	e9c0 1600 	strd	r1, r6, [r0]
 8004bb0:	300c      	adds	r0, #12
 8004bb2:	60a0      	str	r0, [r4, #8]
 8004bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004bb8:	f7fe fb27 	bl	800320a <memset>
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}

08004bc0 <__sinit>:
 8004bc0:	6983      	ldr	r3, [r0, #24]
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	bb33      	cbnz	r3, 8004c16 <__sinit+0x56>
 8004bc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004bcc:	6503      	str	r3, [r0, #80]	; 0x50
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <__sinit+0x58>)
 8004bd0:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <__sinit+0x5c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6282      	str	r2, [r0, #40]	; 0x28
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	bf04      	itt	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	6183      	streq	r3, [r0, #24]
 8004bde:	f000 f81f 	bl	8004c20 <__sfp>
 8004be2:	6060      	str	r0, [r4, #4]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 f81b 	bl	8004c20 <__sfp>
 8004bea:	60a0      	str	r0, [r4, #8]
 8004bec:	4620      	mov	r0, r4
 8004bee:	f000 f817 	bl	8004c20 <__sfp>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	60e0      	str	r0, [r4, #12]
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	6860      	ldr	r0, [r4, #4]
 8004bfa:	f7ff ffa1 	bl	8004b40 <std>
 8004bfe:	2201      	movs	r2, #1
 8004c00:	2109      	movs	r1, #9
 8004c02:	68a0      	ldr	r0, [r4, #8]
 8004c04:	f7ff ff9c 	bl	8004b40 <std>
 8004c08:	2202      	movs	r2, #2
 8004c0a:	2112      	movs	r1, #18
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	f7ff ff97 	bl	8004b40 <std>
 8004c12:	2301      	movs	r3, #1
 8004c14:	61a3      	str	r3, [r4, #24]
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	08005a54 	.word	0x08005a54
 8004c1c:	08004b89 	.word	0x08004b89

08004c20 <__sfp>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <__sfp+0x70>)
 8004c24:	4607      	mov	r7, r0
 8004c26:	681e      	ldr	r6, [r3, #0]
 8004c28:	69b3      	ldr	r3, [r6, #24]
 8004c2a:	b913      	cbnz	r3, 8004c32 <__sfp+0x12>
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff ffc7 	bl	8004bc0 <__sinit>
 8004c32:	3648      	adds	r6, #72	; 0x48
 8004c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	d503      	bpl.n	8004c44 <__sfp+0x24>
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	b133      	cbz	r3, 8004c4e <__sfp+0x2e>
 8004c40:	6836      	ldr	r6, [r6, #0]
 8004c42:	e7f7      	b.n	8004c34 <__sfp+0x14>
 8004c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c48:	b16d      	cbz	r5, 8004c66 <__sfp+0x46>
 8004c4a:	3468      	adds	r4, #104	; 0x68
 8004c4c:	e7f4      	b.n	8004c38 <__sfp+0x18>
 8004c4e:	2104      	movs	r1, #4
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff ff9f 	bl	8004b94 <__sfmoreglue>
 8004c56:	6030      	str	r0, [r6, #0]
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d1f1      	bne.n	8004c40 <__sfp+0x20>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	4604      	mov	r4, r0
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	4620      	mov	r0, r4
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <__sfp+0x74>)
 8004c68:	6665      	str	r5, [r4, #100]	; 0x64
 8004c6a:	e9c4 5500 	strd	r5, r5, [r4]
 8004c6e:	60a5      	str	r5, [r4, #8]
 8004c70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c80:	f7fe fac3 	bl	800320a <memset>
 8004c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c8c:	e7e9      	b.n	8004c62 <__sfp+0x42>
 8004c8e:	bf00      	nop
 8004c90:	08005a54 	.word	0x08005a54
 8004c94:	ffff0001 	.word	0xffff0001

08004c98 <_fwalk_reent>:
 8004c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	4689      	mov	r9, r1
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ca6:	b914      	cbnz	r4, 8004cae <_fwalk_reent+0x16>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004cb2:	3f01      	subs	r7, #1
 8004cb4:	d501      	bpl.n	8004cba <_fwalk_reent+0x22>
 8004cb6:	6824      	ldr	r4, [r4, #0]
 8004cb8:	e7f5      	b.n	8004ca6 <_fwalk_reent+0xe>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d907      	bls.n	8004cd0 <_fwalk_reent+0x38>
 8004cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	d003      	beq.n	8004cd0 <_fwalk_reent+0x38>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4640      	mov	r0, r8
 8004ccc:	47c8      	blx	r9
 8004cce:	4306      	orrs	r6, r0
 8004cd0:	3568      	adds	r5, #104	; 0x68
 8004cd2:	e7ee      	b.n	8004cb2 <_fwalk_reent+0x1a>

08004cd4 <_localeconv_r>:
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <_localeconv_r+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a18      	ldr	r0, [r3, #32]
 8004cda:	4b04      	ldr	r3, [pc, #16]	; (8004cec <_localeconv_r+0x18>)
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	bf08      	it	eq
 8004ce0:	4618      	moveq	r0, r3
 8004ce2:	30f0      	adds	r0, #240	; 0xf0
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2000000c 	.word	0x2000000c
 8004cec:	20000070 	.word	0x20000070

08004cf0 <__swhatbuf_r>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf8:	b096      	sub	sp, #88	; 0x58
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	461d      	mov	r5, r3
 8004d00:	da07      	bge.n	8004d12 <__swhatbuf_r+0x22>
 8004d02:	2300      	movs	r3, #0
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	89b3      	ldrh	r3, [r6, #12]
 8004d08:	061a      	lsls	r2, r3, #24
 8004d0a:	d410      	bmi.n	8004d2e <__swhatbuf_r+0x3e>
 8004d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d10:	e00e      	b.n	8004d30 <__swhatbuf_r+0x40>
 8004d12:	466a      	mov	r2, sp
 8004d14:	f000 fde0 	bl	80058d8 <_fstat_r>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	dbf2      	blt.n	8004d02 <__swhatbuf_r+0x12>
 8004d1c:	9a01      	ldr	r2, [sp, #4]
 8004d1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d26:	425a      	negs	r2, r3
 8004d28:	415a      	adcs	r2, r3
 8004d2a:	602a      	str	r2, [r5, #0]
 8004d2c:	e7ee      	b.n	8004d0c <__swhatbuf_r+0x1c>
 8004d2e:	2340      	movs	r3, #64	; 0x40
 8004d30:	2000      	movs	r0, #0
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	b016      	add	sp, #88	; 0x58
 8004d36:	bd70      	pop	{r4, r5, r6, pc}

08004d38 <__smakebuf_r>:
 8004d38:	898b      	ldrh	r3, [r1, #12]
 8004d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d3c:	079d      	lsls	r5, r3, #30
 8004d3e:	4606      	mov	r6, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	d507      	bpl.n	8004d54 <__smakebuf_r+0x1c>
 8004d44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	6123      	str	r3, [r4, #16]
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	6163      	str	r3, [r4, #20]
 8004d50:	b002      	add	sp, #8
 8004d52:	bd70      	pop	{r4, r5, r6, pc}
 8004d54:	ab01      	add	r3, sp, #4
 8004d56:	466a      	mov	r2, sp
 8004d58:	f7ff ffca 	bl	8004cf0 <__swhatbuf_r>
 8004d5c:	9900      	ldr	r1, [sp, #0]
 8004d5e:	4605      	mov	r5, r0
 8004d60:	4630      	mov	r0, r6
 8004d62:	f000 fb75 	bl	8005450 <_malloc_r>
 8004d66:	b948      	cbnz	r0, 8004d7c <__smakebuf_r+0x44>
 8004d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d6c:	059a      	lsls	r2, r3, #22
 8004d6e:	d4ef      	bmi.n	8004d50 <__smakebuf_r+0x18>
 8004d70:	f023 0303 	bic.w	r3, r3, #3
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	81a3      	strh	r3, [r4, #12]
 8004d7a:	e7e3      	b.n	8004d44 <__smakebuf_r+0xc>
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <__smakebuf_r+0x7c>)
 8004d7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	6020      	str	r0, [r4, #0]
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	81a3      	strh	r3, [r4, #12]
 8004d8a:	9b00      	ldr	r3, [sp, #0]
 8004d8c:	6120      	str	r0, [r4, #16]
 8004d8e:	6163      	str	r3, [r4, #20]
 8004d90:	9b01      	ldr	r3, [sp, #4]
 8004d92:	b15b      	cbz	r3, 8004dac <__smakebuf_r+0x74>
 8004d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f000 fdaf 	bl	80058fc <_isatty_r>
 8004d9e:	b128      	cbz	r0, 8004dac <__smakebuf_r+0x74>
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	431d      	orrs	r5, r3
 8004db0:	81a5      	strh	r5, [r4, #12]
 8004db2:	e7cd      	b.n	8004d50 <__smakebuf_r+0x18>
 8004db4:	08004b89 	.word	0x08004b89

08004db8 <malloc>:
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <malloc+0xc>)
 8004dba:	4601      	mov	r1, r0
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	f000 bb47 	b.w	8005450 <_malloc_r>
 8004dc2:	bf00      	nop
 8004dc4:	2000000c 	.word	0x2000000c

08004dc8 <memchr>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	b2c9      	uxtb	r1, r1
 8004dcc:	4402      	add	r2, r0
 8004dce:	4290      	cmp	r0, r2
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	d101      	bne.n	8004dd8 <memchr+0x10>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e003      	b.n	8004de0 <memchr+0x18>
 8004dd8:	781c      	ldrb	r4, [r3, #0]
 8004dda:	3001      	adds	r0, #1
 8004ddc:	428c      	cmp	r4, r1
 8004dde:	d1f6      	bne.n	8004dce <memchr+0x6>
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd10      	pop	{r4, pc}

08004de4 <_Balloc>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004de8:	4604      	mov	r4, r0
 8004dea:	460e      	mov	r6, r1
 8004dec:	b93d      	cbnz	r5, 8004dfe <_Balloc+0x1a>
 8004dee:	2010      	movs	r0, #16
 8004df0:	f7ff ffe2 	bl	8004db8 <malloc>
 8004df4:	6260      	str	r0, [r4, #36]	; 0x24
 8004df6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004dfa:	6005      	str	r5, [r0, #0]
 8004dfc:	60c5      	str	r5, [r0, #12]
 8004dfe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004e00:	68eb      	ldr	r3, [r5, #12]
 8004e02:	b183      	cbz	r3, 8004e26 <_Balloc+0x42>
 8004e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004e0c:	b9b8      	cbnz	r0, 8004e3e <_Balloc+0x5a>
 8004e0e:	2101      	movs	r1, #1
 8004e10:	fa01 f506 	lsl.w	r5, r1, r6
 8004e14:	1d6a      	adds	r2, r5, #5
 8004e16:	0092      	lsls	r2, r2, #2
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 fabe 	bl	800539a <_calloc_r>
 8004e1e:	b160      	cbz	r0, 8004e3a <_Balloc+0x56>
 8004e20:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004e24:	e00e      	b.n	8004e44 <_Balloc+0x60>
 8004e26:	2221      	movs	r2, #33	; 0x21
 8004e28:	2104      	movs	r1, #4
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f000 fab5 	bl	800539a <_calloc_r>
 8004e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e32:	60e8      	str	r0, [r5, #12]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e4      	bne.n	8004e04 <_Balloc+0x20>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	6802      	ldr	r2, [r0, #0]
 8004e40:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004e44:	2300      	movs	r3, #0
 8004e46:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e4a:	e7f7      	b.n	8004e3c <_Balloc+0x58>

08004e4c <_Bfree>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004e50:	4606      	mov	r6, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	b93c      	cbnz	r4, 8004e66 <_Bfree+0x1a>
 8004e56:	2010      	movs	r0, #16
 8004e58:	f7ff ffae 	bl	8004db8 <malloc>
 8004e5c:	6270      	str	r0, [r6, #36]	; 0x24
 8004e5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e62:	6004      	str	r4, [r0, #0]
 8004e64:	60c4      	str	r4, [r0, #12]
 8004e66:	b13d      	cbz	r5, 8004e78 <_Bfree+0x2c>
 8004e68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004e6a:	686a      	ldr	r2, [r5, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e72:	6029      	str	r1, [r5, #0]
 8004e74:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004e78:	bd70      	pop	{r4, r5, r6, pc}

08004e7a <__multadd>:
 8004e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7e:	461f      	mov	r7, r3
 8004e80:	4606      	mov	r6, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	2300      	movs	r3, #0
 8004e86:	690d      	ldr	r5, [r1, #16]
 8004e88:	f101 0c14 	add.w	ip, r1, #20
 8004e8c:	f8dc 0000 	ldr.w	r0, [ip]
 8004e90:	3301      	adds	r3, #1
 8004e92:	b281      	uxth	r1, r0
 8004e94:	fb02 7101 	mla	r1, r2, r1, r7
 8004e98:	0c00      	lsrs	r0, r0, #16
 8004e9a:	0c0f      	lsrs	r7, r1, #16
 8004e9c:	fb02 7000 	mla	r0, r2, r0, r7
 8004ea0:	b289      	uxth	r1, r1
 8004ea2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004ea6:	429d      	cmp	r5, r3
 8004ea8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004eac:	f84c 1b04 	str.w	r1, [ip], #4
 8004eb0:	dcec      	bgt.n	8004e8c <__multadd+0x12>
 8004eb2:	b1d7      	cbz	r7, 8004eea <__multadd+0x70>
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	dc12      	bgt.n	8004ee0 <__multadd+0x66>
 8004eba:	6861      	ldr	r1, [r4, #4]
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	3101      	adds	r1, #1
 8004ec0:	f7ff ff90 	bl	8004de4 <_Balloc>
 8004ec4:	4680      	mov	r8, r0
 8004ec6:	6922      	ldr	r2, [r4, #16]
 8004ec8:	f104 010c 	add.w	r1, r4, #12
 8004ecc:	3202      	adds	r2, #2
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	300c      	adds	r0, #12
 8004ed2:	f7fe f98f 	bl	80031f4 <memcpy>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff ffb7 	bl	8004e4c <_Bfree>
 8004ede:	4644      	mov	r4, r8
 8004ee0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	615f      	str	r7, [r3, #20]
 8004ee8:	6125      	str	r5, [r4, #16]
 8004eea:	4620      	mov	r0, r4
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ef0 <__hi0bits>:
 8004ef0:	0c02      	lsrs	r2, r0, #16
 8004ef2:	0412      	lsls	r2, r2, #16
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	b9b2      	cbnz	r2, 8004f26 <__hi0bits+0x36>
 8004ef8:	0403      	lsls	r3, r0, #16
 8004efa:	2010      	movs	r0, #16
 8004efc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f00:	bf04      	itt	eq
 8004f02:	021b      	lsleq	r3, r3, #8
 8004f04:	3008      	addeq	r0, #8
 8004f06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f0a:	bf04      	itt	eq
 8004f0c:	011b      	lsleq	r3, r3, #4
 8004f0e:	3004      	addeq	r0, #4
 8004f10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f14:	bf04      	itt	eq
 8004f16:	009b      	lsleq	r3, r3, #2
 8004f18:	3002      	addeq	r0, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	db06      	blt.n	8004f2c <__hi0bits+0x3c>
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	d503      	bpl.n	8004f2a <__hi0bits+0x3a>
 8004f22:	3001      	adds	r0, #1
 8004f24:	4770      	bx	lr
 8004f26:	2000      	movs	r0, #0
 8004f28:	e7e8      	b.n	8004efc <__hi0bits+0xc>
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	4770      	bx	lr

08004f2e <__lo0bits>:
 8004f2e:	6803      	ldr	r3, [r0, #0]
 8004f30:	4601      	mov	r1, r0
 8004f32:	f013 0207 	ands.w	r2, r3, #7
 8004f36:	d00b      	beq.n	8004f50 <__lo0bits+0x22>
 8004f38:	07da      	lsls	r2, r3, #31
 8004f3a:	d423      	bmi.n	8004f84 <__lo0bits+0x56>
 8004f3c:	0798      	lsls	r0, r3, #30
 8004f3e:	bf49      	itett	mi
 8004f40:	085b      	lsrmi	r3, r3, #1
 8004f42:	089b      	lsrpl	r3, r3, #2
 8004f44:	2001      	movmi	r0, #1
 8004f46:	600b      	strmi	r3, [r1, #0]
 8004f48:	bf5c      	itt	pl
 8004f4a:	600b      	strpl	r3, [r1, #0]
 8004f4c:	2002      	movpl	r0, #2
 8004f4e:	4770      	bx	lr
 8004f50:	b298      	uxth	r0, r3
 8004f52:	b9a8      	cbnz	r0, 8004f80 <__lo0bits+0x52>
 8004f54:	2010      	movs	r0, #16
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f5c:	bf04      	itt	eq
 8004f5e:	0a1b      	lsreq	r3, r3, #8
 8004f60:	3008      	addeq	r0, #8
 8004f62:	071a      	lsls	r2, r3, #28
 8004f64:	bf04      	itt	eq
 8004f66:	091b      	lsreq	r3, r3, #4
 8004f68:	3004      	addeq	r0, #4
 8004f6a:	079a      	lsls	r2, r3, #30
 8004f6c:	bf04      	itt	eq
 8004f6e:	089b      	lsreq	r3, r3, #2
 8004f70:	3002      	addeq	r0, #2
 8004f72:	07da      	lsls	r2, r3, #31
 8004f74:	d402      	bmi.n	8004f7c <__lo0bits+0x4e>
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	d006      	beq.n	8004f88 <__lo0bits+0x5a>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	600b      	str	r3, [r1, #0]
 8004f7e:	4770      	bx	lr
 8004f80:	4610      	mov	r0, r2
 8004f82:	e7e9      	b.n	8004f58 <__lo0bits+0x2a>
 8004f84:	2000      	movs	r0, #0
 8004f86:	4770      	bx	lr
 8004f88:	2020      	movs	r0, #32
 8004f8a:	4770      	bx	lr

08004f8c <__i2b>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2101      	movs	r1, #1
 8004f92:	f7ff ff27 	bl	8004de4 <_Balloc>
 8004f96:	2201      	movs	r2, #1
 8004f98:	6144      	str	r4, [r0, #20]
 8004f9a:	6102      	str	r2, [r0, #16]
 8004f9c:	bd10      	pop	{r4, pc}

08004f9e <__multiply>:
 8004f9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	690a      	ldr	r2, [r1, #16]
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	4688      	mov	r8, r1
 8004faa:	429a      	cmp	r2, r3
 8004fac:	bfbe      	ittt	lt
 8004fae:	460b      	movlt	r3, r1
 8004fb0:	46a0      	movlt	r8, r4
 8004fb2:	461c      	movlt	r4, r3
 8004fb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004fb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004fbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fc4:	eb07 0609 	add.w	r6, r7, r9
 8004fc8:	42b3      	cmp	r3, r6
 8004fca:	bfb8      	it	lt
 8004fcc:	3101      	addlt	r1, #1
 8004fce:	f7ff ff09 	bl	8004de4 <_Balloc>
 8004fd2:	f100 0514 	add.w	r5, r0, #20
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	2200      	movs	r2, #0
 8004fda:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004fde:	4573      	cmp	r3, lr
 8004fe0:	d316      	bcc.n	8005010 <__multiply+0x72>
 8004fe2:	f104 0214 	add.w	r2, r4, #20
 8004fe6:	f108 0114 	add.w	r1, r8, #20
 8004fea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004fee:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	9b00      	ldr	r3, [sp, #0]
 8004ff6:	9201      	str	r2, [sp, #4]
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d80c      	bhi.n	8005016 <__multiply+0x78>
 8004ffc:	2e00      	cmp	r6, #0
 8004ffe:	dd03      	ble.n	8005008 <__multiply+0x6a>
 8005000:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005004:	2b00      	cmp	r3, #0
 8005006:	d05d      	beq.n	80050c4 <__multiply+0x126>
 8005008:	6106      	str	r6, [r0, #16]
 800500a:	b003      	add	sp, #12
 800500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005010:	f843 2b04 	str.w	r2, [r3], #4
 8005014:	e7e3      	b.n	8004fde <__multiply+0x40>
 8005016:	f8b2 b000 	ldrh.w	fp, [r2]
 800501a:	f1bb 0f00 	cmp.w	fp, #0
 800501e:	d023      	beq.n	8005068 <__multiply+0xca>
 8005020:	4689      	mov	r9, r1
 8005022:	46ac      	mov	ip, r5
 8005024:	f04f 0800 	mov.w	r8, #0
 8005028:	f859 4b04 	ldr.w	r4, [r9], #4
 800502c:	f8dc a000 	ldr.w	sl, [ip]
 8005030:	b2a3      	uxth	r3, r4
 8005032:	fa1f fa8a 	uxth.w	sl, sl
 8005036:	fb0b a303 	mla	r3, fp, r3, sl
 800503a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800503e:	f8dc 4000 	ldr.w	r4, [ip]
 8005042:	4443      	add	r3, r8
 8005044:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005048:	fb0b 840a 	mla	r4, fp, sl, r8
 800504c:	46e2      	mov	sl, ip
 800504e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005052:	b29b      	uxth	r3, r3
 8005054:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005058:	454f      	cmp	r7, r9
 800505a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800505e:	f84a 3b04 	str.w	r3, [sl], #4
 8005062:	d82b      	bhi.n	80050bc <__multiply+0x11e>
 8005064:	f8cc 8004 	str.w	r8, [ip, #4]
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	3204      	adds	r2, #4
 800506c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	d020      	beq.n	80050b8 <__multiply+0x11a>
 8005076:	4689      	mov	r9, r1
 8005078:	46a8      	mov	r8, r5
 800507a:	f04f 0b00 	mov.w	fp, #0
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	f8b9 c000 	ldrh.w	ip, [r9]
 8005084:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005088:	b29b      	uxth	r3, r3
 800508a:	fb0a 440c 	mla	r4, sl, ip, r4
 800508e:	46c4      	mov	ip, r8
 8005090:	445c      	add	r4, fp
 8005092:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005096:	f84c 3b04 	str.w	r3, [ip], #4
 800509a:	f859 3b04 	ldr.w	r3, [r9], #4
 800509e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	fb0a b303 	mla	r3, sl, r3, fp
 80050a8:	454f      	cmp	r7, r9
 80050aa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050ae:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80050b2:	d805      	bhi.n	80050c0 <__multiply+0x122>
 80050b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80050b8:	3504      	adds	r5, #4
 80050ba:	e79b      	b.n	8004ff4 <__multiply+0x56>
 80050bc:	46d4      	mov	ip, sl
 80050be:	e7b3      	b.n	8005028 <__multiply+0x8a>
 80050c0:	46e0      	mov	r8, ip
 80050c2:	e7dd      	b.n	8005080 <__multiply+0xe2>
 80050c4:	3e01      	subs	r6, #1
 80050c6:	e799      	b.n	8004ffc <__multiply+0x5e>

080050c8 <__pow5mult>:
 80050c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050cc:	4615      	mov	r5, r2
 80050ce:	f012 0203 	ands.w	r2, r2, #3
 80050d2:	4606      	mov	r6, r0
 80050d4:	460f      	mov	r7, r1
 80050d6:	d007      	beq.n	80050e8 <__pow5mult+0x20>
 80050d8:	4c21      	ldr	r4, [pc, #132]	; (8005160 <__pow5mult+0x98>)
 80050da:	3a01      	subs	r2, #1
 80050dc:	2300      	movs	r3, #0
 80050de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050e2:	f7ff feca 	bl	8004e7a <__multadd>
 80050e6:	4607      	mov	r7, r0
 80050e8:	10ad      	asrs	r5, r5, #2
 80050ea:	d035      	beq.n	8005158 <__pow5mult+0x90>
 80050ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050ee:	b93c      	cbnz	r4, 8005100 <__pow5mult+0x38>
 80050f0:	2010      	movs	r0, #16
 80050f2:	f7ff fe61 	bl	8004db8 <malloc>
 80050f6:	6270      	str	r0, [r6, #36]	; 0x24
 80050f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050fc:	6004      	str	r4, [r0, #0]
 80050fe:	60c4      	str	r4, [r0, #12]
 8005100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005108:	b94c      	cbnz	r4, 800511e <__pow5mult+0x56>
 800510a:	f240 2171 	movw	r1, #625	; 0x271
 800510e:	4630      	mov	r0, r6
 8005110:	f7ff ff3c 	bl	8004f8c <__i2b>
 8005114:	2300      	movs	r3, #0
 8005116:	4604      	mov	r4, r0
 8005118:	f8c8 0008 	str.w	r0, [r8, #8]
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	f04f 0800 	mov.w	r8, #0
 8005122:	07eb      	lsls	r3, r5, #31
 8005124:	d50a      	bpl.n	800513c <__pow5mult+0x74>
 8005126:	4639      	mov	r1, r7
 8005128:	4622      	mov	r2, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ff37 	bl	8004f9e <__multiply>
 8005130:	4681      	mov	r9, r0
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff fe89 	bl	8004e4c <_Bfree>
 800513a:	464f      	mov	r7, r9
 800513c:	106d      	asrs	r5, r5, #1
 800513e:	d00b      	beq.n	8005158 <__pow5mult+0x90>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	b938      	cbnz	r0, 8005154 <__pow5mult+0x8c>
 8005144:	4622      	mov	r2, r4
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff ff28 	bl	8004f9e <__multiply>
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	f8c0 8000 	str.w	r8, [r0]
 8005154:	4604      	mov	r4, r0
 8005156:	e7e4      	b.n	8005122 <__pow5mult+0x5a>
 8005158:	4638      	mov	r0, r7
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515e:	bf00      	nop
 8005160:	08005bf0 	.word	0x08005bf0

08005164 <__lshift>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	460c      	mov	r4, r1
 800516a:	4607      	mov	r7, r0
 800516c:	4616      	mov	r6, r2
 800516e:	6923      	ldr	r3, [r4, #16]
 8005170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005174:	eb0a 0903 	add.w	r9, sl, r3
 8005178:	6849      	ldr	r1, [r1, #4]
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	f109 0501 	add.w	r5, r9, #1
 8005180:	42ab      	cmp	r3, r5
 8005182:	db32      	blt.n	80051ea <__lshift+0x86>
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff fe2d 	bl	8004de4 <_Balloc>
 800518a:	2300      	movs	r3, #0
 800518c:	4680      	mov	r8, r0
 800518e:	461a      	mov	r2, r3
 8005190:	f100 0114 	add.w	r1, r0, #20
 8005194:	4553      	cmp	r3, sl
 8005196:	db2b      	blt.n	80051f0 <__lshift+0x8c>
 8005198:	6920      	ldr	r0, [r4, #16]
 800519a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800519e:	f104 0314 	add.w	r3, r4, #20
 80051a2:	f016 021f 	ands.w	r2, r6, #31
 80051a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051ae:	d025      	beq.n	80051fc <__lshift+0x98>
 80051b0:	2000      	movs	r0, #0
 80051b2:	f1c2 0e20 	rsb	lr, r2, #32
 80051b6:	468a      	mov	sl, r1
 80051b8:	681e      	ldr	r6, [r3, #0]
 80051ba:	4096      	lsls	r6, r2
 80051bc:	4330      	orrs	r0, r6
 80051be:	f84a 0b04 	str.w	r0, [sl], #4
 80051c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80051c6:	459c      	cmp	ip, r3
 80051c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80051cc:	d814      	bhi.n	80051f8 <__lshift+0x94>
 80051ce:	6048      	str	r0, [r1, #4]
 80051d0:	b108      	cbz	r0, 80051d6 <__lshift+0x72>
 80051d2:	f109 0502 	add.w	r5, r9, #2
 80051d6:	3d01      	subs	r5, #1
 80051d8:	4638      	mov	r0, r7
 80051da:	f8c8 5010 	str.w	r5, [r8, #16]
 80051de:	4621      	mov	r1, r4
 80051e0:	f7ff fe34 	bl	8004e4c <_Bfree>
 80051e4:	4640      	mov	r0, r8
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ea:	3101      	adds	r1, #1
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	e7c7      	b.n	8005180 <__lshift+0x1c>
 80051f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80051f4:	3301      	adds	r3, #1
 80051f6:	e7cd      	b.n	8005194 <__lshift+0x30>
 80051f8:	4651      	mov	r1, sl
 80051fa:	e7dc      	b.n	80051b6 <__lshift+0x52>
 80051fc:	3904      	subs	r1, #4
 80051fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005202:	459c      	cmp	ip, r3
 8005204:	f841 2f04 	str.w	r2, [r1, #4]!
 8005208:	d8f9      	bhi.n	80051fe <__lshift+0x9a>
 800520a:	e7e4      	b.n	80051d6 <__lshift+0x72>

0800520c <__mcmp>:
 800520c:	6903      	ldr	r3, [r0, #16]
 800520e:	690a      	ldr	r2, [r1, #16]
 8005210:	b530      	push	{r4, r5, lr}
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	d10c      	bne.n	8005230 <__mcmp+0x24>
 8005216:	0092      	lsls	r2, r2, #2
 8005218:	3014      	adds	r0, #20
 800521a:	3114      	adds	r1, #20
 800521c:	1884      	adds	r4, r0, r2
 800521e:	4411      	add	r1, r2
 8005220:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005224:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005228:	4295      	cmp	r5, r2
 800522a:	d003      	beq.n	8005234 <__mcmp+0x28>
 800522c:	d305      	bcc.n	800523a <__mcmp+0x2e>
 800522e:	2301      	movs	r3, #1
 8005230:	4618      	mov	r0, r3
 8005232:	bd30      	pop	{r4, r5, pc}
 8005234:	42a0      	cmp	r0, r4
 8005236:	d3f3      	bcc.n	8005220 <__mcmp+0x14>
 8005238:	e7fa      	b.n	8005230 <__mcmp+0x24>
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e7f7      	b.n	8005230 <__mcmp+0x24>

08005240 <__mdiff>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	460d      	mov	r5, r1
 8005246:	4607      	mov	r7, r0
 8005248:	4611      	mov	r1, r2
 800524a:	4628      	mov	r0, r5
 800524c:	4614      	mov	r4, r2
 800524e:	f7ff ffdd 	bl	800520c <__mcmp>
 8005252:	1e06      	subs	r6, r0, #0
 8005254:	d108      	bne.n	8005268 <__mdiff+0x28>
 8005256:	4631      	mov	r1, r6
 8005258:	4638      	mov	r0, r7
 800525a:	f7ff fdc3 	bl	8004de4 <_Balloc>
 800525e:	2301      	movs	r3, #1
 8005260:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	bfa4      	itt	ge
 800526a:	4623      	movge	r3, r4
 800526c:	462c      	movge	r4, r5
 800526e:	4638      	mov	r0, r7
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	bfa6      	itte	ge
 8005274:	461d      	movge	r5, r3
 8005276:	2600      	movge	r6, #0
 8005278:	2601      	movlt	r6, #1
 800527a:	f7ff fdb3 	bl	8004de4 <_Balloc>
 800527e:	f04f 0e00 	mov.w	lr, #0
 8005282:	60c6      	str	r6, [r0, #12]
 8005284:	692b      	ldr	r3, [r5, #16]
 8005286:	6926      	ldr	r6, [r4, #16]
 8005288:	f104 0214 	add.w	r2, r4, #20
 800528c:	f105 0914 	add.w	r9, r5, #20
 8005290:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005294:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005298:	f100 0114 	add.w	r1, r0, #20
 800529c:	f852 ab04 	ldr.w	sl, [r2], #4
 80052a0:	f859 5b04 	ldr.w	r5, [r9], #4
 80052a4:	fa1f f38a 	uxth.w	r3, sl
 80052a8:	4473      	add	r3, lr
 80052aa:	b2ac      	uxth	r4, r5
 80052ac:	1b1b      	subs	r3, r3, r4
 80052ae:	0c2c      	lsrs	r4, r5, #16
 80052b0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80052b4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80052be:	45c8      	cmp	r8, r9
 80052c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80052c4:	4694      	mov	ip, r2
 80052c6:	f841 4b04 	str.w	r4, [r1], #4
 80052ca:	d8e7      	bhi.n	800529c <__mdiff+0x5c>
 80052cc:	45bc      	cmp	ip, r7
 80052ce:	d304      	bcc.n	80052da <__mdiff+0x9a>
 80052d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80052d4:	b183      	cbz	r3, 80052f8 <__mdiff+0xb8>
 80052d6:	6106      	str	r6, [r0, #16]
 80052d8:	e7c4      	b.n	8005264 <__mdiff+0x24>
 80052da:	f85c 4b04 	ldr.w	r4, [ip], #4
 80052de:	b2a2      	uxth	r2, r4
 80052e0:	4472      	add	r2, lr
 80052e2:	1413      	asrs	r3, r2, #16
 80052e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80052e8:	b292      	uxth	r2, r2
 80052ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052ee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80052f2:	f841 2b04 	str.w	r2, [r1], #4
 80052f6:	e7e9      	b.n	80052cc <__mdiff+0x8c>
 80052f8:	3e01      	subs	r6, #1
 80052fa:	e7e9      	b.n	80052d0 <__mdiff+0x90>

080052fc <__d2b>:
 80052fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005300:	461c      	mov	r4, r3
 8005302:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005306:	2101      	movs	r1, #1
 8005308:	4690      	mov	r8, r2
 800530a:	f7ff fd6b 	bl	8004de4 <_Balloc>
 800530e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005312:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005316:	4607      	mov	r7, r0
 8005318:	bb34      	cbnz	r4, 8005368 <__d2b+0x6c>
 800531a:	9201      	str	r2, [sp, #4]
 800531c:	f1b8 0200 	subs.w	r2, r8, #0
 8005320:	d027      	beq.n	8005372 <__d2b+0x76>
 8005322:	a802      	add	r0, sp, #8
 8005324:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005328:	f7ff fe01 	bl	8004f2e <__lo0bits>
 800532c:	9900      	ldr	r1, [sp, #0]
 800532e:	b1f0      	cbz	r0, 800536e <__d2b+0x72>
 8005330:	9a01      	ldr	r2, [sp, #4]
 8005332:	f1c0 0320 	rsb	r3, r0, #32
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	430b      	orrs	r3, r1
 800533c:	40c2      	lsrs	r2, r0
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	9b01      	ldr	r3, [sp, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2102      	movne	r1, #2
 800534a:	2101      	moveq	r1, #1
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	6139      	str	r1, [r7, #16]
 8005350:	b1c4      	cbz	r4, 8005384 <__d2b+0x88>
 8005352:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005356:	4404      	add	r4, r0
 8005358:	6034      	str	r4, [r6, #0]
 800535a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800535e:	6028      	str	r0, [r5, #0]
 8005360:	4638      	mov	r0, r7
 8005362:	b002      	add	sp, #8
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800536c:	e7d5      	b.n	800531a <__d2b+0x1e>
 800536e:	6179      	str	r1, [r7, #20]
 8005370:	e7e7      	b.n	8005342 <__d2b+0x46>
 8005372:	a801      	add	r0, sp, #4
 8005374:	f7ff fddb 	bl	8004f2e <__lo0bits>
 8005378:	2101      	movs	r1, #1
 800537a:	9b01      	ldr	r3, [sp, #4]
 800537c:	6139      	str	r1, [r7, #16]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	3020      	adds	r0, #32
 8005382:	e7e5      	b.n	8005350 <__d2b+0x54>
 8005384:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005388:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	6918      	ldr	r0, [r3, #16]
 8005390:	f7ff fdae 	bl	8004ef0 <__hi0bits>
 8005394:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005398:	e7e1      	b.n	800535e <__d2b+0x62>

0800539a <_calloc_r>:
 800539a:	b538      	push	{r3, r4, r5, lr}
 800539c:	fb02 f401 	mul.w	r4, r2, r1
 80053a0:	4621      	mov	r1, r4
 80053a2:	f000 f855 	bl	8005450 <_malloc_r>
 80053a6:	4605      	mov	r5, r0
 80053a8:	b118      	cbz	r0, 80053b2 <_calloc_r+0x18>
 80053aa:	4622      	mov	r2, r4
 80053ac:	2100      	movs	r1, #0
 80053ae:	f7fd ff2c 	bl	800320a <memset>
 80053b2:	4628      	mov	r0, r5
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080053b8 <_free_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	2900      	cmp	r1, #0
 80053be:	d043      	beq.n	8005448 <_free_r+0x90>
 80053c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c4:	1f0c      	subs	r4, r1, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bfb8      	it	lt
 80053ca:	18e4      	addlt	r4, r4, r3
 80053cc:	f000 faca 	bl	8005964 <__malloc_lock>
 80053d0:	4a1e      	ldr	r2, [pc, #120]	; (800544c <_free_r+0x94>)
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	4610      	mov	r0, r2
 80053d6:	b933      	cbnz	r3, 80053e6 <_free_r+0x2e>
 80053d8:	6063      	str	r3, [r4, #4]
 80053da:	6014      	str	r4, [r2, #0]
 80053dc:	4628      	mov	r0, r5
 80053de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e2:	f000 bac0 	b.w	8005966 <__malloc_unlock>
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	d90b      	bls.n	8005402 <_free_r+0x4a>
 80053ea:	6821      	ldr	r1, [r4, #0]
 80053ec:	1862      	adds	r2, r4, r1
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bf01      	itttt	eq
 80053f2:	681a      	ldreq	r2, [r3, #0]
 80053f4:	685b      	ldreq	r3, [r3, #4]
 80053f6:	1852      	addeq	r2, r2, r1
 80053f8:	6022      	streq	r2, [r4, #0]
 80053fa:	6063      	str	r3, [r4, #4]
 80053fc:	6004      	str	r4, [r0, #0]
 80053fe:	e7ed      	b.n	80053dc <_free_r+0x24>
 8005400:	4613      	mov	r3, r2
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	b10a      	cbz	r2, 800540a <_free_r+0x52>
 8005406:	42a2      	cmp	r2, r4
 8005408:	d9fa      	bls.n	8005400 <_free_r+0x48>
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	1858      	adds	r0, r3, r1
 800540e:	42a0      	cmp	r0, r4
 8005410:	d10b      	bne.n	800542a <_free_r+0x72>
 8005412:	6820      	ldr	r0, [r4, #0]
 8005414:	4401      	add	r1, r0
 8005416:	1858      	adds	r0, r3, r1
 8005418:	4282      	cmp	r2, r0
 800541a:	6019      	str	r1, [r3, #0]
 800541c:	d1de      	bne.n	80053dc <_free_r+0x24>
 800541e:	6810      	ldr	r0, [r2, #0]
 8005420:	6852      	ldr	r2, [r2, #4]
 8005422:	4401      	add	r1, r0
 8005424:	6019      	str	r1, [r3, #0]
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	e7d8      	b.n	80053dc <_free_r+0x24>
 800542a:	d902      	bls.n	8005432 <_free_r+0x7a>
 800542c:	230c      	movs	r3, #12
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	e7d4      	b.n	80053dc <_free_r+0x24>
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1821      	adds	r1, r4, r0
 8005436:	428a      	cmp	r2, r1
 8005438:	bf01      	itttt	eq
 800543a:	6811      	ldreq	r1, [r2, #0]
 800543c:	6852      	ldreq	r2, [r2, #4]
 800543e:	1809      	addeq	r1, r1, r0
 8005440:	6021      	streq	r1, [r4, #0]
 8005442:	6062      	str	r2, [r4, #4]
 8005444:	605c      	str	r4, [r3, #4]
 8005446:	e7c9      	b.n	80053dc <_free_r+0x24>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	20000608 	.word	0x20000608

08005450 <_malloc_r>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	1ccd      	adds	r5, r1, #3
 8005454:	f025 0503 	bic.w	r5, r5, #3
 8005458:	3508      	adds	r5, #8
 800545a:	2d0c      	cmp	r5, #12
 800545c:	bf38      	it	cc
 800545e:	250c      	movcc	r5, #12
 8005460:	2d00      	cmp	r5, #0
 8005462:	4606      	mov	r6, r0
 8005464:	db01      	blt.n	800546a <_malloc_r+0x1a>
 8005466:	42a9      	cmp	r1, r5
 8005468:	d903      	bls.n	8005472 <_malloc_r+0x22>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	2000      	movs	r0, #0
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	f000 fa77 	bl	8005964 <__malloc_lock>
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <_malloc_r+0xac>)
 8005478:	6814      	ldr	r4, [r2, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	b991      	cbnz	r1, 80054a4 <_malloc_r+0x54>
 800547e:	4c20      	ldr	r4, [pc, #128]	; (8005500 <_malloc_r+0xb0>)
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	b91b      	cbnz	r3, 800548c <_malloc_r+0x3c>
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f9b1 	bl	80057ec <_sbrk_r>
 800548a:	6020      	str	r0, [r4, #0]
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 f9ac 	bl	80057ec <_sbrk_r>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d124      	bne.n	80054e2 <_malloc_r+0x92>
 8005498:	230c      	movs	r3, #12
 800549a:	4630      	mov	r0, r6
 800549c:	6033      	str	r3, [r6, #0]
 800549e:	f000 fa62 	bl	8005966 <__malloc_unlock>
 80054a2:	e7e4      	b.n	800546e <_malloc_r+0x1e>
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	1b5b      	subs	r3, r3, r5
 80054a8:	d418      	bmi.n	80054dc <_malloc_r+0x8c>
 80054aa:	2b0b      	cmp	r3, #11
 80054ac:	d90f      	bls.n	80054ce <_malloc_r+0x7e>
 80054ae:	600b      	str	r3, [r1, #0]
 80054b0:	18cc      	adds	r4, r1, r3
 80054b2:	50cd      	str	r5, [r1, r3]
 80054b4:	4630      	mov	r0, r6
 80054b6:	f000 fa56 	bl	8005966 <__malloc_unlock>
 80054ba:	f104 000b 	add.w	r0, r4, #11
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	f020 0007 	bic.w	r0, r0, #7
 80054c4:	1ac3      	subs	r3, r0, r3
 80054c6:	d0d3      	beq.n	8005470 <_malloc_r+0x20>
 80054c8:	425a      	negs	r2, r3
 80054ca:	50e2      	str	r2, [r4, r3]
 80054cc:	e7d0      	b.n	8005470 <_malloc_r+0x20>
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	428c      	cmp	r4, r1
 80054d2:	bf16      	itet	ne
 80054d4:	6063      	strne	r3, [r4, #4]
 80054d6:	6013      	streq	r3, [r2, #0]
 80054d8:	460c      	movne	r4, r1
 80054da:	e7eb      	b.n	80054b4 <_malloc_r+0x64>
 80054dc:	460c      	mov	r4, r1
 80054de:	6849      	ldr	r1, [r1, #4]
 80054e0:	e7cc      	b.n	800547c <_malloc_r+0x2c>
 80054e2:	1cc4      	adds	r4, r0, #3
 80054e4:	f024 0403 	bic.w	r4, r4, #3
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d005      	beq.n	80054f8 <_malloc_r+0xa8>
 80054ec:	1a21      	subs	r1, r4, r0
 80054ee:	4630      	mov	r0, r6
 80054f0:	f000 f97c 	bl	80057ec <_sbrk_r>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d0cf      	beq.n	8005498 <_malloc_r+0x48>
 80054f8:	6025      	str	r5, [r4, #0]
 80054fa:	e7db      	b.n	80054b4 <_malloc_r+0x64>
 80054fc:	20000608 	.word	0x20000608
 8005500:	2000060c 	.word	0x2000060c

08005504 <__sfputc_r>:
 8005504:	6893      	ldr	r3, [r2, #8]
 8005506:	b410      	push	{r4}
 8005508:	3b01      	subs	r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	6093      	str	r3, [r2, #8]
 800550e:	da07      	bge.n	8005520 <__sfputc_r+0x1c>
 8005510:	6994      	ldr	r4, [r2, #24]
 8005512:	42a3      	cmp	r3, r4
 8005514:	db01      	blt.n	800551a <__sfputc_r+0x16>
 8005516:	290a      	cmp	r1, #10
 8005518:	d102      	bne.n	8005520 <__sfputc_r+0x1c>
 800551a:	bc10      	pop	{r4}
 800551c:	f7fe bb5c 	b.w	8003bd8 <__swbuf_r>
 8005520:	6813      	ldr	r3, [r2, #0]
 8005522:	1c58      	adds	r0, r3, #1
 8005524:	6010      	str	r0, [r2, #0]
 8005526:	7019      	strb	r1, [r3, #0]
 8005528:	4608      	mov	r0, r1
 800552a:	bc10      	pop	{r4}
 800552c:	4770      	bx	lr

0800552e <__sfputs_r>:
 800552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005530:	4606      	mov	r6, r0
 8005532:	460f      	mov	r7, r1
 8005534:	4614      	mov	r4, r2
 8005536:	18d5      	adds	r5, r2, r3
 8005538:	42ac      	cmp	r4, r5
 800553a:	d101      	bne.n	8005540 <__sfputs_r+0x12>
 800553c:	2000      	movs	r0, #0
 800553e:	e007      	b.n	8005550 <__sfputs_r+0x22>
 8005540:	463a      	mov	r2, r7
 8005542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ffdc 	bl	8005504 <__sfputc_r>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d1f3      	bne.n	8005538 <__sfputs_r+0xa>
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005554 <_vfiprintf_r>:
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	460c      	mov	r4, r1
 800555a:	b09d      	sub	sp, #116	; 0x74
 800555c:	4617      	mov	r7, r2
 800555e:	461d      	mov	r5, r3
 8005560:	4606      	mov	r6, r0
 8005562:	b118      	cbz	r0, 800556c <_vfiprintf_r+0x18>
 8005564:	6983      	ldr	r3, [r0, #24]
 8005566:	b90b      	cbnz	r3, 800556c <_vfiprintf_r+0x18>
 8005568:	f7ff fb2a 	bl	8004bc0 <__sinit>
 800556c:	4b7c      	ldr	r3, [pc, #496]	; (8005760 <_vfiprintf_r+0x20c>)
 800556e:	429c      	cmp	r4, r3
 8005570:	d158      	bne.n	8005624 <_vfiprintf_r+0xd0>
 8005572:	6874      	ldr	r4, [r6, #4]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	0718      	lsls	r0, r3, #28
 8005578:	d55e      	bpl.n	8005638 <_vfiprintf_r+0xe4>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <_vfiprintf_r+0xe4>
 8005580:	2300      	movs	r3, #0
 8005582:	9309      	str	r3, [sp, #36]	; 0x24
 8005584:	2320      	movs	r3, #32
 8005586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800558a:	2330      	movs	r3, #48	; 0x30
 800558c:	f04f 0b01 	mov.w	fp, #1
 8005590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005594:	9503      	str	r5, [sp, #12]
 8005596:	46b8      	mov	r8, r7
 8005598:	4645      	mov	r5, r8
 800559a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800559e:	b10b      	cbz	r3, 80055a4 <_vfiprintf_r+0x50>
 80055a0:	2b25      	cmp	r3, #37	; 0x25
 80055a2:	d154      	bne.n	800564e <_vfiprintf_r+0xfa>
 80055a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80055a8:	d00b      	beq.n	80055c2 <_vfiprintf_r+0x6e>
 80055aa:	4653      	mov	r3, sl
 80055ac:	463a      	mov	r2, r7
 80055ae:	4621      	mov	r1, r4
 80055b0:	4630      	mov	r0, r6
 80055b2:	f7ff ffbc 	bl	800552e <__sfputs_r>
 80055b6:	3001      	adds	r0, #1
 80055b8:	f000 80c2 	beq.w	8005740 <_vfiprintf_r+0x1ec>
 80055bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055be:	4453      	add	r3, sl
 80055c0:	9309      	str	r3, [sp, #36]	; 0x24
 80055c2:	f898 3000 	ldrb.w	r3, [r8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80ba 	beq.w	8005740 <_vfiprintf_r+0x1ec>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	9307      	str	r3, [sp, #28]
 80055da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055de:	931a      	str	r3, [sp, #104]	; 0x68
 80055e0:	46a8      	mov	r8, r5
 80055e2:	2205      	movs	r2, #5
 80055e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80055e8:	485e      	ldr	r0, [pc, #376]	; (8005764 <_vfiprintf_r+0x210>)
 80055ea:	f7ff fbed 	bl	8004dc8 <memchr>
 80055ee:	9b04      	ldr	r3, [sp, #16]
 80055f0:	bb78      	cbnz	r0, 8005652 <_vfiprintf_r+0xfe>
 80055f2:	06d9      	lsls	r1, r3, #27
 80055f4:	bf44      	itt	mi
 80055f6:	2220      	movmi	r2, #32
 80055f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055fc:	071a      	lsls	r2, r3, #28
 80055fe:	bf44      	itt	mi
 8005600:	222b      	movmi	r2, #43	; 0x2b
 8005602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005606:	782a      	ldrb	r2, [r5, #0]
 8005608:	2a2a      	cmp	r2, #42	; 0x2a
 800560a:	d02a      	beq.n	8005662 <_vfiprintf_r+0x10e>
 800560c:	46a8      	mov	r8, r5
 800560e:	2000      	movs	r0, #0
 8005610:	250a      	movs	r5, #10
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4641      	mov	r1, r8
 8005616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800561a:	3b30      	subs	r3, #48	; 0x30
 800561c:	2b09      	cmp	r3, #9
 800561e:	d969      	bls.n	80056f4 <_vfiprintf_r+0x1a0>
 8005620:	b360      	cbz	r0, 800567c <_vfiprintf_r+0x128>
 8005622:	e024      	b.n	800566e <_vfiprintf_r+0x11a>
 8005624:	4b50      	ldr	r3, [pc, #320]	; (8005768 <_vfiprintf_r+0x214>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d101      	bne.n	800562e <_vfiprintf_r+0xda>
 800562a:	68b4      	ldr	r4, [r6, #8]
 800562c:	e7a2      	b.n	8005574 <_vfiprintf_r+0x20>
 800562e:	4b4f      	ldr	r3, [pc, #316]	; (800576c <_vfiprintf_r+0x218>)
 8005630:	429c      	cmp	r4, r3
 8005632:	bf08      	it	eq
 8005634:	68f4      	ldreq	r4, [r6, #12]
 8005636:	e79d      	b.n	8005574 <_vfiprintf_r+0x20>
 8005638:	4621      	mov	r1, r4
 800563a:	4630      	mov	r0, r6
 800563c:	f7fe fb1e 	bl	8003c7c <__swsetup_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	d09d      	beq.n	8005580 <_vfiprintf_r+0x2c>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b01d      	add	sp, #116	; 0x74
 800564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564e:	46a8      	mov	r8, r5
 8005650:	e7a2      	b.n	8005598 <_vfiprintf_r+0x44>
 8005652:	4a44      	ldr	r2, [pc, #272]	; (8005764 <_vfiprintf_r+0x210>)
 8005654:	4645      	mov	r5, r8
 8005656:	1a80      	subs	r0, r0, r2
 8005658:	fa0b f000 	lsl.w	r0, fp, r0
 800565c:	4318      	orrs	r0, r3
 800565e:	9004      	str	r0, [sp, #16]
 8005660:	e7be      	b.n	80055e0 <_vfiprintf_r+0x8c>
 8005662:	9a03      	ldr	r2, [sp, #12]
 8005664:	1d11      	adds	r1, r2, #4
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	9103      	str	r1, [sp, #12]
 800566a:	2a00      	cmp	r2, #0
 800566c:	db01      	blt.n	8005672 <_vfiprintf_r+0x11e>
 800566e:	9207      	str	r2, [sp, #28]
 8005670:	e004      	b.n	800567c <_vfiprintf_r+0x128>
 8005672:	4252      	negs	r2, r2
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	9207      	str	r2, [sp, #28]
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	f898 3000 	ldrb.w	r3, [r8]
 8005680:	2b2e      	cmp	r3, #46	; 0x2e
 8005682:	d10e      	bne.n	80056a2 <_vfiprintf_r+0x14e>
 8005684:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005688:	2b2a      	cmp	r3, #42	; 0x2a
 800568a:	d138      	bne.n	80056fe <_vfiprintf_r+0x1aa>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	f108 0802 	add.w	r8, r8, #2
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	9203      	str	r2, [sp, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfb8      	it	lt
 800569c:	f04f 33ff 	movlt.w	r3, #4294967295
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	4d33      	ldr	r5, [pc, #204]	; (8005770 <_vfiprintf_r+0x21c>)
 80056a4:	2203      	movs	r2, #3
 80056a6:	f898 1000 	ldrb.w	r1, [r8]
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff fb8c 	bl	8004dc8 <memchr>
 80056b0:	b140      	cbz	r0, 80056c4 <_vfiprintf_r+0x170>
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	1b40      	subs	r0, r0, r5
 80056b6:	fa03 f000 	lsl.w	r0, r3, r0
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	f108 0801 	add.w	r8, r8, #1
 80056c0:	4303      	orrs	r3, r0
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	f898 1000 	ldrb.w	r1, [r8]
 80056c8:	2206      	movs	r2, #6
 80056ca:	482a      	ldr	r0, [pc, #168]	; (8005774 <_vfiprintf_r+0x220>)
 80056cc:	f108 0701 	add.w	r7, r8, #1
 80056d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056d4:	f7ff fb78 	bl	8004dc8 <memchr>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d037      	beq.n	800574c <_vfiprintf_r+0x1f8>
 80056dc:	4b26      	ldr	r3, [pc, #152]	; (8005778 <_vfiprintf_r+0x224>)
 80056de:	bb1b      	cbnz	r3, 8005728 <_vfiprintf_r+0x1d4>
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	3307      	adds	r3, #7
 80056e4:	f023 0307 	bic.w	r3, r3, #7
 80056e8:	3308      	adds	r3, #8
 80056ea:	9303      	str	r3, [sp, #12]
 80056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ee:	444b      	add	r3, r9
 80056f0:	9309      	str	r3, [sp, #36]	; 0x24
 80056f2:	e750      	b.n	8005596 <_vfiprintf_r+0x42>
 80056f4:	fb05 3202 	mla	r2, r5, r2, r3
 80056f8:	2001      	movs	r0, #1
 80056fa:	4688      	mov	r8, r1
 80056fc:	e78a      	b.n	8005614 <_vfiprintf_r+0xc0>
 80056fe:	2300      	movs	r3, #0
 8005700:	250a      	movs	r5, #10
 8005702:	4619      	mov	r1, r3
 8005704:	f108 0801 	add.w	r8, r8, #1
 8005708:	9305      	str	r3, [sp, #20]
 800570a:	4640      	mov	r0, r8
 800570c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005710:	3a30      	subs	r2, #48	; 0x30
 8005712:	2a09      	cmp	r2, #9
 8005714:	d903      	bls.n	800571e <_vfiprintf_r+0x1ca>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0c3      	beq.n	80056a2 <_vfiprintf_r+0x14e>
 800571a:	9105      	str	r1, [sp, #20]
 800571c:	e7c1      	b.n	80056a2 <_vfiprintf_r+0x14e>
 800571e:	fb05 2101 	mla	r1, r5, r1, r2
 8005722:	2301      	movs	r3, #1
 8005724:	4680      	mov	r8, r0
 8005726:	e7f0      	b.n	800570a <_vfiprintf_r+0x1b6>
 8005728:	ab03      	add	r3, sp, #12
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4622      	mov	r2, r4
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <_vfiprintf_r+0x228>)
 8005730:	a904      	add	r1, sp, #16
 8005732:	4630      	mov	r0, r6
 8005734:	f7fd fe02 	bl	800333c <_printf_float>
 8005738:	f1b0 3fff 	cmp.w	r0, #4294967295
 800573c:	4681      	mov	r9, r0
 800573e:	d1d5      	bne.n	80056ec <_vfiprintf_r+0x198>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	065b      	lsls	r3, r3, #25
 8005744:	f53f af7e 	bmi.w	8005644 <_vfiprintf_r+0xf0>
 8005748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574a:	e77d      	b.n	8005648 <_vfiprintf_r+0xf4>
 800574c:	ab03      	add	r3, sp, #12
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	4622      	mov	r2, r4
 8005752:	4b0a      	ldr	r3, [pc, #40]	; (800577c <_vfiprintf_r+0x228>)
 8005754:	a904      	add	r1, sp, #16
 8005756:	4630      	mov	r0, r6
 8005758:	f7fe f89c 	bl	8003894 <_printf_i>
 800575c:	e7ec      	b.n	8005738 <_vfiprintf_r+0x1e4>
 800575e:	bf00      	nop
 8005760:	08005abc 	.word	0x08005abc
 8005764:	08005bfc 	.word	0x08005bfc
 8005768:	08005adc 	.word	0x08005adc
 800576c:	08005a9c 	.word	0x08005a9c
 8005770:	08005c02 	.word	0x08005c02
 8005774:	08005c06 	.word	0x08005c06
 8005778:	0800333d 	.word	0x0800333d
 800577c:	0800552f 	.word	0x0800552f

08005780 <_putc_r>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	460d      	mov	r5, r1
 8005784:	4614      	mov	r4, r2
 8005786:	4606      	mov	r6, r0
 8005788:	b118      	cbz	r0, 8005792 <_putc_r+0x12>
 800578a:	6983      	ldr	r3, [r0, #24]
 800578c:	b90b      	cbnz	r3, 8005792 <_putc_r+0x12>
 800578e:	f7ff fa17 	bl	8004bc0 <__sinit>
 8005792:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <_putc_r+0x60>)
 8005794:	429c      	cmp	r4, r3
 8005796:	d112      	bne.n	80057be <_putc_r+0x3e>
 8005798:	6874      	ldr	r4, [r6, #4]
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	3b01      	subs	r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	da16      	bge.n	80057d2 <_putc_r+0x52>
 80057a4:	69a2      	ldr	r2, [r4, #24]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	db02      	blt.n	80057b0 <_putc_r+0x30>
 80057aa:	b2eb      	uxtb	r3, r5
 80057ac:	2b0a      	cmp	r3, #10
 80057ae:	d110      	bne.n	80057d2 <_putc_r+0x52>
 80057b0:	4622      	mov	r2, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	4630      	mov	r0, r6
 80057b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057ba:	f7fe ba0d 	b.w	8003bd8 <__swbuf_r>
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <_putc_r+0x64>)
 80057c0:	429c      	cmp	r4, r3
 80057c2:	d101      	bne.n	80057c8 <_putc_r+0x48>
 80057c4:	68b4      	ldr	r4, [r6, #8]
 80057c6:	e7e8      	b.n	800579a <_putc_r+0x1a>
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <_putc_r+0x68>)
 80057ca:	429c      	cmp	r4, r3
 80057cc:	bf08      	it	eq
 80057ce:	68f4      	ldreq	r4, [r6, #12]
 80057d0:	e7e3      	b.n	800579a <_putc_r+0x1a>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	b2e8      	uxtb	r0, r5
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	701d      	strb	r5, [r3, #0]
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	bf00      	nop
 80057e0:	08005abc 	.word	0x08005abc
 80057e4:	08005adc 	.word	0x08005adc
 80057e8:	08005a9c 	.word	0x08005a9c

080057ec <_sbrk_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	2300      	movs	r3, #0
 80057f0:	4c05      	ldr	r4, [pc, #20]	; (8005808 <_sbrk_r+0x1c>)
 80057f2:	4605      	mov	r5, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	f7fd fc60 	bl	80030bc <_sbrk>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_sbrk_r+0x1a>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	b103      	cbz	r3, 8005806 <_sbrk_r+0x1a>
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	200008b0 	.word	0x200008b0

0800580c <__sread>:
 800580c:	b510      	push	{r4, lr}
 800580e:	460c      	mov	r4, r1
 8005810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005814:	f000 f8a8 	bl	8005968 <_read_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	bfab      	itete	ge
 800581c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800581e:	89a3      	ldrhlt	r3, [r4, #12]
 8005820:	181b      	addge	r3, r3, r0
 8005822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005826:	bfac      	ite	ge
 8005828:	6563      	strge	r3, [r4, #84]	; 0x54
 800582a:	81a3      	strhlt	r3, [r4, #12]
 800582c:	bd10      	pop	{r4, pc}

0800582e <__swrite>:
 800582e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005832:	461f      	mov	r7, r3
 8005834:	898b      	ldrh	r3, [r1, #12]
 8005836:	4605      	mov	r5, r0
 8005838:	05db      	lsls	r3, r3, #23
 800583a:	460c      	mov	r4, r1
 800583c:	4616      	mov	r6, r2
 800583e:	d505      	bpl.n	800584c <__swrite+0x1e>
 8005840:	2302      	movs	r3, #2
 8005842:	2200      	movs	r2, #0
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	f000 f868 	bl	800591c <_lseek_r>
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	4632      	mov	r2, r6
 8005850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800585a:	463b      	mov	r3, r7
 800585c:	4628      	mov	r0, r5
 800585e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005862:	f000 b817 	b.w	8005894 <_write_r>

08005866 <__sseek>:
 8005866:	b510      	push	{r4, lr}
 8005868:	460c      	mov	r4, r1
 800586a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586e:	f000 f855 	bl	800591c <_lseek_r>
 8005872:	1c43      	adds	r3, r0, #1
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	bf15      	itete	ne
 8005878:	6560      	strne	r0, [r4, #84]	; 0x54
 800587a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800587e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005882:	81a3      	strheq	r3, [r4, #12]
 8005884:	bf18      	it	ne
 8005886:	81a3      	strhne	r3, [r4, #12]
 8005888:	bd10      	pop	{r4, pc}

0800588a <__sclose>:
 800588a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588e:	f000 b813 	b.w	80058b8 <_close_r>
	...

08005894 <_write_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4605      	mov	r5, r0
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	2200      	movs	r2, #0
 800589e:	4c05      	ldr	r4, [pc, #20]	; (80058b4 <_write_r+0x20>)
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fd fa2e 	bl	8002d04 <_write>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_write_r+0x1e>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_write_r+0x1e>
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	200008b0 	.word	0x200008b0

080058b8 <_close_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	2300      	movs	r3, #0
 80058bc:	4c05      	ldr	r4, [pc, #20]	; (80058d4 <_close_r+0x1c>)
 80058be:	4605      	mov	r5, r0
 80058c0:	4608      	mov	r0, r1
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	f7fd fc14 	bl	80030f0 <_close>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_close_r+0x1a>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_close_r+0x1a>
 80058d0:	602b      	str	r3, [r5, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	200008b0 	.word	0x200008b0

080058d8 <_fstat_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	2300      	movs	r3, #0
 80058dc:	4c06      	ldr	r4, [pc, #24]	; (80058f8 <_fstat_r+0x20>)
 80058de:	4605      	mov	r5, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	f7fd fc06 	bl	80030f6 <_fstat>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d102      	bne.n	80058f4 <_fstat_r+0x1c>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	b103      	cbz	r3, 80058f4 <_fstat_r+0x1c>
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	200008b0 	.word	0x200008b0

080058fc <_isatty_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	2300      	movs	r3, #0
 8005900:	4c05      	ldr	r4, [pc, #20]	; (8005918 <_isatty_r+0x1c>)
 8005902:	4605      	mov	r5, r0
 8005904:	4608      	mov	r0, r1
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	f7fd fbfa 	bl	8003100 <_isatty>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_isatty_r+0x1a>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b103      	cbz	r3, 8005916 <_isatty_r+0x1a>
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	200008b0 	.word	0x200008b0

0800591c <_lseek_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4605      	mov	r5, r0
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	2200      	movs	r2, #0
 8005926:	4c05      	ldr	r4, [pc, #20]	; (800593c <_lseek_r+0x20>)
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f7fd fbea 	bl	8003104 <_lseek>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_lseek_r+0x1e>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	b103      	cbz	r3, 800593a <_lseek_r+0x1e>
 8005938:	602b      	str	r3, [r5, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	200008b0 	.word	0x200008b0

08005940 <__ascii_mbtowc>:
 8005940:	b082      	sub	sp, #8
 8005942:	b901      	cbnz	r1, 8005946 <__ascii_mbtowc+0x6>
 8005944:	a901      	add	r1, sp, #4
 8005946:	b142      	cbz	r2, 800595a <__ascii_mbtowc+0x1a>
 8005948:	b14b      	cbz	r3, 800595e <__ascii_mbtowc+0x1e>
 800594a:	7813      	ldrb	r3, [r2, #0]
 800594c:	600b      	str	r3, [r1, #0]
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	1c10      	adds	r0, r2, #0
 8005952:	bf18      	it	ne
 8005954:	2001      	movne	r0, #1
 8005956:	b002      	add	sp, #8
 8005958:	4770      	bx	lr
 800595a:	4610      	mov	r0, r2
 800595c:	e7fb      	b.n	8005956 <__ascii_mbtowc+0x16>
 800595e:	f06f 0001 	mvn.w	r0, #1
 8005962:	e7f8      	b.n	8005956 <__ascii_mbtowc+0x16>

08005964 <__malloc_lock>:
 8005964:	4770      	bx	lr

08005966 <__malloc_unlock>:
 8005966:	4770      	bx	lr

08005968 <_read_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4605      	mov	r5, r0
 800596c:	4608      	mov	r0, r1
 800596e:	4611      	mov	r1, r2
 8005970:	2200      	movs	r2, #0
 8005972:	4c05      	ldr	r4, [pc, #20]	; (8005988 <_read_r+0x20>)
 8005974:	6022      	str	r2, [r4, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fd fb92 	bl	80030a0 <_read>
 800597c:	1c43      	adds	r3, r0, #1
 800597e:	d102      	bne.n	8005986 <_read_r+0x1e>
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	b103      	cbz	r3, 8005986 <_read_r+0x1e>
 8005984:	602b      	str	r3, [r5, #0]
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	200008b0 	.word	0x200008b0

0800598c <__ascii_wctomb>:
 800598c:	b149      	cbz	r1, 80059a2 <__ascii_wctomb+0x16>
 800598e:	2aff      	cmp	r2, #255	; 0xff
 8005990:	bf8b      	itete	hi
 8005992:	238a      	movhi	r3, #138	; 0x8a
 8005994:	700a      	strbls	r2, [r1, #0]
 8005996:	6003      	strhi	r3, [r0, #0]
 8005998:	2001      	movls	r0, #1
 800599a:	bf88      	it	hi
 800599c:	f04f 30ff 	movhi.w	r0, #4294967295
 80059a0:	4770      	bx	lr
 80059a2:	4608      	mov	r0, r1
 80059a4:	4770      	bx	lr
	...

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
