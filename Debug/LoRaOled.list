
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  08008c30  08008c30  00018c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b180  0800b180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b188  0800b188  0001b188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b18c  0800b18c  0001b18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000000  0800b190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006dc  200001f8  0800b384  000201f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200008d4  0800b384  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015bd2  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033f1  00000000  00000000  00035def  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a3ea  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d80  00000000  00000000  000435d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001590  00000000  00000000  00044350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016944  00000000  00000000  000458e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000db5d  00000000  00000000  0005c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00076d6c  00000000  00000000  00069d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e0aed  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003da0  00000000  00000000  000e0b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c14 	.word	0x08008c14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08008c14 	.word	0x08008c14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b974 	b.w	8000e68 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	fbbc f7fe 	udiv	r7, ip, lr
 8000bce:	fa1f f885 	uxth.w	r8, r5
 8000bd2:	fb0e c317 	mls	r3, lr, r7, ip
 8000bd6:	fb07 f908 	mul.w	r9, r7, r8
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be0:	4599      	cmp	r9, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 31ff 	add.w	r1, r7, #4294967295
 8000bea:	f080 811c 	bcs.w	8000e26 <__udivmoddi4+0x28e>
 8000bee:	4599      	cmp	r9, r3
 8000bf0:	f240 8119 	bls.w	8000e26 <__udivmoddi4+0x28e>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	eba3 0309 	sub.w	r3, r3, r9
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	fb00 f108 	mul.w	r1, r0, r8
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0e:	42a1      	cmp	r1, r4
 8000c10:	d909      	bls.n	8000c26 <__udivmoddi4+0x8e>
 8000c12:	192c      	adds	r4, r5, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 8107 	bcs.w	8000e2a <__udivmoddi4+0x292>
 8000c1c:	42a1      	cmp	r1, r4
 8000c1e:	f240 8104 	bls.w	8000e2a <__udivmoddi4+0x292>
 8000c22:	3802      	subs	r0, #2
 8000c24:	442c      	add	r4, r5
 8000c26:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	1a64      	subs	r4, r4, r1
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	2300      	movs	r3, #0
 8000c32:	40d4      	lsrs	r4, r2
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80ec 	beq.w	8000e20 <__udivmoddi4+0x288>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d148      	bne.n	8000cf0 <__udivmoddi4+0x158>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fb 	bhi.w	8000e5e <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469c      	mov	ip, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	2701      	movs	r7, #1
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c92:	fa1f f985 	uxth.w	r9, r5
 8000c96:	fbb1 fef8 	udiv	lr, r1, r8
 8000c9a:	fb08 111e 	mls	r1, r8, lr, r1
 8000c9e:	fb09 f00e 	mul.w	r0, r9, lr
 8000ca2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ca6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x126>
 8000cae:	18eb      	adds	r3, r5, r3
 8000cb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x124>
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	f200 80cd 	bhi.w	8000e56 <__udivmoddi4+0x2be>
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	fb09 f900 	mul.w	r9, r9, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd2:	45a1      	cmp	r9, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x14e>
 8000cd6:	192c      	adds	r4, r5, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x14c>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f200 80b6 	bhi.w	8000e50 <__udivmoddi4+0x2b8>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	eba4 0409 	sub.w	r4, r4, r9
 8000cea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000cee:	e79e      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cf0:	f1c7 0520 	rsb	r5, r7, #32
 8000cf4:	40bb      	lsls	r3, r7
 8000cf6:	fa22 fc05 	lsr.w	ip, r2, r5
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa21 f405 	lsr.w	r4, r1, r5
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d0a:	fa1f f88c 	uxth.w	r8, ip
 8000d0e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d12:	fa20 f305 	lsr.w	r3, r0, r5
 8000d16:	40b9      	lsls	r1, r7
 8000d18:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	0c0b      	lsrs	r3, r1, #16
 8000d20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d24:	45a2      	cmp	sl, r4
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2b4>
 8000d3c:	45a2      	cmp	sl, r4
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2b4>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4464      	add	r4, ip
 8000d48:	eba4 040a 	sub.w	r4, r4, sl
 8000d4c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d50:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d54:	fb00 fa08 	mul.w	sl, r0, r8
 8000d58:	b289      	uxth	r1, r1
 8000d5a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d5e:	45a2      	cmp	sl, r4
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x1dc>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	d26b      	bcs.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d969      	bls.n	8000e44 <__udivmoddi4+0x2ac>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4464      	add	r4, ip
 8000d74:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d78:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7c:	eba4 040a 	sub.w	r4, r4, sl
 8000d80:	454c      	cmp	r4, r9
 8000d82:	4641      	mov	r1, r8
 8000d84:	46ce      	mov	lr, r9
 8000d86:	d354      	bcc.n	8000e32 <__udivmoddi4+0x29a>
 8000d88:	d051      	beq.n	8000e2e <__udivmoddi4+0x296>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d069      	beq.n	8000e62 <__udivmoddi4+0x2ca>
 8000d8e:	1a5a      	subs	r2, r3, r1
 8000d90:	eb64 040e 	sbc.w	r4, r4, lr
 8000d94:	fa04 f505 	lsl.w	r5, r4, r5
 8000d98:	fa22 f307 	lsr.w	r3, r2, r7
 8000d9c:	40fc      	lsrs	r4, r7
 8000d9e:	431d      	orrs	r5, r3
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	4095      	lsls	r5, r2
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	fa21 f003 	lsr.w	r0, r1, r3
 8000db2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000db6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dba:	fa1f f985 	uxth.w	r9, r5
 8000dbe:	fb08 0017 	mls	r0, r8, r7, r0
 8000dc2:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc6:	4091      	lsls	r1, r2
 8000dc8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	0c19      	lsrs	r1, r3, #16
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	458c      	cmp	ip, r1
 8000dd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x254>
 8000ddc:	1869      	adds	r1, r5, r1
 8000dde:	f107 30ff 	add.w	r0, r7, #4294967295
 8000de2:	d231      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000de4:	458c      	cmp	ip, r1
 8000de6:	d92f      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000de8:	3f02      	subs	r7, #2
 8000dea:	4429      	add	r1, r5
 8000dec:	eba1 010c 	sub.w	r1, r1, ip
 8000df0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000df4:	fb08 1c10 	mls	ip, r8, r0, r1
 8000df8:	fb00 fe09 	mul.w	lr, r0, r9
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d218      	bcs.n	8000e40 <__udivmoddi4+0x2a8>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d916      	bls.n	8000e40 <__udivmoddi4+0x2a8>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1e:	e73a      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e20:	4637      	mov	r7, r6
 8000e22:	4630      	mov	r0, r6
 8000e24:	e708      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e26:	460f      	mov	r7, r1
 8000e28:	e6e6      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	e6fb      	b.n	8000c26 <__udivmoddi4+0x8e>
 8000e2e:	4543      	cmp	r3, r8
 8000e30:	d2ab      	bcs.n	8000d8a <__udivmoddi4+0x1f2>
 8000e32:	ebb8 0102 	subs.w	r1, r8, r2
 8000e36:	eb69 020c 	sbc.w	r2, r9, ip
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	4696      	mov	lr, r2
 8000e3e:	e7a4      	b.n	8000d8a <__udivmoddi4+0x1f2>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e7e8      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e795      	b.n	8000d74 <__udivmoddi4+0x1dc>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e7cf      	b.n	8000dec <__udivmoddi4+0x254>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	442c      	add	r4, r5
 8000e54:	e747      	b.n	8000ce6 <__udivmoddi4+0x14e>
 8000e56:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5a:	442b      	add	r3, r5
 8000e5c:	e72f      	b.n	8000cbe <__udivmoddi4+0x126>
 8000e5e:	4638      	mov	r0, r7
 8000e60:	e707      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e62:	4637      	mov	r7, r6
 8000e64:	e6e8      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_InitTick+0x3c>)
{
 8000e70:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_InitTick+0x40>)
 8000e7e:	6810      	ldr	r0, [r2, #0]
 8000e80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e84:	f000 fada 	bl	800143c <HAL_SYSTICK_Config>
 8000e88:	4604      	mov	r4, r0
 8000e8a:	b958      	cbnz	r0, 8000ea4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	2d0f      	cmp	r5, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	4602      	mov	r2, r0
 8000e92:	4629      	mov	r1, r5
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fa8e 	bl	80013b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_InitTick+0x44>)
 8000ea0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e7fc      	b.n	8000ea2 <HAL_InitTick+0x36>
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x20>)
{
 8000eb6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	f000 fa67 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffd0 	bl	8000e6c <HAL_InitTick>
  HAL_MspInit();
 8000ecc:	f002 feb8 	bl	8003c40 <HAL_MspInit>
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x10>)
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_IncTick+0x14>)
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000062c 	.word	0x2000062c
 8000eec:	20000000 	.word	0x20000000

08000ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef0:	4b01      	ldr	r3, [pc, #4]	; (8000ef8 <HAL_GetTick+0x8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000062c 	.word	0x2000062c

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff6 	bl	8000ef0 <HAL_GetTick>
 8000f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f08:	bf1e      	ittt	ne
 8000f0a:	4b04      	ldrne	r3, [pc, #16]	; (8000f1c <HAL_Delay+0x20>)
 8000f0c:	781b      	ldrbne	r3, [r3, #0]
 8000f0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	1b40      	subs	r0, r0, r5
 8000f16:	42a0      	cmp	r0, r4
 8000f18:	d3fa      	bcc.n	8000f10 <HAL_Delay+0x14>
  {
  }
}
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f24:	4770      	bx	lr

08000f26 <HAL_ADC_LevelOutOfWindowCallback>:
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f28:	6803      	ldr	r3, [r0, #0]
{
 8000f2a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f2c:	685a      	ldr	r2, [r3, #4]
{
 8000f2e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f30:	0690      	lsls	r0, r2, #26
 8000f32:	d527      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	0791      	lsls	r1, r2, #30
 8000f38:	d524      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f3e:	bf5e      	ittt	pl
 8000f40:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f42:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000f46:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f4e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f52:	d110      	bne.n	8000f76 <HAL_ADC_IRQHandler+0x4e>
 8000f54:	7b22      	ldrb	r2, [r4, #12]
 8000f56:	b972      	cbnz	r2, 8000f76 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	f022 0220 	bic.w	r2, r2, #32
 8000f5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f66:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f6a:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6c:	bf5e      	ittt	pl
 8000f6e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000f70:	f043 0301 	orrpl.w	r3, r3, #1
 8000f74:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f001 ff40 	bl	8002dfc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f7c:	f06f 0212 	mvn.w	r2, #18
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	0610      	lsls	r0, r2, #24
 8000f8a:	d530      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	0751      	lsls	r1, r2, #29
 8000f90:	d52d      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f94:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f96:	bf5e      	ittt	pl
 8000f98:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f9a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000f9e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000fa6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000faa:	d00a      	beq.n	8000fc2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fac:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fae:	0550      	lsls	r0, r2, #21
 8000fb0:	d416      	bmi.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fb8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fbc:	d110      	bne.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fbe:	7b22      	ldrb	r2, [r4, #12]
 8000fc0:	b972      	cbnz	r2, 8000fe0 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd0:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd6:	bf5e      	ittt	pl
 8000fd8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000fda:	f043 0301 	orrpl.w	r3, r3, #1
 8000fde:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f000 f9d5 	bl	8001390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fe6:	f06f 020c 	mvn.w	r2, #12
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	0652      	lsls	r2, r2, #25
 8000ff4:	d50d      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	07db      	lsls	r3, r3, #31
 8000ffa:	d50a      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ffe:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	f7ff ff8e 	bl	8000f26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100a:	f06f 0201 	mvn.w	r2, #1
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001012:	bd10      	pop	{r4, pc}

08001014 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001014:	2300      	movs	r3, #0
{ 
 8001016:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001018:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800101e:	2b01      	cmp	r3, #1
 8001020:	d06d      	beq.n	80010fe <HAL_ADC_ConfigChannel+0xea>
 8001022:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001026:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800102a:	2d06      	cmp	r5, #6
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001032:	680c      	ldr	r4, [r1, #0]
 8001034:	d823      	bhi.n	800107e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001036:	261f      	movs	r6, #31
 8001038:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800103a:	3b05      	subs	r3, #5
 800103c:	409e      	lsls	r6, r3
 800103e:	ea25 0506 	bic.w	r5, r5, r6
 8001042:	fa04 f303 	lsl.w	r3, r4, r3
 8001046:	432b      	orrs	r3, r5
 8001048:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800104a:	2c09      	cmp	r4, #9
 800104c:	688b      	ldr	r3, [r1, #8]
 800104e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001052:	f04f 0107 	mov.w	r1, #7
 8001056:	d92a      	bls.n	80010ae <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001058:	68d6      	ldr	r6, [r2, #12]
 800105a:	3d1e      	subs	r5, #30
 800105c:	40a9      	lsls	r1, r5
 800105e:	ea26 0101 	bic.w	r1, r6, r1
 8001062:	40ab      	lsls	r3, r5
 8001064:	430b      	orrs	r3, r1
 8001066:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001068:	f1a4 0310 	sub.w	r3, r4, #16
 800106c:	2b01      	cmp	r3, #1
 800106e:	d926      	bls.n	80010be <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001072:	2200      	movs	r2, #0
 8001074:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001078:	4618      	mov	r0, r3
 800107a:	b002      	add	sp, #8
 800107c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800107e:	2d0c      	cmp	r5, #12
 8001080:	f04f 051f 	mov.w	r5, #31
 8001084:	d809      	bhi.n	800109a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001086:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001088:	3b23      	subs	r3, #35	; 0x23
 800108a:	409d      	lsls	r5, r3
 800108c:	ea26 0505 	bic.w	r5, r6, r5
 8001090:	fa04 f303 	lsl.w	r3, r4, r3
 8001094:	432b      	orrs	r3, r5
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	e7d7      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800109a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800109c:	3b41      	subs	r3, #65	; 0x41
 800109e:	409d      	lsls	r5, r3
 80010a0:	ea26 0505 	bic.w	r5, r6, r5
 80010a4:	fa04 f303 	lsl.w	r3, r4, r3
 80010a8:	432b      	orrs	r3, r5
 80010aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010ac:	e7cd      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ae:	6916      	ldr	r6, [r2, #16]
 80010b0:	40a9      	lsls	r1, r5
 80010b2:	ea26 0101 	bic.w	r1, r6, r1
 80010b6:	40ab      	lsls	r3, r5
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6113      	str	r3, [r2, #16]
 80010bc:	e7d4      	b.n	8001068 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_ADC_ConfigChannel+0xf0>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d116      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c4:	6893      	ldr	r3, [r2, #8]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	d4d2      	bmi.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ca:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010cc:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d2:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010d4:	d1cc      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_ADC_ConfigChannel+0xf4>)
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_ADC_ConfigChannel+0xf8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80010e0:	230a      	movs	r3, #10
 80010e2:	4353      	muls	r3, r2
            wait_loop_index--;
 80010e4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c1      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80010ec:	9b01      	ldr	r3, [sp, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	e7f8      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e7b9      	b.n	8001072 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80010fe:	2302      	movs	r3, #2
 8001100:	e7ba      	b.n	8001078 <HAL_ADC_ConfigChannel+0x64>
 8001102:	bf00      	nop
 8001104:	40012400 	.word	0x40012400
 8001108:	20000020 	.word	0x20000020
 800110c:	000f4240 	.word	0x000f4240

08001110 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001110:	2300      	movs	r3, #0
{
 8001112:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001114:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001116:	6803      	ldr	r3, [r0, #0]
{
 8001118:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	07d2      	lsls	r2, r2, #31
 800111e:	d502      	bpl.n	8001126 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
}
 8001122:	b002      	add	sp, #8
 8001124:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <ADC_Enable+0x68>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <ADC_Enable+0x6c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001138:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800113a:	9b01      	ldr	r3, [sp, #4]
 800113c:	b9c3      	cbnz	r3, 8001170 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800113e:	f7ff fed7 	bl	8000ef0 <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	689d      	ldr	r5, [r3, #8]
 8001148:	f015 0501 	ands.w	r5, r5, #1
 800114c:	d1e8      	bne.n	8001120 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800114e:	f7ff fecf 	bl	8000ef0 <HAL_GetTick>
 8001152:	1b80      	subs	r0, r0, r6
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800115a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001166:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800116e:	e7d8      	b.n	8001122 <ADC_Enable+0x12>
      wait_loop_index--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	e7e0      	b.n	8001138 <ADC_Enable+0x28>
 8001176:	bf00      	nop
 8001178:	20000020 	.word	0x20000020
 800117c:	000f4240 	.word	0x000f4240

08001180 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001180:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001184:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001186:	2b01      	cmp	r3, #1
{
 8001188:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800118a:	d058      	beq.n	800123e <HAL_ADC_Start_IT+0xbe>
 800118c:	2301      	movs	r3, #1
 800118e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001192:	f7ff ffbd 	bl	8001110 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001196:	2800      	cmp	r0, #0
 8001198:	d14d      	bne.n	8001236 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d104      	bne.n	80011bc <HAL_ADC_Start_IT+0x3c>
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_ADC_Start_IT+0xc8>)
 80011b4:	684a      	ldr	r2, [r1, #4]
 80011b6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80011ba:	d132      	bne.n	8001222 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011c2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011c6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c8:	bf41      	itttt	mi
 80011ca:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80011cc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011d0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011d4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011dc:	bf1c      	itt	ne
 80011de:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80011e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011ec:	f06f 0202 	mvn.w	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001200:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001204:	d113      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d105      	bne.n	8001218 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800120c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001210:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001212:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001216:	d10a      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001224:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001228:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800122a:	684a      	ldr	r2, [r1, #4]
 800122c:	e7cb      	b.n	80011c6 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001234:	e7f3      	b.n	800121e <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8001236:	2300      	movs	r3, #0
 8001238:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800123c:	e7f0      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800123e:	2002      	movs	r0, #2
 8001240:	e7ee      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
 8001242:	bf00      	nop
 8001244:	40012800 	.word	0x40012800
 8001248:	40012400 	.word	0x40012400

0800124c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800124e:	6803      	ldr	r3, [r0, #0]
{
 8001250:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	07d2      	lsls	r2, r2, #31
 8001256:	d401      	bmi.n	800125c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
}
 800125a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001264:	f7ff fe44 	bl	8000ef0 <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	07db      	lsls	r3, r3, #31
 8001270:	d5f2      	bpl.n	8001258 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001272:	f7ff fe3d 	bl	8000ef0 <HAL_GetTick>
 8001276:	1b40      	subs	r0, r0, r5
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800128e:	e7e4      	b.n	800125a <ADC_ConversionStop_Disable+0xe>

08001290 <HAL_ADC_Init>:
{
 8001290:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001292:	4604      	mov	r4, r0
 8001294:	2800      	cmp	r0, #0
 8001296:	d070      	beq.n	800137a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800129a:	b923      	cbnz	r3, 80012a6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800129e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80012a2:	f002 fcf7 	bl	8003c94 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ffd0 	bl	800124c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ae:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	d163      	bne.n	800137e <HAL_ADC_Init+0xee>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d161      	bne.n	800137e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ba:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ca:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80012ce:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d0:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012da:	d037      	beq.n	800134c <HAL_ADC_Init+0xbc>
 80012dc:	2901      	cmp	r1, #1
 80012de:	bf14      	ite	ne
 80012e0:	4606      	movne	r6, r0
 80012e2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e6:	7d25      	ldrb	r5, [r4, #20]
 80012e8:	2d01      	cmp	r5, #1
 80012ea:	d106      	bne.n	80012fa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012ec:	bb83      	cbnz	r3, 8001350 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80012f6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80012fa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001300:	685d      	ldr	r5, [r3, #4]
 8001302:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001306:	ea45 0506 	orr.w	r5, r5, r6
 800130a:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800130c:	689e      	ldr	r6, [r3, #8]
 800130e:	4d1e      	ldr	r5, [pc, #120]	; (8001388 <HAL_ADC_Init+0xf8>)
 8001310:	ea05 0506 	and.w	r5, r5, r6
 8001314:	ea45 0502 	orr.w	r5, r5, r2
 8001318:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800131a:	d001      	beq.n	8001320 <HAL_ADC_Init+0x90>
 800131c:	2901      	cmp	r1, #1
 800131e:	d120      	bne.n	8001362 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001320:	6921      	ldr	r1, [r4, #16]
 8001322:	3901      	subs	r1, #1
 8001324:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001326:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001328:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800132c:	4329      	orrs	r1, r5
 800132e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_ADC_Init+0xfc>)
 8001334:	400b      	ands	r3, r1
 8001336:	429a      	cmp	r2, r3
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800133a:	2300      	movs	r3, #0
 800133c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800133e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001340:	f023 0303 	bic.w	r3, r3, #3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800134c:	460e      	mov	r6, r1
 800134e:	e7ca      	b.n	80012e6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001360:	e7cb      	b.n	80012fa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001362:	2100      	movs	r1, #0
 8001364:	e7df      	b.n	8001326 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001368:	f023 0312 	bic.w	r3, r3, #18
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7e5      	b.n	800134a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	62a3      	str	r3, [r4, #40]	; 0x28
 8001384:	e7f9      	b.n	800137a <HAL_ADC_Init+0xea>
 8001386:	bf00      	nop
 8001388:	ffe1f7fd 	.word	0xffe1f7fd
 800138c:	ff1f0efe 	.word	0xff1f0efe

08001390 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001390:	4770      	bx	lr
	...

08001394 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001396:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80013ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b570      	push	{r4, r5, r6, lr}
 80013bc:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013be:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c6:	f1c4 0507 	rsb	r5, r4, #7
 80013ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013cc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	bf28      	it	cs
 80013d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	bf98      	it	ls
 80013d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013da:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	bf88      	it	hi
 80013e0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e2:	ea21 0303 	bic.w	r3, r1, r3
 80013e6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	fa06 f404 	lsl.w	r4, r6, r4
 80013ec:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80013f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	bfa8      	it	ge
 80013f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80013fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	bfb8      	it	lt
 8001402:	4a06      	ldrlt	r2, [pc, #24]	; (800141c <HAL_NVIC_SetPriority+0x64>)
 8001404:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	bfab      	itete	ge
 8001408:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed14 	.word	0xe000ed14

08001420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001420:	2800      	cmp	r0, #0
 8001422:	db08      	blt.n	8001436 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001424:	2301      	movs	r3, #1
 8001426:	0942      	lsrs	r2, r0, #5
 8001428:	f000 001f 	and.w	r0, r0, #31
 800142c:	fa03 f000 	lsl.w	r0, r3, r0
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <HAL_NVIC_EnableIRQ+0x18>)
 8001432:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	3801      	subs	r0, #1
 800143e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001442:	d20a      	bcs.n	800145a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001468:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800146c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800146e:	2b02      	cmp	r3, #2
 8001470:	d003      	beq.n	800147a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	2304      	movs	r3, #4
 8001474:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001476:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001478:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_DMA_Abort_IT+0x88>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x6a>
 8001492:	3214      	adds	r2, #20
 8001494:	4293      	cmp	r3, r2
 8001496:	d01e      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x6e>
 8001498:	3214      	adds	r2, #20
 800149a:	4293      	cmp	r3, r2
 800149c:	d01d      	beq.n	80014da <HAL_DMA_Abort_IT+0x72>
 800149e:	3214      	adds	r2, #20
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01d      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x78>
 80014a4:	3214      	adds	r2, #20
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x7e>
 80014aa:	3214      	adds	r2, #20
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf0c      	ite	eq
 80014b0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80014b4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80014ba:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014bc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014be:	2301      	movs	r3, #1
 80014c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80014c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80014c6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014ca:	b17b      	cbz	r3, 80014ec <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80014cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	4620      	mov	r0, r4
 80014d0:	e7d2      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014d2:	2301      	movs	r3, #1
 80014d4:	e7f0      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014d6:	2310      	movs	r3, #16
 80014d8:	e7ee      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	e7eb      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	e7e8      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	e7e5      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	4618      	mov	r0, r3
 80014ee:	e7c3      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
 80014f0:	40020008 	.word	0x40020008
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80014fe:	4626      	mov	r6, r4
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016a8 <HAL_GPIO_Init+0x1b0>
 8001506:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80016ac <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	680a      	ldr	r2, [r1, #0]
 800150c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001512:	b003      	add	sp, #12
 8001514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001518:	f04f 0801 	mov.w	r8, #1
 800151c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001520:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001524:	4590      	cmp	r8, r2
 8001526:	d17e      	bne.n	8001626 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001528:	684d      	ldr	r5, [r1, #4]
 800152a:	2d12      	cmp	r5, #18
 800152c:	f000 80a9 	beq.w	8001682 <HAL_GPIO_Init+0x18a>
 8001530:	f200 8082 	bhi.w	8001638 <HAL_GPIO_Init+0x140>
 8001534:	2d02      	cmp	r5, #2
 8001536:	f000 80a1 	beq.w	800167c <HAL_GPIO_Init+0x184>
 800153a:	d876      	bhi.n	800162a <HAL_GPIO_Init+0x132>
 800153c:	2d00      	cmp	r5, #0
 800153e:	f000 8088 	beq.w	8001652 <HAL_GPIO_Init+0x15a>
 8001542:	2d01      	cmp	r5, #1
 8001544:	f000 8098 	beq.w	8001678 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	2aff      	cmp	r2, #255	; 0xff
 800154e:	bf93      	iteet	ls
 8001550:	4682      	movls	sl, r0
 8001552:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001556:	3d08      	subhi	r5, #8
 8001558:	f8d0 b000 	ldrls.w	fp, [r0]
 800155c:	bf92      	itee	ls
 800155e:	00b5      	lslls	r5, r6, #2
 8001560:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001564:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001566:	fa09 f805 	lsl.w	r8, r9, r5
 800156a:	ea2b 0808 	bic.w	r8, fp, r8
 800156e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001572:	bf88      	it	hi
 8001574:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001578:	ea48 0505 	orr.w	r5, r8, r5
 800157c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001584:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001588:	d04d      	beq.n	8001626 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4f44      	ldr	r7, [pc, #272]	; (800169c <HAL_GPIO_Init+0x1a4>)
 800158c:	f026 0803 	bic.w	r8, r6, #3
 8001590:	69bd      	ldr	r5, [r7, #24]
 8001592:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001596:	f045 0501 	orr.w	r5, r5, #1
 800159a:	61bd      	str	r5, [r7, #24]
 800159c:	69bd      	ldr	r5, [r7, #24]
 800159e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80015a2:	f005 0501 	and.w	r5, r5, #1
 80015a6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80015b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	fa09 f90b 	lsl.w	r9, r9, fp
 80015ba:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015be:	4d38      	ldr	r5, [pc, #224]	; (80016a0 <HAL_GPIO_Init+0x1a8>)
 80015c0:	42a8      	cmp	r0, r5
 80015c2:	d063      	beq.n	800168c <HAL_GPIO_Init+0x194>
 80015c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c8:	42a8      	cmp	r0, r5
 80015ca:	d061      	beq.n	8001690 <HAL_GPIO_Init+0x198>
 80015cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d0:	42a8      	cmp	r0, r5
 80015d2:	d05f      	beq.n	8001694 <HAL_GPIO_Init+0x19c>
 80015d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d8:	42a8      	cmp	r0, r5
 80015da:	bf0c      	ite	eq
 80015dc:	2503      	moveq	r5, #3
 80015de:	2504      	movne	r5, #4
 80015e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80015e4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80015e8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015f2:	bf14      	ite	ne
 80015f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f6:	4395      	biceq	r5, r2
 80015f8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015fa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	bf14      	ite	ne
 8001602:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	4395      	biceq	r5, r2
 8001606:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001608:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800160e:	bf14      	ite	ne
 8001610:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001612:	4395      	biceq	r5, r2
 8001614:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001616:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	bf14      	ite	ne
 800161e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001620:	ea25 0202 	biceq.w	r2, r5, r2
 8001624:	60da      	str	r2, [r3, #12]
	position++;
 8001626:	3601      	adds	r6, #1
 8001628:	e76f      	b.n	800150a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800162a:	2d03      	cmp	r5, #3
 800162c:	d022      	beq.n	8001674 <HAL_GPIO_Init+0x17c>
 800162e:	2d11      	cmp	r5, #17
 8001630:	d18a      	bne.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001632:	68cc      	ldr	r4, [r1, #12]
 8001634:	3404      	adds	r4, #4
          break;
 8001636:	e787      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001638:	4f1a      	ldr	r7, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x1ac>)
 800163a:	42bd      	cmp	r5, r7
 800163c:	d009      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800163e:	d812      	bhi.n	8001666 <HAL_GPIO_Init+0x16e>
 8001640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80016b0 <HAL_GPIO_Init+0x1b8>
 8001644:	454d      	cmp	r5, r9
 8001646:	d004      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 8001648:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800164c:	454d      	cmp	r5, r9
 800164e:	f47f af7b 	bne.w	8001548 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	688c      	ldr	r4, [r1, #8]
 8001654:	b1c4      	cbz	r4, 8001688 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001656:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001658:	bf0c      	ite	eq
 800165a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800165e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001662:	2408      	movs	r4, #8
 8001664:	e770      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001666:	4565      	cmp	r5, ip
 8001668:	d0f3      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166a:	4575      	cmp	r5, lr
 800166c:	d0f1      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016b4 <HAL_GPIO_Init+0x1bc>
 8001672:	e7eb      	b.n	800164c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2400      	movs	r4, #0
 8001676:	e767      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	68cc      	ldr	r4, [r1, #12]
          break;
 800167a:	e765      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167c:	68cc      	ldr	r4, [r1, #12]
 800167e:	3408      	adds	r4, #8
          break;
 8001680:	e762      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001682:	68cc      	ldr	r4, [r1, #12]
 8001684:	340c      	adds	r4, #12
          break;
 8001686:	e75f      	b.n	8001548 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001688:	2404      	movs	r4, #4
 800168a:	e75d      	b.n	8001548 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	2500      	movs	r5, #0
 800168e:	e7a7      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001690:	2501      	movs	r5, #1
 8001692:	e7a5      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001694:	2502      	movs	r5, #2
 8001696:	e7a3      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001698:	40010400 	.word	0x40010400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10320000 	.word	0x10320000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	10220000 	.word	0x10220000

080016b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	6883      	ldr	r3, [r0, #8]
 80016ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80016bc:	bf14      	ite	ne
 80016be:	2001      	movne	r0, #1
 80016c0:	2000      	moveq	r0, #0
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	b10a      	cbz	r2, 80016ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c6:	6101      	str	r1, [r0, #16]
  }
}
 80016c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	e7fb      	b.n	80016c6 <HAL_GPIO_WritePin+0x2>

080016ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016ce:	68c3      	ldr	r3, [r0, #12]
 80016d0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	bf14      	ite	ne
 80016d4:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	6101      	streq	r1, [r0, #16]
  }
}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	4201      	tst	r1, r0
 80016e4:	d002      	beq.n	80016ec <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	f001 fb64 	bl	8002db4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016ec:	bd08      	pop	{r3, pc}
 80016ee:	bf00      	nop
 80016f0:	40010400 	.word	0x40010400

080016f4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	694b      	ldr	r3, [r1, #20]
 80016fa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80016fe:	d010      	beq.n	8001722 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001700:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001704:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001706:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001708:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800170a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800170e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001712:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
 8001720:	4770      	bx	lr
  }
  return HAL_OK;
 8001722:	4618      	mov	r0, r3
}
 8001724:	4770      	bx	lr

08001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	4604      	mov	r4, r0
 800172c:	4616      	mov	r6, r2
 800172e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001730:	b28f      	uxth	r7, r1
 8001732:	6825      	ldr	r5, [r4, #0]
 8001734:	6968      	ldr	r0, [r5, #20]
 8001736:	ea37 0000 	bics.w	r0, r7, r0
 800173a:	d017      	beq.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800173c:	696b      	ldr	r3, [r5, #20]
 800173e:	055a      	lsls	r2, r3, #21
 8001740:	d516      	bpl.n	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001742:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001744:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001750:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001756:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800175e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001760:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001770:	1c73      	adds	r3, r6, #1
 8001772:	d0df      	beq.n	8001734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff fbbc 	bl	8000ef0 <HAL_GetTick>
 8001778:	eba0 0008 	sub.w	r0, r0, r8
 800177c:	42b0      	cmp	r0, r6
 800177e:	d801      	bhi.n	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001780:	2e00      	cmp	r6, #0
 8001782:	d1d6      	bne.n	8001732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001784:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001786:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001788:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800178e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	e7e4      	b.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800179a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800179a:	b570      	push	{r4, r5, r6, lr}
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	075b      	lsls	r3, r3, #29
 80017a8:	d501      	bpl.n	80017ae <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff ffa0 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 80017b4:	b9a8      	cbnz	r0, 80017e2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	1c6a      	adds	r2, r5, #1
 80017b8:	d0f3      	beq.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff fb99 	bl	8000ef0 <HAL_GetTick>
 80017be:	1b80      	subs	r0, r0, r6
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	d801      	bhi.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	d1ec      	bne.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017c8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ca:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017dc:	f042 0220 	orr.w	r2, r2, #32
 80017e0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e7e2      	b.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080017e6 <I2C_WaitOnFlagUntilTimeout>:
{
 80017e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f2:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80017f6:	b28d      	uxth	r5, r1
 80017f8:	6821      	ldr	r1, [r4, #0]
 80017fa:	f1b9 0f01 	cmp.w	r9, #1
 80017fe:	bf0c      	ite	eq
 8001800:	694b      	ldreq	r3, [r1, #20]
 8001802:	698b      	ldrne	r3, [r1, #24]
 8001804:	ea35 0303 	bics.w	r3, r5, r3
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	4598      	cmp	r8, r3
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e016      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001816:	1c7b      	adds	r3, r7, #1
 8001818:	d0ef      	beq.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff fb69 	bl	8000ef0 <HAL_GetTick>
 800181e:	1b80      	subs	r0, r0, r6
 8001820:	42b8      	cmp	r0, r7
 8001822:	d801      	bhi.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001824:	2f00      	cmp	r7, #0
 8001826:	d1e7      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001828:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800182a:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800182c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800182e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001830:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001834:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001838:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800183a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	d501      	bpl.n	800185c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff ff49 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 8001862:	b9a8      	cbnz	r0, 8001890 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001864:	1c6a      	adds	r2, r5, #1
 8001866:	d0f3      	beq.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fb42 	bl	8000ef0 <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	42a8      	cmp	r0, r5
 8001870:	d801      	bhi.n	8001876 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d1ec      	bne.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001876:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001878:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800187a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800187c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001880:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001884:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001886:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e7e2      	b.n	800185a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08001894 <I2C_RequestMemoryWrite>:
{
 8001894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001898:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189a:	6802      	ldr	r2, [r0, #0]
{
 800189c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	6813      	ldr	r3, [r2, #0]
{
 80018a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
{
 80018a8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80018b4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b6:	f7ff ff96 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	b118      	cbz	r0, 80018c4 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
}
 80018be:	b004      	add	sp, #16
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80018ca:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018ce:	4633      	mov	r3, r6
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <I2C_RequestMemoryWrite+0x98>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff27 	bl	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1ef      	bne.n	80018bc <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	9003      	str	r0, [sp, #12]
 80018e0:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f0:	f7ff ffaa 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f4:	b140      	cbz	r0, 8001908 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	bf01      	itttt	eq
 80018fc:	6822      	ldreq	r2, [r4, #0]
 80018fe:	6813      	ldreq	r3, [r2, #0]
 8001900:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001904:	6013      	streq	r3, [r2, #0]
 8001906:	e7d9      	b.n	80018bc <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001908:	f1b8 0f01 	cmp.w	r8, #1
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	d102      	bne.n	8001916 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001910:	b2ed      	uxtb	r5, r5
 8001912:	611d      	str	r5, [r3, #16]
 8001914:	e7d3      	b.n	80018be <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001916:	0a2a      	lsrs	r2, r5, #8
 8001918:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800191c:	4632      	mov	r2, r6
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff92 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001924:	2800      	cmp	r0, #0
 8001926:	d1e6      	bne.n	80018f6 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	e7f1      	b.n	8001910 <I2C_RequestMemoryWrite+0x7c>
 800192c:	00010002 	.word	0x00010002

08001930 <HAL_I2C_Init>:
{
 8001930:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001932:	4604      	mov	r4, r0
 8001934:	b908      	cbnz	r0, 800193a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
}
 8001938:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800193e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001942:	b91b      	cbnz	r3, 800194c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001948:	f002 f9da 	bl	8003d00 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800194e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f000 fba0 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d84d      	bhi.n	8001a04 <HAL_I2C_Init+0xd4>
 8001968:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_I2C_Init+0x13c>)
 800196a:	4290      	cmp	r0, r2
 800196c:	d9e3      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800196e:	4940      	ldr	r1, [pc, #256]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001970:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001976:	6855      	ldr	r5, [r2, #4]
 8001978:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800197c:	430d      	orrs	r5, r1
 800197e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001980:	6a15      	ldr	r5, [r2, #32]
 8001982:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001986:	3101      	adds	r1, #1
 8001988:	4329      	orrs	r1, r5
 800198a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	69d1      	ldr	r1, [r2, #28]
 800198e:	4d36      	ldr	r5, [pc, #216]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001990:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001994:	42ab      	cmp	r3, r5
 8001996:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800199a:	f100 30ff 	add.w	r0, r0, #4294967295
 800199e:	d848      	bhi.n	8001a32 <HAL_I2C_Init+0x102>
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	bf38      	it	cc
 80019b0:	2304      	movcc	r3, #4
 80019b2:	430b      	orrs	r3, r1
 80019b4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80019bc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80019c0:	4303      	orrs	r3, r0
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c6:	6891      	ldr	r1, [r2, #8]
 80019c8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80019cc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80019d0:	4303      	orrs	r3, r0
 80019d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019da:	68d1      	ldr	r1, [r2, #12]
 80019dc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80019e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019e4:	4303      	orrs	r3, r0
 80019e6:	430b      	orrs	r3, r1
 80019e8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80019ea:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a02:	e799      	b.n	8001938 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_I2C_Init+0x144>)
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d995      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0a:	4e19      	ldr	r6, [pc, #100]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001a10:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a14:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a18:	6855      	ldr	r5, [r2, #4]
 8001a1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a1e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a20:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a24:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a26:	6a15      	ldr	r5, [r2, #32]
 8001a28:	fbb1 f1f6 	udiv	r1, r1, r6
 8001a2c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a30:	e7a9      	b.n	8001986 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a32:	68a5      	ldr	r5, [r4, #8]
 8001a34:	b955      	cbnz	r5, 8001a4c <HAL_I2C_Init+0x11c>
 8001a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	b16b      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	e7b2      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a4c:	2519      	movs	r5, #25
 8001a4e:	436b      	muls	r3, r5
 8001a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	b113      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	e7a7      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e7a5      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a66:	bf00      	nop
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	001e847f 	.word	0x001e847f
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	003d08ff 	.word	0x003d08ff

08001a78 <HAL_I2C_Mem_Write>:
{
 8001a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	460f      	mov	r7, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001a86:	f7ff fa33 	bl	8000ef0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d003      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001a94:	2002      	movs	r0, #2
}
 8001a96:	b003      	add	sp, #12
 8001a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a9c:	9000      	str	r0, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	493b      	ldr	r1, [pc, #236]	; (8001b90 <HAL_I2C_Mem_Write+0x118>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fe9e 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001aae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0ee      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001abc:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abe:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ac4:	bf58      	it	pl
 8001ac6:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001aca:	bf5c      	itt	pl
 8001acc:	f042 0201 	orrpl.w	r2, r2, #1
 8001ad0:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad8:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ada:	2321      	movs	r3, #33	; 0x21
 8001adc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aec:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8001af0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001afc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_I2C_Mem_Write+0x11c>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b02:	464b      	mov	r3, r9
 8001b04:	f7ff fec6 	bl	8001894 <I2C_RequestMemoryWrite>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d02a      	beq.n	8001b62 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7c2      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	f7ff fe9a 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b14:	b140      	cbz	r0, 8001b28 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b18:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	bf01      	itttt	eq
 8001b1c:	6822      	ldreq	r2, [r4, #0]
 8001b1e:	6813      	ldreq	r3, [r2, #0]
 8001b20:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b24:	6013      	streq	r3, [r2, #0]
 8001b26:	e7f1      	b.n	8001b0c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b2a:	6827      	ldr	r7, [r4, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001b32:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001b34:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b38:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b3a:	3a01      	subs	r2, #1
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b40:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001b42:	1e48      	subs	r0, r1, #1
 8001b44:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b46:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001b48:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b4a:	d50a      	bpl.n	8001b62 <HAL_I2C_Mem_Write+0xea>
 8001b4c:	b148      	cbz	r0, 8001b62 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001b50:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b52:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001b58:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001b5e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b60:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b64:	462a      	mov	r2, r5
 8001b66:	4631      	mov	r1, r6
 8001b68:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d0      	bne.n	8001b10 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	f7ff fe14 	bl	800179a <I2C_WaitOnBTFFlagUntilTimeout>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1cf      	bne.n	8001b16 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001b82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b8e:	e782      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000

08001b98 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_PWR_PVD_IRQHandler>:
{
 8001b9c:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001b9e:	4c05      	ldr	r4, [pc, #20]	; (8001bb4 <HAL_PWR_PVD_IRQHandler+0x18>)
 8001ba0:	6963      	ldr	r3, [r4, #20]
 8001ba2:	03db      	lsls	r3, r3, #15
 8001ba4:	d504      	bpl.n	8001bb0 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8001ba6:	f7ff fff7 	bl	8001b98 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	6163      	str	r3, [r4, #20]
}
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	b908      	cbnz	r0, 8001bc4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e03c      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc4:	6803      	ldr	r3, [r0, #0]
 8001bc6:	07db      	lsls	r3, r3, #31
 8001bc8:	d410      	bmi.n	8001bec <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	079f      	lsls	r7, r3, #30
 8001bce:	d45d      	bmi.n	8001c8c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	0719      	lsls	r1, r3, #28
 8001bd4:	f100 8094 	bmi.w	8001d00 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	075a      	lsls	r2, r3, #29
 8001bdc:	f100 80be 	bmi.w	8001d5c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	69e8      	ldr	r0, [r5, #28]
 8001be2:	2800      	cmp	r0, #0
 8001be4:	f040 812c 	bne.w	8001e40 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
 8001bea:	e028      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4c8f      	ldr	r4, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	03de      	lsls	r6, r3, #15
 8001c06:	d506      	bpl.n	8001c16 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	039c      	lsls	r4, r3, #14
 8001c0c:	d5dd      	bpl.n	8001bca <HAL_RCC_OscConfig+0x12>
 8001c0e:	686b      	ldr	r3, [r5, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1da      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
 8001c14:	e7d4      	b.n	8001bc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	686b      	ldr	r3, [r5, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x8c>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c26:	f7ff f963 	bl	8000ef0 <HAL_GetTick>
 8001c2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	0398      	lsls	r0, r3, #14
 8001c30:	d4cb      	bmi.n	8001bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff f95d 	bl	8000ef0 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	2864      	cmp	r0, #100	; 0x64
 8001c3a:	d9f7      	bls.n	8001c2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001c3c:	2003      	movs	r0, #3
}
 8001c3e:	b002      	add	sp, #8
 8001c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	b99b      	cbnz	r3, 8001c6e <HAL_RCC_OscConfig+0xb6>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c56:	f7ff f94b 	bl	8000ef0 <HAL_GetTick>
 8001c5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	0399      	lsls	r1, r3, #14
 8001c60:	d5b3      	bpl.n	8001bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c62:	f7ff f945 	bl	8000ef0 <HAL_GetTick>
 8001c66:	1b80      	subs	r0, r0, r6
 8001c68:	2864      	cmp	r0, #100	; 0x64
 8001c6a:	d9f7      	bls.n	8001c5c <HAL_RCC_OscConfig+0xa4>
 8001c6c:	e7e6      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	d103      	bne.n	8001c7e <HAL_RCC_OscConfig+0xc6>
 8001c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	e7cf      	b.n	8001c1e <HAL_RCC_OscConfig+0x66>
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	e7cb      	b.n	8001c24 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8c:	4c67      	ldr	r4, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	f013 0f0c 	tst.w	r3, #12
 8001c94:	d007      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d110      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	03da      	lsls	r2, r3, #15
 8001ca4:	d40d      	bmi.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	079b      	lsls	r3, r3, #30
 8001caa:	d502      	bpl.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
 8001cac:	692b      	ldr	r3, [r5, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d186      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	696a      	ldr	r2, [r5, #20]
 8001cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	e786      	b.n	8001bd0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	692a      	ldr	r2, [r5, #16]
 8001cc4:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_OscConfig+0x278>)
 8001cc6:	b16a      	cbz	r2, 8001ce4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f910 	bl	8000ef0 <HAL_GetTick>
 8001cd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	079f      	lsls	r7, r3, #30
 8001cd6:	d4ec      	bmi.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f90a 	bl	8000ef0 <HAL_GetTick>
 8001cdc:	1b80      	subs	r0, r0, r6
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9f7      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11a>
 8001ce2:	e7ab      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f903 	bl	8000ef0 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	0798      	lsls	r0, r3, #30
 8001cf0:	f57f af6e 	bpl.w	8001bd0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f8fc 	bl	8000ef0 <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f6      	bls.n	8001cec <HAL_RCC_OscConfig+0x134>
 8001cfe:	e79d      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d00:	69aa      	ldr	r2, [r5, #24]
 8001d02:	4c4a      	ldr	r4, [pc, #296]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	b1da      	cbz	r2, 8001d40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f8f0 	bl	8000ef0 <HAL_GetTick>
 8001d10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d14:	079b      	lsls	r3, r3, #30
 8001d16:	d50d      	bpl.n	8001d34 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d24:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d26:	bf00      	nop
  }
  while (Delay --);
 8001d28:	9b01      	ldr	r3, [sp, #4]
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	9201      	str	r2, [sp, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_RCC_OscConfig+0x16e>
 8001d32:	e751      	b.n	8001bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f8dc 	bl	8000ef0 <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9e9      	bls.n	8001d12 <HAL_RCC_OscConfig+0x15a>
 8001d3e:	e77d      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001d40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d42:	f7ff f8d5 	bl	8000ef0 <HAL_GetTick>
 8001d46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d4a:	079f      	lsls	r7, r3, #30
 8001d4c:	f57f af44 	bpl.w	8001bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8ce 	bl	8000ef0 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f6      	bls.n	8001d48 <HAL_RCC_OscConfig+0x190>
 8001d5a:	e76f      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5c:	4c33      	ldr	r4, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	69e3      	ldr	r3, [r4, #28]
 8001d60:	00d8      	lsls	r0, r3, #3
 8001d62:	d424      	bmi.n	8001dae <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001d64:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	69e3      	ldr	r3, [r4, #28]
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61e3      	str	r3, [r4, #28]
 8001d6e:	69e3      	ldr	r3, [r4, #28]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4e30      	ldr	r6, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x284>)
 8001d7a:	6833      	ldr	r3, [r6, #0]
 8001d7c:	05d9      	lsls	r1, r3, #23
 8001d7e:	d518      	bpl.n	8001db2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	68eb      	ldr	r3, [r5, #12]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d126      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x21c>
 8001d86:	6a23      	ldr	r3, [r4, #32]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f8af 	bl	8000ef0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d96:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	6a23      	ldr	r3, [r4, #32]
 8001d9a:	079b      	lsls	r3, r3, #30
 8001d9c:	d53f      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001d9e:	2f00      	cmp	r7, #0
 8001da0:	f43f af1e 	beq.w	8001be0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	69e3      	ldr	r3, [r4, #28]
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	61e3      	str	r3, [r4, #28]
 8001dac:	e718      	b.n	8001be0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2700      	movs	r7, #0
 8001db0:	e7e2      	b.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	6833      	ldr	r3, [r6, #0]
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dba:	f7ff f899 	bl	8000ef0 <HAL_GetTick>
 8001dbe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	05da      	lsls	r2, r3, #23
 8001dc4:	d4dc      	bmi.n	8001d80 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff f893 	bl	8000ef0 <HAL_GetTick>
 8001dca:	eba0 0008 	sub.w	r0, r0, r8
 8001dce:	2864      	cmp	r0, #100	; 0x64
 8001dd0:	d9f6      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x208>
 8001dd2:	e733      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	b9ab      	cbnz	r3, 8001e02 <HAL_RCC_OscConfig+0x24a>
 8001dd6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6223      	str	r3, [r4, #32]
 8001de2:	6a23      	ldr	r3, [r4, #32]
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dea:	f7ff f881 	bl	8000ef0 <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	6a23      	ldr	r3, [r4, #32]
 8001df2:	0798      	lsls	r0, r3, #30
 8001df4:	d5d3      	bpl.n	8001d9e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f87b 	bl	8000ef0 <HAL_GetTick>
 8001dfa:	1b80      	subs	r0, r0, r6
 8001dfc:	4540      	cmp	r0, r8
 8001dfe:	d9f7      	bls.n	8001df0 <HAL_RCC_OscConfig+0x238>
 8001e00:	e71c      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	6a23      	ldr	r3, [r4, #32]
 8001e06:	d103      	bne.n	8001e10 <HAL_RCC_OscConfig+0x258>
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6223      	str	r3, [r4, #32]
 8001e0e:	e7ba      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ce>
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6223      	str	r3, [r4, #32]
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	e7b6      	b.n	8001d8c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f867 	bl	8000ef0 <HAL_GetTick>
 8001e22:	eba0 0008 	sub.w	r0, r0, r8
 8001e26:	42b0      	cmp	r0, r6
 8001e28:	d9b6      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1e0>
 8001e2a:	e707      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	42420000 	.word	0x42420000
 8001e34:	42420480 	.word	0x42420480
 8001e38:	20000020 	.word	0x20000020
 8001e3c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x334>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	461c      	mov	r4, r3
 8001e46:	f002 020c 	and.w	r2, r2, #12
 8001e4a:	2a08      	cmp	r2, #8
 8001e4c:	d03d      	beq.n	8001eca <HAL_RCC_OscConfig+0x312>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	4e27      	ldr	r6, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e54:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e56:	d12b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001e58:	f7ff f84a 	bl	8000ef0 <HAL_GetTick>
 8001e5c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	0199      	lsls	r1, r3, #6
 8001e62:	d41f      	bmi.n	8001ea4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e64:	6a2b      	ldr	r3, [r5, #32]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6c:	6862      	ldr	r2, [r4, #4]
 8001e6e:	68a9      	ldr	r1, [r5, #8]
 8001e70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e74:	430a      	orrs	r2, r1
 8001e76:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e7a:	6862      	ldr	r2, [r4, #4]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e86:	2301      	movs	r3, #1
 8001e88:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f831 	bl	8000ef0 <HAL_GetTick>
 8001e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	019a      	lsls	r2, r3, #6
 8001e94:	f53f aea8 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f82a 	bl	8000ef0 <HAL_GetTick>
 8001e9c:	1b40      	subs	r0, r0, r5
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9f6      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2d8>
 8001ea2:	e6cb      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f824 	bl	8000ef0 <HAL_GetTick>
 8001ea8:	1bc0      	subs	r0, r0, r7
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9d7      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2a6>
 8001eae:	e6c5      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f81e 	bl	8000ef0 <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	f57f ae95 	bpl.w	8001be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f817 	bl	8000ef0 <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9f6      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2fe>
 8001ec8:	e6b8      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eca:	2801      	cmp	r0, #1
 8001ecc:	f43f aeb7 	beq.w	8001c3e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001ed0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	6a2b      	ldr	r3, [r5, #32]
 8001ed4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f47f ae71 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x8>
 8001ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001ee4:	1ac0      	subs	r0, r0, r3
 8001ee6:	bf18      	it	ne
 8001ee8:	2001      	movne	r0, #1
 8001eea:	e6a8      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420060 	.word	0x42420060

08001ef4 <HAL_RCC_GetSysClockFreq>:
{
 8001ef4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ef8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efa:	ac02      	add	r4, sp, #8
 8001efc:	f103 0510 	add.w	r5, r3, #16
 8001f00:	4622      	mov	r2, r4
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	3308      	adds	r3, #8
 8001f08:	c203      	stmia	r2!, {r0, r1}
 8001f0a:	42ab      	cmp	r3, r5
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	d1f7      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f10:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f16:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001f1a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	f003 020c 	and.w	r2, r3, #12
 8001f20:	2a08      	cmp	r2, #8
 8001f22:	d117      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001f28:	a806      	add	r0, sp, #24
 8001f2a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f32:	d50c      	bpl.n	8001f4e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f34:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f38:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3e:	aa06      	add	r2, sp, #24
 8001f40:	4413      	add	r3, r2
 8001f42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001f4a:	b007      	add	sp, #28
 8001f4c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x70>)
 8001f50:	4350      	muls	r0, r2
 8001f52:	e7fa      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001f56:	e7f8      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x56>
 8001f58:	08008c30 	.word	0x08008c30
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	003d0900 	.word	0x003d0900

08001f68 <HAL_RCC_ClockConfig>:
{
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f6c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b910      	cbnz	r0, 8001f78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
}
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4a44      	ldr	r2, [pc, #272]	; (800208c <HAL_RCC_ClockConfig+0x124>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d328      	bcc.n	8001fd6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	6821      	ldr	r1, [r4, #0]
 8001f86:	078e      	lsls	r6, r1, #30
 8001f88:	d430      	bmi.n	8001fec <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	07ca      	lsls	r2, r1, #31
 8001f8c:	d443      	bmi.n	8002016 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_RCC_ClockConfig+0x124>)
 8001f90:	6813      	ldr	r3, [r2, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	42ab      	cmp	r3, r5
 8001f98:	d865      	bhi.n	8002066 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	4d3c      	ldr	r5, [pc, #240]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
 8001f9e:	f012 0f04 	tst.w	r2, #4
 8001fa2:	d16c      	bne.n	800207e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	0713      	lsls	r3, r2, #28
 8001fa6:	d506      	bpl.n	8001fb6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa8:	686b      	ldr	r3, [r5, #4]
 8001faa:	6922      	ldr	r2, [r4, #16]
 8001fac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb6:	f7ff ff9d 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001fba:	686b      	ldr	r3, [r5, #4]
 8001fbc:	4a35      	ldr	r2, [pc, #212]	; (8002094 <HAL_RCC_ClockConfig+0x12c>)
 8001fbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	40d8      	lsrs	r0, r3
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 8001fc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f7fe ff4d 	bl	8000e6c <HAL_InitTick>
  return HAL_OK;
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7ce      	b.n	8001f74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d1c3      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xa>
 8001fea:	e7cb      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1c>
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff2:	bf1e      	ittt	ne
 8001ff4:	685a      	ldrne	r2, [r3, #4]
 8001ff6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ffa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffe:	bf42      	ittt	mi
 8002000:	685a      	ldrmi	r2, [r3, #4]
 8002002:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002006:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68a0      	ldr	r0, [r4, #8]
 800200c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002010:	4302      	orrs	r2, r0
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e7b9      	b.n	8001f8a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	6862      	ldr	r2, [r4, #4]
 8002018:	4e1d      	ldr	r6, [pc, #116]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
 800201a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	d11a      	bne.n	8002056 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	d0a5      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	4313      	orrs	r3, r2
 8002032:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002034:	f7fe ff5c 	bl	8000ef0 <HAL_GetTick>
 8002038:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	6873      	ldr	r3, [r6, #4]
 800203c:	6862      	ldr	r2, [r4, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002046:	d0a2      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe ff52 	bl	8000ef0 <HAL_GetTick>
 800204c:	1bc0      	subs	r0, r0, r7
 800204e:	4540      	cmp	r0, r8
 8002050:	d9f3      	bls.n	800203a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002052:	2003      	movs	r0, #3
 8002054:	e78e      	b.n	8001f74 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	2a02      	cmp	r2, #2
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800205e:	e7e1      	b.n	8002024 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	f013 0f02 	tst.w	r3, #2
 8002064:	e7de      	b.n	8002024 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f023 0307 	bic.w	r3, r3, #7
 800206c:	432b      	orrs	r3, r5
 800206e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	42ab      	cmp	r3, r5
 8002078:	f47f af7b 	bne.w	8001f72 <HAL_RCC_ClockConfig+0xa>
 800207c:	e78d      	b.n	8001f9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	686b      	ldr	r3, [r5, #4]
 8002080:	68e1      	ldr	r1, [r4, #12]
 8002082:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002086:	430b      	orrs	r3, r1
 8002088:	606b      	str	r3, [r5, #4]
 800208a:	e78b      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	0800ae30 	.word	0x0800ae30
 8002098:	20000020 	.word	0x20000020
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020ae:	6810      	ldr	r0, [r2, #0]
}
 80020b0:	40d8      	lsrs	r0, r3
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	0800ae40 	.word	0x0800ae40
 80020bc:	20000020 	.word	0x20000020

080020c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020ce:	6810      	ldr	r0, [r2, #0]
}
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	0800ae40 	.word	0x0800ae40
 80020dc:	20000020 	.word	0x20000020

080020e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020e0:	6803      	ldr	r3, [r0, #0]
{
 80020e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020e6:	07d9      	lsls	r1, r3, #31
{
 80020e8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ea:	d520      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ec:	4c35      	ldr	r4, [pc, #212]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80020ee:	69e3      	ldr	r3, [r4, #28]
 80020f0:	00da      	lsls	r2, r3, #3
 80020f2:	d432      	bmi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80020f4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61e3      	str	r3, [r4, #28]
 80020fe:	69e3      	ldr	r3, [r4, #28]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4e2f      	ldr	r6, [pc, #188]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800210a:	6833      	ldr	r3, [r6, #0]
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	d526      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002110:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002112:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002116:	d136      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002118:	6a23      	ldr	r3, [r4, #32]
 800211a:	686a      	ldr	r2, [r5, #4]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	4313      	orrs	r3, r2
 8002122:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002124:	b11f      	cbz	r7, 800212e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	69e3      	ldr	r3, [r4, #28]
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800212e:	6828      	ldr	r0, [r5, #0]
 8002130:	0783      	lsls	r3, r0, #30
 8002132:	d506      	bpl.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002136:	68a9      	ldr	r1, [r5, #8]
 8002138:	6853      	ldr	r3, [r2, #4]
 800213a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213e:	430b      	orrs	r3, r1
 8002140:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002142:	f010 0010 	ands.w	r0, r0, #16
 8002146:	d01b      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800214a:	68e9      	ldr	r1, [r5, #12]
 800214c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800214e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002150:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002154:	430b      	orrs	r3, r1
 8002156:	6053      	str	r3, [r2, #4]
 8002158:	e012      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2700      	movs	r7, #0
 800215c:	e7d4      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	6833      	ldr	r3, [r6, #0]
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002166:	f7fe fec3 	bl	8000ef0 <HAL_GetTick>
 800216a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	6833      	ldr	r3, [r6, #0]
 800216e:	05d8      	lsls	r0, r3, #23
 8002170:	d4ce      	bmi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe febd 	bl	8000ef0 <HAL_GetTick>
 8002176:	eba0 0008 	sub.w	r0, r0, r8
 800217a:	2864      	cmp	r0, #100	; 0x64
 800217c:	d9f6      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800217e:	2003      	movs	r0, #3
}
 8002180:	b002      	add	sp, #8
 8002182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002186:	686a      	ldr	r2, [r5, #4]
 8002188:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800218c:	429a      	cmp	r2, r3
 800218e:	d0c3      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002190:	2001      	movs	r0, #1
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002196:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80021a0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a2:	07d9      	lsls	r1, r3, #31
 80021a4:	d5b8      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80021a6:	f7fe fea3 	bl	8000ef0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	6a23      	ldr	r3, [r4, #32]
 80021b2:	079a      	lsls	r2, r3, #30
 80021b4:	d4b0      	bmi.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe9b 	bl	8000ef0 <HAL_GetTick>
 80021ba:	1b80      	subs	r0, r0, r6
 80021bc:	4540      	cmp	r0, r8
 80021be:	d9f7      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80021c0:	e7dd      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
 80021cc:	42420440 	.word	0x42420440

080021d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	4604      	mov	r4, r0
 80021d4:	460e      	mov	r6, r1
 80021d6:	4615      	mov	r5, r2
 80021d8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	ea36 0302 	bics.w	r3, r6, r2
 80021e2:	d001      	beq.n	80021e8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e02d      	b.n	8002244 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80021e8:	1c6b      	adds	r3, r5, #1
 80021ea:	d0f7      	beq.n	80021dc <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021ec:	f7fe fe80 	bl	8000ef0 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	4285      	cmp	r5, r0
 80021f4:	d8f1      	bhi.n	80021da <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021fe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002206:	d10a      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8002208:	68a2      	ldr	r2, [r4, #8]
 800220a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800220e:	d002      	beq.n	8002216 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002210:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002214:	d103      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800221e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002220:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002224:	d107      	bne.n	8002236 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002234:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002236:	2301      	movs	r3, #1
 8002238:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800223c:	2300      	movs	r3, #0
 800223e:	2003      	movs	r0, #3
 8002240:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002246 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002246:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	4613      	mov	r3, r2
 800224a:	460a      	mov	r2, r1
 800224c:	2180      	movs	r1, #128	; 0x80
{
 800224e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	f7ff ffbe 	bl	80021d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002254:	b120      	cbz	r0, 8002260 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002258:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800225a:	f043 0320 	orr.w	r3, r3, #32
 800225e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002260:	bd10      	pop	{r4, pc}

08002262 <HAL_SPI_Init>:
{
 8002262:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002264:	4604      	mov	r4, r0
 8002266:	2800      	cmp	r0, #0
 8002268:	d034      	beq.n	80022d4 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800226e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002276:	b91b      	cbnz	r3, 8002280 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002278:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800227c:	f001 fd72 	bl	8003d64 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002280:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002282:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002284:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002288:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800228a:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800228c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002290:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002292:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002296:	4303      	orrs	r3, r0
 8002298:	68e0      	ldr	r0, [r4, #12]
 800229a:	4303      	orrs	r3, r0
 800229c:	6920      	ldr	r0, [r4, #16]
 800229e:	4303      	orrs	r3, r0
 80022a0:	6960      	ldr	r0, [r4, #20]
 80022a2:	4303      	orrs	r3, r0
 80022a4:	69e0      	ldr	r0, [r4, #28]
 80022a6:	4303      	orrs	r3, r0
 80022a8:	6a20      	ldr	r0, [r4, #32]
 80022aa:	4303      	orrs	r3, r0
 80022ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022ae:	4303      	orrs	r3, r0
 80022b0:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022b6:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022bc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022be:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c0:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80022ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80022d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e7fc      	b.n	80022d2 <HAL_SPI_Init+0x70>

080022d8 <HAL_SPI_Transmit>:
{
 80022d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80022dc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80022de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80022e2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80022e4:	2b01      	cmp	r3, #1
{
 80022e6:	460d      	mov	r5, r1
 80022e8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80022ea:	f000 809c 	beq.w	8002426 <HAL_SPI_Transmit+0x14e>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80022f4:	f7fe fdfc 	bl	8000ef0 <HAL_GetTick>
 80022f8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80022fa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80022fe:	b2c0      	uxtb	r0, r0
 8002300:	2801      	cmp	r0, #1
 8002302:	f040 808e 	bne.w	8002422 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8002306:	2d00      	cmp	r5, #0
 8002308:	d05e      	beq.n	80023c8 <HAL_SPI_Transmit+0xf0>
 800230a:	f1b8 0f00 	cmp.w	r8, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002310:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002312:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002314:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002318:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800231c:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800231e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002322:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002324:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002326:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800232a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002330:	bf08      	it	eq
 8002332:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002334:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002336:	bf08      	it	eq
 8002338:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 800233c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002340:	bf08      	it	eq
 8002342:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002344:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002346:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002348:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800234a:	bf5e      	ittt	pl
 800234c:	6803      	ldrpl	r3, [r0, #0]
 800234e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002352:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002354:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	d13e      	bne.n	80023da <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	b113      	cbz	r3, 8002364 <HAL_SPI_Transmit+0x8c>
 800235e:	f1b8 0f01 	cmp.w	r8, #1
 8002362:	d107      	bne.n	8002374 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002364:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002368:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800236a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800236c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002374:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002376:	b29b      	uxth	r3, r3
 8002378:	b9a3      	cbnz	r3, 80023a4 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800237a:	463a      	mov	r2, r7
 800237c:	4631      	mov	r1, r6
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff ff61 	bl	8002246 <SPI_EndRxTxTransaction>
 8002384:	2800      	cmp	r0, #0
 8002386:	d149      	bne.n	800241c <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	b933      	cbnz	r3, 800239a <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	9201      	str	r2, [sp, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800239c:	3000      	adds	r0, #0
 800239e:	bf18      	it	ne
 80023a0:	2001      	movne	r0, #1
error:
 80023a2:	e011      	b.n	80023c8 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	6893      	ldr	r3, [r2, #8]
 80023a8:	0798      	lsls	r0, r3, #30
 80023aa:	d505      	bpl.n	80023b8 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ae:	f833 1b02 	ldrh.w	r1, [r3], #2
 80023b2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	6323      	str	r3, [r4, #48]	; 0x30
 80023b6:	e7d9      	b.n	800236c <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b8:	f7fe fd9a 	bl	8000ef0 <HAL_GetTick>
 80023bc:	1bc0      	subs	r0, r0, r7
 80023be:	42b0      	cmp	r0, r6
 80023c0:	d3d8      	bcc.n	8002374 <HAL_SPI_Transmit+0x9c>
 80023c2:	1c71      	adds	r1, r6, #1
 80023c4:	d0d6      	beq.n	8002374 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ce:	2300      	movs	r3, #0
 80023d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80023d4:	b002      	add	sp, #8
 80023d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023da:	b113      	cbz	r3, 80023e2 <HAL_SPI_Transmit+0x10a>
 80023dc:	f1b8 0f01 	cmp.w	r8, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e2:	782b      	ldrb	r3, [r5, #0]
 80023e4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023e8:	3301      	adds	r3, #1
 80023ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80023ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80023f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0be      	beq.n	800237a <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	0792      	lsls	r2, r2, #30
 8002402:	d503      	bpl.n	800240c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002404:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	731a      	strb	r2, [r3, #12]
 800240a:	e7ec      	b.n	80023e6 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240c:	f7fe fd70 	bl	8000ef0 <HAL_GetTick>
 8002410:	1bc0      	subs	r0, r0, r7
 8002412:	42b0      	cmp	r0, r6
 8002414:	d3ee      	bcc.n	80023f4 <HAL_SPI_Transmit+0x11c>
 8002416:	1c73      	adds	r3, r6, #1
 8002418:	d0ec      	beq.n	80023f4 <HAL_SPI_Transmit+0x11c>
 800241a:	e7d4      	b.n	80023c6 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241c:	2320      	movs	r3, #32
 800241e:	6563      	str	r3, [r4, #84]	; 0x54
 8002420:	e7b2      	b.n	8002388 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8002422:	2002      	movs	r0, #2
 8002424:	e7d0      	b.n	80023c8 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8002426:	2002      	movs	r0, #2
 8002428:	e7d4      	b.n	80023d4 <HAL_SPI_Transmit+0xfc>

0800242a <HAL_SPI_TransmitReceive>:
{
 800242a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800242e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002430:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002434:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002436:	2b01      	cmp	r3, #1
{
 8002438:	460d      	mov	r5, r1
 800243a:	4691      	mov	r9, r2
 800243c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800243e:	f000 80e2 	beq.w	8002606 <HAL_SPI_TransmitReceive+0x1dc>
 8002442:	2301      	movs	r3, #1
 8002444:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002448:	f7fe fd52 	bl	8000ef0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800244c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002450:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002452:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002454:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002456:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002458:	d00a      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x46>
 800245a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800245e:	f040 80d0 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002462:	68a0      	ldr	r0, [r4, #8]
 8002464:	2800      	cmp	r0, #0
 8002466:	f040 80cc 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
 800246a:	2b04      	cmp	r3, #4
 800246c:	f040 80c9 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002470:	2d00      	cmp	r5, #0
 8002472:	f000 80c4 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
 8002476:	f1b9 0f00 	cmp.w	r9, #0
 800247a:	f000 80c0 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
 800247e:	2e00      	cmp	r6, #0
 8002480:	f000 80bd 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002484:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002488:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800248c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800248e:	bf1c      	itt	ne
 8002490:	2305      	movne	r3, #5
 8002492:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002496:	2300      	movs	r3, #0
 8002498:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800249a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80024a0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80024a2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a4:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80024a6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80024aa:	bf58      	it	pl
 80024ac:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024ae:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80024b0:	bf58      	it	pl
 80024b2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80024b6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80024b8:	bf58      	it	pl
 80024ba:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024bc:	68e2      	ldr	r2, [r4, #12]
 80024be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80024c2:	d158      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c4:	b109      	cbz	r1, 80024ca <HAL_SPI_TransmitReceive+0xa0>
 80024c6:	2e01      	cmp	r6, #1
 80024c8:	d107      	bne.n	80024da <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024ce:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80024d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80024da:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b9ab      	cbnz	r3, 800250e <HAL_SPI_TransmitReceive+0xe4>
 80024e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b993      	cbnz	r3, 800250e <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e8:	4642      	mov	r2, r8
 80024ea:	4639      	mov	r1, r7
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff feaa 	bl	8002246 <SPI_EndRxTxTransaction>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	f040 8081 	bne.w	80025fa <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024f8:	68a3      	ldr	r3, [r4, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d132      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	9001      	str	r0, [sp, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	e02a      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6893      	ldr	r3, [r2, #8]
 8002512:	0799      	lsls	r1, r3, #30
 8002514:	d50d      	bpl.n	8002532 <HAL_SPI_TransmitReceive+0x108>
 8002516:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	b153      	cbz	r3, 8002532 <HAL_SPI_TransmitReceive+0x108>
 800251c:	b14d      	cbz	r5, 8002532 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800251e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002522:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002526:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800252a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d50c      	bpl.n	8002552 <HAL_SPI_TransmitReceive+0x128>
 8002538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	b14b      	cbz	r3, 8002552 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800253e:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002544:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002548:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800254a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800254c:	3b01      	subs	r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002552:	f7fe fccd 	bl	8000ef0 <HAL_GetTick>
 8002556:	eba0 0008 	sub.w	r0, r0, r8
 800255a:	4287      	cmp	r7, r0
 800255c:	d8be      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0xb2>
 800255e:	1c7e      	adds	r6, r7, #1
 8002560:	d0bc      	beq.n	80024dc <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002564:	2301      	movs	r3, #1
 8002566:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800256a:	2300      	movs	r3, #0
 800256c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002570:	b003      	add	sp, #12
 8002572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002576:	b109      	cbz	r1, 800257c <HAL_SPI_TransmitReceive+0x152>
 8002578:	2e01      	cmp	r6, #1
 800257a:	d108      	bne.n	800258e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257c:	782a      	ldrb	r2, [r5, #0]
 800257e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002582:	3301      	adds	r3, #1
 8002584:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002586:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002588:	3b01      	subs	r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800258e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002590:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002592:	b29b      	uxth	r3, r3
 8002594:	b91b      	cbnz	r3, 800259e <HAL_SPI_TransmitReceive+0x174>
 8002596:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0a4      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	0798      	lsls	r0, r3, #30
 80025a4:	d50e      	bpl.n	80025c4 <HAL_SPI_TransmitReceive+0x19a>
 80025a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b15b      	cbz	r3, 80025c4 <HAL_SPI_TransmitReceive+0x19a>
 80025ac:	b155      	cbz	r5, 80025c4 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80025ae:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80025b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025b8:	3301      	adds	r3, #1
 80025ba:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80025bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	6893      	ldr	r3, [r2, #8]
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	d50d      	bpl.n	80025e8 <HAL_SPI_TransmitReceive+0x1be>
 80025cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b153      	cbz	r3, 80025e8 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80025d2:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025dc:	3301      	adds	r3, #1
 80025de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80025e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025e8:	f7fe fc82 	bl	8000ef0 <HAL_GetTick>
 80025ec:	eba0 0008 	sub.w	r0, r0, r8
 80025f0:	4287      	cmp	r7, r0
 80025f2:	d8cd      	bhi.n	8002590 <HAL_SPI_TransmitReceive+0x166>
 80025f4:	1c7b      	adds	r3, r7, #1
 80025f6:	d0cb      	beq.n	8002590 <HAL_SPI_TransmitReceive+0x166>
 80025f8:	e7b3      	b.n	8002562 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fa:	2320      	movs	r3, #32
 80025fc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	e7b0      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002602:	2002      	movs	r0, #2
 8002604:	e7ae      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002606:	2002      	movs	r0, #2
 8002608:	e7b2      	b.n	8002570 <HAL_SPI_TransmitReceive+0x146>

0800260a <HAL_SPI_ErrorCallback>:
 800260a:	4770      	bx	lr

0800260c <HAL_SPI_IRQHandler>:
{
 800260c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800260e:	6803      	ldr	r3, [r0, #0]
{
 8002610:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002612:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002614:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002616:	0991      	lsrs	r1, r2, #6
 8002618:	f011 0601 	ands.w	r6, r1, #1
 800261c:	d10a      	bne.n	8002634 <HAL_SPI_IRQHandler+0x28>
 800261e:	f012 0f01 	tst.w	r2, #1
 8002622:	d007      	beq.n	8002634 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002624:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002628:	d004      	beq.n	8002634 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800262a:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 800262c:	b004      	add	sp, #16
 800262e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 8002632:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002634:	0790      	lsls	r0, r2, #30
 8002636:	d504      	bpl.n	8002642 <HAL_SPI_IRQHandler+0x36>
 8002638:	0628      	lsls	r0, r5, #24
 800263a:	d502      	bpl.n	8002642 <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 800263c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800263e:	4620      	mov	r0, r4
 8002640:	e7f4      	b.n	800262c <HAL_SPI_IRQHandler+0x20>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002642:	0952      	lsrs	r2, r2, #5
 8002644:	4311      	orrs	r1, r2
 8002646:	07c9      	lsls	r1, r1, #31
 8002648:	d54c      	bpl.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800264a:	06a8      	lsls	r0, r5, #26
 800264c:	d54a      	bpl.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800264e:	b176      	cbz	r6, 800266e <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002650:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8002654:	2000      	movs	r0, #0
 8002656:	2903      	cmp	r1, #3
 8002658:	d03e      	beq.n	80026d8 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800265a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800265c:	f041 0104 	orr.w	r1, r1, #4
 8002660:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002662:	9001      	str	r0, [sp, #4]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	9101      	str	r1, [sp, #4]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	9101      	str	r1, [sp, #4]
 800266c:	9901      	ldr	r1, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800266e:	07d1      	lsls	r1, r2, #31
 8002670:	d50c      	bpl.n	800268c <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002672:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800267a:	2200      	movs	r2, #0
 800267c:	9203      	str	r2, [sp, #12]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	9203      	str	r2, [sp, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800268e:	b34a      	cbz	r2, 80026e4 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002696:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002698:	2201      	movs	r2, #1
 800269a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800269e:	07aa      	lsls	r2, r5, #30
 80026a0:	d022      	beq.n	80026e8 <HAL_SPI_IRQHandler+0xdc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026a2:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80026a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026a6:	f022 0203 	bic.w	r2, r2, #3
 80026aa:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80026ac:	b140      	cbz	r0, 80026c0 <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_SPI_IRQHandler+0xe4>)
 80026b0:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026b2:	f7fe fed9 	bl	8001468 <HAL_DMA_Abort_IT>
 80026b6:	b118      	cbz	r0, 80026c0 <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026be:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80026c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026c2:	b178      	cbz	r0, 80026e4 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_SPI_IRQHandler+0xe4>)
 80026c6:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026c8:	f7fe fece 	bl	8001468 <HAL_DMA_Abort_IT>
 80026cc:	b150      	cbz	r0, 80026e4 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d4:	6563      	str	r3, [r4, #84]	; 0x54
 80026d6:	e005      	b.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d8:	9002      	str	r0, [sp, #8]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	9202      	str	r2, [sp, #8]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	9b02      	ldr	r3, [sp, #8]
}
 80026e4:	b004      	add	sp, #16
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_ErrorCallback(hspi);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff ff8e 	bl	800260a <HAL_SPI_ErrorCallback>
 80026ee:	e7f9      	b.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
 80026f0:	080026f5 	.word	0x080026f5

080026f4 <SPI_DMAAbortOnError>:
{
 80026f4:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80026f6:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80026fa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026fc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80026fe:	f7ff ff84 	bl	800260a <HAL_SPI_ErrorCallback>
}
 8002702:	bd08      	pop	{r3, pc}

08002704 <HAL_SPI_GetState>:
  return hspi->State;
 8002704:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002708:	4770      	bx	lr
	...

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002710:	6803      	ldr	r3, [r0, #0]
 8002712:	68c1      	ldr	r1, [r0, #12]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	2419      	movs	r4, #25
 8002718:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800271c:	430a      	orrs	r2, r1
 800271e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002720:	6882      	ldr	r2, [r0, #8]
 8002722:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002724:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002726:	4302      	orrs	r2, r0
 8002728:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800272a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800272e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002732:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	69a9      	ldr	r1, [r5, #24]
 800273c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002740:	430a      	orrs	r2, r1
 8002742:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <UART_SetConfig+0x70>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d114      	bne.n	8002774 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800274a:	f7ff fcb9 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274e:	4360      	muls	r0, r4
 8002750:	686c      	ldr	r4, [r5, #4]
 8002752:	2264      	movs	r2, #100	; 0x64
 8002754:	00a4      	lsls	r4, r4, #2
 8002756:	fbb0 f0f4 	udiv	r0, r0, r4
 800275a:	fbb0 f1f2 	udiv	r1, r0, r2
 800275e:	fb02 0311 	mls	r3, r2, r1, r0
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	fbb3 f3f2 	udiv	r3, r3, r2
 800276a:	682c      	ldr	r4, [r5, #0]
 800276c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002770:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002772:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002774:	f7ff fc94 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002778:	e7e9      	b.n	800274e <UART_SetConfig+0x42>
 800277a:	bf00      	nop
 800277c:	40013800 	.word	0x40013800

08002780 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	4604      	mov	r4, r0
 8002784:	460e      	mov	r6, r1
 8002786:	4617      	mov	r7, r2
 8002788:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	6821      	ldr	r1, [r4, #0]
 800278c:	680b      	ldr	r3, [r1, #0]
 800278e:	ea36 0303 	bics.w	r3, r6, r3
 8002792:	d101      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002794:	2000      	movs	r0, #0
 8002796:	e014      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002798:	1c6b      	adds	r3, r5, #1
 800279a:	d0f7      	beq.n	800278c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800279c:	b995      	cbnz	r5, 80027c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800279e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80027a0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80027b2:	2320      	movs	r3, #32
 80027b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80027bc:	2300      	movs	r3, #0
 80027be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027c4:	f7fe fb94 	bl	8000ef0 <HAL_GetTick>
 80027c8:	1bc0      	subs	r0, r0, r7
 80027ca:	4285      	cmp	r5, r0
 80027cc:	d2dd      	bcs.n	800278a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80027ce:	e7e6      	b.n	800279e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080027d0 <HAL_UART_Init>:
{
 80027d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027d2:	4604      	mov	r4, r0
 80027d4:	b340      	cbz	r0, 8002828 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027de:	b91b      	cbnz	r3, 80027e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80027e4:	f001 fb00 	bl	8003de8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80027ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80027f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80027f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80027f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027fa:	f7ff ff87 	bl	800270c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800281a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800281e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002822:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	e7fc      	b.n	8002826 <HAL_UART_Init+0x56>

0800282c <HAL_UART_Transmit>:
{
 800282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002830:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002832:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002836:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002838:	2b20      	cmp	r3, #32
{
 800283a:	460d      	mov	r5, r1
 800283c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800283e:	d14c      	bne.n	80028da <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8002840:	2900      	cmp	r1, #0
 8002842:	d048      	beq.n	80028d6 <HAL_UART_Transmit+0xaa>
 8002844:	2a00      	cmp	r2, #0
 8002846:	d046      	beq.n	80028d6 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002848:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800284c:	2b01      	cmp	r3, #1
 800284e:	d044      	beq.n	80028da <HAL_UART_Transmit+0xae>
 8002850:	2301      	movs	r3, #1
 8002852:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285a:	2321      	movs	r3, #33	; 0x21
 800285c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002860:	f7fe fb46 	bl	8000ef0 <HAL_GetTick>
 8002864:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002866:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800286a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800286e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	b963      	cbnz	r3, 800288e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	4632      	mov	r2, r6
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff80 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002880:	b9a0      	cbnz	r0, 80028ac <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002882:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002884:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002888:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800288c:	e00f      	b.n	80028ae <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800288e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002890:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002892:	3b01      	subs	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002898:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a0:	4620      	mov	r0, r4
 80028a2:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028a4:	d10e      	bne.n	80028c4 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	f7ff ff6b 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80028aa:	b110      	cbz	r0, 80028b2 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 80028ac:	2003      	movs	r0, #3
}
 80028ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028b2:	882b      	ldrh	r3, [r5, #0]
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028bc:	6923      	ldr	r3, [r4, #16]
 80028be:	b943      	cbnz	r3, 80028d2 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 80028c0:	3502      	adds	r5, #2
 80028c2:	e7d4      	b.n	800286e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c4:	f7ff ff5c 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d1ef      	bne.n	80028ac <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	782a      	ldrb	r2, [r5, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	3501      	adds	r5, #1
 80028d4:	e7cb      	b.n	800286e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	e7e9      	b.n	80028ae <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80028da:	2002      	movs	r0, #2
 80028dc:	e7e7      	b.n	80028ae <HAL_UART_Transmit+0x82>

080028de <SX1278_hw_SetNSS>:
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80028de:	1e4b      	subs	r3, r1, #1
 80028e0:	425a      	negs	r2, r3
 80028e2:	8a01      	ldrh	r1, [r0, #16]
 80028e4:	415a      	adcs	r2, r3
 80028e6:	6940      	ldr	r0, [r0, #20]
 80028e8:	f7fe beec 	b.w	80016c4 <HAL_GPIO_WritePin>

080028ec <SX1278_hw_init>:
__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t * hw) {
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80028f0:	2101      	movs	r1, #1
 80028f2:	f7ff fff4 	bl	80028de <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80028f6:	8821      	ldrh	r1, [r4, #0]
 80028f8:	6860      	ldr	r0, [r4, #4]
 80028fa:	2201      	movs	r2, #1
}
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002900:	f7fe bee0 	b.w	80016c4 <HAL_GPIO_WritePin>

08002904 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8002904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002906:	4605      	mov	r5, r0
 8002908:	ac02      	add	r4, sp, #8
 800290a:	f804 1d01 	strb.w	r1, [r4, #-1]!
	SX1278_hw_SetNSS(hw, 0);
 800290e:	2100      	movs	r1, #0
 8002910:	f7ff ffe5 	bl	80028de <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	2201      	movs	r2, #1
 800291a:	4621      	mov	r1, r4
 800291c:	69a8      	ldr	r0, [r5, #24]
 800291e:	f7ff fcdb 	bl	80022d8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002922:	69a8      	ldr	r0, [r5, #24]
 8002924:	f7ff feee 	bl	8002704 <HAL_SPI_GetState>
 8002928:	2801      	cmp	r0, #1
 800292a:	d1fa      	bne.n	8002922 <SX1278_hw_SPICommand+0x1e>
		;
}
 800292c:	b003      	add	sp, #12
 800292e:	bd30      	pop	{r4, r5, pc}

08002930 <SX1278_SPIBurstWrite.part.1>:
		}
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	460d      	mov	r5, r1
 8002934:	4606      	mov	r6, r0
 8002936:	461f      	mov	r7, r3
		uint8_t length) {
	unsigned char i;
	if (length <= 1) {
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002938:	2100      	movs	r1, #0
 800293a:	6800      	ldr	r0, [r0, #0]
void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 800293c:	4614      	mov	r4, r2
		SX1278_hw_SetNSS(module->hw, 0);
 800293e:	f7ff ffce 	bl	80028de <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002942:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8002946:	6830      	ldr	r0, [r6, #0]
 8002948:	f7ff ffdc 	bl	8002904 <SX1278_hw_SPICommand>
 800294c:	3f01      	subs	r7, #1
 800294e:	1e65      	subs	r5, r4, #1
 8002950:	443c      	add	r4, r7
		for (i = 0; i < length; i++) {
 8002952:	42a5      	cmp	r5, r4
 8002954:	6830      	ldr	r0, [r6, #0]
 8002956:	d103      	bne.n	8002960 <SX1278_SPIBurstWrite.part.1+0x30>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002958:	2101      	movs	r1, #1
 800295a:	f7ff ffc0 	bl	80028de <SX1278_hw_SetNSS>
	}
}
 800295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002960:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002964:	f7ff ffce 	bl	8002904 <SX1278_hw_SPICommand>
 8002968:	e7f3      	b.n	8002952 <SX1278_SPIBurstWrite.part.1+0x22>

0800296a <SX1278_hw_SPIReadByte>:
	uint8_t txByte = 0x00;
 800296a:	2100      	movs	r1, #0
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800296c:	b530      	push	{r4, r5, lr}
 800296e:	b085      	sub	sp, #20
	uint8_t rxByte = 0x00;
 8002970:	ac04      	add	r4, sp, #16
 8002972:	f804 1d01 	strb.w	r1, [r4, #-1]!
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8002976:	4605      	mov	r5, r0
	uint8_t txByte = 0x00;
 8002978:	f88d 100e 	strb.w	r1, [sp, #14]
	SX1278_hw_SetNSS(hw, 0);
 800297c:	f7ff ffaf 	bl	80028de <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002984:	4622      	mov	r2, r4
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f10d 010e 	add.w	r1, sp, #14
 800298c:	2301      	movs	r3, #1
 800298e:	69a8      	ldr	r0, [r5, #24]
 8002990:	f7ff fd4b 	bl	800242a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002994:	69a8      	ldr	r0, [r5, #24]
 8002996:	f7ff feb5 	bl	8002704 <HAL_SPI_GetState>
 800299a:	2801      	cmp	r0, #1
 800299c:	d1fa      	bne.n	8002994 <SX1278_hw_SPIReadByte+0x2a>
}
 800299e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80029a2:	b005      	add	sp, #20
 80029a4:	bd30      	pop	{r4, r5, pc}

080029a6 <SX1278_hw_DelayMs>:
	HAL_Delay(msec);
 80029a6:	f7fe baa9 	b.w	8000efc <HAL_Delay>

080029aa <SX1278_hw_Reset>:
__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80029ae:	2101      	movs	r1, #1
 80029b0:	f7ff ff95 	bl	80028de <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80029b4:	8821      	ldrh	r1, [r4, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	6860      	ldr	r0, [r4, #4]
 80029ba:	f7fe fe83 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(1);
 80029be:	2001      	movs	r0, #1
 80029c0:	f7ff fff1 	bl	80029a6 <SX1278_hw_DelayMs>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80029c4:	6860      	ldr	r0, [r4, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	8821      	ldrh	r1, [r4, #0]
 80029ca:	f7fe fe7b 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f7ff ffe9 	bl	80029a6 <SX1278_hw_DelayMs>
}
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <SX1278_hw_GetDIO0>:
__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80029d6:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80029d8:	8901      	ldrh	r1, [r0, #8]
 80029da:	68c0      	ldr	r0, [r0, #12]
 80029dc:	f7fe fe6c 	bl	80016b8 <HAL_GPIO_ReadPin>
}
 80029e0:	1e43      	subs	r3, r0, #1
 80029e2:	4258      	negs	r0, r3
 80029e4:	4158      	adcs	r0, r3
 80029e6:	bd08      	pop	{r3, pc}

080029e8 <SX1278_SPIRead>:
uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4604      	mov	r4, r0
	SX1278_hw_SPICommand(module->hw, addr);
 80029ec:	6800      	ldr	r0, [r0, #0]
 80029ee:	f7ff ff89 	bl	8002904 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	f7ff ffb9 	bl	800296a <SX1278_hw_SPIReadByte>
 80029f8:	4605      	mov	r5, r0
	SX1278_hw_SetNSS(module->hw, 1);
 80029fa:	2101      	movs	r1, #1
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	f7ff ff6e 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a02:	4628      	mov	r0, r5
 8002a04:	bd38      	pop	{r3, r4, r5, pc}

08002a06 <SX1278_SPIWrite>:
void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8002a06:	b570      	push	{r4, r5, r6, lr}
 8002a08:	4604      	mov	r4, r0
 8002a0a:	460e      	mov	r6, r1
 8002a0c:	4615      	mov	r5, r2
	SX1278_hw_SetNSS(module->hw, 0);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	6800      	ldr	r0, [r0, #0]
 8002a12:	f7ff ff64 	bl	80028de <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002a16:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f7ff ff72 	bl	8002904 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8002a20:	4629      	mov	r1, r5
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	f7ff ff6e 	bl	8002904 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	f7ff ff57 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a30:	bd70      	pop	{r4, r5, r6, pc}

08002a32 <SX1278_SPIBurstRead>:
	if (length <= 1) {
 8002a32:	2b01      	cmp	r3, #1
		uint8_t length) {
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	4605      	mov	r5, r0
 8002a38:	460f      	mov	r7, r1
 8002a3a:	4616      	mov	r6, r2
 8002a3c:	461c      	mov	r4, r3
	if (length <= 1) {
 8002a3e:	d916      	bls.n	8002a6e <SX1278_SPIBurstRead+0x3c>
		SX1278_hw_SetNSS(module->hw, 0);
 8002a40:	2100      	movs	r1, #0
 8002a42:	6800      	ldr	r0, [r0, #0]
 8002a44:	f7ff ff4b 	bl	80028de <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8002a48:	4639      	mov	r1, r7
 8002a4a:	6828      	ldr	r0, [r5, #0]
 8002a4c:	f7ff ff5a 	bl	8002904 <SX1278_hw_SPICommand>
 8002a50:	3c01      	subs	r4, #1
 8002a52:	b2e4      	uxtb	r4, r4
 8002a54:	1e77      	subs	r7, r6, #1
 8002a56:	4434      	add	r4, r6
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8002a58:	6828      	ldr	r0, [r5, #0]
 8002a5a:	f7ff ff86 	bl	800296a <SX1278_hw_SPIReadByte>
 8002a5e:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++) {
 8002a62:	42a7      	cmp	r7, r4
 8002a64:	d1f8      	bne.n	8002a58 <SX1278_SPIBurstRead+0x26>
		SX1278_hw_SetNSS(module->hw, 1);
 8002a66:	2101      	movs	r1, #1
 8002a68:	6828      	ldr	r0, [r5, #0]
 8002a6a:	f7ff ff38 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a70 <SX1278_standby>:
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
	module->readBytes = 0;
	SX1278_standby(module); //Entry standby mode
}

void SX1278_standby(SX1278_t * module) {
 8002a70:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002a72:	2209      	movs	r2, #9
 8002a74:	2101      	movs	r1, #1
void SX1278_standby(SX1278_t * module) {
 8002a76:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002a78:	f7ff ffc5 	bl	8002a06 <SX1278_SPIWrite>
	module->status = STANDBY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	7523      	strb	r3, [r4, #20]
}
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8002a82:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002a84:	2208      	movs	r2, #8
 8002a86:	2101      	movs	r1, #1
void SX1278_sleep(SX1278_t * module) {
 8002a88:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002a8a:	f7ff ffbc 	bl	8002a06 <SX1278_SPIWrite>
	module->status = SLEEP;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	7523      	strb	r3, [r4, #20]
}
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002a94:	2288      	movs	r2, #136	; 0x88
 8002a96:	2101      	movs	r1, #1
 8002a98:	f7ff bfb5 	b.w	8002a06 <SX1278_SPIWrite>

08002a9c <SX1278_config>:
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8002a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	4616      	mov	r6, r2
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002aa4:	f7ff ffed 	bl	8002a82 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f7ff ff7c 	bl	80029a6 <SX1278_hw_DelayMs>
	SX1278_entryLoRa(module);
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff fff0 	bl	8002a94 <SX1278_entryLoRa>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002ab4:	04e9      	lsls	r1, r5, #19
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <SX1278_config+0x10c>)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	04f0      	lsls	r0, r6, #19
 8002abc:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 8002ac0:	f7fe f852 	bl	8000b68 <__aeabi_uldivmod>
	Frequency_to_device[0] = (uint8_t)(frf >> 16);
 8002ac4:	0c03      	lsrs	r3, r0, #16
 8002ac6:	f88d 3004 	strb.w	r3, [sp, #4]
	Frequency_to_device[1] = (uint8_t)(frf >> 8);
 8002aca:	0a03      	lsrs	r3, r0, #8
 8002acc:	f88d 3005 	strb.w	r3, [sp, #5]
	Frequency_to_device[2] = (uint8_t)(frf >> 0);
 8002ad0:	f88d 0006 	strb.w	r0, [sp, #6]
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	aa01      	add	r2, sp, #4
 8002ad8:	2106      	movs	r1, #6
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff ff28 	bl	8002930 <SX1278_SPIBurstWrite.part.1>
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8002ae0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <SX1278_config+0x110>)
 8002ae6:	2109      	movs	r1, #9
 8002ae8:	5cd2      	ldrb	r2, [r2, r3]
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff8b 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002af0:	220b      	movs	r2, #11
 8002af2:	4620      	mov	r0, r4
 8002af4:	4611      	mov	r1, r2
 8002af6:	f7ff ff86 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002afa:	2223      	movs	r2, #35	; 0x23
 8002afc:	210c      	movs	r1, #12
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff ff81 	bl	8002a06 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8002b04:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <SX1278_config+0x114>)
 8002b0a:	5cd5      	ldrb	r5, [r2, r3]
 8002b0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002b10:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <SX1278_config+0x118>)
 8002b12:	2d06      	cmp	r5, #6
 8002b14:	5cd2      	ldrb	r2, [r2, r3]
 8002b16:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	d137      	bne.n	8002b8e <SX1278_config+0xf2>
		SX1278_SPIWrite(module,
 8002b1e:	3203      	adds	r2, #3
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	211d      	movs	r1, #29
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff ff6e 	bl	8002a06 <SX1278_SPIWrite>
		SX1278_SPIWrite(module,
 8002b2a:	2267      	movs	r2, #103	; 0x67
 8002b2c:	211e      	movs	r1, #30
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff ff69 	bl	8002a06 <SX1278_SPIWrite>
		tmp = SX1278_SPIRead(module, 0x31);
 8002b34:	2131      	movs	r1, #49	; 0x31
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff ff56 	bl	80029e8 <SX1278_SPIRead>
		tmp &= 0xF8;
 8002b3c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		SX1278_SPIWrite(module, 0x31, tmp);
 8002b40:	f042 0205 	orr.w	r2, r2, #5
 8002b44:	2131      	movs	r1, #49	; 0x31
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff ff5d 	bl	8002a06 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002b4c:	220c      	movs	r2, #12
 8002b4e:	2137      	movs	r1, #55	; 0x37
		SX1278_SPIWrite(module,
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff ff58 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002b56:	4620      	mov	r0, r4
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	211f      	movs	r1, #31
 8002b5c:	f7ff ff53 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002b60:	4620      	mov	r0, r4
 8002b62:	2200      	movs	r2, #0
 8002b64:	2120      	movs	r1, #32
 8002b66:	f7ff ff4e 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	220c      	movs	r2, #12
 8002b6e:	2121      	movs	r1, #33	; 0x21
 8002b70:	f7ff ff49 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002b74:	2201      	movs	r2, #1
 8002b76:	2141      	movs	r1, #65	; 0x41
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff ff44 	bl	8002a06 <SX1278_SPIWrite>
	module->readBytes = 0;
 8002b7e:	2300      	movs	r3, #0
	SX1278_standby(module); //Entry standby mode
 8002b80:	4620      	mov	r0, r4
	module->readBytes = 0;
 8002b82:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
	SX1278_standby(module); //Entry standby mode
 8002b86:	f7ff ff73 	bl	8002a70 <SX1278_standby>
}
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}
		SX1278_SPIWrite(module,
 8002b8e:	3202      	adds	r2, #2
 8002b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b94:	211d      	movs	r1, #29
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff ff35 	bl	8002a06 <SX1278_SPIWrite>
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8002b9c:	012a      	lsls	r2, r5, #4
		SX1278_SPIWrite(module,
 8002b9e:	3207      	adds	r2, #7
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	211e      	movs	r1, #30
 8002ba4:	e7d4      	b.n	8002b50 <SX1278_config+0xb4>
 8002ba6:	bf00      	nop
 8002ba8:	01e84800 	.word	0x01e84800
 8002bac:	08008c56 	.word	0x08008c56
 8002bb0:	08008c5a 	.word	0x08008c5a
 8002bb4:	08008c4c 	.word	0x08008c4c

08002bb8 <SX1278_defaultConfig>:
void SX1278_defaultConfig(SX1278_t * module) {
 8002bb8:	b530      	push	{r4, r5, lr}
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8002bba:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 8002bbe:	7c82      	ldrb	r2, [r0, #18]
void SX1278_defaultConfig(SX1278_t * module) {
 8002bc0:	b085      	sub	sp, #20
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8002bc2:	7c03      	ldrb	r3, [r0, #16]
 8002bc4:	9202      	str	r2, [sp, #8]
 8002bc6:	7c42      	ldrb	r2, [r0, #17]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	462b      	mov	r3, r5
 8002bce:	4622      	mov	r2, r4
 8002bd0:	f7ff ff64 	bl	8002a9c <SX1278_config>
}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bd30      	pop	{r4, r5, pc}

08002bd8 <SX1278_clearLoRaIrq>:
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	2112      	movs	r1, #18
 8002bdc:	f7ff bf13 	b.w	8002a06 <SX1278_SPIWrite>

08002be0 <SX1278_LoRaEntryRx>:
}

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4604      	mov	r4, r0
 8002be4:	460e      	mov	r6, r1
	uint8_t addr;

	module->packetLength = length;
 8002be6:	74e1      	strb	r1, [r4, #19]
int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002be8:	4615      	mov	r5, r2

	SX1278_defaultConfig(module);		//Setting base parameter
 8002bea:	f7ff ffe5 	bl	8002bb8 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8002bee:	2284      	movs	r2, #132	; 0x84
 8002bf0:	214d      	movs	r1, #77	; 0x4d
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ff07 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	2124      	movs	r1, #36	; 0x24
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff ff02 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8002c02:	2201      	movs	r2, #1
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7ff fefd 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	2111      	movs	r1, #17
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff fef8 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ffde 	bl	8002bd8 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	2122      	movs	r1, #34	; 0x22
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fef0 	bl	8002a06 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8002c26:	210f      	movs	r1, #15
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff fedd 	bl	80029e8 <SX1278_SPIRead>
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8002c2e:	210d      	movs	r1, #13
 8002c30:	4602      	mov	r2, r0
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fee7 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8002c38:	228d      	movs	r2, #141	; 0x8d
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff fee2 	bl	8002a06 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c48:	2118      	movs	r1, #24
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff fecc 	bl	80029e8 <SX1278_SPIRead>
 8002c50:	0743      	lsls	r3, r0, #29
 8002c52:	d503      	bpl.n	8002c5c <SX1278_LoRaEntryRx+0x7c>
			module->status = RX;
 8002c54:	2303      	movs	r3, #3
			return 1;
 8002c56:	2001      	movs	r0, #1
			module->status = RX;
 8002c58:	7523      	strb	r3, [r4, #20]
			SX1278_defaultConfig(module);
			return 0;
		}
		SX1278_hw_DelayMs(1);
	}
}
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
		if (--timeout == 0) {
 8002c5c:	3d01      	subs	r5, #1
 8002c5e:	d107      	bne.n	8002c70 <SX1278_LoRaEntryRx+0x90>
			SX1278_hw_Reset(module->hw);
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	f7ff fea2 	bl	80029aa <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffa6 	bl	8002bb8 <SX1278_defaultConfig>
			return 0;
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	e7f4      	b.n	8002c5a <SX1278_LoRaEntryRx+0x7a>
		SX1278_hw_DelayMs(1);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7ff fe98 	bl	80029a6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c76:	e7e7      	b.n	8002c48 <SX1278_LoRaEntryRx+0x68>

08002c78 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f7ff feaa 	bl	80029d6 <SX1278_hw_GetDIO0>
 8002c82:	b1f0      	cbz	r0, 8002cc2 <SX1278_LoRaRxPacket+0x4a>
	//if (1) {
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002c84:	f104 0615 	add.w	r6, r4, #21
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f001 f9ce 	bl	8004030 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002c94:	2110      	movs	r1, #16
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fea6 	bl	80029e8 <SX1278_SPIRead>
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002c9c:	210d      	movs	r1, #13
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff feb0 	bl	8002a06 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8002ca6:	7c63      	ldrb	r3, [r4, #17]
 8002ca8:	b973      	cbnz	r3, 8002cc8 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8002caa:	7ce5      	ldrb	r5, [r4, #19]
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002cac:	4620      	mov	r0, r4
 8002cae:	462b      	mov	r3, r5
 8002cb0:	4632      	mov	r2, r6
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f7ff febd 	bl	8002a32 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8002cb8:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
		SX1278_clearLoRaIrq(module);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff8b 	bl	8002bd8 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
}
 8002cc2:	f894 0115 	ldrb.w	r0, [r4, #277]	; 0x115
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8002cc8:	2113      	movs	r1, #19
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7ff fe8c 	bl	80029e8 <SX1278_SPIRead>
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	e7eb      	b.n	8002cac <SX1278_LoRaRxPacket+0x34>

08002cd4 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	4604      	mov	r4, r0
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	f89d a020 	ldrb.w	sl, [sp, #32]
 8002ce2:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8002ce6:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8002cea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	SX1278_hw_init(module->hw);
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	f7ff fdfc 	bl	80028ec <SX1278_hw_init>
	module->frequency = frequency;
 8002cf4:	e9c4 8902 	strd	r8, r9, [r4, #8]
	module->power = power;
 8002cf8:	f884 a010 	strb.w	sl, [r4, #16]
	module->LoRa_Rate = LoRa_Rate;
 8002cfc:	7467      	strb	r7, [r4, #17]
	module->LoRa_BW = LoRa_BW;
 8002cfe:	74a6      	strb	r6, [r4, #18]
	module->packetLength = packetLength;
 8002d00:	74e5      	strb	r5, [r4, #19]
	SX1278_defaultConfig(module);
 8002d02:	4620      	mov	r0, r4
}
 8002d04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SX1278_defaultConfig(module);
 8002d08:	f7ff bf56 	b.w	8002bb8 <SX1278_defaultConfig>

08002d0c <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	460e      	mov	r6, r1
	if (length != module->readBytes)
 8002d10:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8002d14:	4605      	mov	r5, r0
		length = module->readBytes;
	memcpy(rxBuf, module->rxBuffer, length);
 8002d16:	f100 0115 	add.w	r1, r0, #21
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f001 f963 	bl	8003fe8 <memcpy>
	rxBuf[length] = '\0';
 8002d22:	2300      	movs	r3, #0
	module->readBytes = 0;
	return length;
}
 8002d24:	4620      	mov	r0, r4
	rxBuf[length] = '\0';
 8002d26:	5533      	strb	r3, [r6, r4]
	module->readBytes = 0;
 8002d28:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}

08002d2e <SX1278_SNR_LoRa>:

uint8_t SX1278_SNR_LoRa(SX1278_t * module) {
 8002d2e:	b508      	push	{r3, lr}
	uint32_t temp = 10;
	temp = SX1278_SPIRead(module, LR_RegPktSnrValue); //Read RegRssiValue, Snr value
 8002d30:	2119      	movs	r1, #25
 8002d32:	f7ff fe59 	bl	80029e8 <SX1278_SPIRead>
	temp /= 4;
	return (uint8_t) temp;
}
 8002d36:	f3c0 0087 	ubfx	r0, r0, #2, #8
 8002d3a:	bd08      	pop	{r3, pc}

08002d3c <SX1278_RSSI_LoRa>:

uint8_t SX1278_RSSI_LoRa(SX1278_t * module) {
	uint32_t temp = 10;
	temp = SX1278_SPIRead(module, LR_RegRssiValue); //Read RegRssiValue, Rssi value
 8002d3c:	211b      	movs	r1, #27
 8002d3e:	f7ff be53 	b.w	80029e8 <SX1278_SPIRead>

08002d42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d42:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d44:	2414      	movs	r4, #20
{
 8002d46:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d48:	4622      	mov	r2, r4
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	a80c      	add	r0, sp, #48	; 0x30
 8002d4e:	f001 f96f 	bl	8004030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d52:	4622      	mov	r2, r4
 8002d54:	eb0d 0004 	add.w	r0, sp, r4
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f001 f969 	bl	8004030 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2210      	movs	r2, #16
 8002d62:	a801      	add	r0, sp, #4
 8002d64:	f001 f964 	bl	8004030 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d68:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d74:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d7c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d7e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d80:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d82:	f7fe ff19 	bl	8001bb8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d86:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d8c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d90:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d92:	4621      	mov	r1, r4
 8002d94:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d96:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d9a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d9c:	f7ff f8e4 	bl	8001f68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da4:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002da6:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002da8:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002daa:	f7ff f999 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002dae:	b014      	add	sp, #80	; 0x50
 8002db0:	bd10      	pop	{r4, pc}
	...

08002db4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == DO_RF_Pin){
 8002db4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8002db8:	b508      	push	{r3, lr}
	if(GPIO_Pin == DO_RF_Pin){
 8002dba:	d114      	bne.n	8002de6 <HAL_GPIO_EXTI_Callback+0x32>
			ret = SX1278_LoRaRxPacket(&SX1278);
 8002dbc:	480a      	ldr	r0, [pc, #40]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002dbe:	f7ff ff5b 	bl	8002c78 <SX1278_LoRaRxPacket>
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_GPIO_EXTI_Callback+0x38>)
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6018      	str	r0, [r3, #0]
				 	if (ret > 0) {
 8002dc8:	b130      	cbz	r0, 8002dd8 <HAL_GPIO_EXTI_Callback+0x24>
				 		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8002dca:	4909      	ldr	r1, [pc, #36]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002dcc:	4806      	ldr	r0, [pc, #24]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002dce:	f7ff ff9d 	bl	8002d0c <SX1278_read>
					 	//printf("Zawartość pakietu (%d): %s\r\n", ret, buffer);
					 	flag_new_position = 1;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x40>)
 8002dd6:	601a      	str	r2, [r3, #0]
				 	}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		}
}
 8002ddc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_GPIO_EXTI_Callback+0x44>)
 8002de2:	f7fe bc74 	b.w	80016ce <HAL_GPIO_TogglePin>
}
 8002de6:	bd08      	pop	{r3, pc}
 8002de8:	20000798 	.word	0x20000798
 8002dec:	200008b0 	.word	0x200008b0
 8002df0:	200006bc 	.word	0x200006bc
 8002df4:	20000214 	.word	0x20000214
 8002df8:	40011000 	.word	0x40011000

08002dfc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef *hadc){
 8002dfc:	b508      	push	{r3, lr}
	if(hadc == &hadc1){
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_ADC_ConvCpltCallback+0x18>)
 8002e00:	4283      	cmp	r3, r0
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_ConvCpltCallback+0x16>
		adc_flag = 1;
 8002e04:	2201      	movs	r2, #1
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002e08:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(hadc);
 8002e0a:	f7fe f889 	bl	8000f20 <HAL_ADC_GetValue>
 8002e0e:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_ADC_ConvCpltCallback+0x20>)
 8002e10:	6018      	str	r0, [r3, #0]
	}
}
 8002e12:	bd08      	pop	{r3, pc}
 8002e14:	2000068c 	.word	0x2000068c
 8002e18:	20000684 	.word	0x20000684
 8002e1c:	20000688 	.word	0x20000688

08002e20 <Beep>:
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void Beep(int time_delay){
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002e24:	4c07      	ldr	r4, [pc, #28]	; (8002e44 <Beep+0x24>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f7fe fc4a 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8002e30:	4628      	mov	r0, r5
 8002e32:	f7fe f863 	bl	8000efc <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e36:	4620      	mov	r0, r4
}
 8002e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2102      	movs	r1, #2
 8002e40:	f7fe bc40 	b.w	80016c4 <HAL_GPIO_WritePin>
 8002e44:	40010800 	.word	0x40010800

08002e48 <_write>:

int _write(int file, char *ptr, int len){
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8002e4c:	2332      	movs	r3, #50	; 0x32
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <_write+0x14>)
 8002e52:	f7ff fceb 	bl	800282c <HAL_UART_Transmit>
    return len;
}
 8002e56:	4620      	mov	r0, r4
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000754 	.word	0x20000754

08002e60 <writeUART>:

int writeUART(float latitude, float longitude, float altitude, float velocity, int rssi, int snr){
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	4617      	mov	r7, r2
 8002e68:	4698      	mov	r8, r3
 8002e6a:	460e      	mov	r6, r1
    return printf("%f/%f/%f/%f/%d/%d\n\r", latitude, longitude, altitude, velocity, rssi, snr);
 8002e6c:	f7fd fadc 	bl	8000428 <__aeabi_f2d>
 8002e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e72:	4604      	mov	r4, r0
 8002e74:	9307      	str	r3, [sp, #28]
 8002e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e78:	4640      	mov	r0, r8
 8002e7a:	9306      	str	r3, [sp, #24]
 8002e7c:	460d      	mov	r5, r1
 8002e7e:	f7fd fad3 	bl	8000428 <__aeabi_f2d>
 8002e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e86:	4638      	mov	r0, r7
 8002e88:	f7fd face 	bl	8000428 <__aeabi_f2d>
 8002e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7fd fac9 	bl	8000428 <__aeabi_f2d>
 8002e96:	4622      	mov	r2, r4
 8002e98:	e9cd 0100 	strd	r0, r1, [sp]
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	4803      	ldr	r0, [pc, #12]	; (8002eac <writeUART+0x4c>)
 8002ea0:	f001 fefe 	bl	8004ca0 <iprintf>
}
 8002ea4:	b008      	add	sp, #32
 8002ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eaa:	bf00      	nop
 8002eac:	08008c6d 	.word	0x08008c6d

08002eb0 <main>:
{
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	b09b      	sub	sp, #108	; 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb6:	ae16      	add	r6, sp, #88	; 0x58
  HAL_Init();
 8002eb8:	f7fd fffc 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 8002ebc:	f7ff ff41 	bl	8002d42 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f001 f8b3 	bl	8004030 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	4bc7      	ldr	r3, [pc, #796]	; (80031e8 <main+0x338>)
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002ecc:	f8df b368 	ldr.w	fp, [pc, #872]	; 8003238 <main+0x388>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002ed2:	f8df 9368 	ldr.w	r9, [pc, #872]	; 800323c <main+0x38c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	f042 0210 	orr.w	r2, r2, #16
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee2:	f002 0210 	and.w	r2, r2, #16
 8002ee6:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002eec:	48bf      	ldr	r0, [pc, #764]	; (80031ec <main+0x33c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eee:	f042 0220 	orr.w	r2, r2, #32
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef8:	f002 0220 	and.w	r2, r2, #32
 8002efc:	920c      	str	r2, [sp, #48]	; 0x30
 8002efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f12:	f002 0204 	and.w	r2, r2, #4
 8002f16:	920d      	str	r2, [sp, #52]	; 0x34
 8002f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8002f1c:	4fb4      	ldr	r7, [pc, #720]	; (80031f0 <main+0x340>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	f042 0208 	orr.w	r2, r2, #8
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f26:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8002f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f30:	f7fe fbc8 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f3a:	4658      	mov	r0, fp
 8002f3c:	f7fe fbc2 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002f40:	2200      	movs	r2, #0
 8002f42:	2181      	movs	r1, #129	; 0x81
 8002f44:	4648      	mov	r0, r9
 8002f46:	f7fe fbbd 	bl	80016c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f4e:	4631      	mov	r1, r6
 8002f50:	48a6      	ldr	r0, [pc, #664]	; (80031ec <main+0x33c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f5a:	f7fe facd 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUZZER_Pin|CS_RF_Pin;
 8002f5e:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	4631      	mov	r1, r6
 8002f64:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f66:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6e:	f7fe fac3 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|D_C_Pin;
 8002f72:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f74:	4631      	mov	r1, r6
 8002f76:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	f7fe faba 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_RF_Pin;
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f88:	4a9a      	ldr	r2, [pc, #616]	; (80031f4 <main+0x344>)
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = DO_RF_Pin;
 8002f8e:	9316      	str	r3, [sp, #88]	; 0x58
 8002f90:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f92:	e9cd 2a17 	strd	r2, sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8002f96:	f7fe faaf 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FIRE_Pin;
 8002f9a:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	4631      	mov	r1, r6
 8002f9e:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa0:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f7fe faa7 	bl	80014f8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002faa:	4621      	mov	r1, r4
 8002fac:	4622      	mov	r2, r4
 8002fae:	2028      	movs	r0, #40	; 0x28
 8002fb0:	f7fe fa02 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fb4:	2028      	movs	r0, #40	; 0x28
 8002fb6:	f7fe fa33 	bl	8001420 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002fba:	4a8f      	ldr	r2, [pc, #572]	; (80031f8 <main+0x348>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fbc:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 8002fbe:	603a      	str	r2, [r7, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fc0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8002fc4:	f8c7 8010 	str.w	r8, [r7, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fc8:	61fa      	str	r2, [r7, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fca:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fcc:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fce:	753c      	strb	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fd0:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fd2:	9416      	str	r4, [sp, #88]	; 0x58
 8002fd4:	e9c6 4401 	strd	r4, r4, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fd8:	f7fe f95a 	bl	8001290 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fdc:	4631      	mov	r1, r6
 8002fde:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fe0:	e9cd 4816 	strd	r4, r8, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002fe4:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe6:	f7fe f815 	bl	8001014 <HAL_ADC_ConfigChannel>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fea:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8002fee:	4d83      	ldr	r5, [pc, #524]	; (80031fc <main+0x34c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <main+0x350>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ff6:	e9c5 3200 	strd	r3, r2, [r5]
  hspi1.Init.CRCPolynomial = 10;
 8002ffa:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ffc:	2208      	movs	r2, #8
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ffe:	4628      	mov	r0, r5
  hspi1.Init.CRCPolynomial = 10;
 8003000:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003002:	e9c5 1206 	strd	r1, r2, [r5, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003006:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800300a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800300e:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003012:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003014:	f7ff f925 	bl	8002262 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8003018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800301c:	f8df c220 	ldr.w	ip, [pc, #544]	; 8003240 <main+0x390>
  huart2.Instance = USART2;
 8003020:	4878      	ldr	r0, [pc, #480]	; (8003204 <main+0x354>)
  huart2.Init.BaudRate = 115200;
 8003022:	e9c0 c200 	strd	ip, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003026:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003028:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302c:	e9c0 2405 	strd	r2, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003030:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003032:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003034:	f7ff fbcc 	bl	80027d0 <HAL_UART_Init>
  hi2c2.Init.ClockSpeed = 100000;
 8003038:	f8df e208 	ldr.w	lr, [pc, #520]	; 8003244 <main+0x394>
  hi2c2.Instance = I2C2;
 800303c:	4872      	ldr	r0, [pc, #456]	; (8003208 <main+0x358>)
  hi2c2.Init.ClockSpeed = 100000;
 800303e:	4a73      	ldr	r2, [pc, #460]	; (800320c <main+0x35c>)
  hi2c2.Init.OwnAddress1 = 0;
 8003040:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8003044:	e9c0 e200 	strd	lr, r2, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800304c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003050:	e9c0 2404 	strd	r2, r4, [r0, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003054:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003056:	f7fe fc6b 	bl	8001930 <HAL_I2C_Init>
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800305a:	4621      	mov	r1, r4
 800305c:	4622      	mov	r2, r4
 800305e:	2023      	movs	r0, #35	; 0x23
 8003060:	f7fe f9aa 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003064:	2023      	movs	r0, #35	; 0x23
 8003066:	f7fe f9db 	bl	8001420 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc1);
 800306a:	4638      	mov	r0, r7
 800306c:	f7fe f888 	bl	8001180 <HAL_ADC_Start_IT>
  ssd1306_Init();
 8003070:	f000 fa42 	bl	80034f8 <ssd1306_Init>
  ssd1306_Print_initial_screen();
 8003074:	f000 fda8 	bl	8003bc8 <ssd1306_Print_initial_screen>
  HAL_Delay(2000);
 8003078:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800307c:	f7fd ff3e 	bl	8000efc <HAL_Delay>
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 8003080:	4a63      	ldr	r2, [pc, #396]	; (8003210 <main+0x360>)
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8003082:	9b05      	ldr	r3, [sp, #20]
	SX1278_hw.reset.pin = RST_RF_Pin;
 8003084:	e9c2 8900 	strd	r8, r9, [r2]
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8003088:	6093      	str	r3, [r2, #8]
	SX1278_hw.nss.pin = CS_RF_Pin;
 800308a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 800308e:	f04f 080a 	mov.w	r8, #10
	SX1278_hw.nss.pin = CS_RF_Pin;
 8003092:	6113      	str	r3, [r2, #16]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8003094:	2307      	movs	r3, #7
	SX1278_hw.spi = &hspi1;
 8003096:	6195      	str	r5, [r2, #24]
	SX1278.hw = &SX1278_hw;
 8003098:	4d5e      	ldr	r5, [pc, #376]	; (8003214 <main+0x364>)
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 800309a:	f8c2 900c 	str.w	r9, [r2, #12]
	SX1278.hw = &SX1278_hw;
 800309e:	602a      	str	r2, [r5, #0]
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 80030a0:	f8c2 b014 	str.w	fp, [r2, #20]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 80030a4:	4628      	mov	r0, r5
 80030a6:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80030aa:	a34d      	add	r3, pc, #308	; (adr r3, 80031e0 <main+0x330>)
 80030ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b0:	e9cd 4a00 	strd	r4, sl, [sp]
 80030b4:	f7ff fe0e 	bl	8002cd4 <SX1278_begin>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030bc:	2110      	movs	r1, #16
 80030be:	4628      	mov	r0, r5
 80030c0:	f7ff fd8e 	bl	8002be0 <SX1278_LoRaEntryRx>
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <main+0x368>)
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030c6:	4b55      	ldr	r3, [pc, #340]	; (800321c <main+0x36c>)
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030c8:	6851      	ldr	r1, [r2, #4]
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030ca:	6018      	str	r0, [r3, #0]
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030cc:	6810      	ldr	r0, [r2, #0]
 80030ce:	ab13      	add	r3, sp, #76	; 0x4c
 80030d0:	c303      	stmia	r3!, {r0, r1}
 80030d2:	7a12      	ldrb	r2, [r2, #8]
	float V_Bat = 0.0;
 80030d4:	2500      	movs	r5, #0
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	4633      	mov	r3, r6
 80030da:	c303      	stmia	r3!, {r0, r1}
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	4b50      	ldr	r3, [pc, #320]	; (8003220 <main+0x370>)
		if(flag_new_position){
 80030e0:	4f50      	ldr	r7, [pc, #320]	; (8003224 <main+0x374>)
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	889a      	ldrh	r2, [r3, #4]
 80030e6:	799b      	ldrb	r3, [r3, #6]
 80030e8:	9011      	str	r0, [sp, #68]	; 0x44
 80030ea:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 80030ee:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <main+0x378>)
 80030f0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	791b      	ldrb	r3, [r3, #4]
 80030f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80030fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80030fe:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
		if(flag_new_position){
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d065      	beq.n	80031d4 <main+0x324>
				str_lat[c] = buffer[position + c - 1];
 8003108:	4b48      	ldr	r3, [pc, #288]	; (800322c <main+0x37c>)
			flag_new_position = 0;
 800310a:	2200      	movs	r2, #0
 800310c:	4618      	mov	r0, r3
 800310e:	603a      	str	r2, [r7, #0]
				str_lat[c] = buffer[position + c - 1];
 8003110:	18d1      	adds	r1, r2, r3
 8003112:	7889      	ldrb	r1, [r1, #2]
 8003114:	f808 1002 	strb.w	r1, [r8, r2]
				c++;
 8003118:	3201      	adds	r2, #1
			while (c < length) {
 800311a:	2a08      	cmp	r2, #8
 800311c:	d1f8      	bne.n	8003110 <main+0x260>
			str_lat[c] = '\0';
 800311e:	2200      	movs	r2, #0
 8003120:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
				str_lon[c] = buffer[position + c - 1];
 8003124:	1881      	adds	r1, r0, r2
 8003126:	7ac9      	ldrb	r1, [r1, #11]
 8003128:	54b1      	strb	r1, [r6, r2]
				c++;
 800312a:	3201      	adds	r2, #1
			while (c < length) {
 800312c:	2a08      	cmp	r2, #8
 800312e:	d1f9      	bne.n	8003124 <main+0x274>
			str_lon[c] = '\0';
 8003130:	2400      	movs	r4, #0
				str_alt[c] = buffer[position + c - 1];
 8003132:	7d1a      	ldrb	r2, [r3, #20]
			sscanf(str_lat,"%f",&lat);
 8003134:	493e      	ldr	r1, [pc, #248]	; (8003230 <main+0x380>)
				str_alt[c] = buffer[position + c - 1];
 8003136:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
 800313a:	7d5a      	ldrb	r2, [r3, #21]
			sscanf(str_lat,"%f",&lat);
 800313c:	4640      	mov	r0, r8
				str_alt[c] = buffer[position + c - 1];
 800313e:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 8003142:	7d9a      	ldrb	r2, [r3, #22]
			str_lon[c] = '\0';
 8003144:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
				str_alt[c] = buffer[position + c - 1];
 8003148:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 800314c:	7dda      	ldrb	r2, [r3, #23]
			str_alt[c] = '\0';
 800314e:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
				str_alt[c] = buffer[position + c - 1];
 8003152:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
 8003156:	7e1a      	ldrb	r2, [r3, #24]
			str_vel[c] = '\0';
 8003158:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
				str_alt[c] = buffer[position + c - 1];
 800315c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				str_vel[c] = buffer[position + c - 1];
 8003160:	7e9a      	ldrb	r2, [r3, #26]
 8003162:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 8003166:	7eda      	ldrb	r2, [r3, #27]
 8003168:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 800316c:	7f1a      	ldrb	r2, [r3, #28]
 800316e:	7f5b      	ldrb	r3, [r3, #29]
 8003170:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
			sscanf(str_lat,"%f",&lat);
 8003174:	aa07      	add	r2, sp, #28
				str_vel[c] = buffer[position + c - 1];
 8003176:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			sscanf(str_lat,"%f",&lat);
 800317a:	f001 fdcd 	bl	8004d18 <siscanf>
			sscanf(str_lon,"%f",&lon);
 800317e:	aa08      	add	r2, sp, #32
 8003180:	492b      	ldr	r1, [pc, #172]	; (8003230 <main+0x380>)
 8003182:	4630      	mov	r0, r6
 8003184:	f001 fdc8 	bl	8004d18 <siscanf>
			sscanf(str_alt,"%f",&alt);
 8003188:	aa09      	add	r2, sp, #36	; 0x24
 800318a:	4929      	ldr	r1, [pc, #164]	; (8003230 <main+0x380>)
 800318c:	a811      	add	r0, sp, #68	; 0x44
 800318e:	f001 fdc3 	bl	8004d18 <siscanf>
			sscanf(str_vel,"%f",&vel);
 8003192:	aa0a      	add	r2, sp, #40	; 0x28
 8003194:	4926      	ldr	r1, [pc, #152]	; (8003230 <main+0x380>)
 8003196:	a80f      	add	r0, sp, #60	; 0x3c
 8003198:	f001 fdbe 	bl	8004d18 <siscanf>
			int rssi = SX1278_RSSI_LoRa(&SX1278);
 800319c:	481d      	ldr	r0, [pc, #116]	; (8003214 <main+0x364>)
 800319e:	f7ff fdcd 	bl	8002d3c <SX1278_RSSI_LoRa>
 80031a2:	4681      	mov	r9, r0
			int snr = SX1278_SNR_LoRa(&SX1278);
 80031a4:	481b      	ldr	r0, [pc, #108]	; (8003214 <main+0x364>)
 80031a6:	f7ff fdc2 	bl	8002d2e <SX1278_SNR_LoRa>
 80031aa:	4682      	mov	sl, r0
			ssd1306_Print(lat, lon, alt, vel, V_Bat, rssi, snr);
 80031ac:	e9cd 9001 	strd	r9, r0, [sp, #4]
 80031b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031b4:	9908      	ldr	r1, [sp, #32]
 80031b6:	9807      	ldr	r0, [sp, #28]
 80031b8:	9500      	str	r5, [sp, #0]
 80031ba:	f000 faf5 	bl	80037a8 <ssd1306_Print>
			writeUART(lat, lon, alt, vel, rssi, snr);
 80031be:	e9cd 9a00 	strd	r9, sl, [sp]
 80031c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031c6:	9908      	ldr	r1, [sp, #32]
 80031c8:	9807      	ldr	r0, [sp, #28]
 80031ca:	f7ff fe49 	bl	8002e60 <writeUART>
			Beep(2);
 80031ce:	2002      	movs	r0, #2
 80031d0:	f7ff fe26 	bl	8002e20 <Beep>
		  if (adc_flag == 1 ){
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <main+0x384>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	2a01      	cmp	r2, #1
 80031da:	d14b      	bne.n	8003274 <main+0x3c4>
 80031dc:	e034      	b.n	8003248 <main+0x398>
 80031de:	bf00      	nop
 80031e0:	33bca100 	.word	0x33bca100
 80031e4:	00000000 	.word	0x00000000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40011000 	.word	0x40011000
 80031f0:	2000068c 	.word	0x2000068c
 80031f4:	10110000 	.word	0x10110000
 80031f8:	40012400 	.word	0x40012400
 80031fc:	200006fc 	.word	0x200006fc
 8003200:	40013000 	.word	0x40013000
 8003204:	20000754 	.word	0x20000754
 8003208:	20000630 	.word	0x20000630
 800320c:	000186a0 	.word	0x000186a0
 8003210:	200008b4 	.word	0x200008b4
 8003214:	20000798 	.word	0x20000798
 8003218:	08008c64 	.word	0x08008c64
 800321c:	200008b0 	.word	0x200008b0
 8003220:	08008c66 	.word	0x08008c66
 8003224:	20000214 	.word	0x20000214
 8003228:	08008c68 	.word	0x08008c68
 800322c:	200006bc 	.word	0x200006bc
 8003230:	08008c61 	.word	0x08008c61
 8003234:	20000684 	.word	0x20000684
 8003238:	40010800 	.word	0x40010800
 800323c:	40010c00 	.word	0x40010c00
 8003240:	40004400 	.word	0x40004400
 8003244:	40005800 	.word	0x40005800
			  adc_flag=0;
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
			  V_Bat = adc_value * (4.2/4096) *1.33;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <main+0x3f0>)
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	f7fd f8d8 	bl	8000404 <__aeabi_i2d>
 8003254:	a30e      	add	r3, pc, #56	; (adr r3, 8003290 <main+0x3e0>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f7fd f93d 	bl	80004d8 <__aeabi_dmul>
 800325e:	a30e      	add	r3, pc, #56	; (adr r3, 8003298 <main+0x3e8>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd f938 	bl	80004d8 <__aeabi_dmul>
 8003268:	f7fd fc2e 	bl	8000ac8 <__aeabi_d2f>
 800326c:	4605      	mov	r5, r0
			  HAL_ADC_Start_IT(&hadc1);
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <main+0x3f4>)
 8003270:	f7fd ff86 	bl	8001180 <HAL_ADC_Start_IT>
		watchdog++;
 8003274:	3401      	adds	r4, #1
		HAL_Delay(100);
 8003276:	2064      	movs	r0, #100	; 0x64
 8003278:	f7fd fe40 	bl	8000efc <HAL_Delay>
		if(watchdog >= 50){
 800327c:	2c31      	cmp	r4, #49	; 0x31
 800327e:	f77f af40 	ble.w	8003102 <main+0x252>
			ssd1306_Print_No_Signal(V_Bat);
 8003282:	4628      	mov	r0, r5
 8003284:	f000 fbe8 	bl	8003a58 <ssd1306_Print_No_Signal>
			Beep(200);
 8003288:	20c8      	movs	r0, #200	; 0xc8
 800328a:	f7ff fdc9 	bl	8002e20 <Beep>
 800328e:	e738      	b.n	8003102 <main+0x252>
 8003290:	cccccccd 	.word	0xcccccccd
 8003294:	3f50cccc 	.word	0x3f50cccc
 8003298:	147ae148 	.word	0x147ae148
 800329c:	3ff547ae 	.word	0x3ff547ae
 80032a0:	20000688 	.word	0x20000688
 80032a4:	2000068c 	.word	0x2000068c

080032a8 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 80032a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	461c      	mov	r4, r3
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 80032ae:	2c0a      	cmp	r4, #10
{
 80032b0:	4692      	mov	sl, r2
 80032b2:	4607      	mov	r7, r0
 80032b4:	460e      	mov	r6, r1
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
	if (precision > MAX_PRECISION)
 80032be:	f300 80b1 	bgt.w	8003424 <ftoa+0x17c>
	if (f < 0)
 80032c2:	f7fd fb7b 	bl	80009bc <__aeabi_dcmplt>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d063      	beq.n	8003392 <ftoa+0xea>
	{
		f = -f;
		*ptr++ = '-';
 80032ca:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 80032cc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 80032d0:	f10a 0801 	add.w	r8, sl, #1
 80032d4:	f88a 3000 	strb.w	r3, [sl]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80032d8:	2c00      	cmp	r4, #0
 80032da:	da5c      	bge.n	8003396 <ftoa+0xee>
	{
		if (f < 1.0) precision = 6;
 80032dc:	2200      	movs	r2, #0
 80032de:	4b5a      	ldr	r3, [pc, #360]	; (8003448 <ftoa+0x1a0>)
 80032e0:	4638      	mov	r0, r7
 80032e2:	4631      	mov	r1, r6
 80032e4:	f7fd fb6a 	bl	80009bc <__aeabi_dcmplt>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d161      	bne.n	80033b0 <ftoa+0x108>
		else if (f < 10.0) precision = 5;
 80032ec:	2200      	movs	r2, #0
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <ftoa+0x1a4>)
 80032f0:	4638      	mov	r0, r7
 80032f2:	4631      	mov	r1, r6
 80032f4:	f7fd fb62 	bl	80009bc <__aeabi_dcmplt>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d15b      	bne.n	80033b4 <ftoa+0x10c>
		else if (f < 100.0) precision = 4;
 80032fc:	2200      	movs	r2, #0
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <ftoa+0x1a8>)
 8003300:	4638      	mov	r0, r7
 8003302:	4631      	mov	r1, r6
 8003304:	f7fd fb5a 	bl	80009bc <__aeabi_dcmplt>
 8003308:	2800      	cmp	r0, #0
 800330a:	d155      	bne.n	80033b8 <ftoa+0x110>
		else if (f < 1000.0) precision = 3;
 800330c:	2200      	movs	r2, #0
 800330e:	4b51      	ldr	r3, [pc, #324]	; (8003454 <ftoa+0x1ac>)
 8003310:	4638      	mov	r0, r7
 8003312:	4631      	mov	r1, r6
 8003314:	f7fd fb52 	bl	80009bc <__aeabi_dcmplt>
 8003318:	2800      	cmp	r0, #0
 800331a:	d14f      	bne.n	80033bc <ftoa+0x114>
		else if (f < 10000.0) precision = 2;
 800331c:	a346      	add	r3, pc, #280	; (adr r3, 8003438 <ftoa+0x190>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	4638      	mov	r0, r7
 8003324:	4631      	mov	r1, r6
 8003326:	f7fd fb49 	bl	80009bc <__aeabi_dcmplt>
 800332a:	2800      	cmp	r0, #0
 800332c:	d148      	bne.n	80033c0 <ftoa+0x118>
		else if (f < 100000.0) precision = 1;
 800332e:	a344      	add	r3, pc, #272	; (adr r3, 8003440 <ftoa+0x198>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	4638      	mov	r0, r7
 8003336:	4631      	mov	r1, r6
 8003338:	f7fd fb40 	bl	80009bc <__aeabi_dcmplt>
 800333c:	2800      	cmp	r0, #0
 800333e:	d141      	bne.n	80033c4 <ftoa+0x11c>
		else precision = 0;
 8003340:	4604      	mov	r4, r0
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 8003342:	4638      	mov	r0, r7
 8003344:	4631      	mov	r1, r6
 8003346:	f7fd fb77 	bl	8000a38 <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 800334a:	2800      	cmp	r0, #0
 800334c:	d13c      	bne.n	80033c8 <ftoa+0x120>
		*ptr++ = '0';
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	f108 0501 	add.w	r5, r8, #1
 8003354:	f888 3000 	strb.w	r3, [r8]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8003358:	b19c      	cbz	r4, 8003382 <ftoa+0xda>
	f -= intPart;
 800335a:	f7fd f853 	bl	8000404 <__aeabi_i2d>
 800335e:	460b      	mov	r3, r1
 8003360:	4602      	mov	r2, r0
 8003362:	4631      	mov	r1, r6
 8003364:	4638      	mov	r0, r7
 8003366:	f7fc feff 	bl	8000168 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 800336a:	232e      	movs	r3, #46	; 0x2e
 800336c:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 800336e:	2600      	movs	r6, #0
		*ptr++ = '.';
 8003370:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 8003372:	4f36      	ldr	r7, [pc, #216]	; (800344c <ftoa+0x1a4>)
 8003374:	192b      	adds	r3, r5, r4
 8003376:	9301      	str	r3, [sp, #4]
		while (precision--)
 8003378:	9b01      	ldr	r3, [sp, #4]
 800337a:	455b      	cmp	r3, fp
 800337c:	d13c      	bne.n	80033f8 <ftoa+0x150>
 800337e:	3401      	adds	r4, #1
 8003380:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 8003382:	2300      	movs	r3, #0

	return buf;
}
 8003384:	4650      	mov	r0, sl
	*ptr = 0;
 8003386:	702b      	strb	r3, [r5, #0]
}
 8003388:	b003      	add	sp, #12
 800338a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		precision = MAX_PRECISION;
 800338e:	240a      	movs	r4, #10
 8003390:	e79b      	b.n	80032ca <ftoa+0x22>
 8003392:	46d0      	mov	r8, sl
 8003394:	e7a0      	b.n	80032d8 <ftoa+0x30>
	if (precision)
 8003396:	d0d4      	beq.n	8003342 <ftoa+0x9a>
		f += rounders[precision];
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <ftoa+0x1b0>)
 800339a:	4638      	mov	r0, r7
 800339c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80033a0:	4631      	mov	r1, r6
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f7fc fee1 	bl	800016c <__adddf3>
 80033aa:	4607      	mov	r7, r0
 80033ac:	460e      	mov	r6, r1
 80033ae:	e7c8      	b.n	8003342 <ftoa+0x9a>
		if (f < 1.0) precision = 6;
 80033b0:	2406      	movs	r4, #6
 80033b2:	e7f1      	b.n	8003398 <ftoa+0xf0>
		else if (f < 10.0) precision = 5;
 80033b4:	2405      	movs	r4, #5
 80033b6:	e7ef      	b.n	8003398 <ftoa+0xf0>
		else if (f < 100.0) precision = 4;
 80033b8:	2404      	movs	r4, #4
 80033ba:	e7ed      	b.n	8003398 <ftoa+0xf0>
		else if (f < 1000.0) precision = 3;
 80033bc:	2403      	movs	r4, #3
 80033be:	e7eb      	b.n	8003398 <ftoa+0xf0>
		else if (f < 10000.0) precision = 2;
 80033c0:	2402      	movs	r4, #2
 80033c2:	e7e9      	b.n	8003398 <ftoa+0xf0>
		else if (f < 100000.0) precision = 1;
 80033c4:	2401      	movs	r4, #1
 80033c6:	e7e7      	b.n	8003398 <ftoa+0xf0>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 80033cc:	210a      	movs	r1, #10
 80033ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80033d2:	fb01 3312 	mls	r3, r1, r2, r3
 80033d6:	3330      	adds	r3, #48	; 0x30
 80033d8:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 80033dc:	4613      	mov	r3, r2
 80033de:	2a00      	cmp	r2, #0
 80033e0:	d1f5      	bne.n	80033ce <ftoa+0x126>
			*p++ = '0' + intPart % 10;
 80033e2:	462b      	mov	r3, r5
		while (p > ptr)
 80033e4:	4598      	cmp	r8, r3
 80033e6:	d2b7      	bcs.n	8003358 <ftoa+0xb0>
			c = *--p;
 80033e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 80033ec:	f898 1000 	ldrb.w	r1, [r8]
 80033f0:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 80033f2:	f808 2b01 	strb.w	r2, [r8], #1
 80033f6:	e7f5      	b.n	80033e4 <ftoa+0x13c>
			f *= 10.0;
 80033f8:	4632      	mov	r2, r6
 80033fa:	463b      	mov	r3, r7
 80033fc:	f7fd f86c 	bl	80004d8 <__aeabi_dmul>
 8003400:	4689      	mov	r9, r1
 8003402:	4680      	mov	r8, r0
			c = f;
 8003404:	f7fd fb40 	bl	8000a88 <__aeabi_d2uiz>
 8003408:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 800340a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800340e:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 8003412:	f7fc fff7 	bl	8000404 <__aeabi_i2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4640      	mov	r0, r8
 800341c:	4649      	mov	r1, r9
 800341e:	f7fc fea3 	bl	8000168 <__aeabi_dsub>
 8003422:	e7a9      	b.n	8003378 <ftoa+0xd0>
	if (f < 0)
 8003424:	f7fd faca 	bl	80009bc <__aeabi_dcmplt>
 8003428:	2800      	cmp	r0, #0
 800342a:	d1b0      	bne.n	800338e <ftoa+0xe6>
 800342c:	46d0      	mov	r8, sl
		precision = MAX_PRECISION;
 800342e:	240a      	movs	r4, #10
 8003430:	e7b2      	b.n	8003398 <ftoa+0xf0>
 8003432:	bf00      	nop
 8003434:	f3af 8000 	nop.w
 8003438:	00000000 	.word	0x00000000
 800343c:	40c38800 	.word	0x40c38800
 8003440:	00000000 	.word	0x00000000
 8003444:	40f86a00 	.word	0x40f86a00
 8003448:	3ff00000 	.word	0x3ff00000
 800344c:	40240000 	.word	0x40240000
 8003450:	40590000 	.word	0x40590000
 8003454:	408f4000 	.word	0x408f4000
 8003458:	08008c88 	.word	0x08008c88

0800345c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800345c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800345e:	2301      	movs	r3, #1
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
void ssd1306_WriteCommand(uint8_t byte) {
 8003464:	aa06      	add	r2, sp, #24
 8003466:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800346a:	9200      	str	r2, [sp, #0]
 800346c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	2178      	movs	r1, #120	; 0x78
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <ssd1306_WriteCommand+0x24>)
 8003476:	f7fe faff 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 800347a:	b007      	add	sp, #28
 800347c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003480:	20000630 	.word	0x20000630

08003484 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	b289      	uxth	r1, r1
 800348c:	e9cd 0100 	strd	r0, r1, [sp]
 8003490:	9302      	str	r3, [sp, #8]
 8003492:	2240      	movs	r2, #64	; 0x40
 8003494:	2301      	movs	r3, #1
 8003496:	2178      	movs	r1, #120	; 0x78
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <ssd1306_WriteData+0x20>)
 800349a:	f7fe faed 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 800349e:	b005      	add	sp, #20
 80034a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80034a4:	20000630 	.word	0x20000630

080034a8 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034a8:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80034aa:	4905      	ldr	r1, [pc, #20]	; (80034c0 <ssd1306_Fill+0x18>)
 80034ac:	1c02      	adds	r2, r0, #0
 80034ae:	bf18      	it	ne
 80034b0:	2201      	movne	r2, #1
 80034b2:	4252      	negs	r2, r2
 80034b4:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80034b6:	3301      	adds	r3, #1
 80034b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034bc:	d1f6      	bne.n	80034ac <ssd1306_Fill+0x4>
    }
}
 80034be:	4770      	bx	lr
 80034c0:	2000021e 	.word	0x2000021e

080034c4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80034c4:	b538      	push	{r3, r4, r5, lr}
 80034c6:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034c8:	4d0a      	ldr	r5, [pc, #40]	; (80034f4 <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80034ca:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80034ce:	b2c0      	uxtb	r0, r0
 80034d0:	f7ff ffc4 	bl	800345c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7ff ffc1 	bl	800345c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80034da:	2010      	movs	r0, #16
 80034dc:	f7ff ffbe 	bl	800345c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034e0:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	3401      	adds	r4, #1
 80034e8:	f7ff ffcc 	bl	8003484 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80034ec:	2c08      	cmp	r4, #8
 80034ee:	d1ec      	bne.n	80034ca <ssd1306_UpdateScreen+0x6>
    }
}
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
 80034f2:	bf00      	nop
 80034f4:	2000021e 	.word	0x2000021e

080034f8 <ssd1306_Init>:
void ssd1306_Init(void) {
 80034f8:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80034fa:	2064      	movs	r0, #100	; 0x64
 80034fc:	f7fd fcfe 	bl	8000efc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 8003500:	20ae      	movs	r0, #174	; 0xae
 8003502:	f7ff ffab 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003506:	2020      	movs	r0, #32
 8003508:	f7ff ffa8 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800350c:	2000      	movs	r0, #0
 800350e:	f7ff ffa5 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003512:	20b0      	movs	r0, #176	; 0xb0
 8003514:	f7ff ffa2 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003518:	20c8      	movs	r0, #200	; 0xc8
 800351a:	f7ff ff9f 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800351e:	2000      	movs	r0, #0
 8003520:	f7ff ff9c 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003524:	2010      	movs	r0, #16
 8003526:	f7ff ff99 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800352a:	2040      	movs	r0, #64	; 0x40
 800352c:	f7ff ff96 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003530:	2081      	movs	r0, #129	; 0x81
 8003532:	f7ff ff93 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8003536:	20ff      	movs	r0, #255	; 0xff
 8003538:	f7ff ff90 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800353c:	20a1      	movs	r0, #161	; 0xa1
 800353e:	f7ff ff8d 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003542:	20a6      	movs	r0, #166	; 0xa6
 8003544:	f7ff ff8a 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003548:	20a8      	movs	r0, #168	; 0xa8
 800354a:	f7ff ff87 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800354e:	203f      	movs	r0, #63	; 0x3f
 8003550:	f7ff ff84 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003554:	20a4      	movs	r0, #164	; 0xa4
 8003556:	f7ff ff81 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800355a:	20d3      	movs	r0, #211	; 0xd3
 800355c:	f7ff ff7e 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003560:	2000      	movs	r0, #0
 8003562:	f7ff ff7b 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003566:	20d5      	movs	r0, #213	; 0xd5
 8003568:	f7ff ff78 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800356c:	20f0      	movs	r0, #240	; 0xf0
 800356e:	f7ff ff75 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003572:	20d9      	movs	r0, #217	; 0xd9
 8003574:	f7ff ff72 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003578:	2022      	movs	r0, #34	; 0x22
 800357a:	f7ff ff6f 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800357e:	20da      	movs	r0, #218	; 0xda
 8003580:	f7ff ff6c 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8003584:	2012      	movs	r0, #18
 8003586:	f7ff ff69 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 800358a:	20db      	movs	r0, #219	; 0xdb
 800358c:	f7ff ff66 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003590:	2020      	movs	r0, #32
 8003592:	f7ff ff63 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003596:	208d      	movs	r0, #141	; 0x8d
 8003598:	f7ff ff60 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800359c:	2014      	movs	r0, #20
 800359e:	f7ff ff5d 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80035a2:	20af      	movs	r0, #175	; 0xaf
 80035a4:	f7ff ff5a 	bl	800345c <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 80035a8:	2000      	movs	r0, #0
 80035aa:	f7ff ff7d 	bl	80034a8 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80035ae:	f7ff ff89 	bl	80034c4 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 80035b2:	2200      	movs	r2, #0
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <ssd1306_Init+0xc8>)
 80035b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80035b8:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 80035ba:	2201      	movs	r2, #1
 80035bc:	715a      	strb	r2, [r3, #5]
}
 80035be:	bd08      	pop	{r3, pc}
 80035c0:	20000218 	.word	0x20000218

080035c4 <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80035c4:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80035c6:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80035c8:	d416      	bmi.n	80035f8 <ssd1306_DrawPixel+0x34>
 80035ca:	293f      	cmp	r1, #63	; 0x3f
 80035cc:	d814      	bhi.n	80035f8 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <ssd1306_DrawPixel+0x38>)
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	b113      	cbz	r3, 80035da <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	0952      	lsrs	r2, r2, #5
 80035da:	08cb      	lsrs	r3, r1, #3
 80035dc:	f001 0407 	and.w	r4, r1, #7
 80035e0:	2101      	movs	r1, #1
 80035e2:	4d07      	ldr	r5, [pc, #28]	; (8003600 <ssd1306_DrawPixel+0x3c>)
 80035e4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80035e8:	562b      	ldrsb	r3, [r5, r0]
 80035ea:	40a1      	lsls	r1, r4
 80035ec:	b249      	sxtb	r1, r1
    }
    
    // Draw in the right color
    if(color == White) {
 80035ee:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035f0:	bf0c      	ite	eq
 80035f2:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035f4:	438b      	bicne	r3, r1
 80035f6:	542b      	strb	r3, [r5, r0]
    }
}
 80035f8:	bd30      	pop	{r4, r5, pc}
 80035fa:	bf00      	nop
 80035fc:	20000218 	.word	0x20000218
 8003600:	2000021e 	.word	0x2000021e

08003604 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003608:	4604      	mov	r4, r0
 800360a:	b087      	sub	sp, #28
 800360c:	a806      	add	r0, sp, #24
 800360e:	e900 0006 	stmdb	r0, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003612:	f1a4 0220 	sub.w	r2, r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003616:	469b      	mov	fp, r3
    if (ch < 32 || ch > 126)
 8003618:	b2d3      	uxtb	r3, r2
 800361a:	2b5e      	cmp	r3, #94	; 0x5e
 800361c:	d83e      	bhi.n	800369c <ssd1306_WriteChar+0x98>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800361e:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <ssd1306_WriteChar+0x9c>)
 8003620:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8003624:	881d      	ldrh	r5, [r3, #0]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	eb05 0109 	add.w	r1, r5, r9
 800362c:	2980      	cmp	r1, #128	; 0x80
 800362e:	dc35      	bgt.n	800369c <ssd1306_WriteChar+0x98>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003630:	885b      	ldrh	r3, [r3, #2]
 8003632:	f89d a011 	ldrb.w	sl, [sp, #17]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	eb03 010a 	add.w	r1, r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800363c:	2940      	cmp	r1, #64	; 0x40
 800363e:	dc2d      	bgt.n	800369c <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003640:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003642:	fb0a f302 	mul.w	r3, sl, r2
 8003646:	9302      	str	r3, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8003648:	45b2      	cmp	sl, r6
 800364a:	d806      	bhi.n	800365a <ssd1306_WriteChar+0x56>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800364c:	9b01      	ldr	r3, [sp, #4]
 800364e:	444d      	add	r5, r9
 8003650:	801d      	strh	r5, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 8003652:	4620      	mov	r0, r4
 8003654:	b007      	add	sp, #28
 8003656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 800365a:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800365c:	9b02      	ldr	r3, [sp, #8]
 800365e:	9905      	ldr	r1, [sp, #20]
 8003660:	199a      	adds	r2, r3, r6
 8003662:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	eb06 0803 	add.w	r8, r6, r3
 800366e:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 8003672:	45b9      	cmp	r9, r7
 8003674:	d801      	bhi.n	800367a <ssd1306_WriteChar+0x76>
    for(i = 0; i < Font.FontHeight; i++) {
 8003676:	3601      	adds	r6, #1
 8003678:	e7e6      	b.n	8003648 <ssd1306_WriteChar+0x44>
            if((b << j) & 0x8000)  {
 800367a:	9b03      	ldr	r3, [sp, #12]
 800367c:	1978      	adds	r0, r7, r5
 800367e:	fa03 f207 	lsl.w	r2, r3, r7
 8003682:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003684:	bf58      	it	pl
 8003686:	fabb f28b 	clzpl	r2, fp
 800368a:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800368c:	bf4c      	ite	mi
 800368e:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003690:	0952      	lsrpl	r2, r2, #5
 8003692:	4641      	mov	r1, r8
 8003694:	f7ff ff96 	bl	80035c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003698:	3701      	adds	r7, #1
 800369a:	e7ea      	b.n	8003672 <ssd1306_WriteChar+0x6e>
        return 0;
 800369c:	2400      	movs	r4, #0
 800369e:	e7d8      	b.n	8003652 <ssd1306_WriteChar+0x4e>
 80036a0:	20000218 	.word	0x20000218

080036a4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80036a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036a6:	466d      	mov	r5, sp
 80036a8:	461f      	mov	r7, r3
 80036aa:	e885 0006 	stmia.w	r5, {r1, r2}
 80036ae:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 80036b0:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80036b4:	b144      	cbz	r4, 80036c8 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036b6:	e895 0006 	ldmia.w	r5, {r1, r2}
 80036ba:	4620      	mov	r0, r4
 80036bc:	463b      	mov	r3, r7
 80036be:	f7ff ffa1 	bl	8003604 <ssd1306_WriteChar>
 80036c2:	7834      	ldrb	r4, [r6, #0]
 80036c4:	42a0      	cmp	r0, r4
 80036c6:	d0f3      	beq.n	80036b0 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80036c8:	4620      	mov	r0, r4
 80036ca:	b003      	add	sp, #12
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ce <ssd1306_Line>:
    SSD1306.CurrentX = x;
    SSD1306.CurrentY = y;
}

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80036ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t deltaX = abs(x2 - x1);
 80036d2:	1a17      	subs	r7, r2, r0
  int32_t deltaY = abs(y2 - y1);
 80036d4:	eba3 0801 	sub.w	r8, r3, r1
  int32_t deltaX = abs(x2 - x1);
 80036d8:	2f00      	cmp	r7, #0
 80036da:	bfb8      	it	lt
 80036dc:	427f      	neglt	r7, r7
  int32_t deltaY = abs(y2 - y1);
 80036de:	f1b8 0f00 	cmp.w	r8, #0
 80036e2:	bfb8      	it	lt
 80036e4:	f1c8 0800 	rsblt	r8, r8, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80036e8:	4699      	mov	r9, r3
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80036ea:	4282      	cmp	r2, r0
 80036ec:	bf8c      	ite	hi
 80036ee:	2301      	movhi	r3, #1
 80036f0:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80036f4:	b085      	sub	sp, #20
 80036f6:	4692      	mov	sl, r2
  int32_t signX = ((x1 < x2) ? 1 : -1);
 80036f8:	9301      	str	r3, [sp, #4]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80036fa:	4589      	cmp	r9, r1
 80036fc:	bf8c      	ite	hi
 80036fe:	2301      	movhi	r3, #1
 8003700:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003704:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8003708:	4605      	mov	r5, r0
 800370a:	460c      	mov	r4, r1
  int32_t error = deltaX - deltaY;
  int32_t error2;
	
  ssd1306_DrawPixel(x2, y2, color);
 800370c:	465a      	mov	r2, fp
 800370e:	4649      	mov	r1, r9
 8003710:	4650      	mov	r0, sl
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8003712:	9302      	str	r3, [sp, #8]
  int32_t error = deltaX - deltaY;
 8003714:	eba7 0608 	sub.w	r6, r7, r8
  ssd1306_DrawPixel(x2, y2, color);
 8003718:	f7ff ff54 	bl	80035c4 <ssd1306_DrawPixel>
	while((x1 != x2) || (y1 != y2))
	{
    ssd1306_DrawPixel(x1, y1, color);
    error2 = error * 2;
    if(error2 > -deltaY)
 800371c:	f1c8 0300 	rsb	r3, r8, #0
	while((x1 != x2) || (y1 != y2))
 8003720:	4555      	cmp	r5, sl
 8003722:	d104      	bne.n	800372e <ssd1306_Line+0x60>
 8003724:	454c      	cmp	r4, r9
 8003726:	d102      	bne.n	800372e <ssd1306_Line+0x60>
    {
    /*nothing to do*/
    }
  }
  return;
}
 8003728:	b005      	add	sp, #20
 800372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ssd1306_DrawPixel(x1, y1, color);
 800372e:	4621      	mov	r1, r4
 8003730:	4628      	mov	r0, r5
 8003732:	465a      	mov	r2, fp
 8003734:	9303      	str	r3, [sp, #12]
 8003736:	f7ff ff45 	bl	80035c4 <ssd1306_DrawPixel>
    if(error2 > -deltaY)
 800373a:	9b03      	ldr	r3, [sp, #12]
    error2 = error * 2;
 800373c:	0072      	lsls	r2, r6, #1
    if(error2 > -deltaY)
 800373e:	4293      	cmp	r3, r2
      x1 += signX;
 8003740:	bfbf      	itttt	lt
 8003742:	9901      	ldrlt	r1, [sp, #4]
      error -= deltaY;
 8003744:	eba6 0608 	sublt.w	r6, r6, r8
      x1 += signX;
 8003748:	186d      	addlt	r5, r5, r1
 800374a:	b2ed      	uxtblt	r5, r5
    if(error2 < deltaX)
 800374c:	4297      	cmp	r7, r2
      y1 += signY;
 800374e:	bfc1      	itttt	gt
 8003750:	9a02      	ldrgt	r2, [sp, #8]
      error += deltaX;
 8003752:	19f6      	addgt	r6, r6, r7
      y1 += signY;
 8003754:	18a4      	addgt	r4, r4, r2
 8003756:	b2e4      	uxtbgt	r4, r4
 8003758:	e7e2      	b.n	8003720 <ssd1306_Line+0x52>

0800375a <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800375a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800375e:	461c      	mov	r4, r3
 8003760:	4617      	mov	r7, r2
 8003762:	460e      	mov	r6, r1
 8003764:	4680      	mov	r8, r0
 8003766:	f89d 5020 	ldrb.w	r5, [sp, #32]
  ssd1306_Line(x1,y1,x2,y1,color);
 800376a:	460b      	mov	r3, r1
 800376c:	9500      	str	r5, [sp, #0]
 800376e:	f7ff ffae 	bl	80036ce <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8003772:	4623      	mov	r3, r4
 8003774:	463a      	mov	r2, r7
 8003776:	4631      	mov	r1, r6
 8003778:	4638      	mov	r0, r7
 800377a:	9500      	str	r5, [sp, #0]
 800377c:	f7ff ffa7 	bl	80036ce <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8003780:	4623      	mov	r3, r4
 8003782:	4642      	mov	r2, r8
 8003784:	4621      	mov	r1, r4
 8003786:	4638      	mov	r0, r7
 8003788:	9500      	str	r5, [sp, #0]
 800378a:	f7ff ffa0 	bl	80036ce <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800378e:	4633      	mov	r3, r6
 8003790:	4642      	mov	r2, r8
 8003792:	4621      	mov	r1, r4
 8003794:	4640      	mov	r0, r8
 8003796:	9508      	str	r5, [sp, #32]

  return;
}
 8003798:	b002      	add	sp, #8
 800379a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_Line(x1,y2,x1,y1,color);
 800379e:	f7ff bf96 	b.w	80036ce <ssd1306_Line>
 80037a2:	0000      	movs	r0, r0
 80037a4:	0000      	movs	r0, r0
	...

080037a8 <ssd1306_Print>:

void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr){
 80037a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ac:	b095      	sub	sp, #84	; 0x54
 80037ae:	4681      	mov	r9, r0
	char lati[10], longi[10], alti[10], velo[10], rssi_c[10], snr_c[10];
	//float lines = (voltage - 3.0)/0.0635789;
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 80037b0:	981c      	ldr	r0, [sp, #112]	; 0x70
void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr){
 80037b2:	4615      	mov	r5, r2
 80037b4:	461c      	mov	r4, r3
 80037b6:	4688      	mov	r8, r1
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 80037b8:	f7fc fe36 	bl	8000428 <__aeabi_f2d>
 80037bc:	2200      	movs	r2, #0
 80037be:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <ssd1306_Print+0x278>)
 80037c0:	f7fc fcd2 	bl	8000168 <__aeabi_dsub>
 80037c4:	f7fd f938 	bl	8000a38 <__aeabi_d2iz>
 80037c8:	f7fc fe1c 	bl	8000404 <__aeabi_i2d>
 80037cc:	a392      	add	r3, pc, #584	; (adr r3, 8003a18 <ssd1306_Print+0x270>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc ffab 	bl	800072c <__aeabi_ddiv>
 80037d6:	f7fd f92f 	bl	8000a38 <__aeabi_d2iz>
 80037da:	2813      	cmp	r0, #19
 80037dc:	bfa8      	it	ge
 80037de:	2013      	movge	r0, #19
 80037e0:	4607      	mov	r7, r0
	if ( lines_i > 19 ) lines_i = 19;

	ftoa((double)latitude, lati, 6);
 80037e2:	4648      	mov	r0, r9
 80037e4:	f7fc fe20 	bl	8000428 <__aeabi_f2d>
 80037e8:	2306      	movs	r3, #6
 80037ea:	aa02      	add	r2, sp, #8
void ssd1306_Print(float latitude, float longitude, float altitude, float velocity, float voltage, int rssi, int snr){
 80037ec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
	ftoa((double)latitude, lati, 6);
 80037ee:	f7ff fd5b 	bl	80032a8 <ftoa>
	ftoa((double)longitude, longi, 6);
 80037f2:	4640      	mov	r0, r8
 80037f4:	f7fc fe18 	bl	8000428 <__aeabi_f2d>
 80037f8:	2306      	movs	r3, #6
 80037fa:	aa05      	add	r2, sp, #20
 80037fc:	f7ff fd54 	bl	80032a8 <ftoa>
	ftoa((double)altitude, alti, 1);
 8003800:	4628      	mov	r0, r5
 8003802:	f7fc fe11 	bl	8000428 <__aeabi_f2d>
 8003806:	2301      	movs	r3, #1
 8003808:	aa08      	add	r2, sp, #32
 800380a:	f7ff fd4d 	bl	80032a8 <ftoa>
	ftoa((double)velocity, velo, 1);
 800380e:	4620      	mov	r0, r4
 8003810:	f7fc fe0a 	bl	8000428 <__aeabi_f2d>
 8003814:	2301      	movs	r3, #1
 8003816:	aa0b      	add	r2, sp, #44	; 0x2c
 8003818:	f7ff fd46 	bl	80032a8 <ftoa>
	ftoa((int)-rssi, rssi_c, 0);
 800381c:	4270      	negs	r0, r6
 800381e:	f7fc fdf1 	bl	8000404 <__aeabi_i2d>
 8003822:	2300      	movs	r3, #0
 8003824:	aa0e      	add	r2, sp, #56	; 0x38
 8003826:	f7ff fd3f 	bl	80032a8 <ftoa>
	ftoa((int)snr, snr_c, 0);
 800382a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800382c:	f7fc fdea 	bl	8000404 <__aeabi_i2d>
 8003830:	2300      	movs	r3, #0
 8003832:	aa11      	add	r2, sp, #68	; 0x44
 8003834:	f7ff fd38 	bl	80032a8 <ftoa>
    ssd1306_Fill(Black);
 8003838:	2000      	movs	r0, #0
 800383a:	f7ff fe35 	bl	80034a8 <ssd1306_Fill>

    //rysowanie wskaźnika baterii
    ssd1306_DrawRectangle( 0, 0, 20, 8, White);
 800383e:	2401      	movs	r4, #1
 8003840:	2100      	movs	r1, #0
 8003842:	2308      	movs	r3, #8
 8003844:	4608      	mov	r0, r1
 8003846:	2214      	movs	r2, #20
 8003848:	9400      	str	r4, [sp, #0]
 800384a:	f7ff ff86 	bl	800375a <ssd1306_DrawRectangle>
    ssd1306_DrawRectangle( 21, 2, 22, 6, White);
 800384e:	9400      	str	r4, [sp, #0]
 8003850:	2306      	movs	r3, #6
 8003852:	2216      	movs	r2, #22
 8003854:	2102      	movs	r1, #2
 8003856:	2015      	movs	r0, #21
 8003858:	f7ff ff7f 	bl	800375a <ssd1306_DrawRectangle>
 800385c:	4625      	mov	r5, r4
    for(int i = 1; i<=lines_i ;i++){
 800385e:	42bc      	cmp	r4, r7
 8003860:	f340 80d1 	ble.w	8003a06 <ssd1306_Print+0x25e>
    	ssd1306_Line(i,1,i,7,White);
    }

    //rysowanie wskaźnika sygnału
    ssd1306_DrawRectangle( 111, 5, 112, 8, White);
 8003864:	9500      	str	r5, [sp, #0]
 8003866:	2308      	movs	r3, #8
 8003868:	2270      	movs	r2, #112	; 0x70
 800386a:	2105      	movs	r1, #5
 800386c:	206f      	movs	r0, #111	; 0x6f
 800386e:	f7ff ff74 	bl	800375a <ssd1306_DrawRectangle>
    if( rssi < 100) ssd1306_DrawRectangle( 114, 4, 115, 8, White);
 8003872:	2e63      	cmp	r6, #99	; 0x63
 8003874:	dc2a      	bgt.n	80038cc <ssd1306_Print+0x124>
 8003876:	9500      	str	r5, [sp, #0]
 8003878:	2308      	movs	r3, #8
 800387a:	2273      	movs	r2, #115	; 0x73
 800387c:	2104      	movs	r1, #4
 800387e:	2072      	movs	r0, #114	; 0x72
 8003880:	f7ff ff6b 	bl	800375a <ssd1306_DrawRectangle>
    if( rssi < 90) ssd1306_DrawRectangle( 117, 3, 118, 8, White);
 8003884:	2e59      	cmp	r6, #89	; 0x59
 8003886:	dc21      	bgt.n	80038cc <ssd1306_Print+0x124>
 8003888:	9500      	str	r5, [sp, #0]
 800388a:	2308      	movs	r3, #8
 800388c:	2276      	movs	r2, #118	; 0x76
 800388e:	2103      	movs	r1, #3
 8003890:	2075      	movs	r0, #117	; 0x75
 8003892:	f7ff ff62 	bl	800375a <ssd1306_DrawRectangle>
    if( rssi < 80) ssd1306_DrawRectangle( 120, 2, 121, 8, White);
 8003896:	2e4f      	cmp	r6, #79	; 0x4f
 8003898:	dc18      	bgt.n	80038cc <ssd1306_Print+0x124>
 800389a:	9500      	str	r5, [sp, #0]
 800389c:	2308      	movs	r3, #8
 800389e:	2279      	movs	r2, #121	; 0x79
 80038a0:	2102      	movs	r1, #2
 80038a2:	2078      	movs	r0, #120	; 0x78
 80038a4:	f7ff ff59 	bl	800375a <ssd1306_DrawRectangle>
    if( rssi < 70) ssd1306_DrawRectangle( 123, 1, 124, 8, White);
 80038a8:	2e45      	cmp	r6, #69	; 0x45
 80038aa:	dc0f      	bgt.n	80038cc <ssd1306_Print+0x124>
 80038ac:	9500      	str	r5, [sp, #0]
 80038ae:	2308      	movs	r3, #8
 80038b0:	227c      	movs	r2, #124	; 0x7c
 80038b2:	2101      	movs	r1, #1
 80038b4:	207b      	movs	r0, #123	; 0x7b
 80038b6:	f7ff ff50 	bl	800375a <ssd1306_DrawRectangle>
    if( rssi < 60) ssd1306_DrawRectangle( 126, 0, 127, 8, White);
 80038ba:	2e3b      	cmp	r6, #59	; 0x3b
 80038bc:	dc06      	bgt.n	80038cc <ssd1306_Print+0x124>
 80038be:	9500      	str	r5, [sp, #0]
 80038c0:	2308      	movs	r3, #8
 80038c2:	227f      	movs	r2, #127	; 0x7f
 80038c4:	2100      	movs	r1, #0
 80038c6:	207e      	movs	r0, #126	; 0x7e
 80038c8:	f7ff ff47 	bl	800375a <ssd1306_DrawRectangle>
    SSD1306.CurrentX = x;
 80038cc:	232d      	movs	r3, #45	; 0x2d
 80038ce:	4d55      	ldr	r5, [pc, #340]	; (8003a24 <ssd1306_Print+0x27c>)
 80038d0:	2602      	movs	r6, #2
 80038d2:	802b      	strh	r3, [r5, #0]
    SSD1306.CurrentY = y;
 80038d4:	2300      	movs	r3, #0
 80038d6:	270e      	movs	r7, #14

    ssd1306_SetCursor(45, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 80038d8:	4c53      	ldr	r4, [pc, #332]	; (8003a28 <ssd1306_Print+0x280>)
    SSD1306.CurrentY = y;
 80038da:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 80038dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80038e0:	2301      	movs	r3, #1
 80038e2:	4852      	ldr	r0, [pc, #328]	; (8003a2c <ssd1306_Print+0x284>)
 80038e4:	f7ff fede 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 6+8);
    ssd1306_WriteString("RSSI:", Font_6x8, White);
 80038e8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80038ec:	2301      	movs	r3, #1
 80038ee:	4850      	ldr	r0, [pc, #320]	; (8003a30 <ssd1306_Print+0x288>)
    SSD1306.CurrentX = x;
 80038f0:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 80038f2:	806f      	strh	r7, [r5, #2]
    ssd1306_WriteString("RSSI:", Font_6x8, White);
 80038f4:	f7ff fed6 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2+30, 6+8);
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 80038f8:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 80038fc:	2320      	movs	r3, #32
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 80038fe:	a80e      	add	r0, sp, #56	; 0x38
    SSD1306.CurrentX = x;
 8003900:	802b      	strh	r3, [r5, #0]
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8003902:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8003904:	806f      	strh	r7, [r5, #2]
    ssd1306_WriteString((char*)rssi_c, Font_6x8, White);
 8003906:	f7ff fecd 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_WriteString("dBm", Font_6x8, White);
 800390a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800390e:	2301      	movs	r3, #1
 8003910:	4848      	ldr	r0, [pc, #288]	; (8003a34 <ssd1306_Print+0x28c>)
 8003912:	f7ff fec7 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(75, 6+8);
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8003916:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800391a:	234b      	movs	r3, #75	; 0x4b
    ssd1306_WriteString("SNR:", Font_6x8, White);
 800391c:	4846      	ldr	r0, [pc, #280]	; (8003a38 <ssd1306_Print+0x290>)
    SSD1306.CurrentX = x;
 800391e:	802b      	strh	r3, [r5, #0]
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8003920:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8003922:	806f      	strh	r7, [r5, #2]
    ssd1306_WriteString("SNR:", Font_6x8, White);
 8003924:	f7ff febe 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(75+25, 6+8);
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 8003928:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800392c:	2364      	movs	r3, #100	; 0x64
    SSD1306.CurrentY = y;
 800392e:	f04f 0818 	mov.w	r8, #24
    SSD1306.CurrentX = x;
 8003932:	802b      	strh	r3, [r5, #0]
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 8003934:	a811      	add	r0, sp, #68	; 0x44
 8003936:	2301      	movs	r3, #1
    SSD1306.CurrentY = y;
 8003938:	806f      	strh	r7, [r5, #2]
    ssd1306_WriteString((char*)snr_c, Font_6x8, White);
 800393a:	f7ff feb3 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_WriteString("dB", Font_6x8, White);
 800393e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003942:	2301      	movs	r3, #1
 8003944:	483d      	ldr	r0, [pc, #244]	; (8003a3c <ssd1306_Print+0x294>)
 8003946:	f7ff fead 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 2*(2+8)+4);
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800394a:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800394e:	273e      	movs	r7, #62	; 0x3e
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8003950:	2301      	movs	r3, #1
 8003952:	483b      	ldr	r0, [pc, #236]	; (8003a40 <ssd1306_Print+0x298>)
    SSD1306.CurrentX = x;
 8003954:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 8003956:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800395a:	f7ff fea3 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 2*(2+8)+4);
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 800395e:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003962:	f8a5 8002 	strh.w	r8, [r5, #2]
 8003966:	f04f 0822 	mov.w	r8, #34	; 0x22
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 800396a:	2301      	movs	r3, #1
 800396c:	a802      	add	r0, sp, #8
    SSD1306.CurrentX = x;
 800396e:	802f      	strh	r7, [r5, #0]
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8003970:	f7ff fe98 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 3*(2+8)+4);
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8003974:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003978:	2301      	movs	r3, #1
 800397a:	4832      	ldr	r0, [pc, #200]	; (8003a44 <ssd1306_Print+0x29c>)
    SSD1306.CurrentX = x;
 800397c:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 800397e:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8003982:	f7ff fe8f 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 3*(2+8)+4);
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8003986:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 800398a:	f8a5 8002 	strh.w	r8, [r5, #2]
 800398e:	f04f 082c 	mov.w	r8, #44	; 0x2c
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8003992:	2301      	movs	r3, #1
 8003994:	a805      	add	r0, sp, #20
    SSD1306.CurrentX = x;
 8003996:	802f      	strh	r7, [r5, #0]
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 8003998:	f7ff fe84 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 4*(2+8)+4);
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 800399c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80039a0:	2301      	movs	r3, #1
 80039a2:	4829      	ldr	r0, [pc, #164]	; (8003a48 <ssd1306_Print+0x2a0>)
    SSD1306.CurrentX = x;
 80039a4:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 80039a6:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 80039aa:	f7ff fe7b 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 4*(2+8)+4);
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 80039ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80039b2:	2301      	movs	r3, #1
 80039b4:	a808      	add	r0, sp, #32
    SSD1306.CurrentX = x;
 80039b6:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 80039b8:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 80039bc:	f7ff fe72 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_WriteString(" m", Font_6x8, White);
 80039c0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80039c4:	2301      	movs	r3, #1
 80039c6:	4821      	ldr	r0, [pc, #132]	; (8003a4c <ssd1306_Print+0x2a4>)
 80039c8:	f7ff fe6c 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(2, 5*(2+8)+4);
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80039cc:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 80039d0:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 80039d2:	2636      	movs	r6, #54	; 0x36
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80039d4:	2301      	movs	r3, #1
 80039d6:	481e      	ldr	r0, [pc, #120]	; (8003a50 <ssd1306_Print+0x2a8>)
    SSD1306.CurrentY = y;
 80039d8:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 80039da:	f7ff fe63 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 5*(2+8)+4);
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 80039de:	e894 0006 	ldmia.w	r4, {r1, r2}
 80039e2:	2301      	movs	r3, #1
 80039e4:	eb0d 0008 	add.w	r0, sp, r8
    SSD1306.CurrentX = x;
 80039e8:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 80039ea:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 80039ec:	f7ff fe5a 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_WriteString(" km/h", Font_6x8, White);
 80039f0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80039f4:	2301      	movs	r3, #1
 80039f6:	4817      	ldr	r0, [pc, #92]	; (8003a54 <ssd1306_Print+0x2ac>)
 80039f8:	f7ff fe54 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80039fc:	f7ff fd62 	bl	80034c4 <ssd1306_UpdateScreen>
}
 8003a00:	b015      	add	sp, #84	; 0x54
 8003a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	ssd1306_Line(i,1,i,7,White);
 8003a06:	b2e2      	uxtb	r2, r4
 8003a08:	9500      	str	r5, [sp, #0]
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7ff fe5d 	bl	80036ce <ssd1306_Line>
    for(int i = 1; i<=lines_i ;i++){
 8003a14:	3401      	adds	r4, #1
 8003a16:	e722      	b.n	800385e <ssd1306_Print+0xb6>
 8003a18:	f0373520 	.word	0xf0373520
 8003a1c:	3fb046b4 	.word	0x3fb046b4
 8003a20:	40080000 	.word	0x40080000
 8003a24:	20000218 	.word	0x20000218
 8003a28:	20000010 	.word	0x20000010
 8003a2c:	08008ce0 	.word	0x08008ce0
 8003a30:	08008ce9 	.word	0x08008ce9
 8003a34:	08008cef 	.word	0x08008cef
 8003a38:	08008cf3 	.word	0x08008cf3
 8003a3c:	08008cf8 	.word	0x08008cf8
 8003a40:	08008cfb 	.word	0x08008cfb
 8003a44:	08008d05 	.word	0x08008d05
 8003a48:	08008d10 	.word	0x08008d10
 8003a4c:	08008d1a 	.word	0x08008d1a
 8003a50:	08008d1d 	.word	0x08008d1d
 8003a54:	08008d27 	.word	0x08008d27

08003a58 <ssd1306_Print_No_Signal>:

void ssd1306_Print_No_Signal(float voltage){
 8003a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a5c:	4604      	mov	r4, r0

    ssd1306_Fill(Black);
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7ff fd22 	bl	80034a8 <ssd1306_Fill>
	int lines_i = (int)(voltage - 3.0)/0.0635789;
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7fc fcdf 	bl	8000428 <__aeabi_f2d>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <ssd1306_Print_No_Signal+0x140>)
 8003a6e:	f7fc fb7b 	bl	8000168 <__aeabi_dsub>
 8003a72:	f7fc ffe1 	bl	8000a38 <__aeabi_d2iz>
 8003a76:	f7fc fcc5 	bl	8000404 <__aeabi_i2d>
 8003a7a:	a345      	add	r3, pc, #276	; (adr r3, 8003b90 <ssd1306_Print_No_Signal+0x138>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fe54 	bl	800072c <__aeabi_ddiv>
 8003a84:	f7fc ffd8 	bl	8000a38 <__aeabi_d2iz>
 8003a88:	2813      	cmp	r0, #19
 8003a8a:	bfa8      	it	ge
 8003a8c:	2013      	movge	r0, #19
	if ( lines_i > 19 ) lines_i = 19;

    //rysowanie wskaźnika baterii
    ssd1306_DrawRectangle( 0, 0, 20, 8, White);
 8003a8e:	2401      	movs	r4, #1
 8003a90:	2100      	movs	r1, #0
 8003a92:	2308      	movs	r3, #8
 8003a94:	2214      	movs	r2, #20
 8003a96:	4605      	mov	r5, r0
 8003a98:	9400      	str	r4, [sp, #0]
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	f7ff fe5d 	bl	800375a <ssd1306_DrawRectangle>
    ssd1306_DrawRectangle( 21, 2, 22, 6, White);
 8003aa0:	9400      	str	r4, [sp, #0]
 8003aa2:	2306      	movs	r3, #6
 8003aa4:	2216      	movs	r2, #22
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	2015      	movs	r0, #21
 8003aaa:	f7ff fe56 	bl	800375a <ssd1306_DrawRectangle>
    for(int i = 1; i<=lines_i ;i++){
    	ssd1306_Line(i,1,i,7,White);
 8003aae:	4626      	mov	r6, r4
    for(int i = 1; i<=lines_i ;i++){
 8003ab0:	42ac      	cmp	r4, r5
 8003ab2:	dd62      	ble.n	8003b7a <ssd1306_Print_No_Signal+0x122>
    SSD1306.CurrentX = x;
 8003ab4:	236e      	movs	r3, #110	; 0x6e
    SSD1306.CurrentY = y;
 8003ab6:	2600      	movs	r6, #0
    SSD1306.CurrentX = x;
 8003ab8:	272d      	movs	r7, #45	; 0x2d
 8003aba:	4c38      	ldr	r4, [pc, #224]	; (8003b9c <ssd1306_Print_No_Signal+0x144>)
    }

    //rysowanie wskaźnika sygnału
    ssd1306_SetCursor(110, 0);
    ssd1306_WriteString("???", Font_6x8, White);
 8003abc:	4d38      	ldr	r5, [pc, #224]	; (8003ba0 <ssd1306_Print_No_Signal+0x148>)
    SSD1306.CurrentX = x;
 8003abe:	8023      	strh	r3, [r4, #0]
    ssd1306_WriteString("???", Font_6x8, White);
 8003ac0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4837      	ldr	r0, [pc, #220]	; (8003ba4 <ssd1306_Print_No_Signal+0x14c>)
    SSD1306.CurrentY = y;
 8003ac8:	8066      	strh	r6, [r4, #2]
    ssd1306_WriteString("???", Font_6x8, White);
 8003aca:	f7ff fdeb 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(45, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003ace:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4834      	ldr	r0, [pc, #208]	; (8003ba8 <ssd1306_Print_No_Signal+0x150>)
    SSD1306.CurrentY = y;
 8003ad6:	8066      	strh	r6, [r4, #2]
    SSD1306.CurrentX = x;
 8003ad8:	8027      	strh	r7, [r4, #0]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003ada:	f7ff fde3 	bl	80036a4 <ssd1306_WriteString>
    SSD1306.CurrentX = x;
 8003ade:	2311      	movs	r3, #17
 8003ae0:	8023      	strh	r3, [r4, #0]
    SSD1306.CurrentY = y;
 8003ae2:	231a      	movs	r3, #26

    ssd1306_SetCursor(17, 26);
    ssd1306_WriteString("!", Font_16x26, White);
 8003ae4:	4a31      	ldr	r2, [pc, #196]	; (8003bac <ssd1306_Print_No_Signal+0x154>)
    SSD1306.CurrentY = y;
 8003ae6:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("!", Font_16x26, White);
 8003ae8:	ca06      	ldmia	r2, {r1, r2}
 8003aea:	2301      	movs	r3, #1
 8003aec:	4830      	ldr	r0, [pc, #192]	; (8003bb0 <ssd1306_Print_No_Signal+0x158>)

    ssd1306_Line(5,50,45,50,White);
 8003aee:	2601      	movs	r6, #1
    ssd1306_WriteString("!", Font_16x26, White);
 8003af0:	f7ff fdd8 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_Line(5,50,45,50,White);
 8003af4:	2332      	movs	r3, #50	; 0x32
 8003af6:	463a      	mov	r2, r7
 8003af8:	4619      	mov	r1, r3
 8003afa:	9600      	str	r6, [sp, #0]
 8003afc:	2005      	movs	r0, #5
 8003afe:	f7ff fde6 	bl	80036ce <ssd1306_Line>
    ssd1306_Line(25,15,45,50,White);
 8003b02:	463a      	mov	r2, r7
 8003b04:	9600      	str	r6, [sp, #0]
 8003b06:	2332      	movs	r3, #50	; 0x32
 8003b08:	210f      	movs	r1, #15
 8003b0a:	2019      	movs	r0, #25
 8003b0c:	f7ff fddf 	bl	80036ce <ssd1306_Line>
    ssd1306_Line(25,15,5,50,White);
 8003b10:	9600      	str	r6, [sp, #0]
 8003b12:	2332      	movs	r3, #50	; 0x32
 8003b14:	2205      	movs	r2, #5
 8003b16:	210f      	movs	r1, #15
 8003b18:	2019      	movs	r0, #25
 8003b1a:	f7ff fdd8 	bl	80036ce <ssd1306_Line>
    SSD1306.CurrentX = x;
 8003b1e:	2341      	movs	r3, #65	; 0x41
 8003b20:	8023      	strh	r3, [r4, #0]
    SSD1306.CurrentY = y;
 8003b22:	230c      	movs	r3, #12

    ssd1306_SetCursor(65, 12);
    ssd1306_WriteString("ERROR", Font_7x10, White);
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <ssd1306_Print_No_Signal+0x15c>)
    SSD1306.CurrentY = y;
 8003b26:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("ERROR", Font_7x10, White);
 8003b28:	ca06      	ldmia	r2, {r1, r2}
 8003b2a:	4633      	mov	r3, r6
 8003b2c:	4822      	ldr	r0, [pc, #136]	; (8003bb8 <ssd1306_Print_No_Signal+0x160>)
 8003b2e:	f7ff fdb9 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(50, 25);
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8003b32:	e895 0006 	ldmia.w	r5, {r1, r2}
    SSD1306.CurrentY = y;
 8003b36:	2319      	movs	r3, #25
    SSD1306.CurrentX = x;
 8003b38:	f04f 0832 	mov.w	r8, #50	; 0x32
    SSD1306.CurrentY = y;
 8003b3c:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8003b3e:	481f      	ldr	r0, [pc, #124]	; (8003bbc <ssd1306_Print_No_Signal+0x164>)
 8003b40:	4633      	mov	r3, r6
    SSD1306.CurrentX = x;
 8003b42:	f8a4 8000 	strh.w	r8, [r4]
    ssd1306_WriteString("Device is not", Font_6x8, White);
 8003b46:	f7ff fdad 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(50, 25 + 10);
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8003b4a:	e895 0006 	ldmia.w	r5, {r1, r2}
    SSD1306.CurrentY = y;
 8003b4e:	2323      	movs	r3, #35	; 0x23
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8003b50:	481b      	ldr	r0, [pc, #108]	; (8003bc0 <ssd1306_Print_No_Signal+0x168>)
    SSD1306.CurrentY = y;
 8003b52:	8063      	strh	r3, [r4, #2]
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8003b54:	4633      	mov	r3, r6
    SSD1306.CurrentX = x;
 8003b56:	f8a4 8000 	strh.w	r8, [r4]
    ssd1306_WriteString("receiving any", Font_6x8, White);
 8003b5a:	f7ff fda3 	bl	80036a4 <ssd1306_WriteString>
    ssd1306_SetCursor(50, 25 + 20);
    ssd1306_WriteString("  packets!", Font_6x8, White);
 8003b5e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003b62:	4633      	mov	r3, r6
 8003b64:	4817      	ldr	r0, [pc, #92]	; (8003bc4 <ssd1306_Print_No_Signal+0x16c>)
    SSD1306.CurrentX = x;
 8003b66:	f8a4 8000 	strh.w	r8, [r4]
    SSD1306.CurrentY = y;
 8003b6a:	8067      	strh	r7, [r4, #2]
    ssd1306_WriteString("  packets!", Font_6x8, White);
 8003b6c:	f7ff fd9a 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8003b70:	b002      	add	sp, #8
 8003b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_UpdateScreen();
 8003b76:	f7ff bca5 	b.w	80034c4 <ssd1306_UpdateScreen>
    	ssd1306_Line(i,1,i,7,White);
 8003b7a:	b2e2      	uxtb	r2, r4
 8003b7c:	9600      	str	r6, [sp, #0]
 8003b7e:	2307      	movs	r3, #7
 8003b80:	2101      	movs	r1, #1
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7ff fda3 	bl	80036ce <ssd1306_Line>
    for(int i = 1; i<=lines_i ;i++){
 8003b88:	3401      	adds	r4, #1
 8003b8a:	e791      	b.n	8003ab0 <ssd1306_Print_No_Signal+0x58>
 8003b8c:	f3af 8000 	nop.w
 8003b90:	f0373520 	.word	0xf0373520
 8003b94:	3fb046b4 	.word	0x3fb046b4
 8003b98:	40080000 	.word	0x40080000
 8003b9c:	20000218 	.word	0x20000218
 8003ba0:	20000010 	.word	0x20000010
 8003ba4:	08008d2d 	.word	0x08008d2d
 8003ba8:	08008ce0 	.word	0x08008ce0
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	08008d5c 	.word	0x08008d5c
 8003bb4:	20000018 	.word	0x20000018
 8003bb8:	08008d31 	.word	0x08008d31
 8003bbc:	08008d37 	.word	0x08008d37
 8003bc0:	08008d45 	.word	0x08008d45
 8003bc4:	08008d53 	.word	0x08008d53

08003bc8 <ssd1306_Print_initial_screen>:

void ssd1306_Print_initial_screen(){
 8003bc8:	b570      	push	{r4, r5, r6, lr}

    ssd1306_Fill(Black);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f7ff fc6c 	bl	80034a8 <ssd1306_Fill>
    SSD1306.CurrentX = x;
 8003bd0:	232d      	movs	r3, #45	; 0x2d
 8003bd2:	4d15      	ldr	r5, [pc, #84]	; (8003c28 <ssd1306_Print_initial_screen+0x60>)

    ssd1306_SetCursor(45, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003bd4:	4c15      	ldr	r4, [pc, #84]	; (8003c2c <ssd1306_Print_initial_screen+0x64>)
    SSD1306.CurrentX = x;
 8003bd6:	802b      	strh	r3, [r5, #0]
    SSD1306.CurrentY = y;
 8003bd8:	2300      	movs	r3, #0
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003bda:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003bde:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003be0:	4813      	ldr	r0, [pc, #76]	; (8003c30 <ssd1306_Print_initial_screen+0x68>)
 8003be2:	2301      	movs	r3, #1
 8003be4:	f7ff fd5e 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(5, 20);
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8003be8:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003bec:	2314      	movs	r3, #20
    SSD1306.CurrentX = x;
 8003bee:	2605      	movs	r6, #5
    SSD1306.CurrentY = y;
 8003bf0:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8003bf2:	4810      	ldr	r0, [pc, #64]	; (8003c34 <ssd1306_Print_initial_screen+0x6c>)
 8003bf4:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8003bf6:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Projekt - SR", Font_6x8, White);
 8003bf8:	f7ff fd54 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(5, 30);
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8003bfc:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003c00:	231e      	movs	r3, #30
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8003c02:	480d      	ldr	r0, [pc, #52]	; (8003c38 <ssd1306_Print_initial_screen+0x70>)
    SSD1306.CurrentY = y;
 8003c04:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8003c06:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8003c08:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Marcel Domagala", Font_6x8, White);
 8003c0a:	f7ff fd4b 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_SetCursor(5, 40);
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8003c0e:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003c12:	2328      	movs	r3, #40	; 0x28
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8003c14:	4809      	ldr	r0, [pc, #36]	; (8003c3c <ssd1306_Print_initial_screen+0x74>)
    SSD1306.CurrentY = y;
 8003c16:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8003c18:	2301      	movs	r3, #1
    SSD1306.CurrentX = x;
 8003c1a:	802e      	strh	r6, [r5, #0]
    ssd1306_WriteString("Maciej Gaik", Font_6x8, White);
 8003c1c:	f7ff fd42 	bl	80036a4 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
}
 8003c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ssd1306_UpdateScreen();
 8003c24:	f7ff bc4e 	b.w	80034c4 <ssd1306_UpdateScreen>
 8003c28:	20000218 	.word	0x20000218
 8003c2c:	20000010 	.word	0x20000010
 8003c30:	08008ce0 	.word	0x08008ce0
 8003c34:	08008d5e 	.word	0x08008d5e
 8003c38:	08008d6b 	.word	0x08008d6b
 8003c3c:	08008d7b 	.word	0x08008d7b

08003c40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_MspInit+0x4c>)
{
 8003c42:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c44:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c46:	2001      	movs	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	f002 0201 	and.w	r2, r2, #1
 8003c54:	9200      	str	r2, [sp, #0]
 8003c56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c5e:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c60:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c64:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8003c6e:	f7fd fba3 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7fd fbd4 	bl	8001420 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c78:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <HAL_MspInit+0x50>)
 8003c7a:	6853      	ldr	r3, [r2, #4]
 8003c7c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c86:	b003      	add	sp, #12
 8003c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40010000 	.word	0x40010000

08003c94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4604      	mov	r4, r0
 8003c98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	a802      	add	r0, sp, #8
 8003ca0:	f000 f9c6 	bl	8004030 <memset>
  if(hadc->Instance==ADC1)
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <HAL_ADC_MspInit+0x64>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d123      	bne.n	8003cf4 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cac:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003cb0:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8003cb2:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	619a      	str	r2, [r3, #24]
 8003cba:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	480f      	ldr	r0, [pc, #60]	; (8003cfc <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cbe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003cc2:	9200      	str	r2, [sp, #0]
 8003cc4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	f042 0204 	orr.w	r2, r2, #4
 8003ccc:	619a      	str	r2, [r3, #24]
 8003cce:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cd0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8003ce0:	f7fd fc0a 	bl	80014f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2012      	movs	r0, #18
 8003ce8:	4611      	mov	r1, r2
 8003cea:	f7fd fb65 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003cee:	2012      	movs	r0, #18
 8003cf0:	f7fd fb96 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd10      	pop	{r4, pc}
 8003cf8:	40012400 	.word	0x40012400
 8003cfc:	40010800 	.word	0x40010800

08003d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d00:	b510      	push	{r4, lr}
 8003d02:	4604      	mov	r4, r0
 8003d04:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d06:	2210      	movs	r2, #16
 8003d08:	2100      	movs	r1, #0
 8003d0a:	a802      	add	r0, sp, #8
 8003d0c:	f000 f990 	bl	8004030 <memset>
  if(hi2c->Instance==I2C2)
 8003d10:	6822      	ldr	r2, [r4, #0]
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_I2C_MspInit+0x58>)
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d11d      	bne.n	8003d54 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	4c10      	ldr	r4, [pc, #64]	; (8003d5c <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	f043 0308 	orr.w	r3, r3, #8
 8003d26:	61a3      	str	r3, [r4, #24]
 8003d28:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2a:	480d      	ldr	r0, [pc, #52]	; (8003d60 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d34:	2312      	movs	r3, #18
 8003d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3e:	f7fd fbdb 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d42:	69e3      	ldr	r3, [r4, #28]
 8003d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d48:	61e3      	str	r3, [r4, #28]
 8003d4a:	69e3      	ldr	r3, [r4, #28]
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d54:	b006      	add	sp, #24
 8003d56:	bd10      	pop	{r4, pc}
 8003d58:	40005800 	.word	0x40005800
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40010c00 	.word	0x40010c00

08003d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d64:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d66:	2410      	movs	r4, #16
{
 8003d68:	4605      	mov	r5, r0
 8003d6a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	2100      	movs	r1, #0
 8003d70:	a802      	add	r0, sp, #8
 8003d72:	f000 f95d 	bl	8004030 <memset>
  if(hspi->Instance==SPI1)
 8003d76:	682a      	ldr	r2, [r5, #0]
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_SPI_MspInit+0x78>)
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d12c      	bne.n	8003dd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d7e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003d82:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d84:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d8a:	619a      	str	r2, [r3, #24]
 8003d8c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8e:	4814      	ldr	r0, [pc, #80]	; (8003de0 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d94:	9200      	str	r2, [sp, #0]
 8003d96:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	f042 0208 	orr.w	r2, r2, #8
 8003d9e:	619a      	str	r2, [r3, #24]
 8003da0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	2302      	movs	r3, #2
 8003dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	f7fd fb9f 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dba:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8003dbc:	a902      	add	r1, sp, #8
 8003dbe:	4808      	ldr	r0, [pc, #32]	; (8003de0 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8003dc4:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8003dc6:	f7fd fb97 	bl	80014f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003dca:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <HAL_SPI_MspInit+0x80>)
 8003dcc:	6853      	ldr	r3, [r2, #4]
 8003dce:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003dd8:	b007      	add	sp, #28
 8003dda:	bd30      	pop	{r4, r5, pc}
 8003ddc:	40013000 	.word	0x40013000
 8003de0:	40010c00 	.word	0x40010c00
 8003de4:	40010000 	.word	0x40010000

08003de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003de8:	b510      	push	{r4, lr}
 8003dea:	4604      	mov	r4, r0
 8003dec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dee:	2210      	movs	r2, #16
 8003df0:	2100      	movs	r1, #0
 8003df2:	a802      	add	r0, sp, #8
 8003df4:	f000 f91c 	bl	8004030 <memset>
  if(huart->Instance==USART2)
 8003df8:	6822      	ldr	r2, [r4, #0]
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_UART_MspInit+0x6c>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d126      	bne.n	8003e4e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e00:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003e04:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e06:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003e0c:	61da      	str	r2, [r3, #28]
 8003e0e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e10:	4811      	ldr	r0, [pc, #68]	; (8003e58 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e12:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003e16:	9200      	str	r2, [sp, #0]
 8003e18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	f042 0204 	orr.w	r2, r2, #4
 8003e20:	619a      	str	r2, [r3, #24]
 8003e22:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e34:	2303      	movs	r3, #3
 8003e36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e38:	f7fd fb5e 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e3c:	2108      	movs	r1, #8
 8003e3e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e40:	4805      	ldr	r0, [pc, #20]	; (8003e58 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e42:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e46:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f7fd fb55 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e4e:	b006      	add	sp, #24
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	40004400 	.word	0x40004400
 8003e58:	40010800 	.word	0x40010800

08003e5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e5c:	4770      	bx	lr

08003e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e5e:	e7fe      	b.n	8003e5e <HardFault_Handler>

08003e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e60:	e7fe      	b.n	8003e60 <MemManage_Handler>

08003e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e62:	e7fe      	b.n	8003e62 <BusFault_Handler>

08003e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e64:	e7fe      	b.n	8003e64 <UsageFault_Handler>

08003e66 <SVC_Handler>:
 8003e66:	4770      	bx	lr

08003e68 <DebugMon_Handler>:
 8003e68:	4770      	bx	lr

08003e6a <PendSV_Handler>:
 8003e6a:	4770      	bx	lr

08003e6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e6c:	f7fd b834 	b.w	8000ed8 <HAL_IncTick>

08003e70 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003e70:	f7fd be94 	b.w	8001b9c <HAL_PWR_PVD_IRQHandler>

08003e74 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <ADC1_2_IRQHandler+0x8>)
 8003e76:	f7fd b857 	b.w	8000f28 <HAL_ADC_IRQHandler>
 8003e7a:	bf00      	nop
 8003e7c:	2000068c 	.word	0x2000068c

08003e80 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003e80:	4801      	ldr	r0, [pc, #4]	; (8003e88 <SPI1_IRQHandler+0x8>)
 8003e82:	f7fe bbc3 	b.w	800260c <HAL_SPI_IRQHandler>
 8003e86:	bf00      	nop
 8003e88:	200006fc 	.word	0x200006fc

08003e8c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003e8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e90:	f7fd bc24 	b.w	80016dc <HAL_GPIO_EXTI_IRQHandler>

08003e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	460e      	mov	r6, r1
 8003e98:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	1ba3      	subs	r3, r4, r6
 8003e9e:	429d      	cmp	r5, r3
 8003ea0:	dc01      	bgt.n	8003ea6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003ea6:	f3af 8000 	nop.w
 8003eaa:	f804 0b01 	strb.w	r0, [r4], #1
 8003eae:	e7f5      	b.n	8003e9c <_read+0x8>

08003eb0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003eb0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <_sbrk+0x2c>)
{
 8003eb4:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	b909      	cbnz	r1, 8003ebe <_sbrk+0xe>
		heap_end = &end;
 8003eba:	4909      	ldr	r1, [pc, #36]	; (8003ee0 <_sbrk+0x30>)
 8003ebc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003ebe:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003ec0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003ec2:	4402      	add	r2, r0
 8003ec4:	428a      	cmp	r2, r1
 8003ec6:	d906      	bls.n	8003ed6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003ec8:	f000 f864 	bl	8003f94 <__errno>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003ed4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003ed6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003ed8:	e7fc      	b.n	8003ed4 <_sbrk+0x24>
 8003eda:	bf00      	nop
 8003edc:	20000620 	.word	0x20000620
 8003ee0:	200008d4 	.word	0x200008d4

08003ee4 <_close>:

int _close(int file)
{
	return -1;
}
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	4770      	bx	lr

08003eea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003eee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003ef0:	604b      	str	r3, [r1, #4]
}
 8003ef2:	4770      	bx	lr

08003ef4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	4770      	bx	lr

08003ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003ef8:	2000      	movs	r0, #0
 8003efa:	4770      	bx	lr

08003efc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <SystemInit+0x40>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <SystemInit+0x44>)
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003f14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f18:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f20:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003f28:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003f2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003f2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <SystemInit+0x48>)
 8003f36:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	f8ff0000 	.word	0xf8ff0000
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f4a:	e003      	b.n	8003f54 <LoopCopyDataInit>

08003f4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f52:	3104      	adds	r1, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f54:	480a      	ldr	r0, [pc, #40]	; (8003f80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f5c:	d3f6      	bcc.n	8003f4c <CopyDataInit>
  ldr r2, =_sbss
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f60:	e002      	b.n	8003f68 <LoopFillZerobss>

08003f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f64:	f842 3b04 	str.w	r3, [r2], #4

08003f68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f6c:	d3f9      	bcc.n	8003f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f6e:	f7ff ffc5 	bl	8003efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f72:	f000 f815 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f76:	f7fe ff9b 	bl	8002eb0 <main>
  bx lr
 8003f7a:	4770      	bx	lr
  ldr r3, =_sidata
 8003f7c:	0800b190 	.word	0x0800b190
  ldr r0, =_sdata
 8003f80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f84:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003f88:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003f8c:	200008d4 	.word	0x200008d4

08003f90 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f90:	e7fe      	b.n	8003f90 <CAN1_RX1_IRQHandler>
	...

08003f94 <__errno>:
 8003f94:	4b01      	ldr	r3, [pc, #4]	; (8003f9c <__errno+0x8>)
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000024 	.word	0x20000024

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	2500      	movs	r5, #0
 8003fa4:	4e0c      	ldr	r6, [pc, #48]	; (8003fd8 <__libc_init_array+0x38>)
 8003fa6:	4c0d      	ldr	r4, [pc, #52]	; (8003fdc <__libc_init_array+0x3c>)
 8003fa8:	1ba4      	subs	r4, r4, r6
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	42a5      	cmp	r5, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	f004 fe30 	bl	8008c14 <_init>
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	4e0a      	ldr	r6, [pc, #40]	; (8003fe0 <__libc_init_array+0x40>)
 8003fb8:	4c0a      	ldr	r4, [pc, #40]	; (8003fe4 <__libc_init_array+0x44>)
 8003fba:	1ba4      	subs	r4, r4, r6
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	42a5      	cmp	r5, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fc8:	4798      	blx	r3
 8003fca:	3501      	adds	r5, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fd2:	4798      	blx	r3
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	0800b188 	.word	0x0800b188
 8003fdc:	0800b188 	.word	0x0800b188
 8003fe0:	0800b188 	.word	0x0800b188
 8003fe4:	0800b18c 	.word	0x0800b18c

08003fe8 <memcpy>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	1e43      	subs	r3, r0, #1
 8003fec:	440a      	add	r2, r1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	d100      	bne.n	8003ff4 <memcpy+0xc>
 8003ff2:	bd10      	pop	{r4, pc}
 8003ff4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ffc:	e7f7      	b.n	8003fee <memcpy+0x6>

08003ffe <memmove>:
 8003ffe:	4288      	cmp	r0, r1
 8004000:	b510      	push	{r4, lr}
 8004002:	eb01 0302 	add.w	r3, r1, r2
 8004006:	d807      	bhi.n	8004018 <memmove+0x1a>
 8004008:	1e42      	subs	r2, r0, #1
 800400a:	4299      	cmp	r1, r3
 800400c:	d00a      	beq.n	8004024 <memmove+0x26>
 800400e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004012:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004016:	e7f8      	b.n	800400a <memmove+0xc>
 8004018:	4283      	cmp	r3, r0
 800401a:	d9f5      	bls.n	8004008 <memmove+0xa>
 800401c:	1881      	adds	r1, r0, r2
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	42d3      	cmn	r3, r2
 8004022:	d100      	bne.n	8004026 <memmove+0x28>
 8004024:	bd10      	pop	{r4, pc}
 8004026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800402a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800402e:	e7f7      	b.n	8004020 <memmove+0x22>

08004030 <memset>:
 8004030:	4603      	mov	r3, r0
 8004032:	4402      	add	r2, r0
 8004034:	4293      	cmp	r3, r2
 8004036:	d100      	bne.n	800403a <memset+0xa>
 8004038:	4770      	bx	lr
 800403a:	f803 1b01 	strb.w	r1, [r3], #1
 800403e:	e7f9      	b.n	8004034 <memset+0x4>

08004040 <__cvt>:
 8004040:	2b00      	cmp	r3, #0
 8004042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004046:	461e      	mov	r6, r3
 8004048:	bfbb      	ittet	lt
 800404a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800404e:	461e      	movlt	r6, r3
 8004050:	2300      	movge	r3, #0
 8004052:	232d      	movlt	r3, #45	; 0x2d
 8004054:	b088      	sub	sp, #32
 8004056:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004058:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800405c:	f027 0720 	bic.w	r7, r7, #32
 8004060:	2f46      	cmp	r7, #70	; 0x46
 8004062:	4614      	mov	r4, r2
 8004064:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004066:	700b      	strb	r3, [r1, #0]
 8004068:	d004      	beq.n	8004074 <__cvt+0x34>
 800406a:	2f45      	cmp	r7, #69	; 0x45
 800406c:	d100      	bne.n	8004070 <__cvt+0x30>
 800406e:	3501      	adds	r5, #1
 8004070:	2302      	movs	r3, #2
 8004072:	e000      	b.n	8004076 <__cvt+0x36>
 8004074:	2303      	movs	r3, #3
 8004076:	aa07      	add	r2, sp, #28
 8004078:	9204      	str	r2, [sp, #16]
 800407a:	aa06      	add	r2, sp, #24
 800407c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004080:	e9cd 3500 	strd	r3, r5, [sp]
 8004084:	4622      	mov	r2, r4
 8004086:	4633      	mov	r3, r6
 8004088:	f001 fe26 	bl	8005cd8 <_dtoa_r>
 800408c:	2f47      	cmp	r7, #71	; 0x47
 800408e:	4680      	mov	r8, r0
 8004090:	d102      	bne.n	8004098 <__cvt+0x58>
 8004092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004094:	07db      	lsls	r3, r3, #31
 8004096:	d526      	bpl.n	80040e6 <__cvt+0xa6>
 8004098:	2f46      	cmp	r7, #70	; 0x46
 800409a:	eb08 0905 	add.w	r9, r8, r5
 800409e:	d111      	bne.n	80040c4 <__cvt+0x84>
 80040a0:	f898 3000 	ldrb.w	r3, [r8]
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d10a      	bne.n	80040be <__cvt+0x7e>
 80040a8:	2200      	movs	r2, #0
 80040aa:	2300      	movs	r3, #0
 80040ac:	4620      	mov	r0, r4
 80040ae:	4631      	mov	r1, r6
 80040b0:	f7fc fc7a 	bl	80009a8 <__aeabi_dcmpeq>
 80040b4:	b918      	cbnz	r0, 80040be <__cvt+0x7e>
 80040b6:	f1c5 0501 	rsb	r5, r5, #1
 80040ba:	f8ca 5000 	str.w	r5, [sl]
 80040be:	f8da 3000 	ldr.w	r3, [sl]
 80040c2:	4499      	add	r9, r3
 80040c4:	2200      	movs	r2, #0
 80040c6:	2300      	movs	r3, #0
 80040c8:	4620      	mov	r0, r4
 80040ca:	4631      	mov	r1, r6
 80040cc:	f7fc fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80040d0:	b938      	cbnz	r0, 80040e2 <__cvt+0xa2>
 80040d2:	2230      	movs	r2, #48	; 0x30
 80040d4:	9b07      	ldr	r3, [sp, #28]
 80040d6:	454b      	cmp	r3, r9
 80040d8:	d205      	bcs.n	80040e6 <__cvt+0xa6>
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	9107      	str	r1, [sp, #28]
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e7f8      	b.n	80040d4 <__cvt+0x94>
 80040e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80040e6:	4640      	mov	r0, r8
 80040e8:	9b07      	ldr	r3, [sp, #28]
 80040ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80040ec:	eba3 0308 	sub.w	r3, r3, r8
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	b008      	add	sp, #32
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080040f8 <__exponent>:
 80040f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040fa:	2900      	cmp	r1, #0
 80040fc:	bfb4      	ite	lt
 80040fe:	232d      	movlt	r3, #45	; 0x2d
 8004100:	232b      	movge	r3, #43	; 0x2b
 8004102:	4604      	mov	r4, r0
 8004104:	bfb8      	it	lt
 8004106:	4249      	neglt	r1, r1
 8004108:	2909      	cmp	r1, #9
 800410a:	f804 2b02 	strb.w	r2, [r4], #2
 800410e:	7043      	strb	r3, [r0, #1]
 8004110:	dd21      	ble.n	8004156 <__exponent+0x5e>
 8004112:	f10d 0307 	add.w	r3, sp, #7
 8004116:	461f      	mov	r7, r3
 8004118:	260a      	movs	r6, #10
 800411a:	fb91 f5f6 	sdiv	r5, r1, r6
 800411e:	fb06 1115 	mls	r1, r6, r5, r1
 8004122:	2d09      	cmp	r5, #9
 8004124:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004128:	f803 1c01 	strb.w	r1, [r3, #-1]
 800412c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004130:	4629      	mov	r1, r5
 8004132:	dc09      	bgt.n	8004148 <__exponent+0x50>
 8004134:	3130      	adds	r1, #48	; 0x30
 8004136:	3b02      	subs	r3, #2
 8004138:	f802 1c01 	strb.w	r1, [r2, #-1]
 800413c:	42bb      	cmp	r3, r7
 800413e:	4622      	mov	r2, r4
 8004140:	d304      	bcc.n	800414c <__exponent+0x54>
 8004142:	1a10      	subs	r0, r2, r0
 8004144:	b003      	add	sp, #12
 8004146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004148:	4613      	mov	r3, r2
 800414a:	e7e6      	b.n	800411a <__exponent+0x22>
 800414c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004150:	f804 2b01 	strb.w	r2, [r4], #1
 8004154:	e7f2      	b.n	800413c <__exponent+0x44>
 8004156:	2330      	movs	r3, #48	; 0x30
 8004158:	4419      	add	r1, r3
 800415a:	7083      	strb	r3, [r0, #2]
 800415c:	1d02      	adds	r2, r0, #4
 800415e:	70c1      	strb	r1, [r0, #3]
 8004160:	e7ef      	b.n	8004142 <__exponent+0x4a>
	...

08004164 <_printf_float>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	b091      	sub	sp, #68	; 0x44
 800416a:	460c      	mov	r4, r1
 800416c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800416e:	4693      	mov	fp, r2
 8004170:	461e      	mov	r6, r3
 8004172:	4605      	mov	r5, r0
 8004174:	f002 ff6a 	bl	800704c <_localeconv_r>
 8004178:	6803      	ldr	r3, [r0, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	9309      	str	r3, [sp, #36]	; 0x24
 800417e:	f7fb ffe7 	bl	8000150 <strlen>
 8004182:	2300      	movs	r3, #0
 8004184:	930e      	str	r3, [sp, #56]	; 0x38
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	900a      	str	r0, [sp, #40]	; 0x28
 800418a:	3307      	adds	r3, #7
 800418c:	f023 0307 	bic.w	r3, r3, #7
 8004190:	f103 0208 	add.w	r2, r3, #8
 8004194:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004198:	f8d4 a000 	ldr.w	sl, [r4]
 800419c:	603a      	str	r2, [r7, #0]
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041a6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80041aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	4ba6      	ldr	r3, [pc, #664]	; (8004450 <_printf_float+0x2ec>)
 80041b6:	4638      	mov	r0, r7
 80041b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ba:	f7fc fc27 	bl	8000a0c <__aeabi_dcmpun>
 80041be:	bb68      	cbnz	r0, 800421c <_printf_float+0xb8>
 80041c0:	f04f 32ff 	mov.w	r2, #4294967295
 80041c4:	4ba2      	ldr	r3, [pc, #648]	; (8004450 <_printf_float+0x2ec>)
 80041c6:	4638      	mov	r0, r7
 80041c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80041ca:	f7fc fc01 	bl	80009d0 <__aeabi_dcmple>
 80041ce:	bb28      	cbnz	r0, 800421c <_printf_float+0xb8>
 80041d0:	2200      	movs	r2, #0
 80041d2:	2300      	movs	r3, #0
 80041d4:	4638      	mov	r0, r7
 80041d6:	4649      	mov	r1, r9
 80041d8:	f7fc fbf0 	bl	80009bc <__aeabi_dcmplt>
 80041dc:	b110      	cbz	r0, 80041e4 <_printf_float+0x80>
 80041de:	232d      	movs	r3, #45	; 0x2d
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	4f9b      	ldr	r7, [pc, #620]	; (8004454 <_printf_float+0x2f0>)
 80041e6:	4b9c      	ldr	r3, [pc, #624]	; (8004458 <_printf_float+0x2f4>)
 80041e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041ec:	bf98      	it	ls
 80041ee:	461f      	movls	r7, r3
 80041f0:	2303      	movs	r3, #3
 80041f2:	f04f 0900 	mov.w	r9, #0
 80041f6:	6123      	str	r3, [r4, #16]
 80041f8:	f02a 0304 	bic.w	r3, sl, #4
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	9600      	str	r6, [sp, #0]
 8004200:	465b      	mov	r3, fp
 8004202:	aa0f      	add	r2, sp, #60	; 0x3c
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f9e2 	bl	80045d0 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	f040 8090 	bne.w	8004332 <_printf_float+0x1ce>
 8004212:	f04f 30ff 	mov.w	r0, #4294967295
 8004216:	b011      	add	sp, #68	; 0x44
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	463a      	mov	r2, r7
 800421e:	464b      	mov	r3, r9
 8004220:	4638      	mov	r0, r7
 8004222:	4649      	mov	r1, r9
 8004224:	f7fc fbf2 	bl	8000a0c <__aeabi_dcmpun>
 8004228:	b110      	cbz	r0, 8004230 <_printf_float+0xcc>
 800422a:	4f8c      	ldr	r7, [pc, #560]	; (800445c <_printf_float+0x2f8>)
 800422c:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <_printf_float+0x2fc>)
 800422e:	e7db      	b.n	80041e8 <_printf_float+0x84>
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004236:	1c59      	adds	r1, r3, #1
 8004238:	a80d      	add	r0, sp, #52	; 0x34
 800423a:	a90e      	add	r1, sp, #56	; 0x38
 800423c:	d140      	bne.n	80042c0 <_printf_float+0x15c>
 800423e:	2306      	movs	r3, #6
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	f04f 0c00 	mov.w	ip, #0
 8004246:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800424a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800424e:	6863      	ldr	r3, [r4, #4]
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	463a      	mov	r2, r7
 800425a:	464b      	mov	r3, r9
 800425c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004260:	4628      	mov	r0, r5
 8004262:	f7ff feed 	bl	8004040 <__cvt>
 8004266:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800426a:	2b47      	cmp	r3, #71	; 0x47
 800426c:	4607      	mov	r7, r0
 800426e:	d109      	bne.n	8004284 <_printf_float+0x120>
 8004270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004272:	1cd8      	adds	r0, r3, #3
 8004274:	db02      	blt.n	800427c <_printf_float+0x118>
 8004276:	6862      	ldr	r2, [r4, #4]
 8004278:	4293      	cmp	r3, r2
 800427a:	dd47      	ble.n	800430c <_printf_float+0x1a8>
 800427c:	f1a8 0802 	sub.w	r8, r8, #2
 8004280:	fa5f f888 	uxtb.w	r8, r8
 8004284:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004288:	990d      	ldr	r1, [sp, #52]	; 0x34
 800428a:	d824      	bhi.n	80042d6 <_printf_float+0x172>
 800428c:	3901      	subs	r1, #1
 800428e:	4642      	mov	r2, r8
 8004290:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004294:	910d      	str	r1, [sp, #52]	; 0x34
 8004296:	f7ff ff2f 	bl	80040f8 <__exponent>
 800429a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800429c:	4681      	mov	r9, r0
 800429e:	1813      	adds	r3, r2, r0
 80042a0:	2a01      	cmp	r2, #1
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	dc02      	bgt.n	80042ac <_printf_float+0x148>
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	07d1      	lsls	r1, r2, #31
 80042aa:	d501      	bpl.n	80042b0 <_printf_float+0x14c>
 80042ac:	3301      	adds	r3, #1
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0a2      	beq.n	80041fe <_printf_float+0x9a>
 80042b8:	232d      	movs	r3, #45	; 0x2d
 80042ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042be:	e79e      	b.n	80041fe <_printf_float+0x9a>
 80042c0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80042c4:	f000 816e 	beq.w	80045a4 <_printf_float+0x440>
 80042c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042cc:	d1b9      	bne.n	8004242 <_printf_float+0xde>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1b7      	bne.n	8004242 <_printf_float+0xde>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e7b4      	b.n	8004240 <_printf_float+0xdc>
 80042d6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80042da:	d119      	bne.n	8004310 <_printf_float+0x1ac>
 80042dc:	2900      	cmp	r1, #0
 80042de:	6863      	ldr	r3, [r4, #4]
 80042e0:	dd0c      	ble.n	80042fc <_printf_float+0x198>
 80042e2:	6121      	str	r1, [r4, #16]
 80042e4:	b913      	cbnz	r3, 80042ec <_printf_float+0x188>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	07d2      	lsls	r2, r2, #31
 80042ea:	d502      	bpl.n	80042f2 <_printf_float+0x18e>
 80042ec:	3301      	adds	r3, #1
 80042ee:	440b      	add	r3, r1
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f4:	f04f 0900 	mov.w	r9, #0
 80042f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80042fa:	e7d9      	b.n	80042b0 <_printf_float+0x14c>
 80042fc:	b913      	cbnz	r3, 8004304 <_printf_float+0x1a0>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	07d0      	lsls	r0, r2, #31
 8004302:	d501      	bpl.n	8004308 <_printf_float+0x1a4>
 8004304:	3302      	adds	r3, #2
 8004306:	e7f3      	b.n	80042f0 <_printf_float+0x18c>
 8004308:	2301      	movs	r3, #1
 800430a:	e7f1      	b.n	80042f0 <_printf_float+0x18c>
 800430c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004310:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004314:	4293      	cmp	r3, r2
 8004316:	db05      	blt.n	8004324 <_printf_float+0x1c0>
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	6123      	str	r3, [r4, #16]
 800431c:	07d1      	lsls	r1, r2, #31
 800431e:	d5e8      	bpl.n	80042f2 <_printf_float+0x18e>
 8004320:	3301      	adds	r3, #1
 8004322:	e7e5      	b.n	80042f0 <_printf_float+0x18c>
 8004324:	2b00      	cmp	r3, #0
 8004326:	bfcc      	ite	gt
 8004328:	2301      	movgt	r3, #1
 800432a:	f1c3 0302 	rsble	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	e7de      	b.n	80042f0 <_printf_float+0x18c>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	055a      	lsls	r2, r3, #21
 8004336:	d407      	bmi.n	8004348 <_printf_float+0x1e4>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	463a      	mov	r2, r7
 800433c:	4659      	mov	r1, fp
 800433e:	4628      	mov	r0, r5
 8004340:	47b0      	blx	r6
 8004342:	3001      	adds	r0, #1
 8004344:	d129      	bne.n	800439a <_printf_float+0x236>
 8004346:	e764      	b.n	8004212 <_printf_float+0xae>
 8004348:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800434c:	f240 80d7 	bls.w	80044fe <_printf_float+0x39a>
 8004350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004354:	2200      	movs	r2, #0
 8004356:	2300      	movs	r3, #0
 8004358:	f7fc fb26 	bl	80009a8 <__aeabi_dcmpeq>
 800435c:	b388      	cbz	r0, 80043c2 <_printf_float+0x25e>
 800435e:	2301      	movs	r3, #1
 8004360:	4a40      	ldr	r2, [pc, #256]	; (8004464 <_printf_float+0x300>)
 8004362:	4659      	mov	r1, fp
 8004364:	4628      	mov	r0, r5
 8004366:	47b0      	blx	r6
 8004368:	3001      	adds	r0, #1
 800436a:	f43f af52 	beq.w	8004212 <_printf_float+0xae>
 800436e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004372:	429a      	cmp	r2, r3
 8004374:	db02      	blt.n	800437c <_printf_float+0x218>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	07d8      	lsls	r0, r3, #31
 800437a:	d50e      	bpl.n	800439a <_printf_float+0x236>
 800437c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004380:	4659      	mov	r1, fp
 8004382:	4628      	mov	r0, r5
 8004384:	47b0      	blx	r6
 8004386:	3001      	adds	r0, #1
 8004388:	f43f af43 	beq.w	8004212 <_printf_float+0xae>
 800438c:	2700      	movs	r7, #0
 800438e:	f104 081a 	add.w	r8, r4, #26
 8004392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004394:	3b01      	subs	r3, #1
 8004396:	42bb      	cmp	r3, r7
 8004398:	dc09      	bgt.n	80043ae <_printf_float+0x24a>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	079f      	lsls	r7, r3, #30
 800439e:	f100 80fd 	bmi.w	800459c <_printf_float+0x438>
 80043a2:	68e0      	ldr	r0, [r4, #12]
 80043a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043a6:	4298      	cmp	r0, r3
 80043a8:	bfb8      	it	lt
 80043aa:	4618      	movlt	r0, r3
 80043ac:	e733      	b.n	8004216 <_printf_float+0xb2>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4642      	mov	r2, r8
 80043b2:	4659      	mov	r1, fp
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b0      	blx	r6
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f af2a 	beq.w	8004212 <_printf_float+0xae>
 80043be:	3701      	adds	r7, #1
 80043c0:	e7e7      	b.n	8004392 <_printf_float+0x22e>
 80043c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	dc2b      	bgt.n	8004420 <_printf_float+0x2bc>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <_printf_float+0x300>)
 80043cc:	4659      	mov	r1, fp
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b0      	blx	r6
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f af1d 	beq.w	8004212 <_printf_float+0xae>
 80043d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043da:	b923      	cbnz	r3, 80043e6 <_printf_float+0x282>
 80043dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043de:	b913      	cbnz	r3, 80043e6 <_printf_float+0x282>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d5d9      	bpl.n	800439a <_printf_float+0x236>
 80043e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043ea:	4659      	mov	r1, fp
 80043ec:	4628      	mov	r0, r5
 80043ee:	47b0      	blx	r6
 80043f0:	3001      	adds	r0, #1
 80043f2:	f43f af0e 	beq.w	8004212 <_printf_float+0xae>
 80043f6:	f04f 0800 	mov.w	r8, #0
 80043fa:	f104 091a 	add.w	r9, r4, #26
 80043fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004400:	425b      	negs	r3, r3
 8004402:	4543      	cmp	r3, r8
 8004404:	dc01      	bgt.n	800440a <_printf_float+0x2a6>
 8004406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004408:	e797      	b.n	800433a <_printf_float+0x1d6>
 800440a:	2301      	movs	r3, #1
 800440c:	464a      	mov	r2, r9
 800440e:	4659      	mov	r1, fp
 8004410:	4628      	mov	r0, r5
 8004412:	47b0      	blx	r6
 8004414:	3001      	adds	r0, #1
 8004416:	f43f aefc 	beq.w	8004212 <_printf_float+0xae>
 800441a:	f108 0801 	add.w	r8, r8, #1
 800441e:	e7ee      	b.n	80043fe <_printf_float+0x29a>
 8004420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004424:	429a      	cmp	r2, r3
 8004426:	bfa8      	it	ge
 8004428:	461a      	movge	r2, r3
 800442a:	2a00      	cmp	r2, #0
 800442c:	4690      	mov	r8, r2
 800442e:	dd07      	ble.n	8004440 <_printf_float+0x2dc>
 8004430:	4613      	mov	r3, r2
 8004432:	4659      	mov	r1, fp
 8004434:	463a      	mov	r2, r7
 8004436:	4628      	mov	r0, r5
 8004438:	47b0      	blx	r6
 800443a:	3001      	adds	r0, #1
 800443c:	f43f aee9 	beq.w	8004212 <_printf_float+0xae>
 8004440:	f104 031a 	add.w	r3, r4, #26
 8004444:	f04f 0a00 	mov.w	sl, #0
 8004448:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800444c:	930b      	str	r3, [sp, #44]	; 0x2c
 800444e:	e015      	b.n	800447c <_printf_float+0x318>
 8004450:	7fefffff 	.word	0x7fefffff
 8004454:	0800ae50 	.word	0x0800ae50
 8004458:	0800ae4c 	.word	0x0800ae4c
 800445c:	0800ae58 	.word	0x0800ae58
 8004460:	0800ae54 	.word	0x0800ae54
 8004464:	08008c6b 	.word	0x08008c6b
 8004468:	2301      	movs	r3, #1
 800446a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800446c:	4659      	mov	r1, fp
 800446e:	4628      	mov	r0, r5
 8004470:	47b0      	blx	r6
 8004472:	3001      	adds	r0, #1
 8004474:	f43f aecd 	beq.w	8004212 <_printf_float+0xae>
 8004478:	f10a 0a01 	add.w	sl, sl, #1
 800447c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004480:	eba9 0308 	sub.w	r3, r9, r8
 8004484:	4553      	cmp	r3, sl
 8004486:	dcef      	bgt.n	8004468 <_printf_float+0x304>
 8004488:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800448c:	429a      	cmp	r2, r3
 800448e:	444f      	add	r7, r9
 8004490:	db14      	blt.n	80044bc <_printf_float+0x358>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	07da      	lsls	r2, r3, #31
 8004496:	d411      	bmi.n	80044bc <_printf_float+0x358>
 8004498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800449a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800449c:	eba3 0209 	sub.w	r2, r3, r9
 80044a0:	eba3 0901 	sub.w	r9, r3, r1
 80044a4:	4591      	cmp	r9, r2
 80044a6:	bfa8      	it	ge
 80044a8:	4691      	movge	r9, r2
 80044aa:	f1b9 0f00 	cmp.w	r9, #0
 80044ae:	dc0d      	bgt.n	80044cc <_printf_float+0x368>
 80044b0:	2700      	movs	r7, #0
 80044b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044b6:	f104 081a 	add.w	r8, r4, #26
 80044ba:	e018      	b.n	80044ee <_printf_float+0x38a>
 80044bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044c0:	4659      	mov	r1, fp
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b0      	blx	r6
 80044c6:	3001      	adds	r0, #1
 80044c8:	d1e6      	bne.n	8004498 <_printf_float+0x334>
 80044ca:	e6a2      	b.n	8004212 <_printf_float+0xae>
 80044cc:	464b      	mov	r3, r9
 80044ce:	463a      	mov	r2, r7
 80044d0:	4659      	mov	r1, fp
 80044d2:	4628      	mov	r0, r5
 80044d4:	47b0      	blx	r6
 80044d6:	3001      	adds	r0, #1
 80044d8:	d1ea      	bne.n	80044b0 <_printf_float+0x34c>
 80044da:	e69a      	b.n	8004212 <_printf_float+0xae>
 80044dc:	2301      	movs	r3, #1
 80044de:	4642      	mov	r2, r8
 80044e0:	4659      	mov	r1, fp
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	3001      	adds	r0, #1
 80044e8:	f43f ae93 	beq.w	8004212 <_printf_float+0xae>
 80044ec:	3701      	adds	r7, #1
 80044ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	eba3 0309 	sub.w	r3, r3, r9
 80044f8:	42bb      	cmp	r3, r7
 80044fa:	dcef      	bgt.n	80044dc <_printf_float+0x378>
 80044fc:	e74d      	b.n	800439a <_printf_float+0x236>
 80044fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004500:	2a01      	cmp	r2, #1
 8004502:	dc01      	bgt.n	8004508 <_printf_float+0x3a4>
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d538      	bpl.n	800457a <_printf_float+0x416>
 8004508:	2301      	movs	r3, #1
 800450a:	463a      	mov	r2, r7
 800450c:	4659      	mov	r1, fp
 800450e:	4628      	mov	r0, r5
 8004510:	47b0      	blx	r6
 8004512:	3001      	adds	r0, #1
 8004514:	f43f ae7d 	beq.w	8004212 <_printf_float+0xae>
 8004518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800451c:	4659      	mov	r1, fp
 800451e:	4628      	mov	r0, r5
 8004520:	47b0      	blx	r6
 8004522:	3001      	adds	r0, #1
 8004524:	f107 0701 	add.w	r7, r7, #1
 8004528:	f43f ae73 	beq.w	8004212 <_printf_float+0xae>
 800452c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004532:	2200      	movs	r2, #0
 8004534:	f103 38ff 	add.w	r8, r3, #4294967295
 8004538:	2300      	movs	r3, #0
 800453a:	f7fc fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800453e:	b9c0      	cbnz	r0, 8004572 <_printf_float+0x40e>
 8004540:	4643      	mov	r3, r8
 8004542:	463a      	mov	r2, r7
 8004544:	4659      	mov	r1, fp
 8004546:	4628      	mov	r0, r5
 8004548:	47b0      	blx	r6
 800454a:	3001      	adds	r0, #1
 800454c:	d10d      	bne.n	800456a <_printf_float+0x406>
 800454e:	e660      	b.n	8004212 <_printf_float+0xae>
 8004550:	2301      	movs	r3, #1
 8004552:	4642      	mov	r2, r8
 8004554:	4659      	mov	r1, fp
 8004556:	4628      	mov	r0, r5
 8004558:	47b0      	blx	r6
 800455a:	3001      	adds	r0, #1
 800455c:	f43f ae59 	beq.w	8004212 <_printf_float+0xae>
 8004560:	3701      	adds	r7, #1
 8004562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004564:	3b01      	subs	r3, #1
 8004566:	42bb      	cmp	r3, r7
 8004568:	dcf2      	bgt.n	8004550 <_printf_float+0x3ec>
 800456a:	464b      	mov	r3, r9
 800456c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004570:	e6e4      	b.n	800433c <_printf_float+0x1d8>
 8004572:	2700      	movs	r7, #0
 8004574:	f104 081a 	add.w	r8, r4, #26
 8004578:	e7f3      	b.n	8004562 <_printf_float+0x3fe>
 800457a:	2301      	movs	r3, #1
 800457c:	e7e1      	b.n	8004542 <_printf_float+0x3de>
 800457e:	2301      	movs	r3, #1
 8004580:	4642      	mov	r2, r8
 8004582:	4659      	mov	r1, fp
 8004584:	4628      	mov	r0, r5
 8004586:	47b0      	blx	r6
 8004588:	3001      	adds	r0, #1
 800458a:	f43f ae42 	beq.w	8004212 <_printf_float+0xae>
 800458e:	3701      	adds	r7, #1
 8004590:	68e3      	ldr	r3, [r4, #12]
 8004592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	42bb      	cmp	r3, r7
 8004598:	dcf1      	bgt.n	800457e <_printf_float+0x41a>
 800459a:	e702      	b.n	80043a2 <_printf_float+0x23e>
 800459c:	2700      	movs	r7, #0
 800459e:	f104 0819 	add.w	r8, r4, #25
 80045a2:	e7f5      	b.n	8004590 <_printf_float+0x42c>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f43f ae94 	beq.w	80042d2 <_printf_float+0x16e>
 80045aa:	f04f 0c00 	mov.w	ip, #0
 80045ae:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80045b2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80045b6:	6022      	str	r2, [r4, #0]
 80045b8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80045bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	463a      	mov	r2, r7
 80045c4:	464b      	mov	r3, r9
 80045c6:	4628      	mov	r0, r5
 80045c8:	f7ff fd3a 	bl	8004040 <__cvt>
 80045cc:	4607      	mov	r7, r0
 80045ce:	e64f      	b.n	8004270 <_printf_float+0x10c>

080045d0 <_printf_common>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	4691      	mov	r9, r2
 80045d6:	461f      	mov	r7, r3
 80045d8:	688a      	ldr	r2, [r1, #8]
 80045da:	690b      	ldr	r3, [r1, #16]
 80045dc:	4606      	mov	r6, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	bfb8      	it	lt
 80045e2:	4613      	movlt	r3, r2
 80045e4:	f8c9 3000 	str.w	r3, [r9]
 80045e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045ec:	460c      	mov	r4, r1
 80045ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045f2:	b112      	cbz	r2, 80045fa <_printf_common+0x2a>
 80045f4:	3301      	adds	r3, #1
 80045f6:	f8c9 3000 	str.w	r3, [r9]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	0699      	lsls	r1, r3, #26
 80045fe:	bf42      	ittt	mi
 8004600:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004604:	3302      	addmi	r3, #2
 8004606:	f8c9 3000 	strmi.w	r3, [r9]
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	f015 0506 	ands.w	r5, r5, #6
 8004610:	d107      	bne.n	8004622 <_printf_common+0x52>
 8004612:	f104 0a19 	add.w	sl, r4, #25
 8004616:	68e3      	ldr	r3, [r4, #12]
 8004618:	f8d9 2000 	ldr.w	r2, [r9]
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	42ab      	cmp	r3, r5
 8004620:	dc29      	bgt.n	8004676 <_printf_common+0xa6>
 8004622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	3300      	adds	r3, #0
 800462a:	bf18      	it	ne
 800462c:	2301      	movne	r3, #1
 800462e:	0692      	lsls	r2, r2, #26
 8004630:	d42e      	bmi.n	8004690 <_printf_common+0xc0>
 8004632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004636:	4639      	mov	r1, r7
 8004638:	4630      	mov	r0, r6
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d021      	beq.n	8004684 <_printf_common+0xb4>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	68e5      	ldr	r5, [r4, #12]
 8004644:	f003 0306 	and.w	r3, r3, #6
 8004648:	2b04      	cmp	r3, #4
 800464a:	bf18      	it	ne
 800464c:	2500      	movne	r5, #0
 800464e:	f8d9 2000 	ldr.w	r2, [r9]
 8004652:	f04f 0900 	mov.w	r9, #0
 8004656:	bf08      	it	eq
 8004658:	1aad      	subeq	r5, r5, r2
 800465a:	68a3      	ldr	r3, [r4, #8]
 800465c:	6922      	ldr	r2, [r4, #16]
 800465e:	bf08      	it	eq
 8004660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004664:	4293      	cmp	r3, r2
 8004666:	bfc4      	itt	gt
 8004668:	1a9b      	subgt	r3, r3, r2
 800466a:	18ed      	addgt	r5, r5, r3
 800466c:	341a      	adds	r4, #26
 800466e:	454d      	cmp	r5, r9
 8004670:	d11a      	bne.n	80046a8 <_printf_common+0xd8>
 8004672:	2000      	movs	r0, #0
 8004674:	e008      	b.n	8004688 <_printf_common+0xb8>
 8004676:	2301      	movs	r3, #1
 8004678:	4652      	mov	r2, sl
 800467a:	4639      	mov	r1, r7
 800467c:	4630      	mov	r0, r6
 800467e:	47c0      	blx	r8
 8004680:	3001      	adds	r0, #1
 8004682:	d103      	bne.n	800468c <_printf_common+0xbc>
 8004684:	f04f 30ff 	mov.w	r0, #4294967295
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468c:	3501      	adds	r5, #1
 800468e:	e7c2      	b.n	8004616 <_printf_common+0x46>
 8004690:	2030      	movs	r0, #48	; 0x30
 8004692:	18e1      	adds	r1, r4, r3
 8004694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800469e:	4422      	add	r2, r4
 80046a0:	3302      	adds	r3, #2
 80046a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046a6:	e7c4      	b.n	8004632 <_printf_common+0x62>
 80046a8:	2301      	movs	r3, #1
 80046aa:	4622      	mov	r2, r4
 80046ac:	4639      	mov	r1, r7
 80046ae:	4630      	mov	r0, r6
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d0e6      	beq.n	8004684 <_printf_common+0xb4>
 80046b6:	f109 0901 	add.w	r9, r9, #1
 80046ba:	e7d8      	b.n	800466e <_printf_common+0x9e>

080046bc <_printf_i>:
 80046bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046c4:	460c      	mov	r4, r1
 80046c6:	7e09      	ldrb	r1, [r1, #24]
 80046c8:	b085      	sub	sp, #20
 80046ca:	296e      	cmp	r1, #110	; 0x6e
 80046cc:	4617      	mov	r7, r2
 80046ce:	4606      	mov	r6, r0
 80046d0:	4698      	mov	r8, r3
 80046d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046d4:	f000 80b3 	beq.w	800483e <_printf_i+0x182>
 80046d8:	d822      	bhi.n	8004720 <_printf_i+0x64>
 80046da:	2963      	cmp	r1, #99	; 0x63
 80046dc:	d036      	beq.n	800474c <_printf_i+0x90>
 80046de:	d80a      	bhi.n	80046f6 <_printf_i+0x3a>
 80046e0:	2900      	cmp	r1, #0
 80046e2:	f000 80b9 	beq.w	8004858 <_printf_i+0x19c>
 80046e6:	2958      	cmp	r1, #88	; 0x58
 80046e8:	f000 8083 	beq.w	80047f2 <_printf_i+0x136>
 80046ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046f4:	e032      	b.n	800475c <_printf_i+0xa0>
 80046f6:	2964      	cmp	r1, #100	; 0x64
 80046f8:	d001      	beq.n	80046fe <_printf_i+0x42>
 80046fa:	2969      	cmp	r1, #105	; 0x69
 80046fc:	d1f6      	bne.n	80046ec <_printf_i+0x30>
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	0605      	lsls	r5, r0, #24
 8004704:	f103 0104 	add.w	r1, r3, #4
 8004708:	d52a      	bpl.n	8004760 <_printf_i+0xa4>
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	da03      	bge.n	800471a <_printf_i+0x5e>
 8004712:	222d      	movs	r2, #45	; 0x2d
 8004714:	425b      	negs	r3, r3
 8004716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800471a:	486f      	ldr	r0, [pc, #444]	; (80048d8 <_printf_i+0x21c>)
 800471c:	220a      	movs	r2, #10
 800471e:	e039      	b.n	8004794 <_printf_i+0xd8>
 8004720:	2973      	cmp	r1, #115	; 0x73
 8004722:	f000 809d 	beq.w	8004860 <_printf_i+0x1a4>
 8004726:	d808      	bhi.n	800473a <_printf_i+0x7e>
 8004728:	296f      	cmp	r1, #111	; 0x6f
 800472a:	d020      	beq.n	800476e <_printf_i+0xb2>
 800472c:	2970      	cmp	r1, #112	; 0x70
 800472e:	d1dd      	bne.n	80046ec <_printf_i+0x30>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	f043 0320 	orr.w	r3, r3, #32
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	e003      	b.n	8004742 <_printf_i+0x86>
 800473a:	2975      	cmp	r1, #117	; 0x75
 800473c:	d017      	beq.n	800476e <_printf_i+0xb2>
 800473e:	2978      	cmp	r1, #120	; 0x78
 8004740:	d1d4      	bne.n	80046ec <_printf_i+0x30>
 8004742:	2378      	movs	r3, #120	; 0x78
 8004744:	4865      	ldr	r0, [pc, #404]	; (80048dc <_printf_i+0x220>)
 8004746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800474a:	e055      	b.n	80047f8 <_printf_i+0x13c>
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004752:	1d19      	adds	r1, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6011      	str	r1, [r2, #0]
 8004758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800475c:	2301      	movs	r3, #1
 800475e:	e08c      	b.n	800487a <_printf_i+0x1be>
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004766:	6011      	str	r1, [r2, #0]
 8004768:	bf18      	it	ne
 800476a:	b21b      	sxthne	r3, r3
 800476c:	e7cf      	b.n	800470e <_printf_i+0x52>
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	6825      	ldr	r5, [r4, #0]
 8004772:	1d18      	adds	r0, r3, #4
 8004774:	6010      	str	r0, [r2, #0]
 8004776:	0628      	lsls	r0, r5, #24
 8004778:	d501      	bpl.n	800477e <_printf_i+0xc2>
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	e002      	b.n	8004784 <_printf_i+0xc8>
 800477e:	0668      	lsls	r0, r5, #25
 8004780:	d5fb      	bpl.n	800477a <_printf_i+0xbe>
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	296f      	cmp	r1, #111	; 0x6f
 8004786:	bf14      	ite	ne
 8004788:	220a      	movne	r2, #10
 800478a:	2208      	moveq	r2, #8
 800478c:	4852      	ldr	r0, [pc, #328]	; (80048d8 <_printf_i+0x21c>)
 800478e:	2100      	movs	r1, #0
 8004790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004794:	6865      	ldr	r5, [r4, #4]
 8004796:	2d00      	cmp	r5, #0
 8004798:	60a5      	str	r5, [r4, #8]
 800479a:	f2c0 8095 	blt.w	80048c8 <_printf_i+0x20c>
 800479e:	6821      	ldr	r1, [r4, #0]
 80047a0:	f021 0104 	bic.w	r1, r1, #4
 80047a4:	6021      	str	r1, [r4, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d13d      	bne.n	8004826 <_printf_i+0x16a>
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	f040 808e 	bne.w	80048cc <_printf_i+0x210>
 80047b0:	4665      	mov	r5, ip
 80047b2:	2a08      	cmp	r2, #8
 80047b4:	d10b      	bne.n	80047ce <_printf_i+0x112>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	07db      	lsls	r3, r3, #31
 80047ba:	d508      	bpl.n	80047ce <_printf_i+0x112>
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	bfde      	ittt	le
 80047c4:	2330      	movle	r3, #48	; 0x30
 80047c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ce:	ebac 0305 	sub.w	r3, ip, r5
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	f8cd 8000 	str.w	r8, [sp]
 80047d8:	463b      	mov	r3, r7
 80047da:	aa03      	add	r2, sp, #12
 80047dc:	4621      	mov	r1, r4
 80047de:	4630      	mov	r0, r6
 80047e0:	f7ff fef6 	bl	80045d0 <_printf_common>
 80047e4:	3001      	adds	r0, #1
 80047e6:	d14d      	bne.n	8004884 <_printf_i+0x1c8>
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	b005      	add	sp, #20
 80047ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047f2:	4839      	ldr	r0, [pc, #228]	; (80048d8 <_printf_i+0x21c>)
 80047f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047f8:	6813      	ldr	r3, [r2, #0]
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	1d1d      	adds	r5, r3, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6015      	str	r5, [r2, #0]
 8004802:	060a      	lsls	r2, r1, #24
 8004804:	d50b      	bpl.n	800481e <_printf_i+0x162>
 8004806:	07ca      	lsls	r2, r1, #31
 8004808:	bf44      	itt	mi
 800480a:	f041 0120 	orrmi.w	r1, r1, #32
 800480e:	6021      	strmi	r1, [r4, #0]
 8004810:	b91b      	cbnz	r3, 800481a <_printf_i+0x15e>
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	f022 0220 	bic.w	r2, r2, #32
 8004818:	6022      	str	r2, [r4, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	e7b7      	b.n	800478e <_printf_i+0xd2>
 800481e:	064d      	lsls	r5, r1, #25
 8004820:	bf48      	it	mi
 8004822:	b29b      	uxthmi	r3, r3
 8004824:	e7ef      	b.n	8004806 <_printf_i+0x14a>
 8004826:	4665      	mov	r5, ip
 8004828:	fbb3 f1f2 	udiv	r1, r3, r2
 800482c:	fb02 3311 	mls	r3, r2, r1, r3
 8004830:	5cc3      	ldrb	r3, [r0, r3]
 8004832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004836:	460b      	mov	r3, r1
 8004838:	2900      	cmp	r1, #0
 800483a:	d1f5      	bne.n	8004828 <_printf_i+0x16c>
 800483c:	e7b9      	b.n	80047b2 <_printf_i+0xf6>
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	1d18      	adds	r0, r3, #4
 8004844:	6961      	ldr	r1, [r4, #20]
 8004846:	6010      	str	r0, [r2, #0]
 8004848:	0628      	lsls	r0, r5, #24
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	d501      	bpl.n	8004852 <_printf_i+0x196>
 800484e:	6019      	str	r1, [r3, #0]
 8004850:	e002      	b.n	8004858 <_printf_i+0x19c>
 8004852:	066a      	lsls	r2, r5, #25
 8004854:	d5fb      	bpl.n	800484e <_printf_i+0x192>
 8004856:	8019      	strh	r1, [r3, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	4665      	mov	r5, ip
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	e7b9      	b.n	80047d4 <_printf_i+0x118>
 8004860:	6813      	ldr	r3, [r2, #0]
 8004862:	1d19      	adds	r1, r3, #4
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	681d      	ldr	r5, [r3, #0]
 8004868:	6862      	ldr	r2, [r4, #4]
 800486a:	2100      	movs	r1, #0
 800486c:	4628      	mov	r0, r5
 800486e:	f002 fc27 	bl	80070c0 <memchr>
 8004872:	b108      	cbz	r0, 8004878 <_printf_i+0x1bc>
 8004874:	1b40      	subs	r0, r0, r5
 8004876:	6060      	str	r0, [r4, #4]
 8004878:	6863      	ldr	r3, [r4, #4]
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	2300      	movs	r3, #0
 800487e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004882:	e7a7      	b.n	80047d4 <_printf_i+0x118>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	462a      	mov	r2, r5
 8004888:	4639      	mov	r1, r7
 800488a:	4630      	mov	r0, r6
 800488c:	47c0      	blx	r8
 800488e:	3001      	adds	r0, #1
 8004890:	d0aa      	beq.n	80047e8 <_printf_i+0x12c>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	079b      	lsls	r3, r3, #30
 8004896:	d413      	bmi.n	80048c0 <_printf_i+0x204>
 8004898:	68e0      	ldr	r0, [r4, #12]
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	4298      	cmp	r0, r3
 800489e:	bfb8      	it	lt
 80048a0:	4618      	movlt	r0, r3
 80048a2:	e7a3      	b.n	80047ec <_printf_i+0x130>
 80048a4:	2301      	movs	r3, #1
 80048a6:	464a      	mov	r2, r9
 80048a8:	4639      	mov	r1, r7
 80048aa:	4630      	mov	r0, r6
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d09a      	beq.n	80047e8 <_printf_i+0x12c>
 80048b2:	3501      	adds	r5, #1
 80048b4:	68e3      	ldr	r3, [r4, #12]
 80048b6:	9a03      	ldr	r2, [sp, #12]
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	42ab      	cmp	r3, r5
 80048bc:	dcf2      	bgt.n	80048a4 <_printf_i+0x1e8>
 80048be:	e7eb      	b.n	8004898 <_printf_i+0x1dc>
 80048c0:	2500      	movs	r5, #0
 80048c2:	f104 0919 	add.w	r9, r4, #25
 80048c6:	e7f5      	b.n	80048b4 <_printf_i+0x1f8>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ac      	bne.n	8004826 <_printf_i+0x16a>
 80048cc:	7803      	ldrb	r3, [r0, #0]
 80048ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d6:	e76c      	b.n	80047b2 <_printf_i+0xf6>
 80048d8:	0800ae5c 	.word	0x0800ae5c
 80048dc:	0800ae6d 	.word	0x0800ae6d

080048e0 <_scanf_float>:
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	469a      	mov	sl, r3
 80048e6:	688b      	ldr	r3, [r1, #8]
 80048e8:	4616      	mov	r6, r2
 80048ea:	1e5a      	subs	r2, r3, #1
 80048ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80048f0:	bf88      	it	hi
 80048f2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80048f6:	b087      	sub	sp, #28
 80048f8:	bf85      	ittet	hi
 80048fa:	189b      	addhi	r3, r3, r2
 80048fc:	9301      	strhi	r3, [sp, #4]
 80048fe:	2300      	movls	r3, #0
 8004900:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004904:	4688      	mov	r8, r1
 8004906:	f04f 0b00 	mov.w	fp, #0
 800490a:	bf8c      	ite	hi
 800490c:	608b      	strhi	r3, [r1, #8]
 800490e:	9301      	strls	r3, [sp, #4]
 8004910:	680b      	ldr	r3, [r1, #0]
 8004912:	4607      	mov	r7, r0
 8004914:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004918:	f848 3b1c 	str.w	r3, [r8], #28
 800491c:	460c      	mov	r4, r1
 800491e:	4645      	mov	r5, r8
 8004920:	465a      	mov	r2, fp
 8004922:	46d9      	mov	r9, fp
 8004924:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004928:	f8cd b008 	str.w	fp, [sp, #8]
 800492c:	68a1      	ldr	r1, [r4, #8]
 800492e:	b181      	cbz	r1, 8004952 <_scanf_float+0x72>
 8004930:	6833      	ldr	r3, [r6, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b49      	cmp	r3, #73	; 0x49
 8004936:	d071      	beq.n	8004a1c <_scanf_float+0x13c>
 8004938:	d84d      	bhi.n	80049d6 <_scanf_float+0xf6>
 800493a:	2b39      	cmp	r3, #57	; 0x39
 800493c:	d840      	bhi.n	80049c0 <_scanf_float+0xe0>
 800493e:	2b31      	cmp	r3, #49	; 0x31
 8004940:	f080 8088 	bcs.w	8004a54 <_scanf_float+0x174>
 8004944:	2b2d      	cmp	r3, #45	; 0x2d
 8004946:	f000 8090 	beq.w	8004a6a <_scanf_float+0x18a>
 800494a:	d815      	bhi.n	8004978 <_scanf_float+0x98>
 800494c:	2b2b      	cmp	r3, #43	; 0x2b
 800494e:	f000 808c 	beq.w	8004a6a <_scanf_float+0x18a>
 8004952:	f1b9 0f00 	cmp.w	r9, #0
 8004956:	d003      	beq.n	8004960 <_scanf_float+0x80>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495e:	6023      	str	r3, [r4, #0]
 8004960:	3a01      	subs	r2, #1
 8004962:	2a01      	cmp	r2, #1
 8004964:	f200 80ea 	bhi.w	8004b3c <_scanf_float+0x25c>
 8004968:	4545      	cmp	r5, r8
 800496a:	f200 80dc 	bhi.w	8004b26 <_scanf_float+0x246>
 800496e:	2601      	movs	r6, #1
 8004970:	4630      	mov	r0, r6
 8004972:	b007      	add	sp, #28
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	2b2e      	cmp	r3, #46	; 0x2e
 800497a:	f000 809f 	beq.w	8004abc <_scanf_float+0x1dc>
 800497e:	2b30      	cmp	r3, #48	; 0x30
 8004980:	d1e7      	bne.n	8004952 <_scanf_float+0x72>
 8004982:	6820      	ldr	r0, [r4, #0]
 8004984:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004988:	d064      	beq.n	8004a54 <_scanf_float+0x174>
 800498a:	9b01      	ldr	r3, [sp, #4]
 800498c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004990:	6020      	str	r0, [r4, #0]
 8004992:	f109 0901 	add.w	r9, r9, #1
 8004996:	b11b      	cbz	r3, 80049a0 <_scanf_float+0xc0>
 8004998:	3b01      	subs	r3, #1
 800499a:	3101      	adds	r1, #1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	60a1      	str	r1, [r4, #8]
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	3301      	adds	r3, #1
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	6873      	ldr	r3, [r6, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	6073      	str	r3, [r6, #4]
 80049b4:	f340 80ac 	ble.w	8004b10 <_scanf_float+0x230>
 80049b8:	6833      	ldr	r3, [r6, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	6033      	str	r3, [r6, #0]
 80049be:	e7b5      	b.n	800492c <_scanf_float+0x4c>
 80049c0:	2b45      	cmp	r3, #69	; 0x45
 80049c2:	f000 8085 	beq.w	8004ad0 <_scanf_float+0x1f0>
 80049c6:	2b46      	cmp	r3, #70	; 0x46
 80049c8:	d06a      	beq.n	8004aa0 <_scanf_float+0x1c0>
 80049ca:	2b41      	cmp	r3, #65	; 0x41
 80049cc:	d1c1      	bne.n	8004952 <_scanf_float+0x72>
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	d1bf      	bne.n	8004952 <_scanf_float+0x72>
 80049d2:	2202      	movs	r2, #2
 80049d4:	e046      	b.n	8004a64 <_scanf_float+0x184>
 80049d6:	2b65      	cmp	r3, #101	; 0x65
 80049d8:	d07a      	beq.n	8004ad0 <_scanf_float+0x1f0>
 80049da:	d818      	bhi.n	8004a0e <_scanf_float+0x12e>
 80049dc:	2b54      	cmp	r3, #84	; 0x54
 80049de:	d066      	beq.n	8004aae <_scanf_float+0x1ce>
 80049e0:	d811      	bhi.n	8004a06 <_scanf_float+0x126>
 80049e2:	2b4e      	cmp	r3, #78	; 0x4e
 80049e4:	d1b5      	bne.n	8004952 <_scanf_float+0x72>
 80049e6:	2a00      	cmp	r2, #0
 80049e8:	d146      	bne.n	8004a78 <_scanf_float+0x198>
 80049ea:	f1b9 0f00 	cmp.w	r9, #0
 80049ee:	d145      	bne.n	8004a7c <_scanf_float+0x19c>
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80049f6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80049fa:	d13f      	bne.n	8004a7c <_scanf_float+0x19c>
 80049fc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a00:	6021      	str	r1, [r4, #0]
 8004a02:	2201      	movs	r2, #1
 8004a04:	e02e      	b.n	8004a64 <_scanf_float+0x184>
 8004a06:	2b59      	cmp	r3, #89	; 0x59
 8004a08:	d01e      	beq.n	8004a48 <_scanf_float+0x168>
 8004a0a:	2b61      	cmp	r3, #97	; 0x61
 8004a0c:	e7de      	b.n	80049cc <_scanf_float+0xec>
 8004a0e:	2b6e      	cmp	r3, #110	; 0x6e
 8004a10:	d0e9      	beq.n	80049e6 <_scanf_float+0x106>
 8004a12:	d815      	bhi.n	8004a40 <_scanf_float+0x160>
 8004a14:	2b66      	cmp	r3, #102	; 0x66
 8004a16:	d043      	beq.n	8004aa0 <_scanf_float+0x1c0>
 8004a18:	2b69      	cmp	r3, #105	; 0x69
 8004a1a:	d19a      	bne.n	8004952 <_scanf_float+0x72>
 8004a1c:	f1bb 0f00 	cmp.w	fp, #0
 8004a20:	d138      	bne.n	8004a94 <_scanf_float+0x1b4>
 8004a22:	f1b9 0f00 	cmp.w	r9, #0
 8004a26:	d197      	bne.n	8004958 <_scanf_float+0x78>
 8004a28:	6821      	ldr	r1, [r4, #0]
 8004a2a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a2e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004a32:	d195      	bne.n	8004960 <_scanf_float+0x80>
 8004a34:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a38:	6021      	str	r1, [r4, #0]
 8004a3a:	f04f 0b01 	mov.w	fp, #1
 8004a3e:	e011      	b.n	8004a64 <_scanf_float+0x184>
 8004a40:	2b74      	cmp	r3, #116	; 0x74
 8004a42:	d034      	beq.n	8004aae <_scanf_float+0x1ce>
 8004a44:	2b79      	cmp	r3, #121	; 0x79
 8004a46:	d184      	bne.n	8004952 <_scanf_float+0x72>
 8004a48:	f1bb 0f07 	cmp.w	fp, #7
 8004a4c:	d181      	bne.n	8004952 <_scanf_float+0x72>
 8004a4e:	f04f 0b08 	mov.w	fp, #8
 8004a52:	e007      	b.n	8004a64 <_scanf_float+0x184>
 8004a54:	eb12 0f0b 	cmn.w	r2, fp
 8004a58:	f47f af7b 	bne.w	8004952 <_scanf_float+0x72>
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004a62:	6021      	str	r1, [r4, #0]
 8004a64:	702b      	strb	r3, [r5, #0]
 8004a66:	3501      	adds	r5, #1
 8004a68:	e79a      	b.n	80049a0 <_scanf_float+0xc0>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	0608      	lsls	r0, r1, #24
 8004a6e:	f57f af70 	bpl.w	8004952 <_scanf_float+0x72>
 8004a72:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a76:	e7f4      	b.n	8004a62 <_scanf_float+0x182>
 8004a78:	2a02      	cmp	r2, #2
 8004a7a:	d047      	beq.n	8004b0c <_scanf_float+0x22c>
 8004a7c:	f1bb 0f01 	cmp.w	fp, #1
 8004a80:	d003      	beq.n	8004a8a <_scanf_float+0x1aa>
 8004a82:	f1bb 0f04 	cmp.w	fp, #4
 8004a86:	f47f af64 	bne.w	8004952 <_scanf_float+0x72>
 8004a8a:	f10b 0b01 	add.w	fp, fp, #1
 8004a8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004a92:	e7e7      	b.n	8004a64 <_scanf_float+0x184>
 8004a94:	f1bb 0f03 	cmp.w	fp, #3
 8004a98:	d0f7      	beq.n	8004a8a <_scanf_float+0x1aa>
 8004a9a:	f1bb 0f05 	cmp.w	fp, #5
 8004a9e:	e7f2      	b.n	8004a86 <_scanf_float+0x1a6>
 8004aa0:	f1bb 0f02 	cmp.w	fp, #2
 8004aa4:	f47f af55 	bne.w	8004952 <_scanf_float+0x72>
 8004aa8:	f04f 0b03 	mov.w	fp, #3
 8004aac:	e7da      	b.n	8004a64 <_scanf_float+0x184>
 8004aae:	f1bb 0f06 	cmp.w	fp, #6
 8004ab2:	f47f af4e 	bne.w	8004952 <_scanf_float+0x72>
 8004ab6:	f04f 0b07 	mov.w	fp, #7
 8004aba:	e7d3      	b.n	8004a64 <_scanf_float+0x184>
 8004abc:	6821      	ldr	r1, [r4, #0]
 8004abe:	0588      	lsls	r0, r1, #22
 8004ac0:	f57f af47 	bpl.w	8004952 <_scanf_float+0x72>
 8004ac4:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ac8:	6021      	str	r1, [r4, #0]
 8004aca:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ace:	e7c9      	b.n	8004a64 <_scanf_float+0x184>
 8004ad0:	6821      	ldr	r1, [r4, #0]
 8004ad2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004ad6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004ada:	d006      	beq.n	8004aea <_scanf_float+0x20a>
 8004adc:	0548      	lsls	r0, r1, #21
 8004ade:	f57f af38 	bpl.w	8004952 <_scanf_float+0x72>
 8004ae2:	f1b9 0f00 	cmp.w	r9, #0
 8004ae6:	f43f af3b 	beq.w	8004960 <_scanf_float+0x80>
 8004aea:	0588      	lsls	r0, r1, #22
 8004aec:	bf58      	it	pl
 8004aee:	9802      	ldrpl	r0, [sp, #8]
 8004af0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004af4:	bf58      	it	pl
 8004af6:	eba9 0000 	subpl.w	r0, r9, r0
 8004afa:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004afe:	bf58      	it	pl
 8004b00:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004b04:	6021      	str	r1, [r4, #0]
 8004b06:	f04f 0900 	mov.w	r9, #0
 8004b0a:	e7ab      	b.n	8004a64 <_scanf_float+0x184>
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	e7a9      	b.n	8004a64 <_scanf_float+0x184>
 8004b10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b14:	4631      	mov	r1, r6
 8004b16:	4638      	mov	r0, r7
 8004b18:	9205      	str	r2, [sp, #20]
 8004b1a:	4798      	blx	r3
 8004b1c:	9a05      	ldr	r2, [sp, #20]
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f43f af04 	beq.w	800492c <_scanf_float+0x4c>
 8004b24:	e715      	b.n	8004952 <_scanf_float+0x72>
 8004b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b30:	4638      	mov	r0, r7
 8004b32:	4798      	blx	r3
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e715      	b.n	8004968 <_scanf_float+0x88>
 8004b3c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d80a      	bhi.n	8004b5a <_scanf_float+0x27a>
 8004b44:	f1bb 0f02 	cmp.w	fp, #2
 8004b48:	d967      	bls.n	8004c1a <_scanf_float+0x33a>
 8004b4a:	f1ab 0b03 	sub.w	fp, fp, #3
 8004b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8004b52:	eba5 0b0b 	sub.w	fp, r5, fp
 8004b56:	455d      	cmp	r5, fp
 8004b58:	d14a      	bne.n	8004bf0 <_scanf_float+0x310>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	05da      	lsls	r2, r3, #23
 8004b5e:	d51f      	bpl.n	8004ba0 <_scanf_float+0x2c0>
 8004b60:	055b      	lsls	r3, r3, #21
 8004b62:	d467      	bmi.n	8004c34 <_scanf_float+0x354>
 8004b64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	2965      	cmp	r1, #101	; 0x65
 8004b6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b70:	f105 3bff 	add.w	fp, r5, #4294967295
 8004b74:	6123      	str	r3, [r4, #16]
 8004b76:	d00d      	beq.n	8004b94 <_scanf_float+0x2b4>
 8004b78:	2945      	cmp	r1, #69	; 0x45
 8004b7a:	d00b      	beq.n	8004b94 <_scanf_float+0x2b4>
 8004b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b80:	4632      	mov	r2, r6
 8004b82:	4638      	mov	r0, r7
 8004b84:	4798      	blx	r3
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	f1a5 0b02 	sub.w	fp, r5, #2
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b98:	4632      	mov	r2, r6
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	4798      	blx	r3
 8004b9e:	465d      	mov	r5, fp
 8004ba0:	6826      	ldr	r6, [r4, #0]
 8004ba2:	f016 0610 	ands.w	r6, r6, #16
 8004ba6:	d176      	bne.n	8004c96 <_scanf_float+0x3b6>
 8004ba8:	702e      	strb	r6, [r5, #0]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb4:	d141      	bne.n	8004c3a <_scanf_float+0x35a>
 8004bb6:	9b02      	ldr	r3, [sp, #8]
 8004bb8:	eba9 0303 	sub.w	r3, r9, r3
 8004bbc:	425a      	negs	r2, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d148      	bne.n	8004c54 <_scanf_float+0x374>
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f000 ff36 	bl	8005a38 <_strtod_r>
 8004bcc:	6825      	ldr	r5, [r4, #0]
 8004bce:	4680      	mov	r8, r0
 8004bd0:	f015 0f02 	tst.w	r5, #2
 8004bd4:	4689      	mov	r9, r1
 8004bd6:	f8da 3000 	ldr.w	r3, [sl]
 8004bda:	d046      	beq.n	8004c6a <_scanf_float+0x38a>
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	f8ca 2000 	str.w	r2, [sl]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	e9c3 8900 	strd	r8, r9, [r3]
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60e3      	str	r3, [r4, #12]
 8004bee:	e6bf      	b.n	8004970 <_scanf_float+0x90>
 8004bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	4798      	blx	r3
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	e7a7      	b.n	8004b56 <_scanf_float+0x276>
 8004c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c0a:	4632      	mov	r2, r6
 8004c0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c10:	4638      	mov	r0, r7
 8004c12:	4798      	blx	r3
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	4545      	cmp	r5, r8
 8004c1c:	d8f3      	bhi.n	8004c06 <_scanf_float+0x326>
 8004c1e:	e6a6      	b.n	800496e <_scanf_float+0x8e>
 8004c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c24:	4632      	mov	r2, r6
 8004c26:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	4798      	blx	r3
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	4545      	cmp	r5, r8
 8004c36:	d8f3      	bhi.n	8004c20 <_scanf_float+0x340>
 8004c38:	e699      	b.n	800496e <_scanf_float+0x8e>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0c0      	beq.n	8004bc2 <_scanf_float+0x2e2>
 8004c40:	9904      	ldr	r1, [sp, #16]
 8004c42:	230a      	movs	r3, #10
 8004c44:	4632      	mov	r2, r6
 8004c46:	3101      	adds	r1, #1
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f000 ff81 	bl	8005b50 <_strtol_r>
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	9d04      	ldr	r5, [sp, #16]
 8004c52:	1ac2      	subs	r2, r0, r3
 8004c54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	bf28      	it	cs
 8004c5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <_scanf_float+0x3bc>)
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f838 	bl	8004cd8 <siprintf>
 8004c68:	e7ab      	b.n	8004bc2 <_scanf_float+0x2e2>
 8004c6a:	1d1f      	adds	r7, r3, #4
 8004c6c:	f015 0504 	ands.w	r5, r5, #4
 8004c70:	f8ca 7000 	str.w	r7, [sl]
 8004c74:	d1b5      	bne.n	8004be2 <_scanf_float+0x302>
 8004c76:	681f      	ldr	r7, [r3, #0]
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	f7fb fec6 	bl	8000a0c <__aeabi_dcmpun>
 8004c80:	b120      	cbz	r0, 8004c8c <_scanf_float+0x3ac>
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f824 	bl	8004cd0 <nanf>
 8004c88:	6038      	str	r0, [r7, #0]
 8004c8a:	e7ad      	b.n	8004be8 <_scanf_float+0x308>
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	4649      	mov	r1, r9
 8004c90:	f7fb ff1a 	bl	8000ac8 <__aeabi_d2f>
 8004c94:	e7f8      	b.n	8004c88 <_scanf_float+0x3a8>
 8004c96:	2600      	movs	r6, #0
 8004c98:	e66a      	b.n	8004970 <_scanf_float+0x90>
 8004c9a:	bf00      	nop
 8004c9c:	0800ae7e 	.word	0x0800ae7e

08004ca0 <iprintf>:
 8004ca0:	b40f      	push	{r0, r1, r2, r3}
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <iprintf+0x2c>)
 8004ca4:	b513      	push	{r0, r1, r4, lr}
 8004ca6:	681c      	ldr	r4, [r3, #0]
 8004ca8:	b124      	cbz	r4, 8004cb4 <iprintf+0x14>
 8004caa:	69a3      	ldr	r3, [r4, #24]
 8004cac:	b913      	cbnz	r3, 8004cb4 <iprintf+0x14>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f001 fe06 	bl	80068c0 <__sinit>
 8004cb4:	ab05      	add	r3, sp, #20
 8004cb6:	9a04      	ldr	r2, [sp, #16]
 8004cb8:	68a1      	ldr	r1, [r4, #8]
 8004cba:	4620      	mov	r0, r4
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f003 f9dd 	bl	800807c <_vfiprintf_r>
 8004cc2:	b002      	add	sp, #8
 8004cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr
 8004ccc:	20000024 	.word	0x20000024

08004cd0 <nanf>:
 8004cd0:	4800      	ldr	r0, [pc, #0]	; (8004cd4 <nanf+0x4>)
 8004cd2:	4770      	bx	lr
 8004cd4:	7fc00000 	.word	0x7fc00000

08004cd8 <siprintf>:
 8004cd8:	b40e      	push	{r1, r2, r3}
 8004cda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cde:	b500      	push	{lr}
 8004ce0:	b09c      	sub	sp, #112	; 0x70
 8004ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	9006      	str	r0, [sp, #24]
 8004ce8:	9107      	str	r1, [sp, #28]
 8004cea:	9104      	str	r1, [sp, #16]
 8004cec:	4808      	ldr	r0, [pc, #32]	; (8004d10 <siprintf+0x38>)
 8004cee:	4909      	ldr	r1, [pc, #36]	; (8004d14 <siprintf+0x3c>)
 8004cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	6800      	ldr	r0, [r0, #0]
 8004cf8:	a902      	add	r1, sp, #8
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	f002 fef4 	bl	8007ae8 <_svfiprintf_r>
 8004d00:	2200      	movs	r2, #0
 8004d02:	9b02      	ldr	r3, [sp, #8]
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	b01c      	add	sp, #112	; 0x70
 8004d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d0c:	b003      	add	sp, #12
 8004d0e:	4770      	bx	lr
 8004d10:	20000024 	.word	0x20000024
 8004d14:	ffff0208 	.word	0xffff0208

08004d18 <siscanf>:
 8004d18:	b40e      	push	{r1, r2, r3}
 8004d1a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004d1e:	b530      	push	{r4, r5, lr}
 8004d20:	b09c      	sub	sp, #112	; 0x70
 8004d22:	ac1f      	add	r4, sp, #124	; 0x7c
 8004d24:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d2c:	9002      	str	r0, [sp, #8]
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	f7fb fa0e 	bl	8000150 <strlen>
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <siscanf+0x4c>)
 8004d36:	9003      	str	r0, [sp, #12]
 8004d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d3e:	9314      	str	r3, [sp, #80]	; 0x50
 8004d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d44:	9007      	str	r0, [sp, #28]
 8004d46:	4808      	ldr	r0, [pc, #32]	; (8004d68 <siscanf+0x50>)
 8004d48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4623      	mov	r3, r4
 8004d50:	a902      	add	r1, sp, #8
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9401      	str	r4, [sp, #4]
 8004d56:	f003 f819 	bl	8007d8c <__ssvfiscanf_r>
 8004d5a:	b01c      	add	sp, #112	; 0x70
 8004d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	08004d8f 	.word	0x08004d8f
 8004d68:	20000024 	.word	0x20000024

08004d6c <__sread>:
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d74:	f003 fbf0 	bl	8008558 <_read_r>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	bfab      	itete	ge
 8004d7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d80:	181b      	addge	r3, r3, r0
 8004d82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d86:	bfac      	ite	ge
 8004d88:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d8a:	81a3      	strhlt	r3, [r4, #12]
 8004d8c:	bd10      	pop	{r4, pc}

08004d8e <__seofread>:
 8004d8e:	2000      	movs	r0, #0
 8004d90:	4770      	bx	lr

08004d92 <__swrite>:
 8004d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d96:	461f      	mov	r7, r3
 8004d98:	898b      	ldrh	r3, [r1, #12]
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	05db      	lsls	r3, r3, #23
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4616      	mov	r6, r2
 8004da2:	d505      	bpl.n	8004db0 <__swrite+0x1e>
 8004da4:	2302      	movs	r3, #2
 8004da6:	2200      	movs	r2, #0
 8004da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dac:	f002 f95c 	bl	8007068 <_lseek_r>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	4632      	mov	r2, r6
 8004db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc6:	f000 bed5 	b.w	8005b74 <_write_r>

08004dca <__sseek>:
 8004dca:	b510      	push	{r4, lr}
 8004dcc:	460c      	mov	r4, r1
 8004dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd2:	f002 f949 	bl	8007068 <_lseek_r>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	bf15      	itete	ne
 8004ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004de6:	81a3      	strheq	r3, [r4, #12]
 8004de8:	bf18      	it	ne
 8004dea:	81a3      	strhne	r3, [r4, #12]
 8004dec:	bd10      	pop	{r4, pc}

08004dee <__sclose>:
 8004dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df2:	f000 bed1 	b.w	8005b98 <_close_r>

08004df6 <sulp>:
 8004df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	4690      	mov	r8, r2
 8004dfe:	f002 fc37 	bl	8007670 <__ulp>
 8004e02:	4604      	mov	r4, r0
 8004e04:	460d      	mov	r5, r1
 8004e06:	f1b8 0f00 	cmp.w	r8, #0
 8004e0a:	d011      	beq.n	8004e30 <sulp+0x3a>
 8004e0c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dd0b      	ble.n	8004e30 <sulp+0x3a>
 8004e18:	2400      	movs	r4, #0
 8004e1a:	051b      	lsls	r3, r3, #20
 8004e1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e24:	4622      	mov	r2, r4
 8004e26:	462b      	mov	r3, r5
 8004e28:	f7fb fb56 	bl	80004d8 <__aeabi_dmul>
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	460d      	mov	r5, r1
 8004e30:	4620      	mov	r0, r4
 8004e32:	4629      	mov	r1, r5
 8004e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e38 <_strtod_l>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	461f      	mov	r7, r3
 8004e3e:	2300      	movs	r3, #0
 8004e40:	b0a1      	sub	sp, #132	; 0x84
 8004e42:	4683      	mov	fp, r0
 8004e44:	4638      	mov	r0, r7
 8004e46:	460e      	mov	r6, r1
 8004e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8004e4c:	f002 f8fc 	bl	8007048 <__localeconv_l>
 8004e50:	4680      	mov	r8, r0
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	f7fb f97c 	bl	8000150 <strlen>
 8004e58:	f04f 0900 	mov.w	r9, #0
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	f04f 0a00 	mov.w	sl, #0
 8004e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e66:	781a      	ldrb	r2, [r3, #0]
 8004e68:	2a0d      	cmp	r2, #13
 8004e6a:	d832      	bhi.n	8004ed2 <_strtod_l+0x9a>
 8004e6c:	2a09      	cmp	r2, #9
 8004e6e:	d236      	bcs.n	8004ede <_strtod_l+0xa6>
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	d03e      	beq.n	8004ef2 <_strtod_l+0xba>
 8004e74:	2300      	movs	r3, #0
 8004e76:	930d      	str	r3, [sp, #52]	; 0x34
 8004e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e7a:	782b      	ldrb	r3, [r5, #0]
 8004e7c:	2b30      	cmp	r3, #48	; 0x30
 8004e7e:	f040 80ac 	bne.w	8004fda <_strtod_l+0x1a2>
 8004e82:	786b      	ldrb	r3, [r5, #1]
 8004e84:	2b58      	cmp	r3, #88	; 0x58
 8004e86:	d001      	beq.n	8004e8c <_strtod_l+0x54>
 8004e88:	2b78      	cmp	r3, #120	; 0x78
 8004e8a:	d167      	bne.n	8004f5c <_strtod_l+0x124>
 8004e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e8e:	9702      	str	r7, [sp, #8]
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	ab1c      	add	r3, sp, #112	; 0x70
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4a89      	ldr	r2, [pc, #548]	; (80050bc <_strtod_l+0x284>)
 8004e98:	ab1d      	add	r3, sp, #116	; 0x74
 8004e9a:	a91b      	add	r1, sp, #108	; 0x6c
 8004e9c:	4658      	mov	r0, fp
 8004e9e:	f001 fde9 	bl	8006a74 <__gethex>
 8004ea2:	f010 0407 	ands.w	r4, r0, #7
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	d005      	beq.n	8004eb6 <_strtod_l+0x7e>
 8004eaa:	2c06      	cmp	r4, #6
 8004eac:	d12b      	bne.n	8004f06 <_strtod_l+0xce>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8004eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8004eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 85a6 	bne.w	8005a0a <_strtod_l+0xbd2>
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec0:	b1e3      	cbz	r3, 8004efc <_strtod_l+0xc4>
 8004ec2:	464a      	mov	r2, r9
 8004ec4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	b021      	add	sp, #132	; 0x84
 8004ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed2:	2a2b      	cmp	r2, #43	; 0x2b
 8004ed4:	d015      	beq.n	8004f02 <_strtod_l+0xca>
 8004ed6:	2a2d      	cmp	r2, #45	; 0x2d
 8004ed8:	d004      	beq.n	8004ee4 <_strtod_l+0xac>
 8004eda:	2a20      	cmp	r2, #32
 8004edc:	d1ca      	bne.n	8004e74 <_strtod_l+0x3c>
 8004ede:	3301      	adds	r3, #1
 8004ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ee2:	e7bf      	b.n	8004e64 <_strtod_l+0x2c>
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1c2      	bne.n	8004e78 <_strtod_l+0x40>
 8004ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ef4:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 8585 	bne.w	8005a06 <_strtod_l+0xbce>
 8004efc:	464a      	mov	r2, r9
 8004efe:	4653      	mov	r3, sl
 8004f00:	e7e2      	b.n	8004ec8 <_strtod_l+0x90>
 8004f02:	2200      	movs	r2, #0
 8004f04:	e7ef      	b.n	8004ee6 <_strtod_l+0xae>
 8004f06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004f08:	b13a      	cbz	r2, 8004f1a <_strtod_l+0xe2>
 8004f0a:	2135      	movs	r1, #53	; 0x35
 8004f0c:	a81e      	add	r0, sp, #120	; 0x78
 8004f0e:	f002 fca2 	bl	8007856 <__copybits>
 8004f12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f14:	4658      	mov	r0, fp
 8004f16:	f002 f915 	bl	8007144 <_Bfree>
 8004f1a:	3c01      	subs	r4, #1
 8004f1c:	2c04      	cmp	r4, #4
 8004f1e:	d806      	bhi.n	8004f2e <_strtod_l+0xf6>
 8004f20:	e8df f004 	tbb	[pc, r4]
 8004f24:	1714030a 	.word	0x1714030a
 8004f28:	0a          	.byte	0x0a
 8004f29:	00          	.byte	0x00
 8004f2a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004f2e:	0731      	lsls	r1, r6, #28
 8004f30:	d5c1      	bpl.n	8004eb6 <_strtod_l+0x7e>
 8004f32:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004f36:	e7be      	b.n	8004eb6 <_strtod_l+0x7e>
 8004f38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004f3a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004f3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f46:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004f4a:	e7f0      	b.n	8004f2e <_strtod_l+0xf6>
 8004f4c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80050c0 <_strtod_l+0x288>
 8004f50:	e7ed      	b.n	8004f2e <_strtod_l+0xf6>
 8004f52:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004f56:	f04f 39ff 	mov.w	r9, #4294967295
 8004f5a:	e7e8      	b.n	8004f2e <_strtod_l+0xf6>
 8004f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d0f9      	beq.n	8004f5c <_strtod_l+0x124>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0a4      	beq.n	8004eb6 <_strtod_l+0x7e>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	2500      	movs	r5, #0
 8004f70:	220a      	movs	r2, #10
 8004f72:	9307      	str	r3, [sp, #28]
 8004f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f76:	9506      	str	r5, [sp, #24]
 8004f78:	9308      	str	r3, [sp, #32]
 8004f7a:	9504      	str	r5, [sp, #16]
 8004f7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004f7e:	7807      	ldrb	r7, [r0, #0]
 8004f80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004f84:	b2d9      	uxtb	r1, r3
 8004f86:	2909      	cmp	r1, #9
 8004f88:	d929      	bls.n	8004fde <_strtod_l+0x1a6>
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	f8d8 1000 	ldr.w	r1, [r8]
 8004f90:	f003 fb35 	bl	80085fe <strncmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d031      	beq.n	8004ffc <_strtod_l+0x1c4>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	9c04      	ldr	r4, [sp, #16]
 8004fa0:	9005      	str	r0, [sp, #20]
 8004fa2:	2b65      	cmp	r3, #101	; 0x65
 8004fa4:	d001      	beq.n	8004faa <_strtod_l+0x172>
 8004fa6:	2b45      	cmp	r3, #69	; 0x45
 8004fa8:	d114      	bne.n	8004fd4 <_strtod_l+0x19c>
 8004faa:	b924      	cbnz	r4, 8004fb6 <_strtod_l+0x17e>
 8004fac:	b910      	cbnz	r0, 8004fb4 <_strtod_l+0x17c>
 8004fae:	9b07      	ldr	r3, [sp, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d09e      	beq.n	8004ef2 <_strtod_l+0xba>
 8004fb4:	2400      	movs	r4, #0
 8004fb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004fb8:	1c73      	adds	r3, r6, #1
 8004fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fbc:	7873      	ldrb	r3, [r6, #1]
 8004fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8004fc0:	d078      	beq.n	80050b4 <_strtod_l+0x27c>
 8004fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8004fc4:	d070      	beq.n	80050a8 <_strtod_l+0x270>
 8004fc6:	f04f 0c00 	mov.w	ip, #0
 8004fca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004fce:	2f09      	cmp	r7, #9
 8004fd0:	d97c      	bls.n	80050cc <_strtod_l+0x294>
 8004fd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004fd4:	f04f 0e00 	mov.w	lr, #0
 8004fd8:	e09a      	b.n	8005110 <_strtod_l+0x2d8>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e7c7      	b.n	8004f6e <_strtod_l+0x136>
 8004fde:	9904      	ldr	r1, [sp, #16]
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	2908      	cmp	r1, #8
 8004fe4:	bfd7      	itett	le
 8004fe6:	9906      	ldrle	r1, [sp, #24]
 8004fe8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004fec:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ff0:	9306      	strle	r3, [sp, #24]
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	9304      	str	r3, [sp, #16]
 8004ffa:	e7bf      	b.n	8004f7c <_strtod_l+0x144>
 8004ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ffe:	191a      	adds	r2, r3, r4
 8005000:	921b      	str	r2, [sp, #108]	; 0x6c
 8005002:	9a04      	ldr	r2, [sp, #16]
 8005004:	5d1b      	ldrb	r3, [r3, r4]
 8005006:	2a00      	cmp	r2, #0
 8005008:	d037      	beq.n	800507a <_strtod_l+0x242>
 800500a:	4602      	mov	r2, r0
 800500c:	9c04      	ldr	r4, [sp, #16]
 800500e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005012:	2909      	cmp	r1, #9
 8005014:	d913      	bls.n	800503e <_strtod_l+0x206>
 8005016:	2101      	movs	r1, #1
 8005018:	9105      	str	r1, [sp, #20]
 800501a:	e7c2      	b.n	8004fa2 <_strtod_l+0x16a>
 800501c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800501e:	3001      	adds	r0, #1
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	921b      	str	r2, [sp, #108]	; 0x6c
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	2b30      	cmp	r3, #48	; 0x30
 8005028:	d0f8      	beq.n	800501c <_strtod_l+0x1e4>
 800502a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800502e:	2a08      	cmp	r2, #8
 8005030:	f200 84f0 	bhi.w	8005a14 <_strtod_l+0xbdc>
 8005034:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005036:	9208      	str	r2, [sp, #32]
 8005038:	4602      	mov	r2, r0
 800503a:	2000      	movs	r0, #0
 800503c:	4604      	mov	r4, r0
 800503e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005042:	f100 0101 	add.w	r1, r0, #1
 8005046:	d012      	beq.n	800506e <_strtod_l+0x236>
 8005048:	440a      	add	r2, r1
 800504a:	270a      	movs	r7, #10
 800504c:	4621      	mov	r1, r4
 800504e:	eb00 0c04 	add.w	ip, r0, r4
 8005052:	458c      	cmp	ip, r1
 8005054:	d113      	bne.n	800507e <_strtod_l+0x246>
 8005056:	1821      	adds	r1, r4, r0
 8005058:	2908      	cmp	r1, #8
 800505a:	f104 0401 	add.w	r4, r4, #1
 800505e:	4404      	add	r4, r0
 8005060:	dc19      	bgt.n	8005096 <_strtod_l+0x25e>
 8005062:	210a      	movs	r1, #10
 8005064:	9b06      	ldr	r3, [sp, #24]
 8005066:	fb01 e303 	mla	r3, r1, r3, lr
 800506a:	9306      	str	r3, [sp, #24]
 800506c:	2100      	movs	r1, #0
 800506e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005070:	1c58      	adds	r0, r3, #1
 8005072:	901b      	str	r0, [sp, #108]	; 0x6c
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	4608      	mov	r0, r1
 8005078:	e7c9      	b.n	800500e <_strtod_l+0x1d6>
 800507a:	9804      	ldr	r0, [sp, #16]
 800507c:	e7d3      	b.n	8005026 <_strtod_l+0x1ee>
 800507e:	2908      	cmp	r1, #8
 8005080:	f101 0101 	add.w	r1, r1, #1
 8005084:	dc03      	bgt.n	800508e <_strtod_l+0x256>
 8005086:	9b06      	ldr	r3, [sp, #24]
 8005088:	437b      	muls	r3, r7
 800508a:	9306      	str	r3, [sp, #24]
 800508c:	e7e1      	b.n	8005052 <_strtod_l+0x21a>
 800508e:	2910      	cmp	r1, #16
 8005090:	bfd8      	it	le
 8005092:	437d      	mulle	r5, r7
 8005094:	e7dd      	b.n	8005052 <_strtod_l+0x21a>
 8005096:	2c10      	cmp	r4, #16
 8005098:	bfdc      	itt	le
 800509a:	210a      	movle	r1, #10
 800509c:	fb01 e505 	mlale	r5, r1, r5, lr
 80050a0:	e7e4      	b.n	800506c <_strtod_l+0x234>
 80050a2:	2301      	movs	r3, #1
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	e781      	b.n	8004fac <_strtod_l+0x174>
 80050a8:	f04f 0c01 	mov.w	ip, #1
 80050ac:	1cb3      	adds	r3, r6, #2
 80050ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80050b0:	78b3      	ldrb	r3, [r6, #2]
 80050b2:	e78a      	b.n	8004fca <_strtod_l+0x192>
 80050b4:	f04f 0c00 	mov.w	ip, #0
 80050b8:	e7f8      	b.n	80050ac <_strtod_l+0x274>
 80050ba:	bf00      	nop
 80050bc:	0800ae84 	.word	0x0800ae84
 80050c0:	7ff00000 	.word	0x7ff00000
 80050c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c6:	1c5f      	adds	r7, r3, #1
 80050c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d0f9      	beq.n	80050c4 <_strtod_l+0x28c>
 80050d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80050d4:	2f08      	cmp	r7, #8
 80050d6:	f63f af7d 	bhi.w	8004fd4 <_strtod_l+0x19c>
 80050da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80050de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
 80050e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050e4:	1c5f      	adds	r7, r3, #1
 80050e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80050ee:	f1b8 0f09 	cmp.w	r8, #9
 80050f2:	d937      	bls.n	8005164 <_strtod_l+0x32c>
 80050f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f6:	1a7f      	subs	r7, r7, r1
 80050f8:	2f08      	cmp	r7, #8
 80050fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80050fe:	dc37      	bgt.n	8005170 <_strtod_l+0x338>
 8005100:	45be      	cmp	lr, r7
 8005102:	bfa8      	it	ge
 8005104:	46be      	movge	lr, r7
 8005106:	f1bc 0f00 	cmp.w	ip, #0
 800510a:	d001      	beq.n	8005110 <_strtod_l+0x2d8>
 800510c:	f1ce 0e00 	rsb	lr, lr, #0
 8005110:	2c00      	cmp	r4, #0
 8005112:	d151      	bne.n	80051b8 <_strtod_l+0x380>
 8005114:	2800      	cmp	r0, #0
 8005116:	f47f aece 	bne.w	8004eb6 <_strtod_l+0x7e>
 800511a:	9a07      	ldr	r2, [sp, #28]
 800511c:	2a00      	cmp	r2, #0
 800511e:	f47f aeca 	bne.w	8004eb6 <_strtod_l+0x7e>
 8005122:	9a05      	ldr	r2, [sp, #20]
 8005124:	2a00      	cmp	r2, #0
 8005126:	f47f aee4 	bne.w	8004ef2 <_strtod_l+0xba>
 800512a:	2b4e      	cmp	r3, #78	; 0x4e
 800512c:	d027      	beq.n	800517e <_strtod_l+0x346>
 800512e:	dc21      	bgt.n	8005174 <_strtod_l+0x33c>
 8005130:	2b49      	cmp	r3, #73	; 0x49
 8005132:	f47f aede 	bne.w	8004ef2 <_strtod_l+0xba>
 8005136:	49a4      	ldr	r1, [pc, #656]	; (80053c8 <_strtod_l+0x590>)
 8005138:	a81b      	add	r0, sp, #108	; 0x6c
 800513a:	f001 fecf 	bl	8006edc <__match>
 800513e:	2800      	cmp	r0, #0
 8005140:	f43f aed7 	beq.w	8004ef2 <_strtod_l+0xba>
 8005144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005146:	49a1      	ldr	r1, [pc, #644]	; (80053cc <_strtod_l+0x594>)
 8005148:	3b01      	subs	r3, #1
 800514a:	a81b      	add	r0, sp, #108	; 0x6c
 800514c:	931b      	str	r3, [sp, #108]	; 0x6c
 800514e:	f001 fec5 	bl	8006edc <__match>
 8005152:	b910      	cbnz	r0, 800515a <_strtod_l+0x322>
 8005154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005156:	3301      	adds	r3, #1
 8005158:	931b      	str	r3, [sp, #108]	; 0x6c
 800515a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80053e0 <_strtod_l+0x5a8>
 800515e:	f04f 0900 	mov.w	r9, #0
 8005162:	e6a8      	b.n	8004eb6 <_strtod_l+0x7e>
 8005164:	210a      	movs	r1, #10
 8005166:	fb01 3e0e 	mla	lr, r1, lr, r3
 800516a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800516e:	e7b8      	b.n	80050e2 <_strtod_l+0x2aa>
 8005170:	46be      	mov	lr, r7
 8005172:	e7c8      	b.n	8005106 <_strtod_l+0x2ce>
 8005174:	2b69      	cmp	r3, #105	; 0x69
 8005176:	d0de      	beq.n	8005136 <_strtod_l+0x2fe>
 8005178:	2b6e      	cmp	r3, #110	; 0x6e
 800517a:	f47f aeba 	bne.w	8004ef2 <_strtod_l+0xba>
 800517e:	4994      	ldr	r1, [pc, #592]	; (80053d0 <_strtod_l+0x598>)
 8005180:	a81b      	add	r0, sp, #108	; 0x6c
 8005182:	f001 feab 	bl	8006edc <__match>
 8005186:	2800      	cmp	r0, #0
 8005188:	f43f aeb3 	beq.w	8004ef2 <_strtod_l+0xba>
 800518c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b28      	cmp	r3, #40	; 0x28
 8005192:	d10e      	bne.n	80051b2 <_strtod_l+0x37a>
 8005194:	aa1e      	add	r2, sp, #120	; 0x78
 8005196:	498f      	ldr	r1, [pc, #572]	; (80053d4 <_strtod_l+0x59c>)
 8005198:	a81b      	add	r0, sp, #108	; 0x6c
 800519a:	f001 feb3 	bl	8006f04 <__hexnan>
 800519e:	2805      	cmp	r0, #5
 80051a0:	d107      	bne.n	80051b2 <_strtod_l+0x37a>
 80051a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80051a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80051ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80051b0:	e681      	b.n	8004eb6 <_strtod_l+0x7e>
 80051b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80053e8 <_strtod_l+0x5b0>
 80051b6:	e7d2      	b.n	800515e <_strtod_l+0x326>
 80051b8:	ebae 0302 	sub.w	r3, lr, r2
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	9806      	ldr	r0, [sp, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bf08      	it	eq
 80051c6:	4623      	moveq	r3, r4
 80051c8:	2c10      	cmp	r4, #16
 80051ca:	9304      	str	r3, [sp, #16]
 80051cc:	46a0      	mov	r8, r4
 80051ce:	bfa8      	it	ge
 80051d0:	f04f 0810 	movge.w	r8, #16
 80051d4:	f7fb f906 	bl	80003e4 <__aeabi_ui2d>
 80051d8:	2c09      	cmp	r4, #9
 80051da:	4681      	mov	r9, r0
 80051dc:	468a      	mov	sl, r1
 80051de:	dc13      	bgt.n	8005208 <_strtod_l+0x3d0>
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f43f ae67 	beq.w	8004eb6 <_strtod_l+0x7e>
 80051e8:	9b07      	ldr	r3, [sp, #28]
 80051ea:	dd7e      	ble.n	80052ea <_strtod_l+0x4b2>
 80051ec:	2b16      	cmp	r3, #22
 80051ee:	dc65      	bgt.n	80052bc <_strtod_l+0x484>
 80051f0:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <_strtod_l+0x5a0>)
 80051f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80051f6:	464a      	mov	r2, r9
 80051f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80051fc:	4653      	mov	r3, sl
 80051fe:	f7fb f96b 	bl	80004d8 <__aeabi_dmul>
 8005202:	4681      	mov	r9, r0
 8005204:	468a      	mov	sl, r1
 8005206:	e656      	b.n	8004eb6 <_strtod_l+0x7e>
 8005208:	4b73      	ldr	r3, [pc, #460]	; (80053d8 <_strtod_l+0x5a0>)
 800520a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800520e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005212:	f7fb f961 	bl	80004d8 <__aeabi_dmul>
 8005216:	4606      	mov	r6, r0
 8005218:	4628      	mov	r0, r5
 800521a:	460f      	mov	r7, r1
 800521c:	f7fb f8e2 	bl	80003e4 <__aeabi_ui2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4630      	mov	r0, r6
 8005226:	4639      	mov	r1, r7
 8005228:	f7fa ffa0 	bl	800016c <__adddf3>
 800522c:	2c0f      	cmp	r4, #15
 800522e:	4681      	mov	r9, r0
 8005230:	468a      	mov	sl, r1
 8005232:	ddd5      	ble.n	80051e0 <_strtod_l+0x3a8>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	eba4 0808 	sub.w	r8, r4, r8
 800523a:	4498      	add	r8, r3
 800523c:	f1b8 0f00 	cmp.w	r8, #0
 8005240:	f340 809a 	ble.w	8005378 <_strtod_l+0x540>
 8005244:	f018 030f 	ands.w	r3, r8, #15
 8005248:	d00a      	beq.n	8005260 <_strtod_l+0x428>
 800524a:	4963      	ldr	r1, [pc, #396]	; (80053d8 <_strtod_l+0x5a0>)
 800524c:	464a      	mov	r2, r9
 800524e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005256:	4653      	mov	r3, sl
 8005258:	f7fb f93e 	bl	80004d8 <__aeabi_dmul>
 800525c:	4681      	mov	r9, r0
 800525e:	468a      	mov	sl, r1
 8005260:	f038 080f 	bics.w	r8, r8, #15
 8005264:	d077      	beq.n	8005356 <_strtod_l+0x51e>
 8005266:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800526a:	dd4b      	ble.n	8005304 <_strtod_l+0x4cc>
 800526c:	f04f 0800 	mov.w	r8, #0
 8005270:	f8cd 8010 	str.w	r8, [sp, #16]
 8005274:	f8cd 8020 	str.w	r8, [sp, #32]
 8005278:	f8cd 8018 	str.w	r8, [sp, #24]
 800527c:	2322      	movs	r3, #34	; 0x22
 800527e:	f04f 0900 	mov.w	r9, #0
 8005282:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80053e0 <_strtod_l+0x5a8>
 8005286:	f8cb 3000 	str.w	r3, [fp]
 800528a:	9b08      	ldr	r3, [sp, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f43f ae12 	beq.w	8004eb6 <_strtod_l+0x7e>
 8005292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005294:	4658      	mov	r0, fp
 8005296:	f001 ff55 	bl	8007144 <_Bfree>
 800529a:	9906      	ldr	r1, [sp, #24]
 800529c:	4658      	mov	r0, fp
 800529e:	f001 ff51 	bl	8007144 <_Bfree>
 80052a2:	9904      	ldr	r1, [sp, #16]
 80052a4:	4658      	mov	r0, fp
 80052a6:	f001 ff4d 	bl	8007144 <_Bfree>
 80052aa:	9908      	ldr	r1, [sp, #32]
 80052ac:	4658      	mov	r0, fp
 80052ae:	f001 ff49 	bl	8007144 <_Bfree>
 80052b2:	4641      	mov	r1, r8
 80052b4:	4658      	mov	r0, fp
 80052b6:	f001 ff45 	bl	8007144 <_Bfree>
 80052ba:	e5fc      	b.n	8004eb6 <_strtod_l+0x7e>
 80052bc:	9a07      	ldr	r2, [sp, #28]
 80052be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80052c2:	4293      	cmp	r3, r2
 80052c4:	dbb6      	blt.n	8005234 <_strtod_l+0x3fc>
 80052c6:	4d44      	ldr	r5, [pc, #272]	; (80053d8 <_strtod_l+0x5a0>)
 80052c8:	f1c4 040f 	rsb	r4, r4, #15
 80052cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80052d0:	464a      	mov	r2, r9
 80052d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052d6:	4653      	mov	r3, sl
 80052d8:	f7fb f8fe 	bl	80004d8 <__aeabi_dmul>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	1b1c      	subs	r4, r3, r4
 80052e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052e8:	e789      	b.n	80051fe <_strtod_l+0x3c6>
 80052ea:	f113 0f16 	cmn.w	r3, #22
 80052ee:	dba1      	blt.n	8005234 <_strtod_l+0x3fc>
 80052f0:	4a39      	ldr	r2, [pc, #228]	; (80053d8 <_strtod_l+0x5a0>)
 80052f2:	4648      	mov	r0, r9
 80052f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80052f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80052fc:	4651      	mov	r1, sl
 80052fe:	f7fb fa15 	bl	800072c <__aeabi_ddiv>
 8005302:	e77e      	b.n	8005202 <_strtod_l+0x3ca>
 8005304:	2300      	movs	r3, #0
 8005306:	4648      	mov	r0, r9
 8005308:	4651      	mov	r1, sl
 800530a:	461d      	mov	r5, r3
 800530c:	4e33      	ldr	r6, [pc, #204]	; (80053dc <_strtod_l+0x5a4>)
 800530e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005312:	f1b8 0f01 	cmp.w	r8, #1
 8005316:	dc21      	bgt.n	800535c <_strtod_l+0x524>
 8005318:	b10b      	cbz	r3, 800531e <_strtod_l+0x4e6>
 800531a:	4681      	mov	r9, r0
 800531c:	468a      	mov	sl, r1
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <_strtod_l+0x5a4>)
 8005320:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005328:	464a      	mov	r2, r9
 800532a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800532e:	4653      	mov	r3, sl
 8005330:	f7fb f8d2 	bl	80004d8 <__aeabi_dmul>
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <_strtod_l+0x5a8>)
 8005336:	460a      	mov	r2, r1
 8005338:	400b      	ands	r3, r1
 800533a:	492a      	ldr	r1, [pc, #168]	; (80053e4 <_strtod_l+0x5ac>)
 800533c:	4681      	mov	r9, r0
 800533e:	428b      	cmp	r3, r1
 8005340:	d894      	bhi.n	800526c <_strtod_l+0x434>
 8005342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005346:	428b      	cmp	r3, r1
 8005348:	bf86      	itte	hi
 800534a:	f04f 39ff 	movhi.w	r9, #4294967295
 800534e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80053ec <_strtod_l+0x5b4>
 8005352:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8005356:	2300      	movs	r3, #0
 8005358:	9305      	str	r3, [sp, #20]
 800535a:	e07b      	b.n	8005454 <_strtod_l+0x61c>
 800535c:	f018 0f01 	tst.w	r8, #1
 8005360:	d006      	beq.n	8005370 <_strtod_l+0x538>
 8005362:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	2301      	movs	r3, #1
 8005370:	3501      	adds	r5, #1
 8005372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005376:	e7cc      	b.n	8005312 <_strtod_l+0x4da>
 8005378:	d0ed      	beq.n	8005356 <_strtod_l+0x51e>
 800537a:	f1c8 0800 	rsb	r8, r8, #0
 800537e:	f018 020f 	ands.w	r2, r8, #15
 8005382:	d00a      	beq.n	800539a <_strtod_l+0x562>
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <_strtod_l+0x5a0>)
 8005386:	4648      	mov	r0, r9
 8005388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800538c:	4651      	mov	r1, sl
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fb f9cb 	bl	800072c <__aeabi_ddiv>
 8005396:	4681      	mov	r9, r0
 8005398:	468a      	mov	sl, r1
 800539a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800539e:	d0da      	beq.n	8005356 <_strtod_l+0x51e>
 80053a0:	f1b8 0f1f 	cmp.w	r8, #31
 80053a4:	dd24      	ble.n	80053f0 <_strtod_l+0x5b8>
 80053a6:	f04f 0800 	mov.w	r8, #0
 80053aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80053ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80053b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b6:	2322      	movs	r3, #34	; 0x22
 80053b8:	f04f 0900 	mov.w	r9, #0
 80053bc:	f04f 0a00 	mov.w	sl, #0
 80053c0:	f8cb 3000 	str.w	r3, [fp]
 80053c4:	e761      	b.n	800528a <_strtod_l+0x452>
 80053c6:	bf00      	nop
 80053c8:	0800ae51 	.word	0x0800ae51
 80053cc:	0800aedb 	.word	0x0800aedb
 80053d0:	0800ae59 	.word	0x0800ae59
 80053d4:	0800ae98 	.word	0x0800ae98
 80053d8:	0800af80 	.word	0x0800af80
 80053dc:	0800af58 	.word	0x0800af58
 80053e0:	7ff00000 	.word	0x7ff00000
 80053e4:	7ca00000 	.word	0x7ca00000
 80053e8:	fff80000 	.word	0xfff80000
 80053ec:	7fefffff 	.word	0x7fefffff
 80053f0:	f018 0310 	ands.w	r3, r8, #16
 80053f4:	bf18      	it	ne
 80053f6:	236a      	movne	r3, #106	; 0x6a
 80053f8:	4648      	mov	r0, r9
 80053fa:	9305      	str	r3, [sp, #20]
 80053fc:	4651      	mov	r1, sl
 80053fe:	2300      	movs	r3, #0
 8005400:	4da1      	ldr	r5, [pc, #644]	; (8005688 <_strtod_l+0x850>)
 8005402:	f1b8 0f00 	cmp.w	r8, #0
 8005406:	f300 8113 	bgt.w	8005630 <_strtod_l+0x7f8>
 800540a:	b10b      	cbz	r3, 8005410 <_strtod_l+0x5d8>
 800540c:	4681      	mov	r9, r0
 800540e:	468a      	mov	sl, r1
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	b1bb      	cbz	r3, 8005444 <_strtod_l+0x60c>
 8005414:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005418:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800541c:	2b00      	cmp	r3, #0
 800541e:	4651      	mov	r1, sl
 8005420:	dd10      	ble.n	8005444 <_strtod_l+0x60c>
 8005422:	2b1f      	cmp	r3, #31
 8005424:	f340 8110 	ble.w	8005648 <_strtod_l+0x810>
 8005428:	2b34      	cmp	r3, #52	; 0x34
 800542a:	bfd8      	it	le
 800542c:	f04f 32ff 	movle.w	r2, #4294967295
 8005430:	f04f 0900 	mov.w	r9, #0
 8005434:	bfcf      	iteee	gt
 8005436:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800543a:	3b20      	suble	r3, #32
 800543c:	fa02 f303 	lslle.w	r3, r2, r3
 8005440:	ea03 0a01 	andle.w	sl, r3, r1
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4648      	mov	r0, r9
 800544a:	4651      	mov	r1, sl
 800544c:	f7fb faac 	bl	80009a8 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d1a8      	bne.n	80053a6 <_strtod_l+0x56e>
 8005454:	9b06      	ldr	r3, [sp, #24]
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	9908      	ldr	r1, [sp, #32]
 800545c:	4623      	mov	r3, r4
 800545e:	4658      	mov	r0, fp
 8005460:	f001 fec2 	bl	80071e8 <__s2b>
 8005464:	9008      	str	r0, [sp, #32]
 8005466:	2800      	cmp	r0, #0
 8005468:	f43f af00 	beq.w	800526c <_strtod_l+0x434>
 800546c:	9a07      	ldr	r2, [sp, #28]
 800546e:	9b07      	ldr	r3, [sp, #28]
 8005470:	2a00      	cmp	r2, #0
 8005472:	f1c3 0300 	rsb	r3, r3, #0
 8005476:	bfa8      	it	ge
 8005478:	2300      	movge	r3, #0
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	930e      	str	r3, [sp, #56]	; 0x38
 8005480:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005484:	9316      	str	r3, [sp, #88]	; 0x58
 8005486:	f8cd 8010 	str.w	r8, [sp, #16]
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	4658      	mov	r0, fp
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	f001 fe24 	bl	80070dc <_Balloc>
 8005494:	9006      	str	r0, [sp, #24]
 8005496:	2800      	cmp	r0, #0
 8005498:	f43f aef0 	beq.w	800527c <_strtod_l+0x444>
 800549c:	9b08      	ldr	r3, [sp, #32]
 800549e:	300c      	adds	r0, #12
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	f103 010c 	add.w	r1, r3, #12
 80054a6:	3202      	adds	r2, #2
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	f7fe fd9d 	bl	8003fe8 <memcpy>
 80054ae:	ab1e      	add	r3, sp, #120	; 0x78
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	ab1d      	add	r3, sp, #116	; 0x74
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	464a      	mov	r2, r9
 80054b8:	4653      	mov	r3, sl
 80054ba:	4658      	mov	r0, fp
 80054bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80054c0:	f002 f94c 	bl	800775c <__d2b>
 80054c4:	901c      	str	r0, [sp, #112]	; 0x70
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f aed8 	beq.w	800527c <_strtod_l+0x444>
 80054cc:	2101      	movs	r1, #1
 80054ce:	4658      	mov	r0, fp
 80054d0:	f001 ff16 	bl	8007300 <__i2b>
 80054d4:	9004      	str	r0, [sp, #16]
 80054d6:	4603      	mov	r3, r0
 80054d8:	2800      	cmp	r0, #0
 80054da:	f43f aecf 	beq.w	800527c <_strtod_l+0x444>
 80054de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80054e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	bfab      	itete	ge
 80054e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80054e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80054ea:	18ee      	addge	r6, r5, r3
 80054ec:	1b5c      	sublt	r4, r3, r5
 80054ee:	9b05      	ldr	r3, [sp, #20]
 80054f0:	bfa8      	it	ge
 80054f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80054f4:	eba5 0503 	sub.w	r5, r5, r3
 80054f8:	4415      	add	r5, r2
 80054fa:	4b64      	ldr	r3, [pc, #400]	; (800568c <_strtod_l+0x854>)
 80054fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005500:	bfb8      	it	lt
 8005502:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005504:	429d      	cmp	r5, r3
 8005506:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800550a:	f280 80af 	bge.w	800566c <_strtod_l+0x834>
 800550e:	1b5b      	subs	r3, r3, r5
 8005510:	2b1f      	cmp	r3, #31
 8005512:	eba2 0203 	sub.w	r2, r2, r3
 8005516:	f04f 0701 	mov.w	r7, #1
 800551a:	f300 809c 	bgt.w	8005656 <_strtod_l+0x81e>
 800551e:	2500      	movs	r5, #0
 8005520:	fa07 f303 	lsl.w	r3, r7, r3
 8005524:	930f      	str	r3, [sp, #60]	; 0x3c
 8005526:	18b7      	adds	r7, r6, r2
 8005528:	9b05      	ldr	r3, [sp, #20]
 800552a:	42be      	cmp	r6, r7
 800552c:	4414      	add	r4, r2
 800552e:	441c      	add	r4, r3
 8005530:	4633      	mov	r3, r6
 8005532:	bfa8      	it	ge
 8005534:	463b      	movge	r3, r7
 8005536:	42a3      	cmp	r3, r4
 8005538:	bfa8      	it	ge
 800553a:	4623      	movge	r3, r4
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfc2      	ittt	gt
 8005540:	1aff      	subgt	r7, r7, r3
 8005542:	1ae4      	subgt	r4, r4, r3
 8005544:	1af6      	subgt	r6, r6, r3
 8005546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005548:	b1bb      	cbz	r3, 800557a <_strtod_l+0x742>
 800554a:	461a      	mov	r2, r3
 800554c:	9904      	ldr	r1, [sp, #16]
 800554e:	4658      	mov	r0, fp
 8005550:	f001 ff74 	bl	800743c <__pow5mult>
 8005554:	9004      	str	r0, [sp, #16]
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f ae90 	beq.w	800527c <_strtod_l+0x444>
 800555c:	4601      	mov	r1, r0
 800555e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005560:	4658      	mov	r0, fp
 8005562:	f001 fed6 	bl	8007312 <__multiply>
 8005566:	9009      	str	r0, [sp, #36]	; 0x24
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f ae87 	beq.w	800527c <_strtod_l+0x444>
 800556e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005570:	4658      	mov	r0, fp
 8005572:	f001 fde7 	bl	8007144 <_Bfree>
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	931c      	str	r3, [sp, #112]	; 0x70
 800557a:	2f00      	cmp	r7, #0
 800557c:	dc7a      	bgt.n	8005674 <_strtod_l+0x83c>
 800557e:	9b07      	ldr	r3, [sp, #28]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd08      	ble.n	8005596 <_strtod_l+0x75e>
 8005584:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005586:	9906      	ldr	r1, [sp, #24]
 8005588:	4658      	mov	r0, fp
 800558a:	f001 ff57 	bl	800743c <__pow5mult>
 800558e:	9006      	str	r0, [sp, #24]
 8005590:	2800      	cmp	r0, #0
 8005592:	f43f ae73 	beq.w	800527c <_strtod_l+0x444>
 8005596:	2c00      	cmp	r4, #0
 8005598:	dd08      	ble.n	80055ac <_strtod_l+0x774>
 800559a:	4622      	mov	r2, r4
 800559c:	9906      	ldr	r1, [sp, #24]
 800559e:	4658      	mov	r0, fp
 80055a0:	f001 ff9a 	bl	80074d8 <__lshift>
 80055a4:	9006      	str	r0, [sp, #24]
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f43f ae68 	beq.w	800527c <_strtod_l+0x444>
 80055ac:	2e00      	cmp	r6, #0
 80055ae:	dd08      	ble.n	80055c2 <_strtod_l+0x78a>
 80055b0:	4632      	mov	r2, r6
 80055b2:	9904      	ldr	r1, [sp, #16]
 80055b4:	4658      	mov	r0, fp
 80055b6:	f001 ff8f 	bl	80074d8 <__lshift>
 80055ba:	9004      	str	r0, [sp, #16]
 80055bc:	2800      	cmp	r0, #0
 80055be:	f43f ae5d 	beq.w	800527c <_strtod_l+0x444>
 80055c2:	9a06      	ldr	r2, [sp, #24]
 80055c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80055c6:	4658      	mov	r0, fp
 80055c8:	f001 fff4 	bl	80075b4 <__mdiff>
 80055cc:	4680      	mov	r8, r0
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f43f ae54 	beq.w	800527c <_strtod_l+0x444>
 80055d4:	2400      	movs	r4, #0
 80055d6:	68c3      	ldr	r3, [r0, #12]
 80055d8:	9904      	ldr	r1, [sp, #16]
 80055da:	60c4      	str	r4, [r0, #12]
 80055dc:	930c      	str	r3, [sp, #48]	; 0x30
 80055de:	f001 ffcf 	bl	8007580 <__mcmp>
 80055e2:	42a0      	cmp	r0, r4
 80055e4:	da54      	bge.n	8005690 <_strtod_l+0x858>
 80055e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055e8:	b9f3      	cbnz	r3, 8005628 <_strtod_l+0x7f0>
 80055ea:	f1b9 0f00 	cmp.w	r9, #0
 80055ee:	d11b      	bne.n	8005628 <_strtod_l+0x7f0>
 80055f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80055f4:	b9c3      	cbnz	r3, 8005628 <_strtod_l+0x7f0>
 80055f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80055fa:	0d1b      	lsrs	r3, r3, #20
 80055fc:	051b      	lsls	r3, r3, #20
 80055fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005602:	d911      	bls.n	8005628 <_strtod_l+0x7f0>
 8005604:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005608:	b91b      	cbnz	r3, 8005612 <_strtod_l+0x7da>
 800560a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800560e:	2b01      	cmp	r3, #1
 8005610:	dd0a      	ble.n	8005628 <_strtod_l+0x7f0>
 8005612:	4641      	mov	r1, r8
 8005614:	2201      	movs	r2, #1
 8005616:	4658      	mov	r0, fp
 8005618:	f001 ff5e 	bl	80074d8 <__lshift>
 800561c:	9904      	ldr	r1, [sp, #16]
 800561e:	4680      	mov	r8, r0
 8005620:	f001 ffae 	bl	8007580 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	dc68      	bgt.n	80056fa <_strtod_l+0x8c2>
 8005628:	9b05      	ldr	r3, [sp, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d172      	bne.n	8005714 <_strtod_l+0x8dc>
 800562e:	e630      	b.n	8005292 <_strtod_l+0x45a>
 8005630:	f018 0f01 	tst.w	r8, #1
 8005634:	d004      	beq.n	8005640 <_strtod_l+0x808>
 8005636:	e9d5 2300 	ldrd	r2, r3, [r5]
 800563a:	f7fa ff4d 	bl	80004d8 <__aeabi_dmul>
 800563e:	2301      	movs	r3, #1
 8005640:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005644:	3508      	adds	r5, #8
 8005646:	e6dc      	b.n	8005402 <_strtod_l+0x5ca>
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	ea03 0909 	and.w	r9, r3, r9
 8005654:	e6f6      	b.n	8005444 <_strtod_l+0x60c>
 8005656:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800565a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800565e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005662:	35e2      	adds	r5, #226	; 0xe2
 8005664:	fa07 f505 	lsl.w	r5, r7, r5
 8005668:	970f      	str	r7, [sp, #60]	; 0x3c
 800566a:	e75c      	b.n	8005526 <_strtod_l+0x6ee>
 800566c:	2301      	movs	r3, #1
 800566e:	2500      	movs	r5, #0
 8005670:	930f      	str	r3, [sp, #60]	; 0x3c
 8005672:	e758      	b.n	8005526 <_strtod_l+0x6ee>
 8005674:	463a      	mov	r2, r7
 8005676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005678:	4658      	mov	r0, fp
 800567a:	f001 ff2d 	bl	80074d8 <__lshift>
 800567e:	901c      	str	r0, [sp, #112]	; 0x70
 8005680:	2800      	cmp	r0, #0
 8005682:	f47f af7c 	bne.w	800557e <_strtod_l+0x746>
 8005686:	e5f9      	b.n	800527c <_strtod_l+0x444>
 8005688:	0800aeb0 	.word	0x0800aeb0
 800568c:	fffffc02 	.word	0xfffffc02
 8005690:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005694:	f040 8089 	bne.w	80057aa <_strtod_l+0x972>
 8005698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800569a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800569e:	b342      	cbz	r2, 80056f2 <_strtod_l+0x8ba>
 80056a0:	4aaf      	ldr	r2, [pc, #700]	; (8005960 <_strtod_l+0xb28>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d156      	bne.n	8005754 <_strtod_l+0x91c>
 80056a6:	9b05      	ldr	r3, [sp, #20]
 80056a8:	4648      	mov	r0, r9
 80056aa:	b1eb      	cbz	r3, 80056e8 <_strtod_l+0x8b0>
 80056ac:	4653      	mov	r3, sl
 80056ae:	4aad      	ldr	r2, [pc, #692]	; (8005964 <_strtod_l+0xb2c>)
 80056b0:	f04f 31ff 	mov.w	r1, #4294967295
 80056b4:	401a      	ands	r2, r3
 80056b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80056ba:	d818      	bhi.n	80056ee <_strtod_l+0x8b6>
 80056bc:	0d12      	lsrs	r2, r2, #20
 80056be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	4298      	cmp	r0, r3
 80056c8:	d144      	bne.n	8005754 <_strtod_l+0x91c>
 80056ca:	4ba7      	ldr	r3, [pc, #668]	; (8005968 <_strtod_l+0xb30>)
 80056cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d102      	bne.n	80056d8 <_strtod_l+0x8a0>
 80056d2:	3001      	adds	r0, #1
 80056d4:	f43f add2 	beq.w	800527c <_strtod_l+0x444>
 80056d8:	4ba2      	ldr	r3, [pc, #648]	; (8005964 <_strtod_l+0xb2c>)
 80056da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056dc:	f04f 0900 	mov.w	r9, #0
 80056e0:	401a      	ands	r2, r3
 80056e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80056e6:	e79f      	b.n	8005628 <_strtod_l+0x7f0>
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	e7eb      	b.n	80056c6 <_strtod_l+0x88e>
 80056ee:	460b      	mov	r3, r1
 80056f0:	e7e9      	b.n	80056c6 <_strtod_l+0x88e>
 80056f2:	bb7b      	cbnz	r3, 8005754 <_strtod_l+0x91c>
 80056f4:	f1b9 0f00 	cmp.w	r9, #0
 80056f8:	d12c      	bne.n	8005754 <_strtod_l+0x91c>
 80056fa:	9905      	ldr	r1, [sp, #20]
 80056fc:	4653      	mov	r3, sl
 80056fe:	4a99      	ldr	r2, [pc, #612]	; (8005964 <_strtod_l+0xb2c>)
 8005700:	b1f1      	cbz	r1, 8005740 <_strtod_l+0x908>
 8005702:	ea02 010a 	and.w	r1, r2, sl
 8005706:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800570a:	dc19      	bgt.n	8005740 <_strtod_l+0x908>
 800570c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005710:	f77f ae51 	ble.w	80053b6 <_strtod_l+0x57e>
 8005714:	2300      	movs	r3, #0
 8005716:	4a95      	ldr	r2, [pc, #596]	; (800596c <_strtod_l+0xb34>)
 8005718:	4648      	mov	r0, r9
 800571a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800571e:	4651      	mov	r1, sl
 8005720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005724:	f7fa fed8 	bl	80004d8 <__aeabi_dmul>
 8005728:	4681      	mov	r9, r0
 800572a:	468a      	mov	sl, r1
 800572c:	2900      	cmp	r1, #0
 800572e:	f47f adb0 	bne.w	8005292 <_strtod_l+0x45a>
 8005732:	2800      	cmp	r0, #0
 8005734:	f47f adad 	bne.w	8005292 <_strtod_l+0x45a>
 8005738:	2322      	movs	r3, #34	; 0x22
 800573a:	f8cb 3000 	str.w	r3, [fp]
 800573e:	e5a8      	b.n	8005292 <_strtod_l+0x45a>
 8005740:	4013      	ands	r3, r2
 8005742:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005746:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800574a:	f04f 39ff 	mov.w	r9, #4294967295
 800574e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005752:	e769      	b.n	8005628 <_strtod_l+0x7f0>
 8005754:	b19d      	cbz	r5, 800577e <_strtod_l+0x946>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	421d      	tst	r5, r3
 800575a:	f43f af65 	beq.w	8005628 <_strtod_l+0x7f0>
 800575e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005760:	9a05      	ldr	r2, [sp, #20]
 8005762:	4648      	mov	r0, r9
 8005764:	4651      	mov	r1, sl
 8005766:	b173      	cbz	r3, 8005786 <_strtod_l+0x94e>
 8005768:	f7ff fb45 	bl	8004df6 <sulp>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005774:	f7fa fcfa 	bl	800016c <__adddf3>
 8005778:	4681      	mov	r9, r0
 800577a:	468a      	mov	sl, r1
 800577c:	e754      	b.n	8005628 <_strtod_l+0x7f0>
 800577e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005780:	ea13 0f09 	tst.w	r3, r9
 8005784:	e7e9      	b.n	800575a <_strtod_l+0x922>
 8005786:	f7ff fb36 	bl	8004df6 <sulp>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005792:	f7fa fce9 	bl	8000168 <__aeabi_dsub>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4681      	mov	r9, r0
 800579c:	468a      	mov	sl, r1
 800579e:	f7fb f903 	bl	80009a8 <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f47f ae07 	bne.w	80053b6 <_strtod_l+0x57e>
 80057a8:	e73e      	b.n	8005628 <_strtod_l+0x7f0>
 80057aa:	9904      	ldr	r1, [sp, #16]
 80057ac:	4640      	mov	r0, r8
 80057ae:	f002 f824 	bl	80077fa <__ratio>
 80057b2:	2200      	movs	r2, #0
 80057b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057b8:	4606      	mov	r6, r0
 80057ba:	460f      	mov	r7, r1
 80057bc:	f7fb f908 	bl	80009d0 <__aeabi_dcmple>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d075      	beq.n	80058b0 <_strtod_l+0xa78>
 80057c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d047      	beq.n	800585a <_strtod_l+0xa22>
 80057ca:	2600      	movs	r6, #0
 80057cc:	4f68      	ldr	r7, [pc, #416]	; (8005970 <_strtod_l+0xb38>)
 80057ce:	4d68      	ldr	r5, [pc, #416]	; (8005970 <_strtod_l+0xb38>)
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	0d1b      	lsrs	r3, r3, #20
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	930f      	str	r3, [sp, #60]	; 0x3c
 80057dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057de:	4b65      	ldr	r3, [pc, #404]	; (8005974 <_strtod_l+0xb3c>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	f040 80cf 	bne.w	8005984 <_strtod_l+0xb4c>
 80057e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	4648      	mov	r0, r9
 80057f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80057f6:	4651      	mov	r1, sl
 80057f8:	f001 ff3a 	bl	8007670 <__ulp>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	464a      	mov	r2, r9
 800580a:	4653      	mov	r3, sl
 800580c:	f7fa fcae 	bl	800016c <__adddf3>
 8005810:	460b      	mov	r3, r1
 8005812:	4954      	ldr	r1, [pc, #336]	; (8005964 <_strtod_l+0xb2c>)
 8005814:	4a58      	ldr	r2, [pc, #352]	; (8005978 <_strtod_l+0xb40>)
 8005816:	4019      	ands	r1, r3
 8005818:	4291      	cmp	r1, r2
 800581a:	4681      	mov	r9, r0
 800581c:	d95e      	bls.n	80058dc <_strtod_l+0xaa4>
 800581e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005820:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005824:	4293      	cmp	r3, r2
 8005826:	d103      	bne.n	8005830 <_strtod_l+0x9f8>
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	3301      	adds	r3, #1
 800582c:	f43f ad26 	beq.w	800527c <_strtod_l+0x444>
 8005830:	f04f 39ff 	mov.w	r9, #4294967295
 8005834:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005968 <_strtod_l+0xb30>
 8005838:	991c      	ldr	r1, [sp, #112]	; 0x70
 800583a:	4658      	mov	r0, fp
 800583c:	f001 fc82 	bl	8007144 <_Bfree>
 8005840:	9906      	ldr	r1, [sp, #24]
 8005842:	4658      	mov	r0, fp
 8005844:	f001 fc7e 	bl	8007144 <_Bfree>
 8005848:	9904      	ldr	r1, [sp, #16]
 800584a:	4658      	mov	r0, fp
 800584c:	f001 fc7a 	bl	8007144 <_Bfree>
 8005850:	4641      	mov	r1, r8
 8005852:	4658      	mov	r0, fp
 8005854:	f001 fc76 	bl	8007144 <_Bfree>
 8005858:	e617      	b.n	800548a <_strtod_l+0x652>
 800585a:	f1b9 0f00 	cmp.w	r9, #0
 800585e:	d119      	bne.n	8005894 <_strtod_l+0xa5c>
 8005860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005866:	b9e3      	cbnz	r3, 80058a2 <_strtod_l+0xa6a>
 8005868:	2200      	movs	r2, #0
 800586a:	4b41      	ldr	r3, [pc, #260]	; (8005970 <_strtod_l+0xb38>)
 800586c:	4630      	mov	r0, r6
 800586e:	4639      	mov	r1, r7
 8005870:	f7fb f8a4 	bl	80009bc <__aeabi_dcmplt>
 8005874:	b9c8      	cbnz	r0, 80058aa <_strtod_l+0xa72>
 8005876:	2200      	movs	r2, #0
 8005878:	4b40      	ldr	r3, [pc, #256]	; (800597c <_strtod_l+0xb44>)
 800587a:	4630      	mov	r0, r6
 800587c:	4639      	mov	r1, r7
 800587e:	f7fa fe2b 	bl	80004d8 <__aeabi_dmul>
 8005882:	4604      	mov	r4, r0
 8005884:	460d      	mov	r5, r1
 8005886:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800588a:	9418      	str	r4, [sp, #96]	; 0x60
 800588c:	9319      	str	r3, [sp, #100]	; 0x64
 800588e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005892:	e79d      	b.n	80057d0 <_strtod_l+0x998>
 8005894:	f1b9 0f01 	cmp.w	r9, #1
 8005898:	d103      	bne.n	80058a2 <_strtod_l+0xa6a>
 800589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	f43f ad8a 	beq.w	80053b6 <_strtod_l+0x57e>
 80058a2:	2600      	movs	r6, #0
 80058a4:	4f36      	ldr	r7, [pc, #216]	; (8005980 <_strtod_l+0xb48>)
 80058a6:	2400      	movs	r4, #0
 80058a8:	e791      	b.n	80057ce <_strtod_l+0x996>
 80058aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80058ac:	4d33      	ldr	r5, [pc, #204]	; (800597c <_strtod_l+0xb44>)
 80058ae:	e7ea      	b.n	8005886 <_strtod_l+0xa4e>
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <_strtod_l+0xb44>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fa fe0e 	bl	80004d8 <__aeabi_dmul>
 80058bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058be:	4604      	mov	r4, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	b933      	cbnz	r3, 80058d2 <_strtod_l+0xa9a>
 80058c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058c8:	9010      	str	r0, [sp, #64]	; 0x40
 80058ca:	9311      	str	r3, [sp, #68]	; 0x44
 80058cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058d0:	e77e      	b.n	80057d0 <_strtod_l+0x998>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80058da:	e7f7      	b.n	80058cc <_strtod_l+0xa94>
 80058dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80058e0:	9b05      	ldr	r3, [sp, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1a8      	bne.n	8005838 <_strtod_l+0xa00>
 80058e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058ea:	0d1b      	lsrs	r3, r3, #20
 80058ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058ee:	051b      	lsls	r3, r3, #20
 80058f0:	429a      	cmp	r2, r3
 80058f2:	4656      	mov	r6, sl
 80058f4:	d1a0      	bne.n	8005838 <_strtod_l+0xa00>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7fb f89d 	bl	8000a38 <__aeabi_d2iz>
 80058fe:	f7fa fd81 	bl	8000404 <__aeabi_i2d>
 8005902:	460b      	mov	r3, r1
 8005904:	4602      	mov	r2, r0
 8005906:	4629      	mov	r1, r5
 8005908:	4620      	mov	r0, r4
 800590a:	f7fa fc2d 	bl	8000168 <__aeabi_dsub>
 800590e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005910:	4604      	mov	r4, r0
 8005912:	460d      	mov	r5, r1
 8005914:	b933      	cbnz	r3, 8005924 <_strtod_l+0xaec>
 8005916:	f1b9 0f00 	cmp.w	r9, #0
 800591a:	d103      	bne.n	8005924 <_strtod_l+0xaec>
 800591c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005920:	2e00      	cmp	r6, #0
 8005922:	d06a      	beq.n	80059fa <_strtod_l+0xbc2>
 8005924:	a30a      	add	r3, pc, #40	; (adr r3, 8005950 <_strtod_l+0xb18>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fb f845 	bl	80009bc <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	f47f acad 	bne.w	8005292 <_strtod_l+0x45a>
 8005938:	a307      	add	r3, pc, #28	; (adr r3, 8005958 <_strtod_l+0xb20>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f859 	bl	80009f8 <__aeabi_dcmpgt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af76 	beq.w	8005838 <_strtod_l+0xa00>
 800594c:	e4a1      	b.n	8005292 <_strtod_l+0x45a>
 800594e:	bf00      	nop
 8005950:	94a03595 	.word	0x94a03595
 8005954:	3fdfffff 	.word	0x3fdfffff
 8005958:	35afe535 	.word	0x35afe535
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	000fffff 	.word	0x000fffff
 8005964:	7ff00000 	.word	0x7ff00000
 8005968:	7fefffff 	.word	0x7fefffff
 800596c:	39500000 	.word	0x39500000
 8005970:	3ff00000 	.word	0x3ff00000
 8005974:	7fe00000 	.word	0x7fe00000
 8005978:	7c9fffff 	.word	0x7c9fffff
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	bff00000 	.word	0xbff00000
 8005984:	9b05      	ldr	r3, [sp, #20]
 8005986:	b313      	cbz	r3, 80059ce <_strtod_l+0xb96>
 8005988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800598a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800598e:	d81e      	bhi.n	80059ce <_strtod_l+0xb96>
 8005990:	a325      	add	r3, pc, #148	; (adr r3, 8005a28 <_strtod_l+0xbf0>)
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fb f819 	bl	80009d0 <__aeabi_dcmple>
 800599e:	b190      	cbz	r0, 80059c6 <_strtod_l+0xb8e>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fb f870 	bl	8000a88 <__aeabi_d2uiz>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bf08      	it	eq
 80059ac:	2001      	moveq	r0, #1
 80059ae:	f7fa fd19 	bl	80003e4 <__aeabi_ui2d>
 80059b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	b9d3      	cbnz	r3, 80059f0 <_strtod_l+0xbb8>
 80059ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059be:	9012      	str	r0, [sp, #72]	; 0x48
 80059c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80059c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80059c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80059cc:	1a9f      	subs	r7, r3, r2
 80059ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059d2:	f001 fe4d 	bl	8007670 <__ulp>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4630      	mov	r0, r6
 80059dc:	4639      	mov	r1, r7
 80059de:	f7fa fd7b 	bl	80004d8 <__aeabi_dmul>
 80059e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059e6:	f7fa fbc1 	bl	800016c <__adddf3>
 80059ea:	4681      	mov	r9, r0
 80059ec:	468a      	mov	sl, r1
 80059ee:	e777      	b.n	80058e0 <_strtod_l+0xaa8>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80059f8:	e7e3      	b.n	80059c2 <_strtod_l+0xb8a>
 80059fa:	a30d      	add	r3, pc, #52	; (adr r3, 8005a30 <_strtod_l+0xbf8>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa ffdc 	bl	80009bc <__aeabi_dcmplt>
 8005a04:	e79f      	b.n	8005946 <_strtod_l+0xb0e>
 8005a06:	2300      	movs	r3, #0
 8005a08:	930d      	str	r3, [sp, #52]	; 0x34
 8005a0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	f7ff ba55 	b.w	8004ebe <_strtod_l+0x86>
 8005a14:	2b65      	cmp	r3, #101	; 0x65
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f43f ab42 	beq.w	80050a2 <_strtod_l+0x26a>
 8005a1e:	2101      	movs	r1, #1
 8005a20:	4614      	mov	r4, r2
 8005a22:	9105      	str	r1, [sp, #20]
 8005a24:	f7ff babf 	b.w	8004fa6 <_strtod_l+0x16e>
 8005a28:	ffc00000 	.word	0xffc00000
 8005a2c:	41dfffff 	.word	0x41dfffff
 8005a30:	94a03595 	.word	0x94a03595
 8005a34:	3fcfffff 	.word	0x3fcfffff

08005a38 <_strtod_r>:
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <_strtod_r+0x18>)
 8005a3a:	b410      	push	{r4}
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4c05      	ldr	r4, [pc, #20]	; (8005a54 <_strtod_r+0x1c>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf08      	it	eq
 8005a46:	4623      	moveq	r3, r4
 8005a48:	bc10      	pop	{r4}
 8005a4a:	f7ff b9f5 	b.w	8004e38 <_strtod_l>
 8005a4e:	bf00      	nop
 8005a50:	20000024 	.word	0x20000024
 8005a54:	20000088 	.word	0x20000088

08005a58 <_strtol_l.isra.0>:
 8005a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	4689      	mov	r9, r1
 8005a60:	4692      	mov	sl, r2
 8005a62:	461e      	mov	r6, r3
 8005a64:	460f      	mov	r7, r1
 8005a66:	463d      	mov	r5, r7
 8005a68:	9808      	ldr	r0, [sp, #32]
 8005a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a6e:	f001 fad9 	bl	8007024 <__locale_ctype_ptr_l>
 8005a72:	4420      	add	r0, r4
 8005a74:	7843      	ldrb	r3, [r0, #1]
 8005a76:	f013 0308 	ands.w	r3, r3, #8
 8005a7a:	d132      	bne.n	8005ae2 <_strtol_l.isra.0+0x8a>
 8005a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8005a7e:	d132      	bne.n	8005ae6 <_strtol_l.isra.0+0x8e>
 8005a80:	2201      	movs	r2, #1
 8005a82:	787c      	ldrb	r4, [r7, #1]
 8005a84:	1cbd      	adds	r5, r7, #2
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d05d      	beq.n	8005b46 <_strtol_l.isra.0+0xee>
 8005a8a:	2e10      	cmp	r6, #16
 8005a8c:	d109      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005a8e:	2c30      	cmp	r4, #48	; 0x30
 8005a90:	d107      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005a92:	782b      	ldrb	r3, [r5, #0]
 8005a94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a98:	2b58      	cmp	r3, #88	; 0x58
 8005a9a:	d14f      	bne.n	8005b3c <_strtol_l.isra.0+0xe4>
 8005a9c:	2610      	movs	r6, #16
 8005a9e:	786c      	ldrb	r4, [r5, #1]
 8005aa0:	3502      	adds	r5, #2
 8005aa2:	2a00      	cmp	r2, #0
 8005aa4:	bf14      	ite	ne
 8005aa6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005aaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005aae:	2700      	movs	r7, #0
 8005ab0:	fbb1 fcf6 	udiv	ip, r1, r6
 8005ab4:	4638      	mov	r0, r7
 8005ab6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005aba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d817      	bhi.n	8005af2 <_strtol_l.isra.0+0x9a>
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	dd23      	ble.n	8005b10 <_strtol_l.isra.0+0xb8>
 8005ac8:	1c7b      	adds	r3, r7, #1
 8005aca:	d007      	beq.n	8005adc <_strtol_l.isra.0+0x84>
 8005acc:	4584      	cmp	ip, r0
 8005ace:	d31c      	bcc.n	8005b0a <_strtol_l.isra.0+0xb2>
 8005ad0:	d101      	bne.n	8005ad6 <_strtol_l.isra.0+0x7e>
 8005ad2:	45a6      	cmp	lr, r4
 8005ad4:	db19      	blt.n	8005b0a <_strtol_l.isra.0+0xb2>
 8005ad6:	2701      	movs	r7, #1
 8005ad8:	fb00 4006 	mla	r0, r0, r6, r4
 8005adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ae0:	e7eb      	b.n	8005aba <_strtol_l.isra.0+0x62>
 8005ae2:	462f      	mov	r7, r5
 8005ae4:	e7bf      	b.n	8005a66 <_strtol_l.isra.0+0xe>
 8005ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8005ae8:	bf04      	itt	eq
 8005aea:	1cbd      	addeq	r5, r7, #2
 8005aec:	787c      	ldrbeq	r4, [r7, #1]
 8005aee:	461a      	mov	r2, r3
 8005af0:	e7c9      	b.n	8005a86 <_strtol_l.isra.0+0x2e>
 8005af2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005af6:	2b19      	cmp	r3, #25
 8005af8:	d801      	bhi.n	8005afe <_strtol_l.isra.0+0xa6>
 8005afa:	3c37      	subs	r4, #55	; 0x37
 8005afc:	e7e2      	b.n	8005ac4 <_strtol_l.isra.0+0x6c>
 8005afe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005b02:	2b19      	cmp	r3, #25
 8005b04:	d804      	bhi.n	8005b10 <_strtol_l.isra.0+0xb8>
 8005b06:	3c57      	subs	r4, #87	; 0x57
 8005b08:	e7dc      	b.n	8005ac4 <_strtol_l.isra.0+0x6c>
 8005b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0e:	e7e5      	b.n	8005adc <_strtol_l.isra.0+0x84>
 8005b10:	1c7b      	adds	r3, r7, #1
 8005b12:	d108      	bne.n	8005b26 <_strtol_l.isra.0+0xce>
 8005b14:	2322      	movs	r3, #34	; 0x22
 8005b16:	4608      	mov	r0, r1
 8005b18:	f8c8 3000 	str.w	r3, [r8]
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	d107      	bne.n	8005b32 <_strtol_l.isra.0+0xda>
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	b102      	cbz	r2, 8005b2a <_strtol_l.isra.0+0xd2>
 8005b28:	4240      	negs	r0, r0
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	d0f8      	beq.n	8005b22 <_strtol_l.isra.0+0xca>
 8005b30:	b10f      	cbz	r7, 8005b36 <_strtol_l.isra.0+0xde>
 8005b32:	f105 39ff 	add.w	r9, r5, #4294967295
 8005b36:	f8ca 9000 	str.w	r9, [sl]
 8005b3a:	e7f2      	b.n	8005b22 <_strtol_l.isra.0+0xca>
 8005b3c:	2430      	movs	r4, #48	; 0x30
 8005b3e:	2e00      	cmp	r6, #0
 8005b40:	d1af      	bne.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005b42:	2608      	movs	r6, #8
 8005b44:	e7ad      	b.n	8005aa2 <_strtol_l.isra.0+0x4a>
 8005b46:	2c30      	cmp	r4, #48	; 0x30
 8005b48:	d0a3      	beq.n	8005a92 <_strtol_l.isra.0+0x3a>
 8005b4a:	260a      	movs	r6, #10
 8005b4c:	e7a9      	b.n	8005aa2 <_strtol_l.isra.0+0x4a>
	...

08005b50 <_strtol_r>:
 8005b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b52:	4c06      	ldr	r4, [pc, #24]	; (8005b6c <_strtol_r+0x1c>)
 8005b54:	4d06      	ldr	r5, [pc, #24]	; (8005b70 <_strtol_r+0x20>)
 8005b56:	6824      	ldr	r4, [r4, #0]
 8005b58:	6a24      	ldr	r4, [r4, #32]
 8005b5a:	2c00      	cmp	r4, #0
 8005b5c:	bf08      	it	eq
 8005b5e:	462c      	moveq	r4, r5
 8005b60:	9400      	str	r4, [sp, #0]
 8005b62:	f7ff ff79 	bl	8005a58 <_strtol_l.isra.0>
 8005b66:	b003      	add	sp, #12
 8005b68:	bd30      	pop	{r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000024 	.word	0x20000024
 8005b70:	20000088 	.word	0x20000088

08005b74 <_write_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4c05      	ldr	r4, [pc, #20]	; (8005b94 <_write_r+0x20>)
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fd f960 	bl	8002e48 <_write>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_write_r+0x1e>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_write_r+0x1e>
 8005b90:	602b      	str	r3, [r5, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	200008d0 	.word	0x200008d0

08005b98 <_close_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4c05      	ldr	r4, [pc, #20]	; (8005bb4 <_close_r+0x1c>)
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	f7fe f99e 	bl	8003ee4 <_close>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_close_r+0x1a>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_close_r+0x1a>
 8005bb0:	602b      	str	r3, [r5, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200008d0 	.word	0x200008d0

08005bb8 <quorem>:
 8005bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	6903      	ldr	r3, [r0, #16]
 8005bbe:	690c      	ldr	r4, [r1, #16]
 8005bc0:	4680      	mov	r8, r0
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	f2c0 8084 	blt.w	8005cd0 <quorem+0x118>
 8005bc8:	3c01      	subs	r4, #1
 8005bca:	f101 0714 	add.w	r7, r1, #20
 8005bce:	f100 0614 	add.w	r6, r0, #20
 8005bd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005bd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005bda:	3501      	adds	r5, #1
 8005bdc:	fbb0 f5f5 	udiv	r5, r0, r5
 8005be0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005be4:	eb06 030c 	add.w	r3, r6, ip
 8005be8:	eb07 090c 	add.w	r9, r7, ip
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	b39d      	cbz	r5, 8005c58 <quorem+0xa0>
 8005bf0:	f04f 0a00 	mov.w	sl, #0
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	46b6      	mov	lr, r6
 8005bf8:	46d3      	mov	fp, sl
 8005bfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bfe:	b293      	uxth	r3, r2
 8005c00:	fb05 a303 	mla	r3, r5, r3, sl
 8005c04:	0c12      	lsrs	r2, r2, #16
 8005c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c0a:	fb05 a202 	mla	r2, r5, r2, sl
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	ebab 0303 	sub.w	r3, fp, r3
 8005c14:	f8de b000 	ldr.w	fp, [lr]
 8005c18:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005c1c:	fa1f fb8b 	uxth.w	fp, fp
 8005c20:	445b      	add	r3, fp
 8005c22:	fa1f fb82 	uxth.w	fp, r2
 8005c26:	f8de 2000 	ldr.w	r2, [lr]
 8005c2a:	4581      	cmp	r9, r0
 8005c2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c3a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005c3e:	f84e 3b04 	str.w	r3, [lr], #4
 8005c42:	d2da      	bcs.n	8005bfa <quorem+0x42>
 8005c44:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c48:	b933      	cbnz	r3, 8005c58 <quorem+0xa0>
 8005c4a:	9b01      	ldr	r3, [sp, #4]
 8005c4c:	3b04      	subs	r3, #4
 8005c4e:	429e      	cmp	r6, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	d331      	bcc.n	8005cb8 <quorem+0x100>
 8005c54:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f001 fc91 	bl	8007580 <__mcmp>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	db26      	blt.n	8005cb0 <quorem+0xf8>
 8005c62:	4630      	mov	r0, r6
 8005c64:	f04f 0c00 	mov.w	ip, #0
 8005c68:	3501      	adds	r5, #1
 8005c6a:	f857 1b04 	ldr.w	r1, [r7], #4
 8005c6e:	f8d0 e000 	ldr.w	lr, [r0]
 8005c72:	b28b      	uxth	r3, r1
 8005c74:	ebac 0303 	sub.w	r3, ip, r3
 8005c78:	fa1f f28e 	uxth.w	r2, lr
 8005c7c:	4413      	add	r3, r2
 8005c7e:	0c0a      	lsrs	r2, r1, #16
 8005c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c8e:	45b9      	cmp	r9, r7
 8005c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c94:	f840 3b04 	str.w	r3, [r0], #4
 8005c98:	d2e7      	bcs.n	8005c6a <quorem+0xb2>
 8005c9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005c9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ca2:	b92a      	cbnz	r2, 8005cb0 <quorem+0xf8>
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	429e      	cmp	r6, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	d30b      	bcc.n	8005cc4 <quorem+0x10c>
 8005cac:	f8c8 4010 	str.w	r4, [r8, #16]
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	b003      	add	sp, #12
 8005cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	3b04      	subs	r3, #4
 8005cbc:	2a00      	cmp	r2, #0
 8005cbe:	d1c9      	bne.n	8005c54 <quorem+0x9c>
 8005cc0:	3c01      	subs	r4, #1
 8005cc2:	e7c4      	b.n	8005c4e <quorem+0x96>
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	3b04      	subs	r3, #4
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	d1ef      	bne.n	8005cac <quorem+0xf4>
 8005ccc:	3c01      	subs	r4, #1
 8005cce:	e7ea      	b.n	8005ca6 <quorem+0xee>
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	e7ee      	b.n	8005cb2 <quorem+0xfa>
 8005cd4:	0000      	movs	r0, r0
	...

08005cd8 <_dtoa_r>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	4616      	mov	r6, r2
 8005cde:	461f      	mov	r7, r3
 8005ce0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ce2:	b095      	sub	sp, #84	; 0x54
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005cea:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005cee:	b93d      	cbnz	r5, 8005d00 <_dtoa_r+0x28>
 8005cf0:	2010      	movs	r0, #16
 8005cf2:	f001 f9cb 	bl	800708c <malloc>
 8005cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cfc:	6005      	str	r5, [r0, #0]
 8005cfe:	60c5      	str	r5, [r0, #12]
 8005d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	b151      	cbz	r1, 8005d1c <_dtoa_r+0x44>
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4093      	lsls	r3, r2
 8005d0c:	604a      	str	r2, [r1, #4]
 8005d0e:	608b      	str	r3, [r1, #8]
 8005d10:	4620      	mov	r0, r4
 8005d12:	f001 fa17 	bl	8007144 <_Bfree>
 8005d16:	2200      	movs	r2, #0
 8005d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	1e3b      	subs	r3, r7, #0
 8005d1e:	bfaf      	iteee	ge
 8005d20:	2300      	movge	r3, #0
 8005d22:	2201      	movlt	r2, #1
 8005d24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	9303      	strlt	r3, [sp, #12]
 8005d2a:	bfac      	ite	ge
 8005d2c:	f8c8 3000 	strge.w	r3, [r8]
 8005d30:	f8c8 2000 	strlt.w	r2, [r8]
 8005d34:	4bae      	ldr	r3, [pc, #696]	; (8005ff0 <_dtoa_r+0x318>)
 8005d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d3a:	ea33 0308 	bics.w	r3, r3, r8
 8005d3e:	d11b      	bne.n	8005d78 <_dtoa_r+0xa0>
 8005d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	b923      	cbnz	r3, 8005d56 <_dtoa_r+0x7e>
 8005d4c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f000 8545 	beq.w	80067e0 <_dtoa_r+0xb08>
 8005d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d58:	b953      	cbnz	r3, 8005d70 <_dtoa_r+0x98>
 8005d5a:	4ba6      	ldr	r3, [pc, #664]	; (8005ff4 <_dtoa_r+0x31c>)
 8005d5c:	e021      	b.n	8005da2 <_dtoa_r+0xca>
 8005d5e:	4ba6      	ldr	r3, [pc, #664]	; (8005ff8 <_dtoa_r+0x320>)
 8005d60:	9306      	str	r3, [sp, #24]
 8005d62:	3308      	adds	r3, #8
 8005d64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	9806      	ldr	r0, [sp, #24]
 8005d6a:	b015      	add	sp, #84	; 0x54
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	4ba0      	ldr	r3, [pc, #640]	; (8005ff4 <_dtoa_r+0x31c>)
 8005d72:	9306      	str	r3, [sp, #24]
 8005d74:	3303      	adds	r3, #3
 8005d76:	e7f5      	b.n	8005d64 <_dtoa_r+0x8c>
 8005d78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8005d88:	4682      	mov	sl, r0
 8005d8a:	b160      	cbz	r0, 8005da6 <_dtoa_r+0xce>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8520 	beq.w	80067da <_dtoa_r+0xb02>
 8005d9a:	4b98      	ldr	r3, [pc, #608]	; (8005ffc <_dtoa_r+0x324>)
 8005d9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	9306      	str	r3, [sp, #24]
 8005da4:	e7e0      	b.n	8005d68 <_dtoa_r+0x90>
 8005da6:	ab12      	add	r3, sp, #72	; 0x48
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	ab13      	add	r3, sp, #76	; 0x4c
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	4632      	mov	r2, r6
 8005db0:	463b      	mov	r3, r7
 8005db2:	4620      	mov	r0, r4
 8005db4:	f001 fcd2 	bl	800775c <__d2b>
 8005db8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005dbc:	4683      	mov	fp, r0
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	d07d      	beq.n	8005ebe <_dtoa_r+0x1e6>
 8005dc2:	46b0      	mov	r8, r6
 8005dc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dc8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005dcc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005dd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005dd4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4b89      	ldr	r3, [pc, #548]	; (8006000 <_dtoa_r+0x328>)
 8005ddc:	4640      	mov	r0, r8
 8005dde:	4649      	mov	r1, r9
 8005de0:	f7fa f9c2 	bl	8000168 <__aeabi_dsub>
 8005de4:	a37c      	add	r3, pc, #496	; (adr r3, 8005fd8 <_dtoa_r+0x300>)
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f7fa fb75 	bl	80004d8 <__aeabi_dmul>
 8005dee:	a37c      	add	r3, pc, #496	; (adr r3, 8005fe0 <_dtoa_r+0x308>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa f9ba 	bl	800016c <__adddf3>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	460f      	mov	r7, r1
 8005dfe:	f7fa fb01 	bl	8000404 <__aeabi_i2d>
 8005e02:	a379      	add	r3, pc, #484	; (adr r3, 8005fe8 <_dtoa_r+0x310>)
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f7fa fb66 	bl	80004d8 <__aeabi_dmul>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa f9aa 	bl	800016c <__adddf3>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	f7fa fe0c 	bl	8000a38 <__aeabi_d2iz>
 8005e20:	2200      	movs	r2, #0
 8005e22:	4682      	mov	sl, r0
 8005e24:	2300      	movs	r3, #0
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7fa fdc7 	bl	80009bc <__aeabi_dcmplt>
 8005e2e:	b148      	cbz	r0, 8005e44 <_dtoa_r+0x16c>
 8005e30:	4650      	mov	r0, sl
 8005e32:	f7fa fae7 	bl	8000404 <__aeabi_i2d>
 8005e36:	4632      	mov	r2, r6
 8005e38:	463b      	mov	r3, r7
 8005e3a:	f7fa fdb5 	bl	80009a8 <__aeabi_dcmpeq>
 8005e3e:	b908      	cbnz	r0, 8005e44 <_dtoa_r+0x16c>
 8005e40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e44:	f1ba 0f16 	cmp.w	sl, #22
 8005e48:	d85a      	bhi.n	8005f00 <_dtoa_r+0x228>
 8005e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e4e:	496d      	ldr	r1, [pc, #436]	; (8006004 <_dtoa_r+0x32c>)
 8005e50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e58:	f7fa fdce 	bl	80009f8 <__aeabi_dcmpgt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d051      	beq.n	8005f04 <_dtoa_r+0x22c>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e66:	930d      	str	r3, [sp, #52]	; 0x34
 8005e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e6a:	1b5d      	subs	r5, r3, r5
 8005e6c:	1e6b      	subs	r3, r5, #1
 8005e6e:	9307      	str	r3, [sp, #28]
 8005e70:	bf43      	ittte	mi
 8005e72:	2300      	movmi	r3, #0
 8005e74:	f1c5 0901 	rsbmi	r9, r5, #1
 8005e78:	9307      	strmi	r3, [sp, #28]
 8005e7a:	f04f 0900 	movpl.w	r9, #0
 8005e7e:	f1ba 0f00 	cmp.w	sl, #0
 8005e82:	db41      	blt.n	8005f08 <_dtoa_r+0x230>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005e8a:	4453      	add	r3, sl
 8005e8c:	9307      	str	r3, [sp, #28]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9308      	str	r3, [sp, #32]
 8005e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	f200 808f 	bhi.w	8005fb8 <_dtoa_r+0x2e0>
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	bfc4      	itt	gt
 8005e9e:	3b04      	subgt	r3, #4
 8005ea0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005ea2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ea4:	bfc8      	it	gt
 8005ea6:	2500      	movgt	r5, #0
 8005ea8:	f1a3 0302 	sub.w	r3, r3, #2
 8005eac:	bfd8      	it	le
 8005eae:	2501      	movle	r5, #1
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	f200 808d 	bhi.w	8005fd0 <_dtoa_r+0x2f8>
 8005eb6:	e8df f003 	tbb	[pc, r3]
 8005eba:	7d7b      	.short	0x7d7b
 8005ebc:	6f2f      	.short	0x6f2f
 8005ebe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005ec2:	441d      	add	r5, r3
 8005ec4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005ec8:	2820      	cmp	r0, #32
 8005eca:	dd13      	ble.n	8005ef4 <_dtoa_r+0x21c>
 8005ecc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	fa08 f800 	lsl.w	r8, r8, r0
 8005ed6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005eda:	fa23 f000 	lsr.w	r0, r3, r0
 8005ede:	ea48 0000 	orr.w	r0, r8, r0
 8005ee2:	f7fa fa7f 	bl	80003e4 <__aeabi_ui2d>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4680      	mov	r8, r0
 8005eea:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005eee:	3d01      	subs	r5, #1
 8005ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8005ef2:	e771      	b.n	8005dd8 <_dtoa_r+0x100>
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	f1c0 0020 	rsb	r0, r0, #32
 8005efa:	fa03 f000 	lsl.w	r0, r3, r0
 8005efe:	e7f0      	b.n	8005ee2 <_dtoa_r+0x20a>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e7b0      	b.n	8005e66 <_dtoa_r+0x18e>
 8005f04:	900d      	str	r0, [sp, #52]	; 0x34
 8005f06:	e7af      	b.n	8005e68 <_dtoa_r+0x190>
 8005f08:	f1ca 0300 	rsb	r3, sl, #0
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	eba9 090a 	sub.w	r9, r9, sl
 8005f14:	930c      	str	r3, [sp, #48]	; 0x30
 8005f16:	e7bc      	b.n	8005e92 <_dtoa_r+0x1ba>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dd74      	ble.n	800600c <_dtoa_r+0x334>
 8005f22:	4698      	mov	r8, r3
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	2200      	movs	r2, #0
 8005f28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f2a:	6072      	str	r2, [r6, #4]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	f102 0014 	add.w	r0, r2, #20
 8005f32:	4298      	cmp	r0, r3
 8005f34:	6871      	ldr	r1, [r6, #4]
 8005f36:	d96e      	bls.n	8006016 <_dtoa_r+0x33e>
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f001 f8cf 	bl	80070dc <_Balloc>
 8005f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f40:	6030      	str	r0, [r6, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f1b8 0f0e 	cmp.w	r8, #14
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	f200 80ed 	bhi.w	8006128 <_dtoa_r+0x450>
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	f000 80ea 	beq.w	8006128 <_dtoa_r+0x450>
 8005f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f58:	f1ba 0f00 	cmp.w	sl, #0
 8005f5c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005f60:	dd77      	ble.n	8006052 <_dtoa_r+0x37a>
 8005f62:	4a28      	ldr	r2, [pc, #160]	; (8006004 <_dtoa_r+0x32c>)
 8005f64:	f00a 030f 	and.w	r3, sl, #15
 8005f68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005f6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f70:	06f0      	lsls	r0, r6, #27
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f7a:	d568      	bpl.n	800604e <_dtoa_r+0x376>
 8005f7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <_dtoa_r+0x330>)
 8005f82:	2503      	movs	r5, #3
 8005f84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f88:	f7fa fbd0 	bl	800072c <__aeabi_ddiv>
 8005f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f90:	f006 060f 	and.w	r6, r6, #15
 8005f94:	4f1c      	ldr	r7, [pc, #112]	; (8006008 <_dtoa_r+0x330>)
 8005f96:	e04f      	b.n	8006038 <_dtoa_r+0x360>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f9e:	4453      	add	r3, sl
 8005fa0:	f103 0801 	add.w	r8, r3, #1
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	4643      	mov	r3, r8
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	bfb8      	it	lt
 8005fac:	2301      	movlt	r3, #1
 8005fae:	e7ba      	b.n	8005f26 <_dtoa_r+0x24e>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	e7b2      	b.n	8005f1a <_dtoa_r+0x242>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e7f0      	b.n	8005f9a <_dtoa_r+0x2c2>
 8005fb8:	2501      	movs	r5, #1
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9509      	str	r5, [sp, #36]	; 0x24
 8005fbe:	931e      	str	r3, [sp, #120]	; 0x78
 8005fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	4698      	mov	r8, r3
 8005fca:	2312      	movs	r3, #18
 8005fcc:	921f      	str	r2, [sp, #124]	; 0x7c
 8005fce:	e7aa      	b.n	8005f26 <_dtoa_r+0x24e>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd4:	e7f4      	b.n	8005fc0 <_dtoa_r+0x2e8>
 8005fd6:	bf00      	nop
 8005fd8:	636f4361 	.word	0x636f4361
 8005fdc:	3fd287a7 	.word	0x3fd287a7
 8005fe0:	8b60c8b3 	.word	0x8b60c8b3
 8005fe4:	3fc68a28 	.word	0x3fc68a28
 8005fe8:	509f79fb 	.word	0x509f79fb
 8005fec:	3fd34413 	.word	0x3fd34413
 8005ff0:	7ff00000 	.word	0x7ff00000
 8005ff4:	0800aee1 	.word	0x0800aee1
 8005ff8:	0800aed8 	.word	0x0800aed8
 8005ffc:	08008c6c 	.word	0x08008c6c
 8006000:	3ff80000 	.word	0x3ff80000
 8006004:	0800af80 	.word	0x0800af80
 8006008:	0800af58 	.word	0x0800af58
 800600c:	2301      	movs	r3, #1
 800600e:	9304      	str	r3, [sp, #16]
 8006010:	4698      	mov	r8, r3
 8006012:	461a      	mov	r2, r3
 8006014:	e7da      	b.n	8005fcc <_dtoa_r+0x2f4>
 8006016:	3101      	adds	r1, #1
 8006018:	6071      	str	r1, [r6, #4]
 800601a:	0052      	lsls	r2, r2, #1
 800601c:	e787      	b.n	8005f2e <_dtoa_r+0x256>
 800601e:	07f1      	lsls	r1, r6, #31
 8006020:	d508      	bpl.n	8006034 <_dtoa_r+0x35c>
 8006022:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	f7fa fa55 	bl	80004d8 <__aeabi_dmul>
 800602e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006032:	3501      	adds	r5, #1
 8006034:	1076      	asrs	r6, r6, #1
 8006036:	3708      	adds	r7, #8
 8006038:	2e00      	cmp	r6, #0
 800603a:	d1f0      	bne.n	800601e <_dtoa_r+0x346>
 800603c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006044:	f7fa fb72 	bl	800072c <__aeabi_ddiv>
 8006048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800604c:	e01b      	b.n	8006086 <_dtoa_r+0x3ae>
 800604e:	2502      	movs	r5, #2
 8006050:	e7a0      	b.n	8005f94 <_dtoa_r+0x2bc>
 8006052:	f000 80a4 	beq.w	800619e <_dtoa_r+0x4c6>
 8006056:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800605a:	f1ca 0600 	rsb	r6, sl, #0
 800605e:	4ba0      	ldr	r3, [pc, #640]	; (80062e0 <_dtoa_r+0x608>)
 8006060:	f006 020f 	and.w	r2, r6, #15
 8006064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fa34 	bl	80004d8 <__aeabi_dmul>
 8006070:	2502      	movs	r5, #2
 8006072:	2300      	movs	r3, #0
 8006074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006078:	4f9a      	ldr	r7, [pc, #616]	; (80062e4 <_dtoa_r+0x60c>)
 800607a:	1136      	asrs	r6, r6, #4
 800607c:	2e00      	cmp	r6, #0
 800607e:	f040 8083 	bne.w	8006188 <_dtoa_r+0x4b0>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e0      	bne.n	8006048 <_dtoa_r+0x370>
 8006086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 808a 	beq.w	80061a2 <_dtoa_r+0x4ca>
 800608e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006092:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800609a:	2200      	movs	r2, #0
 800609c:	4b92      	ldr	r3, [pc, #584]	; (80062e8 <_dtoa_r+0x610>)
 800609e:	f7fa fc8d 	bl	80009bc <__aeabi_dcmplt>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d07d      	beq.n	80061a2 <_dtoa_r+0x4ca>
 80060a6:	f1b8 0f00 	cmp.w	r8, #0
 80060aa:	d07a      	beq.n	80061a2 <_dtoa_r+0x4ca>
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd36      	ble.n	8006120 <_dtoa_r+0x448>
 80060b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060b6:	2200      	movs	r2, #0
 80060b8:	4b8c      	ldr	r3, [pc, #560]	; (80062ec <_dtoa_r+0x614>)
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c2:	9e04      	ldr	r6, [sp, #16]
 80060c4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80060c8:	3501      	adds	r5, #1
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7fa f99a 	bl	8000404 <__aeabi_i2d>
 80060d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060d4:	f7fa fa00 	bl	80004d8 <__aeabi_dmul>
 80060d8:	2200      	movs	r2, #0
 80060da:	4b85      	ldr	r3, [pc, #532]	; (80062f0 <_dtoa_r+0x618>)
 80060dc:	f7fa f846 	bl	800016c <__adddf3>
 80060e0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80060e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060e8:	950b      	str	r5, [sp, #44]	; 0x2c
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d15c      	bne.n	80061a8 <_dtoa_r+0x4d0>
 80060ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	4b7f      	ldr	r3, [pc, #508]	; (80062f4 <_dtoa_r+0x61c>)
 80060f6:	f7fa f837 	bl	8000168 <__aeabi_dsub>
 80060fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060fc:	462b      	mov	r3, r5
 80060fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006102:	f7fa fc79 	bl	80009f8 <__aeabi_dcmpgt>
 8006106:	2800      	cmp	r0, #0
 8006108:	f040 8281 	bne.w	800660e <_dtoa_r+0x936>
 800610c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006112:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006116:	f7fa fc51 	bl	80009bc <__aeabi_dcmplt>
 800611a:	2800      	cmp	r0, #0
 800611c:	f040 8275 	bne.w	800660a <_dtoa_r+0x932>
 8006120:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800612a:	2b00      	cmp	r3, #0
 800612c:	f2c0 814b 	blt.w	80063c6 <_dtoa_r+0x6ee>
 8006130:	f1ba 0f0e 	cmp.w	sl, #14
 8006134:	f300 8147 	bgt.w	80063c6 <_dtoa_r+0x6ee>
 8006138:	4b69      	ldr	r3, [pc, #420]	; (80062e0 <_dtoa_r+0x608>)
 800613a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006142:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006146:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006148:	2b00      	cmp	r3, #0
 800614a:	f280 80d7 	bge.w	80062fc <_dtoa_r+0x624>
 800614e:	f1b8 0f00 	cmp.w	r8, #0
 8006152:	f300 80d3 	bgt.w	80062fc <_dtoa_r+0x624>
 8006156:	f040 8257 	bne.w	8006608 <_dtoa_r+0x930>
 800615a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800615e:	2200      	movs	r2, #0
 8006160:	4b64      	ldr	r3, [pc, #400]	; (80062f4 <_dtoa_r+0x61c>)
 8006162:	f7fa f9b9 	bl	80004d8 <__aeabi_dmul>
 8006166:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616a:	f7fa fc3b 	bl	80009e4 <__aeabi_dcmpge>
 800616e:	4646      	mov	r6, r8
 8006170:	4647      	mov	r7, r8
 8006172:	2800      	cmp	r0, #0
 8006174:	f040 822d 	bne.w	80065d2 <_dtoa_r+0x8fa>
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	9a06      	ldr	r2, [sp, #24]
 800617c:	1c5d      	adds	r5, r3, #1
 800617e:	2331      	movs	r3, #49	; 0x31
 8006180:	f10a 0a01 	add.w	sl, sl, #1
 8006184:	7013      	strb	r3, [r2, #0]
 8006186:	e228      	b.n	80065da <_dtoa_r+0x902>
 8006188:	07f2      	lsls	r2, r6, #31
 800618a:	d505      	bpl.n	8006198 <_dtoa_r+0x4c0>
 800618c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006190:	f7fa f9a2 	bl	80004d8 <__aeabi_dmul>
 8006194:	2301      	movs	r3, #1
 8006196:	3501      	adds	r5, #1
 8006198:	1076      	asrs	r6, r6, #1
 800619a:	3708      	adds	r7, #8
 800619c:	e76e      	b.n	800607c <_dtoa_r+0x3a4>
 800619e:	2502      	movs	r5, #2
 80061a0:	e771      	b.n	8006086 <_dtoa_r+0x3ae>
 80061a2:	4657      	mov	r7, sl
 80061a4:	4646      	mov	r6, r8
 80061a6:	e790      	b.n	80060ca <_dtoa_r+0x3f2>
 80061a8:	4b4d      	ldr	r3, [pc, #308]	; (80062e0 <_dtoa_r+0x608>)
 80061aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061ae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d048      	beq.n	800624a <_dtoa_r+0x572>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	2000      	movs	r0, #0
 80061be:	494e      	ldr	r1, [pc, #312]	; (80062f8 <_dtoa_r+0x620>)
 80061c0:	f7fa fab4 	bl	800072c <__aeabi_ddiv>
 80061c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061c8:	f7f9 ffce 	bl	8000168 <__aeabi_dsub>
 80061cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061d0:	9d06      	ldr	r5, [sp, #24]
 80061d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d6:	f7fa fc2f 	bl	8000a38 <__aeabi_d2iz>
 80061da:	9011      	str	r0, [sp, #68]	; 0x44
 80061dc:	f7fa f912 	bl	8000404 <__aeabi_i2d>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e8:	f7f9 ffbe 	bl	8000168 <__aeabi_dsub>
 80061ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f2:	3330      	adds	r3, #48	; 0x30
 80061f4:	f805 3b01 	strb.w	r3, [r5], #1
 80061f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061fc:	f7fa fbde 	bl	80009bc <__aeabi_dcmplt>
 8006200:	2800      	cmp	r0, #0
 8006202:	d163      	bne.n	80062cc <_dtoa_r+0x5f4>
 8006204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006208:	2000      	movs	r0, #0
 800620a:	4937      	ldr	r1, [pc, #220]	; (80062e8 <_dtoa_r+0x610>)
 800620c:	f7f9 ffac 	bl	8000168 <__aeabi_dsub>
 8006210:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006214:	f7fa fbd2 	bl	80009bc <__aeabi_dcmplt>
 8006218:	2800      	cmp	r0, #0
 800621a:	f040 80b5 	bne.w	8006388 <_dtoa_r+0x6b0>
 800621e:	9b06      	ldr	r3, [sp, #24]
 8006220:	1aeb      	subs	r3, r5, r3
 8006222:	429e      	cmp	r6, r3
 8006224:	f77f af7c 	ble.w	8006120 <_dtoa_r+0x448>
 8006228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800622c:	2200      	movs	r2, #0
 800622e:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <_dtoa_r+0x614>)
 8006230:	f7fa f952 	bl	80004d8 <__aeabi_dmul>
 8006234:	2200      	movs	r2, #0
 8006236:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800623a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800623e:	4b2b      	ldr	r3, [pc, #172]	; (80062ec <_dtoa_r+0x614>)
 8006240:	f7fa f94a 	bl	80004d8 <__aeabi_dmul>
 8006244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006248:	e7c3      	b.n	80061d2 <_dtoa_r+0x4fa>
 800624a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800624e:	f7fa f943 	bl	80004d8 <__aeabi_dmul>
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006258:	199d      	adds	r5, r3, r6
 800625a:	461e      	mov	r6, r3
 800625c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006260:	f7fa fbea 	bl	8000a38 <__aeabi_d2iz>
 8006264:	9011      	str	r0, [sp, #68]	; 0x44
 8006266:	f7fa f8cd 	bl	8000404 <__aeabi_i2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006272:	f7f9 ff79 	bl	8000168 <__aeabi_dsub>
 8006276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627c:	3330      	adds	r3, #48	; 0x30
 800627e:	f806 3b01 	strb.w	r3, [r6], #1
 8006282:	42ae      	cmp	r6, r5
 8006284:	f04f 0200 	mov.w	r2, #0
 8006288:	d124      	bne.n	80062d4 <_dtoa_r+0x5fc>
 800628a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800628e:	4b1a      	ldr	r3, [pc, #104]	; (80062f8 <_dtoa_r+0x620>)
 8006290:	f7f9 ff6c 	bl	800016c <__adddf3>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629c:	f7fa fbac 	bl	80009f8 <__aeabi_dcmpgt>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d171      	bne.n	8006388 <_dtoa_r+0x6b0>
 80062a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062a8:	2000      	movs	r0, #0
 80062aa:	4913      	ldr	r1, [pc, #76]	; (80062f8 <_dtoa_r+0x620>)
 80062ac:	f7f9 ff5c 	bl	8000168 <__aeabi_dsub>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b8:	f7fa fb80 	bl	80009bc <__aeabi_dcmplt>
 80062bc:	2800      	cmp	r0, #0
 80062be:	f43f af2f 	beq.w	8006120 <_dtoa_r+0x448>
 80062c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062c6:	1e6a      	subs	r2, r5, #1
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d001      	beq.n	80062d0 <_dtoa_r+0x5f8>
 80062cc:	46ba      	mov	sl, r7
 80062ce:	e04a      	b.n	8006366 <_dtoa_r+0x68e>
 80062d0:	4615      	mov	r5, r2
 80062d2:	e7f6      	b.n	80062c2 <_dtoa_r+0x5ea>
 80062d4:	4b05      	ldr	r3, [pc, #20]	; (80062ec <_dtoa_r+0x614>)
 80062d6:	f7fa f8ff 	bl	80004d8 <__aeabi_dmul>
 80062da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062de:	e7bd      	b.n	800625c <_dtoa_r+0x584>
 80062e0:	0800af80 	.word	0x0800af80
 80062e4:	0800af58 	.word	0x0800af58
 80062e8:	3ff00000 	.word	0x3ff00000
 80062ec:	40240000 	.word	0x40240000
 80062f0:	401c0000 	.word	0x401c0000
 80062f4:	40140000 	.word	0x40140000
 80062f8:	3fe00000 	.word	0x3fe00000
 80062fc:	9d06      	ldr	r5, [sp, #24]
 80062fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006306:	4630      	mov	r0, r6
 8006308:	4639      	mov	r1, r7
 800630a:	f7fa fa0f 	bl	800072c <__aeabi_ddiv>
 800630e:	f7fa fb93 	bl	8000a38 <__aeabi_d2iz>
 8006312:	4681      	mov	r9, r0
 8006314:	f7fa f876 	bl	8000404 <__aeabi_i2d>
 8006318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800631c:	f7fa f8dc 	bl	80004d8 <__aeabi_dmul>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ff1e 	bl	8000168 <__aeabi_dsub>
 800632c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006330:	f805 6b01 	strb.w	r6, [r5], #1
 8006334:	9e06      	ldr	r6, [sp, #24]
 8006336:	4602      	mov	r2, r0
 8006338:	1bae      	subs	r6, r5, r6
 800633a:	45b0      	cmp	r8, r6
 800633c:	460b      	mov	r3, r1
 800633e:	d135      	bne.n	80063ac <_dtoa_r+0x6d4>
 8006340:	f7f9 ff14 	bl	800016c <__adddf3>
 8006344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006348:	4606      	mov	r6, r0
 800634a:	460f      	mov	r7, r1
 800634c:	f7fa fb54 	bl	80009f8 <__aeabi_dcmpgt>
 8006350:	b9c8      	cbnz	r0, 8006386 <_dtoa_r+0x6ae>
 8006352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006356:	4630      	mov	r0, r6
 8006358:	4639      	mov	r1, r7
 800635a:	f7fa fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800635e:	b110      	cbz	r0, 8006366 <_dtoa_r+0x68e>
 8006360:	f019 0f01 	tst.w	r9, #1
 8006364:	d10f      	bne.n	8006386 <_dtoa_r+0x6ae>
 8006366:	4659      	mov	r1, fp
 8006368:	4620      	mov	r0, r4
 800636a:	f000 feeb 	bl	8007144 <_Bfree>
 800636e:	2300      	movs	r3, #0
 8006370:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006372:	702b      	strb	r3, [r5, #0]
 8006374:	f10a 0301 	add.w	r3, sl, #1
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800637c:	2b00      	cmp	r3, #0
 800637e:	f43f acf3 	beq.w	8005d68 <_dtoa_r+0x90>
 8006382:	601d      	str	r5, [r3, #0]
 8006384:	e4f0      	b.n	8005d68 <_dtoa_r+0x90>
 8006386:	4657      	mov	r7, sl
 8006388:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800638c:	1e6b      	subs	r3, r5, #1
 800638e:	2a39      	cmp	r2, #57	; 0x39
 8006390:	d106      	bne.n	80063a0 <_dtoa_r+0x6c8>
 8006392:	9a06      	ldr	r2, [sp, #24]
 8006394:	429a      	cmp	r2, r3
 8006396:	d107      	bne.n	80063a8 <_dtoa_r+0x6d0>
 8006398:	2330      	movs	r3, #48	; 0x30
 800639a:	7013      	strb	r3, [r2, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	3701      	adds	r7, #1
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	3201      	adds	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e791      	b.n	80062cc <_dtoa_r+0x5f4>
 80063a8:	461d      	mov	r5, r3
 80063aa:	e7ed      	b.n	8006388 <_dtoa_r+0x6b0>
 80063ac:	2200      	movs	r2, #0
 80063ae:	4b99      	ldr	r3, [pc, #612]	; (8006614 <_dtoa_r+0x93c>)
 80063b0:	f7fa f892 	bl	80004d8 <__aeabi_dmul>
 80063b4:	2200      	movs	r2, #0
 80063b6:	2300      	movs	r3, #0
 80063b8:	4606      	mov	r6, r0
 80063ba:	460f      	mov	r7, r1
 80063bc:	f7fa faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d09e      	beq.n	8006302 <_dtoa_r+0x62a>
 80063c4:	e7cf      	b.n	8006366 <_dtoa_r+0x68e>
 80063c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	f000 8088 	beq.w	80064de <_dtoa_r+0x806>
 80063ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063d0:	2a01      	cmp	r2, #1
 80063d2:	dc6d      	bgt.n	80064b0 <_dtoa_r+0x7d8>
 80063d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063d6:	2a00      	cmp	r2, #0
 80063d8:	d066      	beq.n	80064a8 <_dtoa_r+0x7d0>
 80063da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063de:	464d      	mov	r5, r9
 80063e0:	9e08      	ldr	r6, [sp, #32]
 80063e2:	9a07      	ldr	r2, [sp, #28]
 80063e4:	2101      	movs	r1, #1
 80063e6:	441a      	add	r2, r3
 80063e8:	4620      	mov	r0, r4
 80063ea:	4499      	add	r9, r3
 80063ec:	9207      	str	r2, [sp, #28]
 80063ee:	f000 ff87 	bl	8007300 <__i2b>
 80063f2:	4607      	mov	r7, r0
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	dd0b      	ble.n	8006410 <_dtoa_r+0x738>
 80063f8:	9b07      	ldr	r3, [sp, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	dd08      	ble.n	8006410 <_dtoa_r+0x738>
 80063fe:	42ab      	cmp	r3, r5
 8006400:	bfa8      	it	ge
 8006402:	462b      	movge	r3, r5
 8006404:	9a07      	ldr	r2, [sp, #28]
 8006406:	eba9 0903 	sub.w	r9, r9, r3
 800640a:	1aed      	subs	r5, r5, r3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	9b08      	ldr	r3, [sp, #32]
 8006412:	b1eb      	cbz	r3, 8006450 <_dtoa_r+0x778>
 8006414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d065      	beq.n	80064e6 <_dtoa_r+0x80e>
 800641a:	b18e      	cbz	r6, 8006440 <_dtoa_r+0x768>
 800641c:	4639      	mov	r1, r7
 800641e:	4632      	mov	r2, r6
 8006420:	4620      	mov	r0, r4
 8006422:	f001 f80b 	bl	800743c <__pow5mult>
 8006426:	465a      	mov	r2, fp
 8006428:	4601      	mov	r1, r0
 800642a:	4607      	mov	r7, r0
 800642c:	4620      	mov	r0, r4
 800642e:	f000 ff70 	bl	8007312 <__multiply>
 8006432:	4659      	mov	r1, fp
 8006434:	900a      	str	r0, [sp, #40]	; 0x28
 8006436:	4620      	mov	r0, r4
 8006438:	f000 fe84 	bl	8007144 <_Bfree>
 800643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800643e:	469b      	mov	fp, r3
 8006440:	9b08      	ldr	r3, [sp, #32]
 8006442:	1b9a      	subs	r2, r3, r6
 8006444:	d004      	beq.n	8006450 <_dtoa_r+0x778>
 8006446:	4659      	mov	r1, fp
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fff7 	bl	800743c <__pow5mult>
 800644e:	4683      	mov	fp, r0
 8006450:	2101      	movs	r1, #1
 8006452:	4620      	mov	r0, r4
 8006454:	f000 ff54 	bl	8007300 <__i2b>
 8006458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800645a:	4606      	mov	r6, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 81c6 	beq.w	80067ee <_dtoa_r+0xb16>
 8006462:	461a      	mov	r2, r3
 8006464:	4601      	mov	r1, r0
 8006466:	4620      	mov	r0, r4
 8006468:	f000 ffe8 	bl	800743c <__pow5mult>
 800646c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800646e:	4606      	mov	r6, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	dc3e      	bgt.n	80064f2 <_dtoa_r+0x81a>
 8006474:	9b02      	ldr	r3, [sp, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d137      	bne.n	80064ea <_dtoa_r+0x812>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006480:	2b00      	cmp	r3, #0
 8006482:	d134      	bne.n	80064ee <_dtoa_r+0x816>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800648a:	0d1b      	lsrs	r3, r3, #20
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	b12b      	cbz	r3, 800649c <_dtoa_r+0x7c4>
 8006490:	9b07      	ldr	r3, [sp, #28]
 8006492:	f109 0901 	add.w	r9, r9, #1
 8006496:	3301      	adds	r3, #1
 8006498:	9307      	str	r3, [sp, #28]
 800649a:	2301      	movs	r3, #1
 800649c:	9308      	str	r3, [sp, #32]
 800649e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d128      	bne.n	80064f6 <_dtoa_r+0x81e>
 80064a4:	2001      	movs	r0, #1
 80064a6:	e02e      	b.n	8006506 <_dtoa_r+0x82e>
 80064a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064ae:	e796      	b.n	80063de <_dtoa_r+0x706>
 80064b0:	9b08      	ldr	r3, [sp, #32]
 80064b2:	f108 36ff 	add.w	r6, r8, #4294967295
 80064b6:	42b3      	cmp	r3, r6
 80064b8:	bfb7      	itett	lt
 80064ba:	9b08      	ldrlt	r3, [sp, #32]
 80064bc:	1b9e      	subge	r6, r3, r6
 80064be:	1af2      	sublt	r2, r6, r3
 80064c0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80064c2:	bfbf      	itttt	lt
 80064c4:	9608      	strlt	r6, [sp, #32]
 80064c6:	189b      	addlt	r3, r3, r2
 80064c8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80064ca:	2600      	movlt	r6, #0
 80064cc:	f1b8 0f00 	cmp.w	r8, #0
 80064d0:	bfb9      	ittee	lt
 80064d2:	eba9 0508 	sublt.w	r5, r9, r8
 80064d6:	2300      	movlt	r3, #0
 80064d8:	464d      	movge	r5, r9
 80064da:	4643      	movge	r3, r8
 80064dc:	e781      	b.n	80063e2 <_dtoa_r+0x70a>
 80064de:	9e08      	ldr	r6, [sp, #32]
 80064e0:	464d      	mov	r5, r9
 80064e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80064e4:	e786      	b.n	80063f4 <_dtoa_r+0x71c>
 80064e6:	9a08      	ldr	r2, [sp, #32]
 80064e8:	e7ad      	b.n	8006446 <_dtoa_r+0x76e>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e7d6      	b.n	800649c <_dtoa_r+0x7c4>
 80064ee:	9b02      	ldr	r3, [sp, #8]
 80064f0:	e7d4      	b.n	800649c <_dtoa_r+0x7c4>
 80064f2:	2300      	movs	r3, #0
 80064f4:	9308      	str	r3, [sp, #32]
 80064f6:	6933      	ldr	r3, [r6, #16]
 80064f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064fc:	6918      	ldr	r0, [r3, #16]
 80064fe:	f000 feb1 	bl	8007264 <__hi0bits>
 8006502:	f1c0 0020 	rsb	r0, r0, #32
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	4418      	add	r0, r3
 800650a:	f010 001f 	ands.w	r0, r0, #31
 800650e:	d047      	beq.n	80065a0 <_dtoa_r+0x8c8>
 8006510:	f1c0 0320 	rsb	r3, r0, #32
 8006514:	2b04      	cmp	r3, #4
 8006516:	dd3b      	ble.n	8006590 <_dtoa_r+0x8b8>
 8006518:	9b07      	ldr	r3, [sp, #28]
 800651a:	f1c0 001c 	rsb	r0, r0, #28
 800651e:	4481      	add	r9, r0
 8006520:	4405      	add	r5, r0
 8006522:	4403      	add	r3, r0
 8006524:	9307      	str	r3, [sp, #28]
 8006526:	f1b9 0f00 	cmp.w	r9, #0
 800652a:	dd05      	ble.n	8006538 <_dtoa_r+0x860>
 800652c:	4659      	mov	r1, fp
 800652e:	464a      	mov	r2, r9
 8006530:	4620      	mov	r0, r4
 8006532:	f000 ffd1 	bl	80074d8 <__lshift>
 8006536:	4683      	mov	fp, r0
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd05      	ble.n	800654a <_dtoa_r+0x872>
 800653e:	4631      	mov	r1, r6
 8006540:	461a      	mov	r2, r3
 8006542:	4620      	mov	r0, r4
 8006544:	f000 ffc8 	bl	80074d8 <__lshift>
 8006548:	4606      	mov	r6, r0
 800654a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800654c:	b353      	cbz	r3, 80065a4 <_dtoa_r+0x8cc>
 800654e:	4631      	mov	r1, r6
 8006550:	4658      	mov	r0, fp
 8006552:	f001 f815 	bl	8007580 <__mcmp>
 8006556:	2800      	cmp	r0, #0
 8006558:	da24      	bge.n	80065a4 <_dtoa_r+0x8cc>
 800655a:	2300      	movs	r3, #0
 800655c:	4659      	mov	r1, fp
 800655e:	220a      	movs	r2, #10
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fe06 	bl	8007172 <__multadd>
 8006566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006568:	f10a 3aff 	add.w	sl, sl, #4294967295
 800656c:	4683      	mov	fp, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8144 	beq.w	80067fc <_dtoa_r+0xb24>
 8006574:	2300      	movs	r3, #0
 8006576:	4639      	mov	r1, r7
 8006578:	220a      	movs	r2, #10
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fdf9 	bl	8007172 <__multadd>
 8006580:	9b04      	ldr	r3, [sp, #16]
 8006582:	4607      	mov	r7, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	dc4d      	bgt.n	8006624 <_dtoa_r+0x94c>
 8006588:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800658a:	2b02      	cmp	r3, #2
 800658c:	dd4a      	ble.n	8006624 <_dtoa_r+0x94c>
 800658e:	e011      	b.n	80065b4 <_dtoa_r+0x8dc>
 8006590:	d0c9      	beq.n	8006526 <_dtoa_r+0x84e>
 8006592:	9a07      	ldr	r2, [sp, #28]
 8006594:	331c      	adds	r3, #28
 8006596:	441a      	add	r2, r3
 8006598:	4499      	add	r9, r3
 800659a:	441d      	add	r5, r3
 800659c:	4613      	mov	r3, r2
 800659e:	e7c1      	b.n	8006524 <_dtoa_r+0x84c>
 80065a0:	4603      	mov	r3, r0
 80065a2:	e7f6      	b.n	8006592 <_dtoa_r+0x8ba>
 80065a4:	f1b8 0f00 	cmp.w	r8, #0
 80065a8:	dc36      	bgt.n	8006618 <_dtoa_r+0x940>
 80065aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	dd33      	ble.n	8006618 <_dtoa_r+0x940>
 80065b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	b963      	cbnz	r3, 80065d2 <_dtoa_r+0x8fa>
 80065b8:	4631      	mov	r1, r6
 80065ba:	2205      	movs	r2, #5
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 fdd8 	bl	8007172 <__multadd>
 80065c2:	4601      	mov	r1, r0
 80065c4:	4606      	mov	r6, r0
 80065c6:	4658      	mov	r0, fp
 80065c8:	f000 ffda 	bl	8007580 <__mcmp>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f73f add3 	bgt.w	8006178 <_dtoa_r+0x4a0>
 80065d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065d4:	9d06      	ldr	r5, [sp, #24]
 80065d6:	ea6f 0a03 	mvn.w	sl, r3
 80065da:	f04f 0900 	mov.w	r9, #0
 80065de:	4631      	mov	r1, r6
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fdaf 	bl	8007144 <_Bfree>
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	f43f aebd 	beq.w	8006366 <_dtoa_r+0x68e>
 80065ec:	f1b9 0f00 	cmp.w	r9, #0
 80065f0:	d005      	beq.n	80065fe <_dtoa_r+0x926>
 80065f2:	45b9      	cmp	r9, r7
 80065f4:	d003      	beq.n	80065fe <_dtoa_r+0x926>
 80065f6:	4649      	mov	r1, r9
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fda3 	bl	8007144 <_Bfree>
 80065fe:	4639      	mov	r1, r7
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fd9f 	bl	8007144 <_Bfree>
 8006606:	e6ae      	b.n	8006366 <_dtoa_r+0x68e>
 8006608:	2600      	movs	r6, #0
 800660a:	4637      	mov	r7, r6
 800660c:	e7e1      	b.n	80065d2 <_dtoa_r+0x8fa>
 800660e:	46ba      	mov	sl, r7
 8006610:	4637      	mov	r7, r6
 8006612:	e5b1      	b.n	8006178 <_dtoa_r+0x4a0>
 8006614:	40240000 	.word	0x40240000
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	f8cd 8010 	str.w	r8, [sp, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 80f3 	beq.w	800680a <_dtoa_r+0xb32>
 8006624:	2d00      	cmp	r5, #0
 8006626:	dd05      	ble.n	8006634 <_dtoa_r+0x95c>
 8006628:	4639      	mov	r1, r7
 800662a:	462a      	mov	r2, r5
 800662c:	4620      	mov	r0, r4
 800662e:	f000 ff53 	bl	80074d8 <__lshift>
 8006632:	4607      	mov	r7, r0
 8006634:	9b08      	ldr	r3, [sp, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d04c      	beq.n	80066d4 <_dtoa_r+0x9fc>
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4620      	mov	r0, r4
 800663e:	f000 fd4d 	bl	80070dc <_Balloc>
 8006642:	4605      	mov	r5, r0
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	f107 010c 	add.w	r1, r7, #12
 800664a:	3202      	adds	r2, #2
 800664c:	0092      	lsls	r2, r2, #2
 800664e:	300c      	adds	r0, #12
 8006650:	f7fd fcca 	bl	8003fe8 <memcpy>
 8006654:	2201      	movs	r2, #1
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f000 ff3d 	bl	80074d8 <__lshift>
 800665e:	46b9      	mov	r9, r7
 8006660:	4607      	mov	r7, r0
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	9307      	str	r3, [sp, #28]
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	9308      	str	r3, [sp, #32]
 800666e:	4631      	mov	r1, r6
 8006670:	4658      	mov	r0, fp
 8006672:	f7ff faa1 	bl	8005bb8 <quorem>
 8006676:	4649      	mov	r1, r9
 8006678:	4605      	mov	r5, r0
 800667a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800667e:	4658      	mov	r0, fp
 8006680:	f000 ff7e 	bl	8007580 <__mcmp>
 8006684:	463a      	mov	r2, r7
 8006686:	9002      	str	r0, [sp, #8]
 8006688:	4631      	mov	r1, r6
 800668a:	4620      	mov	r0, r4
 800668c:	f000 ff92 	bl	80075b4 <__mdiff>
 8006690:	68c3      	ldr	r3, [r0, #12]
 8006692:	4602      	mov	r2, r0
 8006694:	bb03      	cbnz	r3, 80066d8 <_dtoa_r+0xa00>
 8006696:	4601      	mov	r1, r0
 8006698:	9009      	str	r0, [sp, #36]	; 0x24
 800669a:	4658      	mov	r0, fp
 800669c:	f000 ff70 	bl	8007580 <__mcmp>
 80066a0:	4603      	mov	r3, r0
 80066a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066a4:	4611      	mov	r1, r2
 80066a6:	4620      	mov	r0, r4
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	f000 fd4b 	bl	8007144 <_Bfree>
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	b9a3      	cbnz	r3, 80066dc <_dtoa_r+0xa04>
 80066b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066b4:	b992      	cbnz	r2, 80066dc <_dtoa_r+0xa04>
 80066b6:	9a08      	ldr	r2, [sp, #32]
 80066b8:	b982      	cbnz	r2, 80066dc <_dtoa_r+0xa04>
 80066ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066be:	d029      	beq.n	8006714 <_dtoa_r+0xa3c>
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	dd01      	ble.n	80066ca <_dtoa_r+0x9f2>
 80066c6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	1c5d      	adds	r5, r3, #1
 80066ce:	f883 8000 	strb.w	r8, [r3]
 80066d2:	e784      	b.n	80065de <_dtoa_r+0x906>
 80066d4:	4638      	mov	r0, r7
 80066d6:	e7c2      	b.n	800665e <_dtoa_r+0x986>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7e3      	b.n	80066a4 <_dtoa_r+0x9cc>
 80066dc:	9a02      	ldr	r2, [sp, #8]
 80066de:	2a00      	cmp	r2, #0
 80066e0:	db04      	blt.n	80066ec <_dtoa_r+0xa14>
 80066e2:	d123      	bne.n	800672c <_dtoa_r+0xa54>
 80066e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066e6:	bb0a      	cbnz	r2, 800672c <_dtoa_r+0xa54>
 80066e8:	9a08      	ldr	r2, [sp, #32]
 80066ea:	b9fa      	cbnz	r2, 800672c <_dtoa_r+0xa54>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	ddec      	ble.n	80066ca <_dtoa_r+0x9f2>
 80066f0:	4659      	mov	r1, fp
 80066f2:	2201      	movs	r2, #1
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 feef 	bl	80074d8 <__lshift>
 80066fa:	4631      	mov	r1, r6
 80066fc:	4683      	mov	fp, r0
 80066fe:	f000 ff3f 	bl	8007580 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	dc03      	bgt.n	800670e <_dtoa_r+0xa36>
 8006706:	d1e0      	bne.n	80066ca <_dtoa_r+0x9f2>
 8006708:	f018 0f01 	tst.w	r8, #1
 800670c:	d0dd      	beq.n	80066ca <_dtoa_r+0x9f2>
 800670e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006712:	d1d8      	bne.n	80066c6 <_dtoa_r+0x9ee>
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	9a07      	ldr	r2, [sp, #28]
 8006718:	1c5d      	adds	r5, r3, #1
 800671a:	2339      	movs	r3, #57	; 0x39
 800671c:	7013      	strb	r3, [r2, #0]
 800671e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006722:	1e6a      	subs	r2, r5, #1
 8006724:	2b39      	cmp	r3, #57	; 0x39
 8006726:	d04d      	beq.n	80067c4 <_dtoa_r+0xaec>
 8006728:	3301      	adds	r3, #1
 800672a:	e052      	b.n	80067d2 <_dtoa_r+0xafa>
 800672c:	9a07      	ldr	r2, [sp, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f102 0501 	add.w	r5, r2, #1
 8006734:	dd06      	ble.n	8006744 <_dtoa_r+0xa6c>
 8006736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800673a:	d0eb      	beq.n	8006714 <_dtoa_r+0xa3c>
 800673c:	f108 0801 	add.w	r8, r8, #1
 8006740:	9b07      	ldr	r3, [sp, #28]
 8006742:	e7c4      	b.n	80066ce <_dtoa_r+0x9f6>
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	9a04      	ldr	r2, [sp, #16]
 8006748:	1aeb      	subs	r3, r5, r3
 800674a:	4293      	cmp	r3, r2
 800674c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006750:	d021      	beq.n	8006796 <_dtoa_r+0xabe>
 8006752:	4659      	mov	r1, fp
 8006754:	2300      	movs	r3, #0
 8006756:	220a      	movs	r2, #10
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fd0a 	bl	8007172 <__multadd>
 800675e:	45b9      	cmp	r9, r7
 8006760:	4683      	mov	fp, r0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	f04f 020a 	mov.w	r2, #10
 800676a:	4649      	mov	r1, r9
 800676c:	4620      	mov	r0, r4
 800676e:	d105      	bne.n	800677c <_dtoa_r+0xaa4>
 8006770:	f000 fcff 	bl	8007172 <__multadd>
 8006774:	4681      	mov	r9, r0
 8006776:	4607      	mov	r7, r0
 8006778:	9507      	str	r5, [sp, #28]
 800677a:	e778      	b.n	800666e <_dtoa_r+0x996>
 800677c:	f000 fcf9 	bl	8007172 <__multadd>
 8006780:	4639      	mov	r1, r7
 8006782:	4681      	mov	r9, r0
 8006784:	2300      	movs	r3, #0
 8006786:	220a      	movs	r2, #10
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fcf2 	bl	8007172 <__multadd>
 800678e:	4607      	mov	r7, r0
 8006790:	e7f2      	b.n	8006778 <_dtoa_r+0xaa0>
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	4659      	mov	r1, fp
 8006798:	2201      	movs	r2, #1
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fe9c 	bl	80074d8 <__lshift>
 80067a0:	4631      	mov	r1, r6
 80067a2:	4683      	mov	fp, r0
 80067a4:	f000 feec 	bl	8007580 <__mcmp>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	dcb8      	bgt.n	800671e <_dtoa_r+0xa46>
 80067ac:	d102      	bne.n	80067b4 <_dtoa_r+0xadc>
 80067ae:	f018 0f01 	tst.w	r8, #1
 80067b2:	d1b4      	bne.n	800671e <_dtoa_r+0xa46>
 80067b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067b8:	1e6a      	subs	r2, r5, #1
 80067ba:	2b30      	cmp	r3, #48	; 0x30
 80067bc:	f47f af0f 	bne.w	80065de <_dtoa_r+0x906>
 80067c0:	4615      	mov	r5, r2
 80067c2:	e7f7      	b.n	80067b4 <_dtoa_r+0xadc>
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d105      	bne.n	80067d6 <_dtoa_r+0xafe>
 80067ca:	2331      	movs	r3, #49	; 0x31
 80067cc:	9a06      	ldr	r2, [sp, #24]
 80067ce:	f10a 0a01 	add.w	sl, sl, #1
 80067d2:	7013      	strb	r3, [r2, #0]
 80067d4:	e703      	b.n	80065de <_dtoa_r+0x906>
 80067d6:	4615      	mov	r5, r2
 80067d8:	e7a1      	b.n	800671e <_dtoa_r+0xa46>
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <_dtoa_r+0xb60>)
 80067dc:	f7ff bae1 	b.w	8005da2 <_dtoa_r+0xca>
 80067e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f47f aabb 	bne.w	8005d5e <_dtoa_r+0x86>
 80067e8:	4b14      	ldr	r3, [pc, #80]	; (800683c <_dtoa_r+0xb64>)
 80067ea:	f7ff bada 	b.w	8005da2 <_dtoa_r+0xca>
 80067ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	f77f ae3f 	ble.w	8006474 <_dtoa_r+0x79c>
 80067f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	e653      	b.n	80064a4 <_dtoa_r+0x7cc>
 80067fc:	9b04      	ldr	r3, [sp, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dc03      	bgt.n	800680a <_dtoa_r+0xb32>
 8006802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006804:	2b02      	cmp	r3, #2
 8006806:	f73f aed5 	bgt.w	80065b4 <_dtoa_r+0x8dc>
 800680a:	9d06      	ldr	r5, [sp, #24]
 800680c:	4631      	mov	r1, r6
 800680e:	4658      	mov	r0, fp
 8006810:	f7ff f9d2 	bl	8005bb8 <quorem>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800681a:	f805 8b01 	strb.w	r8, [r5], #1
 800681e:	9a04      	ldr	r2, [sp, #16]
 8006820:	1aeb      	subs	r3, r5, r3
 8006822:	429a      	cmp	r2, r3
 8006824:	ddb5      	ble.n	8006792 <_dtoa_r+0xaba>
 8006826:	4659      	mov	r1, fp
 8006828:	2300      	movs	r3, #0
 800682a:	220a      	movs	r2, #10
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fca0 	bl	8007172 <__multadd>
 8006832:	4683      	mov	fp, r0
 8006834:	e7ea      	b.n	800680c <_dtoa_r+0xb34>
 8006836:	bf00      	nop
 8006838:	08008c6b 	.word	0x08008c6b
 800683c:	0800aed8 	.word	0x0800aed8

08006840 <std>:
 8006840:	2300      	movs	r3, #0
 8006842:	b510      	push	{r4, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	e9c0 3300 	strd	r3, r3, [r0]
 800684a:	6083      	str	r3, [r0, #8]
 800684c:	8181      	strh	r1, [r0, #12]
 800684e:	6643      	str	r3, [r0, #100]	; 0x64
 8006850:	81c2      	strh	r2, [r0, #14]
 8006852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006856:	6183      	str	r3, [r0, #24]
 8006858:	4619      	mov	r1, r3
 800685a:	2208      	movs	r2, #8
 800685c:	305c      	adds	r0, #92	; 0x5c
 800685e:	f7fd fbe7 	bl	8004030 <memset>
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <std+0x38>)
 8006864:	6224      	str	r4, [r4, #32]
 8006866:	6263      	str	r3, [r4, #36]	; 0x24
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <std+0x3c>)
 800686a:	62a3      	str	r3, [r4, #40]	; 0x28
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <std+0x40>)
 800686e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006870:	4b04      	ldr	r3, [pc, #16]	; (8006884 <std+0x44>)
 8006872:	6323      	str	r3, [r4, #48]	; 0x30
 8006874:	bd10      	pop	{r4, pc}
 8006876:	bf00      	nop
 8006878:	08004d6d 	.word	0x08004d6d
 800687c:	08004d93 	.word	0x08004d93
 8006880:	08004dcb 	.word	0x08004dcb
 8006884:	08004def 	.word	0x08004def

08006888 <_cleanup_r>:
 8006888:	4901      	ldr	r1, [pc, #4]	; (8006890 <_cleanup_r+0x8>)
 800688a:	f000 b885 	b.w	8006998 <_fwalk_reent>
 800688e:	bf00      	nop
 8006890:	08008a55 	.word	0x08008a55

08006894 <__sfmoreglue>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	2568      	movs	r5, #104	; 0x68
 8006898:	1e4a      	subs	r2, r1, #1
 800689a:	4355      	muls	r5, r2
 800689c:	460e      	mov	r6, r1
 800689e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068a2:	f001 f86d 	bl	8007980 <_malloc_r>
 80068a6:	4604      	mov	r4, r0
 80068a8:	b140      	cbz	r0, 80068bc <__sfmoreglue+0x28>
 80068aa:	2100      	movs	r1, #0
 80068ac:	e9c0 1600 	strd	r1, r6, [r0]
 80068b0:	300c      	adds	r0, #12
 80068b2:	60a0      	str	r0, [r4, #8]
 80068b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068b8:	f7fd fbba 	bl	8004030 <memset>
 80068bc:	4620      	mov	r0, r4
 80068be:	bd70      	pop	{r4, r5, r6, pc}

080068c0 <__sinit>:
 80068c0:	6983      	ldr	r3, [r0, #24]
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	bb33      	cbnz	r3, 8006916 <__sinit+0x56>
 80068c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80068cc:	6503      	str	r3, [r0, #80]	; 0x50
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <__sinit+0x58>)
 80068d0:	4a12      	ldr	r2, [pc, #72]	; (800691c <__sinit+0x5c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6282      	str	r2, [r0, #40]	; 0x28
 80068d6:	4298      	cmp	r0, r3
 80068d8:	bf04      	itt	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	6183      	streq	r3, [r0, #24]
 80068de:	f000 f81f 	bl	8006920 <__sfp>
 80068e2:	6060      	str	r0, [r4, #4]
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 f81b 	bl	8006920 <__sfp>
 80068ea:	60a0      	str	r0, [r4, #8]
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 f817 	bl	8006920 <__sfp>
 80068f2:	2200      	movs	r2, #0
 80068f4:	60e0      	str	r0, [r4, #12]
 80068f6:	2104      	movs	r1, #4
 80068f8:	6860      	ldr	r0, [r4, #4]
 80068fa:	f7ff ffa1 	bl	8006840 <std>
 80068fe:	2201      	movs	r2, #1
 8006900:	2109      	movs	r1, #9
 8006902:	68a0      	ldr	r0, [r4, #8]
 8006904:	f7ff ff9c 	bl	8006840 <std>
 8006908:	2202      	movs	r2, #2
 800690a:	2112      	movs	r1, #18
 800690c:	68e0      	ldr	r0, [r4, #12]
 800690e:	f7ff ff97 	bl	8006840 <std>
 8006912:	2301      	movs	r3, #1
 8006914:	61a3      	str	r3, [r4, #24]
 8006916:	bd10      	pop	{r4, pc}
 8006918:	0800ae48 	.word	0x0800ae48
 800691c:	08006889 	.word	0x08006889

08006920 <__sfp>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <__sfp+0x70>)
 8006924:	4607      	mov	r7, r0
 8006926:	681e      	ldr	r6, [r3, #0]
 8006928:	69b3      	ldr	r3, [r6, #24]
 800692a:	b913      	cbnz	r3, 8006932 <__sfp+0x12>
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ffc7 	bl	80068c0 <__sinit>
 8006932:	3648      	adds	r6, #72	; 0x48
 8006934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	d503      	bpl.n	8006944 <__sfp+0x24>
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	b133      	cbz	r3, 800694e <__sfp+0x2e>
 8006940:	6836      	ldr	r6, [r6, #0]
 8006942:	e7f7      	b.n	8006934 <__sfp+0x14>
 8006944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006948:	b16d      	cbz	r5, 8006966 <__sfp+0x46>
 800694a:	3468      	adds	r4, #104	; 0x68
 800694c:	e7f4      	b.n	8006938 <__sfp+0x18>
 800694e:	2104      	movs	r1, #4
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ff9f 	bl	8006894 <__sfmoreglue>
 8006956:	6030      	str	r0, [r6, #0]
 8006958:	2800      	cmp	r0, #0
 800695a:	d1f1      	bne.n	8006940 <__sfp+0x20>
 800695c:	230c      	movs	r3, #12
 800695e:	4604      	mov	r4, r0
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	4620      	mov	r0, r4
 8006964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <__sfp+0x74>)
 8006968:	6665      	str	r5, [r4, #100]	; 0x64
 800696a:	e9c4 5500 	strd	r5, r5, [r4]
 800696e:	60a5      	str	r5, [r4, #8]
 8006970:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006974:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006978:	2208      	movs	r2, #8
 800697a:	4629      	mov	r1, r5
 800697c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006980:	f7fd fb56 	bl	8004030 <memset>
 8006984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800698c:	e7e9      	b.n	8006962 <__sfp+0x42>
 800698e:	bf00      	nop
 8006990:	0800ae48 	.word	0x0800ae48
 8006994:	ffff0001 	.word	0xffff0001

08006998 <_fwalk_reent>:
 8006998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800699c:	4680      	mov	r8, r0
 800699e:	4689      	mov	r9, r1
 80069a0:	2600      	movs	r6, #0
 80069a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069a6:	b914      	cbnz	r4, 80069ae <_fwalk_reent+0x16>
 80069a8:	4630      	mov	r0, r6
 80069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80069b2:	3f01      	subs	r7, #1
 80069b4:	d501      	bpl.n	80069ba <_fwalk_reent+0x22>
 80069b6:	6824      	ldr	r4, [r4, #0]
 80069b8:	e7f5      	b.n	80069a6 <_fwalk_reent+0xe>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d907      	bls.n	80069d0 <_fwalk_reent+0x38>
 80069c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069c4:	3301      	adds	r3, #1
 80069c6:	d003      	beq.n	80069d0 <_fwalk_reent+0x38>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4640      	mov	r0, r8
 80069cc:	47c8      	blx	r9
 80069ce:	4306      	orrs	r6, r0
 80069d0:	3568      	adds	r5, #104	; 0x68
 80069d2:	e7ee      	b.n	80069b2 <_fwalk_reent+0x1a>

080069d4 <rshift>:
 80069d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d6:	6906      	ldr	r6, [r0, #16]
 80069d8:	114b      	asrs	r3, r1, #5
 80069da:	429e      	cmp	r6, r3
 80069dc:	f100 0414 	add.w	r4, r0, #20
 80069e0:	dd31      	ble.n	8006a46 <rshift+0x72>
 80069e2:	f011 011f 	ands.w	r1, r1, #31
 80069e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80069ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80069ee:	d108      	bne.n	8006a02 <rshift+0x2e>
 80069f0:	4621      	mov	r1, r4
 80069f2:	42b2      	cmp	r2, r6
 80069f4:	460b      	mov	r3, r1
 80069f6:	d211      	bcs.n	8006a1c <rshift+0x48>
 80069f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80069fc:	f841 3b04 	str.w	r3, [r1], #4
 8006a00:	e7f7      	b.n	80069f2 <rshift+0x1e>
 8006a02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006a06:	4623      	mov	r3, r4
 8006a08:	f1c1 0c20 	rsb	ip, r1, #32
 8006a0c:	40cd      	lsrs	r5, r1
 8006a0e:	3204      	adds	r2, #4
 8006a10:	42b2      	cmp	r2, r6
 8006a12:	4617      	mov	r7, r2
 8006a14:	d30d      	bcc.n	8006a32 <rshift+0x5e>
 8006a16:	601d      	str	r5, [r3, #0]
 8006a18:	b105      	cbz	r5, 8006a1c <rshift+0x48>
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	eba3 0204 	sub.w	r2, r3, r4
 8006a22:	bf08      	it	eq
 8006a24:	2300      	moveq	r3, #0
 8006a26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a2a:	6102      	str	r2, [r0, #16]
 8006a2c:	bf08      	it	eq
 8006a2e:	6143      	streq	r3, [r0, #20]
 8006a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a32:	683f      	ldr	r7, [r7, #0]
 8006a34:	fa07 f70c 	lsl.w	r7, r7, ip
 8006a38:	433d      	orrs	r5, r7
 8006a3a:	f843 5b04 	str.w	r5, [r3], #4
 8006a3e:	f852 5b04 	ldr.w	r5, [r2], #4
 8006a42:	40cd      	lsrs	r5, r1
 8006a44:	e7e4      	b.n	8006a10 <rshift+0x3c>
 8006a46:	4623      	mov	r3, r4
 8006a48:	e7e8      	b.n	8006a1c <rshift+0x48>

08006a4a <__hexdig_fun>:
 8006a4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d802      	bhi.n	8006a58 <__hexdig_fun+0xe>
 8006a52:	3820      	subs	r0, #32
 8006a54:	b2c0      	uxtb	r0, r0
 8006a56:	4770      	bx	lr
 8006a58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d801      	bhi.n	8006a64 <__hexdig_fun+0x1a>
 8006a60:	3847      	subs	r0, #71	; 0x47
 8006a62:	e7f7      	b.n	8006a54 <__hexdig_fun+0xa>
 8006a64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a68:	2b05      	cmp	r3, #5
 8006a6a:	d801      	bhi.n	8006a70 <__hexdig_fun+0x26>
 8006a6c:	3827      	subs	r0, #39	; 0x27
 8006a6e:	e7f1      	b.n	8006a54 <__hexdig_fun+0xa>
 8006a70:	2000      	movs	r0, #0
 8006a72:	4770      	bx	lr

08006a74 <__gethex>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	b08b      	sub	sp, #44	; 0x2c
 8006a7a:	9002      	str	r0, [sp, #8]
 8006a7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a7e:	468a      	mov	sl, r1
 8006a80:	4690      	mov	r8, r2
 8006a82:	9306      	str	r3, [sp, #24]
 8006a84:	f000 fae0 	bl	8007048 <__localeconv_l>
 8006a88:	6803      	ldr	r3, [r0, #0]
 8006a8a:	f04f 0b00 	mov.w	fp, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	9303      	str	r3, [sp, #12]
 8006a92:	f7f9 fb5d 	bl	8000150 <strlen>
 8006a96:	9b03      	ldr	r3, [sp, #12]
 8006a98:	9001      	str	r0, [sp, #4]
 8006a9a:	4403      	add	r3, r0
 8006a9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006aa0:	9307      	str	r3, [sp, #28]
 8006aa2:	f8da 3000 	ldr.w	r3, [sl]
 8006aa6:	3302      	adds	r3, #2
 8006aa8:	461f      	mov	r7, r3
 8006aaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006aae:	2830      	cmp	r0, #48	; 0x30
 8006ab0:	d06c      	beq.n	8006b8c <__gethex+0x118>
 8006ab2:	f7ff ffca 	bl	8006a4a <__hexdig_fun>
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d16a      	bne.n	8006b92 <__gethex+0x11e>
 8006abc:	9a01      	ldr	r2, [sp, #4]
 8006abe:	9903      	ldr	r1, [sp, #12]
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f001 fd9c 	bl	80085fe <strncmp>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d166      	bne.n	8006b98 <__gethex+0x124>
 8006aca:	9b01      	ldr	r3, [sp, #4]
 8006acc:	5cf8      	ldrb	r0, [r7, r3]
 8006ace:	18fe      	adds	r6, r7, r3
 8006ad0:	f7ff ffbb 	bl	8006a4a <__hexdig_fun>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d062      	beq.n	8006b9e <__gethex+0x12a>
 8006ad8:	4633      	mov	r3, r6
 8006ada:	7818      	ldrb	r0, [r3, #0]
 8006adc:	461f      	mov	r7, r3
 8006ade:	2830      	cmp	r0, #48	; 0x30
 8006ae0:	f103 0301 	add.w	r3, r3, #1
 8006ae4:	d0f9      	beq.n	8006ada <__gethex+0x66>
 8006ae6:	f7ff ffb0 	bl	8006a4a <__hexdig_fun>
 8006aea:	fab0 f580 	clz	r5, r0
 8006aee:	4634      	mov	r4, r6
 8006af0:	f04f 0b01 	mov.w	fp, #1
 8006af4:	096d      	lsrs	r5, r5, #5
 8006af6:	463a      	mov	r2, r7
 8006af8:	4616      	mov	r6, r2
 8006afa:	7830      	ldrb	r0, [r6, #0]
 8006afc:	3201      	adds	r2, #1
 8006afe:	f7ff ffa4 	bl	8006a4a <__hexdig_fun>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d1f8      	bne.n	8006af8 <__gethex+0x84>
 8006b06:	9a01      	ldr	r2, [sp, #4]
 8006b08:	9903      	ldr	r1, [sp, #12]
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f001 fd77 	bl	80085fe <strncmp>
 8006b10:	b950      	cbnz	r0, 8006b28 <__gethex+0xb4>
 8006b12:	b954      	cbnz	r4, 8006b2a <__gethex+0xb6>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	18f4      	adds	r4, r6, r3
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	7830      	ldrb	r0, [r6, #0]
 8006b1e:	3201      	adds	r2, #1
 8006b20:	f7ff ff93 	bl	8006a4a <__hexdig_fun>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d1f8      	bne.n	8006b1a <__gethex+0xa6>
 8006b28:	b10c      	cbz	r4, 8006b2e <__gethex+0xba>
 8006b2a:	1ba4      	subs	r4, r4, r6
 8006b2c:	00a4      	lsls	r4, r4, #2
 8006b2e:	7833      	ldrb	r3, [r6, #0]
 8006b30:	2b50      	cmp	r3, #80	; 0x50
 8006b32:	d001      	beq.n	8006b38 <__gethex+0xc4>
 8006b34:	2b70      	cmp	r3, #112	; 0x70
 8006b36:	d140      	bne.n	8006bba <__gethex+0x146>
 8006b38:	7873      	ldrb	r3, [r6, #1]
 8006b3a:	2b2b      	cmp	r3, #43	; 0x2b
 8006b3c:	d031      	beq.n	8006ba2 <__gethex+0x12e>
 8006b3e:	2b2d      	cmp	r3, #45	; 0x2d
 8006b40:	d033      	beq.n	8006baa <__gethex+0x136>
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	1c71      	adds	r1, r6, #1
 8006b48:	7808      	ldrb	r0, [r1, #0]
 8006b4a:	f7ff ff7e 	bl	8006a4a <__hexdig_fun>
 8006b4e:	1e43      	subs	r3, r0, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b18      	cmp	r3, #24
 8006b54:	d831      	bhi.n	8006bba <__gethex+0x146>
 8006b56:	f1a0 0210 	sub.w	r2, r0, #16
 8006b5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b5e:	f7ff ff74 	bl	8006a4a <__hexdig_fun>
 8006b62:	1e43      	subs	r3, r0, #1
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b18      	cmp	r3, #24
 8006b68:	d922      	bls.n	8006bb0 <__gethex+0x13c>
 8006b6a:	f1b9 0f00 	cmp.w	r9, #0
 8006b6e:	d000      	beq.n	8006b72 <__gethex+0xfe>
 8006b70:	4252      	negs	r2, r2
 8006b72:	4414      	add	r4, r2
 8006b74:	f8ca 1000 	str.w	r1, [sl]
 8006b78:	b30d      	cbz	r5, 8006bbe <__gethex+0x14a>
 8006b7a:	f1bb 0f00 	cmp.w	fp, #0
 8006b7e:	bf0c      	ite	eq
 8006b80:	2706      	moveq	r7, #6
 8006b82:	2700      	movne	r7, #0
 8006b84:	4638      	mov	r0, r7
 8006b86:	b00b      	add	sp, #44	; 0x2c
 8006b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8c:	f10b 0b01 	add.w	fp, fp, #1
 8006b90:	e78a      	b.n	8006aa8 <__gethex+0x34>
 8006b92:	2500      	movs	r5, #0
 8006b94:	462c      	mov	r4, r5
 8006b96:	e7ae      	b.n	8006af6 <__gethex+0x82>
 8006b98:	463e      	mov	r6, r7
 8006b9a:	2501      	movs	r5, #1
 8006b9c:	e7c7      	b.n	8006b2e <__gethex+0xba>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	e7fb      	b.n	8006b9a <__gethex+0x126>
 8006ba2:	f04f 0900 	mov.w	r9, #0
 8006ba6:	1cb1      	adds	r1, r6, #2
 8006ba8:	e7ce      	b.n	8006b48 <__gethex+0xd4>
 8006baa:	f04f 0901 	mov.w	r9, #1
 8006bae:	e7fa      	b.n	8006ba6 <__gethex+0x132>
 8006bb0:	230a      	movs	r3, #10
 8006bb2:	fb03 0202 	mla	r2, r3, r2, r0
 8006bb6:	3a10      	subs	r2, #16
 8006bb8:	e7cf      	b.n	8006b5a <__gethex+0xe6>
 8006bba:	4631      	mov	r1, r6
 8006bbc:	e7da      	b.n	8006b74 <__gethex+0x100>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	1bf3      	subs	r3, r6, r7
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b07      	cmp	r3, #7
 8006bc6:	dc49      	bgt.n	8006c5c <__gethex+0x1e8>
 8006bc8:	9802      	ldr	r0, [sp, #8]
 8006bca:	f000 fa87 	bl	80070dc <_Balloc>
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	46da      	mov	sl, fp
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	f100 0914 	add.w	r9, r0, #20
 8006bdc:	f1c3 0301 	rsb	r3, r3, #1
 8006be0:	f8cd 9010 	str.w	r9, [sp, #16]
 8006be4:	9308      	str	r3, [sp, #32]
 8006be6:	42b7      	cmp	r7, r6
 8006be8:	d33b      	bcc.n	8006c62 <__gethex+0x1ee>
 8006bea:	9804      	ldr	r0, [sp, #16]
 8006bec:	f840 ab04 	str.w	sl, [r0], #4
 8006bf0:	eba0 0009 	sub.w	r0, r0, r9
 8006bf4:	1080      	asrs	r0, r0, #2
 8006bf6:	6128      	str	r0, [r5, #16]
 8006bf8:	0147      	lsls	r7, r0, #5
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	f000 fb32 	bl	8007264 <__hi0bits>
 8006c00:	f8d8 6000 	ldr.w	r6, [r8]
 8006c04:	1a3f      	subs	r7, r7, r0
 8006c06:	42b7      	cmp	r7, r6
 8006c08:	dd64      	ble.n	8006cd4 <__gethex+0x260>
 8006c0a:	1bbf      	subs	r7, r7, r6
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fe3b 	bl	800788a <__any_on>
 8006c14:	4682      	mov	sl, r0
 8006c16:	b178      	cbz	r0, 8006c38 <__gethex+0x1c4>
 8006c18:	f04f 0a01 	mov.w	sl, #1
 8006c1c:	1e7b      	subs	r3, r7, #1
 8006c1e:	1159      	asrs	r1, r3, #5
 8006c20:	f003 021f 	and.w	r2, r3, #31
 8006c24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006c28:	fa0a f202 	lsl.w	r2, sl, r2
 8006c2c:	420a      	tst	r2, r1
 8006c2e:	d003      	beq.n	8006c38 <__gethex+0x1c4>
 8006c30:	4553      	cmp	r3, sl
 8006c32:	dc46      	bgt.n	8006cc2 <__gethex+0x24e>
 8006c34:	f04f 0a02 	mov.w	sl, #2
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7ff feca 	bl	80069d4 <rshift>
 8006c40:	443c      	add	r4, r7
 8006c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c46:	42a3      	cmp	r3, r4
 8006c48:	da52      	bge.n	8006cf0 <__gethex+0x27c>
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	9802      	ldr	r0, [sp, #8]
 8006c4e:	f000 fa79 	bl	8007144 <_Bfree>
 8006c52:	2300      	movs	r3, #0
 8006c54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c56:	27a3      	movs	r7, #163	; 0xa3
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e793      	b.n	8006b84 <__gethex+0x110>
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	105b      	asrs	r3, r3, #1
 8006c60:	e7b0      	b.n	8006bc4 <__gethex+0x150>
 8006c62:	1e73      	subs	r3, r6, #1
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <__gethex+0x22e>
 8006c70:	f1bb 0f20 	cmp.w	fp, #32
 8006c74:	d107      	bne.n	8006c86 <__gethex+0x212>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	f8c3 a000 	str.w	sl, [r3]
 8006c7c:	f04f 0a00 	mov.w	sl, #0
 8006c80:	46d3      	mov	fp, sl
 8006c82:	3304      	adds	r3, #4
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c8a:	f7ff fede 	bl	8006a4a <__hexdig_fun>
 8006c8e:	f000 000f 	and.w	r0, r0, #15
 8006c92:	fa00 f00b 	lsl.w	r0, r0, fp
 8006c96:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c9a:	f10b 0b04 	add.w	fp, fp, #4
 8006c9e:	9b05      	ldr	r3, [sp, #20]
 8006ca0:	e00d      	b.n	8006cbe <__gethex+0x24a>
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	9a08      	ldr	r2, [sp, #32]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	42bb      	cmp	r3, r7
 8006caa:	d3e1      	bcc.n	8006c70 <__gethex+0x1fc>
 8006cac:	4618      	mov	r0, r3
 8006cae:	9a01      	ldr	r2, [sp, #4]
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cb4:	f001 fca3 	bl	80085fe <strncmp>
 8006cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d1d8      	bne.n	8006c70 <__gethex+0x1fc>
 8006cbe:	461e      	mov	r6, r3
 8006cc0:	e791      	b.n	8006be6 <__gethex+0x172>
 8006cc2:	1eb9      	subs	r1, r7, #2
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 fde0 	bl	800788a <__any_on>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0b2      	beq.n	8006c34 <__gethex+0x1c0>
 8006cce:	f04f 0a03 	mov.w	sl, #3
 8006cd2:	e7b1      	b.n	8006c38 <__gethex+0x1c4>
 8006cd4:	da09      	bge.n	8006cea <__gethex+0x276>
 8006cd6:	1bf7      	subs	r7, r6, r7
 8006cd8:	4629      	mov	r1, r5
 8006cda:	463a      	mov	r2, r7
 8006cdc:	9802      	ldr	r0, [sp, #8]
 8006cde:	f000 fbfb 	bl	80074d8 <__lshift>
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	1be4      	subs	r4, r4, r7
 8006ce6:	f100 0914 	add.w	r9, r0, #20
 8006cea:	f04f 0a00 	mov.w	sl, #0
 8006cee:	e7a8      	b.n	8006c42 <__gethex+0x1ce>
 8006cf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006cf4:	42a0      	cmp	r0, r4
 8006cf6:	dd6b      	ble.n	8006dd0 <__gethex+0x35c>
 8006cf8:	1b04      	subs	r4, r0, r4
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	dc2e      	bgt.n	8006d5c <__gethex+0x2e8>
 8006cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d022      	beq.n	8006d4c <__gethex+0x2d8>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d024      	beq.n	8006d54 <__gethex+0x2e0>
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d115      	bne.n	8006d3a <__gethex+0x2c6>
 8006d0e:	42a6      	cmp	r6, r4
 8006d10:	d113      	bne.n	8006d3a <__gethex+0x2c6>
 8006d12:	2e01      	cmp	r6, #1
 8006d14:	dc0b      	bgt.n	8006d2e <__gethex+0x2ba>
 8006d16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d1a:	9a06      	ldr	r2, [sp, #24]
 8006d1c:	2762      	movs	r7, #98	; 0x62
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	612b      	str	r3, [r5, #16]
 8006d24:	f8c9 3000 	str.w	r3, [r9]
 8006d28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d2a:	601d      	str	r5, [r3, #0]
 8006d2c:	e72a      	b.n	8006b84 <__gethex+0x110>
 8006d2e:	1e71      	subs	r1, r6, #1
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 fdaa 	bl	800788a <__any_on>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d1ed      	bne.n	8006d16 <__gethex+0x2a2>
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	9802      	ldr	r0, [sp, #8]
 8006d3e:	f000 fa01 	bl	8007144 <_Bfree>
 8006d42:	2300      	movs	r3, #0
 8006d44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d46:	2750      	movs	r7, #80	; 0x50
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	e71b      	b.n	8006b84 <__gethex+0x110>
 8006d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0e1      	beq.n	8006d16 <__gethex+0x2a2>
 8006d52:	e7f2      	b.n	8006d3a <__gethex+0x2c6>
 8006d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1dd      	bne.n	8006d16 <__gethex+0x2a2>
 8006d5a:	e7ee      	b.n	8006d3a <__gethex+0x2c6>
 8006d5c:	1e67      	subs	r7, r4, #1
 8006d5e:	f1ba 0f00 	cmp.w	sl, #0
 8006d62:	d132      	bne.n	8006dca <__gethex+0x356>
 8006d64:	b127      	cbz	r7, 8006d70 <__gethex+0x2fc>
 8006d66:	4639      	mov	r1, r7
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 fd8e 	bl	800788a <__any_on>
 8006d6e:	4682      	mov	sl, r0
 8006d70:	2301      	movs	r3, #1
 8006d72:	117a      	asrs	r2, r7, #5
 8006d74:	f007 071f 	and.w	r7, r7, #31
 8006d78:	fa03 f707 	lsl.w	r7, r3, r7
 8006d7c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006d80:	4621      	mov	r1, r4
 8006d82:	421f      	tst	r7, r3
 8006d84:	f04f 0702 	mov.w	r7, #2
 8006d88:	4628      	mov	r0, r5
 8006d8a:	bf18      	it	ne
 8006d8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d90:	1b36      	subs	r6, r6, r4
 8006d92:	f7ff fe1f 	bl	80069d4 <rshift>
 8006d96:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006d9a:	f1ba 0f00 	cmp.w	sl, #0
 8006d9e:	d048      	beq.n	8006e32 <__gethex+0x3be>
 8006da0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d015      	beq.n	8006dd4 <__gethex+0x360>
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d017      	beq.n	8006ddc <__gethex+0x368>
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d109      	bne.n	8006dc4 <__gethex+0x350>
 8006db0:	f01a 0f02 	tst.w	sl, #2
 8006db4:	d006      	beq.n	8006dc4 <__gethex+0x350>
 8006db6:	f8d9 3000 	ldr.w	r3, [r9]
 8006dba:	ea4a 0a03 	orr.w	sl, sl, r3
 8006dbe:	f01a 0f01 	tst.w	sl, #1
 8006dc2:	d10e      	bne.n	8006de2 <__gethex+0x36e>
 8006dc4:	f047 0710 	orr.w	r7, r7, #16
 8006dc8:	e033      	b.n	8006e32 <__gethex+0x3be>
 8006dca:	f04f 0a01 	mov.w	sl, #1
 8006dce:	e7cf      	b.n	8006d70 <__gethex+0x2fc>
 8006dd0:	2701      	movs	r7, #1
 8006dd2:	e7e2      	b.n	8006d9a <__gethex+0x326>
 8006dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dd6:	f1c3 0301 	rsb	r3, r3, #1
 8006dda:	9315      	str	r3, [sp, #84]	; 0x54
 8006ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d0f0      	beq.n	8006dc4 <__gethex+0x350>
 8006de2:	f04f 0c00 	mov.w	ip, #0
 8006de6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006dea:	f105 0314 	add.w	r3, r5, #20
 8006dee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006df2:	eb03 010a 	add.w	r1, r3, sl
 8006df6:	4618      	mov	r0, r3
 8006df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e00:	d01c      	beq.n	8006e3c <__gethex+0x3c8>
 8006e02:	3201      	adds	r2, #1
 8006e04:	6002      	str	r2, [r0, #0]
 8006e06:	2f02      	cmp	r7, #2
 8006e08:	f105 0314 	add.w	r3, r5, #20
 8006e0c:	d138      	bne.n	8006e80 <__gethex+0x40c>
 8006e0e:	f8d8 2000 	ldr.w	r2, [r8]
 8006e12:	3a01      	subs	r2, #1
 8006e14:	42b2      	cmp	r2, r6
 8006e16:	d10a      	bne.n	8006e2e <__gethex+0x3ba>
 8006e18:	2201      	movs	r2, #1
 8006e1a:	1171      	asrs	r1, r6, #5
 8006e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e20:	f006 061f 	and.w	r6, r6, #31
 8006e24:	fa02 f606 	lsl.w	r6, r2, r6
 8006e28:	421e      	tst	r6, r3
 8006e2a:	bf18      	it	ne
 8006e2c:	4617      	movne	r7, r2
 8006e2e:	f047 0720 	orr.w	r7, r7, #32
 8006e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e34:	601d      	str	r5, [r3, #0]
 8006e36:	9b06      	ldr	r3, [sp, #24]
 8006e38:	601c      	str	r4, [r3, #0]
 8006e3a:	e6a3      	b.n	8006b84 <__gethex+0x110>
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e42:	d8d8      	bhi.n	8006df6 <__gethex+0x382>
 8006e44:	68ab      	ldr	r3, [r5, #8]
 8006e46:	4599      	cmp	r9, r3
 8006e48:	db12      	blt.n	8006e70 <__gethex+0x3fc>
 8006e4a:	6869      	ldr	r1, [r5, #4]
 8006e4c:	9802      	ldr	r0, [sp, #8]
 8006e4e:	3101      	adds	r1, #1
 8006e50:	f000 f944 	bl	80070dc <_Balloc>
 8006e54:	4683      	mov	fp, r0
 8006e56:	692a      	ldr	r2, [r5, #16]
 8006e58:	f105 010c 	add.w	r1, r5, #12
 8006e5c:	3202      	adds	r2, #2
 8006e5e:	0092      	lsls	r2, r2, #2
 8006e60:	300c      	adds	r0, #12
 8006e62:	f7fd f8c1 	bl	8003fe8 <memcpy>
 8006e66:	4629      	mov	r1, r5
 8006e68:	9802      	ldr	r0, [sp, #8]
 8006e6a:	f000 f96b 	bl	8007144 <_Bfree>
 8006e6e:	465d      	mov	r5, fp
 8006e70:	692b      	ldr	r3, [r5, #16]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	612a      	str	r2, [r5, #16]
 8006e76:	2201      	movs	r2, #1
 8006e78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006e7c:	615a      	str	r2, [r3, #20]
 8006e7e:	e7c2      	b.n	8006e06 <__gethex+0x392>
 8006e80:	692a      	ldr	r2, [r5, #16]
 8006e82:	454a      	cmp	r2, r9
 8006e84:	dd0b      	ble.n	8006e9e <__gethex+0x42a>
 8006e86:	2101      	movs	r1, #1
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7ff fda3 	bl	80069d4 <rshift>
 8006e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e92:	3401      	adds	r4, #1
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	f6ff aed8 	blt.w	8006c4a <__gethex+0x1d6>
 8006e9a:	2701      	movs	r7, #1
 8006e9c:	e7c7      	b.n	8006e2e <__gethex+0x3ba>
 8006e9e:	f016 061f 	ands.w	r6, r6, #31
 8006ea2:	d0fa      	beq.n	8006e9a <__gethex+0x426>
 8006ea4:	449a      	add	sl, r3
 8006ea6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006eaa:	f000 f9db 	bl	8007264 <__hi0bits>
 8006eae:	f1c6 0620 	rsb	r6, r6, #32
 8006eb2:	42b0      	cmp	r0, r6
 8006eb4:	dbe7      	blt.n	8006e86 <__gethex+0x412>
 8006eb6:	e7f0      	b.n	8006e9a <__gethex+0x426>

08006eb8 <L_shift>:
 8006eb8:	f1c2 0208 	rsb	r2, r2, #8
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	f1c2 0620 	rsb	r6, r2, #32
 8006ec4:	6843      	ldr	r3, [r0, #4]
 8006ec6:	6804      	ldr	r4, [r0, #0]
 8006ec8:	fa03 f506 	lsl.w	r5, r3, r6
 8006ecc:	432c      	orrs	r4, r5
 8006ece:	40d3      	lsrs	r3, r2
 8006ed0:	6004      	str	r4, [r0, #0]
 8006ed2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ed6:	4288      	cmp	r0, r1
 8006ed8:	d3f4      	bcc.n	8006ec4 <L_shift+0xc>
 8006eda:	bd70      	pop	{r4, r5, r6, pc}

08006edc <__match>:
 8006edc:	b530      	push	{r4, r5, lr}
 8006ede:	6803      	ldr	r3, [r0, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee6:	b914      	cbnz	r4, 8006eee <__match+0x12>
 8006ee8:	6003      	str	r3, [r0, #0]
 8006eea:	2001      	movs	r0, #1
 8006eec:	bd30      	pop	{r4, r5, pc}
 8006eee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ef6:	2d19      	cmp	r5, #25
 8006ef8:	bf98      	it	ls
 8006efa:	3220      	addls	r2, #32
 8006efc:	42a2      	cmp	r2, r4
 8006efe:	d0f0      	beq.n	8006ee2 <__match+0x6>
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7f3      	b.n	8006eec <__match+0x10>

08006f04 <__hexnan>:
 8006f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f08:	2500      	movs	r5, #0
 8006f0a:	680b      	ldr	r3, [r1, #0]
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	115f      	asrs	r7, r3, #5
 8006f10:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006f14:	f013 031f 	ands.w	r3, r3, #31
 8006f18:	bf18      	it	ne
 8006f1a:	3704      	addne	r7, #4
 8006f1c:	1f3e      	subs	r6, r7, #4
 8006f1e:	4690      	mov	r8, r2
 8006f20:	46b1      	mov	r9, r6
 8006f22:	4634      	mov	r4, r6
 8006f24:	46ab      	mov	fp, r5
 8006f26:	b087      	sub	sp, #28
 8006f28:	6801      	ldr	r1, [r0, #0]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	f847 5c04 	str.w	r5, [r7, #-4]
 8006f30:	9502      	str	r5, [sp, #8]
 8006f32:	784a      	ldrb	r2, [r1, #1]
 8006f34:	1c4b      	adds	r3, r1, #1
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	b342      	cbz	r2, 8006f8c <__hexnan+0x88>
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	9105      	str	r1, [sp, #20]
 8006f3e:	9204      	str	r2, [sp, #16]
 8006f40:	f7ff fd83 	bl	8006a4a <__hexdig_fun>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d143      	bne.n	8006fd0 <__hexnan+0xcc>
 8006f48:	9a04      	ldr	r2, [sp, #16]
 8006f4a:	9905      	ldr	r1, [sp, #20]
 8006f4c:	2a20      	cmp	r2, #32
 8006f4e:	d818      	bhi.n	8006f82 <__hexnan+0x7e>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	459b      	cmp	fp, r3
 8006f54:	dd13      	ble.n	8006f7e <__hexnan+0x7a>
 8006f56:	454c      	cmp	r4, r9
 8006f58:	d206      	bcs.n	8006f68 <__hexnan+0x64>
 8006f5a:	2d07      	cmp	r5, #7
 8006f5c:	dc04      	bgt.n	8006f68 <__hexnan+0x64>
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4649      	mov	r1, r9
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff ffa8 	bl	8006eb8 <L_shift>
 8006f68:	4544      	cmp	r4, r8
 8006f6a:	d944      	bls.n	8006ff6 <__hexnan+0xf2>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f1a4 0904 	sub.w	r9, r4, #4
 8006f72:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f76:	461d      	mov	r5, r3
 8006f78:	464c      	mov	r4, r9
 8006f7a:	f8cd b008 	str.w	fp, [sp, #8]
 8006f7e:	9903      	ldr	r1, [sp, #12]
 8006f80:	e7d7      	b.n	8006f32 <__hexnan+0x2e>
 8006f82:	2a29      	cmp	r2, #41	; 0x29
 8006f84:	d14a      	bne.n	800701c <__hexnan+0x118>
 8006f86:	3102      	adds	r1, #2
 8006f88:	f8ca 1000 	str.w	r1, [sl]
 8006f8c:	f1bb 0f00 	cmp.w	fp, #0
 8006f90:	d044      	beq.n	800701c <__hexnan+0x118>
 8006f92:	454c      	cmp	r4, r9
 8006f94:	d206      	bcs.n	8006fa4 <__hexnan+0xa0>
 8006f96:	2d07      	cmp	r5, #7
 8006f98:	dc04      	bgt.n	8006fa4 <__hexnan+0xa0>
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f7ff ff8a 	bl	8006eb8 <L_shift>
 8006fa4:	4544      	cmp	r4, r8
 8006fa6:	d928      	bls.n	8006ffa <__hexnan+0xf6>
 8006fa8:	4643      	mov	r3, r8
 8006faa:	f854 2b04 	ldr.w	r2, [r4], #4
 8006fae:	42a6      	cmp	r6, r4
 8006fb0:	f843 2b04 	str.w	r2, [r3], #4
 8006fb4:	d2f9      	bcs.n	8006faa <__hexnan+0xa6>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f843 2b04 	str.w	r2, [r3], #4
 8006fbc:	429e      	cmp	r6, r3
 8006fbe:	d2fb      	bcs.n	8006fb8 <__hexnan+0xb4>
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	b91b      	cbnz	r3, 8006fcc <__hexnan+0xc8>
 8006fc4:	4546      	cmp	r6, r8
 8006fc6:	d127      	bne.n	8007018 <__hexnan+0x114>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6033      	str	r3, [r6, #0]
 8006fcc:	2005      	movs	r0, #5
 8006fce:	e026      	b.n	800701e <__hexnan+0x11a>
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	2d08      	cmp	r5, #8
 8006fd4:	f10b 0b01 	add.w	fp, fp, #1
 8006fd8:	dd06      	ble.n	8006fe8 <__hexnan+0xe4>
 8006fda:	4544      	cmp	r4, r8
 8006fdc:	d9cf      	bls.n	8006f7e <__hexnan+0x7a>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2501      	movs	r5, #1
 8006fe2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fe6:	3c04      	subs	r4, #4
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	f000 000f 	and.w	r0, r0, #15
 8006fee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006ff2:	6020      	str	r0, [r4, #0]
 8006ff4:	e7c3      	b.n	8006f7e <__hexnan+0x7a>
 8006ff6:	2508      	movs	r5, #8
 8006ff8:	e7c1      	b.n	8006f7e <__hexnan+0x7a>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0df      	beq.n	8006fc0 <__hexnan+0xbc>
 8007000:	f04f 32ff 	mov.w	r2, #4294967295
 8007004:	f1c3 0320 	rsb	r3, r3, #32
 8007008:	fa22 f303 	lsr.w	r3, r2, r3
 800700c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007010:	401a      	ands	r2, r3
 8007012:	f847 2c04 	str.w	r2, [r7, #-4]
 8007016:	e7d3      	b.n	8006fc0 <__hexnan+0xbc>
 8007018:	3e04      	subs	r6, #4
 800701a:	e7d1      	b.n	8006fc0 <__hexnan+0xbc>
 800701c:	2004      	movs	r0, #4
 800701e:	b007      	add	sp, #28
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007024 <__locale_ctype_ptr_l>:
 8007024:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007028:	4770      	bx	lr
	...

0800702c <__locale_ctype_ptr>:
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <__locale_ctype_ptr+0x14>)
 800702e:	4a05      	ldr	r2, [pc, #20]	; (8007044 <__locale_ctype_ptr+0x18>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf08      	it	eq
 8007038:	4613      	moveq	r3, r2
 800703a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800703e:	4770      	bx	lr
 8007040:	20000024 	.word	0x20000024
 8007044:	20000088 	.word	0x20000088

08007048 <__localeconv_l>:
 8007048:	30f0      	adds	r0, #240	; 0xf0
 800704a:	4770      	bx	lr

0800704c <_localeconv_r>:
 800704c:	4b04      	ldr	r3, [pc, #16]	; (8007060 <_localeconv_r+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a18      	ldr	r0, [r3, #32]
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <_localeconv_r+0x18>)
 8007054:	2800      	cmp	r0, #0
 8007056:	bf08      	it	eq
 8007058:	4618      	moveq	r0, r3
 800705a:	30f0      	adds	r0, #240	; 0xf0
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000024 	.word	0x20000024
 8007064:	20000088 	.word	0x20000088

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4605      	mov	r5, r0
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	2200      	movs	r2, #0
 8007072:	4c05      	ldr	r4, [pc, #20]	; (8007088 <_lseek_r+0x20>)
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fc ff3e 	bl	8003ef8 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	602b      	str	r3, [r5, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	200008d0 	.word	0x200008d0

0800708c <malloc>:
 800708c:	4b02      	ldr	r3, [pc, #8]	; (8007098 <malloc+0xc>)
 800708e:	4601      	mov	r1, r0
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	f000 bc75 	b.w	8007980 <_malloc_r>
 8007096:	bf00      	nop
 8007098:	20000024 	.word	0x20000024

0800709c <__ascii_mbtowc>:
 800709c:	b082      	sub	sp, #8
 800709e:	b901      	cbnz	r1, 80070a2 <__ascii_mbtowc+0x6>
 80070a0:	a901      	add	r1, sp, #4
 80070a2:	b142      	cbz	r2, 80070b6 <__ascii_mbtowc+0x1a>
 80070a4:	b14b      	cbz	r3, 80070ba <__ascii_mbtowc+0x1e>
 80070a6:	7813      	ldrb	r3, [r2, #0]
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	1c10      	adds	r0, r2, #0
 80070ae:	bf18      	it	ne
 80070b0:	2001      	movne	r0, #1
 80070b2:	b002      	add	sp, #8
 80070b4:	4770      	bx	lr
 80070b6:	4610      	mov	r0, r2
 80070b8:	e7fb      	b.n	80070b2 <__ascii_mbtowc+0x16>
 80070ba:	f06f 0001 	mvn.w	r0, #1
 80070be:	e7f8      	b.n	80070b2 <__ascii_mbtowc+0x16>

080070c0 <memchr>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	b2c9      	uxtb	r1, r1
 80070c4:	4402      	add	r2, r0
 80070c6:	4290      	cmp	r0, r2
 80070c8:	4603      	mov	r3, r0
 80070ca:	d101      	bne.n	80070d0 <memchr+0x10>
 80070cc:	2300      	movs	r3, #0
 80070ce:	e003      	b.n	80070d8 <memchr+0x18>
 80070d0:	781c      	ldrb	r4, [r3, #0]
 80070d2:	3001      	adds	r0, #1
 80070d4:	428c      	cmp	r4, r1
 80070d6:	d1f6      	bne.n	80070c6 <memchr+0x6>
 80070d8:	4618      	mov	r0, r3
 80070da:	bd10      	pop	{r4, pc}

080070dc <_Balloc>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070e0:	4604      	mov	r4, r0
 80070e2:	460e      	mov	r6, r1
 80070e4:	b93d      	cbnz	r5, 80070f6 <_Balloc+0x1a>
 80070e6:	2010      	movs	r0, #16
 80070e8:	f7ff ffd0 	bl	800708c <malloc>
 80070ec:	6260      	str	r0, [r4, #36]	; 0x24
 80070ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070f2:	6005      	str	r5, [r0, #0]
 80070f4:	60c5      	str	r5, [r0, #12]
 80070f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070f8:	68eb      	ldr	r3, [r5, #12]
 80070fa:	b183      	cbz	r3, 800711e <_Balloc+0x42>
 80070fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007104:	b9b8      	cbnz	r0, 8007136 <_Balloc+0x5a>
 8007106:	2101      	movs	r1, #1
 8007108:	fa01 f506 	lsl.w	r5, r1, r6
 800710c:	1d6a      	adds	r2, r5, #5
 800710e:	0092      	lsls	r2, r2, #2
 8007110:	4620      	mov	r0, r4
 8007112:	f000 fbdb 	bl	80078cc <_calloc_r>
 8007116:	b160      	cbz	r0, 8007132 <_Balloc+0x56>
 8007118:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800711c:	e00e      	b.n	800713c <_Balloc+0x60>
 800711e:	2221      	movs	r2, #33	; 0x21
 8007120:	2104      	movs	r1, #4
 8007122:	4620      	mov	r0, r4
 8007124:	f000 fbd2 	bl	80078cc <_calloc_r>
 8007128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800712a:	60e8      	str	r0, [r5, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e4      	bne.n	80070fc <_Balloc+0x20>
 8007132:	2000      	movs	r0, #0
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	6802      	ldr	r2, [r0, #0]
 8007138:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800713c:	2300      	movs	r3, #0
 800713e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007142:	e7f7      	b.n	8007134 <_Balloc+0x58>

08007144 <_Bfree>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007148:	4606      	mov	r6, r0
 800714a:	460d      	mov	r5, r1
 800714c:	b93c      	cbnz	r4, 800715e <_Bfree+0x1a>
 800714e:	2010      	movs	r0, #16
 8007150:	f7ff ff9c 	bl	800708c <malloc>
 8007154:	6270      	str	r0, [r6, #36]	; 0x24
 8007156:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800715a:	6004      	str	r4, [r0, #0]
 800715c:	60c4      	str	r4, [r0, #12]
 800715e:	b13d      	cbz	r5, 8007170 <_Bfree+0x2c>
 8007160:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007162:	686a      	ldr	r2, [r5, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800716a:	6029      	str	r1, [r5, #0]
 800716c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007170:	bd70      	pop	{r4, r5, r6, pc}

08007172 <__multadd>:
 8007172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	461f      	mov	r7, r3
 8007178:	4606      	mov	r6, r0
 800717a:	460c      	mov	r4, r1
 800717c:	2300      	movs	r3, #0
 800717e:	690d      	ldr	r5, [r1, #16]
 8007180:	f101 0c14 	add.w	ip, r1, #20
 8007184:	f8dc 0000 	ldr.w	r0, [ip]
 8007188:	3301      	adds	r3, #1
 800718a:	b281      	uxth	r1, r0
 800718c:	fb02 7101 	mla	r1, r2, r1, r7
 8007190:	0c00      	lsrs	r0, r0, #16
 8007192:	0c0f      	lsrs	r7, r1, #16
 8007194:	fb02 7000 	mla	r0, r2, r0, r7
 8007198:	b289      	uxth	r1, r1
 800719a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800719e:	429d      	cmp	r5, r3
 80071a0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071a4:	f84c 1b04 	str.w	r1, [ip], #4
 80071a8:	dcec      	bgt.n	8007184 <__multadd+0x12>
 80071aa:	b1d7      	cbz	r7, 80071e2 <__multadd+0x70>
 80071ac:	68a3      	ldr	r3, [r4, #8]
 80071ae:	42ab      	cmp	r3, r5
 80071b0:	dc12      	bgt.n	80071d8 <__multadd+0x66>
 80071b2:	6861      	ldr	r1, [r4, #4]
 80071b4:	4630      	mov	r0, r6
 80071b6:	3101      	adds	r1, #1
 80071b8:	f7ff ff90 	bl	80070dc <_Balloc>
 80071bc:	4680      	mov	r8, r0
 80071be:	6922      	ldr	r2, [r4, #16]
 80071c0:	f104 010c 	add.w	r1, r4, #12
 80071c4:	3202      	adds	r2, #2
 80071c6:	0092      	lsls	r2, r2, #2
 80071c8:	300c      	adds	r0, #12
 80071ca:	f7fc ff0d 	bl	8003fe8 <memcpy>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff ffb7 	bl	8007144 <_Bfree>
 80071d6:	4644      	mov	r4, r8
 80071d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071dc:	3501      	adds	r5, #1
 80071de:	615f      	str	r7, [r3, #20]
 80071e0:	6125      	str	r5, [r4, #16]
 80071e2:	4620      	mov	r0, r4
 80071e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071e8 <__s2b>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4615      	mov	r5, r2
 80071ee:	2209      	movs	r2, #9
 80071f0:	461f      	mov	r7, r3
 80071f2:	3308      	adds	r3, #8
 80071f4:	460c      	mov	r4, r1
 80071f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fa:	4606      	mov	r6, r0
 80071fc:	2201      	movs	r2, #1
 80071fe:	2100      	movs	r1, #0
 8007200:	429a      	cmp	r2, r3
 8007202:	db20      	blt.n	8007246 <__s2b+0x5e>
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ff69 	bl	80070dc <_Balloc>
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	2d09      	cmp	r5, #9
 800720e:	6143      	str	r3, [r0, #20]
 8007210:	f04f 0301 	mov.w	r3, #1
 8007214:	6103      	str	r3, [r0, #16]
 8007216:	dd19      	ble.n	800724c <__s2b+0x64>
 8007218:	f104 0809 	add.w	r8, r4, #9
 800721c:	46c1      	mov	r9, r8
 800721e:	442c      	add	r4, r5
 8007220:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007224:	4601      	mov	r1, r0
 8007226:	3b30      	subs	r3, #48	; 0x30
 8007228:	220a      	movs	r2, #10
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff ffa1 	bl	8007172 <__multadd>
 8007230:	45a1      	cmp	r9, r4
 8007232:	d1f5      	bne.n	8007220 <__s2b+0x38>
 8007234:	eb08 0405 	add.w	r4, r8, r5
 8007238:	3c08      	subs	r4, #8
 800723a:	1b2d      	subs	r5, r5, r4
 800723c:	1963      	adds	r3, r4, r5
 800723e:	42bb      	cmp	r3, r7
 8007240:	db07      	blt.n	8007252 <__s2b+0x6a>
 8007242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007246:	0052      	lsls	r2, r2, #1
 8007248:	3101      	adds	r1, #1
 800724a:	e7d9      	b.n	8007200 <__s2b+0x18>
 800724c:	340a      	adds	r4, #10
 800724e:	2509      	movs	r5, #9
 8007250:	e7f3      	b.n	800723a <__s2b+0x52>
 8007252:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007256:	4601      	mov	r1, r0
 8007258:	3b30      	subs	r3, #48	; 0x30
 800725a:	220a      	movs	r2, #10
 800725c:	4630      	mov	r0, r6
 800725e:	f7ff ff88 	bl	8007172 <__multadd>
 8007262:	e7eb      	b.n	800723c <__s2b+0x54>

08007264 <__hi0bits>:
 8007264:	0c02      	lsrs	r2, r0, #16
 8007266:	0412      	lsls	r2, r2, #16
 8007268:	4603      	mov	r3, r0
 800726a:	b9b2      	cbnz	r2, 800729a <__hi0bits+0x36>
 800726c:	0403      	lsls	r3, r0, #16
 800726e:	2010      	movs	r0, #16
 8007270:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007274:	bf04      	itt	eq
 8007276:	021b      	lsleq	r3, r3, #8
 8007278:	3008      	addeq	r0, #8
 800727a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800727e:	bf04      	itt	eq
 8007280:	011b      	lsleq	r3, r3, #4
 8007282:	3004      	addeq	r0, #4
 8007284:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007288:	bf04      	itt	eq
 800728a:	009b      	lsleq	r3, r3, #2
 800728c:	3002      	addeq	r0, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	db06      	blt.n	80072a0 <__hi0bits+0x3c>
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	d503      	bpl.n	800729e <__hi0bits+0x3a>
 8007296:	3001      	adds	r0, #1
 8007298:	4770      	bx	lr
 800729a:	2000      	movs	r0, #0
 800729c:	e7e8      	b.n	8007270 <__hi0bits+0xc>
 800729e:	2020      	movs	r0, #32
 80072a0:	4770      	bx	lr

080072a2 <__lo0bits>:
 80072a2:	6803      	ldr	r3, [r0, #0]
 80072a4:	4601      	mov	r1, r0
 80072a6:	f013 0207 	ands.w	r2, r3, #7
 80072aa:	d00b      	beq.n	80072c4 <__lo0bits+0x22>
 80072ac:	07da      	lsls	r2, r3, #31
 80072ae:	d423      	bmi.n	80072f8 <__lo0bits+0x56>
 80072b0:	0798      	lsls	r0, r3, #30
 80072b2:	bf49      	itett	mi
 80072b4:	085b      	lsrmi	r3, r3, #1
 80072b6:	089b      	lsrpl	r3, r3, #2
 80072b8:	2001      	movmi	r0, #1
 80072ba:	600b      	strmi	r3, [r1, #0]
 80072bc:	bf5c      	itt	pl
 80072be:	600b      	strpl	r3, [r1, #0]
 80072c0:	2002      	movpl	r0, #2
 80072c2:	4770      	bx	lr
 80072c4:	b298      	uxth	r0, r3
 80072c6:	b9a8      	cbnz	r0, 80072f4 <__lo0bits+0x52>
 80072c8:	2010      	movs	r0, #16
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072d0:	bf04      	itt	eq
 80072d2:	0a1b      	lsreq	r3, r3, #8
 80072d4:	3008      	addeq	r0, #8
 80072d6:	071a      	lsls	r2, r3, #28
 80072d8:	bf04      	itt	eq
 80072da:	091b      	lsreq	r3, r3, #4
 80072dc:	3004      	addeq	r0, #4
 80072de:	079a      	lsls	r2, r3, #30
 80072e0:	bf04      	itt	eq
 80072e2:	089b      	lsreq	r3, r3, #2
 80072e4:	3002      	addeq	r0, #2
 80072e6:	07da      	lsls	r2, r3, #31
 80072e8:	d402      	bmi.n	80072f0 <__lo0bits+0x4e>
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	d006      	beq.n	80072fc <__lo0bits+0x5a>
 80072ee:	3001      	adds	r0, #1
 80072f0:	600b      	str	r3, [r1, #0]
 80072f2:	4770      	bx	lr
 80072f4:	4610      	mov	r0, r2
 80072f6:	e7e9      	b.n	80072cc <__lo0bits+0x2a>
 80072f8:	2000      	movs	r0, #0
 80072fa:	4770      	bx	lr
 80072fc:	2020      	movs	r0, #32
 80072fe:	4770      	bx	lr

08007300 <__i2b>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	2101      	movs	r1, #1
 8007306:	f7ff fee9 	bl	80070dc <_Balloc>
 800730a:	2201      	movs	r2, #1
 800730c:	6144      	str	r4, [r0, #20]
 800730e:	6102      	str	r2, [r0, #16]
 8007310:	bd10      	pop	{r4, pc}

08007312 <__multiply>:
 8007312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007316:	4614      	mov	r4, r2
 8007318:	690a      	ldr	r2, [r1, #16]
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	4688      	mov	r8, r1
 800731e:	429a      	cmp	r2, r3
 8007320:	bfbe      	ittt	lt
 8007322:	460b      	movlt	r3, r1
 8007324:	46a0      	movlt	r8, r4
 8007326:	461c      	movlt	r4, r3
 8007328:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800732c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007330:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007334:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007338:	eb07 0609 	add.w	r6, r7, r9
 800733c:	42b3      	cmp	r3, r6
 800733e:	bfb8      	it	lt
 8007340:	3101      	addlt	r1, #1
 8007342:	f7ff fecb 	bl	80070dc <_Balloc>
 8007346:	f100 0514 	add.w	r5, r0, #20
 800734a:	462b      	mov	r3, r5
 800734c:	2200      	movs	r2, #0
 800734e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007352:	4573      	cmp	r3, lr
 8007354:	d316      	bcc.n	8007384 <__multiply+0x72>
 8007356:	f104 0214 	add.w	r2, r4, #20
 800735a:	f108 0114 	add.w	r1, r8, #20
 800735e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007362:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	9b00      	ldr	r3, [sp, #0]
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	4293      	cmp	r3, r2
 800736e:	d80c      	bhi.n	800738a <__multiply+0x78>
 8007370:	2e00      	cmp	r6, #0
 8007372:	dd03      	ble.n	800737c <__multiply+0x6a>
 8007374:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05d      	beq.n	8007438 <__multiply+0x126>
 800737c:	6106      	str	r6, [r0, #16]
 800737e:	b003      	add	sp, #12
 8007380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007384:	f843 2b04 	str.w	r2, [r3], #4
 8007388:	e7e3      	b.n	8007352 <__multiply+0x40>
 800738a:	f8b2 b000 	ldrh.w	fp, [r2]
 800738e:	f1bb 0f00 	cmp.w	fp, #0
 8007392:	d023      	beq.n	80073dc <__multiply+0xca>
 8007394:	4689      	mov	r9, r1
 8007396:	46ac      	mov	ip, r5
 8007398:	f04f 0800 	mov.w	r8, #0
 800739c:	f859 4b04 	ldr.w	r4, [r9], #4
 80073a0:	f8dc a000 	ldr.w	sl, [ip]
 80073a4:	b2a3      	uxth	r3, r4
 80073a6:	fa1f fa8a 	uxth.w	sl, sl
 80073aa:	fb0b a303 	mla	r3, fp, r3, sl
 80073ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073b2:	f8dc 4000 	ldr.w	r4, [ip]
 80073b6:	4443      	add	r3, r8
 80073b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80073c0:	46e2      	mov	sl, ip
 80073c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073cc:	454f      	cmp	r7, r9
 80073ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073d2:	f84a 3b04 	str.w	r3, [sl], #4
 80073d6:	d82b      	bhi.n	8007430 <__multiply+0x11e>
 80073d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	3204      	adds	r2, #4
 80073e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073e4:	f1ba 0f00 	cmp.w	sl, #0
 80073e8:	d020      	beq.n	800742c <__multiply+0x11a>
 80073ea:	4689      	mov	r9, r1
 80073ec:	46a8      	mov	r8, r5
 80073ee:	f04f 0b00 	mov.w	fp, #0
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80073f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	fb0a 440c 	mla	r4, sl, ip, r4
 8007402:	46c4      	mov	ip, r8
 8007404:	445c      	add	r4, fp
 8007406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800740a:	f84c 3b04 	str.w	r3, [ip], #4
 800740e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007412:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007416:	0c1b      	lsrs	r3, r3, #16
 8007418:	fb0a b303 	mla	r3, sl, r3, fp
 800741c:	454f      	cmp	r7, r9
 800741e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007422:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007426:	d805      	bhi.n	8007434 <__multiply+0x122>
 8007428:	f8c8 3004 	str.w	r3, [r8, #4]
 800742c:	3504      	adds	r5, #4
 800742e:	e79b      	b.n	8007368 <__multiply+0x56>
 8007430:	46d4      	mov	ip, sl
 8007432:	e7b3      	b.n	800739c <__multiply+0x8a>
 8007434:	46e0      	mov	r8, ip
 8007436:	e7dd      	b.n	80073f4 <__multiply+0xe2>
 8007438:	3e01      	subs	r6, #1
 800743a:	e799      	b.n	8007370 <__multiply+0x5e>

0800743c <__pow5mult>:
 800743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007440:	4615      	mov	r5, r2
 8007442:	f012 0203 	ands.w	r2, r2, #3
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	d007      	beq.n	800745c <__pow5mult+0x20>
 800744c:	4c21      	ldr	r4, [pc, #132]	; (80074d4 <__pow5mult+0x98>)
 800744e:	3a01      	subs	r2, #1
 8007450:	2300      	movs	r3, #0
 8007452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007456:	f7ff fe8c 	bl	8007172 <__multadd>
 800745a:	4607      	mov	r7, r0
 800745c:	10ad      	asrs	r5, r5, #2
 800745e:	d035      	beq.n	80074cc <__pow5mult+0x90>
 8007460:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007462:	b93c      	cbnz	r4, 8007474 <__pow5mult+0x38>
 8007464:	2010      	movs	r0, #16
 8007466:	f7ff fe11 	bl	800708c <malloc>
 800746a:	6270      	str	r0, [r6, #36]	; 0x24
 800746c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007470:	6004      	str	r4, [r0, #0]
 8007472:	60c4      	str	r4, [r0, #12]
 8007474:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800747c:	b94c      	cbnz	r4, 8007492 <__pow5mult+0x56>
 800747e:	f240 2171 	movw	r1, #625	; 0x271
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ff3c 	bl	8007300 <__i2b>
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007490:	6003      	str	r3, [r0, #0]
 8007492:	f04f 0800 	mov.w	r8, #0
 8007496:	07eb      	lsls	r3, r5, #31
 8007498:	d50a      	bpl.n	80074b0 <__pow5mult+0x74>
 800749a:	4639      	mov	r1, r7
 800749c:	4622      	mov	r2, r4
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ff37 	bl	8007312 <__multiply>
 80074a4:	4681      	mov	r9, r0
 80074a6:	4639      	mov	r1, r7
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff fe4b 	bl	8007144 <_Bfree>
 80074ae:	464f      	mov	r7, r9
 80074b0:	106d      	asrs	r5, r5, #1
 80074b2:	d00b      	beq.n	80074cc <__pow5mult+0x90>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	b938      	cbnz	r0, 80074c8 <__pow5mult+0x8c>
 80074b8:	4622      	mov	r2, r4
 80074ba:	4621      	mov	r1, r4
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff ff28 	bl	8007312 <__multiply>
 80074c2:	6020      	str	r0, [r4, #0]
 80074c4:	f8c0 8000 	str.w	r8, [r0]
 80074c8:	4604      	mov	r4, r0
 80074ca:	e7e4      	b.n	8007496 <__pow5mult+0x5a>
 80074cc:	4638      	mov	r0, r7
 80074ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d2:	bf00      	nop
 80074d4:	0800b048 	.word	0x0800b048

080074d8 <__lshift>:
 80074d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	4607      	mov	r7, r0
 80074e0:	4616      	mov	r6, r2
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074e8:	eb0a 0903 	add.w	r9, sl, r3
 80074ec:	6849      	ldr	r1, [r1, #4]
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	f109 0501 	add.w	r5, r9, #1
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	db32      	blt.n	800755e <__lshift+0x86>
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff fdef 	bl	80070dc <_Balloc>
 80074fe:	2300      	movs	r3, #0
 8007500:	4680      	mov	r8, r0
 8007502:	461a      	mov	r2, r3
 8007504:	f100 0114 	add.w	r1, r0, #20
 8007508:	4553      	cmp	r3, sl
 800750a:	db2b      	blt.n	8007564 <__lshift+0x8c>
 800750c:	6920      	ldr	r0, [r4, #16]
 800750e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007512:	f104 0314 	add.w	r3, r4, #20
 8007516:	f016 021f 	ands.w	r2, r6, #31
 800751a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800751e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007522:	d025      	beq.n	8007570 <__lshift+0x98>
 8007524:	2000      	movs	r0, #0
 8007526:	f1c2 0e20 	rsb	lr, r2, #32
 800752a:	468a      	mov	sl, r1
 800752c:	681e      	ldr	r6, [r3, #0]
 800752e:	4096      	lsls	r6, r2
 8007530:	4330      	orrs	r0, r6
 8007532:	f84a 0b04 	str.w	r0, [sl], #4
 8007536:	f853 0b04 	ldr.w	r0, [r3], #4
 800753a:	459c      	cmp	ip, r3
 800753c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007540:	d814      	bhi.n	800756c <__lshift+0x94>
 8007542:	6048      	str	r0, [r1, #4]
 8007544:	b108      	cbz	r0, 800754a <__lshift+0x72>
 8007546:	f109 0502 	add.w	r5, r9, #2
 800754a:	3d01      	subs	r5, #1
 800754c:	4638      	mov	r0, r7
 800754e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007552:	4621      	mov	r1, r4
 8007554:	f7ff fdf6 	bl	8007144 <_Bfree>
 8007558:	4640      	mov	r0, r8
 800755a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755e:	3101      	adds	r1, #1
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	e7c7      	b.n	80074f4 <__lshift+0x1c>
 8007564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007568:	3301      	adds	r3, #1
 800756a:	e7cd      	b.n	8007508 <__lshift+0x30>
 800756c:	4651      	mov	r1, sl
 800756e:	e7dc      	b.n	800752a <__lshift+0x52>
 8007570:	3904      	subs	r1, #4
 8007572:	f853 2b04 	ldr.w	r2, [r3], #4
 8007576:	459c      	cmp	ip, r3
 8007578:	f841 2f04 	str.w	r2, [r1, #4]!
 800757c:	d8f9      	bhi.n	8007572 <__lshift+0x9a>
 800757e:	e7e4      	b.n	800754a <__lshift+0x72>

08007580 <__mcmp>:
 8007580:	6903      	ldr	r3, [r0, #16]
 8007582:	690a      	ldr	r2, [r1, #16]
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	d10c      	bne.n	80075a4 <__mcmp+0x24>
 800758a:	0092      	lsls	r2, r2, #2
 800758c:	3014      	adds	r0, #20
 800758e:	3114      	adds	r1, #20
 8007590:	1884      	adds	r4, r0, r2
 8007592:	4411      	add	r1, r2
 8007594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800759c:	4295      	cmp	r5, r2
 800759e:	d003      	beq.n	80075a8 <__mcmp+0x28>
 80075a0:	d305      	bcc.n	80075ae <__mcmp+0x2e>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d3f3      	bcc.n	8007594 <__mcmp+0x14>
 80075ac:	e7fa      	b.n	80075a4 <__mcmp+0x24>
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	e7f7      	b.n	80075a4 <__mcmp+0x24>

080075b4 <__mdiff>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	4607      	mov	r7, r0
 80075bc:	4611      	mov	r1, r2
 80075be:	4628      	mov	r0, r5
 80075c0:	4614      	mov	r4, r2
 80075c2:	f7ff ffdd 	bl	8007580 <__mcmp>
 80075c6:	1e06      	subs	r6, r0, #0
 80075c8:	d108      	bne.n	80075dc <__mdiff+0x28>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff fd85 	bl	80070dc <_Balloc>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075dc:	bfa4      	itt	ge
 80075de:	4623      	movge	r3, r4
 80075e0:	462c      	movge	r4, r5
 80075e2:	4638      	mov	r0, r7
 80075e4:	6861      	ldr	r1, [r4, #4]
 80075e6:	bfa6      	itte	ge
 80075e8:	461d      	movge	r5, r3
 80075ea:	2600      	movge	r6, #0
 80075ec:	2601      	movlt	r6, #1
 80075ee:	f7ff fd75 	bl	80070dc <_Balloc>
 80075f2:	f04f 0e00 	mov.w	lr, #0
 80075f6:	60c6      	str	r6, [r0, #12]
 80075f8:	692b      	ldr	r3, [r5, #16]
 80075fa:	6926      	ldr	r6, [r4, #16]
 80075fc:	f104 0214 	add.w	r2, r4, #20
 8007600:	f105 0914 	add.w	r9, r5, #20
 8007604:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007608:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800760c:	f100 0114 	add.w	r1, r0, #20
 8007610:	f852 ab04 	ldr.w	sl, [r2], #4
 8007614:	f859 5b04 	ldr.w	r5, [r9], #4
 8007618:	fa1f f38a 	uxth.w	r3, sl
 800761c:	4473      	add	r3, lr
 800761e:	b2ac      	uxth	r4, r5
 8007620:	1b1b      	subs	r3, r3, r4
 8007622:	0c2c      	lsrs	r4, r5, #16
 8007624:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007628:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007632:	45c8      	cmp	r8, r9
 8007634:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007638:	4694      	mov	ip, r2
 800763a:	f841 4b04 	str.w	r4, [r1], #4
 800763e:	d8e7      	bhi.n	8007610 <__mdiff+0x5c>
 8007640:	45bc      	cmp	ip, r7
 8007642:	d304      	bcc.n	800764e <__mdiff+0x9a>
 8007644:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007648:	b183      	cbz	r3, 800766c <__mdiff+0xb8>
 800764a:	6106      	str	r6, [r0, #16]
 800764c:	e7c4      	b.n	80075d8 <__mdiff+0x24>
 800764e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007652:	b2a2      	uxth	r2, r4
 8007654:	4472      	add	r2, lr
 8007656:	1413      	asrs	r3, r2, #16
 8007658:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800765c:	b292      	uxth	r2, r2
 800765e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007662:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007666:	f841 2b04 	str.w	r2, [r1], #4
 800766a:	e7e9      	b.n	8007640 <__mdiff+0x8c>
 800766c:	3e01      	subs	r6, #1
 800766e:	e7e9      	b.n	8007644 <__mdiff+0x90>

08007670 <__ulp>:
 8007670:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <__ulp+0x44>)
 8007672:	400b      	ands	r3, r1
 8007674:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007678:	2b00      	cmp	r3, #0
 800767a:	dd02      	ble.n	8007682 <__ulp+0x12>
 800767c:	2000      	movs	r0, #0
 800767e:	4619      	mov	r1, r3
 8007680:	4770      	bx	lr
 8007682:	425b      	negs	r3, r3
 8007684:	151b      	asrs	r3, r3, #20
 8007686:	2b13      	cmp	r3, #19
 8007688:	f04f 0000 	mov.w	r0, #0
 800768c:	f04f 0100 	mov.w	r1, #0
 8007690:	dc04      	bgt.n	800769c <__ulp+0x2c>
 8007692:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007696:	fa42 f103 	asr.w	r1, r2, r3
 800769a:	4770      	bx	lr
 800769c:	2201      	movs	r2, #1
 800769e:	3b14      	subs	r3, #20
 80076a0:	2b1e      	cmp	r3, #30
 80076a2:	bfce      	itee	gt
 80076a4:	4613      	movgt	r3, r2
 80076a6:	f1c3 031f 	rsble	r3, r3, #31
 80076aa:	fa02 f303 	lslle.w	r3, r2, r3
 80076ae:	4618      	mov	r0, r3
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	7ff00000 	.word	0x7ff00000

080076b8 <__b2d>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	6907      	ldr	r7, [r0, #16]
 80076be:	f100 0914 	add.w	r9, r0, #20
 80076c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80076c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80076ca:	f1a7 0804 	sub.w	r8, r7, #4
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7ff fdc8 	bl	8007264 <__hi0bits>
 80076d4:	f1c0 0320 	rsb	r3, r0, #32
 80076d8:	280a      	cmp	r0, #10
 80076da:	600b      	str	r3, [r1, #0]
 80076dc:	491e      	ldr	r1, [pc, #120]	; (8007758 <__b2d+0xa0>)
 80076de:	dc17      	bgt.n	8007710 <__b2d+0x58>
 80076e0:	45c1      	cmp	r9, r8
 80076e2:	bf28      	it	cs
 80076e4:	2200      	movcs	r2, #0
 80076e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ea:	fa26 f30c 	lsr.w	r3, r6, ip
 80076ee:	bf38      	it	cc
 80076f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076f4:	ea43 0501 	orr.w	r5, r3, r1
 80076f8:	f100 0315 	add.w	r3, r0, #21
 80076fc:	fa06 f303 	lsl.w	r3, r6, r3
 8007700:	fa22 f20c 	lsr.w	r2, r2, ip
 8007704:	ea43 0402 	orr.w	r4, r3, r2
 8007708:	4620      	mov	r0, r4
 800770a:	4629      	mov	r1, r5
 800770c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007710:	45c1      	cmp	r9, r8
 8007712:	bf3a      	itte	cc
 8007714:	f1a7 0808 	subcc.w	r8, r7, #8
 8007718:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800771c:	2200      	movcs	r2, #0
 800771e:	f1b0 030b 	subs.w	r3, r0, #11
 8007722:	d015      	beq.n	8007750 <__b2d+0x98>
 8007724:	409e      	lsls	r6, r3
 8007726:	f1c3 0720 	rsb	r7, r3, #32
 800772a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800772e:	fa22 f107 	lsr.w	r1, r2, r7
 8007732:	45c8      	cmp	r8, r9
 8007734:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007738:	ea46 0501 	orr.w	r5, r6, r1
 800773c:	bf94      	ite	ls
 800773e:	2100      	movls	r1, #0
 8007740:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007744:	fa02 f003 	lsl.w	r0, r2, r3
 8007748:	40f9      	lsrs	r1, r7
 800774a:	ea40 0401 	orr.w	r4, r0, r1
 800774e:	e7db      	b.n	8007708 <__b2d+0x50>
 8007750:	ea46 0501 	orr.w	r5, r6, r1
 8007754:	4614      	mov	r4, r2
 8007756:	e7d7      	b.n	8007708 <__b2d+0x50>
 8007758:	3ff00000 	.word	0x3ff00000

0800775c <__d2b>:
 800775c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007760:	461c      	mov	r4, r3
 8007762:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007766:	2101      	movs	r1, #1
 8007768:	4690      	mov	r8, r2
 800776a:	f7ff fcb7 	bl	80070dc <_Balloc>
 800776e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007772:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007776:	4607      	mov	r7, r0
 8007778:	bb34      	cbnz	r4, 80077c8 <__d2b+0x6c>
 800777a:	9201      	str	r2, [sp, #4]
 800777c:	f1b8 0200 	subs.w	r2, r8, #0
 8007780:	d027      	beq.n	80077d2 <__d2b+0x76>
 8007782:	a802      	add	r0, sp, #8
 8007784:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007788:	f7ff fd8b 	bl	80072a2 <__lo0bits>
 800778c:	9900      	ldr	r1, [sp, #0]
 800778e:	b1f0      	cbz	r0, 80077ce <__d2b+0x72>
 8007790:	9a01      	ldr	r2, [sp, #4]
 8007792:	f1c0 0320 	rsb	r3, r0, #32
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	430b      	orrs	r3, r1
 800779c:	40c2      	lsrs	r2, r0
 800779e:	617b      	str	r3, [r7, #20]
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	9b01      	ldr	r3, [sp, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bf14      	ite	ne
 80077a8:	2102      	movne	r1, #2
 80077aa:	2101      	moveq	r1, #1
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	6139      	str	r1, [r7, #16]
 80077b0:	b1c4      	cbz	r4, 80077e4 <__d2b+0x88>
 80077b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077b6:	4404      	add	r4, r0
 80077b8:	6034      	str	r4, [r6, #0]
 80077ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077be:	6028      	str	r0, [r5, #0]
 80077c0:	4638      	mov	r0, r7
 80077c2:	b002      	add	sp, #8
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077cc:	e7d5      	b.n	800777a <__d2b+0x1e>
 80077ce:	6179      	str	r1, [r7, #20]
 80077d0:	e7e7      	b.n	80077a2 <__d2b+0x46>
 80077d2:	a801      	add	r0, sp, #4
 80077d4:	f7ff fd65 	bl	80072a2 <__lo0bits>
 80077d8:	2101      	movs	r1, #1
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	6139      	str	r1, [r7, #16]
 80077de:	617b      	str	r3, [r7, #20]
 80077e0:	3020      	adds	r0, #32
 80077e2:	e7e5      	b.n	80077b0 <__d2b+0x54>
 80077e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077ec:	6030      	str	r0, [r6, #0]
 80077ee:	6918      	ldr	r0, [r3, #16]
 80077f0:	f7ff fd38 	bl	8007264 <__hi0bits>
 80077f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077f8:	e7e1      	b.n	80077be <__d2b+0x62>

080077fa <__ratio>:
 80077fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fe:	4688      	mov	r8, r1
 8007800:	4669      	mov	r1, sp
 8007802:	4681      	mov	r9, r0
 8007804:	f7ff ff58 	bl	80076b8 <__b2d>
 8007808:	468b      	mov	fp, r1
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	4640      	mov	r0, r8
 8007810:	a901      	add	r1, sp, #4
 8007812:	f7ff ff51 	bl	80076b8 <__b2d>
 8007816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800781a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800781e:	460d      	mov	r5, r1
 8007820:	eba3 0c02 	sub.w	ip, r3, r2
 8007824:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfd5      	itete	le
 8007832:	460a      	movle	r2, r1
 8007834:	463a      	movgt	r2, r7
 8007836:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800783a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800783e:	bfd8      	it	le
 8007840:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007844:	462b      	mov	r3, r5
 8007846:	4602      	mov	r2, r0
 8007848:	4659      	mov	r1, fp
 800784a:	4630      	mov	r0, r6
 800784c:	f7f8 ff6e 	bl	800072c <__aeabi_ddiv>
 8007850:	b003      	add	sp, #12
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007856 <__copybits>:
 8007856:	3901      	subs	r1, #1
 8007858:	b510      	push	{r4, lr}
 800785a:	1149      	asrs	r1, r1, #5
 800785c:	6914      	ldr	r4, [r2, #16]
 800785e:	3101      	adds	r1, #1
 8007860:	f102 0314 	add.w	r3, r2, #20
 8007864:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007868:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800786c:	42a3      	cmp	r3, r4
 800786e:	4602      	mov	r2, r0
 8007870:	d303      	bcc.n	800787a <__copybits+0x24>
 8007872:	2300      	movs	r3, #0
 8007874:	428a      	cmp	r2, r1
 8007876:	d305      	bcc.n	8007884 <__copybits+0x2e>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	f853 2b04 	ldr.w	r2, [r3], #4
 800787e:	f840 2b04 	str.w	r2, [r0], #4
 8007882:	e7f3      	b.n	800786c <__copybits+0x16>
 8007884:	f842 3b04 	str.w	r3, [r2], #4
 8007888:	e7f4      	b.n	8007874 <__copybits+0x1e>

0800788a <__any_on>:
 800788a:	f100 0214 	add.w	r2, r0, #20
 800788e:	6900      	ldr	r0, [r0, #16]
 8007890:	114b      	asrs	r3, r1, #5
 8007892:	4298      	cmp	r0, r3
 8007894:	b510      	push	{r4, lr}
 8007896:	db11      	blt.n	80078bc <__any_on+0x32>
 8007898:	dd0a      	ble.n	80078b0 <__any_on+0x26>
 800789a:	f011 011f 	ands.w	r1, r1, #31
 800789e:	d007      	beq.n	80078b0 <__any_on+0x26>
 80078a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078a4:	fa24 f001 	lsr.w	r0, r4, r1
 80078a8:	fa00 f101 	lsl.w	r1, r0, r1
 80078ac:	428c      	cmp	r4, r1
 80078ae:	d10b      	bne.n	80078c8 <__any_on+0x3e>
 80078b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d803      	bhi.n	80078c0 <__any_on+0x36>
 80078b8:	2000      	movs	r0, #0
 80078ba:	bd10      	pop	{r4, pc}
 80078bc:	4603      	mov	r3, r0
 80078be:	e7f7      	b.n	80078b0 <__any_on+0x26>
 80078c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d0f5      	beq.n	80078b4 <__any_on+0x2a>
 80078c8:	2001      	movs	r0, #1
 80078ca:	e7f6      	b.n	80078ba <__any_on+0x30>

080078cc <_calloc_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	fb02 f401 	mul.w	r4, r2, r1
 80078d2:	4621      	mov	r1, r4
 80078d4:	f000 f854 	bl	8007980 <_malloc_r>
 80078d8:	4605      	mov	r5, r0
 80078da:	b118      	cbz	r0, 80078e4 <_calloc_r+0x18>
 80078dc:	4622      	mov	r2, r4
 80078de:	2100      	movs	r1, #0
 80078e0:	f7fc fba6 	bl	8004030 <memset>
 80078e4:	4628      	mov	r0, r5
 80078e6:	bd38      	pop	{r3, r4, r5, pc}

080078e8 <_free_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4605      	mov	r5, r0
 80078ec:	2900      	cmp	r1, #0
 80078ee:	d043      	beq.n	8007978 <_free_r+0x90>
 80078f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f4:	1f0c      	subs	r4, r1, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfb8      	it	lt
 80078fa:	18e4      	addlt	r4, r4, r3
 80078fc:	f001 f938 	bl	8008b70 <__malloc_lock>
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <_free_r+0x94>)
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	4610      	mov	r0, r2
 8007906:	b933      	cbnz	r3, 8007916 <_free_r+0x2e>
 8007908:	6063      	str	r3, [r4, #4]
 800790a:	6014      	str	r4, [r2, #0]
 800790c:	4628      	mov	r0, r5
 800790e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007912:	f001 b92e 	b.w	8008b72 <__malloc_unlock>
 8007916:	42a3      	cmp	r3, r4
 8007918:	d90b      	bls.n	8007932 <_free_r+0x4a>
 800791a:	6821      	ldr	r1, [r4, #0]
 800791c:	1862      	adds	r2, r4, r1
 800791e:	4293      	cmp	r3, r2
 8007920:	bf01      	itttt	eq
 8007922:	681a      	ldreq	r2, [r3, #0]
 8007924:	685b      	ldreq	r3, [r3, #4]
 8007926:	1852      	addeq	r2, r2, r1
 8007928:	6022      	streq	r2, [r4, #0]
 800792a:	6063      	str	r3, [r4, #4]
 800792c:	6004      	str	r4, [r0, #0]
 800792e:	e7ed      	b.n	800790c <_free_r+0x24>
 8007930:	4613      	mov	r3, r2
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	b10a      	cbz	r2, 800793a <_free_r+0x52>
 8007936:	42a2      	cmp	r2, r4
 8007938:	d9fa      	bls.n	8007930 <_free_r+0x48>
 800793a:	6819      	ldr	r1, [r3, #0]
 800793c:	1858      	adds	r0, r3, r1
 800793e:	42a0      	cmp	r0, r4
 8007940:	d10b      	bne.n	800795a <_free_r+0x72>
 8007942:	6820      	ldr	r0, [r4, #0]
 8007944:	4401      	add	r1, r0
 8007946:	1858      	adds	r0, r3, r1
 8007948:	4282      	cmp	r2, r0
 800794a:	6019      	str	r1, [r3, #0]
 800794c:	d1de      	bne.n	800790c <_free_r+0x24>
 800794e:	6810      	ldr	r0, [r2, #0]
 8007950:	6852      	ldr	r2, [r2, #4]
 8007952:	4401      	add	r1, r0
 8007954:	6019      	str	r1, [r3, #0]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	e7d8      	b.n	800790c <_free_r+0x24>
 800795a:	d902      	bls.n	8007962 <_free_r+0x7a>
 800795c:	230c      	movs	r3, #12
 800795e:	602b      	str	r3, [r5, #0]
 8007960:	e7d4      	b.n	800790c <_free_r+0x24>
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	1821      	adds	r1, r4, r0
 8007966:	428a      	cmp	r2, r1
 8007968:	bf01      	itttt	eq
 800796a:	6811      	ldreq	r1, [r2, #0]
 800796c:	6852      	ldreq	r2, [r2, #4]
 800796e:	1809      	addeq	r1, r1, r0
 8007970:	6021      	streq	r1, [r4, #0]
 8007972:	6062      	str	r2, [r4, #4]
 8007974:	605c      	str	r4, [r3, #4]
 8007976:	e7c9      	b.n	800790c <_free_r+0x24>
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	20000624 	.word	0x20000624

08007980 <_malloc_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	1ccd      	adds	r5, r1, #3
 8007984:	f025 0503 	bic.w	r5, r5, #3
 8007988:	3508      	adds	r5, #8
 800798a:	2d0c      	cmp	r5, #12
 800798c:	bf38      	it	cc
 800798e:	250c      	movcc	r5, #12
 8007990:	2d00      	cmp	r5, #0
 8007992:	4606      	mov	r6, r0
 8007994:	db01      	blt.n	800799a <_malloc_r+0x1a>
 8007996:	42a9      	cmp	r1, r5
 8007998:	d903      	bls.n	80079a2 <_malloc_r+0x22>
 800799a:	230c      	movs	r3, #12
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	2000      	movs	r0, #0
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	f001 f8e5 	bl	8008b70 <__malloc_lock>
 80079a6:	4a21      	ldr	r2, [pc, #132]	; (8007a2c <_malloc_r+0xac>)
 80079a8:	6814      	ldr	r4, [r2, #0]
 80079aa:	4621      	mov	r1, r4
 80079ac:	b991      	cbnz	r1, 80079d4 <_malloc_r+0x54>
 80079ae:	4c20      	ldr	r4, [pc, #128]	; (8007a30 <_malloc_r+0xb0>)
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	b91b      	cbnz	r3, 80079bc <_malloc_r+0x3c>
 80079b4:	4630      	mov	r0, r6
 80079b6:	f000 fde1 	bl	800857c <_sbrk_r>
 80079ba:	6020      	str	r0, [r4, #0]
 80079bc:	4629      	mov	r1, r5
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 fddc 	bl	800857c <_sbrk_r>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d124      	bne.n	8007a12 <_malloc_r+0x92>
 80079c8:	230c      	movs	r3, #12
 80079ca:	4630      	mov	r0, r6
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	f001 f8d0 	bl	8008b72 <__malloc_unlock>
 80079d2:	e7e4      	b.n	800799e <_malloc_r+0x1e>
 80079d4:	680b      	ldr	r3, [r1, #0]
 80079d6:	1b5b      	subs	r3, r3, r5
 80079d8:	d418      	bmi.n	8007a0c <_malloc_r+0x8c>
 80079da:	2b0b      	cmp	r3, #11
 80079dc:	d90f      	bls.n	80079fe <_malloc_r+0x7e>
 80079de:	600b      	str	r3, [r1, #0]
 80079e0:	18cc      	adds	r4, r1, r3
 80079e2:	50cd      	str	r5, [r1, r3]
 80079e4:	4630      	mov	r0, r6
 80079e6:	f001 f8c4 	bl	8008b72 <__malloc_unlock>
 80079ea:	f104 000b 	add.w	r0, r4, #11
 80079ee:	1d23      	adds	r3, r4, #4
 80079f0:	f020 0007 	bic.w	r0, r0, #7
 80079f4:	1ac3      	subs	r3, r0, r3
 80079f6:	d0d3      	beq.n	80079a0 <_malloc_r+0x20>
 80079f8:	425a      	negs	r2, r3
 80079fa:	50e2      	str	r2, [r4, r3]
 80079fc:	e7d0      	b.n	80079a0 <_malloc_r+0x20>
 80079fe:	684b      	ldr	r3, [r1, #4]
 8007a00:	428c      	cmp	r4, r1
 8007a02:	bf16      	itet	ne
 8007a04:	6063      	strne	r3, [r4, #4]
 8007a06:	6013      	streq	r3, [r2, #0]
 8007a08:	460c      	movne	r4, r1
 8007a0a:	e7eb      	b.n	80079e4 <_malloc_r+0x64>
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6849      	ldr	r1, [r1, #4]
 8007a10:	e7cc      	b.n	80079ac <_malloc_r+0x2c>
 8007a12:	1cc4      	adds	r4, r0, #3
 8007a14:	f024 0403 	bic.w	r4, r4, #3
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d005      	beq.n	8007a28 <_malloc_r+0xa8>
 8007a1c:	1a21      	subs	r1, r4, r0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 fdac 	bl	800857c <_sbrk_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d0cf      	beq.n	80079c8 <_malloc_r+0x48>
 8007a28:	6025      	str	r5, [r4, #0]
 8007a2a:	e7db      	b.n	80079e4 <_malloc_r+0x64>
 8007a2c:	20000624 	.word	0x20000624
 8007a30:	20000628 	.word	0x20000628

08007a34 <__ssputs_r>:
 8007a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	688e      	ldr	r6, [r1, #8]
 8007a3a:	4682      	mov	sl, r0
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4690      	mov	r8, r2
 8007a42:	4699      	mov	r9, r3
 8007a44:	d837      	bhi.n	8007ab6 <__ssputs_r+0x82>
 8007a46:	898a      	ldrh	r2, [r1, #12]
 8007a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a4c:	d031      	beq.n	8007ab2 <__ssputs_r+0x7e>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	6909      	ldr	r1, [r1, #16]
 8007a54:	1a6f      	subs	r7, r5, r1
 8007a56:	6965      	ldr	r5, [r4, #20]
 8007a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a60:	f109 0301 	add.w	r3, r9, #1
 8007a64:	443b      	add	r3, r7
 8007a66:	429d      	cmp	r5, r3
 8007a68:	bf38      	it	cc
 8007a6a:	461d      	movcc	r5, r3
 8007a6c:	0553      	lsls	r3, r2, #21
 8007a6e:	d530      	bpl.n	8007ad2 <__ssputs_r+0x9e>
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7ff ff85 	bl	8007980 <_malloc_r>
 8007a76:	4606      	mov	r6, r0
 8007a78:	b950      	cbnz	r0, 8007a90 <__ssputs_r+0x5c>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	f8ca 3000 	str.w	r3, [sl]
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a90:	463a      	mov	r2, r7
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	f7fc faa8 	bl	8003fe8 <memcpy>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	6126      	str	r6, [r4, #16]
 8007aa6:	443e      	add	r6, r7
 8007aa8:	6026      	str	r6, [r4, #0]
 8007aaa:	464e      	mov	r6, r9
 8007aac:	6165      	str	r5, [r4, #20]
 8007aae:	1bed      	subs	r5, r5, r7
 8007ab0:	60a5      	str	r5, [r4, #8]
 8007ab2:	454e      	cmp	r6, r9
 8007ab4:	d900      	bls.n	8007ab8 <__ssputs_r+0x84>
 8007ab6:	464e      	mov	r6, r9
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4641      	mov	r1, r8
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	f7fc fa9e 	bl	8003ffe <memmove>
 8007ac2:	68a3      	ldr	r3, [r4, #8]
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	1b9b      	subs	r3, r3, r6
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	441e      	add	r6, r3
 8007ace:	6026      	str	r6, [r4, #0]
 8007ad0:	e7dc      	b.n	8007a8c <__ssputs_r+0x58>
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	f001 f84e 	bl	8008b74 <_realloc_r>
 8007ad8:	4606      	mov	r6, r0
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d1e2      	bne.n	8007aa4 <__ssputs_r+0x70>
 8007ade:	6921      	ldr	r1, [r4, #16]
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	f7ff ff01 	bl	80078e8 <_free_r>
 8007ae6:	e7c8      	b.n	8007a7a <__ssputs_r+0x46>

08007ae8 <_svfiprintf_r>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	461d      	mov	r5, r3
 8007aee:	898b      	ldrh	r3, [r1, #12]
 8007af0:	b09d      	sub	sp, #116	; 0x74
 8007af2:	061f      	lsls	r7, r3, #24
 8007af4:	4680      	mov	r8, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4616      	mov	r6, r2
 8007afa:	d50f      	bpl.n	8007b1c <_svfiprintf_r+0x34>
 8007afc:	690b      	ldr	r3, [r1, #16]
 8007afe:	b96b      	cbnz	r3, 8007b1c <_svfiprintf_r+0x34>
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	f7ff ff3d 	bl	8007980 <_malloc_r>
 8007b06:	6020      	str	r0, [r4, #0]
 8007b08:	6120      	str	r0, [r4, #16]
 8007b0a:	b928      	cbnz	r0, 8007b18 <_svfiprintf_r+0x30>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	f8c8 3000 	str.w	r3, [r8]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	e0c8      	b.n	8007caa <_svfiprintf_r+0x1c2>
 8007b18:	2340      	movs	r3, #64	; 0x40
 8007b1a:	6163      	str	r3, [r4, #20]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b20:	2320      	movs	r3, #32
 8007b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b26:	2330      	movs	r3, #48	; 0x30
 8007b28:	f04f 0b01 	mov.w	fp, #1
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b30:	9503      	str	r5, [sp, #12]
 8007b32:	4637      	mov	r7, r6
 8007b34:	463d      	mov	r5, r7
 8007b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b3a:	b10b      	cbz	r3, 8007b40 <_svfiprintf_r+0x58>
 8007b3c:	2b25      	cmp	r3, #37	; 0x25
 8007b3e:	d13e      	bne.n	8007bbe <_svfiprintf_r+0xd6>
 8007b40:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b44:	d00b      	beq.n	8007b5e <_svfiprintf_r+0x76>
 8007b46:	4653      	mov	r3, sl
 8007b48:	4632      	mov	r2, r6
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	f7ff ff71 	bl	8007a34 <__ssputs_r>
 8007b52:	3001      	adds	r0, #1
 8007b54:	f000 80a4 	beq.w	8007ca0 <_svfiprintf_r+0x1b8>
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	4453      	add	r3, sl
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	783b      	ldrb	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 809d 	beq.w	8007ca0 <_svfiprintf_r+0x1b8>
 8007b66:	2300      	movs	r3, #0
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	9307      	str	r3, [sp, #28]
 8007b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b78:	931a      	str	r3, [sp, #104]	; 0x68
 8007b7a:	462f      	mov	r7, r5
 8007b7c:	2205      	movs	r2, #5
 8007b7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b82:	4850      	ldr	r0, [pc, #320]	; (8007cc4 <_svfiprintf_r+0x1dc>)
 8007b84:	f7ff fa9c 	bl	80070c0 <memchr>
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	b9d0      	cbnz	r0, 8007bc2 <_svfiprintf_r+0xda>
 8007b8c:	06d9      	lsls	r1, r3, #27
 8007b8e:	bf44      	itt	mi
 8007b90:	2220      	movmi	r2, #32
 8007b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b96:	071a      	lsls	r2, r3, #28
 8007b98:	bf44      	itt	mi
 8007b9a:	222b      	movmi	r2, #43	; 0x2b
 8007b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ba0:	782a      	ldrb	r2, [r5, #0]
 8007ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8007ba4:	d015      	beq.n	8007bd2 <_svfiprintf_r+0xea>
 8007ba6:	462f      	mov	r7, r5
 8007ba8:	2000      	movs	r0, #0
 8007baa:	250a      	movs	r5, #10
 8007bac:	9a07      	ldr	r2, [sp, #28]
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb4:	3b30      	subs	r3, #48	; 0x30
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d94d      	bls.n	8007c56 <_svfiprintf_r+0x16e>
 8007bba:	b1b8      	cbz	r0, 8007bec <_svfiprintf_r+0x104>
 8007bbc:	e00f      	b.n	8007bde <_svfiprintf_r+0xf6>
 8007bbe:	462f      	mov	r7, r5
 8007bc0:	e7b8      	b.n	8007b34 <_svfiprintf_r+0x4c>
 8007bc2:	4a40      	ldr	r2, [pc, #256]	; (8007cc4 <_svfiprintf_r+0x1dc>)
 8007bc4:	463d      	mov	r5, r7
 8007bc6:	1a80      	subs	r0, r0, r2
 8007bc8:	fa0b f000 	lsl.w	r0, fp, r0
 8007bcc:	4318      	orrs	r0, r3
 8007bce:	9004      	str	r0, [sp, #16]
 8007bd0:	e7d3      	b.n	8007b7a <_svfiprintf_r+0x92>
 8007bd2:	9a03      	ldr	r2, [sp, #12]
 8007bd4:	1d11      	adds	r1, r2, #4
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	9103      	str	r1, [sp, #12]
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	db01      	blt.n	8007be2 <_svfiprintf_r+0xfa>
 8007bde:	9207      	str	r2, [sp, #28]
 8007be0:	e004      	b.n	8007bec <_svfiprintf_r+0x104>
 8007be2:	4252      	negs	r2, r2
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	9207      	str	r2, [sp, #28]
 8007bea:	9304      	str	r3, [sp, #16]
 8007bec:	783b      	ldrb	r3, [r7, #0]
 8007bee:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf0:	d10c      	bne.n	8007c0c <_svfiprintf_r+0x124>
 8007bf2:	787b      	ldrb	r3, [r7, #1]
 8007bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf6:	d133      	bne.n	8007c60 <_svfiprintf_r+0x178>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	3702      	adds	r7, #2
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	9203      	str	r2, [sp, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfb8      	it	lt
 8007c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	4d2e      	ldr	r5, [pc, #184]	; (8007cc8 <_svfiprintf_r+0x1e0>)
 8007c0e:	2203      	movs	r2, #3
 8007c10:	7839      	ldrb	r1, [r7, #0]
 8007c12:	4628      	mov	r0, r5
 8007c14:	f7ff fa54 	bl	80070c0 <memchr>
 8007c18:	b138      	cbz	r0, 8007c2a <_svfiprintf_r+0x142>
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	1b40      	subs	r0, r0, r5
 8007c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	3701      	adds	r7, #1
 8007c26:	4303      	orrs	r3, r0
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	7839      	ldrb	r1, [r7, #0]
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	4827      	ldr	r0, [pc, #156]	; (8007ccc <_svfiprintf_r+0x1e4>)
 8007c30:	1c7e      	adds	r6, r7, #1
 8007c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c36:	f7ff fa43 	bl	80070c0 <memchr>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d038      	beq.n	8007cb0 <_svfiprintf_r+0x1c8>
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <_svfiprintf_r+0x1e8>)
 8007c40:	bb13      	cbnz	r3, 8007c88 <_svfiprintf_r+0x1a0>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	3307      	adds	r3, #7
 8007c46:	f023 0307 	bic.w	r3, r3, #7
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c50:	444b      	add	r3, r9
 8007c52:	9309      	str	r3, [sp, #36]	; 0x24
 8007c54:	e76d      	b.n	8007b32 <_svfiprintf_r+0x4a>
 8007c56:	fb05 3202 	mla	r2, r5, r2, r3
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	e7a6      	b.n	8007bae <_svfiprintf_r+0xc6>
 8007c60:	2300      	movs	r3, #0
 8007c62:	250a      	movs	r5, #10
 8007c64:	4619      	mov	r1, r3
 8007c66:	3701      	adds	r7, #1
 8007c68:	9305      	str	r3, [sp, #20]
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c70:	3a30      	subs	r2, #48	; 0x30
 8007c72:	2a09      	cmp	r2, #9
 8007c74:	d903      	bls.n	8007c7e <_svfiprintf_r+0x196>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0c8      	beq.n	8007c0c <_svfiprintf_r+0x124>
 8007c7a:	9105      	str	r1, [sp, #20]
 8007c7c:	e7c6      	b.n	8007c0c <_svfiprintf_r+0x124>
 8007c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8007c82:	2301      	movs	r3, #1
 8007c84:	4607      	mov	r7, r0
 8007c86:	e7f0      	b.n	8007c6a <_svfiprintf_r+0x182>
 8007c88:	ab03      	add	r3, sp, #12
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4622      	mov	r2, r4
 8007c8e:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <_svfiprintf_r+0x1ec>)
 8007c90:	a904      	add	r1, sp, #16
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7fc fa66 	bl	8004164 <_printf_float>
 8007c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c9c:	4681      	mov	r9, r0
 8007c9e:	d1d6      	bne.n	8007c4e <_svfiprintf_r+0x166>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	065b      	lsls	r3, r3, #25
 8007ca4:	f53f af35 	bmi.w	8007b12 <_svfiprintf_r+0x2a>
 8007ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007caa:	b01d      	add	sp, #116	; 0x74
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	ab03      	add	r3, sp, #12
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <_svfiprintf_r+0x1ec>)
 8007cb8:	a904      	add	r1, sp, #16
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7fc fcfe 	bl	80046bc <_printf_i>
 8007cc0:	e7ea      	b.n	8007c98 <_svfiprintf_r+0x1b0>
 8007cc2:	bf00      	nop
 8007cc4:	0800b054 	.word	0x0800b054
 8007cc8:	0800b05a 	.word	0x0800b05a
 8007ccc:	0800b05e 	.word	0x0800b05e
 8007cd0:	08004165 	.word	0x08004165
 8007cd4:	08007a35 	.word	0x08007a35

08007cd8 <_sungetc_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	1c4b      	adds	r3, r1, #1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	d103      	bne.n	8007ce8 <_sungetc_r+0x10>
 8007ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	8993      	ldrh	r3, [r2, #12]
 8007cea:	b2cd      	uxtb	r5, r1
 8007cec:	f023 0320 	bic.w	r3, r3, #32
 8007cf0:	8193      	strh	r3, [r2, #12]
 8007cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	b18b      	cbz	r3, 8007d1c <_sungetc_r+0x44>
 8007cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	dd08      	ble.n	8007d10 <_sungetc_r+0x38>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	1e5a      	subs	r2, r3, #1
 8007d02:	6022      	str	r2, [r4, #0]
 8007d04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6063      	str	r3, [r4, #4]
 8007d0e:	e7e9      	b.n	8007ce4 <_sungetc_r+0xc>
 8007d10:	4621      	mov	r1, r4
 8007d12:	f000 fd13 	bl	800873c <__submore>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d0f1      	beq.n	8007cfe <_sungetc_r+0x26>
 8007d1a:	e7e1      	b.n	8007ce0 <_sungetc_r+0x8>
 8007d1c:	6921      	ldr	r1, [r4, #16]
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	b151      	cbz	r1, 8007d38 <_sungetc_r+0x60>
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d208      	bcs.n	8007d38 <_sungetc_r+0x60>
 8007d26:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007d2a:	42a9      	cmp	r1, r5
 8007d2c:	d104      	bne.n	8007d38 <_sungetc_r+0x60>
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	3201      	adds	r2, #1
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	6062      	str	r2, [r4, #4]
 8007d36:	e7d5      	b.n	8007ce4 <_sungetc_r+0xc>
 8007d38:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d40:	6363      	str	r3, [r4, #52]	; 0x34
 8007d42:	2303      	movs	r3, #3
 8007d44:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d46:	4623      	mov	r3, r4
 8007d48:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e7dc      	b.n	8007d0c <_sungetc_r+0x34>

08007d52 <__ssrefill_r>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d58:	b169      	cbz	r1, 8007d76 <__ssrefill_r+0x24>
 8007d5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5e:	4299      	cmp	r1, r3
 8007d60:	d001      	beq.n	8007d66 <__ssrefill_r+0x14>
 8007d62:	f7ff fdc1 	bl	80078e8 <_free_r>
 8007d66:	2000      	movs	r0, #0
 8007d68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d6a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	b113      	cbz	r3, 8007d76 <__ssrefill_r+0x24>
 8007d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6063      	str	r3, [r4, #4]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0320 	orr.w	r3, r3, #32
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	e7f3      	b.n	8007d74 <__ssrefill_r+0x22>

08007d8c <__ssvfiscanf_r>:
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	2100      	movs	r1, #0
 8007d94:	4606      	mov	r6, r0
 8007d96:	4692      	mov	sl, r2
 8007d98:	270a      	movs	r7, #10
 8007d9a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007d9e:	9144      	str	r1, [sp, #272]	; 0x110
 8007da0:	9145      	str	r1, [sp, #276]	; 0x114
 8007da2:	499e      	ldr	r1, [pc, #632]	; (800801c <__ssvfiscanf_r+0x290>)
 8007da4:	f10d 0804 	add.w	r8, sp, #4
 8007da8:	91a0      	str	r1, [sp, #640]	; 0x280
 8007daa:	499d      	ldr	r1, [pc, #628]	; (8008020 <__ssvfiscanf_r+0x294>)
 8007dac:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8008024 <__ssvfiscanf_r+0x298>
 8007db0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007db4:	91a1      	str	r1, [sp, #644]	; 0x284
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 812a 	beq.w	8008016 <__ssvfiscanf_r+0x28a>
 8007dc2:	4655      	mov	r5, sl
 8007dc4:	f7ff f932 	bl	800702c <__locale_ctype_ptr>
 8007dc8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007dcc:	4458      	add	r0, fp
 8007dce:	7843      	ldrb	r3, [r0, #1]
 8007dd0:	f013 0308 	ands.w	r3, r3, #8
 8007dd4:	d01c      	beq.n	8007e10 <__ssvfiscanf_r+0x84>
 8007dd6:	6863      	ldr	r3, [r4, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dd12      	ble.n	8007e02 <__ssvfiscanf_r+0x76>
 8007ddc:	f7ff f926 	bl	800702c <__locale_ctype_ptr>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	4410      	add	r0, r2
 8007de6:	7842      	ldrb	r2, [r0, #1]
 8007de8:	0712      	lsls	r2, r2, #28
 8007dea:	d401      	bmi.n	8007df0 <__ssvfiscanf_r+0x64>
 8007dec:	46aa      	mov	sl, r5
 8007dee:	e7e3      	b.n	8007db8 <__ssvfiscanf_r+0x2c>
 8007df0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007df2:	3301      	adds	r3, #1
 8007df4:	3201      	adds	r2, #1
 8007df6:	9245      	str	r2, [sp, #276]	; 0x114
 8007df8:	6862      	ldr	r2, [r4, #4]
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	6062      	str	r2, [r4, #4]
 8007e00:	e7e9      	b.n	8007dd6 <__ssvfiscanf_r+0x4a>
 8007e02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e04:	4621      	mov	r1, r4
 8007e06:	4630      	mov	r0, r6
 8007e08:	4798      	blx	r3
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d0e6      	beq.n	8007ddc <__ssvfiscanf_r+0x50>
 8007e0e:	e7ed      	b.n	8007dec <__ssvfiscanf_r+0x60>
 8007e10:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007e14:	f040 8082 	bne.w	8007f1c <__ssvfiscanf_r+0x190>
 8007e18:	9343      	str	r3, [sp, #268]	; 0x10c
 8007e1a:	9341      	str	r3, [sp, #260]	; 0x104
 8007e1c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d103      	bne.n	8007e2c <__ssvfiscanf_r+0xa0>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f10a 0502 	add.w	r5, sl, #2
 8007e2a:	9341      	str	r3, [sp, #260]	; 0x104
 8007e2c:	46aa      	mov	sl, r5
 8007e2e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007e32:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007e36:	2a09      	cmp	r2, #9
 8007e38:	d922      	bls.n	8007e80 <__ssvfiscanf_r+0xf4>
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	4879      	ldr	r0, [pc, #484]	; (8008024 <__ssvfiscanf_r+0x298>)
 8007e3e:	f7ff f93f 	bl	80070c0 <memchr>
 8007e42:	b138      	cbz	r0, 8007e54 <__ssvfiscanf_r+0xc8>
 8007e44:	eba0 0309 	sub.w	r3, r0, r9
 8007e48:	2001      	movs	r0, #1
 8007e4a:	46aa      	mov	sl, r5
 8007e4c:	4098      	lsls	r0, r3
 8007e4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e50:	4318      	orrs	r0, r3
 8007e52:	9041      	str	r0, [sp, #260]	; 0x104
 8007e54:	f89a 3000 	ldrb.w	r3, [sl]
 8007e58:	f10a 0501 	add.w	r5, sl, #1
 8007e5c:	2b67      	cmp	r3, #103	; 0x67
 8007e5e:	d82b      	bhi.n	8007eb8 <__ssvfiscanf_r+0x12c>
 8007e60:	2b65      	cmp	r3, #101	; 0x65
 8007e62:	f080 809f 	bcs.w	8007fa4 <__ssvfiscanf_r+0x218>
 8007e66:	2b47      	cmp	r3, #71	; 0x47
 8007e68:	d810      	bhi.n	8007e8c <__ssvfiscanf_r+0x100>
 8007e6a:	2b45      	cmp	r3, #69	; 0x45
 8007e6c:	f080 809a 	bcs.w	8007fa4 <__ssvfiscanf_r+0x218>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d06c      	beq.n	8007f4e <__ssvfiscanf_r+0x1c2>
 8007e74:	2b25      	cmp	r3, #37	; 0x25
 8007e76:	d051      	beq.n	8007f1c <__ssvfiscanf_r+0x190>
 8007e78:	2303      	movs	r3, #3
 8007e7a:	9742      	str	r7, [sp, #264]	; 0x108
 8007e7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e7e:	e027      	b.n	8007ed0 <__ssvfiscanf_r+0x144>
 8007e80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007e82:	fb07 1303 	mla	r3, r7, r3, r1
 8007e86:	3b30      	subs	r3, #48	; 0x30
 8007e88:	9343      	str	r3, [sp, #268]	; 0x10c
 8007e8a:	e7cf      	b.n	8007e2c <__ssvfiscanf_r+0xa0>
 8007e8c:	2b5b      	cmp	r3, #91	; 0x5b
 8007e8e:	d06a      	beq.n	8007f66 <__ssvfiscanf_r+0x1da>
 8007e90:	d80c      	bhi.n	8007eac <__ssvfiscanf_r+0x120>
 8007e92:	2b58      	cmp	r3, #88	; 0x58
 8007e94:	d1f0      	bne.n	8007e78 <__ssvfiscanf_r+0xec>
 8007e96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e9c:	9241      	str	r2, [sp, #260]	; 0x104
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	9242      	str	r2, [sp, #264]	; 0x108
 8007ea2:	2b6e      	cmp	r3, #110	; 0x6e
 8007ea4:	bf8c      	ite	hi
 8007ea6:	2304      	movhi	r3, #4
 8007ea8:	2303      	movls	r3, #3
 8007eaa:	e010      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007eac:	2b63      	cmp	r3, #99	; 0x63
 8007eae:	d065      	beq.n	8007f7c <__ssvfiscanf_r+0x1f0>
 8007eb0:	2b64      	cmp	r3, #100	; 0x64
 8007eb2:	d1e1      	bne.n	8007e78 <__ssvfiscanf_r+0xec>
 8007eb4:	9742      	str	r7, [sp, #264]	; 0x108
 8007eb6:	e7f4      	b.n	8007ea2 <__ssvfiscanf_r+0x116>
 8007eb8:	2b70      	cmp	r3, #112	; 0x70
 8007eba:	d04b      	beq.n	8007f54 <__ssvfiscanf_r+0x1c8>
 8007ebc:	d826      	bhi.n	8007f0c <__ssvfiscanf_r+0x180>
 8007ebe:	2b6e      	cmp	r3, #110	; 0x6e
 8007ec0:	d062      	beq.n	8007f88 <__ssvfiscanf_r+0x1fc>
 8007ec2:	d84c      	bhi.n	8007f5e <__ssvfiscanf_r+0x1d2>
 8007ec4:	2b69      	cmp	r3, #105	; 0x69
 8007ec6:	d1d7      	bne.n	8007e78 <__ssvfiscanf_r+0xec>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9342      	str	r3, [sp, #264]	; 0x108
 8007ecc:	2303      	movs	r3, #3
 8007ece:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd68      	ble.n	8007fa8 <__ssvfiscanf_r+0x21c>
 8007ed6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ed8:	0659      	lsls	r1, r3, #25
 8007eda:	d407      	bmi.n	8007eec <__ssvfiscanf_r+0x160>
 8007edc:	f7ff f8a6 	bl	800702c <__locale_ctype_ptr>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	4410      	add	r0, r2
 8007ee6:	7842      	ldrb	r2, [r0, #1]
 8007ee8:	0712      	lsls	r2, r2, #28
 8007eea:	d464      	bmi.n	8007fb6 <__ssvfiscanf_r+0x22a>
 8007eec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	dc73      	bgt.n	8007fda <__ssvfiscanf_r+0x24e>
 8007ef2:	466b      	mov	r3, sp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	a941      	add	r1, sp, #260	; 0x104
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f000 f9d5 	bl	80082a8 <_scanf_chars>
 8007efe:	2801      	cmp	r0, #1
 8007f00:	f000 8089 	beq.w	8008016 <__ssvfiscanf_r+0x28a>
 8007f04:	2802      	cmp	r0, #2
 8007f06:	f47f af71 	bne.w	8007dec <__ssvfiscanf_r+0x60>
 8007f0a:	e01d      	b.n	8007f48 <__ssvfiscanf_r+0x1bc>
 8007f0c:	2b75      	cmp	r3, #117	; 0x75
 8007f0e:	d0d1      	beq.n	8007eb4 <__ssvfiscanf_r+0x128>
 8007f10:	2b78      	cmp	r3, #120	; 0x78
 8007f12:	d0c0      	beq.n	8007e96 <__ssvfiscanf_r+0x10a>
 8007f14:	2b73      	cmp	r3, #115	; 0x73
 8007f16:	d1af      	bne.n	8007e78 <__ssvfiscanf_r+0xec>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e7d8      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd0c      	ble.n	8007f3c <__ssvfiscanf_r+0x1b0>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	455a      	cmp	r2, fp
 8007f28:	d175      	bne.n	8008016 <__ssvfiscanf_r+0x28a>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	6862      	ldr	r2, [r4, #4]
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f32:	3a01      	subs	r2, #1
 8007f34:	3301      	adds	r3, #1
 8007f36:	6062      	str	r2, [r4, #4]
 8007f38:	9345      	str	r3, [sp, #276]	; 0x114
 8007f3a:	e757      	b.n	8007dec <__ssvfiscanf_r+0x60>
 8007f3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4630      	mov	r0, r6
 8007f42:	4798      	blx	r3
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d0ec      	beq.n	8007f22 <__ssvfiscanf_r+0x196>
 8007f48:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d159      	bne.n	8008002 <__ssvfiscanf_r+0x276>
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f52:	e05c      	b.n	800800e <__ssvfiscanf_r+0x282>
 8007f54:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007f56:	f042 0220 	orr.w	r2, r2, #32
 8007f5a:	9241      	str	r2, [sp, #260]	; 0x104
 8007f5c:	e79b      	b.n	8007e96 <__ssvfiscanf_r+0x10a>
 8007f5e:	2308      	movs	r3, #8
 8007f60:	9342      	str	r3, [sp, #264]	; 0x108
 8007f62:	2304      	movs	r3, #4
 8007f64:	e7b3      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007f66:	4629      	mov	r1, r5
 8007f68:	4640      	mov	r0, r8
 8007f6a:	f000 fb17 	bl	800859c <__sccl>
 8007f6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f70:	4605      	mov	r5, r0
 8007f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f76:	9341      	str	r3, [sp, #260]	; 0x104
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e7a8      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007f7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f82:	9341      	str	r3, [sp, #260]	; 0x104
 8007f84:	2300      	movs	r3, #0
 8007f86:	e7a2      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007f88:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007f8a:	06c3      	lsls	r3, r0, #27
 8007f8c:	f53f af2e 	bmi.w	8007dec <__ssvfiscanf_r+0x60>
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f94:	1d19      	adds	r1, r3, #4
 8007f96:	9100      	str	r1, [sp, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	07c0      	lsls	r0, r0, #31
 8007f9c:	bf4c      	ite	mi
 8007f9e:	801a      	strhmi	r2, [r3, #0]
 8007fa0:	601a      	strpl	r2, [r3, #0]
 8007fa2:	e723      	b.n	8007dec <__ssvfiscanf_r+0x60>
 8007fa4:	2305      	movs	r3, #5
 8007fa6:	e792      	b.n	8007ece <__ssvfiscanf_r+0x142>
 8007fa8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007faa:	4621      	mov	r1, r4
 8007fac:	4630      	mov	r0, r6
 8007fae:	4798      	blx	r3
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d090      	beq.n	8007ed6 <__ssvfiscanf_r+0x14a>
 8007fb4:	e7c8      	b.n	8007f48 <__ssvfiscanf_r+0x1bc>
 8007fb6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007fb8:	3201      	adds	r2, #1
 8007fba:	9245      	str	r2, [sp, #276]	; 0x114
 8007fbc:	6862      	ldr	r2, [r4, #4]
 8007fbe:	3a01      	subs	r2, #1
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	6062      	str	r2, [r4, #4]
 8007fc4:	dd02      	ble.n	8007fcc <__ssvfiscanf_r+0x240>
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	e787      	b.n	8007edc <__ssvfiscanf_r+0x150>
 8007fcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4798      	blx	r3
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d081      	beq.n	8007edc <__ssvfiscanf_r+0x150>
 8007fd8:	e7b6      	b.n	8007f48 <__ssvfiscanf_r+0x1bc>
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	dc06      	bgt.n	8007fec <__ssvfiscanf_r+0x260>
 8007fde:	466b      	mov	r3, sp
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	a941      	add	r1, sp, #260	; 0x104
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 f9c1 	bl	800836c <_scanf_i>
 8007fea:	e788      	b.n	8007efe <__ssvfiscanf_r+0x172>
 8007fec:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <__ssvfiscanf_r+0x29c>)
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f43f aefc 	beq.w	8007dec <__ssvfiscanf_r+0x60>
 8007ff4:	466b      	mov	r3, sp
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	a941      	add	r1, sp, #260	; 0x104
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f7fc fc70 	bl	80048e0 <_scanf_float>
 8008000:	e77d      	b.n	8007efe <__ssvfiscanf_r+0x172>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008008:	bf18      	it	ne
 800800a:	f04f 30ff 	movne.w	r0, #4294967295
 800800e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008018:	e7f9      	b.n	800800e <__ssvfiscanf_r+0x282>
 800801a:	bf00      	nop
 800801c:	08007cd9 	.word	0x08007cd9
 8008020:	08007d53 	.word	0x08007d53
 8008024:	0800b05a 	.word	0x0800b05a
 8008028:	080048e1 	.word	0x080048e1

0800802c <__sfputc_r>:
 800802c:	6893      	ldr	r3, [r2, #8]
 800802e:	b410      	push	{r4}
 8008030:	3b01      	subs	r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	6093      	str	r3, [r2, #8]
 8008036:	da07      	bge.n	8008048 <__sfputc_r+0x1c>
 8008038:	6994      	ldr	r4, [r2, #24]
 800803a:	42a3      	cmp	r3, r4
 800803c:	db01      	blt.n	8008042 <__sfputc_r+0x16>
 800803e:	290a      	cmp	r1, #10
 8008040:	d102      	bne.n	8008048 <__sfputc_r+0x1c>
 8008042:	bc10      	pop	{r4}
 8008044:	f000 bbb2 	b.w	80087ac <__swbuf_r>
 8008048:	6813      	ldr	r3, [r2, #0]
 800804a:	1c58      	adds	r0, r3, #1
 800804c:	6010      	str	r0, [r2, #0]
 800804e:	7019      	strb	r1, [r3, #0]
 8008050:	4608      	mov	r0, r1
 8008052:	bc10      	pop	{r4}
 8008054:	4770      	bx	lr

08008056 <__sfputs_r>:
 8008056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008058:	4606      	mov	r6, r0
 800805a:	460f      	mov	r7, r1
 800805c:	4614      	mov	r4, r2
 800805e:	18d5      	adds	r5, r2, r3
 8008060:	42ac      	cmp	r4, r5
 8008062:	d101      	bne.n	8008068 <__sfputs_r+0x12>
 8008064:	2000      	movs	r0, #0
 8008066:	e007      	b.n	8008078 <__sfputs_r+0x22>
 8008068:	463a      	mov	r2, r7
 800806a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ffdc 	bl	800802c <__sfputc_r>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d1f3      	bne.n	8008060 <__sfputs_r+0xa>
 8008078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800807c <_vfiprintf_r>:
 800807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	b09d      	sub	sp, #116	; 0x74
 8008084:	4617      	mov	r7, r2
 8008086:	461d      	mov	r5, r3
 8008088:	4606      	mov	r6, r0
 800808a:	b118      	cbz	r0, 8008094 <_vfiprintf_r+0x18>
 800808c:	6983      	ldr	r3, [r0, #24]
 800808e:	b90b      	cbnz	r3, 8008094 <_vfiprintf_r+0x18>
 8008090:	f7fe fc16 	bl	80068c0 <__sinit>
 8008094:	4b7c      	ldr	r3, [pc, #496]	; (8008288 <_vfiprintf_r+0x20c>)
 8008096:	429c      	cmp	r4, r3
 8008098:	d158      	bne.n	800814c <_vfiprintf_r+0xd0>
 800809a:	6874      	ldr	r4, [r6, #4]
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	0718      	lsls	r0, r3, #28
 80080a0:	d55e      	bpl.n	8008160 <_vfiprintf_r+0xe4>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05b      	beq.n	8008160 <_vfiprintf_r+0xe4>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	2320      	movs	r3, #32
 80080ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b2:	2330      	movs	r3, #48	; 0x30
 80080b4:	f04f 0b01 	mov.w	fp, #1
 80080b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080bc:	9503      	str	r5, [sp, #12]
 80080be:	46b8      	mov	r8, r7
 80080c0:	4645      	mov	r5, r8
 80080c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080c6:	b10b      	cbz	r3, 80080cc <_vfiprintf_r+0x50>
 80080c8:	2b25      	cmp	r3, #37	; 0x25
 80080ca:	d154      	bne.n	8008176 <_vfiprintf_r+0xfa>
 80080cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80080d0:	d00b      	beq.n	80080ea <_vfiprintf_r+0x6e>
 80080d2:	4653      	mov	r3, sl
 80080d4:	463a      	mov	r2, r7
 80080d6:	4621      	mov	r1, r4
 80080d8:	4630      	mov	r0, r6
 80080da:	f7ff ffbc 	bl	8008056 <__sfputs_r>
 80080de:	3001      	adds	r0, #1
 80080e0:	f000 80c2 	beq.w	8008268 <_vfiprintf_r+0x1ec>
 80080e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e6:	4453      	add	r3, sl
 80080e8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ea:	f898 3000 	ldrb.w	r3, [r8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80ba 	beq.w	8008268 <_vfiprintf_r+0x1ec>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008106:	931a      	str	r3, [sp, #104]	; 0x68
 8008108:	46a8      	mov	r8, r5
 800810a:	2205      	movs	r2, #5
 800810c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008110:	485e      	ldr	r0, [pc, #376]	; (800828c <_vfiprintf_r+0x210>)
 8008112:	f7fe ffd5 	bl	80070c0 <memchr>
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	bb78      	cbnz	r0, 800817a <_vfiprintf_r+0xfe>
 800811a:	06d9      	lsls	r1, r3, #27
 800811c:	bf44      	itt	mi
 800811e:	2220      	movmi	r2, #32
 8008120:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008124:	071a      	lsls	r2, r3, #28
 8008126:	bf44      	itt	mi
 8008128:	222b      	movmi	r2, #43	; 0x2b
 800812a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800812e:	782a      	ldrb	r2, [r5, #0]
 8008130:	2a2a      	cmp	r2, #42	; 0x2a
 8008132:	d02a      	beq.n	800818a <_vfiprintf_r+0x10e>
 8008134:	46a8      	mov	r8, r5
 8008136:	2000      	movs	r0, #0
 8008138:	250a      	movs	r5, #10
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	4641      	mov	r1, r8
 800813e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008142:	3b30      	subs	r3, #48	; 0x30
 8008144:	2b09      	cmp	r3, #9
 8008146:	d969      	bls.n	800821c <_vfiprintf_r+0x1a0>
 8008148:	b360      	cbz	r0, 80081a4 <_vfiprintf_r+0x128>
 800814a:	e024      	b.n	8008196 <_vfiprintf_r+0x11a>
 800814c:	4b50      	ldr	r3, [pc, #320]	; (8008290 <_vfiprintf_r+0x214>)
 800814e:	429c      	cmp	r4, r3
 8008150:	d101      	bne.n	8008156 <_vfiprintf_r+0xda>
 8008152:	68b4      	ldr	r4, [r6, #8]
 8008154:	e7a2      	b.n	800809c <_vfiprintf_r+0x20>
 8008156:	4b4f      	ldr	r3, [pc, #316]	; (8008294 <_vfiprintf_r+0x218>)
 8008158:	429c      	cmp	r4, r3
 800815a:	bf08      	it	eq
 800815c:	68f4      	ldreq	r4, [r6, #12]
 800815e:	e79d      	b.n	800809c <_vfiprintf_r+0x20>
 8008160:	4621      	mov	r1, r4
 8008162:	4630      	mov	r0, r6
 8008164:	f000 fb82 	bl	800886c <__swsetup_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	d09d      	beq.n	80080a8 <_vfiprintf_r+0x2c>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	b01d      	add	sp, #116	; 0x74
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	46a8      	mov	r8, r5
 8008178:	e7a2      	b.n	80080c0 <_vfiprintf_r+0x44>
 800817a:	4a44      	ldr	r2, [pc, #272]	; (800828c <_vfiprintf_r+0x210>)
 800817c:	4645      	mov	r5, r8
 800817e:	1a80      	subs	r0, r0, r2
 8008180:	fa0b f000 	lsl.w	r0, fp, r0
 8008184:	4318      	orrs	r0, r3
 8008186:	9004      	str	r0, [sp, #16]
 8008188:	e7be      	b.n	8008108 <_vfiprintf_r+0x8c>
 800818a:	9a03      	ldr	r2, [sp, #12]
 800818c:	1d11      	adds	r1, r2, #4
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	9103      	str	r1, [sp, #12]
 8008192:	2a00      	cmp	r2, #0
 8008194:	db01      	blt.n	800819a <_vfiprintf_r+0x11e>
 8008196:	9207      	str	r2, [sp, #28]
 8008198:	e004      	b.n	80081a4 <_vfiprintf_r+0x128>
 800819a:	4252      	negs	r2, r2
 800819c:	f043 0302 	orr.w	r3, r3, #2
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	f898 3000 	ldrb.w	r3, [r8]
 80081a8:	2b2e      	cmp	r3, #46	; 0x2e
 80081aa:	d10e      	bne.n	80081ca <_vfiprintf_r+0x14e>
 80081ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80081b0:	2b2a      	cmp	r3, #42	; 0x2a
 80081b2:	d138      	bne.n	8008226 <_vfiprintf_r+0x1aa>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	f108 0802 	add.w	r8, r8, #2
 80081ba:	1d1a      	adds	r2, r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	9203      	str	r2, [sp, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bfb8      	it	lt
 80081c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	4d33      	ldr	r5, [pc, #204]	; (8008298 <_vfiprintf_r+0x21c>)
 80081cc:	2203      	movs	r2, #3
 80081ce:	f898 1000 	ldrb.w	r1, [r8]
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7fe ff74 	bl	80070c0 <memchr>
 80081d8:	b140      	cbz	r0, 80081ec <_vfiprintf_r+0x170>
 80081da:	2340      	movs	r3, #64	; 0x40
 80081dc:	1b40      	subs	r0, r0, r5
 80081de:	fa03 f000 	lsl.w	r0, r3, r0
 80081e2:	9b04      	ldr	r3, [sp, #16]
 80081e4:	f108 0801 	add.w	r8, r8, #1
 80081e8:	4303      	orrs	r3, r0
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	f898 1000 	ldrb.w	r1, [r8]
 80081f0:	2206      	movs	r2, #6
 80081f2:	482a      	ldr	r0, [pc, #168]	; (800829c <_vfiprintf_r+0x220>)
 80081f4:	f108 0701 	add.w	r7, r8, #1
 80081f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081fc:	f7fe ff60 	bl	80070c0 <memchr>
 8008200:	2800      	cmp	r0, #0
 8008202:	d037      	beq.n	8008274 <_vfiprintf_r+0x1f8>
 8008204:	4b26      	ldr	r3, [pc, #152]	; (80082a0 <_vfiprintf_r+0x224>)
 8008206:	bb1b      	cbnz	r3, 8008250 <_vfiprintf_r+0x1d4>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	3307      	adds	r3, #7
 800820c:	f023 0307 	bic.w	r3, r3, #7
 8008210:	3308      	adds	r3, #8
 8008212:	9303      	str	r3, [sp, #12]
 8008214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008216:	444b      	add	r3, r9
 8008218:	9309      	str	r3, [sp, #36]	; 0x24
 800821a:	e750      	b.n	80080be <_vfiprintf_r+0x42>
 800821c:	fb05 3202 	mla	r2, r5, r2, r3
 8008220:	2001      	movs	r0, #1
 8008222:	4688      	mov	r8, r1
 8008224:	e78a      	b.n	800813c <_vfiprintf_r+0xc0>
 8008226:	2300      	movs	r3, #0
 8008228:	250a      	movs	r5, #10
 800822a:	4619      	mov	r1, r3
 800822c:	f108 0801 	add.w	r8, r8, #1
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	4640      	mov	r0, r8
 8008234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008238:	3a30      	subs	r2, #48	; 0x30
 800823a:	2a09      	cmp	r2, #9
 800823c:	d903      	bls.n	8008246 <_vfiprintf_r+0x1ca>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0c3      	beq.n	80081ca <_vfiprintf_r+0x14e>
 8008242:	9105      	str	r1, [sp, #20]
 8008244:	e7c1      	b.n	80081ca <_vfiprintf_r+0x14e>
 8008246:	fb05 2101 	mla	r1, r5, r1, r2
 800824a:	2301      	movs	r3, #1
 800824c:	4680      	mov	r8, r0
 800824e:	e7f0      	b.n	8008232 <_vfiprintf_r+0x1b6>
 8008250:	ab03      	add	r3, sp, #12
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	4622      	mov	r2, r4
 8008256:	4b13      	ldr	r3, [pc, #76]	; (80082a4 <_vfiprintf_r+0x228>)
 8008258:	a904      	add	r1, sp, #16
 800825a:	4630      	mov	r0, r6
 800825c:	f7fb ff82 	bl	8004164 <_printf_float>
 8008260:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008264:	4681      	mov	r9, r0
 8008266:	d1d5      	bne.n	8008214 <_vfiprintf_r+0x198>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	065b      	lsls	r3, r3, #25
 800826c:	f53f af7e 	bmi.w	800816c <_vfiprintf_r+0xf0>
 8008270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008272:	e77d      	b.n	8008170 <_vfiprintf_r+0xf4>
 8008274:	ab03      	add	r3, sp, #12
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4622      	mov	r2, r4
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <_vfiprintf_r+0x228>)
 800827c:	a904      	add	r1, sp, #16
 800827e:	4630      	mov	r0, r6
 8008280:	f7fc fa1c 	bl	80046bc <_printf_i>
 8008284:	e7ec      	b.n	8008260 <_vfiprintf_r+0x1e4>
 8008286:	bf00      	nop
 8008288:	0800af08 	.word	0x0800af08
 800828c:	0800b054 	.word	0x0800b054
 8008290:	0800af28 	.word	0x0800af28
 8008294:	0800aee8 	.word	0x0800aee8
 8008298:	0800b05a 	.word	0x0800b05a
 800829c:	0800b05e 	.word	0x0800b05e
 80082a0:	08004165 	.word	0x08004165
 80082a4:	08008057 	.word	0x08008057

080082a8 <_scanf_chars>:
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4615      	mov	r5, r2
 80082ae:	688a      	ldr	r2, [r1, #8]
 80082b0:	4680      	mov	r8, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	b932      	cbnz	r2, 80082c4 <_scanf_chars+0x1c>
 80082b6:	698a      	ldr	r2, [r1, #24]
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	bf14      	ite	ne
 80082bc:	f04f 32ff 	movne.w	r2, #4294967295
 80082c0:	2201      	moveq	r2, #1
 80082c2:	608a      	str	r2, [r1, #8]
 80082c4:	2600      	movs	r6, #0
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	06d1      	lsls	r1, r2, #27
 80082ca:	bf5f      	itttt	pl
 80082cc:	681a      	ldrpl	r2, [r3, #0]
 80082ce:	1d11      	addpl	r1, r2, #4
 80082d0:	6019      	strpl	r1, [r3, #0]
 80082d2:	6817      	ldrpl	r7, [r2, #0]
 80082d4:	69a3      	ldr	r3, [r4, #24]
 80082d6:	b1db      	cbz	r3, 8008310 <_scanf_chars+0x68>
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d107      	bne.n	80082ec <_scanf_chars+0x44>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	6962      	ldr	r2, [r4, #20]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	5cd3      	ldrb	r3, [r2, r3]
 80082e4:	b9a3      	cbnz	r3, 8008310 <_scanf_chars+0x68>
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	d131      	bne.n	800834e <_scanf_chars+0xa6>
 80082ea:	e006      	b.n	80082fa <_scanf_chars+0x52>
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d007      	beq.n	8008300 <_scanf_chars+0x58>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	d12c      	bne.n	800834e <_scanf_chars+0xa6>
 80082f4:	69a3      	ldr	r3, [r4, #24]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d129      	bne.n	800834e <_scanf_chars+0xa6>
 80082fa:	2001      	movs	r0, #1
 80082fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008300:	f7fe fe94 	bl	800702c <__locale_ctype_ptr>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	4418      	add	r0, r3
 800830a:	7843      	ldrb	r3, [r0, #1]
 800830c:	071b      	lsls	r3, r3, #28
 800830e:	d4ef      	bmi.n	80082f0 <_scanf_chars+0x48>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	3601      	adds	r6, #1
 8008314:	06da      	lsls	r2, r3, #27
 8008316:	bf5e      	ittt	pl
 8008318:	682b      	ldrpl	r3, [r5, #0]
 800831a:	781b      	ldrbpl	r3, [r3, #0]
 800831c:	703b      	strbpl	r3, [r7, #0]
 800831e:	682a      	ldr	r2, [r5, #0]
 8008320:	686b      	ldr	r3, [r5, #4]
 8008322:	f102 0201 	add.w	r2, r2, #1
 8008326:	602a      	str	r2, [r5, #0]
 8008328:	68a2      	ldr	r2, [r4, #8]
 800832a:	f103 33ff 	add.w	r3, r3, #4294967295
 800832e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008332:	606b      	str	r3, [r5, #4]
 8008334:	bf58      	it	pl
 8008336:	3701      	addpl	r7, #1
 8008338:	60a2      	str	r2, [r4, #8]
 800833a:	b142      	cbz	r2, 800834e <_scanf_chars+0xa6>
 800833c:	2b00      	cmp	r3, #0
 800833e:	dcc9      	bgt.n	80082d4 <_scanf_chars+0x2c>
 8008340:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008344:	4629      	mov	r1, r5
 8008346:	4640      	mov	r0, r8
 8008348:	4798      	blx	r3
 800834a:	2800      	cmp	r0, #0
 800834c:	d0c2      	beq.n	80082d4 <_scanf_chars+0x2c>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	f013 0310 	ands.w	r3, r3, #16
 8008354:	d105      	bne.n	8008362 <_scanf_chars+0xba>
 8008356:	68e2      	ldr	r2, [r4, #12]
 8008358:	3201      	adds	r2, #1
 800835a:	60e2      	str	r2, [r4, #12]
 800835c:	69a2      	ldr	r2, [r4, #24]
 800835e:	b102      	cbz	r2, 8008362 <_scanf_chars+0xba>
 8008360:	703b      	strb	r3, [r7, #0]
 8008362:	6923      	ldr	r3, [r4, #16]
 8008364:	2000      	movs	r0, #0
 8008366:	441e      	add	r6, r3
 8008368:	6126      	str	r6, [r4, #16]
 800836a:	e7c7      	b.n	80082fc <_scanf_chars+0x54>

0800836c <_scanf_i>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	460c      	mov	r4, r1
 8008372:	469a      	mov	sl, r3
 8008374:	4b74      	ldr	r3, [pc, #464]	; (8008548 <_scanf_i+0x1dc>)
 8008376:	b087      	sub	sp, #28
 8008378:	4683      	mov	fp, r0
 800837a:	4616      	mov	r6, r2
 800837c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008380:	ab03      	add	r3, sp, #12
 8008382:	68a7      	ldr	r7, [r4, #8]
 8008384:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008388:	4b70      	ldr	r3, [pc, #448]	; (800854c <_scanf_i+0x1e0>)
 800838a:	69a1      	ldr	r1, [r4, #24]
 800838c:	4a70      	ldr	r2, [pc, #448]	; (8008550 <_scanf_i+0x1e4>)
 800838e:	f104 091c 	add.w	r9, r4, #28
 8008392:	2903      	cmp	r1, #3
 8008394:	bf08      	it	eq
 8008396:	461a      	moveq	r2, r3
 8008398:	1e7b      	subs	r3, r7, #1
 800839a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800839e:	bf84      	itt	hi
 80083a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083a4:	60a3      	strhi	r3, [r4, #8]
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	bf88      	it	hi
 80083aa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083ae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80083b2:	6023      	str	r3, [r4, #0]
 80083b4:	bf98      	it	ls
 80083b6:	2700      	movls	r7, #0
 80083b8:	464b      	mov	r3, r9
 80083ba:	f04f 0800 	mov.w	r8, #0
 80083be:	9200      	str	r2, [sp, #0]
 80083c0:	bf88      	it	hi
 80083c2:	197f      	addhi	r7, r7, r5
 80083c4:	6831      	ldr	r1, [r6, #0]
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	ab03      	add	r3, sp, #12
 80083ca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80083ce:	2202      	movs	r2, #2
 80083d0:	7809      	ldrb	r1, [r1, #0]
 80083d2:	f7fe fe75 	bl	80070c0 <memchr>
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	b330      	cbz	r0, 8008428 <_scanf_i+0xbc>
 80083da:	f1b8 0f01 	cmp.w	r8, #1
 80083de:	d15a      	bne.n	8008496 <_scanf_i+0x12a>
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	b92a      	cbnz	r2, 80083f0 <_scanf_i+0x84>
 80083e4:	2108      	movs	r1, #8
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	6061      	str	r1, [r4, #4]
 80083ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ee:	6022      	str	r2, [r4, #0]
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	68a2      	ldr	r2, [r4, #8]
 80083fa:	1e51      	subs	r1, r2, #1
 80083fc:	60a1      	str	r1, [r4, #8]
 80083fe:	b19a      	cbz	r2, 8008428 <_scanf_i+0xbc>
 8008400:	6832      	ldr	r2, [r6, #0]
 8008402:	1c5d      	adds	r5, r3, #1
 8008404:	1c51      	adds	r1, r2, #1
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	7812      	ldrb	r2, [r2, #0]
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	6873      	ldr	r3, [r6, #4]
 800840e:	3b01      	subs	r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	6073      	str	r3, [r6, #4]
 8008414:	dc07      	bgt.n	8008426 <_scanf_i+0xba>
 8008416:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800841a:	4631      	mov	r1, r6
 800841c:	4658      	mov	r0, fp
 800841e:	4798      	blx	r3
 8008420:	2800      	cmp	r0, #0
 8008422:	f040 8087 	bne.w	8008534 <_scanf_i+0x1c8>
 8008426:	462b      	mov	r3, r5
 8008428:	f108 0801 	add.w	r8, r8, #1
 800842c:	f1b8 0f03 	cmp.w	r8, #3
 8008430:	d1c8      	bne.n	80083c4 <_scanf_i+0x58>
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	b90a      	cbnz	r2, 800843a <_scanf_i+0xce>
 8008436:	220a      	movs	r2, #10
 8008438:	6062      	str	r2, [r4, #4]
 800843a:	6862      	ldr	r2, [r4, #4]
 800843c:	4945      	ldr	r1, [pc, #276]	; (8008554 <_scanf_i+0x1e8>)
 800843e:	6960      	ldr	r0, [r4, #20]
 8008440:	1a89      	subs	r1, r1, r2
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	f000 f8aa 	bl	800859c <__sccl>
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	f04f 0800 	mov.w	r8, #0
 800844e:	461d      	mov	r5, r3
 8008450:	68a3      	ldr	r3, [r4, #8]
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03b      	beq.n	80084d0 <_scanf_i+0x164>
 8008458:	6831      	ldr	r1, [r6, #0]
 800845a:	6960      	ldr	r0, [r4, #20]
 800845c:	f891 c000 	ldrb.w	ip, [r1]
 8008460:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008464:	2800      	cmp	r0, #0
 8008466:	d033      	beq.n	80084d0 <_scanf_i+0x164>
 8008468:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800846c:	d121      	bne.n	80084b2 <_scanf_i+0x146>
 800846e:	0510      	lsls	r0, r2, #20
 8008470:	d51f      	bpl.n	80084b2 <_scanf_i+0x146>
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	b117      	cbz	r7, 800847e <_scanf_i+0x112>
 8008478:	3301      	adds	r3, #1
 800847a:	3f01      	subs	r7, #1
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	6873      	ldr	r3, [r6, #4]
 8008480:	3b01      	subs	r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	6073      	str	r3, [r6, #4]
 8008486:	dd1c      	ble.n	80084c2 <_scanf_i+0x156>
 8008488:	6833      	ldr	r3, [r6, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	3b01      	subs	r3, #1
 8008492:	60a3      	str	r3, [r4, #8]
 8008494:	e7dc      	b.n	8008450 <_scanf_i+0xe4>
 8008496:	f1b8 0f02 	cmp.w	r8, #2
 800849a:	d1ad      	bne.n	80083f8 <_scanf_i+0x8c>
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80084a6:	d1bf      	bne.n	8008428 <_scanf_i+0xbc>
 80084a8:	2110      	movs	r1, #16
 80084aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ae:	6061      	str	r1, [r4, #4]
 80084b0:	e7a1      	b.n	80083f6 <_scanf_i+0x8a>
 80084b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	780b      	ldrb	r3, [r1, #0]
 80084ba:	3501      	adds	r5, #1
 80084bc:	f805 3c01 	strb.w	r3, [r5, #-1]
 80084c0:	e7dd      	b.n	800847e <_scanf_i+0x112>
 80084c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084c6:	4631      	mov	r1, r6
 80084c8:	4658      	mov	r0, fp
 80084ca:	4798      	blx	r3
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d0de      	beq.n	800848e <_scanf_i+0x122>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	05d9      	lsls	r1, r3, #23
 80084d4:	d50c      	bpl.n	80084f0 <_scanf_i+0x184>
 80084d6:	454d      	cmp	r5, r9
 80084d8:	d908      	bls.n	80084ec <_scanf_i+0x180>
 80084da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80084de:	1e6f      	subs	r7, r5, #1
 80084e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80084e4:	4632      	mov	r2, r6
 80084e6:	4658      	mov	r0, fp
 80084e8:	4798      	blx	r3
 80084ea:	463d      	mov	r5, r7
 80084ec:	454d      	cmp	r5, r9
 80084ee:	d029      	beq.n	8008544 <_scanf_i+0x1d8>
 80084f0:	6822      	ldr	r2, [r4, #0]
 80084f2:	f012 0210 	ands.w	r2, r2, #16
 80084f6:	d113      	bne.n	8008520 <_scanf_i+0x1b4>
 80084f8:	702a      	strb	r2, [r5, #0]
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	4649      	mov	r1, r9
 80084fe:	4658      	mov	r0, fp
 8008500:	9e00      	ldr	r6, [sp, #0]
 8008502:	47b0      	blx	r6
 8008504:	f8da 3000 	ldr.w	r3, [sl]
 8008508:	6821      	ldr	r1, [r4, #0]
 800850a:	1d1a      	adds	r2, r3, #4
 800850c:	f8ca 2000 	str.w	r2, [sl]
 8008510:	f011 0f20 	tst.w	r1, #32
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	d010      	beq.n	800853a <_scanf_i+0x1ce>
 8008518:	6018      	str	r0, [r3, #0]
 800851a:	68e3      	ldr	r3, [r4, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60e3      	str	r3, [r4, #12]
 8008520:	2000      	movs	r0, #0
 8008522:	eba5 0509 	sub.w	r5, r5, r9
 8008526:	44a8      	add	r8, r5
 8008528:	6925      	ldr	r5, [r4, #16]
 800852a:	4445      	add	r5, r8
 800852c:	6125      	str	r5, [r4, #16]
 800852e:	b007      	add	sp, #28
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008534:	f04f 0800 	mov.w	r8, #0
 8008538:	e7ca      	b.n	80084d0 <_scanf_i+0x164>
 800853a:	07ca      	lsls	r2, r1, #31
 800853c:	bf4c      	ite	mi
 800853e:	8018      	strhmi	r0, [r3, #0]
 8008540:	6018      	strpl	r0, [r3, #0]
 8008542:	e7ea      	b.n	800851a <_scanf_i+0x1ae>
 8008544:	2001      	movs	r0, #1
 8008546:	e7f2      	b.n	800852e <_scanf_i+0x1c2>
 8008548:	08008c40 	.word	0x08008c40
 800854c:	08005b51 	.word	0x08005b51
 8008550:	08008719 	.word	0x08008719
 8008554:	0800b075 	.word	0x0800b075

08008558 <_read_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	4608      	mov	r0, r1
 800855e:	4611      	mov	r1, r2
 8008560:	2200      	movs	r2, #0
 8008562:	4c05      	ldr	r4, [pc, #20]	; (8008578 <_read_r+0x20>)
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7fb fc94 	bl	8003e94 <_read>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_read_r+0x1e>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	b103      	cbz	r3, 8008576 <_read_r+0x1e>
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	200008d0 	.word	0x200008d0

0800857c <_sbrk_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	2300      	movs	r3, #0
 8008580:	4c05      	ldr	r4, [pc, #20]	; (8008598 <_sbrk_r+0x1c>)
 8008582:	4605      	mov	r5, r0
 8008584:	4608      	mov	r0, r1
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	f7fb fc92 	bl	8003eb0 <_sbrk>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_sbrk_r+0x1a>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	b103      	cbz	r3, 8008596 <_sbrk_r+0x1a>
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	200008d0 	.word	0x200008d0

0800859c <__sccl>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	780b      	ldrb	r3, [r1, #0]
 80085a0:	1e44      	subs	r4, r0, #1
 80085a2:	2b5e      	cmp	r3, #94	; 0x5e
 80085a4:	bf13      	iteet	ne
 80085a6:	1c4a      	addne	r2, r1, #1
 80085a8:	1c8a      	addeq	r2, r1, #2
 80085aa:	784b      	ldrbeq	r3, [r1, #1]
 80085ac:	2100      	movne	r1, #0
 80085ae:	bf08      	it	eq
 80085b0:	2101      	moveq	r1, #1
 80085b2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80085b6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80085ba:	42ac      	cmp	r4, r5
 80085bc:	d1fb      	bne.n	80085b6 <__sccl+0x1a>
 80085be:	b913      	cbnz	r3, 80085c6 <__sccl+0x2a>
 80085c0:	3a01      	subs	r2, #1
 80085c2:	4610      	mov	r0, r2
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
 80085c6:	f081 0401 	eor.w	r4, r1, #1
 80085ca:	54c4      	strb	r4, [r0, r3]
 80085cc:	1c51      	adds	r1, r2, #1
 80085ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80085d2:	1e4e      	subs	r6, r1, #1
 80085d4:	2d2d      	cmp	r5, #45	; 0x2d
 80085d6:	460a      	mov	r2, r1
 80085d8:	d006      	beq.n	80085e8 <__sccl+0x4c>
 80085da:	2d5d      	cmp	r5, #93	; 0x5d
 80085dc:	d0f1      	beq.n	80085c2 <__sccl+0x26>
 80085de:	b90d      	cbnz	r5, 80085e4 <__sccl+0x48>
 80085e0:	4632      	mov	r2, r6
 80085e2:	e7ee      	b.n	80085c2 <__sccl+0x26>
 80085e4:	462b      	mov	r3, r5
 80085e6:	e7f0      	b.n	80085ca <__sccl+0x2e>
 80085e8:	780e      	ldrb	r6, [r1, #0]
 80085ea:	2e5d      	cmp	r6, #93	; 0x5d
 80085ec:	d0fa      	beq.n	80085e4 <__sccl+0x48>
 80085ee:	42b3      	cmp	r3, r6
 80085f0:	dcf8      	bgt.n	80085e4 <__sccl+0x48>
 80085f2:	3301      	adds	r3, #1
 80085f4:	429e      	cmp	r6, r3
 80085f6:	54c4      	strb	r4, [r0, r3]
 80085f8:	dcfb      	bgt.n	80085f2 <__sccl+0x56>
 80085fa:	3102      	adds	r1, #2
 80085fc:	e7e7      	b.n	80085ce <__sccl+0x32>

080085fe <strncmp>:
 80085fe:	b510      	push	{r4, lr}
 8008600:	b16a      	cbz	r2, 800861e <strncmp+0x20>
 8008602:	3901      	subs	r1, #1
 8008604:	1884      	adds	r4, r0, r2
 8008606:	f810 3b01 	ldrb.w	r3, [r0], #1
 800860a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800860e:	4293      	cmp	r3, r2
 8008610:	d103      	bne.n	800861a <strncmp+0x1c>
 8008612:	42a0      	cmp	r0, r4
 8008614:	d001      	beq.n	800861a <strncmp+0x1c>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1f5      	bne.n	8008606 <strncmp+0x8>
 800861a:	1a98      	subs	r0, r3, r2
 800861c:	bd10      	pop	{r4, pc}
 800861e:	4610      	mov	r0, r2
 8008620:	e7fc      	b.n	800861c <strncmp+0x1e>

08008622 <_strtoul_l.isra.0>:
 8008622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008626:	4680      	mov	r8, r0
 8008628:	4689      	mov	r9, r1
 800862a:	4692      	mov	sl, r2
 800862c:	461e      	mov	r6, r3
 800862e:	460f      	mov	r7, r1
 8008630:	463d      	mov	r5, r7
 8008632:	9808      	ldr	r0, [sp, #32]
 8008634:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008638:	f7fe fcf4 	bl	8007024 <__locale_ctype_ptr_l>
 800863c:	4420      	add	r0, r4
 800863e:	7843      	ldrb	r3, [r0, #1]
 8008640:	f013 0308 	ands.w	r3, r3, #8
 8008644:	d130      	bne.n	80086a8 <_strtoul_l.isra.0+0x86>
 8008646:	2c2d      	cmp	r4, #45	; 0x2d
 8008648:	d130      	bne.n	80086ac <_strtoul_l.isra.0+0x8a>
 800864a:	2101      	movs	r1, #1
 800864c:	787c      	ldrb	r4, [r7, #1]
 800864e:	1cbd      	adds	r5, r7, #2
 8008650:	2e00      	cmp	r6, #0
 8008652:	d05c      	beq.n	800870e <_strtoul_l.isra.0+0xec>
 8008654:	2e10      	cmp	r6, #16
 8008656:	d109      	bne.n	800866c <_strtoul_l.isra.0+0x4a>
 8008658:	2c30      	cmp	r4, #48	; 0x30
 800865a:	d107      	bne.n	800866c <_strtoul_l.isra.0+0x4a>
 800865c:	782b      	ldrb	r3, [r5, #0]
 800865e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008662:	2b58      	cmp	r3, #88	; 0x58
 8008664:	d14e      	bne.n	8008704 <_strtoul_l.isra.0+0xe2>
 8008666:	2610      	movs	r6, #16
 8008668:	786c      	ldrb	r4, [r5, #1]
 800866a:	3502      	adds	r5, #2
 800866c:	f04f 32ff 	mov.w	r2, #4294967295
 8008670:	fbb2 f2f6 	udiv	r2, r2, r6
 8008674:	2300      	movs	r3, #0
 8008676:	fb06 fc02 	mul.w	ip, r6, r2
 800867a:	4618      	mov	r0, r3
 800867c:	ea6f 0c0c 	mvn.w	ip, ip
 8008680:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008684:	2f09      	cmp	r7, #9
 8008686:	d817      	bhi.n	80086b8 <_strtoul_l.isra.0+0x96>
 8008688:	463c      	mov	r4, r7
 800868a:	42a6      	cmp	r6, r4
 800868c:	dd23      	ble.n	80086d6 <_strtoul_l.isra.0+0xb4>
 800868e:	2b00      	cmp	r3, #0
 8008690:	db1e      	blt.n	80086d0 <_strtoul_l.isra.0+0xae>
 8008692:	4282      	cmp	r2, r0
 8008694:	d31c      	bcc.n	80086d0 <_strtoul_l.isra.0+0xae>
 8008696:	d101      	bne.n	800869c <_strtoul_l.isra.0+0x7a>
 8008698:	45a4      	cmp	ip, r4
 800869a:	db19      	blt.n	80086d0 <_strtoul_l.isra.0+0xae>
 800869c:	2301      	movs	r3, #1
 800869e:	fb00 4006 	mla	r0, r0, r6, r4
 80086a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a6:	e7eb      	b.n	8008680 <_strtoul_l.isra.0+0x5e>
 80086a8:	462f      	mov	r7, r5
 80086aa:	e7c1      	b.n	8008630 <_strtoul_l.isra.0+0xe>
 80086ac:	2c2b      	cmp	r4, #43	; 0x2b
 80086ae:	bf04      	itt	eq
 80086b0:	1cbd      	addeq	r5, r7, #2
 80086b2:	787c      	ldrbeq	r4, [r7, #1]
 80086b4:	4619      	mov	r1, r3
 80086b6:	e7cb      	b.n	8008650 <_strtoul_l.isra.0+0x2e>
 80086b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80086bc:	2f19      	cmp	r7, #25
 80086be:	d801      	bhi.n	80086c4 <_strtoul_l.isra.0+0xa2>
 80086c0:	3c37      	subs	r4, #55	; 0x37
 80086c2:	e7e2      	b.n	800868a <_strtoul_l.isra.0+0x68>
 80086c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80086c8:	2f19      	cmp	r7, #25
 80086ca:	d804      	bhi.n	80086d6 <_strtoul_l.isra.0+0xb4>
 80086cc:	3c57      	subs	r4, #87	; 0x57
 80086ce:	e7dc      	b.n	800868a <_strtoul_l.isra.0+0x68>
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	e7e5      	b.n	80086a2 <_strtoul_l.isra.0+0x80>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da09      	bge.n	80086ee <_strtoul_l.isra.0+0xcc>
 80086da:	2322      	movs	r3, #34	; 0x22
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	f8c8 3000 	str.w	r3, [r8]
 80086e4:	f1ba 0f00 	cmp.w	sl, #0
 80086e8:	d107      	bne.n	80086fa <_strtoul_l.isra.0+0xd8>
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	b101      	cbz	r1, 80086f2 <_strtoul_l.isra.0+0xd0>
 80086f0:	4240      	negs	r0, r0
 80086f2:	f1ba 0f00 	cmp.w	sl, #0
 80086f6:	d0f8      	beq.n	80086ea <_strtoul_l.isra.0+0xc8>
 80086f8:	b10b      	cbz	r3, 80086fe <_strtoul_l.isra.0+0xdc>
 80086fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80086fe:	f8ca 9000 	str.w	r9, [sl]
 8008702:	e7f2      	b.n	80086ea <_strtoul_l.isra.0+0xc8>
 8008704:	2430      	movs	r4, #48	; 0x30
 8008706:	2e00      	cmp	r6, #0
 8008708:	d1b0      	bne.n	800866c <_strtoul_l.isra.0+0x4a>
 800870a:	2608      	movs	r6, #8
 800870c:	e7ae      	b.n	800866c <_strtoul_l.isra.0+0x4a>
 800870e:	2c30      	cmp	r4, #48	; 0x30
 8008710:	d0a4      	beq.n	800865c <_strtoul_l.isra.0+0x3a>
 8008712:	260a      	movs	r6, #10
 8008714:	e7aa      	b.n	800866c <_strtoul_l.isra.0+0x4a>
	...

08008718 <_strtoul_r>:
 8008718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800871a:	4c06      	ldr	r4, [pc, #24]	; (8008734 <_strtoul_r+0x1c>)
 800871c:	4d06      	ldr	r5, [pc, #24]	; (8008738 <_strtoul_r+0x20>)
 800871e:	6824      	ldr	r4, [r4, #0]
 8008720:	6a24      	ldr	r4, [r4, #32]
 8008722:	2c00      	cmp	r4, #0
 8008724:	bf08      	it	eq
 8008726:	462c      	moveq	r4, r5
 8008728:	9400      	str	r4, [sp, #0]
 800872a:	f7ff ff7a 	bl	8008622 <_strtoul_l.isra.0>
 800872e:	b003      	add	sp, #12
 8008730:	bd30      	pop	{r4, r5, pc}
 8008732:	bf00      	nop
 8008734:	20000024 	.word	0x20000024
 8008738:	20000088 	.word	0x20000088

0800873c <__submore>:
 800873c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008748:	4299      	cmp	r1, r3
 800874a:	d11b      	bne.n	8008784 <__submore+0x48>
 800874c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008750:	f7ff f916 	bl	8007980 <_malloc_r>
 8008754:	b918      	cbnz	r0, 800875e <__submore+0x22>
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008762:	63a3      	str	r3, [r4, #56]	; 0x38
 8008764:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008768:	6360      	str	r0, [r4, #52]	; 0x34
 800876a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800876e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008772:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008776:	7043      	strb	r3, [r0, #1]
 8008778:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800877c:	7003      	strb	r3, [r0, #0]
 800877e:	6020      	str	r0, [r4, #0]
 8008780:	2000      	movs	r0, #0
 8008782:	e7ea      	b.n	800875a <__submore+0x1e>
 8008784:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008786:	0077      	lsls	r7, r6, #1
 8008788:	463a      	mov	r2, r7
 800878a:	f000 f9f3 	bl	8008b74 <_realloc_r>
 800878e:	4605      	mov	r5, r0
 8008790:	2800      	cmp	r0, #0
 8008792:	d0e0      	beq.n	8008756 <__submore+0x1a>
 8008794:	eb00 0806 	add.w	r8, r0, r6
 8008798:	4601      	mov	r1, r0
 800879a:	4632      	mov	r2, r6
 800879c:	4640      	mov	r0, r8
 800879e:	f7fb fc23 	bl	8003fe8 <memcpy>
 80087a2:	f8c4 8000 	str.w	r8, [r4]
 80087a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80087aa:	e7e9      	b.n	8008780 <__submore+0x44>

080087ac <__swbuf_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	460e      	mov	r6, r1
 80087b0:	4614      	mov	r4, r2
 80087b2:	4605      	mov	r5, r0
 80087b4:	b118      	cbz	r0, 80087be <__swbuf_r+0x12>
 80087b6:	6983      	ldr	r3, [r0, #24]
 80087b8:	b90b      	cbnz	r3, 80087be <__swbuf_r+0x12>
 80087ba:	f7fe f881 	bl	80068c0 <__sinit>
 80087be:	4b21      	ldr	r3, [pc, #132]	; (8008844 <__swbuf_r+0x98>)
 80087c0:	429c      	cmp	r4, r3
 80087c2:	d12a      	bne.n	800881a <__swbuf_r+0x6e>
 80087c4:	686c      	ldr	r4, [r5, #4]
 80087c6:	69a3      	ldr	r3, [r4, #24]
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	071a      	lsls	r2, r3, #28
 80087ce:	d52e      	bpl.n	800882e <__swbuf_r+0x82>
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	b363      	cbz	r3, 800882e <__swbuf_r+0x82>
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	b2f6      	uxtb	r6, r6
 80087da:	1ac0      	subs	r0, r0, r3
 80087dc:	6963      	ldr	r3, [r4, #20]
 80087de:	4637      	mov	r7, r6
 80087e0:	4283      	cmp	r3, r0
 80087e2:	dc04      	bgt.n	80087ee <__swbuf_r+0x42>
 80087e4:	4621      	mov	r1, r4
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 f934 	bl	8008a54 <_fflush_r>
 80087ec:	bb28      	cbnz	r0, 800883a <__swbuf_r+0x8e>
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	3001      	adds	r0, #1
 80087f2:	3b01      	subs	r3, #1
 80087f4:	60a3      	str	r3, [r4, #8]
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	701e      	strb	r6, [r3, #0]
 80087fe:	6963      	ldr	r3, [r4, #20]
 8008800:	4283      	cmp	r3, r0
 8008802:	d004      	beq.n	800880e <__swbuf_r+0x62>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	07db      	lsls	r3, r3, #31
 8008808:	d519      	bpl.n	800883e <__swbuf_r+0x92>
 800880a:	2e0a      	cmp	r6, #10
 800880c:	d117      	bne.n	800883e <__swbuf_r+0x92>
 800880e:	4621      	mov	r1, r4
 8008810:	4628      	mov	r0, r5
 8008812:	f000 f91f 	bl	8008a54 <_fflush_r>
 8008816:	b190      	cbz	r0, 800883e <__swbuf_r+0x92>
 8008818:	e00f      	b.n	800883a <__swbuf_r+0x8e>
 800881a:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <__swbuf_r+0x9c>)
 800881c:	429c      	cmp	r4, r3
 800881e:	d101      	bne.n	8008824 <__swbuf_r+0x78>
 8008820:	68ac      	ldr	r4, [r5, #8]
 8008822:	e7d0      	b.n	80087c6 <__swbuf_r+0x1a>
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <__swbuf_r+0xa0>)
 8008826:	429c      	cmp	r4, r3
 8008828:	bf08      	it	eq
 800882a:	68ec      	ldreq	r4, [r5, #12]
 800882c:	e7cb      	b.n	80087c6 <__swbuf_r+0x1a>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f81b 	bl	800886c <__swsetup_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0cc      	beq.n	80087d4 <__swbuf_r+0x28>
 800883a:	f04f 37ff 	mov.w	r7, #4294967295
 800883e:	4638      	mov	r0, r7
 8008840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008842:	bf00      	nop
 8008844:	0800af08 	.word	0x0800af08
 8008848:	0800af28 	.word	0x0800af28
 800884c:	0800aee8 	.word	0x0800aee8

08008850 <__ascii_wctomb>:
 8008850:	b149      	cbz	r1, 8008866 <__ascii_wctomb+0x16>
 8008852:	2aff      	cmp	r2, #255	; 0xff
 8008854:	bf8b      	itete	hi
 8008856:	238a      	movhi	r3, #138	; 0x8a
 8008858:	700a      	strbls	r2, [r1, #0]
 800885a:	6003      	strhi	r3, [r0, #0]
 800885c:	2001      	movls	r0, #1
 800885e:	bf88      	it	hi
 8008860:	f04f 30ff 	movhi.w	r0, #4294967295
 8008864:	4770      	bx	lr
 8008866:	4608      	mov	r0, r1
 8008868:	4770      	bx	lr
	...

0800886c <__swsetup_r>:
 800886c:	4b32      	ldr	r3, [pc, #200]	; (8008938 <__swsetup_r+0xcc>)
 800886e:	b570      	push	{r4, r5, r6, lr}
 8008870:	681d      	ldr	r5, [r3, #0]
 8008872:	4606      	mov	r6, r0
 8008874:	460c      	mov	r4, r1
 8008876:	b125      	cbz	r5, 8008882 <__swsetup_r+0x16>
 8008878:	69ab      	ldr	r3, [r5, #24]
 800887a:	b913      	cbnz	r3, 8008882 <__swsetup_r+0x16>
 800887c:	4628      	mov	r0, r5
 800887e:	f7fe f81f 	bl	80068c0 <__sinit>
 8008882:	4b2e      	ldr	r3, [pc, #184]	; (800893c <__swsetup_r+0xd0>)
 8008884:	429c      	cmp	r4, r3
 8008886:	d10f      	bne.n	80088a8 <__swsetup_r+0x3c>
 8008888:	686c      	ldr	r4, [r5, #4]
 800888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888e:	b29a      	uxth	r2, r3
 8008890:	0715      	lsls	r5, r2, #28
 8008892:	d42c      	bmi.n	80088ee <__swsetup_r+0x82>
 8008894:	06d0      	lsls	r0, r2, #27
 8008896:	d411      	bmi.n	80088bc <__swsetup_r+0x50>
 8008898:	2209      	movs	r2, #9
 800889a:	6032      	str	r2, [r6, #0]
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e03e      	b.n	8008926 <__swsetup_r+0xba>
 80088a8:	4b25      	ldr	r3, [pc, #148]	; (8008940 <__swsetup_r+0xd4>)
 80088aa:	429c      	cmp	r4, r3
 80088ac:	d101      	bne.n	80088b2 <__swsetup_r+0x46>
 80088ae:	68ac      	ldr	r4, [r5, #8]
 80088b0:	e7eb      	b.n	800888a <__swsetup_r+0x1e>
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <__swsetup_r+0xd8>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	bf08      	it	eq
 80088b8:	68ec      	ldreq	r4, [r5, #12]
 80088ba:	e7e6      	b.n	800888a <__swsetup_r+0x1e>
 80088bc:	0751      	lsls	r1, r2, #29
 80088be:	d512      	bpl.n	80088e6 <__swsetup_r+0x7a>
 80088c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c2:	b141      	cbz	r1, 80088d6 <__swsetup_r+0x6a>
 80088c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <__swsetup_r+0x66>
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff f80b 	bl	80078e8 <_free_r>
 80088d2:	2300      	movs	r3, #0
 80088d4:	6363      	str	r3, [r4, #52]	; 0x34
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	2300      	movs	r3, #0
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6923      	ldr	r3, [r4, #16]
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	b94b      	cbnz	r3, 8008906 <__swsetup_r+0x9a>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fc:	d003      	beq.n	8008906 <__swsetup_r+0x9a>
 80088fe:	4621      	mov	r1, r4
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f8f5 	bl	8008af0 <__smakebuf_r>
 8008906:	89a2      	ldrh	r2, [r4, #12]
 8008908:	f012 0301 	ands.w	r3, r2, #1
 800890c:	d00c      	beq.n	8008928 <__swsetup_r+0xbc>
 800890e:	2300      	movs	r3, #0
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	6963      	ldr	r3, [r4, #20]
 8008914:	425b      	negs	r3, r3
 8008916:	61a3      	str	r3, [r4, #24]
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	b953      	cbnz	r3, 8008932 <__swsetup_r+0xc6>
 800891c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008920:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008924:	d1ba      	bne.n	800889c <__swsetup_r+0x30>
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	0792      	lsls	r2, r2, #30
 800892a:	bf58      	it	pl
 800892c:	6963      	ldrpl	r3, [r4, #20]
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	e7f2      	b.n	8008918 <__swsetup_r+0xac>
 8008932:	2000      	movs	r0, #0
 8008934:	e7f7      	b.n	8008926 <__swsetup_r+0xba>
 8008936:	bf00      	nop
 8008938:	20000024 	.word	0x20000024
 800893c:	0800af08 	.word	0x0800af08
 8008940:	0800af28 	.word	0x0800af28
 8008944:	0800aee8 	.word	0x0800aee8

08008948 <__sflush_r>:
 8008948:	898a      	ldrh	r2, [r1, #12]
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	4605      	mov	r5, r0
 8008950:	0710      	lsls	r0, r2, #28
 8008952:	460c      	mov	r4, r1
 8008954:	d458      	bmi.n	8008a08 <__sflush_r+0xc0>
 8008956:	684b      	ldr	r3, [r1, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dc05      	bgt.n	8008968 <__sflush_r+0x20>
 800895c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	dc02      	bgt.n	8008968 <__sflush_r+0x20>
 8008962:	2000      	movs	r0, #0
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896a:	2e00      	cmp	r6, #0
 800896c:	d0f9      	beq.n	8008962 <__sflush_r+0x1a>
 800896e:	2300      	movs	r3, #0
 8008970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008974:	682f      	ldr	r7, [r5, #0]
 8008976:	6a21      	ldr	r1, [r4, #32]
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	d032      	beq.n	80089e2 <__sflush_r+0x9a>
 800897c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	075a      	lsls	r2, r3, #29
 8008982:	d505      	bpl.n	8008990 <__sflush_r+0x48>
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	1ac0      	subs	r0, r0, r3
 8008988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898a:	b10b      	cbz	r3, 8008990 <__sflush_r+0x48>
 800898c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800898e:	1ac0      	subs	r0, r0, r3
 8008990:	2300      	movs	r3, #0
 8008992:	4602      	mov	r2, r0
 8008994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008996:	6a21      	ldr	r1, [r4, #32]
 8008998:	4628      	mov	r0, r5
 800899a:	47b0      	blx	r6
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	d106      	bne.n	80089b0 <__sflush_r+0x68>
 80089a2:	6829      	ldr	r1, [r5, #0]
 80089a4:	291d      	cmp	r1, #29
 80089a6:	d848      	bhi.n	8008a3a <__sflush_r+0xf2>
 80089a8:	4a29      	ldr	r2, [pc, #164]	; (8008a50 <__sflush_r+0x108>)
 80089aa:	40ca      	lsrs	r2, r1
 80089ac:	07d6      	lsls	r6, r2, #31
 80089ae:	d544      	bpl.n	8008a3a <__sflush_r+0xf2>
 80089b0:	2200      	movs	r2, #0
 80089b2:	6062      	str	r2, [r4, #4]
 80089b4:	6922      	ldr	r2, [r4, #16]
 80089b6:	04d9      	lsls	r1, r3, #19
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	d504      	bpl.n	80089c6 <__sflush_r+0x7e>
 80089bc:	1c42      	adds	r2, r0, #1
 80089be:	d101      	bne.n	80089c4 <__sflush_r+0x7c>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b903      	cbnz	r3, 80089c6 <__sflush_r+0x7e>
 80089c4:	6560      	str	r0, [r4, #84]	; 0x54
 80089c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089c8:	602f      	str	r7, [r5, #0]
 80089ca:	2900      	cmp	r1, #0
 80089cc:	d0c9      	beq.n	8008962 <__sflush_r+0x1a>
 80089ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089d2:	4299      	cmp	r1, r3
 80089d4:	d002      	beq.n	80089dc <__sflush_r+0x94>
 80089d6:	4628      	mov	r0, r5
 80089d8:	f7fe ff86 	bl	80078e8 <_free_r>
 80089dc:	2000      	movs	r0, #0
 80089de:	6360      	str	r0, [r4, #52]	; 0x34
 80089e0:	e7c0      	b.n	8008964 <__sflush_r+0x1c>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b0      	blx	r6
 80089e8:	1c41      	adds	r1, r0, #1
 80089ea:	d1c8      	bne.n	800897e <__sflush_r+0x36>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0c5      	beq.n	800897e <__sflush_r+0x36>
 80089f2:	2b1d      	cmp	r3, #29
 80089f4:	d001      	beq.n	80089fa <__sflush_r+0xb2>
 80089f6:	2b16      	cmp	r3, #22
 80089f8:	d101      	bne.n	80089fe <__sflush_r+0xb6>
 80089fa:	602f      	str	r7, [r5, #0]
 80089fc:	e7b1      	b.n	8008962 <__sflush_r+0x1a>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	e7ad      	b.n	8008964 <__sflush_r+0x1c>
 8008a08:	690f      	ldr	r7, [r1, #16]
 8008a0a:	2f00      	cmp	r7, #0
 8008a0c:	d0a9      	beq.n	8008962 <__sflush_r+0x1a>
 8008a0e:	0793      	lsls	r3, r2, #30
 8008a10:	bf18      	it	ne
 8008a12:	2300      	movne	r3, #0
 8008a14:	680e      	ldr	r6, [r1, #0]
 8008a16:	bf08      	it	eq
 8008a18:	694b      	ldreq	r3, [r1, #20]
 8008a1a:	eba6 0807 	sub.w	r8, r6, r7
 8008a1e:	600f      	str	r7, [r1, #0]
 8008a20:	608b      	str	r3, [r1, #8]
 8008a22:	f1b8 0f00 	cmp.w	r8, #0
 8008a26:	dd9c      	ble.n	8008962 <__sflush_r+0x1a>
 8008a28:	4643      	mov	r3, r8
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	6a21      	ldr	r1, [r4, #32]
 8008a2e:	4628      	mov	r0, r5
 8008a30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a32:	47b0      	blx	r6
 8008a34:	2800      	cmp	r0, #0
 8008a36:	dc06      	bgt.n	8008a46 <__sflush_r+0xfe>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3e:	81a3      	strh	r3, [r4, #12]
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	e78e      	b.n	8008964 <__sflush_r+0x1c>
 8008a46:	4407      	add	r7, r0
 8008a48:	eba8 0800 	sub.w	r8, r8, r0
 8008a4c:	e7e9      	b.n	8008a22 <__sflush_r+0xda>
 8008a4e:	bf00      	nop
 8008a50:	20400001 	.word	0x20400001

08008a54 <_fflush_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	690b      	ldr	r3, [r1, #16]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b1db      	cbz	r3, 8008a96 <_fflush_r+0x42>
 8008a5e:	b118      	cbz	r0, 8008a68 <_fflush_r+0x14>
 8008a60:	6983      	ldr	r3, [r0, #24]
 8008a62:	b90b      	cbnz	r3, 8008a68 <_fflush_r+0x14>
 8008a64:	f7fd ff2c 	bl	80068c0 <__sinit>
 8008a68:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <_fflush_r+0x48>)
 8008a6a:	429c      	cmp	r4, r3
 8008a6c:	d109      	bne.n	8008a82 <_fflush_r+0x2e>
 8008a6e:	686c      	ldr	r4, [r5, #4]
 8008a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a74:	b17b      	cbz	r3, 8008a96 <_fflush_r+0x42>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a7e:	f7ff bf63 	b.w	8008948 <__sflush_r>
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <_fflush_r+0x4c>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	d101      	bne.n	8008a8c <_fflush_r+0x38>
 8008a88:	68ac      	ldr	r4, [r5, #8]
 8008a8a:	e7f1      	b.n	8008a70 <_fflush_r+0x1c>
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <_fflush_r+0x50>)
 8008a8e:	429c      	cmp	r4, r3
 8008a90:	bf08      	it	eq
 8008a92:	68ec      	ldreq	r4, [r5, #12]
 8008a94:	e7ec      	b.n	8008a70 <_fflush_r+0x1c>
 8008a96:	2000      	movs	r0, #0
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800af08 	.word	0x0800af08
 8008aa0:	0800af28 	.word	0x0800af28
 8008aa4:	0800aee8 	.word	0x0800aee8

08008aa8 <__swhatbuf_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	460e      	mov	r6, r1
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	b096      	sub	sp, #88	; 0x58
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	4614      	mov	r4, r2
 8008ab6:	461d      	mov	r5, r3
 8008ab8:	da07      	bge.n	8008aca <__swhatbuf_r+0x22>
 8008aba:	2300      	movs	r3, #0
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	89b3      	ldrh	r3, [r6, #12]
 8008ac0:	061a      	lsls	r2, r3, #24
 8008ac2:	d410      	bmi.n	8008ae6 <__swhatbuf_r+0x3e>
 8008ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac8:	e00e      	b.n	8008ae8 <__swhatbuf_r+0x40>
 8008aca:	466a      	mov	r2, sp
 8008acc:	f000 f878 	bl	8008bc0 <_fstat_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dbf2      	blt.n	8008aba <__swhatbuf_r+0x12>
 8008ad4:	9a01      	ldr	r2, [sp, #4]
 8008ad6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ada:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ade:	425a      	negs	r2, r3
 8008ae0:	415a      	adcs	r2, r3
 8008ae2:	602a      	str	r2, [r5, #0]
 8008ae4:	e7ee      	b.n	8008ac4 <__swhatbuf_r+0x1c>
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	2000      	movs	r0, #0
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	b016      	add	sp, #88	; 0x58
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <__smakebuf_r>:
 8008af0:	898b      	ldrh	r3, [r1, #12]
 8008af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008af4:	079d      	lsls	r5, r3, #30
 8008af6:	4606      	mov	r6, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	d507      	bpl.n	8008b0c <__smakebuf_r+0x1c>
 8008afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	2301      	movs	r3, #1
 8008b06:	6163      	str	r3, [r4, #20]
 8008b08:	b002      	add	sp, #8
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	ab01      	add	r3, sp, #4
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f7ff ffca 	bl	8008aa8 <__swhatbuf_r>
 8008b14:	9900      	ldr	r1, [sp, #0]
 8008b16:	4605      	mov	r5, r0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7fe ff31 	bl	8007980 <_malloc_r>
 8008b1e:	b948      	cbnz	r0, 8008b34 <__smakebuf_r+0x44>
 8008b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b24:	059a      	lsls	r2, r3, #22
 8008b26:	d4ef      	bmi.n	8008b08 <__smakebuf_r+0x18>
 8008b28:	f023 0303 	bic.w	r3, r3, #3
 8008b2c:	f043 0302 	orr.w	r3, r3, #2
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	e7e3      	b.n	8008afc <__smakebuf_r+0xc>
 8008b34:	4b0d      	ldr	r3, [pc, #52]	; (8008b6c <__smakebuf_r+0x7c>)
 8008b36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	6020      	str	r0, [r4, #0]
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	6120      	str	r0, [r4, #16]
 8008b46:	6163      	str	r3, [r4, #20]
 8008b48:	9b01      	ldr	r3, [sp, #4]
 8008b4a:	b15b      	cbz	r3, 8008b64 <__smakebuf_r+0x74>
 8008b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f847 	bl	8008be4 <_isatty_r>
 8008b56:	b128      	cbz	r0, 8008b64 <__smakebuf_r+0x74>
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	431d      	orrs	r5, r3
 8008b68:	81a5      	strh	r5, [r4, #12]
 8008b6a:	e7cd      	b.n	8008b08 <__smakebuf_r+0x18>
 8008b6c:	08006889 	.word	0x08006889

08008b70 <__malloc_lock>:
 8008b70:	4770      	bx	lr

08008b72 <__malloc_unlock>:
 8008b72:	4770      	bx	lr

08008b74 <_realloc_r>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	4607      	mov	r7, r0
 8008b78:	4614      	mov	r4, r2
 8008b7a:	460e      	mov	r6, r1
 8008b7c:	b921      	cbnz	r1, 8008b88 <_realloc_r+0x14>
 8008b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b82:	4611      	mov	r1, r2
 8008b84:	f7fe befc 	b.w	8007980 <_malloc_r>
 8008b88:	b922      	cbnz	r2, 8008b94 <_realloc_r+0x20>
 8008b8a:	f7fe fead 	bl	80078e8 <_free_r>
 8008b8e:	4625      	mov	r5, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b94:	f000 f836 	bl	8008c04 <_malloc_usable_size_r>
 8008b98:	42a0      	cmp	r0, r4
 8008b9a:	d20f      	bcs.n	8008bbc <_realloc_r+0x48>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f7fe feee 	bl	8007980 <_malloc_r>
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d0f2      	beq.n	8008b90 <_realloc_r+0x1c>
 8008baa:	4631      	mov	r1, r6
 8008bac:	4622      	mov	r2, r4
 8008bae:	f7fb fa1b 	bl	8003fe8 <memcpy>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7fe fe97 	bl	80078e8 <_free_r>
 8008bba:	e7e9      	b.n	8008b90 <_realloc_r+0x1c>
 8008bbc:	4635      	mov	r5, r6
 8008bbe:	e7e7      	b.n	8008b90 <_realloc_r+0x1c>

08008bc0 <_fstat_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4c06      	ldr	r4, [pc, #24]	; (8008be0 <_fstat_r+0x20>)
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	f7fb f98c 	bl	8003eea <_fstat>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	d102      	bne.n	8008bdc <_fstat_r+0x1c>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	b103      	cbz	r3, 8008bdc <_fstat_r+0x1c>
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	bd38      	pop	{r3, r4, r5, pc}
 8008bde:	bf00      	nop
 8008be0:	200008d0 	.word	0x200008d0

08008be4 <_isatty_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	2300      	movs	r3, #0
 8008be8:	4c05      	ldr	r4, [pc, #20]	; (8008c00 <_isatty_r+0x1c>)
 8008bea:	4605      	mov	r5, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	f7fb f980 	bl	8003ef4 <_isatty>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_isatty_r+0x1a>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_isatty_r+0x1a>
 8008bfc:	602b      	str	r3, [r5, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	200008d0 	.word	0x200008d0

08008c04 <_malloc_usable_size_r>:
 8008c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c08:	1f18      	subs	r0, r3, #4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bfbc      	itt	lt
 8008c0e:	580b      	ldrlt	r3, [r1, r0]
 8008c10:	18c0      	addlt	r0, r0, r3
 8008c12:	4770      	bx	lr

08008c14 <_init>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr

08008c20 <_fini>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr
