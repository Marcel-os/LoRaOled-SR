
LoRaOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  080087c0  080087c0  000187c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  080091f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006dc  200001e8  080093dc  000201e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200008c4  080093dc  000208c4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001528d  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033f7  00000000  00000000  0003549a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009f75  00000000  00000000  00038891  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d70  00000000  00000000  00042808  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000013b8  00000000  00000000  00043578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016944  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d9b3  00000000  00000000  0005b274  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00076d01  00000000  00000000  00068c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000df928  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d48  00000000  00000000  000df9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080087a4 	.word	0x080087a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080087a4 	.word	0x080087a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295
 8000b7c:	f000 b974 	b.w	8000e68 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	fbbc f7fe 	udiv	r7, ip, lr
 8000bce:	fa1f f885 	uxth.w	r8, r5
 8000bd2:	fb0e c317 	mls	r3, lr, r7, ip
 8000bd6:	fb07 f908 	mul.w	r9, r7, r8
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be0:	4599      	cmp	r9, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 31ff 	add.w	r1, r7, #4294967295
 8000bea:	f080 811c 	bcs.w	8000e26 <__udivmoddi4+0x28e>
 8000bee:	4599      	cmp	r9, r3
 8000bf0:	f240 8119 	bls.w	8000e26 <__udivmoddi4+0x28e>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	eba3 0309 	sub.w	r3, r3, r9
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	fb00 f108 	mul.w	r1, r0, r8
 8000c08:	b2a4      	uxth	r4, r4
 8000c0a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0e:	42a1      	cmp	r1, r4
 8000c10:	d909      	bls.n	8000c26 <__udivmoddi4+0x8e>
 8000c12:	192c      	adds	r4, r5, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 8107 	bcs.w	8000e2a <__udivmoddi4+0x292>
 8000c1c:	42a1      	cmp	r1, r4
 8000c1e:	f240 8104 	bls.w	8000e2a <__udivmoddi4+0x292>
 8000c22:	3802      	subs	r0, #2
 8000c24:	442c      	add	r4, r5
 8000c26:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c2a:	2700      	movs	r7, #0
 8000c2c:	1a64      	subs	r4, r4, r1
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	2300      	movs	r3, #0
 8000c32:	40d4      	lsrs	r4, r2
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80ec 	beq.w	8000e20 <__udivmoddi4+0x288>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d148      	bne.n	8000cf0 <__udivmoddi4+0x158>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fb 	bhi.w	8000e5e <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469c      	mov	ip, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	2701      	movs	r7, #1
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c92:	fa1f f985 	uxth.w	r9, r5
 8000c96:	fbb1 fef8 	udiv	lr, r1, r8
 8000c9a:	fb08 111e 	mls	r1, r8, lr, r1
 8000c9e:	fb09 f00e 	mul.w	r0, r9, lr
 8000ca2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ca6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000caa:	4298      	cmp	r0, r3
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x126>
 8000cae:	18eb      	adds	r3, r5, r3
 8000cb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000cb4:	d202      	bcs.n	8000cbc <__udivmoddi4+0x124>
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	f200 80cd 	bhi.w	8000e56 <__udivmoddi4+0x2be>
 8000cbc:	468e      	mov	lr, r1
 8000cbe:	1a1b      	subs	r3, r3, r0
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	fb09 f900 	mul.w	r9, r9, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd2:	45a1      	cmp	r9, r4
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x14e>
 8000cd6:	192c      	adds	r4, r5, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d202      	bcs.n	8000ce4 <__udivmoddi4+0x14c>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f200 80b6 	bhi.w	8000e50 <__udivmoddi4+0x2b8>
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	eba4 0409 	sub.w	r4, r4, r9
 8000cea:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000cee:	e79e      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cf0:	f1c7 0520 	rsb	r5, r7, #32
 8000cf4:	40bb      	lsls	r3, r7
 8000cf6:	fa22 fc05 	lsr.w	ip, r2, r5
 8000cfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfe:	fa21 f405 	lsr.w	r4, r1, r5
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d0a:	fa1f f88c 	uxth.w	r8, ip
 8000d0e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d12:	fa20 f305 	lsr.w	r3, r0, r5
 8000d16:	40b9      	lsls	r1, r7
 8000d18:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	0c0b      	lsrs	r3, r1, #16
 8000d20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d24:	45a2      	cmp	sl, r4
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d38:	f080 8088 	bcs.w	8000e4c <__udivmoddi4+0x2b4>
 8000d3c:	45a2      	cmp	sl, r4
 8000d3e:	f240 8085 	bls.w	8000e4c <__udivmoddi4+0x2b4>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4464      	add	r4, ip
 8000d48:	eba4 040a 	sub.w	r4, r4, sl
 8000d4c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d50:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d54:	fb00 fa08 	mul.w	sl, r0, r8
 8000d58:	b289      	uxth	r1, r1
 8000d5a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d5e:	45a2      	cmp	sl, r4
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x1dc>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6a:	d26b      	bcs.n	8000e44 <__udivmoddi4+0x2ac>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	d969      	bls.n	8000e44 <__udivmoddi4+0x2ac>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4464      	add	r4, ip
 8000d74:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d78:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7c:	eba4 040a 	sub.w	r4, r4, sl
 8000d80:	454c      	cmp	r4, r9
 8000d82:	4641      	mov	r1, r8
 8000d84:	46ce      	mov	lr, r9
 8000d86:	d354      	bcc.n	8000e32 <__udivmoddi4+0x29a>
 8000d88:	d051      	beq.n	8000e2e <__udivmoddi4+0x296>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d069      	beq.n	8000e62 <__udivmoddi4+0x2ca>
 8000d8e:	1a5a      	subs	r2, r3, r1
 8000d90:	eb64 040e 	sbc.w	r4, r4, lr
 8000d94:	fa04 f505 	lsl.w	r5, r4, r5
 8000d98:	fa22 f307 	lsr.w	r3, r2, r7
 8000d9c:	40fc      	lsrs	r4, r7
 8000d9e:	431d      	orrs	r5, r3
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	4095      	lsls	r5, r2
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	fa21 f003 	lsr.w	r0, r1, r3
 8000db2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000db6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dba:	fa1f f985 	uxth.w	r9, r5
 8000dbe:	fb08 0017 	mls	r0, r8, r7, r0
 8000dc2:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc6:	4091      	lsls	r1, r2
 8000dc8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	0c19      	lsrs	r1, r3, #16
 8000dd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd4:	458c      	cmp	ip, r1
 8000dd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x254>
 8000ddc:	1869      	adds	r1, r5, r1
 8000dde:	f107 30ff 	add.w	r0, r7, #4294967295
 8000de2:	d231      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000de4:	458c      	cmp	ip, r1
 8000de6:	d92f      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000de8:	3f02      	subs	r7, #2
 8000dea:	4429      	add	r1, r5
 8000dec:	eba1 010c 	sub.w	r1, r1, ip
 8000df0:	fbb1 f0f8 	udiv	r0, r1, r8
 8000df4:	fb08 1c10 	mls	ip, r8, r0, r1
 8000df8:	fb00 fe09 	mul.w	lr, r0, r9
 8000dfc:	b299      	uxth	r1, r3
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0c:	d218      	bcs.n	8000e40 <__udivmoddi4+0x2a8>
 8000e0e:	458e      	cmp	lr, r1
 8000e10:	d916      	bls.n	8000e40 <__udivmoddi4+0x2a8>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1e:	e73a      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e20:	4637      	mov	r7, r6
 8000e22:	4630      	mov	r0, r6
 8000e24:	e708      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e26:	460f      	mov	r7, r1
 8000e28:	e6e6      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	e6fb      	b.n	8000c26 <__udivmoddi4+0x8e>
 8000e2e:	4543      	cmp	r3, r8
 8000e30:	d2ab      	bcs.n	8000d8a <__udivmoddi4+0x1f2>
 8000e32:	ebb8 0102 	subs.w	r1, r8, r2
 8000e36:	eb69 020c 	sbc.w	r2, r9, ip
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	4696      	mov	lr, r2
 8000e3e:	e7a4      	b.n	8000d8a <__udivmoddi4+0x1f2>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e7e8      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e795      	b.n	8000d74 <__udivmoddi4+0x1dc>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e7cf      	b.n	8000dec <__udivmoddi4+0x254>
 8000e4c:	4681      	mov	r9, r0
 8000e4e:	e77b      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e50:	3802      	subs	r0, #2
 8000e52:	442c      	add	r4, r5
 8000e54:	e747      	b.n	8000ce6 <__udivmoddi4+0x14e>
 8000e56:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5a:	442b      	add	r3, r5
 8000e5c:	e72f      	b.n	8000cbe <__udivmoddi4+0x126>
 8000e5e:	4638      	mov	r0, r7
 8000e60:	e707      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e62:	4637      	mov	r7, r6
 8000e64:	e6e8      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_InitTick+0x3c>)
{
 8000e70:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_InitTick+0x40>)
 8000e7e:	6810      	ldr	r0, [r2, #0]
 8000e80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e84:	f000 fada 	bl	800143c <HAL_SYSTICK_Config>
 8000e88:	4604      	mov	r4, r0
 8000e8a:	b958      	cbnz	r0, 8000ea4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	2d0f      	cmp	r5, #15
 8000e8e:	d809      	bhi.n	8000ea4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	4602      	mov	r2, r0
 8000e92:	4629      	mov	r1, r5
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fa8e 	bl	80013b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_InitTick+0x44>)
 8000ea0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	e7fc      	b.n	8000ea2 <HAL_InitTick+0x36>
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x20>)
{
 8000eb6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eba:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	f000 fa67 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ffd0 	bl	8000e6c <HAL_InitTick>
  HAL_MspInit();
 8000ecc:	f002 fc80 	bl	80037d0 <HAL_MspInit>
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd08      	pop	{r3, pc}
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x10>)
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_IncTick+0x14>)
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000061c 	.word	0x2000061c
 8000eec:	20000000 	.word	0x20000000

08000ef0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef0:	4b01      	ldr	r3, [pc, #4]	; (8000ef8 <HAL_GetTick+0x8>)
 8000ef2:	6818      	ldr	r0, [r3, #0]
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000061c 	.word	0x2000061c

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff6 	bl	8000ef0 <HAL_GetTick>
 8000f04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f08:	bf1e      	ittt	ne
 8000f0a:	4b04      	ldrne	r3, [pc, #16]	; (8000f1c <HAL_Delay+0x20>)
 8000f0c:	781b      	ldrbne	r3, [r3, #0]
 8000f0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	1b40      	subs	r0, r0, r5
 8000f16:	42a0      	cmp	r0, r4
 8000f18:	d3fa      	bcc.n	8000f10 <HAL_Delay+0x14>
  {
  }
}
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	20000000 	.word	0x20000000

08000f20 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000f24:	4770      	bx	lr

08000f26 <HAL_ADC_LevelOutOfWindowCallback>:
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f28:	6803      	ldr	r3, [r0, #0]
{
 8000f2a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f2c:	685a      	ldr	r2, [r3, #4]
{
 8000f2e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000f30:	0690      	lsls	r0, r2, #26
 8000f32:	d527      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	0791      	lsls	r1, r2, #30
 8000f38:	d524      	bpl.n	8000f84 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f3e:	bf5e      	ittt	pl
 8000f40:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f42:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000f46:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000f4e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000f52:	d110      	bne.n	8000f76 <HAL_ADC_IRQHandler+0x4e>
 8000f54:	7b22      	ldrb	r2, [r4, #12]
 8000f56:	b972      	cbnz	r2, 8000f76 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	f022 0220 	bic.w	r2, r2, #32
 8000f5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f66:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f6a:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f6c:	bf5e      	ittt	pl
 8000f6e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000f70:	f043 0301 	orrpl.w	r3, r3, #1
 8000f74:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f001 fefe 	bl	8002d78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f7c:	f06f 0212 	mvn.w	r2, #18
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	0610      	lsls	r0, r2, #24
 8000f8a:	d530      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	0751      	lsls	r1, r2, #29
 8000f90:	d52d      	bpl.n	8000fee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f94:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f96:	bf5e      	ittt	pl
 8000f98:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000f9a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000f9e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000fa6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000faa:	d00a      	beq.n	8000fc2 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fac:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000fae:	0550      	lsls	r0, r2, #21
 8000fb0:	d416      	bmi.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fb8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000fbc:	d110      	bne.n	8000fe0 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fbe:	7b22      	ldrb	r2, [r4, #12]
 8000fc0:	b972      	cbnz	r2, 8000fe0 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fd0:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd6:	bf5e      	ittt	pl
 8000fd8:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000fda:	f043 0301 	orrpl.w	r3, r3, #1
 8000fde:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f000 f9d5 	bl	8001390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fe6:	f06f 020c 	mvn.w	r2, #12
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	0652      	lsls	r2, r2, #25
 8000ff4:	d50d      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	07db      	lsls	r3, r3, #31
 8000ffa:	d50a      	bpl.n	8001012 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ffe:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001006:	f7ff ff8e 	bl	8000f26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800100a:	f06f 0201 	mvn.w	r2, #1
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001012:	bd10      	pop	{r4, pc}

08001014 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001014:	2300      	movs	r3, #0
{ 
 8001016:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001018:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800101a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800101e:	2b01      	cmp	r3, #1
 8001020:	d06d      	beq.n	80010fe <HAL_ADC_ConfigChannel+0xea>
 8001022:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001024:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001026:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800102a:	2d06      	cmp	r5, #6
 800102c:	6802      	ldr	r2, [r0, #0]
 800102e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001032:	680c      	ldr	r4, [r1, #0]
 8001034:	d823      	bhi.n	800107e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001036:	261f      	movs	r6, #31
 8001038:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800103a:	3b05      	subs	r3, #5
 800103c:	409e      	lsls	r6, r3
 800103e:	ea25 0506 	bic.w	r5, r5, r6
 8001042:	fa04 f303 	lsl.w	r3, r4, r3
 8001046:	432b      	orrs	r3, r5
 8001048:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800104a:	2c09      	cmp	r4, #9
 800104c:	688b      	ldr	r3, [r1, #8]
 800104e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001052:	f04f 0107 	mov.w	r1, #7
 8001056:	d92a      	bls.n	80010ae <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001058:	68d6      	ldr	r6, [r2, #12]
 800105a:	3d1e      	subs	r5, #30
 800105c:	40a9      	lsls	r1, r5
 800105e:	ea26 0101 	bic.w	r1, r6, r1
 8001062:	40ab      	lsls	r3, r5
 8001064:	430b      	orrs	r3, r1
 8001066:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001068:	f1a4 0310 	sub.w	r3, r4, #16
 800106c:	2b01      	cmp	r3, #1
 800106e:	d926      	bls.n	80010be <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001072:	2200      	movs	r2, #0
 8001074:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001078:	4618      	mov	r0, r3
 800107a:	b002      	add	sp, #8
 800107c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800107e:	2d0c      	cmp	r5, #12
 8001080:	f04f 051f 	mov.w	r5, #31
 8001084:	d809      	bhi.n	800109a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001086:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001088:	3b23      	subs	r3, #35	; 0x23
 800108a:	409d      	lsls	r5, r3
 800108c:	ea26 0505 	bic.w	r5, r6, r5
 8001090:	fa04 f303 	lsl.w	r3, r4, r3
 8001094:	432b      	orrs	r3, r5
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	e7d7      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800109a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800109c:	3b41      	subs	r3, #65	; 0x41
 800109e:	409d      	lsls	r5, r3
 80010a0:	ea26 0505 	bic.w	r5, r6, r5
 80010a4:	fa04 f303 	lsl.w	r3, r4, r3
 80010a8:	432b      	orrs	r3, r5
 80010aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010ac:	e7cd      	b.n	800104a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010ae:	6916      	ldr	r6, [r2, #16]
 80010b0:	40a9      	lsls	r1, r5
 80010b2:	ea26 0101 	bic.w	r1, r6, r1
 80010b6:	40ab      	lsls	r3, r5
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6113      	str	r3, [r2, #16]
 80010bc:	e7d4      	b.n	8001068 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_ADC_ConfigChannel+0xf0>)
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d116      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010c4:	6893      	ldr	r3, [r2, #8]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	d4d2      	bmi.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ca:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010cc:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d2:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010d4:	d1cc      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_ADC_ConfigChannel+0xf4>)
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_ADC_ConfigChannel+0xf8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80010e0:	230a      	movs	r3, #10
 80010e2:	4353      	muls	r3, r2
            wait_loop_index--;
 80010e4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80010e6:	9b01      	ldr	r3, [sp, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0c1      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80010ec:	9b01      	ldr	r3, [sp, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	e7f8      	b.n	80010e4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e7b9      	b.n	8001072 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 80010fe:	2302      	movs	r3, #2
 8001100:	e7ba      	b.n	8001078 <HAL_ADC_ConfigChannel+0x64>
 8001102:	bf00      	nop
 8001104:	40012400 	.word	0x40012400
 8001108:	20000010 	.word	0x20000010
 800110c:	000f4240 	.word	0x000f4240

08001110 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001110:	2300      	movs	r3, #0
{
 8001112:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001114:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001116:	6803      	ldr	r3, [r0, #0]
{
 8001118:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	07d2      	lsls	r2, r2, #31
 800111e:	d502      	bpl.n	8001126 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
}
 8001122:	b002      	add	sp, #8
 8001124:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <ADC_Enable+0x68>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <ADC_Enable+0x6c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001138:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800113a:	9b01      	ldr	r3, [sp, #4]
 800113c:	b9c3      	cbnz	r3, 8001170 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800113e:	f7ff fed7 	bl	8000ef0 <HAL_GetTick>
 8001142:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	689d      	ldr	r5, [r3, #8]
 8001148:	f015 0501 	ands.w	r5, r5, #1
 800114c:	d1e8      	bne.n	8001120 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800114e:	f7ff fecf 	bl	8000ef0 <HAL_GetTick>
 8001152:	1b80      	subs	r0, r0, r6
 8001154:	2802      	cmp	r0, #2
 8001156:	d9f5      	bls.n	8001144 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800115a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8001166:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800116e:	e7d8      	b.n	8001122 <ADC_Enable+0x12>
      wait_loop_index--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	e7e0      	b.n	8001138 <ADC_Enable+0x28>
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010
 800117c:	000f4240 	.word	0x000f4240

08001180 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8001180:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001184:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001186:	2b01      	cmp	r3, #1
{
 8001188:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800118a:	d058      	beq.n	800123e <HAL_ADC_Start_IT+0xbe>
 800118c:	2301      	movs	r3, #1
 800118e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001192:	f7ff ffbd 	bl	8001110 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001196:	2800      	cmp	r0, #0
 8001198:	d14d      	bne.n	8001236 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d104      	bne.n	80011bc <HAL_ADC_Start_IT+0x3c>
 80011b2:	4925      	ldr	r1, [pc, #148]	; (8001248 <HAL_ADC_Start_IT+0xc8>)
 80011b4:	684a      	ldr	r2, [r1, #4]
 80011b6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80011ba:	d132      	bne.n	8001222 <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011c2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011c6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011c8:	bf41      	itttt	mi
 80011ca:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80011cc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011d0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011d4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011dc:	bf1c      	itt	ne
 80011de:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80011e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011ec:	f06f 0202 	mvn.w	r2, #2
 80011f0:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001200:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001204:	d113      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_ADC_Start_IT+0xc4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d105      	bne.n	8001218 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800120c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001210:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001212:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001216:	d10a      	bne.n	800122e <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001224:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001228:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800122a:	684a      	ldr	r2, [r1, #4]
 800122c:	e7cb      	b.n	80011c6 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001234:	e7f3      	b.n	800121e <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 8001236:	2300      	movs	r3, #0
 8001238:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800123c:	e7f0      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 800123e:	2002      	movs	r0, #2
 8001240:	e7ee      	b.n	8001220 <HAL_ADC_Start_IT+0xa0>
 8001242:	bf00      	nop
 8001244:	40012800 	.word	0x40012800
 8001248:	40012400 	.word	0x40012400

0800124c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800124e:	6803      	ldr	r3, [r0, #0]
{
 8001250:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	07d2      	lsls	r2, r2, #31
 8001256:	d401      	bmi.n	800125c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001258:	2000      	movs	r0, #0
}
 800125a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001264:	f7ff fe44 	bl	8000ef0 <HAL_GetTick>
 8001268:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	07db      	lsls	r3, r3, #31
 8001270:	d5f2      	bpl.n	8001258 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001272:	f7ff fe3d 	bl	8000ef0 <HAL_GetTick>
 8001276:	1b40      	subs	r0, r0, r5
 8001278:	2802      	cmp	r0, #2
 800127a:	d9f6      	bls.n	800126a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800128e:	e7e4      	b.n	800125a <ADC_ConversionStop_Disable+0xe>

08001290 <HAL_ADC_Init>:
{
 8001290:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001292:	4604      	mov	r4, r0
 8001294:	2800      	cmp	r0, #0
 8001296:	d070      	beq.n	800137a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001298:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800129a:	b923      	cbnz	r3, 80012a6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800129e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80012a2:	f002 fabf 	bl	8003824 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ffd0 	bl	800124c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012ae:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012b4:	d163      	bne.n	800137e <HAL_ADC_Init+0xee>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d161      	bne.n	800137e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ba:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80012bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ca:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80012ce:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012d0:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012d2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012da:	d037      	beq.n	800134c <HAL_ADC_Init+0xbc>
 80012dc:	2901      	cmp	r1, #1
 80012de:	bf14      	ite	ne
 80012e0:	4606      	movne	r6, r0
 80012e2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012e6:	7d25      	ldrb	r5, [r4, #20]
 80012e8:	2d01      	cmp	r5, #1
 80012ea:	d106      	bne.n	80012fa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012ec:	bb83      	cbnz	r3, 8001350 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80012f6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80012fa:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001300:	685d      	ldr	r5, [r3, #4]
 8001302:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001306:	ea45 0506 	orr.w	r5, r5, r6
 800130a:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800130c:	689e      	ldr	r6, [r3, #8]
 800130e:	4d1e      	ldr	r5, [pc, #120]	; (8001388 <HAL_ADC_Init+0xf8>)
 8001310:	ea05 0506 	and.w	r5, r5, r6
 8001314:	ea45 0502 	orr.w	r5, r5, r2
 8001318:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800131a:	d001      	beq.n	8001320 <HAL_ADC_Init+0x90>
 800131c:	2901      	cmp	r1, #1
 800131e:	d120      	bne.n	8001362 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001320:	6921      	ldr	r1, [r4, #16]
 8001322:	3901      	subs	r1, #1
 8001324:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001326:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001328:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800132c:	4329      	orrs	r1, r5
 800132e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <HAL_ADC_Init+0xfc>)
 8001334:	400b      	ands	r3, r1
 8001336:	429a      	cmp	r2, r3
 8001338:	d115      	bne.n	8001366 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800133a:	2300      	movs	r3, #0
 800133c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800133e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001340:	f023 0303 	bic.w	r3, r3, #3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800134c:	460e      	mov	r6, r1
 800134e:	e7ca      	b.n	80012e6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001360:	e7cb      	b.n	80012fa <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8001362:	2100      	movs	r1, #0
 8001364:	e7df      	b.n	8001326 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001368:	f023 0312 	bic.w	r3, r3, #18
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e7e5      	b.n	800134a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	62a3      	str	r3, [r4, #40]	; 0x28
 8001384:	e7f9      	b.n	800137a <HAL_ADC_Init+0xea>
 8001386:	bf00      	nop
 8001388:	ffe1f7fd 	.word	0xffe1f7fd
 800138c:	ff1f0efe 	.word	0xff1f0efe

08001390 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001390:	4770      	bx	lr
	...

08001394 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001396:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80013ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80013b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ba:	b570      	push	{r4, r5, r6, lr}
 80013bc:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013be:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c6:	f1c4 0507 	rsb	r5, r4, #7
 80013ca:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013cc:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	bf28      	it	cs
 80013d2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d4:	2b06      	cmp	r3, #6
 80013d6:	bf98      	it	ls
 80013d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013da:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	bf88      	it	hi
 80013e0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e2:	ea21 0303 	bic.w	r3, r1, r3
 80013e6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	fa06 f404 	lsl.w	r4, r6, r4
 80013ec:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80013f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	bfa8      	it	ge
 80013f8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80013fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	bfb8      	it	lt
 8001402:	4a06      	ldrlt	r2, [pc, #24]	; (800141c <HAL_NVIC_SetPriority+0x64>)
 8001404:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	bfab      	itete	ge
 8001408:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed14 	.word	0xe000ed14

08001420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001420:	2800      	cmp	r0, #0
 8001422:	db08      	blt.n	8001436 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001424:	2301      	movs	r3, #1
 8001426:	0942      	lsrs	r2, r0, #5
 8001428:	f000 001f 	and.w	r0, r0, #31
 800142c:	fa03 f000 	lsl.w	r0, r3, r0
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <HAL_NVIC_EnableIRQ+0x18>)
 8001432:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	3801      	subs	r0, #1
 800143e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001442:	d20a      	bcs.n	800145a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001468:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 800146c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800146e:	2b02      	cmp	r3, #2
 8001470:	d003      	beq.n	800147a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	2304      	movs	r3, #4
 8001474:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001476:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001478:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_DMA_Abort_IT+0x88>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x6a>
 8001492:	3214      	adds	r2, #20
 8001494:	4293      	cmp	r3, r2
 8001496:	d01e      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x6e>
 8001498:	3214      	adds	r2, #20
 800149a:	4293      	cmp	r3, r2
 800149c:	d01d      	beq.n	80014da <HAL_DMA_Abort_IT+0x72>
 800149e:	3214      	adds	r2, #20
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01d      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x78>
 80014a4:	3214      	adds	r2, #20
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01d      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x7e>
 80014aa:	3214      	adds	r2, #20
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf0c      	ite	eq
 80014b0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80014b4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80014ba:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014bc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80014be:	2301      	movs	r3, #1
 80014c0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80014c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80014c6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80014ca:	b17b      	cbz	r3, 80014ec <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80014cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	4620      	mov	r0, r4
 80014d0:	e7d2      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014d2:	2301      	movs	r3, #1
 80014d4:	e7f0      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014d6:	2310      	movs	r3, #16
 80014d8:	e7ee      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	e7eb      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	e7e8      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	e7e5      	b.n	80014b8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	4618      	mov	r0, r3
 80014ee:	e7c3      	b.n	8001478 <HAL_DMA_Abort_IT+0x10>
 80014f0:	40020008 	.word	0x40020008
 80014f4:	40020000 	.word	0x40020000

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80014fe:	4626      	mov	r6, r4
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80016a8 <HAL_GPIO_Init+0x1b0>
 8001506:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80016ac <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	680a      	ldr	r2, [r1, #0]
 800150c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001510:	d102      	bne.n	8001518 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001512:	b003      	add	sp, #12
 8001514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001518:	f04f 0801 	mov.w	r8, #1
 800151c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001520:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001524:	4590      	cmp	r8, r2
 8001526:	d17e      	bne.n	8001626 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8001528:	684d      	ldr	r5, [r1, #4]
 800152a:	2d12      	cmp	r5, #18
 800152c:	f000 80a9 	beq.w	8001682 <HAL_GPIO_Init+0x18a>
 8001530:	f200 8082 	bhi.w	8001638 <HAL_GPIO_Init+0x140>
 8001534:	2d02      	cmp	r5, #2
 8001536:	f000 80a1 	beq.w	800167c <HAL_GPIO_Init+0x184>
 800153a:	d876      	bhi.n	800162a <HAL_GPIO_Init+0x132>
 800153c:	2d00      	cmp	r5, #0
 800153e:	f000 8088 	beq.w	8001652 <HAL_GPIO_Init+0x15a>
 8001542:	2d01      	cmp	r5, #1
 8001544:	f000 8098 	beq.w	8001678 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800154c:	2aff      	cmp	r2, #255	; 0xff
 800154e:	bf93      	iteet	ls
 8001550:	4682      	movls	sl, r0
 8001552:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001556:	3d08      	subhi	r5, #8
 8001558:	f8d0 b000 	ldrls.w	fp, [r0]
 800155c:	bf92      	itee	ls
 800155e:	00b5      	lslls	r5, r6, #2
 8001560:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001564:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001566:	fa09 f805 	lsl.w	r8, r9, r5
 800156a:	ea2b 0808 	bic.w	r8, fp, r8
 800156e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001572:	bf88      	it	hi
 8001574:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001578:	ea48 0505 	orr.w	r5, r8, r5
 800157c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001580:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001584:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001588:	d04d      	beq.n	8001626 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4f44      	ldr	r7, [pc, #272]	; (800169c <HAL_GPIO_Init+0x1a4>)
 800158c:	f026 0803 	bic.w	r8, r6, #3
 8001590:	69bd      	ldr	r5, [r7, #24]
 8001592:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001596:	f045 0501 	orr.w	r5, r5, #1
 800159a:	61bd      	str	r5, [r7, #24]
 800159c:	69bd      	ldr	r5, [r7, #24]
 800159e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80015a2:	f005 0501 	and.w	r5, r5, #1
 80015a6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ac:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80015b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b6:	fa09 f90b 	lsl.w	r9, r9, fp
 80015ba:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015be:	4d38      	ldr	r5, [pc, #224]	; (80016a0 <HAL_GPIO_Init+0x1a8>)
 80015c0:	42a8      	cmp	r0, r5
 80015c2:	d063      	beq.n	800168c <HAL_GPIO_Init+0x194>
 80015c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c8:	42a8      	cmp	r0, r5
 80015ca:	d061      	beq.n	8001690 <HAL_GPIO_Init+0x198>
 80015cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d0:	42a8      	cmp	r0, r5
 80015d2:	d05f      	beq.n	8001694 <HAL_GPIO_Init+0x19c>
 80015d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015d8:	42a8      	cmp	r0, r5
 80015da:	bf0c      	ite	eq
 80015dc:	2503      	moveq	r5, #3
 80015de:	2504      	movne	r5, #4
 80015e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80015e4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80015e8:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80015ec:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80015f2:	bf14      	ite	ne
 80015f4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f6:	4395      	biceq	r5, r2
 80015f8:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80015fa:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001600:	bf14      	ite	ne
 8001602:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001604:	4395      	biceq	r5, r2
 8001606:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001608:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800160e:	bf14      	ite	ne
 8001610:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001612:	4395      	biceq	r5, r2
 8001614:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001616:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	bf14      	ite	ne
 800161e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001620:	ea25 0202 	biceq.w	r2, r5, r2
 8001624:	60da      	str	r2, [r3, #12]
	position++;
 8001626:	3601      	adds	r6, #1
 8001628:	e76f      	b.n	800150a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800162a:	2d03      	cmp	r5, #3
 800162c:	d022      	beq.n	8001674 <HAL_GPIO_Init+0x17c>
 800162e:	2d11      	cmp	r5, #17
 8001630:	d18a      	bne.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001632:	68cc      	ldr	r4, [r1, #12]
 8001634:	3404      	adds	r4, #4
          break;
 8001636:	e787      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001638:	4f1a      	ldr	r7, [pc, #104]	; (80016a4 <HAL_GPIO_Init+0x1ac>)
 800163a:	42bd      	cmp	r5, r7
 800163c:	d009      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800163e:	d812      	bhi.n	8001666 <HAL_GPIO_Init+0x16e>
 8001640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80016b0 <HAL_GPIO_Init+0x1b8>
 8001644:	454d      	cmp	r5, r9
 8001646:	d004      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 8001648:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800164c:	454d      	cmp	r5, r9
 800164e:	f47f af7b 	bne.w	8001548 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001652:	688c      	ldr	r4, [r1, #8]
 8001654:	b1c4      	cbz	r4, 8001688 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001656:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001658:	bf0c      	ite	eq
 800165a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800165e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001662:	2408      	movs	r4, #8
 8001664:	e770      	b.n	8001548 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001666:	4565      	cmp	r5, ip
 8001668:	d0f3      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166a:	4575      	cmp	r5, lr
 800166c:	d0f1      	beq.n	8001652 <HAL_GPIO_Init+0x15a>
 800166e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016b4 <HAL_GPIO_Init+0x1bc>
 8001672:	e7eb      	b.n	800164c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2400      	movs	r4, #0
 8001676:	e767      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	68cc      	ldr	r4, [r1, #12]
          break;
 800167a:	e765      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167c:	68cc      	ldr	r4, [r1, #12]
 800167e:	3408      	adds	r4, #8
          break;
 8001680:	e762      	b.n	8001548 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001682:	68cc      	ldr	r4, [r1, #12]
 8001684:	340c      	adds	r4, #12
          break;
 8001686:	e75f      	b.n	8001548 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001688:	2404      	movs	r4, #4
 800168a:	e75d      	b.n	8001548 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	2500      	movs	r5, #0
 800168e:	e7a7      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001690:	2501      	movs	r5, #1
 8001692:	e7a5      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001694:	2502      	movs	r5, #2
 8001696:	e7a3      	b.n	80015e0 <HAL_GPIO_Init+0xe8>
 8001698:	40010400 	.word	0x40010400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010800 	.word	0x40010800
 80016a4:	10210000 	.word	0x10210000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10320000 	.word	0x10320000
 80016b0:	10110000 	.word	0x10110000
 80016b4:	10220000 	.word	0x10220000

080016b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	6883      	ldr	r3, [r0, #8]
 80016ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80016bc:	bf14      	ite	ne
 80016be:	2001      	movne	r0, #1
 80016c0:	2000      	moveq	r0, #0
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	b10a      	cbz	r2, 80016ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016c6:	6101      	str	r1, [r0, #16]
  }
}
 80016c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	e7fb      	b.n	80016c6 <HAL_GPIO_WritePin+0x2>

080016ce <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016ce:	68c3      	ldr	r3, [r0, #12]
 80016d0:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	bf14      	ite	ne
 80016d4:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	6101      	streq	r1, [r0, #16]
  }
}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	4201      	tst	r1, r0
 80016e4:	d002      	beq.n	80016ec <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	f001 fb22 	bl	8002d30 <HAL_GPIO_EXTI_Callback>
  }
}
 80016ec:	bd08      	pop	{r3, pc}
 80016ee:	bf00      	nop
 80016f0:	40010400 	.word	0x40010400

080016f4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	694b      	ldr	r3, [r1, #20]
 80016fa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80016fe:	d010      	beq.n	8001722 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001700:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001704:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001706:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001708:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800170a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800170e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001712:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
 8001720:	4770      	bx	lr
  }
  return HAL_OK;
 8001722:	4618      	mov	r0, r3
}
 8001724:	4770      	bx	lr

08001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	4604      	mov	r4, r0
 800172c:	4616      	mov	r6, r2
 800172e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001730:	b28f      	uxth	r7, r1
 8001732:	6825      	ldr	r5, [r4, #0]
 8001734:	6968      	ldr	r0, [r5, #20]
 8001736:	ea37 0000 	bics.w	r0, r7, r0
 800173a:	d017      	beq.n	800176c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800173c:	696b      	ldr	r3, [r5, #20]
 800173e:	055a      	lsls	r2, r3, #21
 8001740:	d516      	bpl.n	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001742:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001744:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001750:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001756:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800175e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001760:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001766:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001770:	1c73      	adds	r3, r6, #1
 8001772:	d0df      	beq.n	8001734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff fbbc 	bl	8000ef0 <HAL_GetTick>
 8001778:	eba0 0008 	sub.w	r0, r0, r8
 800177c:	42b0      	cmp	r0, r6
 800177e:	d801      	bhi.n	8001784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001780:	2e00      	cmp	r6, #0
 8001782:	d1d6      	bne.n	8001732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001784:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001786:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001788:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800178e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	e7e4      	b.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

0800179a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800179a:	b570      	push	{r4, r5, r6, lr}
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	075b      	lsls	r3, r3, #29
 80017a8:	d501      	bpl.n	80017ae <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
}
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff ffa0 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 80017b4:	b9a8      	cbnz	r0, 80017e2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	1c6a      	adds	r2, r5, #1
 80017b8:	d0f3      	beq.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff fb99 	bl	8000ef0 <HAL_GetTick>
 80017be:	1b80      	subs	r0, r0, r6
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	d801      	bhi.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	d1ec      	bne.n	80017a2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017c8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ca:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017cc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017dc:	f042 0220 	orr.w	r2, r2, #32
 80017e0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e7e2      	b.n	80017ac <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080017e6 <I2C_WaitOnFlagUntilTimeout>:
{
 80017e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ea:	4604      	mov	r4, r0
 80017ec:	4690      	mov	r8, r2
 80017ee:	461f      	mov	r7, r3
 80017f0:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f2:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80017f6:	b28d      	uxth	r5, r1
 80017f8:	6821      	ldr	r1, [r4, #0]
 80017fa:	f1b9 0f01 	cmp.w	r9, #1
 80017fe:	bf0c      	ite	eq
 8001800:	694b      	ldreq	r3, [r1, #20]
 8001802:	698b      	ldrne	r3, [r1, #24]
 8001804:	ea35 0303 	bics.w	r3, r5, r3
 8001808:	bf0c      	ite	eq
 800180a:	2301      	moveq	r3, #1
 800180c:	2300      	movne	r3, #0
 800180e:	4598      	cmp	r8, r3
 8001810:	d001      	beq.n	8001816 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001812:	2000      	movs	r0, #0
 8001814:	e016      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001816:	1c7b      	adds	r3, r7, #1
 8001818:	d0ef      	beq.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800181a:	f7ff fb69 	bl	8000ef0 <HAL_GetTick>
 800181e:	1b80      	subs	r0, r0, r6
 8001820:	42b8      	cmp	r0, r7
 8001822:	d801      	bhi.n	8001828 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001824:	2f00      	cmp	r7, #0
 8001826:	d1e7      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001828:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800182a:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800182c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800182e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001830:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001834:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001838:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800183a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	6422      	str	r2, [r4, #64]	; 0x40
}
 8001844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	d501      	bpl.n	800185c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff ff49 	bl	80016f4 <I2C_IsAcknowledgeFailed>
 8001862:	b9a8      	cbnz	r0, 8001890 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001864:	1c6a      	adds	r2, r5, #1
 8001866:	d0f3      	beq.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001868:	f7ff fb42 	bl	8000ef0 <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	42a8      	cmp	r0, r5
 8001870:	d801      	bhi.n	8001876 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001872:	2d00      	cmp	r5, #0
 8001874:	d1ec      	bne.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001876:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001878:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800187a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800187c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001880:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001884:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001886:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e7e2      	b.n	800185a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08001894 <I2C_RequestMemoryWrite>:
{
 8001894:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001898:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189a:	6802      	ldr	r2, [r0, #0]
{
 800189c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189e:	6813      	ldr	r3, [r2, #0]
{
 80018a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
{
 80018a8:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	9600      	str	r6, [sp, #0]
 80018ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80018b4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b6:	f7ff ff96 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	b118      	cbz	r0, 80018c4 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80018bc:	2001      	movs	r0, #1
}
 80018be:	b004      	add	sp, #16
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80018ca:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80018ce:	4633      	mov	r3, r6
 80018d0:	4916      	ldr	r1, [pc, #88]	; (800192c <I2C_RequestMemoryWrite+0x98>)
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff27 	bl	8001726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1ef      	bne.n	80018bc <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	9003      	str	r0, [sp, #12]
 80018e0:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e4:	9203      	str	r2, [sp, #12]
 80018e6:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e8:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ea:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ec:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018f0:	f7ff ffaa 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 80018f4:	b140      	cbz	r0, 8001908 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fa:	bf01      	itttt	eq
 80018fc:	6822      	ldreq	r2, [r4, #0]
 80018fe:	6813      	ldreq	r3, [r2, #0]
 8001900:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001904:	6013      	streq	r3, [r2, #0]
 8001906:	e7d9      	b.n	80018bc <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001908:	f1b8 0f01 	cmp.w	r8, #1
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	d102      	bne.n	8001916 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001910:	b2ed      	uxtb	r5, r5
 8001912:	611d      	str	r5, [r3, #16]
 8001914:	e7d3      	b.n	80018be <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001916:	0a2a      	lsrs	r2, r5, #8
 8001918:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800191c:	4632      	mov	r2, r6
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff92 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001924:	2800      	cmp	r0, #0
 8001926:	d1e6      	bne.n	80018f6 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	e7f1      	b.n	8001910 <I2C_RequestMemoryWrite+0x7c>
 800192c:	00010002 	.word	0x00010002

08001930 <HAL_I2C_Init>:
{
 8001930:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001932:	4604      	mov	r4, r0
 8001934:	b908      	cbnz	r0, 800193a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001936:	2001      	movs	r0, #1
}
 8001938:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800193e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001942:	b91b      	cbnz	r3, 800194c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001948:	f001 ffa2 	bl	8003890 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800194c:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800194e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001950:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001954:	6813      	ldr	r3, [r2, #0]
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800195c:	f000 fba0 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d84d      	bhi.n	8001a04 <HAL_I2C_Init+0xd4>
 8001968:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <HAL_I2C_Init+0x13c>)
 800196a:	4290      	cmp	r0, r2
 800196c:	d9e3      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800196e:	4940      	ldr	r1, [pc, #256]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001970:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001972:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001976:	6855      	ldr	r5, [r2, #4]
 8001978:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800197c:	430d      	orrs	r5, r1
 800197e:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001980:	6a15      	ldr	r5, [r2, #32]
 8001982:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001986:	3101      	adds	r1, #1
 8001988:	4329      	orrs	r1, r5
 800198a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	69d1      	ldr	r1, [r2, #28]
 800198e:	4d36      	ldr	r5, [pc, #216]	; (8001a68 <HAL_I2C_Init+0x138>)
 8001990:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001994:	42ab      	cmp	r3, r5
 8001996:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800199a:	f100 30ff 	add.w	r0, r0, #4294967295
 800199e:	d848      	bhi.n	8001a32 <HAL_I2C_Init+0x102>
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	bf38      	it	cc
 80019b0:	2304      	movcc	r3, #4
 80019b2:	430b      	orrs	r3, r1
 80019b4:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80019bc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80019c0:	4303      	orrs	r3, r0
 80019c2:	430b      	orrs	r3, r1
 80019c4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c6:	6891      	ldr	r1, [r2, #8]
 80019c8:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80019cc:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80019d0:	4303      	orrs	r3, r0
 80019d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019da:	68d1      	ldr	r1, [r2, #12]
 80019dc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80019e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019e4:	4303      	orrs	r3, r0
 80019e6:	430b      	orrs	r3, r1
 80019e8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80019ea:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ec:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019fc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a02:	e799      	b.n	8001938 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_I2C_Init+0x144>)
 8001a06:	4290      	cmp	r0, r2
 8001a08:	d995      	bls.n	8001936 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0a:	4e19      	ldr	r6, [pc, #100]	; (8001a70 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001a10:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a14:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a16:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a18:	6855      	ldr	r5, [r2, #4]
 8001a1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a1e:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a20:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a24:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a26:	6a15      	ldr	r5, [r2, #32]
 8001a28:	fbb1 f1f6 	udiv	r1, r1, r6
 8001a2c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001a30:	e7a9      	b.n	8001986 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a32:	68a5      	ldr	r5, [r4, #8]
 8001a34:	b955      	cbnz	r5, 8001a4c <HAL_I2C_Init+0x11c>
 8001a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	b16b      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	e7b2      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a4c:	2519      	movs	r5, #25
 8001a4e:	436b      	muls	r3, r5
 8001a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5a:	b113      	cbz	r3, 8001a62 <HAL_I2C_Init+0x132>
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a60:	e7a7      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e7a5      	b.n	80019b2 <HAL_I2C_Init+0x82>
 8001a66:	bf00      	nop
 8001a68:	000186a0 	.word	0x000186a0
 8001a6c:	001e847f 	.word	0x001e847f
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	003d08ff 	.word	0x003d08ff

08001a78 <HAL_I2C_Mem_Write>:
{
 8001a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	4699      	mov	r9, r3
 8001a80:	460f      	mov	r7, r1
 8001a82:	4690      	mov	r8, r2
 8001a84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001a86:	f7ff fa33 	bl	8000ef0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a8a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	d003      	beq.n	8001a9c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001a94:	2002      	movs	r0, #2
}
 8001a96:	b003      	add	sp, #12
 8001a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a9c:	9000      	str	r0, [sp, #0]
 8001a9e:	2319      	movs	r3, #25
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	493b      	ldr	r1, [pc, #236]	; (8001b90 <HAL_I2C_Mem_Write+0x118>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fe9e 	bl	80017e6 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001aae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d0ee      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x1c>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001abc:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abe:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ac4:	bf58      	it	pl
 8001ac6:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ac8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001aca:	bf5c      	itt	pl
 8001acc:	f042 0201 	orrpl.w	r2, r2, #1
 8001ad0:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad8:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ada:	2321      	movs	r3, #33	; 0x21
 8001adc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aec:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8001af0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001af6:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001afc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_I2C_Mem_Write+0x11c>)
 8001b00:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b02:	464b      	mov	r3, r9
 8001b04:	f7ff fec6 	bl	8001894 <I2C_RequestMemoryWrite>
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d02a      	beq.n	8001b62 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	e7c2      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b10:	f7ff fe9a 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b14:	b140      	cbz	r0, 8001b28 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b18:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	bf01      	itttt	eq
 8001b1c:	6822      	ldreq	r2, [r4, #0]
 8001b1e:	6813      	ldreq	r3, [r2, #0]
 8001b20:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b24:	6013      	streq	r3, [r2, #0]
 8001b26:	e7f1      	b.n	8001b0c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b2a:	6827      	ldr	r7, [r4, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001b32:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001b34:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001b38:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001b3a:	3a01      	subs	r2, #1
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b40:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001b42:	1e48      	subs	r0, r1, #1
 8001b44:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b46:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001b48:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b4a:	d50a      	bpl.n	8001b62 <HAL_I2C_Mem_Write+0xea>
 8001b4c:	b148      	cbz	r0, 8001b62 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001b50:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b52:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001b54:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001b56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001b58:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001b5e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b60:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b64:	462a      	mov	r2, r5
 8001b66:	4631      	mov	r1, r6
 8001b68:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d0      	bne.n	8001b10 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6e:	f7ff fe14 	bl	800179a <I2C_WaitOnBTFFlagUntilTimeout>
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1cf      	bne.n	8001b16 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001b82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b8e:	e782      	b.n	8001a96 <HAL_I2C_Mem_Write+0x1e>
 8001b90:	00100002 	.word	0x00100002
 8001b94:	ffff0000 	.word	0xffff0000

08001b98 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_PWR_PVD_IRQHandler>:
{
 8001b9c:	b510      	push	{r4, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001b9e:	4c05      	ldr	r4, [pc, #20]	; (8001bb4 <HAL_PWR_PVD_IRQHandler+0x18>)
 8001ba0:	6963      	ldr	r3, [r4, #20]
 8001ba2:	03db      	lsls	r3, r3, #15
 8001ba4:	d504      	bpl.n	8001bb0 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8001ba6:	f7ff fff7 	bl	8001b98 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	6163      	str	r3, [r4, #20]
}
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	b908      	cbnz	r0, 8001bc4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e03c      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc4:	6803      	ldr	r3, [r0, #0]
 8001bc6:	07db      	lsls	r3, r3, #31
 8001bc8:	d410      	bmi.n	8001bec <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	079f      	lsls	r7, r3, #30
 8001bce:	d45d      	bmi.n	8001c8c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	0719      	lsls	r1, r3, #28
 8001bd4:	f100 8094 	bmi.w	8001d00 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	075a      	lsls	r2, r3, #29
 8001bdc:	f100 80be 	bmi.w	8001d5c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	69e8      	ldr	r0, [r5, #28]
 8001be2:	2800      	cmp	r0, #0
 8001be4:	f040 812c 	bne.w	8001e40 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001be8:	2000      	movs	r0, #0
 8001bea:	e028      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bec:	4c8f      	ldr	r4, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d007      	beq.n	8001c08 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	03de      	lsls	r6, r3, #15
 8001c06:	d506      	bpl.n	8001c16 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	039c      	lsls	r4, r3, #14
 8001c0c:	d5dd      	bpl.n	8001bca <HAL_RCC_OscConfig+0x12>
 8001c0e:	686b      	ldr	r3, [r5, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1da      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
 8001c14:	e7d4      	b.n	8001bc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	686b      	ldr	r3, [r5, #4]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x8c>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c26:	f7ff f963 	bl	8000ef0 <HAL_GetTick>
 8001c2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	0398      	lsls	r0, r3, #14
 8001c30:	d4cb      	bmi.n	8001bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff f95d 	bl	8000ef0 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	2864      	cmp	r0, #100	; 0x64
 8001c3a:	d9f7      	bls.n	8001c2c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001c3c:	2003      	movs	r0, #3
}
 8001c3e:	b002      	add	sp, #8
 8001c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	b99b      	cbnz	r3, 8001c6e <HAL_RCC_OscConfig+0xb6>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c56:	f7ff f94b 	bl	8000ef0 <HAL_GetTick>
 8001c5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	0399      	lsls	r1, r3, #14
 8001c60:	d5b3      	bpl.n	8001bca <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c62:	f7ff f945 	bl	8000ef0 <HAL_GetTick>
 8001c66:	1b80      	subs	r0, r0, r6
 8001c68:	2864      	cmp	r0, #100	; 0x64
 8001c6a:	d9f7      	bls.n	8001c5c <HAL_RCC_OscConfig+0xa4>
 8001c6c:	e7e6      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	d103      	bne.n	8001c7e <HAL_RCC_OscConfig+0xc6>
 8001c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	e7cf      	b.n	8001c1e <HAL_RCC_OscConfig+0x66>
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6023      	str	r3, [r4, #0]
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	e7cb      	b.n	8001c24 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8c:	4c67      	ldr	r4, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001c8e:	6863      	ldr	r3, [r4, #4]
 8001c90:	f013 0f0c 	tst.w	r3, #12
 8001c94:	d007      	beq.n	8001ca6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d110      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
 8001ca0:	6863      	ldr	r3, [r4, #4]
 8001ca2:	03da      	lsls	r2, r3, #15
 8001ca4:	d40d      	bmi.n	8001cc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	079b      	lsls	r3, r3, #30
 8001caa:	d502      	bpl.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
 8001cac:	692b      	ldr	r3, [r5, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d186      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	696a      	ldr	r2, [r5, #20]
 8001cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cbe:	6023      	str	r3, [r4, #0]
 8001cc0:	e786      	b.n	8001bd0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc2:	692a      	ldr	r2, [r5, #16]
 8001cc4:	4b5a      	ldr	r3, [pc, #360]	; (8001e30 <HAL_RCC_OscConfig+0x278>)
 8001cc6:	b16a      	cbz	r2, 8001ce4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f910 	bl	8000ef0 <HAL_GetTick>
 8001cd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	079f      	lsls	r7, r3, #30
 8001cd6:	d4ec      	bmi.n	8001cb2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f90a 	bl	8000ef0 <HAL_GetTick>
 8001cdc:	1b80      	subs	r0, r0, r6
 8001cde:	2802      	cmp	r0, #2
 8001ce0:	d9f7      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11a>
 8001ce2:	e7ab      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f903 	bl	8000ef0 <HAL_GetTick>
 8001cea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	6823      	ldr	r3, [r4, #0]
 8001cee:	0798      	lsls	r0, r3, #30
 8001cf0:	f57f af6e 	bpl.w	8001bd0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f8fc 	bl	8000ef0 <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f6      	bls.n	8001cec <HAL_RCC_OscConfig+0x134>
 8001cfe:	e79d      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d00:	69aa      	ldr	r2, [r5, #24]
 8001d02:	4c4a      	ldr	r4, [pc, #296]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	b1da      	cbz	r2, 8001d40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f8f0 	bl	8000ef0 <HAL_GetTick>
 8001d10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d14:	079b      	lsls	r3, r3, #30
 8001d16:	d50d      	bpl.n	8001d34 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_RCC_OscConfig+0x280>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d24:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001d26:	bf00      	nop
  }
  while (Delay --);
 8001d28:	9b01      	ldr	r3, [sp, #4]
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	9201      	str	r2, [sp, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f9      	bne.n	8001d26 <HAL_RCC_OscConfig+0x16e>
 8001d32:	e751      	b.n	8001bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f8dc 	bl	8000ef0 <HAL_GetTick>
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	2802      	cmp	r0, #2
 8001d3c:	d9e9      	bls.n	8001d12 <HAL_RCC_OscConfig+0x15a>
 8001d3e:	e77d      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001d40:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d42:	f7ff f8d5 	bl	8000ef0 <HAL_GetTick>
 8001d46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d4a:	079f      	lsls	r7, r3, #30
 8001d4c:	f57f af44 	bpl.w	8001bd8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff f8ce 	bl	8000ef0 <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f6      	bls.n	8001d48 <HAL_RCC_OscConfig+0x190>
 8001d5a:	e76f      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5c:	4c33      	ldr	r4, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	69e3      	ldr	r3, [r4, #28]
 8001d60:	00d8      	lsls	r0, r3, #3
 8001d62:	d424      	bmi.n	8001dae <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001d64:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	69e3      	ldr	r3, [r4, #28]
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61e3      	str	r3, [r4, #28]
 8001d6e:	69e3      	ldr	r3, [r4, #28]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4e30      	ldr	r6, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x284>)
 8001d7a:	6833      	ldr	r3, [r6, #0]
 8001d7c:	05d9      	lsls	r1, r3, #23
 8001d7e:	d518      	bpl.n	8001db2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	68eb      	ldr	r3, [r5, #12]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d126      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x21c>
 8001d86:	6a23      	ldr	r3, [r4, #32]
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f8af 	bl	8000ef0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d96:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	6a23      	ldr	r3, [r4, #32]
 8001d9a:	079b      	lsls	r3, r3, #30
 8001d9c:	d53f      	bpl.n	8001e1e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001d9e:	2f00      	cmp	r7, #0
 8001da0:	f43f af1e 	beq.w	8001be0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	69e3      	ldr	r3, [r4, #28]
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	61e3      	str	r3, [r4, #28]
 8001dac:	e718      	b.n	8001be0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001dae:	2700      	movs	r7, #0
 8001db0:	e7e2      	b.n	8001d78 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	6833      	ldr	r3, [r6, #0]
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dba:	f7ff f899 	bl	8000ef0 <HAL_GetTick>
 8001dbe:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	6833      	ldr	r3, [r6, #0]
 8001dc2:	05da      	lsls	r2, r3, #23
 8001dc4:	d4dc      	bmi.n	8001d80 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff f893 	bl	8000ef0 <HAL_GetTick>
 8001dca:	eba0 0008 	sub.w	r0, r0, r8
 8001dce:	2864      	cmp	r0, #100	; 0x64
 8001dd0:	d9f6      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x208>
 8001dd2:	e733      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	b9ab      	cbnz	r3, 8001e02 <HAL_RCC_OscConfig+0x24a>
 8001dd6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6223      	str	r3, [r4, #32]
 8001de2:	6a23      	ldr	r3, [r4, #32]
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001dea:	f7ff f881 	bl	8000ef0 <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	6a23      	ldr	r3, [r4, #32]
 8001df2:	0798      	lsls	r0, r3, #30
 8001df4:	d5d3      	bpl.n	8001d9e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f87b 	bl	8000ef0 <HAL_GetTick>
 8001dfa:	1b80      	subs	r0, r0, r6
 8001dfc:	4540      	cmp	r0, r8
 8001dfe:	d9f7      	bls.n	8001df0 <HAL_RCC_OscConfig+0x238>
 8001e00:	e71c      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	6a23      	ldr	r3, [r4, #32]
 8001e06:	d103      	bne.n	8001e10 <HAL_RCC_OscConfig+0x258>
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6223      	str	r3, [r4, #32]
 8001e0e:	e7ba      	b.n	8001d86 <HAL_RCC_OscConfig+0x1ce>
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6223      	str	r3, [r4, #32]
 8001e16:	6a23      	ldr	r3, [r4, #32]
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	e7b6      	b.n	8001d8c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff f867 	bl	8000ef0 <HAL_GetTick>
 8001e22:	eba0 0008 	sub.w	r0, r0, r8
 8001e26:	42b0      	cmp	r0, r6
 8001e28:	d9b6      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1e0>
 8001e2a:	e707      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	42420000 	.word	0x42420000
 8001e34:	42420480 	.word	0x42420480
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x334>)
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	461c      	mov	r4, r3
 8001e46:	f002 020c 	and.w	r2, r2, #12
 8001e4a:	2a08      	cmp	r2, #8
 8001e4c:	d03d      	beq.n	8001eca <HAL_RCC_OscConfig+0x312>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	4e27      	ldr	r6, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e54:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e56:	d12b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001e58:	f7ff f84a 	bl	8000ef0 <HAL_GetTick>
 8001e5c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	0199      	lsls	r1, r3, #6
 8001e62:	d41f      	bmi.n	8001ea4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e64:	6a2b      	ldr	r3, [r5, #32]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6c:	6862      	ldr	r2, [r4, #4]
 8001e6e:	68a9      	ldr	r1, [r5, #8]
 8001e70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e74:	430a      	orrs	r2, r1
 8001e76:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e7a:	6862      	ldr	r2, [r4, #4]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e86:	2301      	movs	r3, #1
 8001e88:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f831 	bl	8000ef0 <HAL_GetTick>
 8001e8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	019a      	lsls	r2, r3, #6
 8001e94:	f53f aea8 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff f82a 	bl	8000ef0 <HAL_GetTick>
 8001e9c:	1b40      	subs	r0, r0, r5
 8001e9e:	2802      	cmp	r0, #2
 8001ea0:	d9f6      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2d8>
 8001ea2:	e6cb      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f824 	bl	8000ef0 <HAL_GetTick>
 8001ea8:	1bc0      	subs	r0, r0, r7
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9d7      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2a6>
 8001eae:	e6c5      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f81e 	bl	8000ef0 <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	f57f ae95 	bpl.w	8001be8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f817 	bl	8000ef0 <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	2802      	cmp	r0, #2
 8001ec6:	d9f6      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2fe>
 8001ec8:	e6b8      	b.n	8001c3c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eca:	2801      	cmp	r0, #1
 8001ecc:	f43f aeb7 	beq.w	8001c3e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001ed0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	6a2b      	ldr	r3, [r5, #32]
 8001ed4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f47f ae71 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x8>
 8001ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001ee4:	1ac0      	subs	r0, r0, r3
 8001ee6:	bf18      	it	ne
 8001ee8:	2001      	movne	r0, #1
 8001eea:	e6a8      	b.n	8001c3e <HAL_RCC_OscConfig+0x86>
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420060 	.word	0x42420060

08001ef4 <HAL_RCC_GetSysClockFreq>:
{
 8001ef4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001ef8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efa:	ac02      	add	r4, sp, #8
 8001efc:	f103 0510 	add.w	r5, r3, #16
 8001f00:	4622      	mov	r2, r4
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	3308      	adds	r3, #8
 8001f08:	c203      	stmia	r2!, {r0, r1}
 8001f0a:	42ab      	cmp	r3, r5
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	d1f7      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f10:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f16:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001f1a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	f003 020c 	and.w	r2, r3, #12
 8001f20:	2a08      	cmp	r2, #8
 8001f22:	d117      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f24:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001f28:	a806      	add	r0, sp, #24
 8001f2a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f2c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f32:	d50c      	bpl.n	8001f4e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f34:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f38:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3e:	aa06      	add	r2, sp, #24
 8001f40:	4413      	add	r3, r2
 8001f42:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f46:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001f4a:	b007      	add	sp, #28
 8001f4c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x70>)
 8001f50:	4350      	muls	r0, r2
 8001f52:	e7fa      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001f56:	e7f8      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x56>
 8001f58:	080087c0 	.word	0x080087c0
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	003d0900 	.word	0x003d0900

08001f68 <HAL_RCC_ClockConfig>:
{
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f6c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b910      	cbnz	r0, 8001f78 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
}
 8001f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4a44      	ldr	r2, [pc, #272]	; (800208c <HAL_RCC_ClockConfig+0x124>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d328      	bcc.n	8001fd6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	6821      	ldr	r1, [r4, #0]
 8001f86:	078e      	lsls	r6, r1, #30
 8001f88:	d430      	bmi.n	8001fec <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	07ca      	lsls	r2, r1, #31
 8001f8c:	d443      	bmi.n	8002016 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_RCC_ClockConfig+0x124>)
 8001f90:	6813      	ldr	r3, [r2, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	42ab      	cmp	r3, r5
 8001f98:	d865      	bhi.n	8002066 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	4d3c      	ldr	r5, [pc, #240]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
 8001f9e:	f012 0f04 	tst.w	r2, #4
 8001fa2:	d16c      	bne.n	800207e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	0713      	lsls	r3, r2, #28
 8001fa6:	d506      	bpl.n	8001fb6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa8:	686b      	ldr	r3, [r5, #4]
 8001faa:	6922      	ldr	r2, [r4, #16]
 8001fac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fb6:	f7ff ff9d 	bl	8001ef4 <HAL_RCC_GetSysClockFreq>
 8001fba:	686b      	ldr	r3, [r5, #4]
 8001fbc:	4a35      	ldr	r2, [pc, #212]	; (8002094 <HAL_RCC_ClockConfig+0x12c>)
 8001fbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	40d8      	lsrs	r0, r3
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_ClockConfig+0x130>)
 8001fc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_ClockConfig+0x134>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f7fe ff4d 	bl	8000e6c <HAL_InitTick>
  return HAL_OK;
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7ce      	b.n	8001f74 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d1c3      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xa>
 8001fea:	e7cb      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1c>
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff2:	bf1e      	ittt	ne
 8001ff4:	685a      	ldrne	r2, [r3, #4]
 8001ff6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ffa:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffe:	bf42      	ittt	mi
 8002000:	685a      	ldrmi	r2, [r3, #4]
 8002002:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002006:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68a0      	ldr	r0, [r4, #8]
 800200c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002010:	4302      	orrs	r2, r0
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e7b9      	b.n	8001f8a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002016:	6862      	ldr	r2, [r4, #4]
 8002018:	4e1d      	ldr	r6, [pc, #116]	; (8002090 <HAL_RCC_ClockConfig+0x128>)
 800201a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	d11a      	bne.n	8002056 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	d0a5      	beq.n	8001f72 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002026:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	4313      	orrs	r3, r2
 8002032:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002034:	f7fe ff5c 	bl	8000ef0 <HAL_GetTick>
 8002038:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	6873      	ldr	r3, [r6, #4]
 800203c:	6862      	ldr	r2, [r4, #4]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002046:	d0a2      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7fe ff52 	bl	8000ef0 <HAL_GetTick>
 800204c:	1bc0      	subs	r0, r0, r7
 800204e:	4540      	cmp	r0, r8
 8002050:	d9f3      	bls.n	800203a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002052:	2003      	movs	r0, #3
 8002054:	e78e      	b.n	8001f74 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	2a02      	cmp	r2, #2
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800205e:	e7e1      	b.n	8002024 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	f013 0f02 	tst.w	r3, #2
 8002064:	e7de      	b.n	8002024 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f023 0307 	bic.w	r3, r3, #7
 800206c:	432b      	orrs	r3, r5
 800206e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	42ab      	cmp	r3, r5
 8002078:	f47f af7b 	bne.w	8001f72 <HAL_RCC_ClockConfig+0xa>
 800207c:	e78d      	b.n	8001f9a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207e:	686b      	ldr	r3, [r5, #4]
 8002080:	68e1      	ldr	r1, [r4, #12]
 8002082:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002086:	430b      	orrs	r3, r1
 8002088:	606b      	str	r3, [r5, #4]
 800208a:	e78b      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x3c>
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	08008e9a 	.word	0x08008e9a
 8002098:	20000010 	.word	0x20000010
 800209c:	20000004 	.word	0x20000004

080020a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020ae:	6810      	ldr	r0, [r2, #0]
}
 80020b0:	40d8      	lsrs	r0, r3
 80020b2:	4770      	bx	lr
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08008eaa 	.word	0x08008eaa
 80020bc:	20000010 	.word	0x20000010

080020c0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020ce:	6810      	ldr	r0, [r2, #0]
}
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08008eaa 	.word	0x08008eaa
 80020dc:	20000010 	.word	0x20000010

080020e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020e0:	6803      	ldr	r3, [r0, #0]
{
 80020e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020e6:	07d9      	lsls	r1, r3, #31
{
 80020e8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ea:	d520      	bpl.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ec:	4c35      	ldr	r4, [pc, #212]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80020ee:	69e3      	ldr	r3, [r4, #28]
 80020f0:	00da      	lsls	r2, r3, #3
 80020f2:	d432      	bmi.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80020f4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61e3      	str	r3, [r4, #28]
 80020fe:	69e3      	ldr	r3, [r4, #28]
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4e2f      	ldr	r6, [pc, #188]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800210a:	6833      	ldr	r3, [r6, #0]
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	d526      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002110:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002112:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002116:	d136      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002118:	6a23      	ldr	r3, [r4, #32]
 800211a:	686a      	ldr	r2, [r5, #4]
 800211c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002120:	4313      	orrs	r3, r2
 8002122:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002124:	b11f      	cbz	r7, 800212e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	69e3      	ldr	r3, [r4, #28]
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800212e:	6828      	ldr	r0, [r5, #0]
 8002130:	0783      	lsls	r3, r0, #30
 8002132:	d506      	bpl.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002136:	68a9      	ldr	r1, [r5, #8]
 8002138:	6853      	ldr	r3, [r2, #4]
 800213a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800213e:	430b      	orrs	r3, r1
 8002140:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002142:	f010 0010 	ands.w	r0, r0, #16
 8002146:	d01b      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800214a:	68e9      	ldr	r1, [r5, #12]
 800214c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800214e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002150:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002154:	430b      	orrs	r3, r1
 8002156:	6053      	str	r3, [r2, #4]
 8002158:	e012      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2700      	movs	r7, #0
 800215c:	e7d4      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	6833      	ldr	r3, [r6, #0]
 8002160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002164:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002166:	f7fe fec3 	bl	8000ef0 <HAL_GetTick>
 800216a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	6833      	ldr	r3, [r6, #0]
 800216e:	05d8      	lsls	r0, r3, #23
 8002170:	d4ce      	bmi.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe febd 	bl	8000ef0 <HAL_GetTick>
 8002176:	eba0 0008 	sub.w	r0, r0, r8
 800217a:	2864      	cmp	r0, #100	; 0x64
 800217c:	d9f6      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800217e:	2003      	movs	r0, #3
}
 8002180:	b002      	add	sp, #8
 8002182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002186:	686a      	ldr	r2, [r5, #4]
 8002188:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800218c:	429a      	cmp	r2, r3
 800218e:	d0c3      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002190:	2001      	movs	r0, #1
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002196:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002198:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80021a0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a2:	07d9      	lsls	r1, r3, #31
 80021a4:	d5b8      	bpl.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80021a6:	f7fe fea3 	bl	8000ef0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80021ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	6a23      	ldr	r3, [r4, #32]
 80021b2:	079a      	lsls	r2, r3, #30
 80021b4:	d4b0      	bmi.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe9b 	bl	8000ef0 <HAL_GetTick>
 80021ba:	1b80      	subs	r0, r0, r6
 80021bc:	4540      	cmp	r0, r8
 80021be:	d9f7      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80021c0:	e7dd      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
 80021cc:	42420440 	.word	0x42420440

080021d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	4604      	mov	r4, r0
 80021d4:	460e      	mov	r6, r1
 80021d6:	4615      	mov	r5, r2
 80021d8:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	ea36 0302 	bics.w	r3, r6, r2
 80021e2:	d001      	beq.n	80021e8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80021e4:	2000      	movs	r0, #0
 80021e6:	e02d      	b.n	8002244 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80021e8:	1c6b      	adds	r3, r5, #1
 80021ea:	d0f7      	beq.n	80021dc <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80021ec:	f7fe fe80 	bl	8000ef0 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	4285      	cmp	r5, r0
 80021f4:	d8f1      	bhi.n	80021da <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021fe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002206:	d10a      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8002208:	68a2      	ldr	r2, [r4, #8]
 800220a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800220e:	d002      	beq.n	8002216 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002210:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002214:	d103      	bne.n	800221e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800221e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002220:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002224:	d107      	bne.n	8002236 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002234:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002236:	2301      	movs	r3, #1
 8002238:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800223c:	2300      	movs	r3, #0
 800223e:	2003      	movs	r0, #3
 8002240:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002246 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002246:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	4613      	mov	r3, r2
 800224a:	460a      	mov	r2, r1
 800224c:	2180      	movs	r1, #128	; 0x80
{
 800224e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	f7ff ffbe 	bl	80021d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8002254:	b120      	cbz	r0, 8002260 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002258:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800225a:	f043 0320 	orr.w	r3, r3, #32
 800225e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8002260:	bd10      	pop	{r4, pc}

08002262 <HAL_SPI_Init>:
{
 8002262:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002264:	4604      	mov	r4, r0
 8002266:	2800      	cmp	r0, #0
 8002268:	d034      	beq.n	80022d4 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800226e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002276:	b91b      	cbnz	r3, 8002280 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002278:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800227c:	f001 fb3a 	bl	80038f4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002280:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002282:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002284:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002288:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800228a:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800228c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002290:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002292:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8002296:	4303      	orrs	r3, r0
 8002298:	68e0      	ldr	r0, [r4, #12]
 800229a:	4303      	orrs	r3, r0
 800229c:	6920      	ldr	r0, [r4, #16]
 800229e:	4303      	orrs	r3, r0
 80022a0:	6960      	ldr	r0, [r4, #20]
 80022a2:	4303      	orrs	r3, r0
 80022a4:	69e0      	ldr	r0, [r4, #28]
 80022a6:	4303      	orrs	r3, r0
 80022a8:	6a20      	ldr	r0, [r4, #32]
 80022aa:	4303      	orrs	r3, r0
 80022ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80022ae:	4303      	orrs	r3, r0
 80022b0:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022b6:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022b8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80022bc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022be:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c0:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80022ca:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022cc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80022d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
 80022d6:	e7fc      	b.n	80022d2 <HAL_SPI_Init+0x70>

080022d8 <HAL_SPI_Transmit>:
{
 80022d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80022dc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80022de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80022e2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80022e4:	2b01      	cmp	r3, #1
{
 80022e6:	460d      	mov	r5, r1
 80022e8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80022ea:	f000 809c 	beq.w	8002426 <HAL_SPI_Transmit+0x14e>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80022f4:	f7fe fdfc 	bl	8000ef0 <HAL_GetTick>
 80022f8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80022fa:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80022fe:	b2c0      	uxtb	r0, r0
 8002300:	2801      	cmp	r0, #1
 8002302:	f040 808e 	bne.w	8002422 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8002306:	2d00      	cmp	r5, #0
 8002308:	d05e      	beq.n	80023c8 <HAL_SPI_Transmit+0xf0>
 800230a:	f1b8 0f00 	cmp.w	r8, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002310:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002312:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002314:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002318:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800231c:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800231e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002322:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002324:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002326:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 800232a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002330:	bf08      	it	eq
 8002332:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002334:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8002336:	bf08      	it	eq
 8002338:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 800233c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002340:	bf08      	it	eq
 8002342:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002344:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002346:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002348:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800234a:	bf5e      	ittt	pl
 800234c:	6803      	ldrpl	r3, [r0, #0]
 800234e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002352:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002354:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	d13e      	bne.n	80023da <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235c:	b113      	cbz	r3, 8002364 <HAL_SPI_Transmit+0x8c>
 800235e:	f1b8 0f01 	cmp.w	r8, #1
 8002362:	d107      	bne.n	8002374 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002364:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002368:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800236a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800236c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800236e:	3b01      	subs	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002374:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002376:	b29b      	uxth	r3, r3
 8002378:	b9a3      	cbnz	r3, 80023a4 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800237a:	463a      	mov	r2, r7
 800237c:	4631      	mov	r1, r6
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff ff61 	bl	8002246 <SPI_EndRxTxTransaction>
 8002384:	2800      	cmp	r0, #0
 8002386:	d149      	bne.n	800241c <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002388:	68a3      	ldr	r3, [r4, #8]
 800238a:	b933      	cbnz	r3, 800239a <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	9201      	str	r2, [sp, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800239c:	3000      	adds	r0, #0
 800239e:	bf18      	it	ne
 80023a0:	2001      	movne	r0, #1
error:
 80023a2:	e011      	b.n	80023c8 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	6893      	ldr	r3, [r2, #8]
 80023a8:	0798      	lsls	r0, r3, #30
 80023aa:	d505      	bpl.n	80023b8 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ae:	f833 1b02 	ldrh.w	r1, [r3], #2
 80023b2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	6323      	str	r3, [r4, #48]	; 0x30
 80023b6:	e7d9      	b.n	800236c <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b8:	f7fe fd9a 	bl	8000ef0 <HAL_GetTick>
 80023bc:	1bc0      	subs	r0, r0, r7
 80023be:	42b0      	cmp	r0, r6
 80023c0:	d3d8      	bcc.n	8002374 <HAL_SPI_Transmit+0x9c>
 80023c2:	1c71      	adds	r1, r6, #1
 80023c4:	d0d6      	beq.n	8002374 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ce:	2300      	movs	r3, #0
 80023d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80023d4:	b002      	add	sp, #8
 80023d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023da:	b113      	cbz	r3, 80023e2 <HAL_SPI_Transmit+0x10a>
 80023dc:	f1b8 0f01 	cmp.w	r8, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023e2:	782b      	ldrb	r3, [r5, #0]
 80023e4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023e8:	3301      	adds	r3, #1
 80023ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80023ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80023f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0be      	beq.n	800237a <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	0792      	lsls	r2, r2, #30
 8002402:	d503      	bpl.n	800240c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002404:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	731a      	strb	r2, [r3, #12]
 800240a:	e7ec      	b.n	80023e6 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800240c:	f7fe fd70 	bl	8000ef0 <HAL_GetTick>
 8002410:	1bc0      	subs	r0, r0, r7
 8002412:	42b0      	cmp	r0, r6
 8002414:	d3ee      	bcc.n	80023f4 <HAL_SPI_Transmit+0x11c>
 8002416:	1c73      	adds	r3, r6, #1
 8002418:	d0ec      	beq.n	80023f4 <HAL_SPI_Transmit+0x11c>
 800241a:	e7d4      	b.n	80023c6 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800241c:	2320      	movs	r3, #32
 800241e:	6563      	str	r3, [r4, #84]	; 0x54
 8002420:	e7b2      	b.n	8002388 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8002422:	2002      	movs	r0, #2
 8002424:	e7d0      	b.n	80023c8 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8002426:	2002      	movs	r0, #2
 8002428:	e7d4      	b.n	80023d4 <HAL_SPI_Transmit+0xfc>

0800242a <HAL_SPI_TransmitReceive>:
{
 800242a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800242e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002430:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002434:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8002436:	2b01      	cmp	r3, #1
{
 8002438:	460d      	mov	r5, r1
 800243a:	4691      	mov	r9, r2
 800243c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800243e:	f000 80e2 	beq.w	8002606 <HAL_SPI_TransmitReceive+0x1dc>
 8002442:	2301      	movs	r3, #1
 8002444:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002448:	f7fe fd52 	bl	8000ef0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800244c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8002450:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002452:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002454:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8002456:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002458:	d00a      	beq.n	8002470 <HAL_SPI_TransmitReceive+0x46>
 800245a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800245e:	f040 80d0 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002462:	68a0      	ldr	r0, [r4, #8]
 8002464:	2800      	cmp	r0, #0
 8002466:	f040 80cc 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
 800246a:	2b04      	cmp	r3, #4
 800246c:	f040 80c9 	bne.w	8002602 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002470:	2d00      	cmp	r5, #0
 8002472:	f000 80c4 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
 8002476:	f1b9 0f00 	cmp.w	r9, #0
 800247a:	f000 80c0 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
 800247e:	2e00      	cmp	r6, #0
 8002480:	f000 80bd 	beq.w	80025fe <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002484:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002488:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800248c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800248e:	bf1c      	itt	ne
 8002490:	2305      	movne	r3, #5
 8002492:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002496:	2300      	movs	r3, #0
 8002498:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800249a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800249e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80024a0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80024a2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a4:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80024a6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a8:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80024aa:	bf58      	it	pl
 80024ac:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024ae:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80024b0:	bf58      	it	pl
 80024b2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80024b6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80024b8:	bf58      	it	pl
 80024ba:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024bc:	68e2      	ldr	r2, [r4, #12]
 80024be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80024c2:	d158      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c4:	b109      	cbz	r1, 80024ca <HAL_SPI_TransmitReceive+0xa0>
 80024c6:	2e01      	cmp	r6, #1
 80024c8:	d107      	bne.n	80024da <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024ce:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80024d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80024da:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b9ab      	cbnz	r3, 800250e <HAL_SPI_TransmitReceive+0xe4>
 80024e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b993      	cbnz	r3, 800250e <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e8:	4642      	mov	r2, r8
 80024ea:	4639      	mov	r1, r7
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff feaa 	bl	8002246 <SPI_EndRxTxTransaction>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	f040 8081 	bne.w	80025fa <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024f8:	68a3      	ldr	r3, [r4, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d132      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	9001      	str	r0, [sp, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	e02a      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	6893      	ldr	r3, [r2, #8]
 8002512:	0799      	lsls	r1, r3, #30
 8002514:	d50d      	bpl.n	8002532 <HAL_SPI_TransmitReceive+0x108>
 8002516:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	b153      	cbz	r3, 8002532 <HAL_SPI_TransmitReceive+0x108>
 800251c:	b14d      	cbz	r5, 8002532 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800251e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002522:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002526:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800252a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002532:	6893      	ldr	r3, [r2, #8]
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d50c      	bpl.n	8002552 <HAL_SPI_TransmitReceive+0x128>
 8002538:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	b14b      	cbz	r3, 8002552 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800253e:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002544:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002548:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800254a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800254c:	3b01      	subs	r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002552:	f7fe fccd 	bl	8000ef0 <HAL_GetTick>
 8002556:	eba0 0008 	sub.w	r0, r0, r8
 800255a:	4287      	cmp	r7, r0
 800255c:	d8be      	bhi.n	80024dc <HAL_SPI_TransmitReceive+0xb2>
 800255e:	1c7e      	adds	r6, r7, #1
 8002560:	d0bc      	beq.n	80024dc <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002562:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002564:	2301      	movs	r3, #1
 8002566:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800256a:	2300      	movs	r3, #0
 800256c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002570:	b003      	add	sp, #12
 8002572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002576:	b109      	cbz	r1, 800257c <HAL_SPI_TransmitReceive+0x152>
 8002578:	2e01      	cmp	r6, #1
 800257a:	d108      	bne.n	800258e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800257c:	782a      	ldrb	r2, [r5, #0]
 800257e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002582:	3301      	adds	r3, #1
 8002584:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002586:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002588:	3b01      	subs	r3, #1
 800258a:	b29b      	uxth	r3, r3
 800258c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800258e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002590:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002592:	b29b      	uxth	r3, r3
 8002594:	b91b      	cbnz	r3, 800259e <HAL_SPI_TransmitReceive+0x174>
 8002596:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0a4      	beq.n	80024e8 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	0798      	lsls	r0, r3, #30
 80025a4:	d50e      	bpl.n	80025c4 <HAL_SPI_TransmitReceive+0x19a>
 80025a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b15b      	cbz	r3, 80025c4 <HAL_SPI_TransmitReceive+0x19a>
 80025ac:	b155      	cbz	r5, 80025c4 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80025ae:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80025b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025b8:	3301      	adds	r3, #1
 80025ba:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80025bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	6893      	ldr	r3, [r2, #8]
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	d50d      	bpl.n	80025e8 <HAL_SPI_TransmitReceive+0x1be>
 80025cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b153      	cbz	r3, 80025e8 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80025d2:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025dc:	3301      	adds	r3, #1
 80025de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80025e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025e8:	f7fe fc82 	bl	8000ef0 <HAL_GetTick>
 80025ec:	eba0 0008 	sub.w	r0, r0, r8
 80025f0:	4287      	cmp	r7, r0
 80025f2:	d8cd      	bhi.n	8002590 <HAL_SPI_TransmitReceive+0x166>
 80025f4:	1c7b      	adds	r3, r7, #1
 80025f6:	d0cb      	beq.n	8002590 <HAL_SPI_TransmitReceive+0x166>
 80025f8:	e7b3      	b.n	8002562 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fa:	2320      	movs	r3, #32
 80025fc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	e7b0      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002602:	2002      	movs	r0, #2
 8002604:	e7ae      	b.n	8002564 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002606:	2002      	movs	r0, #2
 8002608:	e7b2      	b.n	8002570 <HAL_SPI_TransmitReceive+0x146>

0800260a <HAL_SPI_ErrorCallback>:
 800260a:	4770      	bx	lr

0800260c <HAL_SPI_IRQHandler>:
{
 800260c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800260e:	6803      	ldr	r3, [r0, #0]
{
 8002610:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002612:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002614:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002616:	0991      	lsrs	r1, r2, #6
 8002618:	f011 0601 	ands.w	r6, r1, #1
 800261c:	d10a      	bne.n	8002634 <HAL_SPI_IRQHandler+0x28>
 800261e:	f012 0f01 	tst.w	r2, #1
 8002622:	d007      	beq.n	8002634 <HAL_SPI_IRQHandler+0x28>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002624:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002628:	d004      	beq.n	8002634 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800262a:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 800262c:	b004      	add	sp, #16
 800262e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    hspi->TxISR(hspi);
 8002632:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002634:	0790      	lsls	r0, r2, #30
 8002636:	d504      	bpl.n	8002642 <HAL_SPI_IRQHandler+0x36>
 8002638:	0628      	lsls	r0, r5, #24
 800263a:	d502      	bpl.n	8002642 <HAL_SPI_IRQHandler+0x36>
    hspi->TxISR(hspi);
 800263c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800263e:	4620      	mov	r0, r4
 8002640:	e7f4      	b.n	800262c <HAL_SPI_IRQHandler+0x20>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002642:	0952      	lsrs	r2, r2, #5
 8002644:	4311      	orrs	r1, r2
 8002646:	07c9      	lsls	r1, r1, #31
 8002648:	d54c      	bpl.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800264a:	06a8      	lsls	r0, r5, #26
 800264c:	d54a      	bpl.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800264e:	b176      	cbz	r6, 800266e <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002650:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8002654:	2000      	movs	r0, #0
 8002656:	2903      	cmp	r1, #3
 8002658:	d03e      	beq.n	80026d8 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800265a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800265c:	f041 0104 	orr.w	r1, r1, #4
 8002660:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002662:	9001      	str	r0, [sp, #4]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	9101      	str	r1, [sp, #4]
 8002668:	6899      	ldr	r1, [r3, #8]
 800266a:	9101      	str	r1, [sp, #4]
 800266c:	9901      	ldr	r1, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800266e:	07d1      	lsls	r1, r2, #31
 8002670:	d50c      	bpl.n	800268c <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002672:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800267a:	2200      	movs	r2, #0
 800267c:	9203      	str	r2, [sp, #12]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	9203      	str	r2, [sp, #12]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800268e:	b34a      	cbz	r2, 80026e4 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002696:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002698:	2201      	movs	r2, #1
 800269a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800269e:	07aa      	lsls	r2, r5, #30
 80026a0:	d022      	beq.n	80026e8 <HAL_SPI_IRQHandler+0xdc>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026a2:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80026a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026a6:	f022 0203 	bic.w	r2, r2, #3
 80026aa:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80026ac:	b140      	cbz	r0, 80026c0 <HAL_SPI_IRQHandler+0xb4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_SPI_IRQHandler+0xe4>)
 80026b0:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026b2:	f7fe fed9 	bl	8001468 <HAL_DMA_Abort_IT>
 80026b6:	b118      	cbz	r0, 80026c0 <HAL_SPI_IRQHandler+0xb4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026be:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80026c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80026c2:	b178      	cbz	r0, 80026e4 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_SPI_IRQHandler+0xe4>)
 80026c6:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026c8:	f7fe fece 	bl	8001468 <HAL_DMA_Abort_IT>
 80026cc:	b150      	cbz	r0, 80026e4 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d4:	6563      	str	r3, [r4, #84]	; 0x54
 80026d6:	e005      	b.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026d8:	9002      	str	r0, [sp, #8]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	9202      	str	r2, [sp, #8]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	9302      	str	r3, [sp, #8]
 80026e2:	9b02      	ldr	r3, [sp, #8]
}
 80026e4:	b004      	add	sp, #16
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SPI_ErrorCallback(hspi);
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff ff8e 	bl	800260a <HAL_SPI_ErrorCallback>
 80026ee:	e7f9      	b.n	80026e4 <HAL_SPI_IRQHandler+0xd8>
 80026f0:	080026f5 	.word	0x080026f5

080026f4 <SPI_DMAAbortOnError>:
{
 80026f4:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80026f6:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80026fa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80026fc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80026fe:	f7ff ff84 	bl	800260a <HAL_SPI_ErrorCallback>
}
 8002702:	bd08      	pop	{r3, pc}

08002704 <HAL_SPI_GetState>:
  return hspi->State;
 8002704:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002708:	4770      	bx	lr
	...

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002710:	6803      	ldr	r3, [r0, #0]
 8002712:	68c1      	ldr	r1, [r0, #12]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	2419      	movs	r4, #25
 8002718:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800271c:	430a      	orrs	r2, r1
 800271e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002720:	6882      	ldr	r2, [r0, #8]
 8002722:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002724:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002726:	4302      	orrs	r2, r0
 8002728:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800272a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800272e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002732:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	69a9      	ldr	r1, [r5, #24]
 800273c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002740:	430a      	orrs	r2, r1
 8002742:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002744:	4a0d      	ldr	r2, [pc, #52]	; (800277c <UART_SetConfig+0x70>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d114      	bne.n	8002774 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800274a:	f7ff fcb9 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274e:	4360      	muls	r0, r4
 8002750:	686c      	ldr	r4, [r5, #4]
 8002752:	2264      	movs	r2, #100	; 0x64
 8002754:	00a4      	lsls	r4, r4, #2
 8002756:	fbb0 f0f4 	udiv	r0, r0, r4
 800275a:	fbb0 f1f2 	udiv	r1, r0, r2
 800275e:	fb02 0311 	mls	r3, r2, r1, r0
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	fbb3 f3f2 	udiv	r3, r3, r2
 800276a:	682c      	ldr	r4, [r5, #0]
 800276c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002770:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002772:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002774:	f7ff fc94 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002778:	e7e9      	b.n	800274e <UART_SetConfig+0x42>
 800277a:	bf00      	nop
 800277c:	40013800 	.word	0x40013800

08002780 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	4604      	mov	r4, r0
 8002784:	460e      	mov	r6, r1
 8002786:	4617      	mov	r7, r2
 8002788:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800278a:	6821      	ldr	r1, [r4, #0]
 800278c:	680b      	ldr	r3, [r1, #0]
 800278e:	ea36 0303 	bics.w	r3, r6, r3
 8002792:	d101      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002794:	2000      	movs	r0, #0
 8002796:	e014      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002798:	1c6b      	adds	r3, r5, #1
 800279a:	d0f7      	beq.n	800278c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800279c:	b995      	cbnz	r5, 80027c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800279e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80027a0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80027b2:	2320      	movs	r3, #32
 80027b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80027bc:	2300      	movs	r3, #0
 80027be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027c4:	f7fe fb94 	bl	8000ef0 <HAL_GetTick>
 80027c8:	1bc0      	subs	r0, r0, r7
 80027ca:	4285      	cmp	r5, r0
 80027cc:	d2dd      	bcs.n	800278a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80027ce:	e7e6      	b.n	800279e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080027d0 <HAL_UART_Init>:
{
 80027d0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027d2:	4604      	mov	r4, r0
 80027d4:	b340      	cbz	r0, 8002828 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027de:	b91b      	cbnz	r3, 80027e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80027e4:	f001 f8c8 	bl	8003978 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80027ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80027f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80027f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80027f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027fa:	f7ff ff87 	bl	800270c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800281a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800281e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002822:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002826:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
 800282a:	e7fc      	b.n	8002826 <HAL_UART_Init+0x56>

0800282c <HAL_UART_Transmit>:
{
 800282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002830:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002832:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002836:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002838:	2b20      	cmp	r3, #32
{
 800283a:	460d      	mov	r5, r1
 800283c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800283e:	d14c      	bne.n	80028da <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8002840:	2900      	cmp	r1, #0
 8002842:	d048      	beq.n	80028d6 <HAL_UART_Transmit+0xaa>
 8002844:	2a00      	cmp	r2, #0
 8002846:	d046      	beq.n	80028d6 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002848:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800284c:	2b01      	cmp	r3, #1
 800284e:	d044      	beq.n	80028da <HAL_UART_Transmit+0xae>
 8002850:	2301      	movs	r3, #1
 8002852:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285a:	2321      	movs	r3, #33	; 0x21
 800285c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002860:	f7fe fb46 	bl	8000ef0 <HAL_GetTick>
 8002864:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8002866:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800286a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800286e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	b963      	cbnz	r3, 800288e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	463b      	mov	r3, r7
 8002876:	4632      	mov	r2, r6
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff80 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002880:	b9a0      	cbnz	r0, 80028ac <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002882:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002884:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002888:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800288c:	e00f      	b.n	80028ae <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800288e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002890:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8002892:	3b01      	subs	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002898:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289a:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a0:	4620      	mov	r0, r4
 80028a2:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028a4:	d10e      	bne.n	80028c4 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	f7ff ff6b 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80028aa:	b110      	cbz	r0, 80028b2 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 80028ac:	2003      	movs	r0, #3
}
 80028ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028b2:	882b      	ldrh	r3, [r5, #0]
 80028b4:	6822      	ldr	r2, [r4, #0]
 80028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ba:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028bc:	6923      	ldr	r3, [r4, #16]
 80028be:	b943      	cbnz	r3, 80028d2 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 80028c0:	3502      	adds	r5, #2
 80028c2:	e7d4      	b.n	800286e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c4:	f7ff ff5c 	bl	8002780 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d1ef      	bne.n	80028ac <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	782a      	ldrb	r2, [r5, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	3501      	adds	r5, #1
 80028d4:	e7cb      	b.n	800286e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
 80028d8:	e7e9      	b.n	80028ae <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80028da:	2002      	movs	r0, #2
 80028dc:	e7e7      	b.n	80028ae <HAL_UART_Transmit+0x82>

080028de <SX1278_hw_SetNSS>:
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80028de:	1e4b      	subs	r3, r1, #1
 80028e0:	425a      	negs	r2, r3
 80028e2:	8a01      	ldrh	r1, [r0, #16]
 80028e4:	415a      	adcs	r2, r3
 80028e6:	6940      	ldr	r0, [r0, #20]
 80028e8:	f7fe beec 	b.w	80016c4 <HAL_GPIO_WritePin>

080028ec <SX1278_hw_init>:
__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t * hw) {
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80028f0:	2101      	movs	r1, #1
 80028f2:	f7ff fff4 	bl	80028de <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80028f6:	8821      	ldrh	r1, [r4, #0]
 80028f8:	6860      	ldr	r0, [r4, #4]
 80028fa:	2201      	movs	r2, #1
}
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8002900:	f7fe bee0 	b.w	80016c4 <HAL_GPIO_WritePin>

08002904 <SX1278_hw_SPICommand>:
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);

	SX1278_hw_DelayMs(100);
}

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8002904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002906:	4605      	mov	r5, r0
 8002908:	ac02      	add	r4, sp, #8
 800290a:	f804 1d01 	strb.w	r1, [r4, #-1]!
	SX1278_hw_SetNSS(hw, 0);
 800290e:	2100      	movs	r1, #0
 8002910:	f7ff ffe5 	bl	80028de <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	2201      	movs	r2, #1
 800291a:	4621      	mov	r1, r4
 800291c:	69a8      	ldr	r0, [r5, #24]
 800291e:	f7ff fcdb 	bl	80022d8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002922:	69a8      	ldr	r0, [r5, #24]
 8002924:	f7ff feee 	bl	8002704 <HAL_SPI_GetState>
 8002928:	2801      	cmp	r0, #1
 800292a:	d1fa      	bne.n	8002922 <SX1278_hw_SPICommand+0x1e>
		;
}
 800292c:	b003      	add	sp, #12
 800292e:	bd30      	pop	{r4, r5, pc}

08002930 <SX1278_SPIBurstWrite.part.1>:
		}
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	460d      	mov	r5, r1
 8002934:	4606      	mov	r6, r0
 8002936:	461f      	mov	r7, r3
		uint8_t length) {
	unsigned char i;
	if (length <= 1) {
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002938:	2100      	movs	r1, #0
 800293a:	6800      	ldr	r0, [r0, #0]
void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
 800293c:	4614      	mov	r4, r2
		SX1278_hw_SetNSS(module->hw, 0);
 800293e:	f7ff ffce 	bl	80028de <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002942:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 8002946:	6830      	ldr	r0, [r6, #0]
 8002948:	f7ff ffdc 	bl	8002904 <SX1278_hw_SPICommand>
 800294c:	3f01      	subs	r7, #1
 800294e:	1e65      	subs	r5, r4, #1
 8002950:	443c      	add	r4, r7
		for (i = 0; i < length; i++) {
 8002952:	42a5      	cmp	r5, r4
 8002954:	6830      	ldr	r0, [r6, #0]
 8002956:	d103      	bne.n	8002960 <SX1278_SPIBurstWrite.part.1+0x30>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002958:	2101      	movs	r1, #1
 800295a:	f7ff ffc0 	bl	80028de <SX1278_hw_SetNSS>
	}
}
 800295e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002960:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002964:	f7ff ffce 	bl	8002904 <SX1278_hw_SPICommand>
 8002968:	e7f3      	b.n	8002952 <SX1278_SPIBurstWrite.part.1+0x22>

0800296a <SX1278_hw_SPIReadByte>:
	uint8_t txByte = 0x00;
 800296a:	2100      	movs	r1, #0
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800296c:	b530      	push	{r4, r5, lr}
 800296e:	b085      	sub	sp, #20
	uint8_t rxByte = 0x00;
 8002970:	ac04      	add	r4, sp, #16
 8002972:	f804 1d01 	strb.w	r1, [r4, #-1]!
__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8002976:	4605      	mov	r5, r0
	uint8_t txByte = 0x00;
 8002978:	f88d 100e 	strb.w	r1, [sp, #14]
	SX1278_hw_SetNSS(hw, 0);
 800297c:	f7ff ffaf 	bl	80028de <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002984:	4622      	mov	r2, r4
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f10d 010e 	add.w	r1, sp, #14
 800298c:	2301      	movs	r3, #1
 800298e:	69a8      	ldr	r0, [r5, #24]
 8002990:	f7ff fd4b 	bl	800242a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002994:	69a8      	ldr	r0, [r5, #24]
 8002996:	f7ff feb5 	bl	8002704 <HAL_SPI_GetState>
 800299a:	2801      	cmp	r0, #1
 800299c:	d1fa      	bne.n	8002994 <SX1278_hw_SPIReadByte+0x2a>
}
 800299e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80029a2:	b005      	add	sp, #20
 80029a4:	bd30      	pop	{r4, r5, pc}

080029a6 <SX1278_hw_DelayMs>:
	HAL_Delay(msec);
 80029a6:	f7fe baa9 	b.w	8000efc <HAL_Delay>

080029aa <SX1278_hw_Reset>:
__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
	SX1278_hw_SetNSS(hw, 1);
 80029ae:	2101      	movs	r1, #1
 80029b0:	f7ff ff95 	bl	80028de <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80029b4:	8821      	ldrh	r1, [r4, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	6860      	ldr	r0, [r4, #4]
 80029ba:	f7fe fe83 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(1);
 80029be:	2001      	movs	r0, #1
 80029c0:	f7ff fff1 	bl	80029a6 <SX1278_hw_DelayMs>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80029c4:	6860      	ldr	r0, [r4, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	8821      	ldrh	r1, [r4, #0]
 80029ca:	f7fe fe7b 	bl	80016c4 <HAL_GPIO_WritePin>
	SX1278_hw_DelayMs(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f7ff ffe9 	bl	80029a6 <SX1278_hw_DelayMs>
}
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <SX1278_hw_GetDIO0>:
__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 80029d6:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80029d8:	8901      	ldrh	r1, [r0, #8]
 80029da:	68c0      	ldr	r0, [r0, #12]
 80029dc:	f7fe fe6c 	bl	80016b8 <HAL_GPIO_ReadPin>
}
 80029e0:	1e43      	subs	r3, r0, #1
 80029e2:	4258      	negs	r0, r3
 80029e4:	4158      	adcs	r0, r3
 80029e6:	bd08      	pop	{r3, pc}

080029e8 <SX1278_SPIRead>:
uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	4604      	mov	r4, r0
	SX1278_hw_SPICommand(module->hw, addr);
 80029ec:	6800      	ldr	r0, [r0, #0]
 80029ee:	f7ff ff89 	bl	8002904 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	f7ff ffb9 	bl	800296a <SX1278_hw_SPIReadByte>
 80029f8:	4605      	mov	r5, r0
	SX1278_hw_SetNSS(module->hw, 1);
 80029fa:	2101      	movs	r1, #1
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	f7ff ff6e 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a02:	4628      	mov	r0, r5
 8002a04:	bd38      	pop	{r3, r4, r5, pc}

08002a06 <SX1278_SPIWrite>:
void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8002a06:	b570      	push	{r4, r5, r6, lr}
 8002a08:	4604      	mov	r4, r0
 8002a0a:	460e      	mov	r6, r1
 8002a0c:	4615      	mov	r5, r2
	SX1278_hw_SetNSS(module->hw, 0);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	6800      	ldr	r0, [r0, #0]
 8002a12:	f7ff ff64 	bl	80028de <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002a16:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	f7ff ff72 	bl	8002904 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8002a20:	4629      	mov	r1, r5
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	f7ff ff6e 	bl	8002904 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002a28:	2101      	movs	r1, #1
 8002a2a:	6820      	ldr	r0, [r4, #0]
 8002a2c:	f7ff ff57 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a30:	bd70      	pop	{r4, r5, r6, pc}

08002a32 <SX1278_SPIBurstRead>:
	if (length <= 1) {
 8002a32:	2b01      	cmp	r3, #1
		uint8_t length) {
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	4605      	mov	r5, r0
 8002a38:	460f      	mov	r7, r1
 8002a3a:	4616      	mov	r6, r2
 8002a3c:	461c      	mov	r4, r3
	if (length <= 1) {
 8002a3e:	d916      	bls.n	8002a6e <SX1278_SPIBurstRead+0x3c>
		SX1278_hw_SetNSS(module->hw, 0);
 8002a40:	2100      	movs	r1, #0
 8002a42:	6800      	ldr	r0, [r0, #0]
 8002a44:	f7ff ff4b 	bl	80028de <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8002a48:	4639      	mov	r1, r7
 8002a4a:	6828      	ldr	r0, [r5, #0]
 8002a4c:	f7ff ff5a 	bl	8002904 <SX1278_hw_SPICommand>
 8002a50:	3c01      	subs	r4, #1
 8002a52:	b2e4      	uxtb	r4, r4
 8002a54:	1e77      	subs	r7, r6, #1
 8002a56:	4434      	add	r4, r6
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8002a58:	6828      	ldr	r0, [r5, #0]
 8002a5a:	f7ff ff86 	bl	800296a <SX1278_hw_SPIReadByte>
 8002a5e:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++) {
 8002a62:	42a7      	cmp	r7, r4
 8002a64:	d1f8      	bne.n	8002a58 <SX1278_SPIBurstRead+0x26>
		SX1278_hw_SetNSS(module->hw, 1);
 8002a66:	2101      	movs	r1, #1
 8002a68:	6828      	ldr	r0, [r5, #0]
 8002a6a:	f7ff ff38 	bl	80028de <SX1278_hw_SetNSS>
}
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a70 <SX1278_standby>:
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
	module->readBytes = 0;
	SX1278_standby(module); //Entry standby mode
}

void SX1278_standby(SX1278_t * module) {
 8002a70:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002a72:	2209      	movs	r2, #9
 8002a74:	2101      	movs	r1, #1
void SX1278_standby(SX1278_t * module) {
 8002a76:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002a78:	f7ff ffc5 	bl	8002a06 <SX1278_SPIWrite>
	module->status = STANDBY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	7523      	strb	r3, [r4, #20]
}
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8002a82:	b510      	push	{r4, lr}
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002a84:	2208      	movs	r2, #8
 8002a86:	2101      	movs	r1, #1
void SX1278_sleep(SX1278_t * module) {
 8002a88:	4604      	mov	r4, r0
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002a8a:	f7ff ffbc 	bl	8002a06 <SX1278_SPIWrite>
	module->status = SLEEP;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	7523      	strb	r3, [r4, #20]
}
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002a94:	2288      	movs	r2, #136	; 0x88
 8002a96:	2101      	movs	r1, #1
 8002a98:	f7ff bfb5 	b.w	8002a06 <SX1278_SPIWrite>

08002a9c <SX1278_config>:
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8002a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	4616      	mov	r6, r2
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002aa4:	f7ff ffed 	bl	8002a82 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f7ff ff7c 	bl	80029a6 <SX1278_hw_DelayMs>
	SX1278_entryLoRa(module);
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7ff fff0 	bl	8002a94 <SX1278_entryLoRa>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8002ab4:	04e9      	lsls	r1, r5, #19
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <SX1278_config+0x10c>)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	04f0      	lsls	r0, r6, #19
 8002abc:	ea41 3156 	orr.w	r1, r1, r6, lsr #13
 8002ac0:	f7fe f852 	bl	8000b68 <__aeabi_uldivmod>
	Frequency_to_device[0] = (uint8_t)(frf >> 16);
 8002ac4:	0c03      	lsrs	r3, r0, #16
 8002ac6:	f88d 3004 	strb.w	r3, [sp, #4]
	Frequency_to_device[1] = (uint8_t)(frf >> 8);
 8002aca:	0a03      	lsrs	r3, r0, #8
 8002acc:	f88d 3005 	strb.w	r3, [sp, #5]
	Frequency_to_device[2] = (uint8_t)(frf >> 0);
 8002ad0:	f88d 0006 	strb.w	r0, [sp, #6]
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	aa01      	add	r2, sp, #4
 8002ad8:	2106      	movs	r1, #6
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff ff28 	bl	8002930 <SX1278_SPIBurstWrite.part.1>
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8002ae0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <SX1278_config+0x110>)
 8002ae6:	2109      	movs	r1, #9
 8002ae8:	5cd2      	ldrb	r2, [r2, r3]
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff ff8b 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002af0:	220b      	movs	r2, #11
 8002af2:	4620      	mov	r0, r4
 8002af4:	4611      	mov	r1, r2
 8002af6:	f7ff ff86 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002afa:	2223      	movs	r2, #35	; 0x23
 8002afc:	210c      	movs	r1, #12
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff ff81 	bl	8002a06 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8002b04:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <SX1278_config+0x114>)
 8002b0a:	5cd5      	ldrb	r5, [r2, r3]
 8002b0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002b10:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <SX1278_config+0x118>)
 8002b12:	2d06      	cmp	r5, #6
 8002b14:	5cd2      	ldrb	r2, [r2, r3]
 8002b16:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	d137      	bne.n	8002b8e <SX1278_config+0xf2>
		SX1278_SPIWrite(module,
 8002b1e:	3203      	adds	r2, #3
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	211d      	movs	r1, #29
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff ff6e 	bl	8002a06 <SX1278_SPIWrite>
		SX1278_SPIWrite(module,
 8002b2a:	2267      	movs	r2, #103	; 0x67
 8002b2c:	211e      	movs	r1, #30
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff ff69 	bl	8002a06 <SX1278_SPIWrite>
		tmp = SX1278_SPIRead(module, 0x31);
 8002b34:	2131      	movs	r1, #49	; 0x31
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff ff56 	bl	80029e8 <SX1278_SPIRead>
		tmp &= 0xF8;
 8002b3c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
		SX1278_SPIWrite(module, 0x31, tmp);
 8002b40:	f042 0205 	orr.w	r2, r2, #5
 8002b44:	2131      	movs	r1, #49	; 0x31
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff ff5d 	bl	8002a06 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002b4c:	220c      	movs	r2, #12
 8002b4e:	2137      	movs	r1, #55	; 0x37
		SX1278_SPIWrite(module,
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff ff58 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002b56:	4620      	mov	r0, r4
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	211f      	movs	r1, #31
 8002b5c:	f7ff ff53 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002b60:	4620      	mov	r0, r4
 8002b62:	2200      	movs	r2, #0
 8002b64:	2120      	movs	r1, #32
 8002b66:	f7ff ff4e 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	220c      	movs	r2, #12
 8002b6e:	2121      	movs	r1, #33	; 0x21
 8002b70:	f7ff ff49 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002b74:	2201      	movs	r2, #1
 8002b76:	2141      	movs	r1, #65	; 0x41
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff ff44 	bl	8002a06 <SX1278_SPIWrite>
	module->readBytes = 0;
 8002b7e:	2300      	movs	r3, #0
	SX1278_standby(module); //Entry standby mode
 8002b80:	4620      	mov	r0, r4
	module->readBytes = 0;
 8002b82:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
	SX1278_standby(module); //Entry standby mode
 8002b86:	f7ff ff73 	bl	8002a70 <SX1278_standby>
}
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd70      	pop	{r4, r5, r6, pc}
		SX1278_SPIWrite(module,
 8002b8e:	3202      	adds	r2, #2
 8002b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b94:	211d      	movs	r1, #29
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff ff35 	bl	8002a06 <SX1278_SPIWrite>
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8002b9c:	012a      	lsls	r2, r5, #4
		SX1278_SPIWrite(module,
 8002b9e:	3207      	adds	r2, #7
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	211e      	movs	r1, #30
 8002ba4:	e7d4      	b.n	8002b50 <SX1278_config+0xb4>
 8002ba6:	bf00      	nop
 8002ba8:	01e84800 	.word	0x01e84800
 8002bac:	080087e6 	.word	0x080087e6
 8002bb0:	080087ea 	.word	0x080087ea
 8002bb4:	080087dc 	.word	0x080087dc

08002bb8 <SX1278_defaultConfig>:
void SX1278_defaultConfig(SX1278_t * module) {
 8002bb8:	b530      	push	{r4, r5, lr}
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8002bba:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
 8002bbe:	7c82      	ldrb	r2, [r0, #18]
void SX1278_defaultConfig(SX1278_t * module) {
 8002bc0:	b085      	sub	sp, #20
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8002bc2:	7c03      	ldrb	r3, [r0, #16]
 8002bc4:	9202      	str	r2, [sp, #8]
 8002bc6:	7c42      	ldrb	r2, [r0, #17]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	462b      	mov	r3, r5
 8002bce:	4622      	mov	r2, r4
 8002bd0:	f7ff ff64 	bl	8002a9c <SX1278_config>
}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bd30      	pop	{r4, r5, pc}

08002bd8 <SX1278_clearLoRaIrq>:
}

void SX1278_clearLoRaIrq(SX1278_t * module) {
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	2112      	movs	r1, #18
 8002bdc:	f7ff bf13 	b.w	8002a06 <SX1278_SPIWrite>

08002be0 <SX1278_LoRaEntryRx>:
}

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4604      	mov	r4, r0
 8002be4:	460e      	mov	r6, r1
	uint8_t addr;

	module->packetLength = length;
 8002be6:	74e1      	strb	r1, [r4, #19]
int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002be8:	4615      	mov	r5, r2

	SX1278_defaultConfig(module);		//Setting base parameter
 8002bea:	f7ff ffe5 	bl	8002bb8 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8002bee:	2284      	movs	r2, #132	; 0x84
 8002bf0:	214d      	movs	r1, #77	; 0x4d
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	f7ff ff07 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	2124      	movs	r1, #36	; 0x24
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff ff02 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8002c02:	2201      	movs	r2, #1
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7ff fefd 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	2111      	movs	r1, #17
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff fef8 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ffde 	bl	8002bd8 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	2122      	movs	r1, #34	; 0x22
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fef0 	bl	8002a06 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8002c26:	210f      	movs	r1, #15
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7ff fedd 	bl	80029e8 <SX1278_SPIRead>
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8002c2e:	210d      	movs	r1, #13
 8002c30:	4602      	mov	r2, r0
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fee7 	bl	8002a06 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8002c38:	228d      	movs	r2, #141	; 0x8d
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff fee2 	bl	8002a06 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c48:	2118      	movs	r1, #24
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f7ff fecc 	bl	80029e8 <SX1278_SPIRead>
 8002c50:	0743      	lsls	r3, r0, #29
 8002c52:	d503      	bpl.n	8002c5c <SX1278_LoRaEntryRx+0x7c>
			module->status = RX;
 8002c54:	2303      	movs	r3, #3
			return 1;
 8002c56:	2001      	movs	r0, #1
			module->status = RX;
 8002c58:	7523      	strb	r3, [r4, #20]
			SX1278_defaultConfig(module);
			return 0;
		}
		SX1278_hw_DelayMs(1);
	}
}
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
		if (--timeout == 0) {
 8002c5c:	3d01      	subs	r5, #1
 8002c5e:	d107      	bne.n	8002c70 <SX1278_LoRaEntryRx+0x90>
			SX1278_hw_Reset(module->hw);
 8002c60:	6820      	ldr	r0, [r4, #0]
 8002c62:	f7ff fea2 	bl	80029aa <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7ff ffa6 	bl	8002bb8 <SX1278_defaultConfig>
			return 0;
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	e7f4      	b.n	8002c5a <SX1278_LoRaEntryRx+0x7a>
		SX1278_hw_DelayMs(1);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7ff fe98 	bl	80029a6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8002c76:	e7e7      	b.n	8002c48 <SX1278_LoRaEntryRx+0x68>

08002c78 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t * module) {
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8002c7c:	6800      	ldr	r0, [r0, #0]
 8002c7e:	f7ff feaa 	bl	80029d6 <SX1278_hw_GetDIO0>
 8002c82:	b1f0      	cbz	r0, 8002cc2 <SX1278_LoRaRxPacket+0x4a>
	//if (1) {
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8002c84:	f104 0615 	add.w	r6, r4, #21
 8002c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f000 ff96 	bl	8003bc0 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8002c94:	2110      	movs	r1, #16
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fea6 	bl	80029e8 <SX1278_SPIRead>
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8002c9c:	210d      	movs	r1, #13
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f7ff feb0 	bl	8002a06 <SX1278_SPIWrite>

		if (module->LoRa_Rate == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8002ca6:	7c63      	ldrb	r3, [r4, #17]
 8002ca8:	b973      	cbnz	r3, 8002cc8 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8002caa:	7ce5      	ldrb	r5, [r4, #19]
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8002cac:	4620      	mov	r0, r4
 8002cae:	462b      	mov	r3, r5
 8002cb0:	4632      	mov	r2, r6
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f7ff febd 	bl	8002a32 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8002cb8:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
		SX1278_clearLoRaIrq(module);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff8b 	bl	8002bd8 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
}
 8002cc2:	f894 0115 	ldrb.w	r0, [r4, #277]	; 0x115
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8002cc8:	2113      	movs	r1, #19
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7ff fe8c 	bl	80029e8 <SX1278_SPIRead>
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	e7eb      	b.n	8002cac <SX1278_LoRaRxPacket+0x34>

08002cd4 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	4604      	mov	r4, r0
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	f89d a020 	ldrb.w	sl, [sp, #32]
 8002ce2:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8002ce6:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8002cea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
	SX1278_hw_init(module->hw);
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	f7ff fdfc 	bl	80028ec <SX1278_hw_init>
	module->frequency = frequency;
 8002cf4:	e9c4 8902 	strd	r8, r9, [r4, #8]
	module->power = power;
 8002cf8:	f884 a010 	strb.w	sl, [r4, #16]
	module->LoRa_Rate = LoRa_Rate;
 8002cfc:	7467      	strb	r7, [r4, #17]
	module->LoRa_BW = LoRa_BW;
 8002cfe:	74a6      	strb	r6, [r4, #18]
	module->packetLength = packetLength;
 8002d00:	74e5      	strb	r5, [r4, #19]
	SX1278_defaultConfig(module);
 8002d02:	4620      	mov	r0, r4
}
 8002d04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SX1278_defaultConfig(module);
 8002d08:	f7ff bf56 	b.w	8002bb8 <SX1278_defaultConfig>

08002d0c <SX1278_read>:

uint8_t SX1278_available(SX1278_t * module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	460e      	mov	r6, r1
	if (length != module->readBytes)
 8002d10:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
uint8_t SX1278_read(SX1278_t * module, uint8_t* rxBuf, uint8_t length) {
 8002d14:	4605      	mov	r5, r0
		length = module->readBytes;
	memcpy(rxBuf, module->rxBuffer, length);
 8002d16:	f100 0115 	add.w	r1, r0, #21
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	f000 ff2b 	bl	8003b78 <memcpy>
	rxBuf[length] = '\0';
 8002d22:	2300      	movs	r3, #0
	module->readBytes = 0;
	return length;
}
 8002d24:	4620      	mov	r0, r4
	rxBuf[length] = '\0';
 8002d26:	5533      	strb	r3, [r6, r4]
	module->readBytes = 0;
 8002d28:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d30 <HAL_GPIO_EXTI_Callback>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == DO_RF_Pin){
 8002d30:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8002d34:	b508      	push	{r3, lr}
	if(GPIO_Pin == DO_RF_Pin){
 8002d36:	d114      	bne.n	8002d62 <HAL_GPIO_EXTI_Callback+0x32>
			ret = SX1278_LoRaRxPacket(&SX1278);
 8002d38:	480a      	ldr	r0, [pc, #40]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x34>)
 8002d3a:	f7ff ff9d 	bl	8002c78 <SX1278_LoRaRxPacket>
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x38>)
 8002d40:	4602      	mov	r2, r0
 8002d42:	6018      	str	r0, [r3, #0]
				 	if (ret > 0) {
 8002d44:	b130      	cbz	r0, 8002d54 <HAL_GPIO_EXTI_Callback+0x24>
				 		SX1278_read(&SX1278, (uint8_t *) buffer, ret);
 8002d46:	4909      	ldr	r1, [pc, #36]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002d48:	4806      	ldr	r0, [pc, #24]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x34>)
 8002d4a:	f7ff ffdf 	bl	8002d0c <SX1278_read>
					 	//printf("Zawartość pakietu (%d): %s\r\n", ret, buffer);
					 	flag_new_position = 1;
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x40>)
 8002d52:	601a      	str	r2, [r3, #0]
				 	}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		}
}
 8002d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				 	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002d5c:	4805      	ldr	r0, [pc, #20]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x44>)
 8002d5e:	f7fe bcb6 	b.w	80016ce <HAL_GPIO_TogglePin>
}
 8002d62:	bd08      	pop	{r3, pc}
 8002d64:	20000788 	.word	0x20000788
 8002d68:	200008a0 	.word	0x200008a0
 8002d6c:	200006ac 	.word	0x200006ac
 8002d70:	20000204 	.word	0x20000204
 8002d74:	40011000 	.word	0x40011000

08002d78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback( ADC_HandleTypeDef *hadc){
 8002d78:	b508      	push	{r3, lr}
	if(hadc == &hadc1){
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_ADC_ConvCpltCallback+0x18>)
 8002d7c:	4283      	cmp	r3, r0
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConvCpltCallback+0x16>
		adc_flag = 1;
 8002d80:	2201      	movs	r2, #1
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002d84:	601a      	str	r2, [r3, #0]
		adc_value = HAL_ADC_GetValue(hadc);
 8002d86:	f7fe f8cb 	bl	8000f20 <HAL_ADC_GetValue>
 8002d8a:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_ADC_ConvCpltCallback+0x20>)
 8002d8c:	6018      	str	r0, [r3, #0]
	}
}
 8002d8e:	bd08      	pop	{r3, pc}
 8002d90:	2000067c 	.word	0x2000067c
 8002d94:	20000674 	.word	0x20000674
 8002d98:	20000678 	.word	0x20000678

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d9e:	2414      	movs	r4, #20
{
 8002da0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	4622      	mov	r2, r4
 8002da4:	2100      	movs	r1, #0
 8002da6:	a80c      	add	r0, sp, #48	; 0x30
 8002da8:	f000 ff0a 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dac:	4622      	mov	r2, r4
 8002dae:	eb0d 0004 	add.w	r0, sp, r4
 8002db2:	2100      	movs	r1, #0
 8002db4:	f000 ff04 	bl	8003bc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db8:	2100      	movs	r1, #0
 8002dba:	2210      	movs	r2, #16
 8002dbc:	a801      	add	r0, sp, #4
 8002dbe:	f000 feff 	bl	8003bc0 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dce:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002dd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd8:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002dda:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ddc:	f7fe feec 	bl	8001bb8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dea:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dec:	4621      	mov	r1, r4
 8002dee:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002df0:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002df4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002df6:	f7ff f8b7 	bl	8001f68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dfe:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e00:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e02:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e04:	f7ff f96c 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002e08:	b014      	add	sp, #80	; 0x50
 8002e0a:	bd10      	pop	{r4, pc}

08002e0c <Beep>:
        HAL_Delay(time);
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
}

void Beep(int time_delay){
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002e10:	4c07      	ldr	r4, [pc, #28]	; (8002e30 <Beep+0x24>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	2102      	movs	r1, #2
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7fe fc54 	bl	80016c4 <HAL_GPIO_WritePin>
	HAL_Delay(time_delay);
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7fe f86d 	bl	8000efc <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e22:	4620      	mov	r0, r4
}
 8002e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	f7fe bc4a 	b.w	80016c4 <HAL_GPIO_WritePin>
 8002e30:	40010800 	.word	0x40010800

08002e34 <_write>:

int _write(int file, char *ptr, int len){
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 50);
 8002e38:	2332      	movs	r3, #50	; 0x32
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <_write+0x14>)
 8002e3e:	f7ff fcf5 	bl	800282c <HAL_UART_Transmit>
    return len;
}
 8002e42:	4620      	mov	r0, r4
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	bf00      	nop
 8002e48:	20000744 	.word	0x20000744

08002e4c <writeUART>:

int writeUART(float latitude, float longitude, float altitude, float velocity){
 8002e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	4617      	mov	r7, r2
 8002e54:	4698      	mov	r8, r3
 8002e56:	460e      	mov	r6, r1
    return printf("%f/%f/%f/%f\n\r", latitude, longitude, altitude, velocity);
 8002e58:	f7fd fae6 	bl	8000428 <__aeabi_f2d>
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	4640      	mov	r0, r8
 8002e60:	460d      	mov	r5, r1
 8002e62:	f7fd fae1 	bl	8000428 <__aeabi_f2d>
 8002e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	f7fd fadc 	bl	8000428 <__aeabi_f2d>
 8002e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e74:	4630      	mov	r0, r6
 8002e76:	f7fd fad7 	bl	8000428 <__aeabi_f2d>
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e80:	462b      	mov	r3, r5
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <writeUART+0x44>)
 8002e84:	f001 fcd4 	bl	8004830 <iprintf>
}
 8002e88:	b006      	add	sp, #24
 8002e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e8e:	bf00      	nop
 8002e90:	08008811 	.word	0x08008811
 8002e94:	00000000 	.word	0x00000000

08002e98 <main>:
{
 8002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9c:	b09b      	sub	sp, #108	; 0x6c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9e:	ae16      	add	r6, sp, #88	; 0x58
  HAL_Init();
 8002ea0:	f7fe f808 	bl	8000eb4 <HAL_Init>
  SystemClock_Config();
 8002ea4:	f7ff ff7a 	bl	8002d9c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 fe87 	bl	8003bc0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4bc7      	ldr	r3, [pc, #796]	; (80031d0 <main+0x338>)
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002eb4:	f8df b368 	ldr.w	fp, [pc, #872]	; 8003220 <main+0x388>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002eba:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8003224 <main+0x38c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	f042 0210 	orr.w	r2, r2, #16
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	f002 0210 	and.w	r2, r2, #16
 8002ece:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ed4:	48bf      	ldr	r0, [pc, #764]	; (80031d4 <main+0x33c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ede:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee0:	f002 0220 	and.w	r2, r2, #32
 8002ee4:	920c      	str	r2, [sp, #48]	; 0x30
 8002ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eea:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
 8002ef4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	f002 0204 	and.w	r2, r2, #4
 8002efe:	920d      	str	r2, [sp, #52]	; 0x34
 8002f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 8002f04:	4fb4      	ldr	r7, [pc, #720]	; (80031d8 <main+0x340>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f0e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	930e      	str	r3, [sp, #56]	; 0x38
 8002f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f18:	f7fe fbd4 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|CS_RF_Pin, GPIO_PIN_RESET);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002f22:	4658      	mov	r0, fp
 8002f24:	f7fe fbce 	bl	80016c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_RF_Pin|D_C_Pin, GPIO_PIN_RESET);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4648      	mov	r0, r9
 8002f2c:	2181      	movs	r1, #129	; 0x81
 8002f2e:	f7fe fbc9 	bl	80016c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f36:	4631      	mov	r1, r6
 8002f38:	48a6      	ldr	r0, [pc, #664]	; (80031d4 <main+0x33c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f42:	f7fe fad9 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUZZER_Pin|CS_RF_Pin;
 8002f46:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4e:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	f7fe facf 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_RF_Pin|D_C_Pin;
 8002f5a:	2381      	movs	r3, #129	; 0x81
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	4648      	mov	r0, r9
 8002f5e:	4631      	mov	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	e9cd 4a18 	strd	r4, sl, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f7fe fac6 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_RF_Pin;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f70:	4a9a      	ldr	r2, [pc, #616]	; (80031dc <main+0x344>)
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8002f72:	4648      	mov	r0, r9
 8002f74:	4631      	mov	r1, r6
  GPIO_InitStruct.Pin = DO_RF_Pin;
 8002f76:	9316      	str	r3, [sp, #88]	; 0x58
 8002f78:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f7a:	e9cd 2a17 	strd	r2, sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	f7fe fabb 	bl	80014f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FIRE_Pin;
 8002f82:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002f84:	4648      	mov	r0, r9
 8002f86:	4631      	mov	r1, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(FIRE_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	f7fe fab3 	bl	80014f8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f92:	4621      	mov	r1, r4
 8002f94:	4622      	mov	r2, r4
 8002f96:	2028      	movs	r0, #40	; 0x28
 8002f98:	f7fe fa0e 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f9c:	2028      	movs	r0, #40	; 0x28
 8002f9e:	f7fe fa3f 	bl	8001420 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002fa2:	4a8f      	ldr	r2, [pc, #572]	; (80031e0 <main+0x348>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fa4:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 8002fa6:	603a      	str	r2, [r7, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fa8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fac:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fae:	61fa      	str	r2, [r7, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fb0:	733c      	strb	r4, [r7, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fb2:	753c      	strb	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fb4:	607c      	str	r4, [r7, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002fb6:	f8c7 8010 	str.w	r8, [r7, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fba:	9416      	str	r4, [sp, #88]	; 0x58
 8002fbc:	e9c6 4401 	strd	r4, r4, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fc0:	f7fe f966 	bl	8001290 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002fc4:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fca:	e9cd 4816 	strd	r4, r8, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002fce:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fd0:	f7fe f820 	bl	8001014 <HAL_ADC_ConfigChannel>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Instance = SPI1;
 8002fd8:	4d82      	ldr	r5, [pc, #520]	; (80031e4 <main+0x34c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fda:	4b83      	ldr	r3, [pc, #524]	; (80031e8 <main+0x350>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002fe0:	e9c5 3200 	strd	r3, r2, [r5]
  hspi1.Init.CRCPolynomial = 10;
 8002fe4:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002fe6:	2208      	movs	r2, #8
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe8:	4628      	mov	r0, r5
  hspi1.Init.CRCPolynomial = 10;
 8002fea:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002fec:	e9c5 1206 	strd	r1, r2, [r5, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff0:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ff8:	e9c5 4408 	strd	r4, r4, [r5, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ffc:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ffe:	f7ff f930 	bl	8002262 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 8003002:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003006:	f8df c220 	ldr.w	ip, [pc, #544]	; 8003228 <main+0x390>
  huart2.Instance = USART2;
 800300a:	4878      	ldr	r0, [pc, #480]	; (80031ec <main+0x354>)
  huart2.Init.BaudRate = 115200;
 800300c:	e9c0 c200 	strd	ip, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003010:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003012:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	e9c0 2405 	strd	r2, r4, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800301a:	6104      	str	r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800301e:	f7ff fbd7 	bl	80027d0 <HAL_UART_Init>
  hi2c2.Init.ClockSpeed = 100000;
 8003022:	f8df e208 	ldr.w	lr, [pc, #520]	; 800322c <main+0x394>
  hi2c2.Instance = I2C2;
 8003026:	4872      	ldr	r0, [pc, #456]	; (80031f0 <main+0x358>)
  hi2c2.Init.ClockSpeed = 100000;
 8003028:	4a72      	ldr	r2, [pc, #456]	; (80031f4 <main+0x35c>)
  hi2c2.Init.OwnAddress1 = 0;
 800302a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 100000;
 800302e:	e9c0 e200 	strd	lr, r2, [r0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003036:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800303a:	e9c0 2404 	strd	r2, r4, [r0, #16]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800303e:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003040:	f7fe fc76 	bl	8001930 <HAL_I2C_Init>
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003044:	4621      	mov	r1, r4
 8003046:	4622      	mov	r2, r4
 8003048:	2023      	movs	r0, #35	; 0x23
 800304a:	f7fe f9b5 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800304e:	2023      	movs	r0, #35	; 0x23
 8003050:	f7fe f9e6 	bl	8001420 <HAL_NVIC_EnableIRQ>
  HAL_ADC_Start_IT(&hadc1);
 8003054:	4638      	mov	r0, r7
 8003056:	f7fe f893 	bl	8001180 <HAL_ADC_Start_IT>
  ssd1306_Init();
 800305a:	f000 fa39 	bl	80034d0 <ssd1306_Init>
  HAL_Delay(100);
 800305e:	2064      	movs	r0, #100	; 0x64
 8003060:	f7fd ff4c 	bl	8000efc <HAL_Delay>
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 8003064:	4a64      	ldr	r2, [pc, #400]	; (80031f8 <main+0x360>)
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8003066:	9b05      	ldr	r3, [sp, #20]
	SX1278_hw.reset.pin = RST_RF_Pin;
 8003068:	e9c2 8900 	strd	r8, r9, [r2]
	SX1278_hw.dio0.pin = DO_RF_Pin;
 800306c:	6093      	str	r3, [r2, #8]
	SX1278_hw.nss.pin = CS_RF_Pin;
 800306e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8003072:	f04f 080a 	mov.w	r8, #10
	SX1278_hw.nss.pin = CS_RF_Pin;
 8003076:	6113      	str	r3, [r2, #16]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8003078:	2307      	movs	r3, #7
	SX1278_hw.spi = &hspi1;
 800307a:	6195      	str	r5, [r2, #24]
	SX1278.hw = &SX1278_hw;
 800307c:	4d5f      	ldr	r5, [pc, #380]	; (80031fc <main+0x364>)
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 800307e:	f8c2 900c 	str.w	r9, [r2, #12]
	SX1278.hw = &SX1278_hw;
 8003082:	602a      	str	r2, [r5, #0]
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 8003084:	f8c2 b014 	str.w	fp, [r2, #20]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8003088:	4628      	mov	r0, r5
 800308a:	e9cd 3802 	strd	r3, r8, [sp, #8]
 800308e:	a34a      	add	r3, pc, #296	; (adr r3, 80031b8 <main+0x320>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
			  V_Bat = adc_value * (3.3/4096) *4.03;
 8003094:	f20f 1928 	addw	r9, pc, #296	; 0x128
 8003098:	e9d9 8900 	ldrd	r8, r9, [r9]
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 800309c:	e9cd 4a00 	strd	r4, sl, [sp]
 80030a0:	f7ff fe18 	bl	8002cd4 <SX1278_begin>
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030a8:	2110      	movs	r1, #16
 80030aa:	4628      	mov	r0, r5
			  V_Bat = adc_value * (3.3/4096) *4.03;
 80030ac:	a546      	add	r5, pc, #280	; (adr r5, 80031c8 <main+0x330>)
 80030ae:	e9d5 4500 	ldrd	r4, r5, [r5]
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030b2:	f7ff fd95 	bl	8002be0 <SX1278_LoRaEntryRx>
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030b6:	4a52      	ldr	r2, [pc, #328]	; (8003200 <main+0x368>)
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030b8:	4b52      	ldr	r3, [pc, #328]	; (8003204 <main+0x36c>)
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030ba:	6851      	ldr	r1, [r2, #4]
	ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80030bc:	6018      	str	r0, [r3, #0]
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030be:	6810      	ldr	r0, [r2, #0]
 80030c0:	ab13      	add	r3, sp, #76	; 0x4c
 80030c2:	c303      	stmia	r3!, {r0, r1}
 80030c4:	7a12      	ldrb	r2, [r2, #8]
		if(flag_new_position){
 80030c6:	4f50      	ldr	r7, [pc, #320]	; (8003208 <main+0x370>)
	char str_lat[]="00000000", str_lon[]= "00000000", str_alt[]= "000000", str_vel[]= "0000";
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	4633      	mov	r3, r6
 80030cc:	c303      	stmia	r3!, {r0, r1}
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	4b4e      	ldr	r3, [pc, #312]	; (800320c <main+0x374>)
 80030d2:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	889a      	ldrh	r2, [r3, #4]
 80030da:	799b      	ldrb	r3, [r3, #6]
 80030dc:	9011      	str	r0, [sp, #68]	; 0x44
 80030de:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 80030e2:	4b4b      	ldr	r3, [pc, #300]	; (8003210 <main+0x378>)
 80030e4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	900f      	str	r0, [sp, #60]	; 0x3c
 80030ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		if(flag_new_position){
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d058      	beq.n	80031aa <main+0x312>
				str_lat[c] = buffer[position + c - 1];
 80030f8:	4b46      	ldr	r3, [pc, #280]	; (8003214 <main+0x37c>)
			flag_new_position = 0;
 80030fa:	2200      	movs	r2, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	603a      	str	r2, [r7, #0]
				str_lat[c] = buffer[position + c - 1];
 8003100:	18d1      	adds	r1, r2, r3
 8003102:	7889      	ldrb	r1, [r1, #2]
 8003104:	f80a 1002 	strb.w	r1, [sl, r2]
				c++;
 8003108:	3201      	adds	r2, #1
			while (c < length) {
 800310a:	2a08      	cmp	r2, #8
 800310c:	d1f8      	bne.n	8003100 <main+0x268>
			str_lat[c] = '\0';
 800310e:	2200      	movs	r2, #0
 8003110:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
				str_lon[c] = buffer[position + c - 1];
 8003114:	1881      	adds	r1, r0, r2
 8003116:	7ac9      	ldrb	r1, [r1, #11]
 8003118:	54b1      	strb	r1, [r6, r2]
				c++;
 800311a:	3201      	adds	r2, #1
			while (c < length) {
 800311c:	2a08      	cmp	r2, #8
 800311e:	d1f9      	bne.n	8003114 <main+0x27c>
			str_lon[c] = '\0';
 8003120:	2200      	movs	r2, #0
				str_alt[c] = buffer[position + c - 1];
 8003122:	7d19      	ldrb	r1, [r3, #20]
			str_lon[c] = '\0';
 8003124:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				str_alt[c] = buffer[position + c - 1];
 8003128:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
 800312c:	7d59      	ldrb	r1, [r3, #21]
			str_alt[c] = '\0';
 800312e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
				str_alt[c] = buffer[position + c - 1];
 8003132:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8003136:	7d99      	ldrb	r1, [r3, #22]
			str_vel[c] = '\0';
 8003138:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				str_alt[c] = buffer[position + c - 1];
 800313c:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
 8003140:	7dd9      	ldrb	r1, [r3, #23]
			sscanf(str_lat,"%f",&lat);
 8003142:	aa07      	add	r2, sp, #28
				str_alt[c] = buffer[position + c - 1];
 8003144:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
 8003148:	7e19      	ldrb	r1, [r3, #24]
			sscanf(str_lat,"%f",&lat);
 800314a:	4650      	mov	r0, sl
				str_alt[c] = buffer[position + c - 1];
 800314c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				str_vel[c] = buffer[position + c - 1];
 8003150:	7e99      	ldrb	r1, [r3, #26]
 8003152:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8003156:	7ed9      	ldrb	r1, [r3, #27]
 8003158:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800315c:	7f19      	ldrb	r1, [r3, #28]
 800315e:	7f5b      	ldrb	r3, [r3, #29]
 8003160:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
			sscanf(str_lat,"%f",&lat);
 8003164:	492c      	ldr	r1, [pc, #176]	; (8003218 <main+0x380>)
				str_vel[c] = buffer[position + c - 1];
 8003166:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			sscanf(str_lat,"%f",&lat);
 800316a:	f001 fb9d 	bl	80048a8 <siscanf>
			sscanf(str_lon,"%f",&lon);
 800316e:	aa08      	add	r2, sp, #32
 8003170:	4929      	ldr	r1, [pc, #164]	; (8003218 <main+0x380>)
 8003172:	4630      	mov	r0, r6
 8003174:	f001 fb98 	bl	80048a8 <siscanf>
			sscanf(str_alt,"%f",&alt);
 8003178:	aa09      	add	r2, sp, #36	; 0x24
 800317a:	4927      	ldr	r1, [pc, #156]	; (8003218 <main+0x380>)
 800317c:	a811      	add	r0, sp, #68	; 0x44
 800317e:	f001 fb93 	bl	80048a8 <siscanf>
			sscanf(str_vel,"%f",&vel);
 8003182:	aa0a      	add	r2, sp, #40	; 0x28
 8003184:	4924      	ldr	r1, [pc, #144]	; (8003218 <main+0x380>)
 8003186:	a80f      	add	r0, sp, #60	; 0x3c
 8003188:	f001 fb8e 	bl	80048a8 <siscanf>
			ssd1306_Print(lat, lon, alt, vel);
 800318c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800318e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003190:	9908      	ldr	r1, [sp, #32]
 8003192:	9807      	ldr	r0, [sp, #28]
 8003194:	f000 fa88 	bl	80036a8 <ssd1306_Print>
			writeUART(lat, lon, alt, vel);
 8003198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800319a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800319c:	9908      	ldr	r1, [sp, #32]
 800319e:	9807      	ldr	r0, [sp, #28]
 80031a0:	f7ff fe54 	bl	8002e4c <writeUART>
			Beep(2);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f7ff fe31 	bl	8002e0c <Beep>
		  if (adc_flag == 1 ){
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <main+0x384>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2a01      	cmp	r2, #1
 80031b0:	d15b      	bne.n	800326a <main+0x3d2>
 80031b2:	e03d      	b.n	8003230 <main+0x398>
 80031b4:	f3af 8000 	nop.w
 80031b8:	33bca100 	.word	0x33bca100
 80031bc:	00000000 	.word	0x00000000
 80031c0:	51eb851f 	.word	0x51eb851f
 80031c4:	40101eb8 	.word	0x40101eb8
 80031c8:	66666666 	.word	0x66666666
 80031cc:	3f4a6666 	.word	0x3f4a6666
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40011000 	.word	0x40011000
 80031d8:	2000067c 	.word	0x2000067c
 80031dc:	10110000 	.word	0x10110000
 80031e0:	40012400 	.word	0x40012400
 80031e4:	200006ec 	.word	0x200006ec
 80031e8:	40013000 	.word	0x40013000
 80031ec:	20000744 	.word	0x20000744
 80031f0:	20000620 	.word	0x20000620
 80031f4:	000186a0 	.word	0x000186a0
 80031f8:	200008a4 	.word	0x200008a4
 80031fc:	20000788 	.word	0x20000788
 8003200:	08008808 	.word	0x08008808
 8003204:	200008a0 	.word	0x200008a0
 8003208:	20000204 	.word	0x20000204
 800320c:	0800880a 	.word	0x0800880a
 8003210:	0800880c 	.word	0x0800880c
 8003214:	200006ac 	.word	0x200006ac
 8003218:	080087f1 	.word	0x080087f1
 800321c:	20000674 	.word	0x20000674
 8003220:	40010800 	.word	0x40010800
 8003224:	40010c00 	.word	0x40010c00
 8003228:	40004400 	.word	0x40004400
 800322c:	40005800 	.word	0x40005800
			  adc_flag=0;
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
			  V_Bat = adc_value * (3.3/4096) *4.03;
 8003234:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <main+0x3dc>)
 8003236:	f8d3 b000 	ldr.w	fp, [r3]
 800323a:	4658      	mov	r0, fp
 800323c:	f7fd f8e2 	bl	8000404 <__aeabi_i2d>
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	f7fd f948 	bl	80004d8 <__aeabi_dmul>
 8003248:	4642      	mov	r2, r8
 800324a:	464b      	mov	r3, r9
 800324c:	f7fd f944 	bl	80004d8 <__aeabi_dmul>
 8003250:	f7fd fc3a 	bl	8000ac8 <__aeabi_d2f>
			  printf("ADC: %d V_bat: %f\r\n", adc_value, V_Bat);
 8003254:	f7fd f8e8 	bl	8000428 <__aeabi_f2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4806      	ldr	r0, [pc, #24]	; (8003278 <main+0x3e0>)
 800325e:	4659      	mov	r1, fp
 8003260:	f001 fae6 	bl	8004830 <iprintf>
			  HAL_ADC_Start_IT(&hadc1);
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <main+0x3e4>)
 8003266:	f7fd ff8b 	bl	8001180 <HAL_ADC_Start_IT>
		HAL_Delay(100);
 800326a:	2064      	movs	r0, #100	; 0x64
 800326c:	f7fd fe46 	bl	8000efc <HAL_Delay>
		if(flag_new_position){
 8003270:	e73f      	b.n	80030f2 <main+0x25a>
 8003272:	bf00      	nop
 8003274:	20000678 	.word	0x20000678
 8003278:	080087f4 	.word	0x080087f4
 800327c:	2000067c 	.word	0x2000067c

08003280 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8003280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003284:	461c      	mov	r4, r3
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8003286:	2c0a      	cmp	r4, #10
{
 8003288:	4692      	mov	sl, r2
 800328a:	4607      	mov	r7, r0
 800328c:	460e      	mov	r6, r1
		precision = MAX_PRECISION;

	// sign stuff
	if (f < 0)
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
	if (precision > MAX_PRECISION)
 8003296:	f300 80b1 	bgt.w	80033fc <ftoa+0x17c>
	if (f < 0)
 800329a:	f7fd fb8f 	bl	80009bc <__aeabi_dcmplt>
 800329e:	2800      	cmp	r0, #0
 80032a0:	d063      	beq.n	800336a <ftoa+0xea>
	{
		f = -f;
		*ptr++ = '-';
 80032a2:	232d      	movs	r3, #45	; 0x2d
		f = -f;
 80032a4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
		*ptr++ = '-';
 80032a8:	f10a 0801 	add.w	r8, sl, #1
 80032ac:	f88a 3000 	strb.w	r3, [sl]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80032b0:	2c00      	cmp	r4, #0
 80032b2:	da5c      	bge.n	800336e <ftoa+0xee>
	{
		if (f < 1.0) precision = 6;
 80032b4:	2200      	movs	r2, #0
 80032b6:	4b5a      	ldr	r3, [pc, #360]	; (8003420 <ftoa+0x1a0>)
 80032b8:	4638      	mov	r0, r7
 80032ba:	4631      	mov	r1, r6
 80032bc:	f7fd fb7e 	bl	80009bc <__aeabi_dcmplt>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d161      	bne.n	8003388 <ftoa+0x108>
		else if (f < 10.0) precision = 5;
 80032c4:	2200      	movs	r2, #0
 80032c6:	4b57      	ldr	r3, [pc, #348]	; (8003424 <ftoa+0x1a4>)
 80032c8:	4638      	mov	r0, r7
 80032ca:	4631      	mov	r1, r6
 80032cc:	f7fd fb76 	bl	80009bc <__aeabi_dcmplt>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d15b      	bne.n	800338c <ftoa+0x10c>
		else if (f < 100.0) precision = 4;
 80032d4:	2200      	movs	r2, #0
 80032d6:	4b54      	ldr	r3, [pc, #336]	; (8003428 <ftoa+0x1a8>)
 80032d8:	4638      	mov	r0, r7
 80032da:	4631      	mov	r1, r6
 80032dc:	f7fd fb6e 	bl	80009bc <__aeabi_dcmplt>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d155      	bne.n	8003390 <ftoa+0x110>
		else if (f < 1000.0) precision = 3;
 80032e4:	2200      	movs	r2, #0
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <ftoa+0x1ac>)
 80032e8:	4638      	mov	r0, r7
 80032ea:	4631      	mov	r1, r6
 80032ec:	f7fd fb66 	bl	80009bc <__aeabi_dcmplt>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d14f      	bne.n	8003394 <ftoa+0x114>
		else if (f < 10000.0) precision = 2;
 80032f4:	a346      	add	r3, pc, #280	; (adr r3, 8003410 <ftoa+0x190>)
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	4638      	mov	r0, r7
 80032fc:	4631      	mov	r1, r6
 80032fe:	f7fd fb5d 	bl	80009bc <__aeabi_dcmplt>
 8003302:	2800      	cmp	r0, #0
 8003304:	d148      	bne.n	8003398 <ftoa+0x118>
		else if (f < 100000.0) precision = 1;
 8003306:	a344      	add	r3, pc, #272	; (adr r3, 8003418 <ftoa+0x198>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	4638      	mov	r0, r7
 800330e:	4631      	mov	r1, r6
 8003310:	f7fd fb54 	bl	80009bc <__aeabi_dcmplt>
 8003314:	2800      	cmp	r0, #0
 8003316:	d141      	bne.n	800339c <ftoa+0x11c>
		else precision = 0;
 8003318:	4604      	mov	r4, r0
	// round value according the precision
	if (precision)
		f += rounders[precision];

	// integer part...
	intPart = f;
 800331a:	4638      	mov	r0, r7
 800331c:	4631      	mov	r1, r6
 800331e:	f7fd fb8b 	bl	8000a38 <__aeabi_d2iz>
	f -= intPart;

	if (!intPart)
 8003322:	2800      	cmp	r0, #0
 8003324:	d13c      	bne.n	80033a0 <ftoa+0x120>
		*ptr++ = '0';
 8003326:	2330      	movs	r3, #48	; 0x30
 8003328:	f108 0501 	add.w	r5, r8, #1
 800332c:	f888 3000 	strb.w	r3, [r8]
		// restore end pos
		ptr = p1;
	}

	// decimal part
	if (precision)
 8003330:	b19c      	cbz	r4, 800335a <ftoa+0xda>
	f -= intPart;
 8003332:	f7fd f867 	bl	8000404 <__aeabi_i2d>
 8003336:	460b      	mov	r3, r1
 8003338:	4602      	mov	r2, r0
 800333a:	4631      	mov	r1, r6
 800333c:	4638      	mov	r0, r7
 800333e:	f7fc ff13 	bl	8000168 <__aeabi_dsub>
	{
		// place decimal point
		*ptr++ = '.';
 8003342:	232e      	movs	r3, #46	; 0x2e
 8003344:	46ab      	mov	fp, r5

		// convert
		while (precision--)
		{
			f *= 10.0;
 8003346:	2600      	movs	r6, #0
		*ptr++ = '.';
 8003348:	702b      	strb	r3, [r5, #0]
			f *= 10.0;
 800334a:	4f36      	ldr	r7, [pc, #216]	; (8003424 <ftoa+0x1a4>)
 800334c:	192b      	adds	r3, r5, r4
 800334e:	9301      	str	r3, [sp, #4]
		while (precision--)
 8003350:	9b01      	ldr	r3, [sp, #4]
 8003352:	455b      	cmp	r3, fp
 8003354:	d13c      	bne.n	80033d0 <ftoa+0x150>
 8003356:	3401      	adds	r4, #1
 8003358:	4425      	add	r5, r4
			f -= c;
		}
	}

	// terminating zero
	*ptr = 0;
 800335a:	2300      	movs	r3, #0

	return buf;
}
 800335c:	4650      	mov	r0, sl
	*ptr = 0;
 800335e:	702b      	strb	r3, [r5, #0]
}
 8003360:	b003      	add	sp, #12
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		precision = MAX_PRECISION;
 8003366:	240a      	movs	r4, #10
 8003368:	e79b      	b.n	80032a2 <ftoa+0x22>
 800336a:	46d0      	mov	r8, sl
 800336c:	e7a0      	b.n	80032b0 <ftoa+0x30>
	if (precision)
 800336e:	d0d4      	beq.n	800331a <ftoa+0x9a>
		f += rounders[precision];
 8003370:	4b2f      	ldr	r3, [pc, #188]	; (8003430 <ftoa+0x1b0>)
 8003372:	4638      	mov	r0, r7
 8003374:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003378:	4631      	mov	r1, r6
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fc fef5 	bl	800016c <__adddf3>
 8003382:	4607      	mov	r7, r0
 8003384:	460e      	mov	r6, r1
 8003386:	e7c8      	b.n	800331a <ftoa+0x9a>
		if (f < 1.0) precision = 6;
 8003388:	2406      	movs	r4, #6
 800338a:	e7f1      	b.n	8003370 <ftoa+0xf0>
		else if (f < 10.0) precision = 5;
 800338c:	2405      	movs	r4, #5
 800338e:	e7ef      	b.n	8003370 <ftoa+0xf0>
		else if (f < 100.0) precision = 4;
 8003390:	2404      	movs	r4, #4
 8003392:	e7ed      	b.n	8003370 <ftoa+0xf0>
		else if (f < 1000.0) precision = 3;
 8003394:	2403      	movs	r4, #3
 8003396:	e7eb      	b.n	8003370 <ftoa+0xf0>
		else if (f < 10000.0) precision = 2;
 8003398:	2402      	movs	r4, #2
 800339a:	e7e9      	b.n	8003370 <ftoa+0xf0>
		else if (f < 100000.0) precision = 1;
 800339c:	2401      	movs	r4, #1
 800339e:	e7e7      	b.n	8003370 <ftoa+0xf0>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4645      	mov	r5, r8
			*p++ = '0' + intPart % 10;
 80033a4:	210a      	movs	r1, #10
 80033a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80033aa:	fb01 3312 	mls	r3, r1, r2, r3
 80033ae:	3330      	adds	r3, #48	; 0x30
 80033b0:	f805 3b01 	strb.w	r3, [r5], #1
		while (intPart)
 80033b4:	4613      	mov	r3, r2
 80033b6:	2a00      	cmp	r2, #0
 80033b8:	d1f5      	bne.n	80033a6 <ftoa+0x126>
			*p++ = '0' + intPart % 10;
 80033ba:	462b      	mov	r3, r5
		while (p > ptr)
 80033bc:	4598      	cmp	r8, r3
 80033be:	d2b7      	bcs.n	8003330 <ftoa+0xb0>
			c = *--p;
 80033c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
			*p = *ptr;
 80033c4:	f898 1000 	ldrb.w	r1, [r8]
 80033c8:	7019      	strb	r1, [r3, #0]
			*ptr++ = c;
 80033ca:	f808 2b01 	strb.w	r2, [r8], #1
 80033ce:	e7f5      	b.n	80033bc <ftoa+0x13c>
			f *= 10.0;
 80033d0:	4632      	mov	r2, r6
 80033d2:	463b      	mov	r3, r7
 80033d4:	f7fd f880 	bl	80004d8 <__aeabi_dmul>
 80033d8:	4689      	mov	r9, r1
 80033da:	4680      	mov	r8, r0
			c = f;
 80033dc:	f7fd fb54 	bl	8000a88 <__aeabi_d2uiz>
 80033e0:	b2c0      	uxtb	r0, r0
			*ptr++ = '0' + c;
 80033e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80033e6:	f80b 3f01 	strb.w	r3, [fp, #1]!
			f -= c;
 80033ea:	f7fd f80b 	bl	8000404 <__aeabi_i2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4640      	mov	r0, r8
 80033f4:	4649      	mov	r1, r9
 80033f6:	f7fc feb7 	bl	8000168 <__aeabi_dsub>
 80033fa:	e7a9      	b.n	8003350 <ftoa+0xd0>
	if (f < 0)
 80033fc:	f7fd fade 	bl	80009bc <__aeabi_dcmplt>
 8003400:	2800      	cmp	r0, #0
 8003402:	d1b0      	bne.n	8003366 <ftoa+0xe6>
 8003404:	46d0      	mov	r8, sl
		precision = MAX_PRECISION;
 8003406:	240a      	movs	r4, #10
 8003408:	e7b2      	b.n	8003370 <ftoa+0xf0>
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w
 8003410:	00000000 	.word	0x00000000
 8003414:	40c38800 	.word	0x40c38800
 8003418:	00000000 	.word	0x00000000
 800341c:	40f86a00 	.word	0x40f86a00
 8003420:	3ff00000 	.word	0x3ff00000
 8003424:	40240000 	.word	0x40240000
 8003428:	40590000 	.word	0x40590000
 800342c:	408f4000 	.word	0x408f4000
 8003430:	08008820 	.word	0x08008820

08003434 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003436:	2301      	movs	r3, #1
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
void ssd1306_WriteCommand(uint8_t byte) {
 800343c:	aa06      	add	r2, sp, #24
 800343e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003442:	9200      	str	r2, [sp, #0]
 8003444:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	2178      	movs	r1, #120	; 0x78
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <ssd1306_WriteCommand+0x24>)
 800344e:	f7fe fb13 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 8003452:	b007      	add	sp, #28
 8003454:	f85d fb04 	ldr.w	pc, [sp], #4
 8003458:	20000620 	.word	0x20000620

0800345c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800345c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	b289      	uxth	r1, r1
 8003464:	e9cd 0100 	strd	r0, r1, [sp]
 8003468:	9302      	str	r3, [sp, #8]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	2301      	movs	r3, #1
 800346e:	2178      	movs	r1, #120	; 0x78
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <ssd1306_WriteData+0x20>)
 8003472:	f7fe fb01 	bl	8001a78 <HAL_I2C_Mem_Write>
}
 8003476:	b005      	add	sp, #20
 8003478:	f85d fb04 	ldr.w	pc, [sp], #4
 800347c:	20000620 	.word	0x20000620

08003480 <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003480:	2300      	movs	r3, #0
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003482:	4905      	ldr	r1, [pc, #20]	; (8003498 <ssd1306_Fill+0x18>)
 8003484:	1c02      	adds	r2, r0, #0
 8003486:	bf18      	it	ne
 8003488:	2201      	movne	r2, #1
 800348a:	4252      	negs	r2, r2
 800348c:	545a      	strb	r2, [r3, r1]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800348e:	3301      	adds	r3, #1
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	d1f6      	bne.n	8003484 <ssd1306_Fill+0x4>
    }
}
 8003496:	4770      	bx	lr
 8003498:	2000020e 	.word	0x2000020e

0800349c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	2400      	movs	r4, #0
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
        ssd1306_WriteCommand(0x00);
        ssd1306_WriteCommand(0x10);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034a0:	4d0a      	ldr	r5, [pc, #40]	; (80034cc <ssd1306_UpdateScreen+0x30>)
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80034a2:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80034a6:	b2c0      	uxtb	r0, r0
 80034a8:	f7ff ffc4 	bl	8003434 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7ff ffc1 	bl	8003434 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80034b2:	2010      	movs	r0, #16
 80034b4:	f7ff ffbe 	bl	8003434 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034b8:	eb05 10c4 	add.w	r0, r5, r4, lsl #7
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	3401      	adds	r4, #1
 80034c0:	f7ff ffcc 	bl	800345c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80034c4:	2c08      	cmp	r4, #8
 80034c6:	d1ec      	bne.n	80034a2 <ssd1306_UpdateScreen+0x6>
    }
}
 80034c8:	bd38      	pop	{r3, r4, r5, pc}
 80034ca:	bf00      	nop
 80034cc:	2000020e 	.word	0x2000020e

080034d0 <ssd1306_Init>:
void ssd1306_Init(void) {
 80034d0:	b508      	push	{r3, lr}
    HAL_Delay(100);
 80034d2:	2064      	movs	r0, #100	; 0x64
 80034d4:	f7fd fd12 	bl	8000efc <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 80034d8:	20ae      	movs	r0, #174	; 0xae
 80034da:	f7ff ffab 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80034de:	2020      	movs	r0, #32
 80034e0:	f7ff ffa8 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7ff ffa5 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80034ea:	20b0      	movs	r0, #176	; 0xb0
 80034ec:	f7ff ffa2 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80034f0:	20c8      	movs	r0, #200	; 0xc8
 80034f2:	f7ff ff9f 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7ff ff9c 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80034fc:	2010      	movs	r0, #16
 80034fe:	f7ff ff99 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003502:	2040      	movs	r0, #64	; 0x40
 8003504:	f7ff ff96 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8003508:	2081      	movs	r0, #129	; 0x81
 800350a:	f7ff ff93 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800350e:	20ff      	movs	r0, #255	; 0xff
 8003510:	f7ff ff90 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003514:	20a1      	movs	r0, #161	; 0xa1
 8003516:	f7ff ff8d 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 800351a:	20a6      	movs	r0, #166	; 0xa6
 800351c:	f7ff ff8a 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003520:	20a8      	movs	r0, #168	; 0xa8
 8003522:	f7ff ff87 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8003526:	203f      	movs	r0, #63	; 0x3f
 8003528:	f7ff ff84 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800352c:	20a4      	movs	r0, #164	; 0xa4
 800352e:	f7ff ff81 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003532:	20d3      	movs	r0, #211	; 0xd3
 8003534:	f7ff ff7e 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003538:	2000      	movs	r0, #0
 800353a:	f7ff ff7b 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800353e:	20d5      	movs	r0, #213	; 0xd5
 8003540:	f7ff ff78 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7ff ff75 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800354a:	20d9      	movs	r0, #217	; 0xd9
 800354c:	f7ff ff72 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003550:	2022      	movs	r0, #34	; 0x22
 8003552:	f7ff ff6f 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003556:	20da      	movs	r0, #218	; 0xda
 8003558:	f7ff ff6c 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800355c:	2012      	movs	r0, #18
 800355e:	f7ff ff69 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003562:	20db      	movs	r0, #219	; 0xdb
 8003564:	f7ff ff66 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003568:	2020      	movs	r0, #32
 800356a:	f7ff ff63 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800356e:	208d      	movs	r0, #141	; 0x8d
 8003570:	f7ff ff60 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003574:	2014      	movs	r0, #20
 8003576:	f7ff ff5d 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800357a:	20af      	movs	r0, #175	; 0xaf
 800357c:	f7ff ff5a 	bl	8003434 <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8003580:	2000      	movs	r0, #0
 8003582:	f7ff ff7d 	bl	8003480 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8003586:	f7ff ff89 	bl	800349c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800358a:	2200      	movs	r2, #0
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <ssd1306_Init+0xc8>)
 800358e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003590:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8003592:	2201      	movs	r2, #1
 8003594:	715a      	strb	r2, [r3, #5]
}
 8003596:	bd08      	pop	{r3, pc}
 8003598:	20000208 	.word	0x20000208

0800359c <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800359c:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800359e:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80035a0:	d416      	bmi.n	80035d0 <ssd1306_DrawPixel+0x34>
 80035a2:	293f      	cmp	r1, #63	; 0x3f
 80035a4:	d814      	bhi.n	80035d0 <ssd1306_DrawPixel+0x34>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <ssd1306_DrawPixel+0x38>)
 80035a8:	791b      	ldrb	r3, [r3, #4]
 80035aa:	b113      	cbz	r3, 80035b2 <ssd1306_DrawPixel+0x16>
        color = (SSD1306_COLOR)!color;
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	0952      	lsrs	r2, r2, #5
 80035b2:	08cb      	lsrs	r3, r1, #3
 80035b4:	f001 0407 	and.w	r4, r1, #7
 80035b8:	2101      	movs	r1, #1
 80035ba:	4d07      	ldr	r5, [pc, #28]	; (80035d8 <ssd1306_DrawPixel+0x3c>)
 80035bc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80035c0:	562b      	ldrsb	r3, [r5, r0]
 80035c2:	40a1      	lsls	r1, r4
 80035c4:	b249      	sxtb	r1, r1
    }
    
    // Draw in the right color
    if(color == White) {
 80035c6:	2a01      	cmp	r2, #1
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035c8:	bf0c      	ite	eq
 80035ca:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035cc:	438b      	bicne	r3, r1
 80035ce:	542b      	strb	r3, [r5, r0]
    }
}
 80035d0:	bd30      	pop	{r4, r5, pc}
 80035d2:	bf00      	nop
 80035d4:	20000208 	.word	0x20000208
 80035d8:	2000020e 	.word	0x2000020e

080035dc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80035dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e0:	4604      	mov	r4, r0
 80035e2:	b087      	sub	sp, #28
 80035e4:	a806      	add	r0, sp, #24
 80035e6:	e900 0006 	stmdb	r0, {r1, r2}
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80035ea:	f1a4 0220 	sub.w	r2, r4, #32
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80035ee:	469b      	mov	fp, r3
    if (ch < 32 || ch > 126)
 80035f0:	b2d3      	uxtb	r3, r2
 80035f2:	2b5e      	cmp	r3, #94	; 0x5e
 80035f4:	d83e      	bhi.n	8003674 <ssd1306_WriteChar+0x98>
        return 0;
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <ssd1306_WriteChar+0x9c>)
 80035f8:	f89d 9010 	ldrb.w	r9, [sp, #16]
 80035fc:	881d      	ldrh	r5, [r3, #0]
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	eb05 0109 	add.w	r1, r5, r9
 8003604:	2980      	cmp	r1, #128	; 0x80
 8003606:	dc35      	bgt.n	8003674 <ssd1306_WriteChar+0x98>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003608:	885b      	ldrh	r3, [r3, #2]
 800360a:	f89d a011 	ldrb.w	sl, [sp, #17]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	eb03 010a 	add.w	r1, r3, sl
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003614:	2940      	cmp	r1, #64	; 0x40
 8003616:	dc2d      	bgt.n	8003674 <ssd1306_WriteChar+0x98>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003618:	2600      	movs	r6, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800361a:	fb0a f302 	mul.w	r3, sl, r2
 800361e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < Font.FontHeight; i++) {
 8003620:	45b2      	cmp	sl, r6
 8003622:	d806      	bhi.n	8003632 <ssd1306_WriteChar+0x56>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003624:	9b01      	ldr	r3, [sp, #4]
 8003626:	444d      	add	r5, r9
 8003628:	801d      	strh	r5, [r3, #0]
    
    // Return written char for validation
    return ch;
}
 800362a:	4620      	mov	r0, r4
 800362c:	b007      	add	sp, #28
 800362e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8003632:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003634:	9b02      	ldr	r3, [sp, #8]
 8003636:	9905      	ldr	r1, [sp, #20]
 8003638:	199a      	adds	r2, r3, r6
 800363a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800363e:	9303      	str	r3, [sp, #12]
 8003640:	9b00      	ldr	r3, [sp, #0]
 8003642:	eb06 0803 	add.w	r8, r6, r3
 8003646:	fa5f f888 	uxtb.w	r8, r8
        for(j = 0; j < Font.FontWidth; j++) {
 800364a:	45b9      	cmp	r9, r7
 800364c:	d801      	bhi.n	8003652 <ssd1306_WriteChar+0x76>
    for(i = 0; i < Font.FontHeight; i++) {
 800364e:	3601      	adds	r6, #1
 8003650:	e7e6      	b.n	8003620 <ssd1306_WriteChar+0x44>
            if((b << j) & 0x8000)  {
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	1978      	adds	r0, r7, r5
 8003656:	fa03 f207 	lsl.w	r2, r3, r7
 800365a:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800365c:	bf58      	it	pl
 800365e:	fabb f28b 	clzpl	r2, fp
 8003662:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003664:	bf4c      	ite	mi
 8003666:	465a      	movmi	r2, fp
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003668:	0952      	lsrpl	r2, r2, #5
 800366a:	4641      	mov	r1, r8
 800366c:	f7ff ff96 	bl	800359c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003670:	3701      	adds	r7, #1
 8003672:	e7ea      	b.n	800364a <ssd1306_WriteChar+0x6e>
        return 0;
 8003674:	2400      	movs	r4, #0
 8003676:	e7d8      	b.n	800362a <ssd1306_WriteChar+0x4e>
 8003678:	20000208 	.word	0x20000208

0800367c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800367c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800367e:	466d      	mov	r5, sp
 8003680:	461f      	mov	r7, r3
 8003682:	e885 0006 	stmia.w	r5, {r1, r2}
 8003686:	1e46      	subs	r6, r0, #1
    // Write until null-byte
    while (*str) {
 8003688:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800368c:	b144      	cbz	r4, 80036a0 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800368e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8003692:	4620      	mov	r0, r4
 8003694:	463b      	mov	r3, r7
 8003696:	f7ff ffa1 	bl	80035dc <ssd1306_WriteChar>
 800369a:	7834      	ldrb	r4, [r6, #0]
 800369c:	42a0      	cmp	r0, r4
 800369e:	d0f3      	beq.n	8003688 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 80036a0:	4620      	mov	r0, r4
 80036a2:	b003      	add	sp, #12
 80036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036a8 <ssd1306_Print>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_Print(float latitude, float longitude, float altitude, float velocity){
 80036a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ac:	460e      	mov	r6, r1
 80036ae:	4615      	mov	r5, r2
 80036b0:	461c      	mov	r4, r3
 80036b2:	b08c      	sub	sp, #48	; 0x30
	char lati[10], longi[10], alti[10], velo[10];
	ftoa((double)latitude, lati, 6);
 80036b4:	f7fc feb8 	bl	8000428 <__aeabi_f2d>
 80036b8:	466a      	mov	r2, sp
 80036ba:	2306      	movs	r3, #6
 80036bc:	f7ff fde0 	bl	8003280 <ftoa>
	ftoa((double)longitude, longi, 6);
 80036c0:	4630      	mov	r0, r6
 80036c2:	f7fc feb1 	bl	8000428 <__aeabi_f2d>
 80036c6:	aa03      	add	r2, sp, #12
 80036c8:	2306      	movs	r3, #6
 80036ca:	f7ff fdd9 	bl	8003280 <ftoa>
	ftoa((double)altitude, alti, 6);
 80036ce:	4628      	mov	r0, r5
 80036d0:	f7fc feaa 	bl	8000428 <__aeabi_f2d>
 80036d4:	aa06      	add	r2, sp, #24
 80036d6:	2306      	movs	r3, #6
 80036d8:	f7ff fdd2 	bl	8003280 <ftoa>
	ftoa((double)velocity, velo, 2);
 80036dc:	4620      	mov	r0, r4
 80036de:	f7fc fea3 	bl	8000428 <__aeabi_f2d>
 80036e2:	aa09      	add	r2, sp, #36	; 0x24
 80036e4:	2302      	movs	r3, #2
 80036e6:	f7ff fdcb 	bl	8003280 <ftoa>
    ssd1306_Fill(Black);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff fec8 	bl	8003480 <ssd1306_Fill>
    SSD1306.CurrentX = x;
 80036f0:	2334      	movs	r3, #52	; 0x34
 80036f2:	4d30      	ldr	r5, [pc, #192]	; (80037b4 <ssd1306_Print+0x10c>)
 80036f4:	2602      	movs	r6, #2
 80036f6:	802b      	strh	r3, [r5, #0]
    SSD1306.CurrentY = y;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f04f 080c 	mov.w	r8, #12
    ssd1306_SetCursor(52, 0);
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 80036fe:	4c2e      	ldr	r4, [pc, #184]	; (80037b8 <ssd1306_Print+0x110>)
    SSD1306.CurrentY = y;
 8003700:	806b      	strh	r3, [r5, #2]
    ssd1306_WriteString("LoRaOLED", Font_6x8, White);
 8003702:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003706:	2301      	movs	r3, #1
 8003708:	482c      	ldr	r0, [pc, #176]	; (80037bc <ssd1306_Print+0x114>)
 800370a:	f7ff ffb7 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 4+8);
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800370e:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 8003712:	2738      	movs	r7, #56	; 0x38
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 8003714:	2301      	movs	r3, #1
 8003716:	482a      	ldr	r0, [pc, #168]	; (80037c0 <ssd1306_Print+0x118>)
    SSD1306.CurrentX = x;
 8003718:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 800371a:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Latitude:", Font_6x8, White);
 800371e:	f7ff ffad 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 4+8);
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8003722:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentY = y;
 8003726:	f8a5 8002 	strh.w	r8, [r5, #2]
 800372a:	f04f 0818 	mov.w	r8, #24
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 800372e:	2301      	movs	r3, #1
 8003730:	4668      	mov	r0, sp
    SSD1306.CurrentX = x;
 8003732:	802f      	strh	r7, [r5, #0]
    ssd1306_WriteString((char*)lati, Font_6x8, White);
 8003734:	f7ff ffa2 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 2*(4+8));
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8003738:	e894 0006 	ldmia.w	r4, {r1, r2}
 800373c:	2301      	movs	r3, #1
 800373e:	4821      	ldr	r0, [pc, #132]	; (80037c4 <ssd1306_Print+0x11c>)
    SSD1306.CurrentX = x;
 8003740:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 8003742:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Longitude:", Font_6x8, White);
 8003746:	f7ff ff99 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2+60, 2*(4+8));
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 800374a:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800374e:	233e      	movs	r3, #62	; 0x3e
    SSD1306.CurrentY = y;
 8003750:	f8a5 8002 	strh.w	r8, [r5, #2]
 8003754:	f04f 0824 	mov.w	r8, #36	; 0x24
    SSD1306.CurrentX = x;
 8003758:	802b      	strh	r3, [r5, #0]
    ssd1306_WriteString((char*)longi, Font_6x8, White);
 800375a:	a803      	add	r0, sp, #12
 800375c:	2301      	movs	r3, #1
 800375e:	f7ff ff8d 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 3*(4+8));
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 8003762:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003766:	2301      	movs	r3, #1
 8003768:	4817      	ldr	r0, [pc, #92]	; (80037c8 <ssd1306_Print+0x120>)
    SSD1306.CurrentX = x;
 800376a:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 800376c:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString("Altitude:", Font_6x8, White);
 8003770:	f7ff ff84 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 3*(4+8));
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 8003774:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003778:	2301      	movs	r3, #1
 800377a:	a806      	add	r0, sp, #24
    SSD1306.CurrentX = x;
 800377c:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 800377e:	f8a5 8002 	strh.w	r8, [r5, #2]
    ssd1306_WriteString((char*)alti, Font_6x8, White);
 8003782:	f7ff ff7b 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2, 4*(4+8));
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 8003786:	e894 0006 	ldmia.w	r4, {r1, r2}
    SSD1306.CurrentX = x;
 800378a:	802e      	strh	r6, [r5, #0]
    SSD1306.CurrentY = y;
 800378c:	2630      	movs	r6, #48	; 0x30
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 800378e:	2301      	movs	r3, #1
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <ssd1306_Print+0x124>)
    SSD1306.CurrentY = y;
 8003792:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteString("Velocity:", Font_6x8, White);
 8003794:	f7ff ff72 	bl	800367c <ssd1306_WriteString>
    ssd1306_SetCursor(2+54, 4*(4+8));
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 8003798:	e894 0006 	ldmia.w	r4, {r1, r2}
 800379c:	2301      	movs	r3, #1
 800379e:	eb0d 0008 	add.w	r0, sp, r8
    SSD1306.CurrentX = x;
 80037a2:	802f      	strh	r7, [r5, #0]
    SSD1306.CurrentY = y;
 80037a4:	806e      	strh	r6, [r5, #2]
    ssd1306_WriteString((char*)velo, Font_6x8, White);
 80037a6:	f7ff ff69 	bl	800367c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80037aa:	f7ff fe77 	bl	800349c <ssd1306_UpdateScreen>
}
 80037ae:	b00c      	add	sp, #48	; 0x30
 80037b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037b4:	20000208 	.word	0x20000208
 80037b8:	20000008 	.word	0x20000008
 80037bc:	08008878 	.word	0x08008878
 80037c0:	08008881 	.word	0x08008881
 80037c4:	0800888b 	.word	0x0800888b
 80037c8:	08008896 	.word	0x08008896
 80037cc:	080088a0 	.word	0x080088a0

080037d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_MspInit+0x4c>)
{
 80037d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80037d4:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80037d6:	2001      	movs	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	619a      	str	r2, [r3, #24]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	f002 0201 	and.w	r2, r2, #1
 80037e4:	9200      	str	r2, [sp, #0]
 80037e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037ee:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80037f4:	4611      	mov	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80037fe:	f7fd fddb 	bl	80013b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003802:	2001      	movs	r0, #1
 8003804:	f7fd fe0c 	bl	8001420 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003808:	4a05      	ldr	r2, [pc, #20]	; (8003820 <HAL_MspInit+0x50>)
 800380a:	6853      	ldr	r3, [r2, #4]
 800380c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003810:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003816:	b003      	add	sp, #12
 8003818:	f85d fb04 	ldr.w	pc, [sp], #4
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000

08003824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
 8003828:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	2210      	movs	r2, #16
 800382c:	2100      	movs	r1, #0
 800382e:	a802      	add	r0, sp, #8
 8003830:	f000 f9c6 	bl	8003bc0 <memset>
  if(hadc->Instance==ADC1)
 8003834:	6822      	ldr	r2, [r4, #0]
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_ADC_MspInit+0x64>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d123      	bne.n	8003884 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800383c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003840:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8003842:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800384c:	480f      	ldr	r0, [pc, #60]	; (800388c <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800384e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003852:	9200      	str	r2, [sp, #0]
 8003854:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	f042 0204 	orr.w	r2, r2, #4
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003860:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800386a:	2303      	movs	r3, #3
 800386c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 8003870:	f7fd fe42 	bl	80014f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003874:	2200      	movs	r2, #0
 8003876:	2012      	movs	r0, #18
 8003878:	4611      	mov	r1, r2
 800387a:	f7fd fd9d 	bl	80013b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800387e:	2012      	movs	r0, #18
 8003880:	f7fd fdce 	bl	8001420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003884:	b006      	add	sp, #24
 8003886:	bd10      	pop	{r4, pc}
 8003888:	40012400 	.word	0x40012400
 800388c:	40010800 	.word	0x40010800

08003890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
 8003894:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003896:	2210      	movs	r2, #16
 8003898:	2100      	movs	r1, #0
 800389a:	a802      	add	r0, sp, #8
 800389c:	f000 f990 	bl	8003bc0 <memset>
  if(hi2c->Instance==I2C2)
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_I2C_MspInit+0x58>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d11d      	bne.n	80038e4 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a8:	4c10      	ldr	r4, [pc, #64]	; (80038ec <HAL_I2C_MspInit+0x5c>)
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038aa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ae:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	f043 0308 	orr.w	r3, r3, #8
 80038b6:	61a3      	str	r3, [r4, #24]
 80038b8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038c4:	2312      	movs	r3, #18
 80038c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ce:	f7fd fe13 	bl	80014f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038d2:	69e3      	ldr	r3, [r4, #28]
 80038d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d8:	61e3      	str	r3, [r4, #28]
 80038da:	69e3      	ldr	r3, [r4, #28]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80038e4:	b006      	add	sp, #24
 80038e6:	bd10      	pop	{r4, pc}
 80038e8:	40005800 	.word	0x40005800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40010c00 	.word	0x40010c00

080038f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f6:	2410      	movs	r4, #16
{
 80038f8:	4605      	mov	r5, r0
 80038fa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	4622      	mov	r2, r4
 80038fe:	2100      	movs	r1, #0
 8003900:	a802      	add	r0, sp, #8
 8003902:	f000 f95d 	bl	8003bc0 <memset>
  if(hspi->Instance==SPI1)
 8003906:	682a      	ldr	r2, [r5, #0]
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <HAL_SPI_MspInit+0x78>)
 800390a:	429a      	cmp	r2, r3
 800390c:	d12c      	bne.n	8003968 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800390e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003912:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003914:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003916:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391e:	4814      	ldr	r0, [pc, #80]	; (8003970 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003920:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]
 8003930:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2228      	movs	r2, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f7fd fdd7 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 800394c:	a902      	add	r1, sp, #8
 800394e:	4808      	ldr	r0, [pc, #32]	; (8003970 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8003954:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8003956:	f7fd fdcf 	bl	80014f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800395a:	4a06      	ldr	r2, [pc, #24]	; (8003974 <HAL_SPI_MspInit+0x80>)
 800395c:	6853      	ldr	r3, [r2, #4]
 800395e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003968:	b007      	add	sp, #28
 800396a:	bd30      	pop	{r4, r5, pc}
 800396c:	40013000 	.word	0x40013000
 8003970:	40010c00 	.word	0x40010c00
 8003974:	40010000 	.word	0x40010000

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397e:	2210      	movs	r2, #16
 8003980:	2100      	movs	r1, #0
 8003982:	a802      	add	r0, sp, #8
 8003984:	f000 f91c 	bl	8003bc0 <memset>
  if(huart->Instance==USART2)
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <HAL_UART_MspInit+0x6c>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d126      	bne.n	80039de <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003990:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003994:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = TX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 8003996:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003998:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800399c:	61da      	str	r2, [r3, #28]
 800399e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80039a0:	4811      	ldr	r0, [pc, #68]	; (80039e8 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80039a6:	9200      	str	r2, [sp, #0]
 80039a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	f042 0204 	orr.w	r2, r2, #4
 80039b0:	619a      	str	r2, [r3, #24]
 80039b2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039c4:	2303      	movs	r3, #3
 80039c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TX_USB_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f7fd fd96 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_USB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039cc:	2108      	movs	r1, #8
 80039ce:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80039d0:	4805      	ldr	r0, [pc, #20]	; (80039e8 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039d2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80039d6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(RX_USB_GPIO_Port, &GPIO_InitStruct);
 80039da:	f7fd fd8d 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039de:	b006      	add	sp, #24
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	40004400 	.word	0x40004400
 80039e8:	40010800 	.word	0x40010800

080039ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039ec:	4770      	bx	lr

080039ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ee:	e7fe      	b.n	80039ee <HardFault_Handler>

080039f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f0:	e7fe      	b.n	80039f0 <MemManage_Handler>

080039f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f2:	e7fe      	b.n	80039f2 <BusFault_Handler>

080039f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f4:	e7fe      	b.n	80039f4 <UsageFault_Handler>

080039f6 <SVC_Handler>:
 80039f6:	4770      	bx	lr

080039f8 <DebugMon_Handler>:
 80039f8:	4770      	bx	lr

080039fa <PendSV_Handler>:
 80039fa:	4770      	bx	lr

080039fc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039fc:	f7fd ba6c 	b.w	8000ed8 <HAL_IncTick>

08003a00 <PVD_IRQHandler>:
void PVD_IRQHandler(void)
{
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003a00:	f7fe b8cc 	b.w	8001b9c <HAL_PWR_PVD_IRQHandler>

08003a04 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <ADC1_2_IRQHandler+0x8>)
 8003a06:	f7fd ba8f 	b.w	8000f28 <HAL_ADC_IRQHandler>
 8003a0a:	bf00      	nop
 8003a0c:	2000067c 	.word	0x2000067c

08003a10 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <SPI1_IRQHandler+0x8>)
 8003a12:	f7fe bdfb 	b.w	800260c <HAL_SPI_IRQHandler>
 8003a16:	bf00      	nop
 8003a18:	200006ec 	.word	0x200006ec

08003a1c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a20:	f7fd be5c 	b.w	80016dc <HAL_GPIO_EXTI_IRQHandler>

08003a24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	460e      	mov	r6, r1
 8003a28:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	1ba3      	subs	r3, r4, r6
 8003a2e:	429d      	cmp	r5, r3
 8003a30:	dc01      	bgt.n	8003a36 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003a32:	4628      	mov	r0, r5
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003a36:	f3af 8000 	nop.w
 8003a3a:	f804 0b01 	strb.w	r0, [r4], #1
 8003a3e:	e7f5      	b.n	8003a2c <_read+0x8>

08003a40 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a40:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <_sbrk+0x2c>)
{
 8003a44:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	b909      	cbnz	r1, 8003a4e <_sbrk+0xe>
		heap_end = &end;
 8003a4a:	4909      	ldr	r1, [pc, #36]	; (8003a70 <_sbrk+0x30>)
 8003a4c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003a4e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003a50:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a52:	4402      	add	r2, r0
 8003a54:	428a      	cmp	r2, r1
 8003a56:	d906      	bls.n	8003a66 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a58:	f000 f864 	bl	8003b24 <__errno>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003a64:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003a66:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003a68:	e7fc      	b.n	8003a64 <_sbrk+0x24>
 8003a6a:	bf00      	nop
 8003a6c:	20000610 	.word	0x20000610
 8003a70:	200008c4 	.word	0x200008c4

08003a74 <_close>:

int _close(int file)
{
	return -1;
}
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	4770      	bx	lr

08003a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003a7e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003a80:	604b      	str	r3, [r1, #4]
}
 8003a82:	4770      	bx	lr

08003a84 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003a84:	2001      	movs	r0, #1
 8003a86:	4770      	bx	lr

08003a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003a88:	2000      	movs	r0, #0
 8003a8a:	4770      	bx	lr

08003a8c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <SystemInit+0x40>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <SystemInit+0x44>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003aa4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003aba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003abe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <SystemInit+0x48>)
 8003ac6:	609a      	str	r2, [r3, #8]
#endif 
}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	f8ff0000 	.word	0xf8ff0000
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ad8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ada:	e003      	b.n	8003ae4 <LoopCopyDataInit>

08003adc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ade:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ae0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003ae2:	3104      	adds	r1, #4

08003ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003ae4:	480a      	ldr	r0, [pc, #40]	; (8003b10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ae8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003aea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003aec:	d3f6      	bcc.n	8003adc <CopyDataInit>
  ldr r2, =_sbss
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003af0:	e002      	b.n	8003af8 <LoopFillZerobss>

08003af2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003af4:	f842 3b04 	str.w	r3, [r2], #4

08003af8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003afa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003afc:	d3f9      	bcc.n	8003af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003afe:	f7ff ffc5 	bl	8003a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b02:	f000 f815 	bl	8003b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b06:	f7ff f9c7 	bl	8002e98 <main>
  bx lr
 8003b0a:	4770      	bx	lr
  ldr r3, =_sidata
 8003b0c:	080091f8 	.word	0x080091f8
  ldr r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b14:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8003b18:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8003b1c:	200008c4 	.word	0x200008c4

08003b20 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <CAN1_RX1_IRQHandler>
	...

08003b24 <__errno>:
 8003b24:	4b01      	ldr	r3, [pc, #4]	; (8003b2c <__errno+0x8>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000014 	.word	0x20000014

08003b30 <__libc_init_array>:
 8003b30:	b570      	push	{r4, r5, r6, lr}
 8003b32:	2500      	movs	r5, #0
 8003b34:	4e0c      	ldr	r6, [pc, #48]	; (8003b68 <__libc_init_array+0x38>)
 8003b36:	4c0d      	ldr	r4, [pc, #52]	; (8003b6c <__libc_init_array+0x3c>)
 8003b38:	1ba4      	subs	r4, r4, r6
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	42a5      	cmp	r5, r4
 8003b3e:	d109      	bne.n	8003b54 <__libc_init_array+0x24>
 8003b40:	f004 fe30 	bl	80087a4 <_init>
 8003b44:	2500      	movs	r5, #0
 8003b46:	4e0a      	ldr	r6, [pc, #40]	; (8003b70 <__libc_init_array+0x40>)
 8003b48:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <__libc_init_array+0x44>)
 8003b4a:	1ba4      	subs	r4, r4, r6
 8003b4c:	10a4      	asrs	r4, r4, #2
 8003b4e:	42a5      	cmp	r5, r4
 8003b50:	d105      	bne.n	8003b5e <__libc_init_array+0x2e>
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b58:	4798      	blx	r3
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	e7ee      	b.n	8003b3c <__libc_init_array+0xc>
 8003b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b62:	4798      	blx	r3
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7f2      	b.n	8003b4e <__libc_init_array+0x1e>
 8003b68:	080091f0 	.word	0x080091f0
 8003b6c:	080091f0 	.word	0x080091f0
 8003b70:	080091f0 	.word	0x080091f0
 8003b74:	080091f4 	.word	0x080091f4

08003b78 <memcpy>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	1e43      	subs	r3, r0, #1
 8003b7c:	440a      	add	r2, r1
 8003b7e:	4291      	cmp	r1, r2
 8003b80:	d100      	bne.n	8003b84 <memcpy+0xc>
 8003b82:	bd10      	pop	{r4, pc}
 8003b84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b8c:	e7f7      	b.n	8003b7e <memcpy+0x6>

08003b8e <memmove>:
 8003b8e:	4288      	cmp	r0, r1
 8003b90:	b510      	push	{r4, lr}
 8003b92:	eb01 0302 	add.w	r3, r1, r2
 8003b96:	d807      	bhi.n	8003ba8 <memmove+0x1a>
 8003b98:	1e42      	subs	r2, r0, #1
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	d00a      	beq.n	8003bb4 <memmove+0x26>
 8003b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ba6:	e7f8      	b.n	8003b9a <memmove+0xc>
 8003ba8:	4283      	cmp	r3, r0
 8003baa:	d9f5      	bls.n	8003b98 <memmove+0xa>
 8003bac:	1881      	adds	r1, r0, r2
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	42d3      	cmn	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <memmove+0x28>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003bbe:	e7f7      	b.n	8003bb0 <memmove+0x22>

08003bc0 <memset>:
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4402      	add	r2, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <__cvt>:
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd6:	461e      	mov	r6, r3
 8003bd8:	bfbb      	ittet	lt
 8003bda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	461e      	movlt	r6, r3
 8003be0:	2300      	movge	r3, #0
 8003be2:	232d      	movlt	r3, #45	; 0x2d
 8003be4:	b088      	sub	sp, #32
 8003be6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003be8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003bec:	f027 0720 	bic.w	r7, r7, #32
 8003bf0:	2f46      	cmp	r7, #70	; 0x46
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003bf6:	700b      	strb	r3, [r1, #0]
 8003bf8:	d004      	beq.n	8003c04 <__cvt+0x34>
 8003bfa:	2f45      	cmp	r7, #69	; 0x45
 8003bfc:	d100      	bne.n	8003c00 <__cvt+0x30>
 8003bfe:	3501      	adds	r5, #1
 8003c00:	2302      	movs	r3, #2
 8003c02:	e000      	b.n	8003c06 <__cvt+0x36>
 8003c04:	2303      	movs	r3, #3
 8003c06:	aa07      	add	r2, sp, #28
 8003c08:	9204      	str	r2, [sp, #16]
 8003c0a:	aa06      	add	r2, sp, #24
 8003c0c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c10:	e9cd 3500 	strd	r3, r5, [sp]
 8003c14:	4622      	mov	r2, r4
 8003c16:	4633      	mov	r3, r6
 8003c18:	f001 fe26 	bl	8005868 <_dtoa_r>
 8003c1c:	2f47      	cmp	r7, #71	; 0x47
 8003c1e:	4680      	mov	r8, r0
 8003c20:	d102      	bne.n	8003c28 <__cvt+0x58>
 8003c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c24:	07db      	lsls	r3, r3, #31
 8003c26:	d526      	bpl.n	8003c76 <__cvt+0xa6>
 8003c28:	2f46      	cmp	r7, #70	; 0x46
 8003c2a:	eb08 0905 	add.w	r9, r8, r5
 8003c2e:	d111      	bne.n	8003c54 <__cvt+0x84>
 8003c30:	f898 3000 	ldrb.w	r3, [r8]
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d10a      	bne.n	8003c4e <__cvt+0x7e>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4631      	mov	r1, r6
 8003c40:	f7fc feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8003c44:	b918      	cbnz	r0, 8003c4e <__cvt+0x7e>
 8003c46:	f1c5 0501 	rsb	r5, r5, #1
 8003c4a:	f8ca 5000 	str.w	r5, [sl]
 8003c4e:	f8da 3000 	ldr.w	r3, [sl]
 8003c52:	4499      	add	r9, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	2300      	movs	r3, #0
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4631      	mov	r1, r6
 8003c5c:	f7fc fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8003c60:	b938      	cbnz	r0, 8003c72 <__cvt+0xa2>
 8003c62:	2230      	movs	r2, #48	; 0x30
 8003c64:	9b07      	ldr	r3, [sp, #28]
 8003c66:	454b      	cmp	r3, r9
 8003c68:	d205      	bcs.n	8003c76 <__cvt+0xa6>
 8003c6a:	1c59      	adds	r1, r3, #1
 8003c6c:	9107      	str	r1, [sp, #28]
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	e7f8      	b.n	8003c64 <__cvt+0x94>
 8003c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c76:	4640      	mov	r0, r8
 8003c78:	9b07      	ldr	r3, [sp, #28]
 8003c7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003c7c:	eba3 0308 	sub.w	r3, r3, r8
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	b008      	add	sp, #32
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c88 <__exponent>:
 8003c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c8a:	2900      	cmp	r1, #0
 8003c8c:	bfb4      	ite	lt
 8003c8e:	232d      	movlt	r3, #45	; 0x2d
 8003c90:	232b      	movge	r3, #43	; 0x2b
 8003c92:	4604      	mov	r4, r0
 8003c94:	bfb8      	it	lt
 8003c96:	4249      	neglt	r1, r1
 8003c98:	2909      	cmp	r1, #9
 8003c9a:	f804 2b02 	strb.w	r2, [r4], #2
 8003c9e:	7043      	strb	r3, [r0, #1]
 8003ca0:	dd21      	ble.n	8003ce6 <__exponent+0x5e>
 8003ca2:	f10d 0307 	add.w	r3, sp, #7
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	260a      	movs	r6, #10
 8003caa:	fb91 f5f6 	sdiv	r5, r1, r6
 8003cae:	fb06 1115 	mls	r1, r6, r5, r1
 8003cb2:	2d09      	cmp	r5, #9
 8003cb4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003cb8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003cbc:	f103 32ff 	add.w	r2, r3, #4294967295
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	dc09      	bgt.n	8003cd8 <__exponent+0x50>
 8003cc4:	3130      	adds	r1, #48	; 0x30
 8003cc6:	3b02      	subs	r3, #2
 8003cc8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003ccc:	42bb      	cmp	r3, r7
 8003cce:	4622      	mov	r2, r4
 8003cd0:	d304      	bcc.n	8003cdc <__exponent+0x54>
 8003cd2:	1a10      	subs	r0, r2, r0
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	4613      	mov	r3, r2
 8003cda:	e7e6      	b.n	8003caa <__exponent+0x22>
 8003cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce0:	f804 2b01 	strb.w	r2, [r4], #1
 8003ce4:	e7f2      	b.n	8003ccc <__exponent+0x44>
 8003ce6:	2330      	movs	r3, #48	; 0x30
 8003ce8:	4419      	add	r1, r3
 8003cea:	7083      	strb	r3, [r0, #2]
 8003cec:	1d02      	adds	r2, r0, #4
 8003cee:	70c1      	strb	r1, [r0, #3]
 8003cf0:	e7ef      	b.n	8003cd2 <__exponent+0x4a>
	...

08003cf4 <_printf_float>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	b091      	sub	sp, #68	; 0x44
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003cfe:	4693      	mov	fp, r2
 8003d00:	461e      	mov	r6, r3
 8003d02:	4605      	mov	r5, r0
 8003d04:	f002 ff6a 	bl	8006bdc <_localeconv_r>
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	f7fc fa1f 	bl	8000150 <strlen>
 8003d12:	2300      	movs	r3, #0
 8003d14:	930e      	str	r3, [sp, #56]	; 0x38
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	900a      	str	r0, [sp, #40]	; 0x28
 8003d1a:	3307      	adds	r3, #7
 8003d1c:	f023 0307 	bic.w	r3, r3, #7
 8003d20:	f103 0208 	add.w	r2, r3, #8
 8003d24:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003d28:	f8d4 a000 	ldr.w	sl, [r4]
 8003d2c:	603a      	str	r2, [r7, #0]
 8003d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003d36:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003d3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003d3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	4ba6      	ldr	r3, [pc, #664]	; (8003fe0 <_printf_float+0x2ec>)
 8003d46:	4638      	mov	r0, r7
 8003d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d4a:	f7fc fe5f 	bl	8000a0c <__aeabi_dcmpun>
 8003d4e:	bb68      	cbnz	r0, 8003dac <_printf_float+0xb8>
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	4ba2      	ldr	r3, [pc, #648]	; (8003fe0 <_printf_float+0x2ec>)
 8003d56:	4638      	mov	r0, r7
 8003d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d5a:	f7fc fe39 	bl	80009d0 <__aeabi_dcmple>
 8003d5e:	bb28      	cbnz	r0, 8003dac <_printf_float+0xb8>
 8003d60:	2200      	movs	r2, #0
 8003d62:	2300      	movs	r3, #0
 8003d64:	4638      	mov	r0, r7
 8003d66:	4649      	mov	r1, r9
 8003d68:	f7fc fe28 	bl	80009bc <__aeabi_dcmplt>
 8003d6c:	b110      	cbz	r0, 8003d74 <_printf_float+0x80>
 8003d6e:	232d      	movs	r3, #45	; 0x2d
 8003d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d74:	4f9b      	ldr	r7, [pc, #620]	; (8003fe4 <_printf_float+0x2f0>)
 8003d76:	4b9c      	ldr	r3, [pc, #624]	; (8003fe8 <_printf_float+0x2f4>)
 8003d78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d7c:	bf98      	it	ls
 8003d7e:	461f      	movls	r7, r3
 8003d80:	2303      	movs	r3, #3
 8003d82:	f04f 0900 	mov.w	r9, #0
 8003d86:	6123      	str	r3, [r4, #16]
 8003d88:	f02a 0304 	bic.w	r3, sl, #4
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	9600      	str	r6, [sp, #0]
 8003d90:	465b      	mov	r3, fp
 8003d92:	aa0f      	add	r2, sp, #60	; 0x3c
 8003d94:	4621      	mov	r1, r4
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f9e2 	bl	8004160 <_printf_common>
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	f040 8090 	bne.w	8003ec2 <_printf_float+0x1ce>
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	b011      	add	sp, #68	; 0x44
 8003da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dac:	463a      	mov	r2, r7
 8003dae:	464b      	mov	r3, r9
 8003db0:	4638      	mov	r0, r7
 8003db2:	4649      	mov	r1, r9
 8003db4:	f7fc fe2a 	bl	8000a0c <__aeabi_dcmpun>
 8003db8:	b110      	cbz	r0, 8003dc0 <_printf_float+0xcc>
 8003dba:	4f8c      	ldr	r7, [pc, #560]	; (8003fec <_printf_float+0x2f8>)
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <_printf_float+0x2fc>)
 8003dbe:	e7db      	b.n	8003d78 <_printf_float+0x84>
 8003dc0:	6863      	ldr	r3, [r4, #4]
 8003dc2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	a80d      	add	r0, sp, #52	; 0x34
 8003dca:	a90e      	add	r1, sp, #56	; 0x38
 8003dcc:	d140      	bne.n	8003e50 <_printf_float+0x15c>
 8003dce:	2306      	movs	r3, #6
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	f04f 0c00 	mov.w	ip, #0
 8003dd6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003dda:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	463a      	mov	r2, r7
 8003dea:	464b      	mov	r3, r9
 8003dec:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003df0:	4628      	mov	r0, r5
 8003df2:	f7ff feed 	bl	8003bd0 <__cvt>
 8003df6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003dfa:	2b47      	cmp	r3, #71	; 0x47
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	d109      	bne.n	8003e14 <_printf_float+0x120>
 8003e00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e02:	1cd8      	adds	r0, r3, #3
 8003e04:	db02      	blt.n	8003e0c <_printf_float+0x118>
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	dd47      	ble.n	8003e9c <_printf_float+0x1a8>
 8003e0c:	f1a8 0802 	sub.w	r8, r8, #2
 8003e10:	fa5f f888 	uxtb.w	r8, r8
 8003e14:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003e18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e1a:	d824      	bhi.n	8003e66 <_printf_float+0x172>
 8003e1c:	3901      	subs	r1, #1
 8003e1e:	4642      	mov	r2, r8
 8003e20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e24:	910d      	str	r1, [sp, #52]	; 0x34
 8003e26:	f7ff ff2f 	bl	8003c88 <__exponent>
 8003e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e2c:	4681      	mov	r9, r0
 8003e2e:	1813      	adds	r3, r2, r0
 8003e30:	2a01      	cmp	r2, #1
 8003e32:	6123      	str	r3, [r4, #16]
 8003e34:	dc02      	bgt.n	8003e3c <_printf_float+0x148>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	07d1      	lsls	r1, r2, #31
 8003e3a:	d501      	bpl.n	8003e40 <_printf_float+0x14c>
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	6123      	str	r3, [r4, #16]
 8003e40:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0a2      	beq.n	8003d8e <_printf_float+0x9a>
 8003e48:	232d      	movs	r3, #45	; 0x2d
 8003e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4e:	e79e      	b.n	8003d8e <_printf_float+0x9a>
 8003e50:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003e54:	f000 816e 	beq.w	8004134 <_printf_float+0x440>
 8003e58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e5c:	d1b9      	bne.n	8003dd2 <_printf_float+0xde>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1b7      	bne.n	8003dd2 <_printf_float+0xde>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e7b4      	b.n	8003dd0 <_printf_float+0xdc>
 8003e66:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003e6a:	d119      	bne.n	8003ea0 <_printf_float+0x1ac>
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	dd0c      	ble.n	8003e8c <_printf_float+0x198>
 8003e72:	6121      	str	r1, [r4, #16]
 8003e74:	b913      	cbnz	r3, 8003e7c <_printf_float+0x188>
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	07d2      	lsls	r2, r2, #31
 8003e7a:	d502      	bpl.n	8003e82 <_printf_float+0x18e>
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	440b      	add	r3, r1
 8003e80:	6123      	str	r3, [r4, #16]
 8003e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e84:	f04f 0900 	mov.w	r9, #0
 8003e88:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e8a:	e7d9      	b.n	8003e40 <_printf_float+0x14c>
 8003e8c:	b913      	cbnz	r3, 8003e94 <_printf_float+0x1a0>
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	07d0      	lsls	r0, r2, #31
 8003e92:	d501      	bpl.n	8003e98 <_printf_float+0x1a4>
 8003e94:	3302      	adds	r3, #2
 8003e96:	e7f3      	b.n	8003e80 <_printf_float+0x18c>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e7f1      	b.n	8003e80 <_printf_float+0x18c>
 8003e9c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003ea0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	db05      	blt.n	8003eb4 <_printf_float+0x1c0>
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	6123      	str	r3, [r4, #16]
 8003eac:	07d1      	lsls	r1, r2, #31
 8003eae:	d5e8      	bpl.n	8003e82 <_printf_float+0x18e>
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	e7e5      	b.n	8003e80 <_printf_float+0x18c>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bfcc      	ite	gt
 8003eb8:	2301      	movgt	r3, #1
 8003eba:	f1c3 0302 	rsble	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	e7de      	b.n	8003e80 <_printf_float+0x18c>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	055a      	lsls	r2, r3, #21
 8003ec6:	d407      	bmi.n	8003ed8 <_printf_float+0x1e4>
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	463a      	mov	r2, r7
 8003ecc:	4659      	mov	r1, fp
 8003ece:	4628      	mov	r0, r5
 8003ed0:	47b0      	blx	r6
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d129      	bne.n	8003f2a <_printf_float+0x236>
 8003ed6:	e764      	b.n	8003da2 <_printf_float+0xae>
 8003ed8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003edc:	f240 80d7 	bls.w	800408e <_printf_float+0x39a>
 8003ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f7fc fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8003eec:	b388      	cbz	r0, 8003f52 <_printf_float+0x25e>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	4a40      	ldr	r2, [pc, #256]	; (8003ff4 <_printf_float+0x300>)
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	47b0      	blx	r6
 8003ef8:	3001      	adds	r0, #1
 8003efa:	f43f af52 	beq.w	8003da2 <_printf_float+0xae>
 8003efe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003f02:	429a      	cmp	r2, r3
 8003f04:	db02      	blt.n	8003f0c <_printf_float+0x218>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	07d8      	lsls	r0, r3, #31
 8003f0a:	d50e      	bpl.n	8003f2a <_printf_float+0x236>
 8003f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f10:	4659      	mov	r1, fp
 8003f12:	4628      	mov	r0, r5
 8003f14:	47b0      	blx	r6
 8003f16:	3001      	adds	r0, #1
 8003f18:	f43f af43 	beq.w	8003da2 <_printf_float+0xae>
 8003f1c:	2700      	movs	r7, #0
 8003f1e:	f104 081a 	add.w	r8, r4, #26
 8003f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f24:	3b01      	subs	r3, #1
 8003f26:	42bb      	cmp	r3, r7
 8003f28:	dc09      	bgt.n	8003f3e <_printf_float+0x24a>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	079f      	lsls	r7, r3, #30
 8003f2e:	f100 80fd 	bmi.w	800412c <_printf_float+0x438>
 8003f32:	68e0      	ldr	r0, [r4, #12]
 8003f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f36:	4298      	cmp	r0, r3
 8003f38:	bfb8      	it	lt
 8003f3a:	4618      	movlt	r0, r3
 8003f3c:	e733      	b.n	8003da6 <_printf_float+0xb2>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4642      	mov	r2, r8
 8003f42:	4659      	mov	r1, fp
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b0      	blx	r6
 8003f48:	3001      	adds	r0, #1
 8003f4a:	f43f af2a 	beq.w	8003da2 <_printf_float+0xae>
 8003f4e:	3701      	adds	r7, #1
 8003f50:	e7e7      	b.n	8003f22 <_printf_float+0x22e>
 8003f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	dc2b      	bgt.n	8003fb0 <_printf_float+0x2bc>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4a26      	ldr	r2, [pc, #152]	; (8003ff4 <_printf_float+0x300>)
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	4628      	mov	r0, r5
 8003f60:	47b0      	blx	r6
 8003f62:	3001      	adds	r0, #1
 8003f64:	f43f af1d 	beq.w	8003da2 <_printf_float+0xae>
 8003f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f6a:	b923      	cbnz	r3, 8003f76 <_printf_float+0x282>
 8003f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f6e:	b913      	cbnz	r3, 8003f76 <_printf_float+0x282>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	07d9      	lsls	r1, r3, #31
 8003f74:	d5d9      	bpl.n	8003f2a <_printf_float+0x236>
 8003f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f7a:	4659      	mov	r1, fp
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	47b0      	blx	r6
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f af0e 	beq.w	8003da2 <_printf_float+0xae>
 8003f86:	f04f 0800 	mov.w	r8, #0
 8003f8a:	f104 091a 	add.w	r9, r4, #26
 8003f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f90:	425b      	negs	r3, r3
 8003f92:	4543      	cmp	r3, r8
 8003f94:	dc01      	bgt.n	8003f9a <_printf_float+0x2a6>
 8003f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f98:	e797      	b.n	8003eca <_printf_float+0x1d6>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	464a      	mov	r2, r9
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b0      	blx	r6
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f aefc 	beq.w	8003da2 <_printf_float+0xae>
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	e7ee      	b.n	8003f8e <_printf_float+0x29a>
 8003fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bfa8      	it	ge
 8003fb8:	461a      	movge	r2, r3
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	dd07      	ble.n	8003fd0 <_printf_float+0x2dc>
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	4659      	mov	r1, fp
 8003fc4:	463a      	mov	r2, r7
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b0      	blx	r6
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f43f aee9 	beq.w	8003da2 <_printf_float+0xae>
 8003fd0:	f104 031a 	add.w	r3, r4, #26
 8003fd4:	f04f 0a00 	mov.w	sl, #0
 8003fd8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fde:	e015      	b.n	800400c <_printf_float+0x318>
 8003fe0:	7fefffff 	.word	0x7fefffff
 8003fe4:	08008ebc 	.word	0x08008ebc
 8003fe8:	08008eb8 	.word	0x08008eb8
 8003fec:	08008ec4 	.word	0x08008ec4
 8003ff0:	08008ec0 	.word	0x08008ec0
 8003ff4:	0800880f 	.word	0x0800880f
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b0      	blx	r6
 8004002:	3001      	adds	r0, #1
 8004004:	f43f aecd 	beq.w	8003da2 <_printf_float+0xae>
 8004008:	f10a 0a01 	add.w	sl, sl, #1
 800400c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004010:	eba9 0308 	sub.w	r3, r9, r8
 8004014:	4553      	cmp	r3, sl
 8004016:	dcef      	bgt.n	8003ff8 <_printf_float+0x304>
 8004018:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800401c:	429a      	cmp	r2, r3
 800401e:	444f      	add	r7, r9
 8004020:	db14      	blt.n	800404c <_printf_float+0x358>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	07da      	lsls	r2, r3, #31
 8004026:	d411      	bmi.n	800404c <_printf_float+0x358>
 8004028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800402a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800402c:	eba3 0209 	sub.w	r2, r3, r9
 8004030:	eba3 0901 	sub.w	r9, r3, r1
 8004034:	4591      	cmp	r9, r2
 8004036:	bfa8      	it	ge
 8004038:	4691      	movge	r9, r2
 800403a:	f1b9 0f00 	cmp.w	r9, #0
 800403e:	dc0d      	bgt.n	800405c <_printf_float+0x368>
 8004040:	2700      	movs	r7, #0
 8004042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004046:	f104 081a 	add.w	r8, r4, #26
 800404a:	e018      	b.n	800407e <_printf_float+0x38a>
 800404c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004050:	4659      	mov	r1, fp
 8004052:	4628      	mov	r0, r5
 8004054:	47b0      	blx	r6
 8004056:	3001      	adds	r0, #1
 8004058:	d1e6      	bne.n	8004028 <_printf_float+0x334>
 800405a:	e6a2      	b.n	8003da2 <_printf_float+0xae>
 800405c:	464b      	mov	r3, r9
 800405e:	463a      	mov	r2, r7
 8004060:	4659      	mov	r1, fp
 8004062:	4628      	mov	r0, r5
 8004064:	47b0      	blx	r6
 8004066:	3001      	adds	r0, #1
 8004068:	d1ea      	bne.n	8004040 <_printf_float+0x34c>
 800406a:	e69a      	b.n	8003da2 <_printf_float+0xae>
 800406c:	2301      	movs	r3, #1
 800406e:	4642      	mov	r2, r8
 8004070:	4659      	mov	r1, fp
 8004072:	4628      	mov	r0, r5
 8004074:	47b0      	blx	r6
 8004076:	3001      	adds	r0, #1
 8004078:	f43f ae93 	beq.w	8003da2 <_printf_float+0xae>
 800407c:	3701      	adds	r7, #1
 800407e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	eba3 0309 	sub.w	r3, r3, r9
 8004088:	42bb      	cmp	r3, r7
 800408a:	dcef      	bgt.n	800406c <_printf_float+0x378>
 800408c:	e74d      	b.n	8003f2a <_printf_float+0x236>
 800408e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004090:	2a01      	cmp	r2, #1
 8004092:	dc01      	bgt.n	8004098 <_printf_float+0x3a4>
 8004094:	07db      	lsls	r3, r3, #31
 8004096:	d538      	bpl.n	800410a <_printf_float+0x416>
 8004098:	2301      	movs	r3, #1
 800409a:	463a      	mov	r2, r7
 800409c:	4659      	mov	r1, fp
 800409e:	4628      	mov	r0, r5
 80040a0:	47b0      	blx	r6
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f ae7d 	beq.w	8003da2 <_printf_float+0xae>
 80040a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040ac:	4659      	mov	r1, fp
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b0      	blx	r6
 80040b2:	3001      	adds	r0, #1
 80040b4:	f107 0701 	add.w	r7, r7, #1
 80040b8:	f43f ae73 	beq.w	8003da2 <_printf_float+0xae>
 80040bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040c2:	2200      	movs	r2, #0
 80040c4:	f103 38ff 	add.w	r8, r3, #4294967295
 80040c8:	2300      	movs	r3, #0
 80040ca:	f7fc fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80040ce:	b9c0      	cbnz	r0, 8004102 <_printf_float+0x40e>
 80040d0:	4643      	mov	r3, r8
 80040d2:	463a      	mov	r2, r7
 80040d4:	4659      	mov	r1, fp
 80040d6:	4628      	mov	r0, r5
 80040d8:	47b0      	blx	r6
 80040da:	3001      	adds	r0, #1
 80040dc:	d10d      	bne.n	80040fa <_printf_float+0x406>
 80040de:	e660      	b.n	8003da2 <_printf_float+0xae>
 80040e0:	2301      	movs	r3, #1
 80040e2:	4642      	mov	r2, r8
 80040e4:	4659      	mov	r1, fp
 80040e6:	4628      	mov	r0, r5
 80040e8:	47b0      	blx	r6
 80040ea:	3001      	adds	r0, #1
 80040ec:	f43f ae59 	beq.w	8003da2 <_printf_float+0xae>
 80040f0:	3701      	adds	r7, #1
 80040f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040f4:	3b01      	subs	r3, #1
 80040f6:	42bb      	cmp	r3, r7
 80040f8:	dcf2      	bgt.n	80040e0 <_printf_float+0x3ec>
 80040fa:	464b      	mov	r3, r9
 80040fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004100:	e6e4      	b.n	8003ecc <_printf_float+0x1d8>
 8004102:	2700      	movs	r7, #0
 8004104:	f104 081a 	add.w	r8, r4, #26
 8004108:	e7f3      	b.n	80040f2 <_printf_float+0x3fe>
 800410a:	2301      	movs	r3, #1
 800410c:	e7e1      	b.n	80040d2 <_printf_float+0x3de>
 800410e:	2301      	movs	r3, #1
 8004110:	4642      	mov	r2, r8
 8004112:	4659      	mov	r1, fp
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	3001      	adds	r0, #1
 800411a:	f43f ae42 	beq.w	8003da2 <_printf_float+0xae>
 800411e:	3701      	adds	r7, #1
 8004120:	68e3      	ldr	r3, [r4, #12]
 8004122:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	42bb      	cmp	r3, r7
 8004128:	dcf1      	bgt.n	800410e <_printf_float+0x41a>
 800412a:	e702      	b.n	8003f32 <_printf_float+0x23e>
 800412c:	2700      	movs	r7, #0
 800412e:	f104 0819 	add.w	r8, r4, #25
 8004132:	e7f5      	b.n	8004120 <_printf_float+0x42c>
 8004134:	2b00      	cmp	r3, #0
 8004136:	f43f ae94 	beq.w	8003e62 <_printf_float+0x16e>
 800413a:	f04f 0c00 	mov.w	ip, #0
 800413e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004142:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800414c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	463a      	mov	r2, r7
 8004154:	464b      	mov	r3, r9
 8004156:	4628      	mov	r0, r5
 8004158:	f7ff fd3a 	bl	8003bd0 <__cvt>
 800415c:	4607      	mov	r7, r0
 800415e:	e64f      	b.n	8003e00 <_printf_float+0x10c>

08004160 <_printf_common>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	4691      	mov	r9, r2
 8004166:	461f      	mov	r7, r3
 8004168:	688a      	ldr	r2, [r1, #8]
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	4606      	mov	r6, r0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfb8      	it	lt
 8004172:	4613      	movlt	r3, r2
 8004174:	f8c9 3000 	str.w	r3, [r9]
 8004178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800417c:	460c      	mov	r4, r1
 800417e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004182:	b112      	cbz	r2, 800418a <_printf_common+0x2a>
 8004184:	3301      	adds	r3, #1
 8004186:	f8c9 3000 	str.w	r3, [r9]
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	0699      	lsls	r1, r3, #26
 800418e:	bf42      	ittt	mi
 8004190:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004194:	3302      	addmi	r3, #2
 8004196:	f8c9 3000 	strmi.w	r3, [r9]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d107      	bne.n	80041b2 <_printf_common+0x52>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	f8d9 2000 	ldr.w	r2, [r9]
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	42ab      	cmp	r3, r5
 80041b0:	dc29      	bgt.n	8004206 <_printf_common+0xa6>
 80041b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	3300      	adds	r3, #0
 80041ba:	bf18      	it	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	0692      	lsls	r2, r2, #26
 80041c0:	d42e      	bmi.n	8004220 <_printf_common+0xc0>
 80041c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c6:	4639      	mov	r1, r7
 80041c8:	4630      	mov	r0, r6
 80041ca:	47c0      	blx	r8
 80041cc:	3001      	adds	r0, #1
 80041ce:	d021      	beq.n	8004214 <_printf_common+0xb4>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	68e5      	ldr	r5, [r4, #12]
 80041d4:	f003 0306 	and.w	r3, r3, #6
 80041d8:	2b04      	cmp	r3, #4
 80041da:	bf18      	it	ne
 80041dc:	2500      	movne	r5, #0
 80041de:	f8d9 2000 	ldr.w	r2, [r9]
 80041e2:	f04f 0900 	mov.w	r9, #0
 80041e6:	bf08      	it	eq
 80041e8:	1aad      	subeq	r5, r5, r2
 80041ea:	68a3      	ldr	r3, [r4, #8]
 80041ec:	6922      	ldr	r2, [r4, #16]
 80041ee:	bf08      	it	eq
 80041f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bfc4      	itt	gt
 80041f8:	1a9b      	subgt	r3, r3, r2
 80041fa:	18ed      	addgt	r5, r5, r3
 80041fc:	341a      	adds	r4, #26
 80041fe:	454d      	cmp	r5, r9
 8004200:	d11a      	bne.n	8004238 <_printf_common+0xd8>
 8004202:	2000      	movs	r0, #0
 8004204:	e008      	b.n	8004218 <_printf_common+0xb8>
 8004206:	2301      	movs	r3, #1
 8004208:	4652      	mov	r2, sl
 800420a:	4639      	mov	r1, r7
 800420c:	4630      	mov	r0, r6
 800420e:	47c0      	blx	r8
 8004210:	3001      	adds	r0, #1
 8004212:	d103      	bne.n	800421c <_printf_common+0xbc>
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421c:	3501      	adds	r5, #1
 800421e:	e7c2      	b.n	80041a6 <_printf_common+0x46>
 8004220:	2030      	movs	r0, #48	; 0x30
 8004222:	18e1      	adds	r1, r4, r3
 8004224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800422e:	4422      	add	r2, r4
 8004230:	3302      	adds	r3, #2
 8004232:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004236:	e7c4      	b.n	80041c2 <_printf_common+0x62>
 8004238:	2301      	movs	r3, #1
 800423a:	4622      	mov	r2, r4
 800423c:	4639      	mov	r1, r7
 800423e:	4630      	mov	r0, r6
 8004240:	47c0      	blx	r8
 8004242:	3001      	adds	r0, #1
 8004244:	d0e6      	beq.n	8004214 <_printf_common+0xb4>
 8004246:	f109 0901 	add.w	r9, r9, #1
 800424a:	e7d8      	b.n	80041fe <_printf_common+0x9e>

0800424c <_printf_i>:
 800424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004254:	460c      	mov	r4, r1
 8004256:	7e09      	ldrb	r1, [r1, #24]
 8004258:	b085      	sub	sp, #20
 800425a:	296e      	cmp	r1, #110	; 0x6e
 800425c:	4617      	mov	r7, r2
 800425e:	4606      	mov	r6, r0
 8004260:	4698      	mov	r8, r3
 8004262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004264:	f000 80b3 	beq.w	80043ce <_printf_i+0x182>
 8004268:	d822      	bhi.n	80042b0 <_printf_i+0x64>
 800426a:	2963      	cmp	r1, #99	; 0x63
 800426c:	d036      	beq.n	80042dc <_printf_i+0x90>
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x3a>
 8004270:	2900      	cmp	r1, #0
 8004272:	f000 80b9 	beq.w	80043e8 <_printf_i+0x19c>
 8004276:	2958      	cmp	r1, #88	; 0x58
 8004278:	f000 8083 	beq.w	8004382 <_printf_i+0x136>
 800427c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004284:	e032      	b.n	80042ec <_printf_i+0xa0>
 8004286:	2964      	cmp	r1, #100	; 0x64
 8004288:	d001      	beq.n	800428e <_printf_i+0x42>
 800428a:	2969      	cmp	r1, #105	; 0x69
 800428c:	d1f6      	bne.n	800427c <_printf_i+0x30>
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	6813      	ldr	r3, [r2, #0]
 8004292:	0605      	lsls	r5, r0, #24
 8004294:	f103 0104 	add.w	r1, r3, #4
 8004298:	d52a      	bpl.n	80042f0 <_printf_i+0xa4>
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da03      	bge.n	80042aa <_printf_i+0x5e>
 80042a2:	222d      	movs	r2, #45	; 0x2d
 80042a4:	425b      	negs	r3, r3
 80042a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042aa:	486f      	ldr	r0, [pc, #444]	; (8004468 <_printf_i+0x21c>)
 80042ac:	220a      	movs	r2, #10
 80042ae:	e039      	b.n	8004324 <_printf_i+0xd8>
 80042b0:	2973      	cmp	r1, #115	; 0x73
 80042b2:	f000 809d 	beq.w	80043f0 <_printf_i+0x1a4>
 80042b6:	d808      	bhi.n	80042ca <_printf_i+0x7e>
 80042b8:	296f      	cmp	r1, #111	; 0x6f
 80042ba:	d020      	beq.n	80042fe <_printf_i+0xb2>
 80042bc:	2970      	cmp	r1, #112	; 0x70
 80042be:	d1dd      	bne.n	800427c <_printf_i+0x30>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	f043 0320 	orr.w	r3, r3, #32
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	e003      	b.n	80042d2 <_printf_i+0x86>
 80042ca:	2975      	cmp	r1, #117	; 0x75
 80042cc:	d017      	beq.n	80042fe <_printf_i+0xb2>
 80042ce:	2978      	cmp	r1, #120	; 0x78
 80042d0:	d1d4      	bne.n	800427c <_printf_i+0x30>
 80042d2:	2378      	movs	r3, #120	; 0x78
 80042d4:	4865      	ldr	r0, [pc, #404]	; (800446c <_printf_i+0x220>)
 80042d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042da:	e055      	b.n	8004388 <_printf_i+0x13c>
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e2:	1d19      	adds	r1, r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6011      	str	r1, [r2, #0]
 80042e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ec:	2301      	movs	r3, #1
 80042ee:	e08c      	b.n	800440a <_printf_i+0x1be>
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042f6:	6011      	str	r1, [r2, #0]
 80042f8:	bf18      	it	ne
 80042fa:	b21b      	sxthne	r3, r3
 80042fc:	e7cf      	b.n	800429e <_printf_i+0x52>
 80042fe:	6813      	ldr	r3, [r2, #0]
 8004300:	6825      	ldr	r5, [r4, #0]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6010      	str	r0, [r2, #0]
 8004306:	0628      	lsls	r0, r5, #24
 8004308:	d501      	bpl.n	800430e <_printf_i+0xc2>
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0xc8>
 800430e:	0668      	lsls	r0, r5, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0xbe>
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	296f      	cmp	r1, #111	; 0x6f
 8004316:	bf14      	ite	ne
 8004318:	220a      	movne	r2, #10
 800431a:	2208      	moveq	r2, #8
 800431c:	4852      	ldr	r0, [pc, #328]	; (8004468 <_printf_i+0x21c>)
 800431e:	2100      	movs	r1, #0
 8004320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004324:	6865      	ldr	r5, [r4, #4]
 8004326:	2d00      	cmp	r5, #0
 8004328:	60a5      	str	r5, [r4, #8]
 800432a:	f2c0 8095 	blt.w	8004458 <_printf_i+0x20c>
 800432e:	6821      	ldr	r1, [r4, #0]
 8004330:	f021 0104 	bic.w	r1, r1, #4
 8004334:	6021      	str	r1, [r4, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d13d      	bne.n	80043b6 <_printf_i+0x16a>
 800433a:	2d00      	cmp	r5, #0
 800433c:	f040 808e 	bne.w	800445c <_printf_i+0x210>
 8004340:	4665      	mov	r5, ip
 8004342:	2a08      	cmp	r2, #8
 8004344:	d10b      	bne.n	800435e <_printf_i+0x112>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07db      	lsls	r3, r3, #31
 800434a:	d508      	bpl.n	800435e <_printf_i+0x112>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	bfde      	ittt	le
 8004354:	2330      	movle	r3, #48	; 0x30
 8004356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800435a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800435e:	ebac 0305 	sub.w	r3, ip, r5
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	f8cd 8000 	str.w	r8, [sp]
 8004368:	463b      	mov	r3, r7
 800436a:	aa03      	add	r2, sp, #12
 800436c:	4621      	mov	r1, r4
 800436e:	4630      	mov	r0, r6
 8004370:	f7ff fef6 	bl	8004160 <_printf_common>
 8004374:	3001      	adds	r0, #1
 8004376:	d14d      	bne.n	8004414 <_printf_i+0x1c8>
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	b005      	add	sp, #20
 800437e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004382:	4839      	ldr	r0, [pc, #228]	; (8004468 <_printf_i+0x21c>)
 8004384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004388:	6813      	ldr	r3, [r2, #0]
 800438a:	6821      	ldr	r1, [r4, #0]
 800438c:	1d1d      	adds	r5, r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6015      	str	r5, [r2, #0]
 8004392:	060a      	lsls	r2, r1, #24
 8004394:	d50b      	bpl.n	80043ae <_printf_i+0x162>
 8004396:	07ca      	lsls	r2, r1, #31
 8004398:	bf44      	itt	mi
 800439a:	f041 0120 	orrmi.w	r1, r1, #32
 800439e:	6021      	strmi	r1, [r4, #0]
 80043a0:	b91b      	cbnz	r3, 80043aa <_printf_i+0x15e>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	f022 0220 	bic.w	r2, r2, #32
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	2210      	movs	r2, #16
 80043ac:	e7b7      	b.n	800431e <_printf_i+0xd2>
 80043ae:	064d      	lsls	r5, r1, #25
 80043b0:	bf48      	it	mi
 80043b2:	b29b      	uxthmi	r3, r3
 80043b4:	e7ef      	b.n	8004396 <_printf_i+0x14a>
 80043b6:	4665      	mov	r5, ip
 80043b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80043bc:	fb02 3311 	mls	r3, r2, r1, r3
 80043c0:	5cc3      	ldrb	r3, [r0, r3]
 80043c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043c6:	460b      	mov	r3, r1
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d1f5      	bne.n	80043b8 <_printf_i+0x16c>
 80043cc:	e7b9      	b.n	8004342 <_printf_i+0xf6>
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1d18      	adds	r0, r3, #4
 80043d4:	6961      	ldr	r1, [r4, #20]
 80043d6:	6010      	str	r0, [r2, #0]
 80043d8:	0628      	lsls	r0, r5, #24
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	d501      	bpl.n	80043e2 <_printf_i+0x196>
 80043de:	6019      	str	r1, [r3, #0]
 80043e0:	e002      	b.n	80043e8 <_printf_i+0x19c>
 80043e2:	066a      	lsls	r2, r5, #25
 80043e4:	d5fb      	bpl.n	80043de <_printf_i+0x192>
 80043e6:	8019      	strh	r1, [r3, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	4665      	mov	r5, ip
 80043ec:	6123      	str	r3, [r4, #16]
 80043ee:	e7b9      	b.n	8004364 <_printf_i+0x118>
 80043f0:	6813      	ldr	r3, [r2, #0]
 80043f2:	1d19      	adds	r1, r3, #4
 80043f4:	6011      	str	r1, [r2, #0]
 80043f6:	681d      	ldr	r5, [r3, #0]
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	2100      	movs	r1, #0
 80043fc:	4628      	mov	r0, r5
 80043fe:	f002 fc27 	bl	8006c50 <memchr>
 8004402:	b108      	cbz	r0, 8004408 <_printf_i+0x1bc>
 8004404:	1b40      	subs	r0, r0, r5
 8004406:	6060      	str	r0, [r4, #4]
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	2300      	movs	r3, #0
 800440e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004412:	e7a7      	b.n	8004364 <_printf_i+0x118>
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	462a      	mov	r2, r5
 8004418:	4639      	mov	r1, r7
 800441a:	4630      	mov	r0, r6
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d0aa      	beq.n	8004378 <_printf_i+0x12c>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	079b      	lsls	r3, r3, #30
 8004426:	d413      	bmi.n	8004450 <_printf_i+0x204>
 8004428:	68e0      	ldr	r0, [r4, #12]
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	4298      	cmp	r0, r3
 800442e:	bfb8      	it	lt
 8004430:	4618      	movlt	r0, r3
 8004432:	e7a3      	b.n	800437c <_printf_i+0x130>
 8004434:	2301      	movs	r3, #1
 8004436:	464a      	mov	r2, r9
 8004438:	4639      	mov	r1, r7
 800443a:	4630      	mov	r0, r6
 800443c:	47c0      	blx	r8
 800443e:	3001      	adds	r0, #1
 8004440:	d09a      	beq.n	8004378 <_printf_i+0x12c>
 8004442:	3501      	adds	r5, #1
 8004444:	68e3      	ldr	r3, [r4, #12]
 8004446:	9a03      	ldr	r2, [sp, #12]
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	42ab      	cmp	r3, r5
 800444c:	dcf2      	bgt.n	8004434 <_printf_i+0x1e8>
 800444e:	e7eb      	b.n	8004428 <_printf_i+0x1dc>
 8004450:	2500      	movs	r5, #0
 8004452:	f104 0919 	add.w	r9, r4, #25
 8004456:	e7f5      	b.n	8004444 <_printf_i+0x1f8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ac      	bne.n	80043b6 <_printf_i+0x16a>
 800445c:	7803      	ldrb	r3, [r0, #0]
 800445e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004466:	e76c      	b.n	8004342 <_printf_i+0xf6>
 8004468:	08008ec8 	.word	0x08008ec8
 800446c:	08008ed9 	.word	0x08008ed9

08004470 <_scanf_float>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	469a      	mov	sl, r3
 8004476:	688b      	ldr	r3, [r1, #8]
 8004478:	4616      	mov	r6, r2
 800447a:	1e5a      	subs	r2, r3, #1
 800447c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004480:	bf88      	it	hi
 8004482:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004486:	b087      	sub	sp, #28
 8004488:	bf85      	ittet	hi
 800448a:	189b      	addhi	r3, r3, r2
 800448c:	9301      	strhi	r3, [sp, #4]
 800448e:	2300      	movls	r3, #0
 8004490:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004494:	4688      	mov	r8, r1
 8004496:	f04f 0b00 	mov.w	fp, #0
 800449a:	bf8c      	ite	hi
 800449c:	608b      	strhi	r3, [r1, #8]
 800449e:	9301      	strls	r3, [sp, #4]
 80044a0:	680b      	ldr	r3, [r1, #0]
 80044a2:	4607      	mov	r7, r0
 80044a4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80044a8:	f848 3b1c 	str.w	r3, [r8], #28
 80044ac:	460c      	mov	r4, r1
 80044ae:	4645      	mov	r5, r8
 80044b0:	465a      	mov	r2, fp
 80044b2:	46d9      	mov	r9, fp
 80044b4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80044b8:	f8cd b008 	str.w	fp, [sp, #8]
 80044bc:	68a1      	ldr	r1, [r4, #8]
 80044be:	b181      	cbz	r1, 80044e2 <_scanf_float+0x72>
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b49      	cmp	r3, #73	; 0x49
 80044c6:	d071      	beq.n	80045ac <_scanf_float+0x13c>
 80044c8:	d84d      	bhi.n	8004566 <_scanf_float+0xf6>
 80044ca:	2b39      	cmp	r3, #57	; 0x39
 80044cc:	d840      	bhi.n	8004550 <_scanf_float+0xe0>
 80044ce:	2b31      	cmp	r3, #49	; 0x31
 80044d0:	f080 8088 	bcs.w	80045e4 <_scanf_float+0x174>
 80044d4:	2b2d      	cmp	r3, #45	; 0x2d
 80044d6:	f000 8090 	beq.w	80045fa <_scanf_float+0x18a>
 80044da:	d815      	bhi.n	8004508 <_scanf_float+0x98>
 80044dc:	2b2b      	cmp	r3, #43	; 0x2b
 80044de:	f000 808c 	beq.w	80045fa <_scanf_float+0x18a>
 80044e2:	f1b9 0f00 	cmp.w	r9, #0
 80044e6:	d003      	beq.n	80044f0 <_scanf_float+0x80>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ee:	6023      	str	r3, [r4, #0]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	f200 80ea 	bhi.w	80046cc <_scanf_float+0x25c>
 80044f8:	4545      	cmp	r5, r8
 80044fa:	f200 80dc 	bhi.w	80046b6 <_scanf_float+0x246>
 80044fe:	2601      	movs	r6, #1
 8004500:	4630      	mov	r0, r6
 8004502:	b007      	add	sp, #28
 8004504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004508:	2b2e      	cmp	r3, #46	; 0x2e
 800450a:	f000 809f 	beq.w	800464c <_scanf_float+0x1dc>
 800450e:	2b30      	cmp	r3, #48	; 0x30
 8004510:	d1e7      	bne.n	80044e2 <_scanf_float+0x72>
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004518:	d064      	beq.n	80045e4 <_scanf_float+0x174>
 800451a:	9b01      	ldr	r3, [sp, #4]
 800451c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004520:	6020      	str	r0, [r4, #0]
 8004522:	f109 0901 	add.w	r9, r9, #1
 8004526:	b11b      	cbz	r3, 8004530 <_scanf_float+0xc0>
 8004528:	3b01      	subs	r3, #1
 800452a:	3101      	adds	r1, #1
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	60a1      	str	r1, [r4, #8]
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	60a3      	str	r3, [r4, #8]
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	3301      	adds	r3, #1
 800453a:	6123      	str	r3, [r4, #16]
 800453c:	6873      	ldr	r3, [r6, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	6073      	str	r3, [r6, #4]
 8004544:	f340 80ac 	ble.w	80046a0 <_scanf_float+0x230>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	6033      	str	r3, [r6, #0]
 800454e:	e7b5      	b.n	80044bc <_scanf_float+0x4c>
 8004550:	2b45      	cmp	r3, #69	; 0x45
 8004552:	f000 8085 	beq.w	8004660 <_scanf_float+0x1f0>
 8004556:	2b46      	cmp	r3, #70	; 0x46
 8004558:	d06a      	beq.n	8004630 <_scanf_float+0x1c0>
 800455a:	2b41      	cmp	r3, #65	; 0x41
 800455c:	d1c1      	bne.n	80044e2 <_scanf_float+0x72>
 800455e:	2a01      	cmp	r2, #1
 8004560:	d1bf      	bne.n	80044e2 <_scanf_float+0x72>
 8004562:	2202      	movs	r2, #2
 8004564:	e046      	b.n	80045f4 <_scanf_float+0x184>
 8004566:	2b65      	cmp	r3, #101	; 0x65
 8004568:	d07a      	beq.n	8004660 <_scanf_float+0x1f0>
 800456a:	d818      	bhi.n	800459e <_scanf_float+0x12e>
 800456c:	2b54      	cmp	r3, #84	; 0x54
 800456e:	d066      	beq.n	800463e <_scanf_float+0x1ce>
 8004570:	d811      	bhi.n	8004596 <_scanf_float+0x126>
 8004572:	2b4e      	cmp	r3, #78	; 0x4e
 8004574:	d1b5      	bne.n	80044e2 <_scanf_float+0x72>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d146      	bne.n	8004608 <_scanf_float+0x198>
 800457a:	f1b9 0f00 	cmp.w	r9, #0
 800457e:	d145      	bne.n	800460c <_scanf_float+0x19c>
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004586:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800458a:	d13f      	bne.n	800460c <_scanf_float+0x19c>
 800458c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004590:	6021      	str	r1, [r4, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	e02e      	b.n	80045f4 <_scanf_float+0x184>
 8004596:	2b59      	cmp	r3, #89	; 0x59
 8004598:	d01e      	beq.n	80045d8 <_scanf_float+0x168>
 800459a:	2b61      	cmp	r3, #97	; 0x61
 800459c:	e7de      	b.n	800455c <_scanf_float+0xec>
 800459e:	2b6e      	cmp	r3, #110	; 0x6e
 80045a0:	d0e9      	beq.n	8004576 <_scanf_float+0x106>
 80045a2:	d815      	bhi.n	80045d0 <_scanf_float+0x160>
 80045a4:	2b66      	cmp	r3, #102	; 0x66
 80045a6:	d043      	beq.n	8004630 <_scanf_float+0x1c0>
 80045a8:	2b69      	cmp	r3, #105	; 0x69
 80045aa:	d19a      	bne.n	80044e2 <_scanf_float+0x72>
 80045ac:	f1bb 0f00 	cmp.w	fp, #0
 80045b0:	d138      	bne.n	8004624 <_scanf_float+0x1b4>
 80045b2:	f1b9 0f00 	cmp.w	r9, #0
 80045b6:	d197      	bne.n	80044e8 <_scanf_float+0x78>
 80045b8:	6821      	ldr	r1, [r4, #0]
 80045ba:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80045be:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80045c2:	d195      	bne.n	80044f0 <_scanf_float+0x80>
 80045c4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80045c8:	6021      	str	r1, [r4, #0]
 80045ca:	f04f 0b01 	mov.w	fp, #1
 80045ce:	e011      	b.n	80045f4 <_scanf_float+0x184>
 80045d0:	2b74      	cmp	r3, #116	; 0x74
 80045d2:	d034      	beq.n	800463e <_scanf_float+0x1ce>
 80045d4:	2b79      	cmp	r3, #121	; 0x79
 80045d6:	d184      	bne.n	80044e2 <_scanf_float+0x72>
 80045d8:	f1bb 0f07 	cmp.w	fp, #7
 80045dc:	d181      	bne.n	80044e2 <_scanf_float+0x72>
 80045de:	f04f 0b08 	mov.w	fp, #8
 80045e2:	e007      	b.n	80045f4 <_scanf_float+0x184>
 80045e4:	eb12 0f0b 	cmn.w	r2, fp
 80045e8:	f47f af7b 	bne.w	80044e2 <_scanf_float+0x72>
 80045ec:	6821      	ldr	r1, [r4, #0]
 80045ee:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80045f2:	6021      	str	r1, [r4, #0]
 80045f4:	702b      	strb	r3, [r5, #0]
 80045f6:	3501      	adds	r5, #1
 80045f8:	e79a      	b.n	8004530 <_scanf_float+0xc0>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	0608      	lsls	r0, r1, #24
 80045fe:	f57f af70 	bpl.w	80044e2 <_scanf_float+0x72>
 8004602:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004606:	e7f4      	b.n	80045f2 <_scanf_float+0x182>
 8004608:	2a02      	cmp	r2, #2
 800460a:	d047      	beq.n	800469c <_scanf_float+0x22c>
 800460c:	f1bb 0f01 	cmp.w	fp, #1
 8004610:	d003      	beq.n	800461a <_scanf_float+0x1aa>
 8004612:	f1bb 0f04 	cmp.w	fp, #4
 8004616:	f47f af64 	bne.w	80044e2 <_scanf_float+0x72>
 800461a:	f10b 0b01 	add.w	fp, fp, #1
 800461e:	fa5f fb8b 	uxtb.w	fp, fp
 8004622:	e7e7      	b.n	80045f4 <_scanf_float+0x184>
 8004624:	f1bb 0f03 	cmp.w	fp, #3
 8004628:	d0f7      	beq.n	800461a <_scanf_float+0x1aa>
 800462a:	f1bb 0f05 	cmp.w	fp, #5
 800462e:	e7f2      	b.n	8004616 <_scanf_float+0x1a6>
 8004630:	f1bb 0f02 	cmp.w	fp, #2
 8004634:	f47f af55 	bne.w	80044e2 <_scanf_float+0x72>
 8004638:	f04f 0b03 	mov.w	fp, #3
 800463c:	e7da      	b.n	80045f4 <_scanf_float+0x184>
 800463e:	f1bb 0f06 	cmp.w	fp, #6
 8004642:	f47f af4e 	bne.w	80044e2 <_scanf_float+0x72>
 8004646:	f04f 0b07 	mov.w	fp, #7
 800464a:	e7d3      	b.n	80045f4 <_scanf_float+0x184>
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	0588      	lsls	r0, r1, #22
 8004650:	f57f af47 	bpl.w	80044e2 <_scanf_float+0x72>
 8004654:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004658:	6021      	str	r1, [r4, #0]
 800465a:	f8cd 9008 	str.w	r9, [sp, #8]
 800465e:	e7c9      	b.n	80045f4 <_scanf_float+0x184>
 8004660:	6821      	ldr	r1, [r4, #0]
 8004662:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004666:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800466a:	d006      	beq.n	800467a <_scanf_float+0x20a>
 800466c:	0548      	lsls	r0, r1, #21
 800466e:	f57f af38 	bpl.w	80044e2 <_scanf_float+0x72>
 8004672:	f1b9 0f00 	cmp.w	r9, #0
 8004676:	f43f af3b 	beq.w	80044f0 <_scanf_float+0x80>
 800467a:	0588      	lsls	r0, r1, #22
 800467c:	bf58      	it	pl
 800467e:	9802      	ldrpl	r0, [sp, #8]
 8004680:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004684:	bf58      	it	pl
 8004686:	eba9 0000 	subpl.w	r0, r9, r0
 800468a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800468e:	bf58      	it	pl
 8004690:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004694:	6021      	str	r1, [r4, #0]
 8004696:	f04f 0900 	mov.w	r9, #0
 800469a:	e7ab      	b.n	80045f4 <_scanf_float+0x184>
 800469c:	2203      	movs	r2, #3
 800469e:	e7a9      	b.n	80045f4 <_scanf_float+0x184>
 80046a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80046a4:	4631      	mov	r1, r6
 80046a6:	4638      	mov	r0, r7
 80046a8:	9205      	str	r2, [sp, #20]
 80046aa:	4798      	blx	r3
 80046ac:	9a05      	ldr	r2, [sp, #20]
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f43f af04 	beq.w	80044bc <_scanf_float+0x4c>
 80046b4:	e715      	b.n	80044e2 <_scanf_float+0x72>
 80046b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046ba:	4632      	mov	r2, r6
 80046bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80046c0:	4638      	mov	r0, r7
 80046c2:	4798      	blx	r3
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	e715      	b.n	80044f8 <_scanf_float+0x88>
 80046cc:	f10b 33ff 	add.w	r3, fp, #4294967295
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d80a      	bhi.n	80046ea <_scanf_float+0x27a>
 80046d4:	f1bb 0f02 	cmp.w	fp, #2
 80046d8:	d967      	bls.n	80047aa <_scanf_float+0x33a>
 80046da:	f1ab 0b03 	sub.w	fp, fp, #3
 80046de:	fa5f fb8b 	uxtb.w	fp, fp
 80046e2:	eba5 0b0b 	sub.w	fp, r5, fp
 80046e6:	455d      	cmp	r5, fp
 80046e8:	d14a      	bne.n	8004780 <_scanf_float+0x310>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	05da      	lsls	r2, r3, #23
 80046ee:	d51f      	bpl.n	8004730 <_scanf_float+0x2c0>
 80046f0:	055b      	lsls	r3, r3, #21
 80046f2:	d467      	bmi.n	80047c4 <_scanf_float+0x354>
 80046f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	2965      	cmp	r1, #101	; 0x65
 80046fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8004700:	f105 3bff 	add.w	fp, r5, #4294967295
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	d00d      	beq.n	8004724 <_scanf_float+0x2b4>
 8004708:	2945      	cmp	r1, #69	; 0x45
 800470a:	d00b      	beq.n	8004724 <_scanf_float+0x2b4>
 800470c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004710:	4632      	mov	r2, r6
 8004712:	4638      	mov	r0, r7
 8004714:	4798      	blx	r3
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800471c:	3b01      	subs	r3, #1
 800471e:	f1a5 0b02 	sub.w	fp, r5, #2
 8004722:	6123      	str	r3, [r4, #16]
 8004724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004728:	4632      	mov	r2, r6
 800472a:	4638      	mov	r0, r7
 800472c:	4798      	blx	r3
 800472e:	465d      	mov	r5, fp
 8004730:	6826      	ldr	r6, [r4, #0]
 8004732:	f016 0610 	ands.w	r6, r6, #16
 8004736:	d176      	bne.n	8004826 <_scanf_float+0x3b6>
 8004738:	702e      	strb	r6, [r5, #0]
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004744:	d141      	bne.n	80047ca <_scanf_float+0x35a>
 8004746:	9b02      	ldr	r3, [sp, #8]
 8004748:	eba9 0303 	sub.w	r3, r9, r3
 800474c:	425a      	negs	r2, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d148      	bne.n	80047e4 <_scanf_float+0x374>
 8004752:	4641      	mov	r1, r8
 8004754:	2200      	movs	r2, #0
 8004756:	4638      	mov	r0, r7
 8004758:	f000 ff36 	bl	80055c8 <_strtod_r>
 800475c:	6825      	ldr	r5, [r4, #0]
 800475e:	4680      	mov	r8, r0
 8004760:	f015 0f02 	tst.w	r5, #2
 8004764:	4689      	mov	r9, r1
 8004766:	f8da 3000 	ldr.w	r3, [sl]
 800476a:	d046      	beq.n	80047fa <_scanf_float+0x38a>
 800476c:	1d1a      	adds	r2, r3, #4
 800476e:	f8ca 2000 	str.w	r2, [sl]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	e9c3 8900 	strd	r8, r9, [r3]
 8004778:	68e3      	ldr	r3, [r4, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60e3      	str	r3, [r4, #12]
 800477e:	e6bf      	b.n	8004500 <_scanf_float+0x90>
 8004780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004784:	4632      	mov	r2, r6
 8004786:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800478a:	4638      	mov	r0, r7
 800478c:	4798      	blx	r3
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	3b01      	subs	r3, #1
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	e7a7      	b.n	80046e6 <_scanf_float+0x276>
 8004796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800479a:	4632      	mov	r2, r6
 800479c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80047a0:	4638      	mov	r0, r7
 80047a2:	4798      	blx	r3
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4545      	cmp	r5, r8
 80047ac:	d8f3      	bhi.n	8004796 <_scanf_float+0x326>
 80047ae:	e6a6      	b.n	80044fe <_scanf_float+0x8e>
 80047b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047b4:	4632      	mov	r2, r6
 80047b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80047ba:	4638      	mov	r0, r7
 80047bc:	4798      	blx	r3
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	6123      	str	r3, [r4, #16]
 80047c4:	4545      	cmp	r5, r8
 80047c6:	d8f3      	bhi.n	80047b0 <_scanf_float+0x340>
 80047c8:	e699      	b.n	80044fe <_scanf_float+0x8e>
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0c0      	beq.n	8004752 <_scanf_float+0x2e2>
 80047d0:	9904      	ldr	r1, [sp, #16]
 80047d2:	230a      	movs	r3, #10
 80047d4:	4632      	mov	r2, r6
 80047d6:	3101      	adds	r1, #1
 80047d8:	4638      	mov	r0, r7
 80047da:	f000 ff81 	bl	80056e0 <_strtol_r>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	9d04      	ldr	r5, [sp, #16]
 80047e2:	1ac2      	subs	r2, r0, r3
 80047e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80047e8:	429d      	cmp	r5, r3
 80047ea:	bf28      	it	cs
 80047ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80047f0:	490e      	ldr	r1, [pc, #56]	; (800482c <_scanf_float+0x3bc>)
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f838 	bl	8004868 <siprintf>
 80047f8:	e7ab      	b.n	8004752 <_scanf_float+0x2e2>
 80047fa:	1d1f      	adds	r7, r3, #4
 80047fc:	f015 0504 	ands.w	r5, r5, #4
 8004800:	f8ca 7000 	str.w	r7, [sl]
 8004804:	d1b5      	bne.n	8004772 <_scanf_float+0x302>
 8004806:	681f      	ldr	r7, [r3, #0]
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	f7fc f8fe 	bl	8000a0c <__aeabi_dcmpun>
 8004810:	b120      	cbz	r0, 800481c <_scanf_float+0x3ac>
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f824 	bl	8004860 <nanf>
 8004818:	6038      	str	r0, [r7, #0]
 800481a:	e7ad      	b.n	8004778 <_scanf_float+0x308>
 800481c:	4640      	mov	r0, r8
 800481e:	4649      	mov	r1, r9
 8004820:	f7fc f952 	bl	8000ac8 <__aeabi_d2f>
 8004824:	e7f8      	b.n	8004818 <_scanf_float+0x3a8>
 8004826:	2600      	movs	r6, #0
 8004828:	e66a      	b.n	8004500 <_scanf_float+0x90>
 800482a:	bf00      	nop
 800482c:	08008eea 	.word	0x08008eea

08004830 <iprintf>:
 8004830:	b40f      	push	{r0, r1, r2, r3}
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <iprintf+0x2c>)
 8004834:	b513      	push	{r0, r1, r4, lr}
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	b124      	cbz	r4, 8004844 <iprintf+0x14>
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	b913      	cbnz	r3, 8004844 <iprintf+0x14>
 800483e:	4620      	mov	r0, r4
 8004840:	f001 fe06 	bl	8006450 <__sinit>
 8004844:	ab05      	add	r3, sp, #20
 8004846:	9a04      	ldr	r2, [sp, #16]
 8004848:	68a1      	ldr	r1, [r4, #8]
 800484a:	4620      	mov	r0, r4
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f003 f9dd 	bl	8007c0c <_vfiprintf_r>
 8004852:	b002      	add	sp, #8
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr
 800485c:	20000014 	.word	0x20000014

08004860 <nanf>:
 8004860:	4800      	ldr	r0, [pc, #0]	; (8004864 <nanf+0x4>)
 8004862:	4770      	bx	lr
 8004864:	7fc00000 	.word	0x7fc00000

08004868 <siprintf>:
 8004868:	b40e      	push	{r1, r2, r3}
 800486a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800486e:	b500      	push	{lr}
 8004870:	b09c      	sub	sp, #112	; 0x70
 8004872:	ab1d      	add	r3, sp, #116	; 0x74
 8004874:	9002      	str	r0, [sp, #8]
 8004876:	9006      	str	r0, [sp, #24]
 8004878:	9107      	str	r1, [sp, #28]
 800487a:	9104      	str	r1, [sp, #16]
 800487c:	4808      	ldr	r0, [pc, #32]	; (80048a0 <siprintf+0x38>)
 800487e:	4909      	ldr	r1, [pc, #36]	; (80048a4 <siprintf+0x3c>)
 8004880:	f853 2b04 	ldr.w	r2, [r3], #4
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	6800      	ldr	r0, [r0, #0]
 8004888:	a902      	add	r1, sp, #8
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	f002 fef4 	bl	8007678 <_svfiprintf_r>
 8004890:	2200      	movs	r2, #0
 8004892:	9b02      	ldr	r3, [sp, #8]
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	b01c      	add	sp, #112	; 0x70
 8004898:	f85d eb04 	ldr.w	lr, [sp], #4
 800489c:	b003      	add	sp, #12
 800489e:	4770      	bx	lr
 80048a0:	20000014 	.word	0x20000014
 80048a4:	ffff0208 	.word	0xffff0208

080048a8 <siscanf>:
 80048a8:	b40e      	push	{r1, r2, r3}
 80048aa:	f44f 7201 	mov.w	r2, #516	; 0x204
 80048ae:	b530      	push	{r4, r5, lr}
 80048b0:	b09c      	sub	sp, #112	; 0x70
 80048b2:	ac1f      	add	r4, sp, #124	; 0x7c
 80048b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80048b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80048bc:	9002      	str	r0, [sp, #8]
 80048be:	9006      	str	r0, [sp, #24]
 80048c0:	f7fb fc46 	bl	8000150 <strlen>
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <siscanf+0x4c>)
 80048c6:	9003      	str	r0, [sp, #12]
 80048c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ca:	2300      	movs	r3, #0
 80048cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80048ce:	9314      	str	r3, [sp, #80]	; 0x50
 80048d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048d4:	9007      	str	r0, [sp, #28]
 80048d6:	4808      	ldr	r0, [pc, #32]	; (80048f8 <siscanf+0x50>)
 80048d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048dc:	462a      	mov	r2, r5
 80048de:	4623      	mov	r3, r4
 80048e0:	a902      	add	r1, sp, #8
 80048e2:	6800      	ldr	r0, [r0, #0]
 80048e4:	9401      	str	r4, [sp, #4]
 80048e6:	f003 f819 	bl	800791c <__ssvfiscanf_r>
 80048ea:	b01c      	add	sp, #112	; 0x70
 80048ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	20000014 	.word	0x20000014

080048fc <__sread>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	460c      	mov	r4, r1
 8004900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004904:	f003 fbf0 	bl	80080e8 <_read_r>
 8004908:	2800      	cmp	r0, #0
 800490a:	bfab      	itete	ge
 800490c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800490e:	89a3      	ldrhlt	r3, [r4, #12]
 8004910:	181b      	addge	r3, r3, r0
 8004912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004916:	bfac      	ite	ge
 8004918:	6563      	strge	r3, [r4, #84]	; 0x54
 800491a:	81a3      	strhlt	r3, [r4, #12]
 800491c:	bd10      	pop	{r4, pc}

0800491e <__seofread>:
 800491e:	2000      	movs	r0, #0
 8004920:	4770      	bx	lr

08004922 <__swrite>:
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	461f      	mov	r7, r3
 8004928:	898b      	ldrh	r3, [r1, #12]
 800492a:	4605      	mov	r5, r0
 800492c:	05db      	lsls	r3, r3, #23
 800492e:	460c      	mov	r4, r1
 8004930:	4616      	mov	r6, r2
 8004932:	d505      	bpl.n	8004940 <__swrite+0x1e>
 8004934:	2302      	movs	r3, #2
 8004936:	2200      	movs	r2, #0
 8004938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493c:	f002 f95c 	bl	8006bf8 <_lseek_r>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	4632      	mov	r2, r6
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	81a3      	strh	r3, [r4, #12]
 800494a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800494e:	463b      	mov	r3, r7
 8004950:	4628      	mov	r0, r5
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	f000 bed5 	b.w	8005704 <_write_r>

0800495a <__sseek>:
 800495a:	b510      	push	{r4, lr}
 800495c:	460c      	mov	r4, r1
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f002 f949 	bl	8006bf8 <_lseek_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	bf15      	itete	ne
 800496c:	6560      	strne	r0, [r4, #84]	; 0x54
 800496e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004976:	81a3      	strheq	r3, [r4, #12]
 8004978:	bf18      	it	ne
 800497a:	81a3      	strhne	r3, [r4, #12]
 800497c:	bd10      	pop	{r4, pc}

0800497e <__sclose>:
 800497e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004982:	f000 bed1 	b.w	8005728 <_close_r>

08004986 <sulp>:
 8004986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498a:	460f      	mov	r7, r1
 800498c:	4690      	mov	r8, r2
 800498e:	f002 fc37 	bl	8007200 <__ulp>
 8004992:	4604      	mov	r4, r0
 8004994:	460d      	mov	r5, r1
 8004996:	f1b8 0f00 	cmp.w	r8, #0
 800499a:	d011      	beq.n	80049c0 <sulp+0x3a>
 800499c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80049a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dd0b      	ble.n	80049c0 <sulp+0x3a>
 80049a8:	2400      	movs	r4, #0
 80049aa:	051b      	lsls	r3, r3, #20
 80049ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f7fb fd8e 	bl	80004d8 <__aeabi_dmul>
 80049bc:	4604      	mov	r4, r0
 80049be:	460d      	mov	r5, r1
 80049c0:	4620      	mov	r0, r4
 80049c2:	4629      	mov	r1, r5
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049c8 <_strtod_l>:
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	461f      	mov	r7, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	b0a1      	sub	sp, #132	; 0x84
 80049d2:	4683      	mov	fp, r0
 80049d4:	4638      	mov	r0, r7
 80049d6:	460e      	mov	r6, r1
 80049d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80049da:	931c      	str	r3, [sp, #112]	; 0x70
 80049dc:	f002 f8fc 	bl	8006bd8 <__localeconv_l>
 80049e0:	4680      	mov	r8, r0
 80049e2:	6800      	ldr	r0, [r0, #0]
 80049e4:	f7fb fbb4 	bl	8000150 <strlen>
 80049e8:	f04f 0900 	mov.w	r9, #0
 80049ec:	4604      	mov	r4, r0
 80049ee:	f04f 0a00 	mov.w	sl, #0
 80049f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80049f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	2a0d      	cmp	r2, #13
 80049fa:	d832      	bhi.n	8004a62 <_strtod_l+0x9a>
 80049fc:	2a09      	cmp	r2, #9
 80049fe:	d236      	bcs.n	8004a6e <_strtod_l+0xa6>
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d03e      	beq.n	8004a82 <_strtod_l+0xba>
 8004a04:	2300      	movs	r3, #0
 8004a06:	930d      	str	r3, [sp, #52]	; 0x34
 8004a08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a0a:	782b      	ldrb	r3, [r5, #0]
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	f040 80ac 	bne.w	8004b6a <_strtod_l+0x1a2>
 8004a12:	786b      	ldrb	r3, [r5, #1]
 8004a14:	2b58      	cmp	r3, #88	; 0x58
 8004a16:	d001      	beq.n	8004a1c <_strtod_l+0x54>
 8004a18:	2b78      	cmp	r3, #120	; 0x78
 8004a1a:	d167      	bne.n	8004aec <_strtod_l+0x124>
 8004a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a1e:	9702      	str	r7, [sp, #8]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	ab1c      	add	r3, sp, #112	; 0x70
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4a89      	ldr	r2, [pc, #548]	; (8004c4c <_strtod_l+0x284>)
 8004a28:	ab1d      	add	r3, sp, #116	; 0x74
 8004a2a:	a91b      	add	r1, sp, #108	; 0x6c
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	f001 fde9 	bl	8006604 <__gethex>
 8004a32:	f010 0407 	ands.w	r4, r0, #7
 8004a36:	4606      	mov	r6, r0
 8004a38:	d005      	beq.n	8004a46 <_strtod_l+0x7e>
 8004a3a:	2c06      	cmp	r4, #6
 8004a3c:	d12b      	bne.n	8004a96 <_strtod_l+0xce>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	3501      	adds	r5, #1
 8004a42:	951b      	str	r5, [sp, #108]	; 0x6c
 8004a44:	930d      	str	r3, [sp, #52]	; 0x34
 8004a46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f040 85a6 	bne.w	800559a <_strtod_l+0xbd2>
 8004a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a50:	b1e3      	cbz	r3, 8004a8c <_strtod_l+0xc4>
 8004a52:	464a      	mov	r2, r9
 8004a54:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	b021      	add	sp, #132	; 0x84
 8004a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a62:	2a2b      	cmp	r2, #43	; 0x2b
 8004a64:	d015      	beq.n	8004a92 <_strtod_l+0xca>
 8004a66:	2a2d      	cmp	r2, #45	; 0x2d
 8004a68:	d004      	beq.n	8004a74 <_strtod_l+0xac>
 8004a6a:	2a20      	cmp	r2, #32
 8004a6c:	d1ca      	bne.n	8004a04 <_strtod_l+0x3c>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a72:	e7bf      	b.n	80049f4 <_strtod_l+0x2c>
 8004a74:	2201      	movs	r2, #1
 8004a76:	920d      	str	r2, [sp, #52]	; 0x34
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a7c:	785b      	ldrb	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1c2      	bne.n	8004a08 <_strtod_l+0x40>
 8004a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a84:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 8585 	bne.w	8005596 <_strtod_l+0xbce>
 8004a8c:	464a      	mov	r2, r9
 8004a8e:	4653      	mov	r3, sl
 8004a90:	e7e2      	b.n	8004a58 <_strtod_l+0x90>
 8004a92:	2200      	movs	r2, #0
 8004a94:	e7ef      	b.n	8004a76 <_strtod_l+0xae>
 8004a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a98:	b13a      	cbz	r2, 8004aaa <_strtod_l+0xe2>
 8004a9a:	2135      	movs	r1, #53	; 0x35
 8004a9c:	a81e      	add	r0, sp, #120	; 0x78
 8004a9e:	f002 fca2 	bl	80073e6 <__copybits>
 8004aa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	f002 f915 	bl	8006cd4 <_Bfree>
 8004aaa:	3c01      	subs	r4, #1
 8004aac:	2c04      	cmp	r4, #4
 8004aae:	d806      	bhi.n	8004abe <_strtod_l+0xf6>
 8004ab0:	e8df f004 	tbb	[pc, r4]
 8004ab4:	1714030a 	.word	0x1714030a
 8004ab8:	0a          	.byte	0x0a
 8004ab9:	00          	.byte	0x00
 8004aba:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004abe:	0731      	lsls	r1, r6, #28
 8004ac0:	d5c1      	bpl.n	8004a46 <_strtod_l+0x7e>
 8004ac2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004ac6:	e7be      	b.n	8004a46 <_strtod_l+0x7e>
 8004ac8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004aca:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004ace:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ad6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004ada:	e7f0      	b.n	8004abe <_strtod_l+0xf6>
 8004adc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004c50 <_strtod_l+0x288>
 8004ae0:	e7ed      	b.n	8004abe <_strtod_l+0xf6>
 8004ae2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8004ae6:	f04f 39ff 	mov.w	r9, #4294967295
 8004aea:	e7e8      	b.n	8004abe <_strtod_l+0xf6>
 8004aec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b30      	cmp	r3, #48	; 0x30
 8004af6:	d0f9      	beq.n	8004aec <_strtod_l+0x124>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0a4      	beq.n	8004a46 <_strtod_l+0x7e>
 8004afc:	2301      	movs	r3, #1
 8004afe:	2500      	movs	r5, #0
 8004b00:	220a      	movs	r2, #10
 8004b02:	9307      	str	r3, [sp, #28]
 8004b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b06:	9506      	str	r5, [sp, #24]
 8004b08:	9308      	str	r3, [sp, #32]
 8004b0a:	9504      	str	r5, [sp, #16]
 8004b0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b0e:	7807      	ldrb	r7, [r0, #0]
 8004b10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004b14:	b2d9      	uxtb	r1, r3
 8004b16:	2909      	cmp	r1, #9
 8004b18:	d929      	bls.n	8004b6e <_strtod_l+0x1a6>
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	f8d8 1000 	ldr.w	r1, [r8]
 8004b20:	f003 fb35 	bl	800818e <strncmp>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d031      	beq.n	8004b8c <_strtod_l+0x1c4>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	9c04      	ldr	r4, [sp, #16]
 8004b30:	9005      	str	r0, [sp, #20]
 8004b32:	2b65      	cmp	r3, #101	; 0x65
 8004b34:	d001      	beq.n	8004b3a <_strtod_l+0x172>
 8004b36:	2b45      	cmp	r3, #69	; 0x45
 8004b38:	d114      	bne.n	8004b64 <_strtod_l+0x19c>
 8004b3a:	b924      	cbnz	r4, 8004b46 <_strtod_l+0x17e>
 8004b3c:	b910      	cbnz	r0, 8004b44 <_strtod_l+0x17c>
 8004b3e:	9b07      	ldr	r3, [sp, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d09e      	beq.n	8004a82 <_strtod_l+0xba>
 8004b44:	2400      	movs	r4, #0
 8004b46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004b48:	1c73      	adds	r3, r6, #1
 8004b4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b4c:	7873      	ldrb	r3, [r6, #1]
 8004b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8004b50:	d078      	beq.n	8004c44 <_strtod_l+0x27c>
 8004b52:	2b2d      	cmp	r3, #45	; 0x2d
 8004b54:	d070      	beq.n	8004c38 <_strtod_l+0x270>
 8004b56:	f04f 0c00 	mov.w	ip, #0
 8004b5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004b5e:	2f09      	cmp	r7, #9
 8004b60:	d97c      	bls.n	8004c5c <_strtod_l+0x294>
 8004b62:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b64:	f04f 0e00 	mov.w	lr, #0
 8004b68:	e09a      	b.n	8004ca0 <_strtod_l+0x2d8>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e7c7      	b.n	8004afe <_strtod_l+0x136>
 8004b6e:	9904      	ldr	r1, [sp, #16]
 8004b70:	3001      	adds	r0, #1
 8004b72:	2908      	cmp	r1, #8
 8004b74:	bfd7      	itett	le
 8004b76:	9906      	ldrle	r1, [sp, #24]
 8004b78:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004b7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b80:	9306      	strle	r3, [sp, #24]
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	901b      	str	r0, [sp, #108]	; 0x6c
 8004b86:	3301      	adds	r3, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	e7bf      	b.n	8004b0c <_strtod_l+0x144>
 8004b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b8e:	191a      	adds	r2, r3, r4
 8004b90:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b92:	9a04      	ldr	r2, [sp, #16]
 8004b94:	5d1b      	ldrb	r3, [r3, r4]
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d037      	beq.n	8004c0a <_strtod_l+0x242>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	9c04      	ldr	r4, [sp, #16]
 8004b9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004ba2:	2909      	cmp	r1, #9
 8004ba4:	d913      	bls.n	8004bce <_strtod_l+0x206>
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	e7c2      	b.n	8004b32 <_strtod_l+0x16a>
 8004bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bae:	3001      	adds	r0, #1
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	921b      	str	r2, [sp, #108]	; 0x6c
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b30      	cmp	r3, #48	; 0x30
 8004bb8:	d0f8      	beq.n	8004bac <_strtod_l+0x1e4>
 8004bba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004bbe:	2a08      	cmp	r2, #8
 8004bc0:	f200 84f0 	bhi.w	80055a4 <_strtod_l+0xbdc>
 8004bc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004bc6:	9208      	str	r2, [sp, #32]
 8004bc8:	4602      	mov	r2, r0
 8004bca:	2000      	movs	r0, #0
 8004bcc:	4604      	mov	r4, r0
 8004bce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004bd2:	f100 0101 	add.w	r1, r0, #1
 8004bd6:	d012      	beq.n	8004bfe <_strtod_l+0x236>
 8004bd8:	440a      	add	r2, r1
 8004bda:	270a      	movs	r7, #10
 8004bdc:	4621      	mov	r1, r4
 8004bde:	eb00 0c04 	add.w	ip, r0, r4
 8004be2:	458c      	cmp	ip, r1
 8004be4:	d113      	bne.n	8004c0e <_strtod_l+0x246>
 8004be6:	1821      	adds	r1, r4, r0
 8004be8:	2908      	cmp	r1, #8
 8004bea:	f104 0401 	add.w	r4, r4, #1
 8004bee:	4404      	add	r4, r0
 8004bf0:	dc19      	bgt.n	8004c26 <_strtod_l+0x25e>
 8004bf2:	210a      	movs	r1, #10
 8004bf4:	9b06      	ldr	r3, [sp, #24]
 8004bf6:	fb01 e303 	mla	r3, r1, r3, lr
 8004bfa:	9306      	str	r3, [sp, #24]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c00:	1c58      	adds	r0, r3, #1
 8004c02:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	4608      	mov	r0, r1
 8004c08:	e7c9      	b.n	8004b9e <_strtod_l+0x1d6>
 8004c0a:	9804      	ldr	r0, [sp, #16]
 8004c0c:	e7d3      	b.n	8004bb6 <_strtod_l+0x1ee>
 8004c0e:	2908      	cmp	r1, #8
 8004c10:	f101 0101 	add.w	r1, r1, #1
 8004c14:	dc03      	bgt.n	8004c1e <_strtod_l+0x256>
 8004c16:	9b06      	ldr	r3, [sp, #24]
 8004c18:	437b      	muls	r3, r7
 8004c1a:	9306      	str	r3, [sp, #24]
 8004c1c:	e7e1      	b.n	8004be2 <_strtod_l+0x21a>
 8004c1e:	2910      	cmp	r1, #16
 8004c20:	bfd8      	it	le
 8004c22:	437d      	mulle	r5, r7
 8004c24:	e7dd      	b.n	8004be2 <_strtod_l+0x21a>
 8004c26:	2c10      	cmp	r4, #16
 8004c28:	bfdc      	itt	le
 8004c2a:	210a      	movle	r1, #10
 8004c2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8004c30:	e7e4      	b.n	8004bfc <_strtod_l+0x234>
 8004c32:	2301      	movs	r3, #1
 8004c34:	9305      	str	r3, [sp, #20]
 8004c36:	e781      	b.n	8004b3c <_strtod_l+0x174>
 8004c38:	f04f 0c01 	mov.w	ip, #1
 8004c3c:	1cb3      	adds	r3, r6, #2
 8004c3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c40:	78b3      	ldrb	r3, [r6, #2]
 8004c42:	e78a      	b.n	8004b5a <_strtod_l+0x192>
 8004c44:	f04f 0c00 	mov.w	ip, #0
 8004c48:	e7f8      	b.n	8004c3c <_strtod_l+0x274>
 8004c4a:	bf00      	nop
 8004c4c:	08008ef0 	.word	0x08008ef0
 8004c50:	7ff00000 	.word	0x7ff00000
 8004c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c56:	1c5f      	adds	r7, r3, #1
 8004c58:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d0f9      	beq.n	8004c54 <_strtod_l+0x28c>
 8004c60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004c64:	2f08      	cmp	r7, #8
 8004c66:	f63f af7d 	bhi.w	8004b64 <_strtod_l+0x19c>
 8004c6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004c6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c70:	9309      	str	r3, [sp, #36]	; 0x24
 8004c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c74:	1c5f      	adds	r7, r3, #1
 8004c76:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004c7e:	f1b8 0f09 	cmp.w	r8, #9
 8004c82:	d937      	bls.n	8004cf4 <_strtod_l+0x32c>
 8004c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c86:	1a7f      	subs	r7, r7, r1
 8004c88:	2f08      	cmp	r7, #8
 8004c8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004c8e:	dc37      	bgt.n	8004d00 <_strtod_l+0x338>
 8004c90:	45be      	cmp	lr, r7
 8004c92:	bfa8      	it	ge
 8004c94:	46be      	movge	lr, r7
 8004c96:	f1bc 0f00 	cmp.w	ip, #0
 8004c9a:	d001      	beq.n	8004ca0 <_strtod_l+0x2d8>
 8004c9c:	f1ce 0e00 	rsb	lr, lr, #0
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d151      	bne.n	8004d48 <_strtod_l+0x380>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f47f aece 	bne.w	8004a46 <_strtod_l+0x7e>
 8004caa:	9a07      	ldr	r2, [sp, #28]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	f47f aeca 	bne.w	8004a46 <_strtod_l+0x7e>
 8004cb2:	9a05      	ldr	r2, [sp, #20]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f47f aee4 	bne.w	8004a82 <_strtod_l+0xba>
 8004cba:	2b4e      	cmp	r3, #78	; 0x4e
 8004cbc:	d027      	beq.n	8004d0e <_strtod_l+0x346>
 8004cbe:	dc21      	bgt.n	8004d04 <_strtod_l+0x33c>
 8004cc0:	2b49      	cmp	r3, #73	; 0x49
 8004cc2:	f47f aede 	bne.w	8004a82 <_strtod_l+0xba>
 8004cc6:	49a4      	ldr	r1, [pc, #656]	; (8004f58 <_strtod_l+0x590>)
 8004cc8:	a81b      	add	r0, sp, #108	; 0x6c
 8004cca:	f001 fecf 	bl	8006a6c <__match>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f43f aed7 	beq.w	8004a82 <_strtod_l+0xba>
 8004cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cd6:	49a1      	ldr	r1, [pc, #644]	; (8004f5c <_strtod_l+0x594>)
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	a81b      	add	r0, sp, #108	; 0x6c
 8004cdc:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cde:	f001 fec5 	bl	8006a6c <__match>
 8004ce2:	b910      	cbnz	r0, 8004cea <_strtod_l+0x322>
 8004ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cea:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004f70 <_strtod_l+0x5a8>
 8004cee:	f04f 0900 	mov.w	r9, #0
 8004cf2:	e6a8      	b.n	8004a46 <_strtod_l+0x7e>
 8004cf4:	210a      	movs	r1, #10
 8004cf6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004cfa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004cfe:	e7b8      	b.n	8004c72 <_strtod_l+0x2aa>
 8004d00:	46be      	mov	lr, r7
 8004d02:	e7c8      	b.n	8004c96 <_strtod_l+0x2ce>
 8004d04:	2b69      	cmp	r3, #105	; 0x69
 8004d06:	d0de      	beq.n	8004cc6 <_strtod_l+0x2fe>
 8004d08:	2b6e      	cmp	r3, #110	; 0x6e
 8004d0a:	f47f aeba 	bne.w	8004a82 <_strtod_l+0xba>
 8004d0e:	4994      	ldr	r1, [pc, #592]	; (8004f60 <_strtod_l+0x598>)
 8004d10:	a81b      	add	r0, sp, #108	; 0x6c
 8004d12:	f001 feab 	bl	8006a6c <__match>
 8004d16:	2800      	cmp	r0, #0
 8004d18:	f43f aeb3 	beq.w	8004a82 <_strtod_l+0xba>
 8004d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b28      	cmp	r3, #40	; 0x28
 8004d22:	d10e      	bne.n	8004d42 <_strtod_l+0x37a>
 8004d24:	aa1e      	add	r2, sp, #120	; 0x78
 8004d26:	498f      	ldr	r1, [pc, #572]	; (8004f64 <_strtod_l+0x59c>)
 8004d28:	a81b      	add	r0, sp, #108	; 0x6c
 8004d2a:	f001 feb3 	bl	8006a94 <__hexnan>
 8004d2e:	2805      	cmp	r0, #5
 8004d30:	d107      	bne.n	8004d42 <_strtod_l+0x37a>
 8004d32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d34:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004d38:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004d3c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004d40:	e681      	b.n	8004a46 <_strtod_l+0x7e>
 8004d42:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004f78 <_strtod_l+0x5b0>
 8004d46:	e7d2      	b.n	8004cee <_strtod_l+0x326>
 8004d48:	ebae 0302 	sub.w	r3, lr, r2
 8004d4c:	9307      	str	r3, [sp, #28]
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	9806      	ldr	r0, [sp, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf08      	it	eq
 8004d56:	4623      	moveq	r3, r4
 8004d58:	2c10      	cmp	r4, #16
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	46a0      	mov	r8, r4
 8004d5e:	bfa8      	it	ge
 8004d60:	f04f 0810 	movge.w	r8, #16
 8004d64:	f7fb fb3e 	bl	80003e4 <__aeabi_ui2d>
 8004d68:	2c09      	cmp	r4, #9
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	468a      	mov	sl, r1
 8004d6e:	dc13      	bgt.n	8004d98 <_strtod_l+0x3d0>
 8004d70:	9b07      	ldr	r3, [sp, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f43f ae67 	beq.w	8004a46 <_strtod_l+0x7e>
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	dd7e      	ble.n	8004e7a <_strtod_l+0x4b2>
 8004d7c:	2b16      	cmp	r3, #22
 8004d7e:	dc65      	bgt.n	8004e4c <_strtod_l+0x484>
 8004d80:	4a79      	ldr	r2, [pc, #484]	; (8004f68 <_strtod_l+0x5a0>)
 8004d82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004d86:	464a      	mov	r2, r9
 8004d88:	e9de 0100 	ldrd	r0, r1, [lr]
 8004d8c:	4653      	mov	r3, sl
 8004d8e:	f7fb fba3 	bl	80004d8 <__aeabi_dmul>
 8004d92:	4681      	mov	r9, r0
 8004d94:	468a      	mov	sl, r1
 8004d96:	e656      	b.n	8004a46 <_strtod_l+0x7e>
 8004d98:	4b73      	ldr	r3, [pc, #460]	; (8004f68 <_strtod_l+0x5a0>)
 8004d9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004d9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004da2:	f7fb fb99 	bl	80004d8 <__aeabi_dmul>
 8004da6:	4606      	mov	r6, r0
 8004da8:	4628      	mov	r0, r5
 8004daa:	460f      	mov	r7, r1
 8004dac:	f7fb fb1a 	bl	80003e4 <__aeabi_ui2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4630      	mov	r0, r6
 8004db6:	4639      	mov	r1, r7
 8004db8:	f7fb f9d8 	bl	800016c <__adddf3>
 8004dbc:	2c0f      	cmp	r4, #15
 8004dbe:	4681      	mov	r9, r0
 8004dc0:	468a      	mov	sl, r1
 8004dc2:	ddd5      	ble.n	8004d70 <_strtod_l+0x3a8>
 8004dc4:	9b07      	ldr	r3, [sp, #28]
 8004dc6:	eba4 0808 	sub.w	r8, r4, r8
 8004dca:	4498      	add	r8, r3
 8004dcc:	f1b8 0f00 	cmp.w	r8, #0
 8004dd0:	f340 809a 	ble.w	8004f08 <_strtod_l+0x540>
 8004dd4:	f018 030f 	ands.w	r3, r8, #15
 8004dd8:	d00a      	beq.n	8004df0 <_strtod_l+0x428>
 8004dda:	4963      	ldr	r1, [pc, #396]	; (8004f68 <_strtod_l+0x5a0>)
 8004ddc:	464a      	mov	r2, r9
 8004dde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de6:	4653      	mov	r3, sl
 8004de8:	f7fb fb76 	bl	80004d8 <__aeabi_dmul>
 8004dec:	4681      	mov	r9, r0
 8004dee:	468a      	mov	sl, r1
 8004df0:	f038 080f 	bics.w	r8, r8, #15
 8004df4:	d077      	beq.n	8004ee6 <_strtod_l+0x51e>
 8004df6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004dfa:	dd4b      	ble.n	8004e94 <_strtod_l+0x4cc>
 8004dfc:	f04f 0800 	mov.w	r8, #0
 8004e00:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e04:	f8cd 8020 	str.w	r8, [sp, #32]
 8004e08:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e0c:	2322      	movs	r3, #34	; 0x22
 8004e0e:	f04f 0900 	mov.w	r9, #0
 8004e12:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004f70 <_strtod_l+0x5a8>
 8004e16:	f8cb 3000 	str.w	r3, [fp]
 8004e1a:	9b08      	ldr	r3, [sp, #32]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f43f ae12 	beq.w	8004a46 <_strtod_l+0x7e>
 8004e22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e24:	4658      	mov	r0, fp
 8004e26:	f001 ff55 	bl	8006cd4 <_Bfree>
 8004e2a:	9906      	ldr	r1, [sp, #24]
 8004e2c:	4658      	mov	r0, fp
 8004e2e:	f001 ff51 	bl	8006cd4 <_Bfree>
 8004e32:	9904      	ldr	r1, [sp, #16]
 8004e34:	4658      	mov	r0, fp
 8004e36:	f001 ff4d 	bl	8006cd4 <_Bfree>
 8004e3a:	9908      	ldr	r1, [sp, #32]
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	f001 ff49 	bl	8006cd4 <_Bfree>
 8004e42:	4641      	mov	r1, r8
 8004e44:	4658      	mov	r0, fp
 8004e46:	f001 ff45 	bl	8006cd4 <_Bfree>
 8004e4a:	e5fc      	b.n	8004a46 <_strtod_l+0x7e>
 8004e4c:	9a07      	ldr	r2, [sp, #28]
 8004e4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004e52:	4293      	cmp	r3, r2
 8004e54:	dbb6      	blt.n	8004dc4 <_strtod_l+0x3fc>
 8004e56:	4d44      	ldr	r5, [pc, #272]	; (8004f68 <_strtod_l+0x5a0>)
 8004e58:	f1c4 040f 	rsb	r4, r4, #15
 8004e5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004e60:	464a      	mov	r2, r9
 8004e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e66:	4653      	mov	r3, sl
 8004e68:	f7fb fb36 	bl	80004d8 <__aeabi_dmul>
 8004e6c:	9b07      	ldr	r3, [sp, #28]
 8004e6e:	1b1c      	subs	r4, r3, r4
 8004e70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004e74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e78:	e789      	b.n	8004d8e <_strtod_l+0x3c6>
 8004e7a:	f113 0f16 	cmn.w	r3, #22
 8004e7e:	dba1      	blt.n	8004dc4 <_strtod_l+0x3fc>
 8004e80:	4a39      	ldr	r2, [pc, #228]	; (8004f68 <_strtod_l+0x5a0>)
 8004e82:	4648      	mov	r0, r9
 8004e84:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004e88:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004e8c:	4651      	mov	r1, sl
 8004e8e:	f7fb fc4d 	bl	800072c <__aeabi_ddiv>
 8004e92:	e77e      	b.n	8004d92 <_strtod_l+0x3ca>
 8004e94:	2300      	movs	r3, #0
 8004e96:	4648      	mov	r0, r9
 8004e98:	4651      	mov	r1, sl
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	4e33      	ldr	r6, [pc, #204]	; (8004f6c <_strtod_l+0x5a4>)
 8004e9e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004ea2:	f1b8 0f01 	cmp.w	r8, #1
 8004ea6:	dc21      	bgt.n	8004eec <_strtod_l+0x524>
 8004ea8:	b10b      	cbz	r3, 8004eae <_strtod_l+0x4e6>
 8004eaa:	4681      	mov	r9, r0
 8004eac:	468a      	mov	sl, r1
 8004eae:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <_strtod_l+0x5a4>)
 8004eb0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004eb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004eb8:	464a      	mov	r2, r9
 8004eba:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ebe:	4653      	mov	r3, sl
 8004ec0:	f7fb fb0a 	bl	80004d8 <__aeabi_dmul>
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <_strtod_l+0x5a8>)
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	400b      	ands	r3, r1
 8004eca:	492a      	ldr	r1, [pc, #168]	; (8004f74 <_strtod_l+0x5ac>)
 8004ecc:	4681      	mov	r9, r0
 8004ece:	428b      	cmp	r3, r1
 8004ed0:	d894      	bhi.n	8004dfc <_strtod_l+0x434>
 8004ed2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	bf86      	itte	hi
 8004eda:	f04f 39ff 	movhi.w	r9, #4294967295
 8004ede:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004f7c <_strtod_l+0x5b4>
 8004ee2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9305      	str	r3, [sp, #20]
 8004eea:	e07b      	b.n	8004fe4 <_strtod_l+0x61c>
 8004eec:	f018 0f01 	tst.w	r8, #1
 8004ef0:	d006      	beq.n	8004f00 <_strtod_l+0x538>
 8004ef2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f7fb faed 	bl	80004d8 <__aeabi_dmul>
 8004efe:	2301      	movs	r3, #1
 8004f00:	3501      	adds	r5, #1
 8004f02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f06:	e7cc      	b.n	8004ea2 <_strtod_l+0x4da>
 8004f08:	d0ed      	beq.n	8004ee6 <_strtod_l+0x51e>
 8004f0a:	f1c8 0800 	rsb	r8, r8, #0
 8004f0e:	f018 020f 	ands.w	r2, r8, #15
 8004f12:	d00a      	beq.n	8004f2a <_strtod_l+0x562>
 8004f14:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <_strtod_l+0x5a0>)
 8004f16:	4648      	mov	r0, r9
 8004f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb fc03 	bl	800072c <__aeabi_ddiv>
 8004f26:	4681      	mov	r9, r0
 8004f28:	468a      	mov	sl, r1
 8004f2a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004f2e:	d0da      	beq.n	8004ee6 <_strtod_l+0x51e>
 8004f30:	f1b8 0f1f 	cmp.w	r8, #31
 8004f34:	dd24      	ble.n	8004f80 <_strtod_l+0x5b8>
 8004f36:	f04f 0800 	mov.w	r8, #0
 8004f3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f3e:	f8cd 8020 	str.w	r8, [sp, #32]
 8004f42:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f46:	2322      	movs	r3, #34	; 0x22
 8004f48:	f04f 0900 	mov.w	r9, #0
 8004f4c:	f04f 0a00 	mov.w	sl, #0
 8004f50:	f8cb 3000 	str.w	r3, [fp]
 8004f54:	e761      	b.n	8004e1a <_strtod_l+0x452>
 8004f56:	bf00      	nop
 8004f58:	08008ebd 	.word	0x08008ebd
 8004f5c:	08008f43 	.word	0x08008f43
 8004f60:	08008ec5 	.word	0x08008ec5
 8004f64:	08008f04 	.word	0x08008f04
 8004f68:	08008fe8 	.word	0x08008fe8
 8004f6c:	08008fc0 	.word	0x08008fc0
 8004f70:	7ff00000 	.word	0x7ff00000
 8004f74:	7ca00000 	.word	0x7ca00000
 8004f78:	fff80000 	.word	0xfff80000
 8004f7c:	7fefffff 	.word	0x7fefffff
 8004f80:	f018 0310 	ands.w	r3, r8, #16
 8004f84:	bf18      	it	ne
 8004f86:	236a      	movne	r3, #106	; 0x6a
 8004f88:	4648      	mov	r0, r9
 8004f8a:	9305      	str	r3, [sp, #20]
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4da1      	ldr	r5, [pc, #644]	; (8005218 <_strtod_l+0x850>)
 8004f92:	f1b8 0f00 	cmp.w	r8, #0
 8004f96:	f300 8113 	bgt.w	80051c0 <_strtod_l+0x7f8>
 8004f9a:	b10b      	cbz	r3, 8004fa0 <_strtod_l+0x5d8>
 8004f9c:	4681      	mov	r9, r0
 8004f9e:	468a      	mov	sl, r1
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	b1bb      	cbz	r3, 8004fd4 <_strtod_l+0x60c>
 8004fa4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004fa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	4651      	mov	r1, sl
 8004fb0:	dd10      	ble.n	8004fd4 <_strtod_l+0x60c>
 8004fb2:	2b1f      	cmp	r3, #31
 8004fb4:	f340 8110 	ble.w	80051d8 <_strtod_l+0x810>
 8004fb8:	2b34      	cmp	r3, #52	; 0x34
 8004fba:	bfd8      	it	le
 8004fbc:	f04f 32ff 	movle.w	r2, #4294967295
 8004fc0:	f04f 0900 	mov.w	r9, #0
 8004fc4:	bfcf      	iteee	gt
 8004fc6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004fca:	3b20      	suble	r3, #32
 8004fcc:	fa02 f303 	lslle.w	r3, r2, r3
 8004fd0:	ea03 0a01 	andle.w	sl, r3, r1
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	4648      	mov	r0, r9
 8004fda:	4651      	mov	r1, sl
 8004fdc:	f7fb fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1a8      	bne.n	8004f36 <_strtod_l+0x56e>
 8004fe4:	9b06      	ldr	r3, [sp, #24]
 8004fe6:	9a04      	ldr	r2, [sp, #16]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	9908      	ldr	r1, [sp, #32]
 8004fec:	4623      	mov	r3, r4
 8004fee:	4658      	mov	r0, fp
 8004ff0:	f001 fec2 	bl	8006d78 <__s2b>
 8004ff4:	9008      	str	r0, [sp, #32]
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f43f af00 	beq.w	8004dfc <_strtod_l+0x434>
 8004ffc:	9a07      	ldr	r2, [sp, #28]
 8004ffe:	9b07      	ldr	r3, [sp, #28]
 8005000:	2a00      	cmp	r2, #0
 8005002:	f1c3 0300 	rsb	r3, r3, #0
 8005006:	bfa8      	it	ge
 8005008:	2300      	movge	r3, #0
 800500a:	f04f 0800 	mov.w	r8, #0
 800500e:	930e      	str	r3, [sp, #56]	; 0x38
 8005010:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005014:	9316      	str	r3, [sp, #88]	; 0x58
 8005016:	f8cd 8010 	str.w	r8, [sp, #16]
 800501a:	9b08      	ldr	r3, [sp, #32]
 800501c:	4658      	mov	r0, fp
 800501e:	6859      	ldr	r1, [r3, #4]
 8005020:	f001 fe24 	bl	8006c6c <_Balloc>
 8005024:	9006      	str	r0, [sp, #24]
 8005026:	2800      	cmp	r0, #0
 8005028:	f43f aef0 	beq.w	8004e0c <_strtod_l+0x444>
 800502c:	9b08      	ldr	r3, [sp, #32]
 800502e:	300c      	adds	r0, #12
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	f103 010c 	add.w	r1, r3, #12
 8005036:	3202      	adds	r2, #2
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	f7fe fd9d 	bl	8003b78 <memcpy>
 800503e:	ab1e      	add	r3, sp, #120	; 0x78
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	ab1d      	add	r3, sp, #116	; 0x74
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	464a      	mov	r2, r9
 8005048:	4653      	mov	r3, sl
 800504a:	4658      	mov	r0, fp
 800504c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005050:	f002 f94c 	bl	80072ec <__d2b>
 8005054:	901c      	str	r0, [sp, #112]	; 0x70
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f aed8 	beq.w	8004e0c <_strtod_l+0x444>
 800505c:	2101      	movs	r1, #1
 800505e:	4658      	mov	r0, fp
 8005060:	f001 ff16 	bl	8006e90 <__i2b>
 8005064:	9004      	str	r0, [sp, #16]
 8005066:	4603      	mov	r3, r0
 8005068:	2800      	cmp	r0, #0
 800506a:	f43f aecf 	beq.w	8004e0c <_strtod_l+0x444>
 800506e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005070:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005072:	2d00      	cmp	r5, #0
 8005074:	bfab      	itete	ge
 8005076:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005078:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800507a:	18ee      	addge	r6, r5, r3
 800507c:	1b5c      	sublt	r4, r3, r5
 800507e:	9b05      	ldr	r3, [sp, #20]
 8005080:	bfa8      	it	ge
 8005082:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005084:	eba5 0503 	sub.w	r5, r5, r3
 8005088:	4415      	add	r5, r2
 800508a:	4b64      	ldr	r3, [pc, #400]	; (800521c <_strtod_l+0x854>)
 800508c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005090:	bfb8      	it	lt
 8005092:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005094:	429d      	cmp	r5, r3
 8005096:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800509a:	f280 80af 	bge.w	80051fc <_strtod_l+0x834>
 800509e:	1b5b      	subs	r3, r3, r5
 80050a0:	2b1f      	cmp	r3, #31
 80050a2:	eba2 0203 	sub.w	r2, r2, r3
 80050a6:	f04f 0701 	mov.w	r7, #1
 80050aa:	f300 809c 	bgt.w	80051e6 <_strtod_l+0x81e>
 80050ae:	2500      	movs	r5, #0
 80050b0:	fa07 f303 	lsl.w	r3, r7, r3
 80050b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80050b6:	18b7      	adds	r7, r6, r2
 80050b8:	9b05      	ldr	r3, [sp, #20]
 80050ba:	42be      	cmp	r6, r7
 80050bc:	4414      	add	r4, r2
 80050be:	441c      	add	r4, r3
 80050c0:	4633      	mov	r3, r6
 80050c2:	bfa8      	it	ge
 80050c4:	463b      	movge	r3, r7
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	bfa8      	it	ge
 80050ca:	4623      	movge	r3, r4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfc2      	ittt	gt
 80050d0:	1aff      	subgt	r7, r7, r3
 80050d2:	1ae4      	subgt	r4, r4, r3
 80050d4:	1af6      	subgt	r6, r6, r3
 80050d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050d8:	b1bb      	cbz	r3, 800510a <_strtod_l+0x742>
 80050da:	461a      	mov	r2, r3
 80050dc:	9904      	ldr	r1, [sp, #16]
 80050de:	4658      	mov	r0, fp
 80050e0:	f001 ff74 	bl	8006fcc <__pow5mult>
 80050e4:	9004      	str	r0, [sp, #16]
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f43f ae90 	beq.w	8004e0c <_strtod_l+0x444>
 80050ec:	4601      	mov	r1, r0
 80050ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050f0:	4658      	mov	r0, fp
 80050f2:	f001 fed6 	bl	8006ea2 <__multiply>
 80050f6:	9009      	str	r0, [sp, #36]	; 0x24
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f43f ae87 	beq.w	8004e0c <_strtod_l+0x444>
 80050fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005100:	4658      	mov	r0, fp
 8005102:	f001 fde7 	bl	8006cd4 <_Bfree>
 8005106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005108:	931c      	str	r3, [sp, #112]	; 0x70
 800510a:	2f00      	cmp	r7, #0
 800510c:	dc7a      	bgt.n	8005204 <_strtod_l+0x83c>
 800510e:	9b07      	ldr	r3, [sp, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	dd08      	ble.n	8005126 <_strtod_l+0x75e>
 8005114:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005116:	9906      	ldr	r1, [sp, #24]
 8005118:	4658      	mov	r0, fp
 800511a:	f001 ff57 	bl	8006fcc <__pow5mult>
 800511e:	9006      	str	r0, [sp, #24]
 8005120:	2800      	cmp	r0, #0
 8005122:	f43f ae73 	beq.w	8004e0c <_strtod_l+0x444>
 8005126:	2c00      	cmp	r4, #0
 8005128:	dd08      	ble.n	800513c <_strtod_l+0x774>
 800512a:	4622      	mov	r2, r4
 800512c:	9906      	ldr	r1, [sp, #24]
 800512e:	4658      	mov	r0, fp
 8005130:	f001 ff9a 	bl	8007068 <__lshift>
 8005134:	9006      	str	r0, [sp, #24]
 8005136:	2800      	cmp	r0, #0
 8005138:	f43f ae68 	beq.w	8004e0c <_strtod_l+0x444>
 800513c:	2e00      	cmp	r6, #0
 800513e:	dd08      	ble.n	8005152 <_strtod_l+0x78a>
 8005140:	4632      	mov	r2, r6
 8005142:	9904      	ldr	r1, [sp, #16]
 8005144:	4658      	mov	r0, fp
 8005146:	f001 ff8f 	bl	8007068 <__lshift>
 800514a:	9004      	str	r0, [sp, #16]
 800514c:	2800      	cmp	r0, #0
 800514e:	f43f ae5d 	beq.w	8004e0c <_strtod_l+0x444>
 8005152:	9a06      	ldr	r2, [sp, #24]
 8005154:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005156:	4658      	mov	r0, fp
 8005158:	f001 fff4 	bl	8007144 <__mdiff>
 800515c:	4680      	mov	r8, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	f43f ae54 	beq.w	8004e0c <_strtod_l+0x444>
 8005164:	2400      	movs	r4, #0
 8005166:	68c3      	ldr	r3, [r0, #12]
 8005168:	9904      	ldr	r1, [sp, #16]
 800516a:	60c4      	str	r4, [r0, #12]
 800516c:	930c      	str	r3, [sp, #48]	; 0x30
 800516e:	f001 ffcf 	bl	8007110 <__mcmp>
 8005172:	42a0      	cmp	r0, r4
 8005174:	da54      	bge.n	8005220 <_strtod_l+0x858>
 8005176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005178:	b9f3      	cbnz	r3, 80051b8 <_strtod_l+0x7f0>
 800517a:	f1b9 0f00 	cmp.w	r9, #0
 800517e:	d11b      	bne.n	80051b8 <_strtod_l+0x7f0>
 8005180:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005184:	b9c3      	cbnz	r3, 80051b8 <_strtod_l+0x7f0>
 8005186:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800518a:	0d1b      	lsrs	r3, r3, #20
 800518c:	051b      	lsls	r3, r3, #20
 800518e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005192:	d911      	bls.n	80051b8 <_strtod_l+0x7f0>
 8005194:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005198:	b91b      	cbnz	r3, 80051a2 <_strtod_l+0x7da>
 800519a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	dd0a      	ble.n	80051b8 <_strtod_l+0x7f0>
 80051a2:	4641      	mov	r1, r8
 80051a4:	2201      	movs	r2, #1
 80051a6:	4658      	mov	r0, fp
 80051a8:	f001 ff5e 	bl	8007068 <__lshift>
 80051ac:	9904      	ldr	r1, [sp, #16]
 80051ae:	4680      	mov	r8, r0
 80051b0:	f001 ffae 	bl	8007110 <__mcmp>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	dc68      	bgt.n	800528a <_strtod_l+0x8c2>
 80051b8:	9b05      	ldr	r3, [sp, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d172      	bne.n	80052a4 <_strtod_l+0x8dc>
 80051be:	e630      	b.n	8004e22 <_strtod_l+0x45a>
 80051c0:	f018 0f01 	tst.w	r8, #1
 80051c4:	d004      	beq.n	80051d0 <_strtod_l+0x808>
 80051c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051ca:	f7fb f985 	bl	80004d8 <__aeabi_dmul>
 80051ce:	2301      	movs	r3, #1
 80051d0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051d4:	3508      	adds	r5, #8
 80051d6:	e6dc      	b.n	8004f92 <_strtod_l+0x5ca>
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	ea03 0909 	and.w	r9, r3, r9
 80051e4:	e6f6      	b.n	8004fd4 <_strtod_l+0x60c>
 80051e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80051ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80051ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80051f2:	35e2      	adds	r5, #226	; 0xe2
 80051f4:	fa07 f505 	lsl.w	r5, r7, r5
 80051f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80051fa:	e75c      	b.n	80050b6 <_strtod_l+0x6ee>
 80051fc:	2301      	movs	r3, #1
 80051fe:	2500      	movs	r5, #0
 8005200:	930f      	str	r3, [sp, #60]	; 0x3c
 8005202:	e758      	b.n	80050b6 <_strtod_l+0x6ee>
 8005204:	463a      	mov	r2, r7
 8005206:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005208:	4658      	mov	r0, fp
 800520a:	f001 ff2d 	bl	8007068 <__lshift>
 800520e:	901c      	str	r0, [sp, #112]	; 0x70
 8005210:	2800      	cmp	r0, #0
 8005212:	f47f af7c 	bne.w	800510e <_strtod_l+0x746>
 8005216:	e5f9      	b.n	8004e0c <_strtod_l+0x444>
 8005218:	08008f18 	.word	0x08008f18
 800521c:	fffffc02 	.word	0xfffffc02
 8005220:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005224:	f040 8089 	bne.w	800533a <_strtod_l+0x972>
 8005228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800522a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800522e:	b342      	cbz	r2, 8005282 <_strtod_l+0x8ba>
 8005230:	4aaf      	ldr	r2, [pc, #700]	; (80054f0 <_strtod_l+0xb28>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d156      	bne.n	80052e4 <_strtod_l+0x91c>
 8005236:	9b05      	ldr	r3, [sp, #20]
 8005238:	4648      	mov	r0, r9
 800523a:	b1eb      	cbz	r3, 8005278 <_strtod_l+0x8b0>
 800523c:	4653      	mov	r3, sl
 800523e:	4aad      	ldr	r2, [pc, #692]	; (80054f4 <_strtod_l+0xb2c>)
 8005240:	f04f 31ff 	mov.w	r1, #4294967295
 8005244:	401a      	ands	r2, r3
 8005246:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800524a:	d818      	bhi.n	800527e <_strtod_l+0x8b6>
 800524c:	0d12      	lsrs	r2, r2, #20
 800524e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	4298      	cmp	r0, r3
 8005258:	d144      	bne.n	80052e4 <_strtod_l+0x91c>
 800525a:	4ba7      	ldr	r3, [pc, #668]	; (80054f8 <_strtod_l+0xb30>)
 800525c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525e:	429a      	cmp	r2, r3
 8005260:	d102      	bne.n	8005268 <_strtod_l+0x8a0>
 8005262:	3001      	adds	r0, #1
 8005264:	f43f add2 	beq.w	8004e0c <_strtod_l+0x444>
 8005268:	4ba2      	ldr	r3, [pc, #648]	; (80054f4 <_strtod_l+0xb2c>)
 800526a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800526c:	f04f 0900 	mov.w	r9, #0
 8005270:	401a      	ands	r2, r3
 8005272:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005276:	e79f      	b.n	80051b8 <_strtod_l+0x7f0>
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	e7eb      	b.n	8005256 <_strtod_l+0x88e>
 800527e:	460b      	mov	r3, r1
 8005280:	e7e9      	b.n	8005256 <_strtod_l+0x88e>
 8005282:	bb7b      	cbnz	r3, 80052e4 <_strtod_l+0x91c>
 8005284:	f1b9 0f00 	cmp.w	r9, #0
 8005288:	d12c      	bne.n	80052e4 <_strtod_l+0x91c>
 800528a:	9905      	ldr	r1, [sp, #20]
 800528c:	4653      	mov	r3, sl
 800528e:	4a99      	ldr	r2, [pc, #612]	; (80054f4 <_strtod_l+0xb2c>)
 8005290:	b1f1      	cbz	r1, 80052d0 <_strtod_l+0x908>
 8005292:	ea02 010a 	and.w	r1, r2, sl
 8005296:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800529a:	dc19      	bgt.n	80052d0 <_strtod_l+0x908>
 800529c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80052a0:	f77f ae51 	ble.w	8004f46 <_strtod_l+0x57e>
 80052a4:	2300      	movs	r3, #0
 80052a6:	4a95      	ldr	r2, [pc, #596]	; (80054fc <_strtod_l+0xb34>)
 80052a8:	4648      	mov	r0, r9
 80052aa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80052ae:	4651      	mov	r1, sl
 80052b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80052b4:	f7fb f910 	bl	80004d8 <__aeabi_dmul>
 80052b8:	4681      	mov	r9, r0
 80052ba:	468a      	mov	sl, r1
 80052bc:	2900      	cmp	r1, #0
 80052be:	f47f adb0 	bne.w	8004e22 <_strtod_l+0x45a>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f47f adad 	bne.w	8004e22 <_strtod_l+0x45a>
 80052c8:	2322      	movs	r3, #34	; 0x22
 80052ca:	f8cb 3000 	str.w	r3, [fp]
 80052ce:	e5a8      	b.n	8004e22 <_strtod_l+0x45a>
 80052d0:	4013      	ands	r3, r2
 80052d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052d6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80052da:	f04f 39ff 	mov.w	r9, #4294967295
 80052de:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80052e2:	e769      	b.n	80051b8 <_strtod_l+0x7f0>
 80052e4:	b19d      	cbz	r5, 800530e <_strtod_l+0x946>
 80052e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e8:	421d      	tst	r5, r3
 80052ea:	f43f af65 	beq.w	80051b8 <_strtod_l+0x7f0>
 80052ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052f0:	9a05      	ldr	r2, [sp, #20]
 80052f2:	4648      	mov	r0, r9
 80052f4:	4651      	mov	r1, sl
 80052f6:	b173      	cbz	r3, 8005316 <_strtod_l+0x94e>
 80052f8:	f7ff fb45 	bl	8004986 <sulp>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005304:	f7fa ff32 	bl	800016c <__adddf3>
 8005308:	4681      	mov	r9, r0
 800530a:	468a      	mov	sl, r1
 800530c:	e754      	b.n	80051b8 <_strtod_l+0x7f0>
 800530e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005310:	ea13 0f09 	tst.w	r3, r9
 8005314:	e7e9      	b.n	80052ea <_strtod_l+0x922>
 8005316:	f7ff fb36 	bl	8004986 <sulp>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005322:	f7fa ff21 	bl	8000168 <__aeabi_dsub>
 8005326:	2200      	movs	r2, #0
 8005328:	2300      	movs	r3, #0
 800532a:	4681      	mov	r9, r0
 800532c:	468a      	mov	sl, r1
 800532e:	f7fb fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005332:	2800      	cmp	r0, #0
 8005334:	f47f ae07 	bne.w	8004f46 <_strtod_l+0x57e>
 8005338:	e73e      	b.n	80051b8 <_strtod_l+0x7f0>
 800533a:	9904      	ldr	r1, [sp, #16]
 800533c:	4640      	mov	r0, r8
 800533e:	f002 f824 	bl	800738a <__ratio>
 8005342:	2200      	movs	r2, #0
 8005344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005348:	4606      	mov	r6, r0
 800534a:	460f      	mov	r7, r1
 800534c:	f7fb fb40 	bl	80009d0 <__aeabi_dcmple>
 8005350:	2800      	cmp	r0, #0
 8005352:	d075      	beq.n	8005440 <_strtod_l+0xa78>
 8005354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005356:	2b00      	cmp	r3, #0
 8005358:	d047      	beq.n	80053ea <_strtod_l+0xa22>
 800535a:	2600      	movs	r6, #0
 800535c:	4f68      	ldr	r7, [pc, #416]	; (8005500 <_strtod_l+0xb38>)
 800535e:	4d68      	ldr	r5, [pc, #416]	; (8005500 <_strtod_l+0xb38>)
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005366:	0d1b      	lsrs	r3, r3, #20
 8005368:	051b      	lsls	r3, r3, #20
 800536a:	930f      	str	r3, [sp, #60]	; 0x3c
 800536c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800536e:	4b65      	ldr	r3, [pc, #404]	; (8005504 <_strtod_l+0xb3c>)
 8005370:	429a      	cmp	r2, r3
 8005372:	f040 80cf 	bne.w	8005514 <_strtod_l+0xb4c>
 8005376:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800537a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	4648      	mov	r0, r9
 8005382:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005386:	4651      	mov	r1, sl
 8005388:	f001 ff3a 	bl	8007200 <__ulp>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb f8a0 	bl	80004d8 <__aeabi_dmul>
 8005398:	464a      	mov	r2, r9
 800539a:	4653      	mov	r3, sl
 800539c:	f7fa fee6 	bl	800016c <__adddf3>
 80053a0:	460b      	mov	r3, r1
 80053a2:	4954      	ldr	r1, [pc, #336]	; (80054f4 <_strtod_l+0xb2c>)
 80053a4:	4a58      	ldr	r2, [pc, #352]	; (8005508 <_strtod_l+0xb40>)
 80053a6:	4019      	ands	r1, r3
 80053a8:	4291      	cmp	r1, r2
 80053aa:	4681      	mov	r9, r0
 80053ac:	d95e      	bls.n	800546c <_strtod_l+0xaa4>
 80053ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <_strtod_l+0x9f8>
 80053b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ba:	3301      	adds	r3, #1
 80053bc:	f43f ad26 	beq.w	8004e0c <_strtod_l+0x444>
 80053c0:	f04f 39ff 	mov.w	r9, #4294967295
 80053c4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80054f8 <_strtod_l+0xb30>
 80053c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053ca:	4658      	mov	r0, fp
 80053cc:	f001 fc82 	bl	8006cd4 <_Bfree>
 80053d0:	9906      	ldr	r1, [sp, #24]
 80053d2:	4658      	mov	r0, fp
 80053d4:	f001 fc7e 	bl	8006cd4 <_Bfree>
 80053d8:	9904      	ldr	r1, [sp, #16]
 80053da:	4658      	mov	r0, fp
 80053dc:	f001 fc7a 	bl	8006cd4 <_Bfree>
 80053e0:	4641      	mov	r1, r8
 80053e2:	4658      	mov	r0, fp
 80053e4:	f001 fc76 	bl	8006cd4 <_Bfree>
 80053e8:	e617      	b.n	800501a <_strtod_l+0x652>
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	d119      	bne.n	8005424 <_strtod_l+0xa5c>
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f6:	b9e3      	cbnz	r3, 8005432 <_strtod_l+0xa6a>
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <_strtod_l+0xb38>)
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f7fb fadc 	bl	80009bc <__aeabi_dcmplt>
 8005404:	b9c8      	cbnz	r0, 800543a <_strtod_l+0xa72>
 8005406:	2200      	movs	r2, #0
 8005408:	4b40      	ldr	r3, [pc, #256]	; (800550c <_strtod_l+0xb44>)
 800540a:	4630      	mov	r0, r6
 800540c:	4639      	mov	r1, r7
 800540e:	f7fb f863 	bl	80004d8 <__aeabi_dmul>
 8005412:	4604      	mov	r4, r0
 8005414:	460d      	mov	r5, r1
 8005416:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800541a:	9418      	str	r4, [sp, #96]	; 0x60
 800541c:	9319      	str	r3, [sp, #100]	; 0x64
 800541e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005422:	e79d      	b.n	8005360 <_strtod_l+0x998>
 8005424:	f1b9 0f01 	cmp.w	r9, #1
 8005428:	d103      	bne.n	8005432 <_strtod_l+0xa6a>
 800542a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	f43f ad8a 	beq.w	8004f46 <_strtod_l+0x57e>
 8005432:	2600      	movs	r6, #0
 8005434:	4f36      	ldr	r7, [pc, #216]	; (8005510 <_strtod_l+0xb48>)
 8005436:	2400      	movs	r4, #0
 8005438:	e791      	b.n	800535e <_strtod_l+0x996>
 800543a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800543c:	4d33      	ldr	r5, [pc, #204]	; (800550c <_strtod_l+0xb44>)
 800543e:	e7ea      	b.n	8005416 <_strtod_l+0xa4e>
 8005440:	4b32      	ldr	r3, [pc, #200]	; (800550c <_strtod_l+0xb44>)
 8005442:	2200      	movs	r2, #0
 8005444:	4630      	mov	r0, r6
 8005446:	4639      	mov	r1, r7
 8005448:	f7fb f846 	bl	80004d8 <__aeabi_dmul>
 800544c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	b933      	cbnz	r3, 8005462 <_strtod_l+0xa9a>
 8005454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005458:	9010      	str	r0, [sp, #64]	; 0x40
 800545a:	9311      	str	r3, [sp, #68]	; 0x44
 800545c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005460:	e77e      	b.n	8005360 <_strtod_l+0x998>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800546a:	e7f7      	b.n	800545c <_strtod_l+0xa94>
 800546c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005470:	9b05      	ldr	r3, [sp, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1a8      	bne.n	80053c8 <_strtod_l+0xa00>
 8005476:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800547a:	0d1b      	lsrs	r3, r3, #20
 800547c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800547e:	051b      	lsls	r3, r3, #20
 8005480:	429a      	cmp	r2, r3
 8005482:	4656      	mov	r6, sl
 8005484:	d1a0      	bne.n	80053c8 <_strtod_l+0xa00>
 8005486:	4629      	mov	r1, r5
 8005488:	4620      	mov	r0, r4
 800548a:	f7fb fad5 	bl	8000a38 <__aeabi_d2iz>
 800548e:	f7fa ffb9 	bl	8000404 <__aeabi_i2d>
 8005492:	460b      	mov	r3, r1
 8005494:	4602      	mov	r2, r0
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f7fa fe65 	bl	8000168 <__aeabi_dsub>
 800549e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054a0:	4604      	mov	r4, r0
 80054a2:	460d      	mov	r5, r1
 80054a4:	b933      	cbnz	r3, 80054b4 <_strtod_l+0xaec>
 80054a6:	f1b9 0f00 	cmp.w	r9, #0
 80054aa:	d103      	bne.n	80054b4 <_strtod_l+0xaec>
 80054ac:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80054b0:	2e00      	cmp	r6, #0
 80054b2:	d06a      	beq.n	800558a <_strtod_l+0xbc2>
 80054b4:	a30a      	add	r3, pc, #40	; (adr r3, 80054e0 <_strtod_l+0xb18>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb fa7d 	bl	80009bc <__aeabi_dcmplt>
 80054c2:	2800      	cmp	r0, #0
 80054c4:	f47f acad 	bne.w	8004e22 <_strtod_l+0x45a>
 80054c8:	a307      	add	r3, pc, #28	; (adr r3, 80054e8 <_strtod_l+0xb20>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb fa91 	bl	80009f8 <__aeabi_dcmpgt>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f43f af76 	beq.w	80053c8 <_strtod_l+0xa00>
 80054dc:	e4a1      	b.n	8004e22 <_strtod_l+0x45a>
 80054de:	bf00      	nop
 80054e0:	94a03595 	.word	0x94a03595
 80054e4:	3fdfffff 	.word	0x3fdfffff
 80054e8:	35afe535 	.word	0x35afe535
 80054ec:	3fe00000 	.word	0x3fe00000
 80054f0:	000fffff 	.word	0x000fffff
 80054f4:	7ff00000 	.word	0x7ff00000
 80054f8:	7fefffff 	.word	0x7fefffff
 80054fc:	39500000 	.word	0x39500000
 8005500:	3ff00000 	.word	0x3ff00000
 8005504:	7fe00000 	.word	0x7fe00000
 8005508:	7c9fffff 	.word	0x7c9fffff
 800550c:	3fe00000 	.word	0x3fe00000
 8005510:	bff00000 	.word	0xbff00000
 8005514:	9b05      	ldr	r3, [sp, #20]
 8005516:	b313      	cbz	r3, 800555e <_strtod_l+0xb96>
 8005518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800551a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800551e:	d81e      	bhi.n	800555e <_strtod_l+0xb96>
 8005520:	a325      	add	r3, pc, #148	; (adr r3, 80055b8 <_strtod_l+0xbf0>)
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f7fb fa51 	bl	80009d0 <__aeabi_dcmple>
 800552e:	b190      	cbz	r0, 8005556 <_strtod_l+0xb8e>
 8005530:	4629      	mov	r1, r5
 8005532:	4620      	mov	r0, r4
 8005534:	f7fb faa8 	bl	8000a88 <__aeabi_d2uiz>
 8005538:	2800      	cmp	r0, #0
 800553a:	bf08      	it	eq
 800553c:	2001      	moveq	r0, #1
 800553e:	f7fa ff51 	bl	80003e4 <__aeabi_ui2d>
 8005542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	b9d3      	cbnz	r3, 8005580 <_strtod_l+0xbb8>
 800554a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800554e:	9012      	str	r0, [sp, #72]	; 0x48
 8005550:	9313      	str	r3, [sp, #76]	; 0x4c
 8005552:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005558:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800555c:	1a9f      	subs	r7, r3, r2
 800555e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005562:	f001 fe4d 	bl	8007200 <__ulp>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	f7fa ffb3 	bl	80004d8 <__aeabi_dmul>
 8005572:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005576:	f7fa fdf9 	bl	800016c <__adddf3>
 800557a:	4681      	mov	r9, r0
 800557c:	468a      	mov	sl, r1
 800557e:	e777      	b.n	8005470 <_strtod_l+0xaa8>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005588:	e7e3      	b.n	8005552 <_strtod_l+0xb8a>
 800558a:	a30d      	add	r3, pc, #52	; (adr r3, 80055c0 <_strtod_l+0xbf8>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fb fa14 	bl	80009bc <__aeabi_dcmplt>
 8005594:	e79f      	b.n	80054d6 <_strtod_l+0xb0e>
 8005596:	2300      	movs	r3, #0
 8005598:	930d      	str	r3, [sp, #52]	; 0x34
 800559a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800559c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	f7ff ba55 	b.w	8004a4e <_strtod_l+0x86>
 80055a4:	2b65      	cmp	r3, #101	; 0x65
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f43f ab42 	beq.w	8004c32 <_strtod_l+0x26a>
 80055ae:	2101      	movs	r1, #1
 80055b0:	4614      	mov	r4, r2
 80055b2:	9105      	str	r1, [sp, #20]
 80055b4:	f7ff babf 	b.w	8004b36 <_strtod_l+0x16e>
 80055b8:	ffc00000 	.word	0xffc00000
 80055bc:	41dfffff 	.word	0x41dfffff
 80055c0:	94a03595 	.word	0x94a03595
 80055c4:	3fcfffff 	.word	0x3fcfffff

080055c8 <_strtod_r>:
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <_strtod_r+0x18>)
 80055ca:	b410      	push	{r4}
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4c05      	ldr	r4, [pc, #20]	; (80055e4 <_strtod_r+0x1c>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf08      	it	eq
 80055d6:	4623      	moveq	r3, r4
 80055d8:	bc10      	pop	{r4}
 80055da:	f7ff b9f5 	b.w	80049c8 <_strtod_l>
 80055de:	bf00      	nop
 80055e0:	20000014 	.word	0x20000014
 80055e4:	20000078 	.word	0x20000078

080055e8 <_strtol_l.isra.0>:
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	4680      	mov	r8, r0
 80055ee:	4689      	mov	r9, r1
 80055f0:	4692      	mov	sl, r2
 80055f2:	461e      	mov	r6, r3
 80055f4:	460f      	mov	r7, r1
 80055f6:	463d      	mov	r5, r7
 80055f8:	9808      	ldr	r0, [sp, #32]
 80055fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055fe:	f001 fad9 	bl	8006bb4 <__locale_ctype_ptr_l>
 8005602:	4420      	add	r0, r4
 8005604:	7843      	ldrb	r3, [r0, #1]
 8005606:	f013 0308 	ands.w	r3, r3, #8
 800560a:	d132      	bne.n	8005672 <_strtol_l.isra.0+0x8a>
 800560c:	2c2d      	cmp	r4, #45	; 0x2d
 800560e:	d132      	bne.n	8005676 <_strtol_l.isra.0+0x8e>
 8005610:	2201      	movs	r2, #1
 8005612:	787c      	ldrb	r4, [r7, #1]
 8005614:	1cbd      	adds	r5, r7, #2
 8005616:	2e00      	cmp	r6, #0
 8005618:	d05d      	beq.n	80056d6 <_strtol_l.isra.0+0xee>
 800561a:	2e10      	cmp	r6, #16
 800561c:	d109      	bne.n	8005632 <_strtol_l.isra.0+0x4a>
 800561e:	2c30      	cmp	r4, #48	; 0x30
 8005620:	d107      	bne.n	8005632 <_strtol_l.isra.0+0x4a>
 8005622:	782b      	ldrb	r3, [r5, #0]
 8005624:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005628:	2b58      	cmp	r3, #88	; 0x58
 800562a:	d14f      	bne.n	80056cc <_strtol_l.isra.0+0xe4>
 800562c:	2610      	movs	r6, #16
 800562e:	786c      	ldrb	r4, [r5, #1]
 8005630:	3502      	adds	r5, #2
 8005632:	2a00      	cmp	r2, #0
 8005634:	bf14      	ite	ne
 8005636:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800563a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800563e:	2700      	movs	r7, #0
 8005640:	fbb1 fcf6 	udiv	ip, r1, r6
 8005644:	4638      	mov	r0, r7
 8005646:	fb06 1e1c 	mls	lr, r6, ip, r1
 800564a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800564e:	2b09      	cmp	r3, #9
 8005650:	d817      	bhi.n	8005682 <_strtol_l.isra.0+0x9a>
 8005652:	461c      	mov	r4, r3
 8005654:	42a6      	cmp	r6, r4
 8005656:	dd23      	ble.n	80056a0 <_strtol_l.isra.0+0xb8>
 8005658:	1c7b      	adds	r3, r7, #1
 800565a:	d007      	beq.n	800566c <_strtol_l.isra.0+0x84>
 800565c:	4584      	cmp	ip, r0
 800565e:	d31c      	bcc.n	800569a <_strtol_l.isra.0+0xb2>
 8005660:	d101      	bne.n	8005666 <_strtol_l.isra.0+0x7e>
 8005662:	45a6      	cmp	lr, r4
 8005664:	db19      	blt.n	800569a <_strtol_l.isra.0+0xb2>
 8005666:	2701      	movs	r7, #1
 8005668:	fb00 4006 	mla	r0, r0, r6, r4
 800566c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005670:	e7eb      	b.n	800564a <_strtol_l.isra.0+0x62>
 8005672:	462f      	mov	r7, r5
 8005674:	e7bf      	b.n	80055f6 <_strtol_l.isra.0+0xe>
 8005676:	2c2b      	cmp	r4, #43	; 0x2b
 8005678:	bf04      	itt	eq
 800567a:	1cbd      	addeq	r5, r7, #2
 800567c:	787c      	ldrbeq	r4, [r7, #1]
 800567e:	461a      	mov	r2, r3
 8005680:	e7c9      	b.n	8005616 <_strtol_l.isra.0+0x2e>
 8005682:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005686:	2b19      	cmp	r3, #25
 8005688:	d801      	bhi.n	800568e <_strtol_l.isra.0+0xa6>
 800568a:	3c37      	subs	r4, #55	; 0x37
 800568c:	e7e2      	b.n	8005654 <_strtol_l.isra.0+0x6c>
 800568e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005692:	2b19      	cmp	r3, #25
 8005694:	d804      	bhi.n	80056a0 <_strtol_l.isra.0+0xb8>
 8005696:	3c57      	subs	r4, #87	; 0x57
 8005698:	e7dc      	b.n	8005654 <_strtol_l.isra.0+0x6c>
 800569a:	f04f 37ff 	mov.w	r7, #4294967295
 800569e:	e7e5      	b.n	800566c <_strtol_l.isra.0+0x84>
 80056a0:	1c7b      	adds	r3, r7, #1
 80056a2:	d108      	bne.n	80056b6 <_strtol_l.isra.0+0xce>
 80056a4:	2322      	movs	r3, #34	; 0x22
 80056a6:	4608      	mov	r0, r1
 80056a8:	f8c8 3000 	str.w	r3, [r8]
 80056ac:	f1ba 0f00 	cmp.w	sl, #0
 80056b0:	d107      	bne.n	80056c2 <_strtol_l.isra.0+0xda>
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	b102      	cbz	r2, 80056ba <_strtol_l.isra.0+0xd2>
 80056b8:	4240      	negs	r0, r0
 80056ba:	f1ba 0f00 	cmp.w	sl, #0
 80056be:	d0f8      	beq.n	80056b2 <_strtol_l.isra.0+0xca>
 80056c0:	b10f      	cbz	r7, 80056c6 <_strtol_l.isra.0+0xde>
 80056c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80056c6:	f8ca 9000 	str.w	r9, [sl]
 80056ca:	e7f2      	b.n	80056b2 <_strtol_l.isra.0+0xca>
 80056cc:	2430      	movs	r4, #48	; 0x30
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	d1af      	bne.n	8005632 <_strtol_l.isra.0+0x4a>
 80056d2:	2608      	movs	r6, #8
 80056d4:	e7ad      	b.n	8005632 <_strtol_l.isra.0+0x4a>
 80056d6:	2c30      	cmp	r4, #48	; 0x30
 80056d8:	d0a3      	beq.n	8005622 <_strtol_l.isra.0+0x3a>
 80056da:	260a      	movs	r6, #10
 80056dc:	e7a9      	b.n	8005632 <_strtol_l.isra.0+0x4a>
	...

080056e0 <_strtol_r>:
 80056e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056e2:	4c06      	ldr	r4, [pc, #24]	; (80056fc <_strtol_r+0x1c>)
 80056e4:	4d06      	ldr	r5, [pc, #24]	; (8005700 <_strtol_r+0x20>)
 80056e6:	6824      	ldr	r4, [r4, #0]
 80056e8:	6a24      	ldr	r4, [r4, #32]
 80056ea:	2c00      	cmp	r4, #0
 80056ec:	bf08      	it	eq
 80056ee:	462c      	moveq	r4, r5
 80056f0:	9400      	str	r4, [sp, #0]
 80056f2:	f7ff ff79 	bl	80055e8 <_strtol_l.isra.0>
 80056f6:	b003      	add	sp, #12
 80056f8:	bd30      	pop	{r4, r5, pc}
 80056fa:	bf00      	nop
 80056fc:	20000014 	.word	0x20000014
 8005700:	20000078 	.word	0x20000078

08005704 <_write_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4605      	mov	r5, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	2200      	movs	r2, #0
 800570e:	4c05      	ldr	r4, [pc, #20]	; (8005724 <_write_r+0x20>)
 8005710:	6022      	str	r2, [r4, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fd fb8e 	bl	8002e34 <_write>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_write_r+0x1e>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	b103      	cbz	r3, 8005722 <_write_r+0x1e>
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	200008c0 	.word	0x200008c0

08005728 <_close_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	2300      	movs	r3, #0
 800572c:	4c05      	ldr	r4, [pc, #20]	; (8005744 <_close_r+0x1c>)
 800572e:	4605      	mov	r5, r0
 8005730:	4608      	mov	r0, r1
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	f7fe f99e 	bl	8003a74 <_close>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_close_r+0x1a>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	b103      	cbz	r3, 8005742 <_close_r+0x1a>
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	200008c0 	.word	0x200008c0

08005748 <quorem>:
 8005748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	6903      	ldr	r3, [r0, #16]
 800574e:	690c      	ldr	r4, [r1, #16]
 8005750:	4680      	mov	r8, r0
 8005752:	42a3      	cmp	r3, r4
 8005754:	f2c0 8084 	blt.w	8005860 <quorem+0x118>
 8005758:	3c01      	subs	r4, #1
 800575a:	f101 0714 	add.w	r7, r1, #20
 800575e:	f100 0614 	add.w	r6, r0, #20
 8005762:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005766:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800576a:	3501      	adds	r5, #1
 800576c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005770:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005774:	eb06 030c 	add.w	r3, r6, ip
 8005778:	eb07 090c 	add.w	r9, r7, ip
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	b39d      	cbz	r5, 80057e8 <quorem+0xa0>
 8005780:	f04f 0a00 	mov.w	sl, #0
 8005784:	4638      	mov	r0, r7
 8005786:	46b6      	mov	lr, r6
 8005788:	46d3      	mov	fp, sl
 800578a:	f850 2b04 	ldr.w	r2, [r0], #4
 800578e:	b293      	uxth	r3, r2
 8005790:	fb05 a303 	mla	r3, r5, r3, sl
 8005794:	0c12      	lsrs	r2, r2, #16
 8005796:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800579a:	fb05 a202 	mla	r2, r5, r2, sl
 800579e:	b29b      	uxth	r3, r3
 80057a0:	ebab 0303 	sub.w	r3, fp, r3
 80057a4:	f8de b000 	ldr.w	fp, [lr]
 80057a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80057ac:	fa1f fb8b 	uxth.w	fp, fp
 80057b0:	445b      	add	r3, fp
 80057b2:	fa1f fb82 	uxth.w	fp, r2
 80057b6:	f8de 2000 	ldr.w	r2, [lr]
 80057ba:	4581      	cmp	r9, r0
 80057bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80057c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057ca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80057ce:	f84e 3b04 	str.w	r3, [lr], #4
 80057d2:	d2da      	bcs.n	800578a <quorem+0x42>
 80057d4:	f856 300c 	ldr.w	r3, [r6, ip]
 80057d8:	b933      	cbnz	r3, 80057e8 <quorem+0xa0>
 80057da:	9b01      	ldr	r3, [sp, #4]
 80057dc:	3b04      	subs	r3, #4
 80057de:	429e      	cmp	r6, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	d331      	bcc.n	8005848 <quorem+0x100>
 80057e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80057e8:	4640      	mov	r0, r8
 80057ea:	f001 fc91 	bl	8007110 <__mcmp>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	db26      	blt.n	8005840 <quorem+0xf8>
 80057f2:	4630      	mov	r0, r6
 80057f4:	f04f 0c00 	mov.w	ip, #0
 80057f8:	3501      	adds	r5, #1
 80057fa:	f857 1b04 	ldr.w	r1, [r7], #4
 80057fe:	f8d0 e000 	ldr.w	lr, [r0]
 8005802:	b28b      	uxth	r3, r1
 8005804:	ebac 0303 	sub.w	r3, ip, r3
 8005808:	fa1f f28e 	uxth.w	r2, lr
 800580c:	4413      	add	r3, r2
 800580e:	0c0a      	lsrs	r2, r1, #16
 8005810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005818:	b29b      	uxth	r3, r3
 800581a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800581e:	45b9      	cmp	r9, r7
 8005820:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005824:	f840 3b04 	str.w	r3, [r0], #4
 8005828:	d2e7      	bcs.n	80057fa <quorem+0xb2>
 800582a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800582e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005832:	b92a      	cbnz	r2, 8005840 <quorem+0xf8>
 8005834:	3b04      	subs	r3, #4
 8005836:	429e      	cmp	r6, r3
 8005838:	461a      	mov	r2, r3
 800583a:	d30b      	bcc.n	8005854 <quorem+0x10c>
 800583c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005840:	4628      	mov	r0, r5
 8005842:	b003      	add	sp, #12
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	3b04      	subs	r3, #4
 800584c:	2a00      	cmp	r2, #0
 800584e:	d1c9      	bne.n	80057e4 <quorem+0x9c>
 8005850:	3c01      	subs	r4, #1
 8005852:	e7c4      	b.n	80057de <quorem+0x96>
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	3b04      	subs	r3, #4
 8005858:	2a00      	cmp	r2, #0
 800585a:	d1ef      	bne.n	800583c <quorem+0xf4>
 800585c:	3c01      	subs	r4, #1
 800585e:	e7ea      	b.n	8005836 <quorem+0xee>
 8005860:	2000      	movs	r0, #0
 8005862:	e7ee      	b.n	8005842 <quorem+0xfa>
 8005864:	0000      	movs	r0, r0
	...

08005868 <_dtoa_r>:
 8005868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	4616      	mov	r6, r2
 800586e:	461f      	mov	r7, r3
 8005870:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005872:	b095      	sub	sp, #84	; 0x54
 8005874:	4604      	mov	r4, r0
 8005876:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800587a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800587e:	b93d      	cbnz	r5, 8005890 <_dtoa_r+0x28>
 8005880:	2010      	movs	r0, #16
 8005882:	f001 f9cb 	bl	8006c1c <malloc>
 8005886:	6260      	str	r0, [r4, #36]	; 0x24
 8005888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800588c:	6005      	str	r5, [r0, #0]
 800588e:	60c5      	str	r5, [r0, #12]
 8005890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	b151      	cbz	r1, 80058ac <_dtoa_r+0x44>
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	2301      	movs	r3, #1
 800589a:	4093      	lsls	r3, r2
 800589c:	604a      	str	r2, [r1, #4]
 800589e:	608b      	str	r3, [r1, #8]
 80058a0:	4620      	mov	r0, r4
 80058a2:	f001 fa17 	bl	8006cd4 <_Bfree>
 80058a6:	2200      	movs	r2, #0
 80058a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	1e3b      	subs	r3, r7, #0
 80058ae:	bfaf      	iteee	ge
 80058b0:	2300      	movge	r3, #0
 80058b2:	2201      	movlt	r2, #1
 80058b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	9303      	strlt	r3, [sp, #12]
 80058ba:	bfac      	ite	ge
 80058bc:	f8c8 3000 	strge.w	r3, [r8]
 80058c0:	f8c8 2000 	strlt.w	r2, [r8]
 80058c4:	4bae      	ldr	r3, [pc, #696]	; (8005b80 <_dtoa_r+0x318>)
 80058c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80058ca:	ea33 0308 	bics.w	r3, r3, r8
 80058ce:	d11b      	bne.n	8005908 <_dtoa_r+0xa0>
 80058d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80058d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	9b02      	ldr	r3, [sp, #8]
 80058da:	b923      	cbnz	r3, 80058e6 <_dtoa_r+0x7e>
 80058dc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80058e0:	2800      	cmp	r0, #0
 80058e2:	f000 8545 	beq.w	8006370 <_dtoa_r+0xb08>
 80058e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058e8:	b953      	cbnz	r3, 8005900 <_dtoa_r+0x98>
 80058ea:	4ba6      	ldr	r3, [pc, #664]	; (8005b84 <_dtoa_r+0x31c>)
 80058ec:	e021      	b.n	8005932 <_dtoa_r+0xca>
 80058ee:	4ba6      	ldr	r3, [pc, #664]	; (8005b88 <_dtoa_r+0x320>)
 80058f0:	9306      	str	r3, [sp, #24]
 80058f2:	3308      	adds	r3, #8
 80058f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	9806      	ldr	r0, [sp, #24]
 80058fa:	b015      	add	sp, #84	; 0x54
 80058fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005900:	4ba0      	ldr	r3, [pc, #640]	; (8005b84 <_dtoa_r+0x31c>)
 8005902:	9306      	str	r3, [sp, #24]
 8005904:	3303      	adds	r3, #3
 8005906:	e7f5      	b.n	80058f4 <_dtoa_r+0x8c>
 8005908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fb f848 	bl	80009a8 <__aeabi_dcmpeq>
 8005918:	4682      	mov	sl, r0
 800591a:	b160      	cbz	r0, 8005936 <_dtoa_r+0xce>
 800591c:	2301      	movs	r3, #1
 800591e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8520 	beq.w	800636a <_dtoa_r+0xb02>
 800592a:	4b98      	ldr	r3, [pc, #608]	; (8005b8c <_dtoa_r+0x324>)
 800592c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	9306      	str	r3, [sp, #24]
 8005934:	e7e0      	b.n	80058f8 <_dtoa_r+0x90>
 8005936:	ab12      	add	r3, sp, #72	; 0x48
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	ab13      	add	r3, sp, #76	; 0x4c
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	4632      	mov	r2, r6
 8005940:	463b      	mov	r3, r7
 8005942:	4620      	mov	r0, r4
 8005944:	f001 fcd2 	bl	80072ec <__d2b>
 8005948:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800594c:	4683      	mov	fp, r0
 800594e:	2d00      	cmp	r5, #0
 8005950:	d07d      	beq.n	8005a4e <_dtoa_r+0x1e6>
 8005952:	46b0      	mov	r8, r6
 8005954:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005958:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800595c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005960:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005964:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005968:	2200      	movs	r2, #0
 800596a:	4b89      	ldr	r3, [pc, #548]	; (8005b90 <_dtoa_r+0x328>)
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fa fbfa 	bl	8000168 <__aeabi_dsub>
 8005974:	a37c      	add	r3, pc, #496	; (adr r3, 8005b68 <_dtoa_r+0x300>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fdad 	bl	80004d8 <__aeabi_dmul>
 800597e:	a37c      	add	r3, pc, #496	; (adr r3, 8005b70 <_dtoa_r+0x308>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fbf2 	bl	800016c <__adddf3>
 8005988:	4606      	mov	r6, r0
 800598a:	4628      	mov	r0, r5
 800598c:	460f      	mov	r7, r1
 800598e:	f7fa fd39 	bl	8000404 <__aeabi_i2d>
 8005992:	a379      	add	r3, pc, #484	; (adr r3, 8005b78 <_dtoa_r+0x310>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fd9e 	bl	80004d8 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fbe2 	bl	800016c <__adddf3>
 80059a8:	4606      	mov	r6, r0
 80059aa:	460f      	mov	r7, r1
 80059ac:	f7fb f844 	bl	8000a38 <__aeabi_d2iz>
 80059b0:	2200      	movs	r2, #0
 80059b2:	4682      	mov	sl, r0
 80059b4:	2300      	movs	r3, #0
 80059b6:	4630      	mov	r0, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	f7fa ffff 	bl	80009bc <__aeabi_dcmplt>
 80059be:	b148      	cbz	r0, 80059d4 <_dtoa_r+0x16c>
 80059c0:	4650      	mov	r0, sl
 80059c2:	f7fa fd1f 	bl	8000404 <__aeabi_i2d>
 80059c6:	4632      	mov	r2, r6
 80059c8:	463b      	mov	r3, r7
 80059ca:	f7fa ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80059ce:	b908      	cbnz	r0, 80059d4 <_dtoa_r+0x16c>
 80059d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059d4:	f1ba 0f16 	cmp.w	sl, #22
 80059d8:	d85a      	bhi.n	8005a90 <_dtoa_r+0x228>
 80059da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059de:	496d      	ldr	r1, [pc, #436]	; (8005b94 <_dtoa_r+0x32c>)
 80059e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80059e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059e8:	f7fb f806 	bl	80009f8 <__aeabi_dcmpgt>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d051      	beq.n	8005a94 <_dtoa_r+0x22c>
 80059f0:	2300      	movs	r3, #0
 80059f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059f6:	930d      	str	r3, [sp, #52]	; 0x34
 80059f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059fa:	1b5d      	subs	r5, r3, r5
 80059fc:	1e6b      	subs	r3, r5, #1
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	bf43      	ittte	mi
 8005a02:	2300      	movmi	r3, #0
 8005a04:	f1c5 0901 	rsbmi	r9, r5, #1
 8005a08:	9307      	strmi	r3, [sp, #28]
 8005a0a:	f04f 0900 	movpl.w	r9, #0
 8005a0e:	f1ba 0f00 	cmp.w	sl, #0
 8005a12:	db41      	blt.n	8005a98 <_dtoa_r+0x230>
 8005a14:	9b07      	ldr	r3, [sp, #28]
 8005a16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005a1a:	4453      	add	r3, sl
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9308      	str	r3, [sp, #32]
 8005a22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a24:	2b09      	cmp	r3, #9
 8005a26:	f200 808f 	bhi.w	8005b48 <_dtoa_r+0x2e0>
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	bfc4      	itt	gt
 8005a2e:	3b04      	subgt	r3, #4
 8005a30:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005a32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a34:	bfc8      	it	gt
 8005a36:	2500      	movgt	r5, #0
 8005a38:	f1a3 0302 	sub.w	r3, r3, #2
 8005a3c:	bfd8      	it	le
 8005a3e:	2501      	movle	r5, #1
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	f200 808d 	bhi.w	8005b60 <_dtoa_r+0x2f8>
 8005a46:	e8df f003 	tbb	[pc, r3]
 8005a4a:	7d7b      	.short	0x7d7b
 8005a4c:	6f2f      	.short	0x6f2f
 8005a4e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005a52:	441d      	add	r5, r3
 8005a54:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a58:	2820      	cmp	r0, #32
 8005a5a:	dd13      	ble.n	8005a84 <_dtoa_r+0x21c>
 8005a5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a60:	9b02      	ldr	r3, [sp, #8]
 8005a62:	fa08 f800 	lsl.w	r8, r8, r0
 8005a66:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005a6a:	fa23 f000 	lsr.w	r0, r3, r0
 8005a6e:	ea48 0000 	orr.w	r0, r8, r0
 8005a72:	f7fa fcb7 	bl	80003e4 <__aeabi_ui2d>
 8005a76:	2301      	movs	r3, #1
 8005a78:	4680      	mov	r8, r0
 8005a7a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005a7e:	3d01      	subs	r5, #1
 8005a80:	9310      	str	r3, [sp, #64]	; 0x40
 8005a82:	e771      	b.n	8005968 <_dtoa_r+0x100>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	f1c0 0020 	rsb	r0, r0, #32
 8005a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a8e:	e7f0      	b.n	8005a72 <_dtoa_r+0x20a>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7b0      	b.n	80059f6 <_dtoa_r+0x18e>
 8005a94:	900d      	str	r0, [sp, #52]	; 0x34
 8005a96:	e7af      	b.n	80059f8 <_dtoa_r+0x190>
 8005a98:	f1ca 0300 	rsb	r3, sl, #0
 8005a9c:	9308      	str	r3, [sp, #32]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	eba9 090a 	sub.w	r9, r9, sl
 8005aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa6:	e7bc      	b.n	8005a22 <_dtoa_r+0x1ba>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005aac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dd74      	ble.n	8005b9c <_dtoa_r+0x334>
 8005ab2:	4698      	mov	r8, r3
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aba:	6072      	str	r2, [r6, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	f102 0014 	add.w	r0, r2, #20
 8005ac2:	4298      	cmp	r0, r3
 8005ac4:	6871      	ldr	r1, [r6, #4]
 8005ac6:	d96e      	bls.n	8005ba6 <_dtoa_r+0x33e>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f001 f8cf 	bl	8006c6c <_Balloc>
 8005ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad0:	6030      	str	r0, [r6, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f1b8 0f0e 	cmp.w	r8, #14
 8005ad8:	9306      	str	r3, [sp, #24]
 8005ada:	f200 80ed 	bhi.w	8005cb8 <_dtoa_r+0x450>
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	f000 80ea 	beq.w	8005cb8 <_dtoa_r+0x450>
 8005ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae8:	f1ba 0f00 	cmp.w	sl, #0
 8005aec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005af0:	dd77      	ble.n	8005be2 <_dtoa_r+0x37a>
 8005af2:	4a28      	ldr	r2, [pc, #160]	; (8005b94 <_dtoa_r+0x32c>)
 8005af4:	f00a 030f 	and.w	r3, sl, #15
 8005af8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005afc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b00:	06f0      	lsls	r0, r6, #27
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005b0a:	d568      	bpl.n	8005bde <_dtoa_r+0x376>
 8005b0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005b10:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <_dtoa_r+0x330>)
 8005b12:	2503      	movs	r5, #3
 8005b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b18:	f7fa fe08 	bl	800072c <__aeabi_ddiv>
 8005b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b20:	f006 060f 	and.w	r6, r6, #15
 8005b24:	4f1c      	ldr	r7, [pc, #112]	; (8005b98 <_dtoa_r+0x330>)
 8005b26:	e04f      	b.n	8005bc8 <_dtoa_r+0x360>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b2e:	4453      	add	r3, sl
 8005b30:	f103 0801 	add.w	r8, r3, #1
 8005b34:	9304      	str	r3, [sp, #16]
 8005b36:	4643      	mov	r3, r8
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	bfb8      	it	lt
 8005b3c:	2301      	movlt	r3, #1
 8005b3e:	e7ba      	b.n	8005ab6 <_dtoa_r+0x24e>
 8005b40:	2300      	movs	r3, #0
 8005b42:	e7b2      	b.n	8005aaa <_dtoa_r+0x242>
 8005b44:	2300      	movs	r3, #0
 8005b46:	e7f0      	b.n	8005b2a <_dtoa_r+0x2c2>
 8005b48:	2501      	movs	r5, #1
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9509      	str	r5, [sp, #36]	; 0x24
 8005b4e:	931e      	str	r3, [sp, #120]	; 0x78
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	2200      	movs	r2, #0
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	4698      	mov	r8, r3
 8005b5a:	2312      	movs	r3, #18
 8005b5c:	921f      	str	r2, [sp, #124]	; 0x7c
 8005b5e:	e7aa      	b.n	8005ab6 <_dtoa_r+0x24e>
 8005b60:	2301      	movs	r3, #1
 8005b62:	9309      	str	r3, [sp, #36]	; 0x24
 8005b64:	e7f4      	b.n	8005b50 <_dtoa_r+0x2e8>
 8005b66:	bf00      	nop
 8005b68:	636f4361 	.word	0x636f4361
 8005b6c:	3fd287a7 	.word	0x3fd287a7
 8005b70:	8b60c8b3 	.word	0x8b60c8b3
 8005b74:	3fc68a28 	.word	0x3fc68a28
 8005b78:	509f79fb 	.word	0x509f79fb
 8005b7c:	3fd34413 	.word	0x3fd34413
 8005b80:	7ff00000 	.word	0x7ff00000
 8005b84:	08008f49 	.word	0x08008f49
 8005b88:	08008f40 	.word	0x08008f40
 8005b8c:	08008810 	.word	0x08008810
 8005b90:	3ff80000 	.word	0x3ff80000
 8005b94:	08008fe8 	.word	0x08008fe8
 8005b98:	08008fc0 	.word	0x08008fc0
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	e7da      	b.n	8005b5c <_dtoa_r+0x2f4>
 8005ba6:	3101      	adds	r1, #1
 8005ba8:	6071      	str	r1, [r6, #4]
 8005baa:	0052      	lsls	r2, r2, #1
 8005bac:	e787      	b.n	8005abe <_dtoa_r+0x256>
 8005bae:	07f1      	lsls	r1, r6, #31
 8005bb0:	d508      	bpl.n	8005bc4 <_dtoa_r+0x35c>
 8005bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bba:	f7fa fc8d 	bl	80004d8 <__aeabi_dmul>
 8005bbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bc2:	3501      	adds	r5, #1
 8005bc4:	1076      	asrs	r6, r6, #1
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	2e00      	cmp	r6, #0
 8005bca:	d1f0      	bne.n	8005bae <_dtoa_r+0x346>
 8005bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd4:	f7fa fdaa 	bl	800072c <__aeabi_ddiv>
 8005bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bdc:	e01b      	b.n	8005c16 <_dtoa_r+0x3ae>
 8005bde:	2502      	movs	r5, #2
 8005be0:	e7a0      	b.n	8005b24 <_dtoa_r+0x2bc>
 8005be2:	f000 80a4 	beq.w	8005d2e <_dtoa_r+0x4c6>
 8005be6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005bea:	f1ca 0600 	rsb	r6, sl, #0
 8005bee:	4ba0      	ldr	r3, [pc, #640]	; (8005e70 <_dtoa_r+0x608>)
 8005bf0:	f006 020f 	and.w	r2, r6, #15
 8005bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa fc6c 	bl	80004d8 <__aeabi_dmul>
 8005c00:	2502      	movs	r5, #2
 8005c02:	2300      	movs	r3, #0
 8005c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c08:	4f9a      	ldr	r7, [pc, #616]	; (8005e74 <_dtoa_r+0x60c>)
 8005c0a:	1136      	asrs	r6, r6, #4
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	f040 8083 	bne.w	8005d18 <_dtoa_r+0x4b0>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e0      	bne.n	8005bd8 <_dtoa_r+0x370>
 8005c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 808a 	beq.w	8005d32 <_dtoa_r+0x4ca>
 8005c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4b92      	ldr	r3, [pc, #584]	; (8005e78 <_dtoa_r+0x610>)
 8005c2e:	f7fa fec5 	bl	80009bc <__aeabi_dcmplt>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d07d      	beq.n	8005d32 <_dtoa_r+0x4ca>
 8005c36:	f1b8 0f00 	cmp.w	r8, #0
 8005c3a:	d07a      	beq.n	8005d32 <_dtoa_r+0x4ca>
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd36      	ble.n	8005cb0 <_dtoa_r+0x448>
 8005c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c46:	2200      	movs	r2, #0
 8005c48:	4b8c      	ldr	r3, [pc, #560]	; (8005e7c <_dtoa_r+0x614>)
 8005c4a:	f7fa fc45 	bl	80004d8 <__aeabi_dmul>
 8005c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c52:	9e04      	ldr	r6, [sp, #16]
 8005c54:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005c58:	3501      	adds	r5, #1
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f7fa fbd2 	bl	8000404 <__aeabi_i2d>
 8005c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c64:	f7fa fc38 	bl	80004d8 <__aeabi_dmul>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <_dtoa_r+0x618>)
 8005c6c:	f7fa fa7e 	bl	800016c <__adddf3>
 8005c70:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c78:	950b      	str	r5, [sp, #44]	; 0x2c
 8005c7a:	2e00      	cmp	r6, #0
 8005c7c:	d15c      	bne.n	8005d38 <_dtoa_r+0x4d0>
 8005c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c82:	2200      	movs	r2, #0
 8005c84:	4b7f      	ldr	r3, [pc, #508]	; (8005e84 <_dtoa_r+0x61c>)
 8005c86:	f7fa fa6f 	bl	8000168 <__aeabi_dsub>
 8005c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c92:	f7fa feb1 	bl	80009f8 <__aeabi_dcmpgt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f040 8281 	bne.w	800619e <_dtoa_r+0x936>
 8005c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ca2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005ca6:	f7fa fe89 	bl	80009bc <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 8275 	bne.w	800619a <_dtoa_r+0x932>
 8005cb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f2c0 814b 	blt.w	8005f56 <_dtoa_r+0x6ee>
 8005cc0:	f1ba 0f0e 	cmp.w	sl, #14
 8005cc4:	f300 8147 	bgt.w	8005f56 <_dtoa_r+0x6ee>
 8005cc8:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <_dtoa_r+0x608>)
 8005cca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f280 80d7 	bge.w	8005e8c <_dtoa_r+0x624>
 8005cde:	f1b8 0f00 	cmp.w	r8, #0
 8005ce2:	f300 80d3 	bgt.w	8005e8c <_dtoa_r+0x624>
 8005ce6:	f040 8257 	bne.w	8006198 <_dtoa_r+0x930>
 8005cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4b64      	ldr	r3, [pc, #400]	; (8005e84 <_dtoa_r+0x61c>)
 8005cf2:	f7fa fbf1 	bl	80004d8 <__aeabi_dmul>
 8005cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cfa:	f7fa fe73 	bl	80009e4 <__aeabi_dcmpge>
 8005cfe:	4646      	mov	r6, r8
 8005d00:	4647      	mov	r7, r8
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f040 822d 	bne.w	8006162 <_dtoa_r+0x8fa>
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	9a06      	ldr	r2, [sp, #24]
 8005d0c:	1c5d      	adds	r5, r3, #1
 8005d0e:	2331      	movs	r3, #49	; 0x31
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	7013      	strb	r3, [r2, #0]
 8005d16:	e228      	b.n	800616a <_dtoa_r+0x902>
 8005d18:	07f2      	lsls	r2, r6, #31
 8005d1a:	d505      	bpl.n	8005d28 <_dtoa_r+0x4c0>
 8005d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d20:	f7fa fbda 	bl	80004d8 <__aeabi_dmul>
 8005d24:	2301      	movs	r3, #1
 8005d26:	3501      	adds	r5, #1
 8005d28:	1076      	asrs	r6, r6, #1
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	e76e      	b.n	8005c0c <_dtoa_r+0x3a4>
 8005d2e:	2502      	movs	r5, #2
 8005d30:	e771      	b.n	8005c16 <_dtoa_r+0x3ae>
 8005d32:	4657      	mov	r7, sl
 8005d34:	4646      	mov	r6, r8
 8005d36:	e790      	b.n	8005c5a <_dtoa_r+0x3f2>
 8005d38:	4b4d      	ldr	r3, [pc, #308]	; (8005e70 <_dtoa_r+0x608>)
 8005d3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d3e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d048      	beq.n	8005dda <_dtoa_r+0x572>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	494e      	ldr	r1, [pc, #312]	; (8005e88 <_dtoa_r+0x620>)
 8005d50:	f7fa fcec 	bl	800072c <__aeabi_ddiv>
 8005d54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d58:	f7fa fa06 	bl	8000168 <__aeabi_dsub>
 8005d5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d60:	9d06      	ldr	r5, [sp, #24]
 8005d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d66:	f7fa fe67 	bl	8000a38 <__aeabi_d2iz>
 8005d6a:	9011      	str	r0, [sp, #68]	; 0x44
 8005d6c:	f7fa fb4a 	bl	8000404 <__aeabi_i2d>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d78:	f7fa f9f6 	bl	8000168 <__aeabi_dsub>
 8005d7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d82:	3330      	adds	r3, #48	; 0x30
 8005d84:	f805 3b01 	strb.w	r3, [r5], #1
 8005d88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d8c:	f7fa fe16 	bl	80009bc <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d163      	bne.n	8005e5c <_dtoa_r+0x5f4>
 8005d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d98:	2000      	movs	r0, #0
 8005d9a:	4937      	ldr	r1, [pc, #220]	; (8005e78 <_dtoa_r+0x610>)
 8005d9c:	f7fa f9e4 	bl	8000168 <__aeabi_dsub>
 8005da0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005da4:	f7fa fe0a 	bl	80009bc <__aeabi_dcmplt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f040 80b5 	bne.w	8005f18 <_dtoa_r+0x6b0>
 8005dae:	9b06      	ldr	r3, [sp, #24]
 8005db0:	1aeb      	subs	r3, r5, r3
 8005db2:	429e      	cmp	r6, r3
 8005db4:	f77f af7c 	ble.w	8005cb0 <_dtoa_r+0x448>
 8005db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	4b2f      	ldr	r3, [pc, #188]	; (8005e7c <_dtoa_r+0x614>)
 8005dc0:	f7fa fb8a 	bl	80004d8 <__aeabi_dmul>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dce:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <_dtoa_r+0x614>)
 8005dd0:	f7fa fb82 	bl	80004d8 <__aeabi_dmul>
 8005dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dd8:	e7c3      	b.n	8005d62 <_dtoa_r+0x4fa>
 8005dda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005de8:	199d      	adds	r5, r3, r6
 8005dea:	461e      	mov	r6, r3
 8005dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005df0:	f7fa fe22 	bl	8000a38 <__aeabi_d2iz>
 8005df4:	9011      	str	r0, [sp, #68]	; 0x44
 8005df6:	f7fa fb05 	bl	8000404 <__aeabi_i2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e02:	f7fa f9b1 	bl	8000168 <__aeabi_dsub>
 8005e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e0c:	3330      	adds	r3, #48	; 0x30
 8005e0e:	f806 3b01 	strb.w	r3, [r6], #1
 8005e12:	42ae      	cmp	r6, r5
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	d124      	bne.n	8005e64 <_dtoa_r+0x5fc>
 8005e1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <_dtoa_r+0x620>)
 8005e20:	f7fa f9a4 	bl	800016c <__adddf3>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e2c:	f7fa fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d171      	bne.n	8005f18 <_dtoa_r+0x6b0>
 8005e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4913      	ldr	r1, [pc, #76]	; (8005e88 <_dtoa_r+0x620>)
 8005e3c:	f7fa f994 	bl	8000168 <__aeabi_dsub>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e48:	f7fa fdb8 	bl	80009bc <__aeabi_dcmplt>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f43f af2f 	beq.w	8005cb0 <_dtoa_r+0x448>
 8005e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e56:	1e6a      	subs	r2, r5, #1
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d001      	beq.n	8005e60 <_dtoa_r+0x5f8>
 8005e5c:	46ba      	mov	sl, r7
 8005e5e:	e04a      	b.n	8005ef6 <_dtoa_r+0x68e>
 8005e60:	4615      	mov	r5, r2
 8005e62:	e7f6      	b.n	8005e52 <_dtoa_r+0x5ea>
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <_dtoa_r+0x614>)
 8005e66:	f7fa fb37 	bl	80004d8 <__aeabi_dmul>
 8005e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e6e:	e7bd      	b.n	8005dec <_dtoa_r+0x584>
 8005e70:	08008fe8 	.word	0x08008fe8
 8005e74:	08008fc0 	.word	0x08008fc0
 8005e78:	3ff00000 	.word	0x3ff00000
 8005e7c:	40240000 	.word	0x40240000
 8005e80:	401c0000 	.word	0x401c0000
 8005e84:	40140000 	.word	0x40140000
 8005e88:	3fe00000 	.word	0x3fe00000
 8005e8c:	9d06      	ldr	r5, [sp, #24]
 8005e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa fc47 	bl	800072c <__aeabi_ddiv>
 8005e9e:	f7fa fdcb 	bl	8000a38 <__aeabi_d2iz>
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	f7fa faae 	bl	8000404 <__aeabi_i2d>
 8005ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eac:	f7fa fb14 	bl	80004d8 <__aeabi_dmul>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa f956 	bl	8000168 <__aeabi_dsub>
 8005ebc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ec4:	9e06      	ldr	r6, [sp, #24]
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	1bae      	subs	r6, r5, r6
 8005eca:	45b0      	cmp	r8, r6
 8005ecc:	460b      	mov	r3, r1
 8005ece:	d135      	bne.n	8005f3c <_dtoa_r+0x6d4>
 8005ed0:	f7fa f94c 	bl	800016c <__adddf3>
 8005ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed8:	4606      	mov	r6, r0
 8005eda:	460f      	mov	r7, r1
 8005edc:	f7fa fd8c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee0:	b9c8      	cbnz	r0, 8005f16 <_dtoa_r+0x6ae>
 8005ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa fd5d 	bl	80009a8 <__aeabi_dcmpeq>
 8005eee:	b110      	cbz	r0, 8005ef6 <_dtoa_r+0x68e>
 8005ef0:	f019 0f01 	tst.w	r9, #1
 8005ef4:	d10f      	bne.n	8005f16 <_dtoa_r+0x6ae>
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 feeb 	bl	8006cd4 <_Bfree>
 8005efe:	2300      	movs	r3, #0
 8005f00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f02:	702b      	strb	r3, [r5, #0]
 8005f04:	f10a 0301 	add.w	r3, sl, #1
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f43f acf3 	beq.w	80058f8 <_dtoa_r+0x90>
 8005f12:	601d      	str	r5, [r3, #0]
 8005f14:	e4f0      	b.n	80058f8 <_dtoa_r+0x90>
 8005f16:	4657      	mov	r7, sl
 8005f18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f1c:	1e6b      	subs	r3, r5, #1
 8005f1e:	2a39      	cmp	r2, #57	; 0x39
 8005f20:	d106      	bne.n	8005f30 <_dtoa_r+0x6c8>
 8005f22:	9a06      	ldr	r2, [sp, #24]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d107      	bne.n	8005f38 <_dtoa_r+0x6d0>
 8005f28:	2330      	movs	r3, #48	; 0x30
 8005f2a:	7013      	strb	r3, [r2, #0]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	3701      	adds	r7, #1
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	3201      	adds	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e791      	b.n	8005e5c <_dtoa_r+0x5f4>
 8005f38:	461d      	mov	r5, r3
 8005f3a:	e7ed      	b.n	8005f18 <_dtoa_r+0x6b0>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4b99      	ldr	r3, [pc, #612]	; (80061a4 <_dtoa_r+0x93c>)
 8005f40:	f7fa faca 	bl	80004d8 <__aeabi_dmul>
 8005f44:	2200      	movs	r2, #0
 8005f46:	2300      	movs	r3, #0
 8005f48:	4606      	mov	r6, r0
 8005f4a:	460f      	mov	r7, r1
 8005f4c:	f7fa fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d09e      	beq.n	8005e92 <_dtoa_r+0x62a>
 8005f54:	e7cf      	b.n	8005ef6 <_dtoa_r+0x68e>
 8005f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	f000 8088 	beq.w	800606e <_dtoa_r+0x806>
 8005f5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f60:	2a01      	cmp	r2, #1
 8005f62:	dc6d      	bgt.n	8006040 <_dtoa_r+0x7d8>
 8005f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	d066      	beq.n	8006038 <_dtoa_r+0x7d0>
 8005f6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f6e:	464d      	mov	r5, r9
 8005f70:	9e08      	ldr	r6, [sp, #32]
 8005f72:	9a07      	ldr	r2, [sp, #28]
 8005f74:	2101      	movs	r1, #1
 8005f76:	441a      	add	r2, r3
 8005f78:	4620      	mov	r0, r4
 8005f7a:	4499      	add	r9, r3
 8005f7c:	9207      	str	r2, [sp, #28]
 8005f7e:	f000 ff87 	bl	8006e90 <__i2b>
 8005f82:	4607      	mov	r7, r0
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	dd0b      	ble.n	8005fa0 <_dtoa_r+0x738>
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd08      	ble.n	8005fa0 <_dtoa_r+0x738>
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	bfa8      	it	ge
 8005f92:	462b      	movge	r3, r5
 8005f94:	9a07      	ldr	r2, [sp, #28]
 8005f96:	eba9 0903 	sub.w	r9, r9, r3
 8005f9a:	1aed      	subs	r5, r5, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	9307      	str	r3, [sp, #28]
 8005fa0:	9b08      	ldr	r3, [sp, #32]
 8005fa2:	b1eb      	cbz	r3, 8005fe0 <_dtoa_r+0x778>
 8005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d065      	beq.n	8006076 <_dtoa_r+0x80e>
 8005faa:	b18e      	cbz	r6, 8005fd0 <_dtoa_r+0x768>
 8005fac:	4639      	mov	r1, r7
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f001 f80b 	bl	8006fcc <__pow5mult>
 8005fb6:	465a      	mov	r2, fp
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4607      	mov	r7, r0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 ff70 	bl	8006ea2 <__multiply>
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 fe84 	bl	8006cd4 <_Bfree>
 8005fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fce:	469b      	mov	fp, r3
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	1b9a      	subs	r2, r3, r6
 8005fd4:	d004      	beq.n	8005fe0 <_dtoa_r+0x778>
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 fff7 	bl	8006fcc <__pow5mult>
 8005fde:	4683      	mov	fp, r0
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 ff54 	bl	8006e90 <__i2b>
 8005fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fea:	4606      	mov	r6, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 81c6 	beq.w	800637e <_dtoa_r+0xb16>
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 ffe8 	bl	8006fcc <__pow5mult>
 8005ffc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ffe:	4606      	mov	r6, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	dc3e      	bgt.n	8006082 <_dtoa_r+0x81a>
 8006004:	9b02      	ldr	r3, [sp, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d137      	bne.n	800607a <_dtoa_r+0x812>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006010:	2b00      	cmp	r3, #0
 8006012:	d134      	bne.n	800607e <_dtoa_r+0x816>
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800601a:	0d1b      	lsrs	r3, r3, #20
 800601c:	051b      	lsls	r3, r3, #20
 800601e:	b12b      	cbz	r3, 800602c <_dtoa_r+0x7c4>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	f109 0901 	add.w	r9, r9, #1
 8006026:	3301      	adds	r3, #1
 8006028:	9307      	str	r3, [sp, #28]
 800602a:	2301      	movs	r3, #1
 800602c:	9308      	str	r3, [sp, #32]
 800602e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	d128      	bne.n	8006086 <_dtoa_r+0x81e>
 8006034:	2001      	movs	r0, #1
 8006036:	e02e      	b.n	8006096 <_dtoa_r+0x82e>
 8006038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800603a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800603e:	e796      	b.n	8005f6e <_dtoa_r+0x706>
 8006040:	9b08      	ldr	r3, [sp, #32]
 8006042:	f108 36ff 	add.w	r6, r8, #4294967295
 8006046:	42b3      	cmp	r3, r6
 8006048:	bfb7      	itett	lt
 800604a:	9b08      	ldrlt	r3, [sp, #32]
 800604c:	1b9e      	subge	r6, r3, r6
 800604e:	1af2      	sublt	r2, r6, r3
 8006050:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006052:	bfbf      	itttt	lt
 8006054:	9608      	strlt	r6, [sp, #32]
 8006056:	189b      	addlt	r3, r3, r2
 8006058:	930c      	strlt	r3, [sp, #48]	; 0x30
 800605a:	2600      	movlt	r6, #0
 800605c:	f1b8 0f00 	cmp.w	r8, #0
 8006060:	bfb9      	ittee	lt
 8006062:	eba9 0508 	sublt.w	r5, r9, r8
 8006066:	2300      	movlt	r3, #0
 8006068:	464d      	movge	r5, r9
 800606a:	4643      	movge	r3, r8
 800606c:	e781      	b.n	8005f72 <_dtoa_r+0x70a>
 800606e:	9e08      	ldr	r6, [sp, #32]
 8006070:	464d      	mov	r5, r9
 8006072:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006074:	e786      	b.n	8005f84 <_dtoa_r+0x71c>
 8006076:	9a08      	ldr	r2, [sp, #32]
 8006078:	e7ad      	b.n	8005fd6 <_dtoa_r+0x76e>
 800607a:	2300      	movs	r3, #0
 800607c:	e7d6      	b.n	800602c <_dtoa_r+0x7c4>
 800607e:	9b02      	ldr	r3, [sp, #8]
 8006080:	e7d4      	b.n	800602c <_dtoa_r+0x7c4>
 8006082:	2300      	movs	r3, #0
 8006084:	9308      	str	r3, [sp, #32]
 8006086:	6933      	ldr	r3, [r6, #16]
 8006088:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800608c:	6918      	ldr	r0, [r3, #16]
 800608e:	f000 feb1 	bl	8006df4 <__hi0bits>
 8006092:	f1c0 0020 	rsb	r0, r0, #32
 8006096:	9b07      	ldr	r3, [sp, #28]
 8006098:	4418      	add	r0, r3
 800609a:	f010 001f 	ands.w	r0, r0, #31
 800609e:	d047      	beq.n	8006130 <_dtoa_r+0x8c8>
 80060a0:	f1c0 0320 	rsb	r3, r0, #32
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	dd3b      	ble.n	8006120 <_dtoa_r+0x8b8>
 80060a8:	9b07      	ldr	r3, [sp, #28]
 80060aa:	f1c0 001c 	rsb	r0, r0, #28
 80060ae:	4481      	add	r9, r0
 80060b0:	4405      	add	r5, r0
 80060b2:	4403      	add	r3, r0
 80060b4:	9307      	str	r3, [sp, #28]
 80060b6:	f1b9 0f00 	cmp.w	r9, #0
 80060ba:	dd05      	ble.n	80060c8 <_dtoa_r+0x860>
 80060bc:	4659      	mov	r1, fp
 80060be:	464a      	mov	r2, r9
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 ffd1 	bl	8007068 <__lshift>
 80060c6:	4683      	mov	fp, r0
 80060c8:	9b07      	ldr	r3, [sp, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dd05      	ble.n	80060da <_dtoa_r+0x872>
 80060ce:	4631      	mov	r1, r6
 80060d0:	461a      	mov	r2, r3
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 ffc8 	bl	8007068 <__lshift>
 80060d8:	4606      	mov	r6, r0
 80060da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060dc:	b353      	cbz	r3, 8006134 <_dtoa_r+0x8cc>
 80060de:	4631      	mov	r1, r6
 80060e0:	4658      	mov	r0, fp
 80060e2:	f001 f815 	bl	8007110 <__mcmp>
 80060e6:	2800      	cmp	r0, #0
 80060e8:	da24      	bge.n	8006134 <_dtoa_r+0x8cc>
 80060ea:	2300      	movs	r3, #0
 80060ec:	4659      	mov	r1, fp
 80060ee:	220a      	movs	r2, #10
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 fe06 	bl	8006d02 <__multadd>
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fc:	4683      	mov	fp, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8144 	beq.w	800638c <_dtoa_r+0xb24>
 8006104:	2300      	movs	r3, #0
 8006106:	4639      	mov	r1, r7
 8006108:	220a      	movs	r2, #10
 800610a:	4620      	mov	r0, r4
 800610c:	f000 fdf9 	bl	8006d02 <__multadd>
 8006110:	9b04      	ldr	r3, [sp, #16]
 8006112:	4607      	mov	r7, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	dc4d      	bgt.n	80061b4 <_dtoa_r+0x94c>
 8006118:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800611a:	2b02      	cmp	r3, #2
 800611c:	dd4a      	ble.n	80061b4 <_dtoa_r+0x94c>
 800611e:	e011      	b.n	8006144 <_dtoa_r+0x8dc>
 8006120:	d0c9      	beq.n	80060b6 <_dtoa_r+0x84e>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	331c      	adds	r3, #28
 8006126:	441a      	add	r2, r3
 8006128:	4499      	add	r9, r3
 800612a:	441d      	add	r5, r3
 800612c:	4613      	mov	r3, r2
 800612e:	e7c1      	b.n	80060b4 <_dtoa_r+0x84c>
 8006130:	4603      	mov	r3, r0
 8006132:	e7f6      	b.n	8006122 <_dtoa_r+0x8ba>
 8006134:	f1b8 0f00 	cmp.w	r8, #0
 8006138:	dc36      	bgt.n	80061a8 <_dtoa_r+0x940>
 800613a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800613c:	2b02      	cmp	r3, #2
 800613e:	dd33      	ble.n	80061a8 <_dtoa_r+0x940>
 8006140:	f8cd 8010 	str.w	r8, [sp, #16]
 8006144:	9b04      	ldr	r3, [sp, #16]
 8006146:	b963      	cbnz	r3, 8006162 <_dtoa_r+0x8fa>
 8006148:	4631      	mov	r1, r6
 800614a:	2205      	movs	r2, #5
 800614c:	4620      	mov	r0, r4
 800614e:	f000 fdd8 	bl	8006d02 <__multadd>
 8006152:	4601      	mov	r1, r0
 8006154:	4606      	mov	r6, r0
 8006156:	4658      	mov	r0, fp
 8006158:	f000 ffda 	bl	8007110 <__mcmp>
 800615c:	2800      	cmp	r0, #0
 800615e:	f73f add3 	bgt.w	8005d08 <_dtoa_r+0x4a0>
 8006162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006164:	9d06      	ldr	r5, [sp, #24]
 8006166:	ea6f 0a03 	mvn.w	sl, r3
 800616a:	f04f 0900 	mov.w	r9, #0
 800616e:	4631      	mov	r1, r6
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fdaf 	bl	8006cd4 <_Bfree>
 8006176:	2f00      	cmp	r7, #0
 8006178:	f43f aebd 	beq.w	8005ef6 <_dtoa_r+0x68e>
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	d005      	beq.n	800618e <_dtoa_r+0x926>
 8006182:	45b9      	cmp	r9, r7
 8006184:	d003      	beq.n	800618e <_dtoa_r+0x926>
 8006186:	4649      	mov	r1, r9
 8006188:	4620      	mov	r0, r4
 800618a:	f000 fda3 	bl	8006cd4 <_Bfree>
 800618e:	4639      	mov	r1, r7
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fd9f 	bl	8006cd4 <_Bfree>
 8006196:	e6ae      	b.n	8005ef6 <_dtoa_r+0x68e>
 8006198:	2600      	movs	r6, #0
 800619a:	4637      	mov	r7, r6
 800619c:	e7e1      	b.n	8006162 <_dtoa_r+0x8fa>
 800619e:	46ba      	mov	sl, r7
 80061a0:	4637      	mov	r7, r6
 80061a2:	e5b1      	b.n	8005d08 <_dtoa_r+0x4a0>
 80061a4:	40240000 	.word	0x40240000
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80f3 	beq.w	800639a <_dtoa_r+0xb32>
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	dd05      	ble.n	80061c4 <_dtoa_r+0x95c>
 80061b8:	4639      	mov	r1, r7
 80061ba:	462a      	mov	r2, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 ff53 	bl	8007068 <__lshift>
 80061c2:	4607      	mov	r7, r0
 80061c4:	9b08      	ldr	r3, [sp, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04c      	beq.n	8006264 <_dtoa_r+0x9fc>
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fd4d 	bl	8006c6c <_Balloc>
 80061d2:	4605      	mov	r5, r0
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	f107 010c 	add.w	r1, r7, #12
 80061da:	3202      	adds	r2, #2
 80061dc:	0092      	lsls	r2, r2, #2
 80061de:	300c      	adds	r0, #12
 80061e0:	f7fd fcca 	bl	8003b78 <memcpy>
 80061e4:	2201      	movs	r2, #1
 80061e6:	4629      	mov	r1, r5
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 ff3d 	bl	8007068 <__lshift>
 80061ee:	46b9      	mov	r9, r7
 80061f0:	4607      	mov	r7, r0
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	9307      	str	r3, [sp, #28]
 80061f6:	9b02      	ldr	r3, [sp, #8]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	9308      	str	r3, [sp, #32]
 80061fe:	4631      	mov	r1, r6
 8006200:	4658      	mov	r0, fp
 8006202:	f7ff faa1 	bl	8005748 <quorem>
 8006206:	4649      	mov	r1, r9
 8006208:	4605      	mov	r5, r0
 800620a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800620e:	4658      	mov	r0, fp
 8006210:	f000 ff7e 	bl	8007110 <__mcmp>
 8006214:	463a      	mov	r2, r7
 8006216:	9002      	str	r0, [sp, #8]
 8006218:	4631      	mov	r1, r6
 800621a:	4620      	mov	r0, r4
 800621c:	f000 ff92 	bl	8007144 <__mdiff>
 8006220:	68c3      	ldr	r3, [r0, #12]
 8006222:	4602      	mov	r2, r0
 8006224:	bb03      	cbnz	r3, 8006268 <_dtoa_r+0xa00>
 8006226:	4601      	mov	r1, r0
 8006228:	9009      	str	r0, [sp, #36]	; 0x24
 800622a:	4658      	mov	r0, fp
 800622c:	f000 ff70 	bl	8007110 <__mcmp>
 8006230:	4603      	mov	r3, r0
 8006232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006234:	4611      	mov	r1, r2
 8006236:	4620      	mov	r0, r4
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	f000 fd4b 	bl	8006cd4 <_Bfree>
 800623e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006240:	b9a3      	cbnz	r3, 800626c <_dtoa_r+0xa04>
 8006242:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006244:	b992      	cbnz	r2, 800626c <_dtoa_r+0xa04>
 8006246:	9a08      	ldr	r2, [sp, #32]
 8006248:	b982      	cbnz	r2, 800626c <_dtoa_r+0xa04>
 800624a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800624e:	d029      	beq.n	80062a4 <_dtoa_r+0xa3c>
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	dd01      	ble.n	800625a <_dtoa_r+0x9f2>
 8006256:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	1c5d      	adds	r5, r3, #1
 800625e:	f883 8000 	strb.w	r8, [r3]
 8006262:	e784      	b.n	800616e <_dtoa_r+0x906>
 8006264:	4638      	mov	r0, r7
 8006266:	e7c2      	b.n	80061ee <_dtoa_r+0x986>
 8006268:	2301      	movs	r3, #1
 800626a:	e7e3      	b.n	8006234 <_dtoa_r+0x9cc>
 800626c:	9a02      	ldr	r2, [sp, #8]
 800626e:	2a00      	cmp	r2, #0
 8006270:	db04      	blt.n	800627c <_dtoa_r+0xa14>
 8006272:	d123      	bne.n	80062bc <_dtoa_r+0xa54>
 8006274:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006276:	bb0a      	cbnz	r2, 80062bc <_dtoa_r+0xa54>
 8006278:	9a08      	ldr	r2, [sp, #32]
 800627a:	b9fa      	cbnz	r2, 80062bc <_dtoa_r+0xa54>
 800627c:	2b00      	cmp	r3, #0
 800627e:	ddec      	ble.n	800625a <_dtoa_r+0x9f2>
 8006280:	4659      	mov	r1, fp
 8006282:	2201      	movs	r2, #1
 8006284:	4620      	mov	r0, r4
 8006286:	f000 feef 	bl	8007068 <__lshift>
 800628a:	4631      	mov	r1, r6
 800628c:	4683      	mov	fp, r0
 800628e:	f000 ff3f 	bl	8007110 <__mcmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	dc03      	bgt.n	800629e <_dtoa_r+0xa36>
 8006296:	d1e0      	bne.n	800625a <_dtoa_r+0x9f2>
 8006298:	f018 0f01 	tst.w	r8, #1
 800629c:	d0dd      	beq.n	800625a <_dtoa_r+0x9f2>
 800629e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062a2:	d1d8      	bne.n	8006256 <_dtoa_r+0x9ee>
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	9a07      	ldr	r2, [sp, #28]
 80062a8:	1c5d      	adds	r5, r3, #1
 80062aa:	2339      	movs	r3, #57	; 0x39
 80062ac:	7013      	strb	r3, [r2, #0]
 80062ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062b2:	1e6a      	subs	r2, r5, #1
 80062b4:	2b39      	cmp	r3, #57	; 0x39
 80062b6:	d04d      	beq.n	8006354 <_dtoa_r+0xaec>
 80062b8:	3301      	adds	r3, #1
 80062ba:	e052      	b.n	8006362 <_dtoa_r+0xafa>
 80062bc:	9a07      	ldr	r2, [sp, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f102 0501 	add.w	r5, r2, #1
 80062c4:	dd06      	ble.n	80062d4 <_dtoa_r+0xa6c>
 80062c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062ca:	d0eb      	beq.n	80062a4 <_dtoa_r+0xa3c>
 80062cc:	f108 0801 	add.w	r8, r8, #1
 80062d0:	9b07      	ldr	r3, [sp, #28]
 80062d2:	e7c4      	b.n	800625e <_dtoa_r+0x9f6>
 80062d4:	9b06      	ldr	r3, [sp, #24]
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	1aeb      	subs	r3, r5, r3
 80062da:	4293      	cmp	r3, r2
 80062dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80062e0:	d021      	beq.n	8006326 <_dtoa_r+0xabe>
 80062e2:	4659      	mov	r1, fp
 80062e4:	2300      	movs	r3, #0
 80062e6:	220a      	movs	r2, #10
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fd0a 	bl	8006d02 <__multadd>
 80062ee:	45b9      	cmp	r9, r7
 80062f0:	4683      	mov	fp, r0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	f04f 020a 	mov.w	r2, #10
 80062fa:	4649      	mov	r1, r9
 80062fc:	4620      	mov	r0, r4
 80062fe:	d105      	bne.n	800630c <_dtoa_r+0xaa4>
 8006300:	f000 fcff 	bl	8006d02 <__multadd>
 8006304:	4681      	mov	r9, r0
 8006306:	4607      	mov	r7, r0
 8006308:	9507      	str	r5, [sp, #28]
 800630a:	e778      	b.n	80061fe <_dtoa_r+0x996>
 800630c:	f000 fcf9 	bl	8006d02 <__multadd>
 8006310:	4639      	mov	r1, r7
 8006312:	4681      	mov	r9, r0
 8006314:	2300      	movs	r3, #0
 8006316:	220a      	movs	r2, #10
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fcf2 	bl	8006d02 <__multadd>
 800631e:	4607      	mov	r7, r0
 8006320:	e7f2      	b.n	8006308 <_dtoa_r+0xaa0>
 8006322:	f04f 0900 	mov.w	r9, #0
 8006326:	4659      	mov	r1, fp
 8006328:	2201      	movs	r2, #1
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fe9c 	bl	8007068 <__lshift>
 8006330:	4631      	mov	r1, r6
 8006332:	4683      	mov	fp, r0
 8006334:	f000 feec 	bl	8007110 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	dcb8      	bgt.n	80062ae <_dtoa_r+0xa46>
 800633c:	d102      	bne.n	8006344 <_dtoa_r+0xadc>
 800633e:	f018 0f01 	tst.w	r8, #1
 8006342:	d1b4      	bne.n	80062ae <_dtoa_r+0xa46>
 8006344:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006348:	1e6a      	subs	r2, r5, #1
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	f47f af0f 	bne.w	800616e <_dtoa_r+0x906>
 8006350:	4615      	mov	r5, r2
 8006352:	e7f7      	b.n	8006344 <_dtoa_r+0xadc>
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	4293      	cmp	r3, r2
 8006358:	d105      	bne.n	8006366 <_dtoa_r+0xafe>
 800635a:	2331      	movs	r3, #49	; 0x31
 800635c:	9a06      	ldr	r2, [sp, #24]
 800635e:	f10a 0a01 	add.w	sl, sl, #1
 8006362:	7013      	strb	r3, [r2, #0]
 8006364:	e703      	b.n	800616e <_dtoa_r+0x906>
 8006366:	4615      	mov	r5, r2
 8006368:	e7a1      	b.n	80062ae <_dtoa_r+0xa46>
 800636a:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <_dtoa_r+0xb60>)
 800636c:	f7ff bae1 	b.w	8005932 <_dtoa_r+0xca>
 8006370:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f aabb 	bne.w	80058ee <_dtoa_r+0x86>
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <_dtoa_r+0xb64>)
 800637a:	f7ff bada 	b.w	8005932 <_dtoa_r+0xca>
 800637e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006380:	2b01      	cmp	r3, #1
 8006382:	f77f ae3f 	ble.w	8006004 <_dtoa_r+0x79c>
 8006386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006388:	9308      	str	r3, [sp, #32]
 800638a:	e653      	b.n	8006034 <_dtoa_r+0x7cc>
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	dc03      	bgt.n	800639a <_dtoa_r+0xb32>
 8006392:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006394:	2b02      	cmp	r3, #2
 8006396:	f73f aed5 	bgt.w	8006144 <_dtoa_r+0x8dc>
 800639a:	9d06      	ldr	r5, [sp, #24]
 800639c:	4631      	mov	r1, r6
 800639e:	4658      	mov	r0, fp
 80063a0:	f7ff f9d2 	bl	8005748 <quorem>
 80063a4:	9b06      	ldr	r3, [sp, #24]
 80063a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063aa:	f805 8b01 	strb.w	r8, [r5], #1
 80063ae:	9a04      	ldr	r2, [sp, #16]
 80063b0:	1aeb      	subs	r3, r5, r3
 80063b2:	429a      	cmp	r2, r3
 80063b4:	ddb5      	ble.n	8006322 <_dtoa_r+0xaba>
 80063b6:	4659      	mov	r1, fp
 80063b8:	2300      	movs	r3, #0
 80063ba:	220a      	movs	r2, #10
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 fca0 	bl	8006d02 <__multadd>
 80063c2:	4683      	mov	fp, r0
 80063c4:	e7ea      	b.n	800639c <_dtoa_r+0xb34>
 80063c6:	bf00      	nop
 80063c8:	0800880f 	.word	0x0800880f
 80063cc:	08008f40 	.word	0x08008f40

080063d0 <std>:
 80063d0:	2300      	movs	r3, #0
 80063d2:	b510      	push	{r4, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	e9c0 3300 	strd	r3, r3, [r0]
 80063da:	6083      	str	r3, [r0, #8]
 80063dc:	8181      	strh	r1, [r0, #12]
 80063de:	6643      	str	r3, [r0, #100]	; 0x64
 80063e0:	81c2      	strh	r2, [r0, #14]
 80063e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063e6:	6183      	str	r3, [r0, #24]
 80063e8:	4619      	mov	r1, r3
 80063ea:	2208      	movs	r2, #8
 80063ec:	305c      	adds	r0, #92	; 0x5c
 80063ee:	f7fd fbe7 	bl	8003bc0 <memset>
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <std+0x38>)
 80063f4:	6224      	str	r4, [r4, #32]
 80063f6:	6263      	str	r3, [r4, #36]	; 0x24
 80063f8:	4b04      	ldr	r3, [pc, #16]	; (800640c <std+0x3c>)
 80063fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80063fc:	4b04      	ldr	r3, [pc, #16]	; (8006410 <std+0x40>)
 80063fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006400:	4b04      	ldr	r3, [pc, #16]	; (8006414 <std+0x44>)
 8006402:	6323      	str	r3, [r4, #48]	; 0x30
 8006404:	bd10      	pop	{r4, pc}
 8006406:	bf00      	nop
 8006408:	080048fd 	.word	0x080048fd
 800640c:	08004923 	.word	0x08004923
 8006410:	0800495b 	.word	0x0800495b
 8006414:	0800497f 	.word	0x0800497f

08006418 <_cleanup_r>:
 8006418:	4901      	ldr	r1, [pc, #4]	; (8006420 <_cleanup_r+0x8>)
 800641a:	f000 b885 	b.w	8006528 <_fwalk_reent>
 800641e:	bf00      	nop
 8006420:	080085e5 	.word	0x080085e5

08006424 <__sfmoreglue>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	2568      	movs	r5, #104	; 0x68
 8006428:	1e4a      	subs	r2, r1, #1
 800642a:	4355      	muls	r5, r2
 800642c:	460e      	mov	r6, r1
 800642e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006432:	f001 f86d 	bl	8007510 <_malloc_r>
 8006436:	4604      	mov	r4, r0
 8006438:	b140      	cbz	r0, 800644c <__sfmoreglue+0x28>
 800643a:	2100      	movs	r1, #0
 800643c:	e9c0 1600 	strd	r1, r6, [r0]
 8006440:	300c      	adds	r0, #12
 8006442:	60a0      	str	r0, [r4, #8]
 8006444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006448:	f7fd fbba 	bl	8003bc0 <memset>
 800644c:	4620      	mov	r0, r4
 800644e:	bd70      	pop	{r4, r5, r6, pc}

08006450 <__sinit>:
 8006450:	6983      	ldr	r3, [r0, #24]
 8006452:	b510      	push	{r4, lr}
 8006454:	4604      	mov	r4, r0
 8006456:	bb33      	cbnz	r3, 80064a6 <__sinit+0x56>
 8006458:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800645c:	6503      	str	r3, [r0, #80]	; 0x50
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <__sinit+0x58>)
 8006460:	4a12      	ldr	r2, [pc, #72]	; (80064ac <__sinit+0x5c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6282      	str	r2, [r0, #40]	; 0x28
 8006466:	4298      	cmp	r0, r3
 8006468:	bf04      	itt	eq
 800646a:	2301      	moveq	r3, #1
 800646c:	6183      	streq	r3, [r0, #24]
 800646e:	f000 f81f 	bl	80064b0 <__sfp>
 8006472:	6060      	str	r0, [r4, #4]
 8006474:	4620      	mov	r0, r4
 8006476:	f000 f81b 	bl	80064b0 <__sfp>
 800647a:	60a0      	str	r0, [r4, #8]
 800647c:	4620      	mov	r0, r4
 800647e:	f000 f817 	bl	80064b0 <__sfp>
 8006482:	2200      	movs	r2, #0
 8006484:	60e0      	str	r0, [r4, #12]
 8006486:	2104      	movs	r1, #4
 8006488:	6860      	ldr	r0, [r4, #4]
 800648a:	f7ff ffa1 	bl	80063d0 <std>
 800648e:	2201      	movs	r2, #1
 8006490:	2109      	movs	r1, #9
 8006492:	68a0      	ldr	r0, [r4, #8]
 8006494:	f7ff ff9c 	bl	80063d0 <std>
 8006498:	2202      	movs	r2, #2
 800649a:	2112      	movs	r1, #18
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	f7ff ff97 	bl	80063d0 <std>
 80064a2:	2301      	movs	r3, #1
 80064a4:	61a3      	str	r3, [r4, #24]
 80064a6:	bd10      	pop	{r4, pc}
 80064a8:	08008eb4 	.word	0x08008eb4
 80064ac:	08006419 	.word	0x08006419

080064b0 <__sfp>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <__sfp+0x70>)
 80064b4:	4607      	mov	r7, r0
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	69b3      	ldr	r3, [r6, #24]
 80064ba:	b913      	cbnz	r3, 80064c2 <__sfp+0x12>
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff ffc7 	bl	8006450 <__sinit>
 80064c2:	3648      	adds	r6, #72	; 0x48
 80064c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	d503      	bpl.n	80064d4 <__sfp+0x24>
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	b133      	cbz	r3, 80064de <__sfp+0x2e>
 80064d0:	6836      	ldr	r6, [r6, #0]
 80064d2:	e7f7      	b.n	80064c4 <__sfp+0x14>
 80064d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064d8:	b16d      	cbz	r5, 80064f6 <__sfp+0x46>
 80064da:	3468      	adds	r4, #104	; 0x68
 80064dc:	e7f4      	b.n	80064c8 <__sfp+0x18>
 80064de:	2104      	movs	r1, #4
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff ff9f 	bl	8006424 <__sfmoreglue>
 80064e6:	6030      	str	r0, [r6, #0]
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d1f1      	bne.n	80064d0 <__sfp+0x20>
 80064ec:	230c      	movs	r3, #12
 80064ee:	4604      	mov	r4, r0
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <__sfp+0x74>)
 80064f8:	6665      	str	r5, [r4, #100]	; 0x64
 80064fa:	e9c4 5500 	strd	r5, r5, [r4]
 80064fe:	60a5      	str	r5, [r4, #8]
 8006500:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006504:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006508:	2208      	movs	r2, #8
 800650a:	4629      	mov	r1, r5
 800650c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006510:	f7fd fb56 	bl	8003bc0 <memset>
 8006514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800651c:	e7e9      	b.n	80064f2 <__sfp+0x42>
 800651e:	bf00      	nop
 8006520:	08008eb4 	.word	0x08008eb4
 8006524:	ffff0001 	.word	0xffff0001

08006528 <_fwalk_reent>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	4680      	mov	r8, r0
 800652e:	4689      	mov	r9, r1
 8006530:	2600      	movs	r6, #0
 8006532:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006536:	b914      	cbnz	r4, 800653e <_fwalk_reent+0x16>
 8006538:	4630      	mov	r0, r6
 800653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006542:	3f01      	subs	r7, #1
 8006544:	d501      	bpl.n	800654a <_fwalk_reent+0x22>
 8006546:	6824      	ldr	r4, [r4, #0]
 8006548:	e7f5      	b.n	8006536 <_fwalk_reent+0xe>
 800654a:	89ab      	ldrh	r3, [r5, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d907      	bls.n	8006560 <_fwalk_reent+0x38>
 8006550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006554:	3301      	adds	r3, #1
 8006556:	d003      	beq.n	8006560 <_fwalk_reent+0x38>
 8006558:	4629      	mov	r1, r5
 800655a:	4640      	mov	r0, r8
 800655c:	47c8      	blx	r9
 800655e:	4306      	orrs	r6, r0
 8006560:	3568      	adds	r5, #104	; 0x68
 8006562:	e7ee      	b.n	8006542 <_fwalk_reent+0x1a>

08006564 <rshift>:
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006566:	6906      	ldr	r6, [r0, #16]
 8006568:	114b      	asrs	r3, r1, #5
 800656a:	429e      	cmp	r6, r3
 800656c:	f100 0414 	add.w	r4, r0, #20
 8006570:	dd31      	ble.n	80065d6 <rshift+0x72>
 8006572:	f011 011f 	ands.w	r1, r1, #31
 8006576:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800657a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800657e:	d108      	bne.n	8006592 <rshift+0x2e>
 8006580:	4621      	mov	r1, r4
 8006582:	42b2      	cmp	r2, r6
 8006584:	460b      	mov	r3, r1
 8006586:	d211      	bcs.n	80065ac <rshift+0x48>
 8006588:	f852 3b04 	ldr.w	r3, [r2], #4
 800658c:	f841 3b04 	str.w	r3, [r1], #4
 8006590:	e7f7      	b.n	8006582 <rshift+0x1e>
 8006592:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006596:	4623      	mov	r3, r4
 8006598:	f1c1 0c20 	rsb	ip, r1, #32
 800659c:	40cd      	lsrs	r5, r1
 800659e:	3204      	adds	r2, #4
 80065a0:	42b2      	cmp	r2, r6
 80065a2:	4617      	mov	r7, r2
 80065a4:	d30d      	bcc.n	80065c2 <rshift+0x5e>
 80065a6:	601d      	str	r5, [r3, #0]
 80065a8:	b105      	cbz	r5, 80065ac <rshift+0x48>
 80065aa:	3304      	adds	r3, #4
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	eba3 0204 	sub.w	r2, r3, r4
 80065b2:	bf08      	it	eq
 80065b4:	2300      	moveq	r3, #0
 80065b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80065ba:	6102      	str	r2, [r0, #16]
 80065bc:	bf08      	it	eq
 80065be:	6143      	streq	r3, [r0, #20]
 80065c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c2:	683f      	ldr	r7, [r7, #0]
 80065c4:	fa07 f70c 	lsl.w	r7, r7, ip
 80065c8:	433d      	orrs	r5, r7
 80065ca:	f843 5b04 	str.w	r5, [r3], #4
 80065ce:	f852 5b04 	ldr.w	r5, [r2], #4
 80065d2:	40cd      	lsrs	r5, r1
 80065d4:	e7e4      	b.n	80065a0 <rshift+0x3c>
 80065d6:	4623      	mov	r3, r4
 80065d8:	e7e8      	b.n	80065ac <rshift+0x48>

080065da <__hexdig_fun>:
 80065da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d802      	bhi.n	80065e8 <__hexdig_fun+0xe>
 80065e2:	3820      	subs	r0, #32
 80065e4:	b2c0      	uxtb	r0, r0
 80065e6:	4770      	bx	lr
 80065e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80065ec:	2b05      	cmp	r3, #5
 80065ee:	d801      	bhi.n	80065f4 <__hexdig_fun+0x1a>
 80065f0:	3847      	subs	r0, #71	; 0x47
 80065f2:	e7f7      	b.n	80065e4 <__hexdig_fun+0xa>
 80065f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d801      	bhi.n	8006600 <__hexdig_fun+0x26>
 80065fc:	3827      	subs	r0, #39	; 0x27
 80065fe:	e7f1      	b.n	80065e4 <__hexdig_fun+0xa>
 8006600:	2000      	movs	r0, #0
 8006602:	4770      	bx	lr

08006604 <__gethex>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	b08b      	sub	sp, #44	; 0x2c
 800660a:	9002      	str	r0, [sp, #8]
 800660c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800660e:	468a      	mov	sl, r1
 8006610:	4690      	mov	r8, r2
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	f000 fae0 	bl	8006bd8 <__localeconv_l>
 8006618:	6803      	ldr	r3, [r0, #0]
 800661a:	f04f 0b00 	mov.w	fp, #0
 800661e:	4618      	mov	r0, r3
 8006620:	9303      	str	r3, [sp, #12]
 8006622:	f7f9 fd95 	bl	8000150 <strlen>
 8006626:	9b03      	ldr	r3, [sp, #12]
 8006628:	9001      	str	r0, [sp, #4]
 800662a:	4403      	add	r3, r0
 800662c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006630:	9307      	str	r3, [sp, #28]
 8006632:	f8da 3000 	ldr.w	r3, [sl]
 8006636:	3302      	adds	r3, #2
 8006638:	461f      	mov	r7, r3
 800663a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800663e:	2830      	cmp	r0, #48	; 0x30
 8006640:	d06c      	beq.n	800671c <__gethex+0x118>
 8006642:	f7ff ffca 	bl	80065da <__hexdig_fun>
 8006646:	4604      	mov	r4, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	d16a      	bne.n	8006722 <__gethex+0x11e>
 800664c:	9a01      	ldr	r2, [sp, #4]
 800664e:	9903      	ldr	r1, [sp, #12]
 8006650:	4638      	mov	r0, r7
 8006652:	f001 fd9c 	bl	800818e <strncmp>
 8006656:	2800      	cmp	r0, #0
 8006658:	d166      	bne.n	8006728 <__gethex+0x124>
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	5cf8      	ldrb	r0, [r7, r3]
 800665e:	18fe      	adds	r6, r7, r3
 8006660:	f7ff ffbb 	bl	80065da <__hexdig_fun>
 8006664:	2800      	cmp	r0, #0
 8006666:	d062      	beq.n	800672e <__gethex+0x12a>
 8006668:	4633      	mov	r3, r6
 800666a:	7818      	ldrb	r0, [r3, #0]
 800666c:	461f      	mov	r7, r3
 800666e:	2830      	cmp	r0, #48	; 0x30
 8006670:	f103 0301 	add.w	r3, r3, #1
 8006674:	d0f9      	beq.n	800666a <__gethex+0x66>
 8006676:	f7ff ffb0 	bl	80065da <__hexdig_fun>
 800667a:	fab0 f580 	clz	r5, r0
 800667e:	4634      	mov	r4, r6
 8006680:	f04f 0b01 	mov.w	fp, #1
 8006684:	096d      	lsrs	r5, r5, #5
 8006686:	463a      	mov	r2, r7
 8006688:	4616      	mov	r6, r2
 800668a:	7830      	ldrb	r0, [r6, #0]
 800668c:	3201      	adds	r2, #1
 800668e:	f7ff ffa4 	bl	80065da <__hexdig_fun>
 8006692:	2800      	cmp	r0, #0
 8006694:	d1f8      	bne.n	8006688 <__gethex+0x84>
 8006696:	9a01      	ldr	r2, [sp, #4]
 8006698:	9903      	ldr	r1, [sp, #12]
 800669a:	4630      	mov	r0, r6
 800669c:	f001 fd77 	bl	800818e <strncmp>
 80066a0:	b950      	cbnz	r0, 80066b8 <__gethex+0xb4>
 80066a2:	b954      	cbnz	r4, 80066ba <__gethex+0xb6>
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	18f4      	adds	r4, r6, r3
 80066a8:	4622      	mov	r2, r4
 80066aa:	4616      	mov	r6, r2
 80066ac:	7830      	ldrb	r0, [r6, #0]
 80066ae:	3201      	adds	r2, #1
 80066b0:	f7ff ff93 	bl	80065da <__hexdig_fun>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1f8      	bne.n	80066aa <__gethex+0xa6>
 80066b8:	b10c      	cbz	r4, 80066be <__gethex+0xba>
 80066ba:	1ba4      	subs	r4, r4, r6
 80066bc:	00a4      	lsls	r4, r4, #2
 80066be:	7833      	ldrb	r3, [r6, #0]
 80066c0:	2b50      	cmp	r3, #80	; 0x50
 80066c2:	d001      	beq.n	80066c8 <__gethex+0xc4>
 80066c4:	2b70      	cmp	r3, #112	; 0x70
 80066c6:	d140      	bne.n	800674a <__gethex+0x146>
 80066c8:	7873      	ldrb	r3, [r6, #1]
 80066ca:	2b2b      	cmp	r3, #43	; 0x2b
 80066cc:	d031      	beq.n	8006732 <__gethex+0x12e>
 80066ce:	2b2d      	cmp	r3, #45	; 0x2d
 80066d0:	d033      	beq.n	800673a <__gethex+0x136>
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	1c71      	adds	r1, r6, #1
 80066d8:	7808      	ldrb	r0, [r1, #0]
 80066da:	f7ff ff7e 	bl	80065da <__hexdig_fun>
 80066de:	1e43      	subs	r3, r0, #1
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b18      	cmp	r3, #24
 80066e4:	d831      	bhi.n	800674a <__gethex+0x146>
 80066e6:	f1a0 0210 	sub.w	r2, r0, #16
 80066ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066ee:	f7ff ff74 	bl	80065da <__hexdig_fun>
 80066f2:	1e43      	subs	r3, r0, #1
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b18      	cmp	r3, #24
 80066f8:	d922      	bls.n	8006740 <__gethex+0x13c>
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	d000      	beq.n	8006702 <__gethex+0xfe>
 8006700:	4252      	negs	r2, r2
 8006702:	4414      	add	r4, r2
 8006704:	f8ca 1000 	str.w	r1, [sl]
 8006708:	b30d      	cbz	r5, 800674e <__gethex+0x14a>
 800670a:	f1bb 0f00 	cmp.w	fp, #0
 800670e:	bf0c      	ite	eq
 8006710:	2706      	moveq	r7, #6
 8006712:	2700      	movne	r7, #0
 8006714:	4638      	mov	r0, r7
 8006716:	b00b      	add	sp, #44	; 0x2c
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	f10b 0b01 	add.w	fp, fp, #1
 8006720:	e78a      	b.n	8006638 <__gethex+0x34>
 8006722:	2500      	movs	r5, #0
 8006724:	462c      	mov	r4, r5
 8006726:	e7ae      	b.n	8006686 <__gethex+0x82>
 8006728:	463e      	mov	r6, r7
 800672a:	2501      	movs	r5, #1
 800672c:	e7c7      	b.n	80066be <__gethex+0xba>
 800672e:	4604      	mov	r4, r0
 8006730:	e7fb      	b.n	800672a <__gethex+0x126>
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	1cb1      	adds	r1, r6, #2
 8006738:	e7ce      	b.n	80066d8 <__gethex+0xd4>
 800673a:	f04f 0901 	mov.w	r9, #1
 800673e:	e7fa      	b.n	8006736 <__gethex+0x132>
 8006740:	230a      	movs	r3, #10
 8006742:	fb03 0202 	mla	r2, r3, r2, r0
 8006746:	3a10      	subs	r2, #16
 8006748:	e7cf      	b.n	80066ea <__gethex+0xe6>
 800674a:	4631      	mov	r1, r6
 800674c:	e7da      	b.n	8006704 <__gethex+0x100>
 800674e:	4629      	mov	r1, r5
 8006750:	1bf3      	subs	r3, r6, r7
 8006752:	3b01      	subs	r3, #1
 8006754:	2b07      	cmp	r3, #7
 8006756:	dc49      	bgt.n	80067ec <__gethex+0x1e8>
 8006758:	9802      	ldr	r0, [sp, #8]
 800675a:	f000 fa87 	bl	8006c6c <_Balloc>
 800675e:	f04f 0b00 	mov.w	fp, #0
 8006762:	4605      	mov	r5, r0
 8006764:	46da      	mov	sl, fp
 8006766:	9b01      	ldr	r3, [sp, #4]
 8006768:	f100 0914 	add.w	r9, r0, #20
 800676c:	f1c3 0301 	rsb	r3, r3, #1
 8006770:	f8cd 9010 	str.w	r9, [sp, #16]
 8006774:	9308      	str	r3, [sp, #32]
 8006776:	42b7      	cmp	r7, r6
 8006778:	d33b      	bcc.n	80067f2 <__gethex+0x1ee>
 800677a:	9804      	ldr	r0, [sp, #16]
 800677c:	f840 ab04 	str.w	sl, [r0], #4
 8006780:	eba0 0009 	sub.w	r0, r0, r9
 8006784:	1080      	asrs	r0, r0, #2
 8006786:	6128      	str	r0, [r5, #16]
 8006788:	0147      	lsls	r7, r0, #5
 800678a:	4650      	mov	r0, sl
 800678c:	f000 fb32 	bl	8006df4 <__hi0bits>
 8006790:	f8d8 6000 	ldr.w	r6, [r8]
 8006794:	1a3f      	subs	r7, r7, r0
 8006796:	42b7      	cmp	r7, r6
 8006798:	dd64      	ble.n	8006864 <__gethex+0x260>
 800679a:	1bbf      	subs	r7, r7, r6
 800679c:	4639      	mov	r1, r7
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 fe3b 	bl	800741a <__any_on>
 80067a4:	4682      	mov	sl, r0
 80067a6:	b178      	cbz	r0, 80067c8 <__gethex+0x1c4>
 80067a8:	f04f 0a01 	mov.w	sl, #1
 80067ac:	1e7b      	subs	r3, r7, #1
 80067ae:	1159      	asrs	r1, r3, #5
 80067b0:	f003 021f 	and.w	r2, r3, #31
 80067b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80067b8:	fa0a f202 	lsl.w	r2, sl, r2
 80067bc:	420a      	tst	r2, r1
 80067be:	d003      	beq.n	80067c8 <__gethex+0x1c4>
 80067c0:	4553      	cmp	r3, sl
 80067c2:	dc46      	bgt.n	8006852 <__gethex+0x24e>
 80067c4:	f04f 0a02 	mov.w	sl, #2
 80067c8:	4639      	mov	r1, r7
 80067ca:	4628      	mov	r0, r5
 80067cc:	f7ff feca 	bl	8006564 <rshift>
 80067d0:	443c      	add	r4, r7
 80067d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80067d6:	42a3      	cmp	r3, r4
 80067d8:	da52      	bge.n	8006880 <__gethex+0x27c>
 80067da:	4629      	mov	r1, r5
 80067dc:	9802      	ldr	r0, [sp, #8]
 80067de:	f000 fa79 	bl	8006cd4 <_Bfree>
 80067e2:	2300      	movs	r3, #0
 80067e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80067e6:	27a3      	movs	r7, #163	; 0xa3
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e793      	b.n	8006714 <__gethex+0x110>
 80067ec:	3101      	adds	r1, #1
 80067ee:	105b      	asrs	r3, r3, #1
 80067f0:	e7b0      	b.n	8006754 <__gethex+0x150>
 80067f2:	1e73      	subs	r3, r6, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	9a07      	ldr	r2, [sp, #28]
 80067f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <__gethex+0x22e>
 8006800:	f1bb 0f20 	cmp.w	fp, #32
 8006804:	d107      	bne.n	8006816 <__gethex+0x212>
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	f8c3 a000 	str.w	sl, [r3]
 800680c:	f04f 0a00 	mov.w	sl, #0
 8006810:	46d3      	mov	fp, sl
 8006812:	3304      	adds	r3, #4
 8006814:	9304      	str	r3, [sp, #16]
 8006816:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800681a:	f7ff fede 	bl	80065da <__hexdig_fun>
 800681e:	f000 000f 	and.w	r0, r0, #15
 8006822:	fa00 f00b 	lsl.w	r0, r0, fp
 8006826:	ea4a 0a00 	orr.w	sl, sl, r0
 800682a:	f10b 0b04 	add.w	fp, fp, #4
 800682e:	9b05      	ldr	r3, [sp, #20]
 8006830:	e00d      	b.n	800684e <__gethex+0x24a>
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	9a08      	ldr	r2, [sp, #32]
 8006836:	4413      	add	r3, r2
 8006838:	42bb      	cmp	r3, r7
 800683a:	d3e1      	bcc.n	8006800 <__gethex+0x1fc>
 800683c:	4618      	mov	r0, r3
 800683e:	9a01      	ldr	r2, [sp, #4]
 8006840:	9903      	ldr	r1, [sp, #12]
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	f001 fca3 	bl	800818e <strncmp>
 8006848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800684a:	2800      	cmp	r0, #0
 800684c:	d1d8      	bne.n	8006800 <__gethex+0x1fc>
 800684e:	461e      	mov	r6, r3
 8006850:	e791      	b.n	8006776 <__gethex+0x172>
 8006852:	1eb9      	subs	r1, r7, #2
 8006854:	4628      	mov	r0, r5
 8006856:	f000 fde0 	bl	800741a <__any_on>
 800685a:	2800      	cmp	r0, #0
 800685c:	d0b2      	beq.n	80067c4 <__gethex+0x1c0>
 800685e:	f04f 0a03 	mov.w	sl, #3
 8006862:	e7b1      	b.n	80067c8 <__gethex+0x1c4>
 8006864:	da09      	bge.n	800687a <__gethex+0x276>
 8006866:	1bf7      	subs	r7, r6, r7
 8006868:	4629      	mov	r1, r5
 800686a:	463a      	mov	r2, r7
 800686c:	9802      	ldr	r0, [sp, #8]
 800686e:	f000 fbfb 	bl	8007068 <__lshift>
 8006872:	4605      	mov	r5, r0
 8006874:	1be4      	subs	r4, r4, r7
 8006876:	f100 0914 	add.w	r9, r0, #20
 800687a:	f04f 0a00 	mov.w	sl, #0
 800687e:	e7a8      	b.n	80067d2 <__gethex+0x1ce>
 8006880:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006884:	42a0      	cmp	r0, r4
 8006886:	dd6b      	ble.n	8006960 <__gethex+0x35c>
 8006888:	1b04      	subs	r4, r0, r4
 800688a:	42a6      	cmp	r6, r4
 800688c:	dc2e      	bgt.n	80068ec <__gethex+0x2e8>
 800688e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d022      	beq.n	80068dc <__gethex+0x2d8>
 8006896:	2b03      	cmp	r3, #3
 8006898:	d024      	beq.n	80068e4 <__gethex+0x2e0>
 800689a:	2b01      	cmp	r3, #1
 800689c:	d115      	bne.n	80068ca <__gethex+0x2c6>
 800689e:	42a6      	cmp	r6, r4
 80068a0:	d113      	bne.n	80068ca <__gethex+0x2c6>
 80068a2:	2e01      	cmp	r6, #1
 80068a4:	dc0b      	bgt.n	80068be <__gethex+0x2ba>
 80068a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068aa:	9a06      	ldr	r2, [sp, #24]
 80068ac:	2762      	movs	r7, #98	; 0x62
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	2301      	movs	r3, #1
 80068b2:	612b      	str	r3, [r5, #16]
 80068b4:	f8c9 3000 	str.w	r3, [r9]
 80068b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068ba:	601d      	str	r5, [r3, #0]
 80068bc:	e72a      	b.n	8006714 <__gethex+0x110>
 80068be:	1e71      	subs	r1, r6, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fdaa 	bl	800741a <__any_on>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d1ed      	bne.n	80068a6 <__gethex+0x2a2>
 80068ca:	4629      	mov	r1, r5
 80068cc:	9802      	ldr	r0, [sp, #8]
 80068ce:	f000 fa01 	bl	8006cd4 <_Bfree>
 80068d2:	2300      	movs	r3, #0
 80068d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068d6:	2750      	movs	r7, #80	; 0x50
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e71b      	b.n	8006714 <__gethex+0x110>
 80068dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0e1      	beq.n	80068a6 <__gethex+0x2a2>
 80068e2:	e7f2      	b.n	80068ca <__gethex+0x2c6>
 80068e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1dd      	bne.n	80068a6 <__gethex+0x2a2>
 80068ea:	e7ee      	b.n	80068ca <__gethex+0x2c6>
 80068ec:	1e67      	subs	r7, r4, #1
 80068ee:	f1ba 0f00 	cmp.w	sl, #0
 80068f2:	d132      	bne.n	800695a <__gethex+0x356>
 80068f4:	b127      	cbz	r7, 8006900 <__gethex+0x2fc>
 80068f6:	4639      	mov	r1, r7
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 fd8e 	bl	800741a <__any_on>
 80068fe:	4682      	mov	sl, r0
 8006900:	2301      	movs	r3, #1
 8006902:	117a      	asrs	r2, r7, #5
 8006904:	f007 071f 	and.w	r7, r7, #31
 8006908:	fa03 f707 	lsl.w	r7, r3, r7
 800690c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006910:	4621      	mov	r1, r4
 8006912:	421f      	tst	r7, r3
 8006914:	f04f 0702 	mov.w	r7, #2
 8006918:	4628      	mov	r0, r5
 800691a:	bf18      	it	ne
 800691c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006920:	1b36      	subs	r6, r6, r4
 8006922:	f7ff fe1f 	bl	8006564 <rshift>
 8006926:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800692a:	f1ba 0f00 	cmp.w	sl, #0
 800692e:	d048      	beq.n	80069c2 <__gethex+0x3be>
 8006930:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d015      	beq.n	8006964 <__gethex+0x360>
 8006938:	2b03      	cmp	r3, #3
 800693a:	d017      	beq.n	800696c <__gethex+0x368>
 800693c:	2b01      	cmp	r3, #1
 800693e:	d109      	bne.n	8006954 <__gethex+0x350>
 8006940:	f01a 0f02 	tst.w	sl, #2
 8006944:	d006      	beq.n	8006954 <__gethex+0x350>
 8006946:	f8d9 3000 	ldr.w	r3, [r9]
 800694a:	ea4a 0a03 	orr.w	sl, sl, r3
 800694e:	f01a 0f01 	tst.w	sl, #1
 8006952:	d10e      	bne.n	8006972 <__gethex+0x36e>
 8006954:	f047 0710 	orr.w	r7, r7, #16
 8006958:	e033      	b.n	80069c2 <__gethex+0x3be>
 800695a:	f04f 0a01 	mov.w	sl, #1
 800695e:	e7cf      	b.n	8006900 <__gethex+0x2fc>
 8006960:	2701      	movs	r7, #1
 8006962:	e7e2      	b.n	800692a <__gethex+0x326>
 8006964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006966:	f1c3 0301 	rsb	r3, r3, #1
 800696a:	9315      	str	r3, [sp, #84]	; 0x54
 800696c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <__gethex+0x350>
 8006972:	f04f 0c00 	mov.w	ip, #0
 8006976:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800697a:	f105 0314 	add.w	r3, r5, #20
 800697e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006982:	eb03 010a 	add.w	r1, r3, sl
 8006986:	4618      	mov	r0, r3
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006990:	d01c      	beq.n	80069cc <__gethex+0x3c8>
 8006992:	3201      	adds	r2, #1
 8006994:	6002      	str	r2, [r0, #0]
 8006996:	2f02      	cmp	r7, #2
 8006998:	f105 0314 	add.w	r3, r5, #20
 800699c:	d138      	bne.n	8006a10 <__gethex+0x40c>
 800699e:	f8d8 2000 	ldr.w	r2, [r8]
 80069a2:	3a01      	subs	r2, #1
 80069a4:	42b2      	cmp	r2, r6
 80069a6:	d10a      	bne.n	80069be <__gethex+0x3ba>
 80069a8:	2201      	movs	r2, #1
 80069aa:	1171      	asrs	r1, r6, #5
 80069ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069b0:	f006 061f 	and.w	r6, r6, #31
 80069b4:	fa02 f606 	lsl.w	r6, r2, r6
 80069b8:	421e      	tst	r6, r3
 80069ba:	bf18      	it	ne
 80069bc:	4617      	movne	r7, r2
 80069be:	f047 0720 	orr.w	r7, r7, #32
 80069c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069c4:	601d      	str	r5, [r3, #0]
 80069c6:	9b06      	ldr	r3, [sp, #24]
 80069c8:	601c      	str	r4, [r3, #0]
 80069ca:	e6a3      	b.n	8006714 <__gethex+0x110>
 80069cc:	4299      	cmp	r1, r3
 80069ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80069d2:	d8d8      	bhi.n	8006986 <__gethex+0x382>
 80069d4:	68ab      	ldr	r3, [r5, #8]
 80069d6:	4599      	cmp	r9, r3
 80069d8:	db12      	blt.n	8006a00 <__gethex+0x3fc>
 80069da:	6869      	ldr	r1, [r5, #4]
 80069dc:	9802      	ldr	r0, [sp, #8]
 80069de:	3101      	adds	r1, #1
 80069e0:	f000 f944 	bl	8006c6c <_Balloc>
 80069e4:	4683      	mov	fp, r0
 80069e6:	692a      	ldr	r2, [r5, #16]
 80069e8:	f105 010c 	add.w	r1, r5, #12
 80069ec:	3202      	adds	r2, #2
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	300c      	adds	r0, #12
 80069f2:	f7fd f8c1 	bl	8003b78 <memcpy>
 80069f6:	4629      	mov	r1, r5
 80069f8:	9802      	ldr	r0, [sp, #8]
 80069fa:	f000 f96b 	bl	8006cd4 <_Bfree>
 80069fe:	465d      	mov	r5, fp
 8006a00:	692b      	ldr	r3, [r5, #16]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	612a      	str	r2, [r5, #16]
 8006a06:	2201      	movs	r2, #1
 8006a08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a0c:	615a      	str	r2, [r3, #20]
 8006a0e:	e7c2      	b.n	8006996 <__gethex+0x392>
 8006a10:	692a      	ldr	r2, [r5, #16]
 8006a12:	454a      	cmp	r2, r9
 8006a14:	dd0b      	ble.n	8006a2e <__gethex+0x42a>
 8006a16:	2101      	movs	r1, #1
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f7ff fda3 	bl	8006564 <rshift>
 8006a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a22:	3401      	adds	r4, #1
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	f6ff aed8 	blt.w	80067da <__gethex+0x1d6>
 8006a2a:	2701      	movs	r7, #1
 8006a2c:	e7c7      	b.n	80069be <__gethex+0x3ba>
 8006a2e:	f016 061f 	ands.w	r6, r6, #31
 8006a32:	d0fa      	beq.n	8006a2a <__gethex+0x426>
 8006a34:	449a      	add	sl, r3
 8006a36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006a3a:	f000 f9db 	bl	8006df4 <__hi0bits>
 8006a3e:	f1c6 0620 	rsb	r6, r6, #32
 8006a42:	42b0      	cmp	r0, r6
 8006a44:	dbe7      	blt.n	8006a16 <__gethex+0x412>
 8006a46:	e7f0      	b.n	8006a2a <__gethex+0x426>

08006a48 <L_shift>:
 8006a48:	f1c2 0208 	rsb	r2, r2, #8
 8006a4c:	0092      	lsls	r2, r2, #2
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	f1c2 0620 	rsb	r6, r2, #32
 8006a54:	6843      	ldr	r3, [r0, #4]
 8006a56:	6804      	ldr	r4, [r0, #0]
 8006a58:	fa03 f506 	lsl.w	r5, r3, r6
 8006a5c:	432c      	orrs	r4, r5
 8006a5e:	40d3      	lsrs	r3, r2
 8006a60:	6004      	str	r4, [r0, #0]
 8006a62:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a66:	4288      	cmp	r0, r1
 8006a68:	d3f4      	bcc.n	8006a54 <L_shift+0xc>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}

08006a6c <__match>:
 8006a6c:	b530      	push	{r4, r5, lr}
 8006a6e:	6803      	ldr	r3, [r0, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a76:	b914      	cbnz	r4, 8006a7e <__match+0x12>
 8006a78:	6003      	str	r3, [r0, #0]
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	bd30      	pop	{r4, r5, pc}
 8006a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a86:	2d19      	cmp	r5, #25
 8006a88:	bf98      	it	ls
 8006a8a:	3220      	addls	r2, #32
 8006a8c:	42a2      	cmp	r2, r4
 8006a8e:	d0f0      	beq.n	8006a72 <__match+0x6>
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7f3      	b.n	8006a7c <__match+0x10>

08006a94 <__hexnan>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	2500      	movs	r5, #0
 8006a9a:	680b      	ldr	r3, [r1, #0]
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	115f      	asrs	r7, r3, #5
 8006aa0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006aa4:	f013 031f 	ands.w	r3, r3, #31
 8006aa8:	bf18      	it	ne
 8006aaa:	3704      	addne	r7, #4
 8006aac:	1f3e      	subs	r6, r7, #4
 8006aae:	4690      	mov	r8, r2
 8006ab0:	46b1      	mov	r9, r6
 8006ab2:	4634      	mov	r4, r6
 8006ab4:	46ab      	mov	fp, r5
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	f847 5c04 	str.w	r5, [r7, #-4]
 8006ac0:	9502      	str	r5, [sp, #8]
 8006ac2:	784a      	ldrb	r2, [r1, #1]
 8006ac4:	1c4b      	adds	r3, r1, #1
 8006ac6:	9303      	str	r3, [sp, #12]
 8006ac8:	b342      	cbz	r2, 8006b1c <__hexnan+0x88>
 8006aca:	4610      	mov	r0, r2
 8006acc:	9105      	str	r1, [sp, #20]
 8006ace:	9204      	str	r2, [sp, #16]
 8006ad0:	f7ff fd83 	bl	80065da <__hexdig_fun>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d143      	bne.n	8006b60 <__hexnan+0xcc>
 8006ad8:	9a04      	ldr	r2, [sp, #16]
 8006ada:	9905      	ldr	r1, [sp, #20]
 8006adc:	2a20      	cmp	r2, #32
 8006ade:	d818      	bhi.n	8006b12 <__hexnan+0x7e>
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	459b      	cmp	fp, r3
 8006ae4:	dd13      	ble.n	8006b0e <__hexnan+0x7a>
 8006ae6:	454c      	cmp	r4, r9
 8006ae8:	d206      	bcs.n	8006af8 <__hexnan+0x64>
 8006aea:	2d07      	cmp	r5, #7
 8006aec:	dc04      	bgt.n	8006af8 <__hexnan+0x64>
 8006aee:	462a      	mov	r2, r5
 8006af0:	4649      	mov	r1, r9
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff ffa8 	bl	8006a48 <L_shift>
 8006af8:	4544      	cmp	r4, r8
 8006afa:	d944      	bls.n	8006b86 <__hexnan+0xf2>
 8006afc:	2300      	movs	r3, #0
 8006afe:	f1a4 0904 	sub.w	r9, r4, #4
 8006b02:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b06:	461d      	mov	r5, r3
 8006b08:	464c      	mov	r4, r9
 8006b0a:	f8cd b008 	str.w	fp, [sp, #8]
 8006b0e:	9903      	ldr	r1, [sp, #12]
 8006b10:	e7d7      	b.n	8006ac2 <__hexnan+0x2e>
 8006b12:	2a29      	cmp	r2, #41	; 0x29
 8006b14:	d14a      	bne.n	8006bac <__hexnan+0x118>
 8006b16:	3102      	adds	r1, #2
 8006b18:	f8ca 1000 	str.w	r1, [sl]
 8006b1c:	f1bb 0f00 	cmp.w	fp, #0
 8006b20:	d044      	beq.n	8006bac <__hexnan+0x118>
 8006b22:	454c      	cmp	r4, r9
 8006b24:	d206      	bcs.n	8006b34 <__hexnan+0xa0>
 8006b26:	2d07      	cmp	r5, #7
 8006b28:	dc04      	bgt.n	8006b34 <__hexnan+0xa0>
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7ff ff8a 	bl	8006a48 <L_shift>
 8006b34:	4544      	cmp	r4, r8
 8006b36:	d928      	bls.n	8006b8a <__hexnan+0xf6>
 8006b38:	4643      	mov	r3, r8
 8006b3a:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b3e:	42a6      	cmp	r6, r4
 8006b40:	f843 2b04 	str.w	r2, [r3], #4
 8006b44:	d2f9      	bcs.n	8006b3a <__hexnan+0xa6>
 8006b46:	2200      	movs	r2, #0
 8006b48:	f843 2b04 	str.w	r2, [r3], #4
 8006b4c:	429e      	cmp	r6, r3
 8006b4e:	d2fb      	bcs.n	8006b48 <__hexnan+0xb4>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	b91b      	cbnz	r3, 8006b5c <__hexnan+0xc8>
 8006b54:	4546      	cmp	r6, r8
 8006b56:	d127      	bne.n	8006ba8 <__hexnan+0x114>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	2005      	movs	r0, #5
 8006b5e:	e026      	b.n	8006bae <__hexnan+0x11a>
 8006b60:	3501      	adds	r5, #1
 8006b62:	2d08      	cmp	r5, #8
 8006b64:	f10b 0b01 	add.w	fp, fp, #1
 8006b68:	dd06      	ble.n	8006b78 <__hexnan+0xe4>
 8006b6a:	4544      	cmp	r4, r8
 8006b6c:	d9cf      	bls.n	8006b0e <__hexnan+0x7a>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2501      	movs	r5, #1
 8006b72:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b76:	3c04      	subs	r4, #4
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	f000 000f 	and.w	r0, r0, #15
 8006b7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006b82:	6020      	str	r0, [r4, #0]
 8006b84:	e7c3      	b.n	8006b0e <__hexnan+0x7a>
 8006b86:	2508      	movs	r5, #8
 8006b88:	e7c1      	b.n	8006b0e <__hexnan+0x7a>
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0df      	beq.n	8006b50 <__hexnan+0xbc>
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	f1c3 0320 	rsb	r3, r3, #32
 8006b98:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006ba0:	401a      	ands	r2, r3
 8006ba2:	f847 2c04 	str.w	r2, [r7, #-4]
 8006ba6:	e7d3      	b.n	8006b50 <__hexnan+0xbc>
 8006ba8:	3e04      	subs	r6, #4
 8006baa:	e7d1      	b.n	8006b50 <__hexnan+0xbc>
 8006bac:	2004      	movs	r0, #4
 8006bae:	b007      	add	sp, #28
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bb4 <__locale_ctype_ptr_l>:
 8006bb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006bb8:	4770      	bx	lr
	...

08006bbc <__locale_ctype_ptr>:
 8006bbc:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <__locale_ctype_ptr+0x14>)
 8006bbe:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <__locale_ctype_ptr+0x18>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bf08      	it	eq
 8006bc8:	4613      	moveq	r3, r2
 8006bca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006bce:	4770      	bx	lr
 8006bd0:	20000014 	.word	0x20000014
 8006bd4:	20000078 	.word	0x20000078

08006bd8 <__localeconv_l>:
 8006bd8:	30f0      	adds	r0, #240	; 0xf0
 8006bda:	4770      	bx	lr

08006bdc <_localeconv_r>:
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <_localeconv_r+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6a18      	ldr	r0, [r3, #32]
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <_localeconv_r+0x18>)
 8006be4:	2800      	cmp	r0, #0
 8006be6:	bf08      	it	eq
 8006be8:	4618      	moveq	r0, r3
 8006bea:	30f0      	adds	r0, #240	; 0xf0
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	20000014 	.word	0x20000014
 8006bf4:	20000078 	.word	0x20000078

08006bf8 <_lseek_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	2200      	movs	r2, #0
 8006c02:	4c05      	ldr	r4, [pc, #20]	; (8006c18 <_lseek_r+0x20>)
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fc ff3e 	bl	8003a88 <_lseek>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_lseek_r+0x1e>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_lseek_r+0x1e>
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	200008c0 	.word	0x200008c0

08006c1c <malloc>:
 8006c1c:	4b02      	ldr	r3, [pc, #8]	; (8006c28 <malloc+0xc>)
 8006c1e:	4601      	mov	r1, r0
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	f000 bc75 	b.w	8007510 <_malloc_r>
 8006c26:	bf00      	nop
 8006c28:	20000014 	.word	0x20000014

08006c2c <__ascii_mbtowc>:
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	b901      	cbnz	r1, 8006c32 <__ascii_mbtowc+0x6>
 8006c30:	a901      	add	r1, sp, #4
 8006c32:	b142      	cbz	r2, 8006c46 <__ascii_mbtowc+0x1a>
 8006c34:	b14b      	cbz	r3, 8006c4a <__ascii_mbtowc+0x1e>
 8006c36:	7813      	ldrb	r3, [r2, #0]
 8006c38:	600b      	str	r3, [r1, #0]
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	1c10      	adds	r0, r2, #0
 8006c3e:	bf18      	it	ne
 8006c40:	2001      	movne	r0, #1
 8006c42:	b002      	add	sp, #8
 8006c44:	4770      	bx	lr
 8006c46:	4610      	mov	r0, r2
 8006c48:	e7fb      	b.n	8006c42 <__ascii_mbtowc+0x16>
 8006c4a:	f06f 0001 	mvn.w	r0, #1
 8006c4e:	e7f8      	b.n	8006c42 <__ascii_mbtowc+0x16>

08006c50 <memchr>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	b2c9      	uxtb	r1, r1
 8006c54:	4402      	add	r2, r0
 8006c56:	4290      	cmp	r0, r2
 8006c58:	4603      	mov	r3, r0
 8006c5a:	d101      	bne.n	8006c60 <memchr+0x10>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e003      	b.n	8006c68 <memchr+0x18>
 8006c60:	781c      	ldrb	r4, [r3, #0]
 8006c62:	3001      	adds	r0, #1
 8006c64:	428c      	cmp	r4, r1
 8006c66:	d1f6      	bne.n	8006c56 <memchr+0x6>
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <_Balloc>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c70:	4604      	mov	r4, r0
 8006c72:	460e      	mov	r6, r1
 8006c74:	b93d      	cbnz	r5, 8006c86 <_Balloc+0x1a>
 8006c76:	2010      	movs	r0, #16
 8006c78:	f7ff ffd0 	bl	8006c1c <malloc>
 8006c7c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c82:	6005      	str	r5, [r0, #0]
 8006c84:	60c5      	str	r5, [r0, #12]
 8006c86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c88:	68eb      	ldr	r3, [r5, #12]
 8006c8a:	b183      	cbz	r3, 8006cae <_Balloc+0x42>
 8006c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c94:	b9b8      	cbnz	r0, 8006cc6 <_Balloc+0x5a>
 8006c96:	2101      	movs	r1, #1
 8006c98:	fa01 f506 	lsl.w	r5, r1, r6
 8006c9c:	1d6a      	adds	r2, r5, #5
 8006c9e:	0092      	lsls	r2, r2, #2
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fbdb 	bl	800745c <_calloc_r>
 8006ca6:	b160      	cbz	r0, 8006cc2 <_Balloc+0x56>
 8006ca8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cac:	e00e      	b.n	8006ccc <_Balloc+0x60>
 8006cae:	2221      	movs	r2, #33	; 0x21
 8006cb0:	2104      	movs	r1, #4
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fbd2 	bl	800745c <_calloc_r>
 8006cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cba:	60e8      	str	r0, [r5, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e4      	bne.n	8006c8c <_Balloc+0x20>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	6802      	ldr	r2, [r0, #0]
 8006cc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cd2:	e7f7      	b.n	8006cc4 <_Balloc+0x58>

08006cd4 <_Bfree>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	b93c      	cbnz	r4, 8006cee <_Bfree+0x1a>
 8006cde:	2010      	movs	r0, #16
 8006ce0:	f7ff ff9c 	bl	8006c1c <malloc>
 8006ce4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ce6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cea:	6004      	str	r4, [r0, #0]
 8006cec:	60c4      	str	r4, [r0, #12]
 8006cee:	b13d      	cbz	r5, 8006d00 <_Bfree+0x2c>
 8006cf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cf2:	686a      	ldr	r2, [r5, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cfa:	6029      	str	r1, [r5, #0]
 8006cfc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d00:	bd70      	pop	{r4, r5, r6, pc}

08006d02 <__multadd>:
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	461f      	mov	r7, r3
 8006d08:	4606      	mov	r6, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	690d      	ldr	r5, [r1, #16]
 8006d10:	f101 0c14 	add.w	ip, r1, #20
 8006d14:	f8dc 0000 	ldr.w	r0, [ip]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b281      	uxth	r1, r0
 8006d1c:	fb02 7101 	mla	r1, r2, r1, r7
 8006d20:	0c00      	lsrs	r0, r0, #16
 8006d22:	0c0f      	lsrs	r7, r1, #16
 8006d24:	fb02 7000 	mla	r0, r2, r0, r7
 8006d28:	b289      	uxth	r1, r1
 8006d2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d34:	f84c 1b04 	str.w	r1, [ip], #4
 8006d38:	dcec      	bgt.n	8006d14 <__multadd+0x12>
 8006d3a:	b1d7      	cbz	r7, 8006d72 <__multadd+0x70>
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	42ab      	cmp	r3, r5
 8006d40:	dc12      	bgt.n	8006d68 <__multadd+0x66>
 8006d42:	6861      	ldr	r1, [r4, #4]
 8006d44:	4630      	mov	r0, r6
 8006d46:	3101      	adds	r1, #1
 8006d48:	f7ff ff90 	bl	8006c6c <_Balloc>
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	6922      	ldr	r2, [r4, #16]
 8006d50:	f104 010c 	add.w	r1, r4, #12
 8006d54:	3202      	adds	r2, #2
 8006d56:	0092      	lsls	r2, r2, #2
 8006d58:	300c      	adds	r0, #12
 8006d5a:	f7fc ff0d 	bl	8003b78 <memcpy>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7ff ffb7 	bl	8006cd4 <_Bfree>
 8006d66:	4644      	mov	r4, r8
 8006d68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	615f      	str	r7, [r3, #20]
 8006d70:	6125      	str	r5, [r4, #16]
 8006d72:	4620      	mov	r0, r4
 8006d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d78 <__s2b>:
 8006d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	4615      	mov	r5, r2
 8006d7e:	2209      	movs	r2, #9
 8006d80:	461f      	mov	r7, r3
 8006d82:	3308      	adds	r3, #8
 8006d84:	460c      	mov	r4, r1
 8006d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2100      	movs	r1, #0
 8006d90:	429a      	cmp	r2, r3
 8006d92:	db20      	blt.n	8006dd6 <__s2b+0x5e>
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7ff ff69 	bl	8006c6c <_Balloc>
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	2d09      	cmp	r5, #9
 8006d9e:	6143      	str	r3, [r0, #20]
 8006da0:	f04f 0301 	mov.w	r3, #1
 8006da4:	6103      	str	r3, [r0, #16]
 8006da6:	dd19      	ble.n	8006ddc <__s2b+0x64>
 8006da8:	f104 0809 	add.w	r8, r4, #9
 8006dac:	46c1      	mov	r9, r8
 8006dae:	442c      	add	r4, r5
 8006db0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006db4:	4601      	mov	r1, r0
 8006db6:	3b30      	subs	r3, #48	; 0x30
 8006db8:	220a      	movs	r2, #10
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff ffa1 	bl	8006d02 <__multadd>
 8006dc0:	45a1      	cmp	r9, r4
 8006dc2:	d1f5      	bne.n	8006db0 <__s2b+0x38>
 8006dc4:	eb08 0405 	add.w	r4, r8, r5
 8006dc8:	3c08      	subs	r4, #8
 8006dca:	1b2d      	subs	r5, r5, r4
 8006dcc:	1963      	adds	r3, r4, r5
 8006dce:	42bb      	cmp	r3, r7
 8006dd0:	db07      	blt.n	8006de2 <__s2b+0x6a>
 8006dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd6:	0052      	lsls	r2, r2, #1
 8006dd8:	3101      	adds	r1, #1
 8006dda:	e7d9      	b.n	8006d90 <__s2b+0x18>
 8006ddc:	340a      	adds	r4, #10
 8006dde:	2509      	movs	r5, #9
 8006de0:	e7f3      	b.n	8006dca <__s2b+0x52>
 8006de2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006de6:	4601      	mov	r1, r0
 8006de8:	3b30      	subs	r3, #48	; 0x30
 8006dea:	220a      	movs	r2, #10
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ff88 	bl	8006d02 <__multadd>
 8006df2:	e7eb      	b.n	8006dcc <__s2b+0x54>

08006df4 <__hi0bits>:
 8006df4:	0c02      	lsrs	r2, r0, #16
 8006df6:	0412      	lsls	r2, r2, #16
 8006df8:	4603      	mov	r3, r0
 8006dfa:	b9b2      	cbnz	r2, 8006e2a <__hi0bits+0x36>
 8006dfc:	0403      	lsls	r3, r0, #16
 8006dfe:	2010      	movs	r0, #16
 8006e00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e04:	bf04      	itt	eq
 8006e06:	021b      	lsleq	r3, r3, #8
 8006e08:	3008      	addeq	r0, #8
 8006e0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e0e:	bf04      	itt	eq
 8006e10:	011b      	lsleq	r3, r3, #4
 8006e12:	3004      	addeq	r0, #4
 8006e14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e18:	bf04      	itt	eq
 8006e1a:	009b      	lsleq	r3, r3, #2
 8006e1c:	3002      	addeq	r0, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	db06      	blt.n	8006e30 <__hi0bits+0x3c>
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	d503      	bpl.n	8006e2e <__hi0bits+0x3a>
 8006e26:	3001      	adds	r0, #1
 8006e28:	4770      	bx	lr
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e7e8      	b.n	8006e00 <__hi0bits+0xc>
 8006e2e:	2020      	movs	r0, #32
 8006e30:	4770      	bx	lr

08006e32 <__lo0bits>:
 8006e32:	6803      	ldr	r3, [r0, #0]
 8006e34:	4601      	mov	r1, r0
 8006e36:	f013 0207 	ands.w	r2, r3, #7
 8006e3a:	d00b      	beq.n	8006e54 <__lo0bits+0x22>
 8006e3c:	07da      	lsls	r2, r3, #31
 8006e3e:	d423      	bmi.n	8006e88 <__lo0bits+0x56>
 8006e40:	0798      	lsls	r0, r3, #30
 8006e42:	bf49      	itett	mi
 8006e44:	085b      	lsrmi	r3, r3, #1
 8006e46:	089b      	lsrpl	r3, r3, #2
 8006e48:	2001      	movmi	r0, #1
 8006e4a:	600b      	strmi	r3, [r1, #0]
 8006e4c:	bf5c      	itt	pl
 8006e4e:	600b      	strpl	r3, [r1, #0]
 8006e50:	2002      	movpl	r0, #2
 8006e52:	4770      	bx	lr
 8006e54:	b298      	uxth	r0, r3
 8006e56:	b9a8      	cbnz	r0, 8006e84 <__lo0bits+0x52>
 8006e58:	2010      	movs	r0, #16
 8006e5a:	0c1b      	lsrs	r3, r3, #16
 8006e5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e60:	bf04      	itt	eq
 8006e62:	0a1b      	lsreq	r3, r3, #8
 8006e64:	3008      	addeq	r0, #8
 8006e66:	071a      	lsls	r2, r3, #28
 8006e68:	bf04      	itt	eq
 8006e6a:	091b      	lsreq	r3, r3, #4
 8006e6c:	3004      	addeq	r0, #4
 8006e6e:	079a      	lsls	r2, r3, #30
 8006e70:	bf04      	itt	eq
 8006e72:	089b      	lsreq	r3, r3, #2
 8006e74:	3002      	addeq	r0, #2
 8006e76:	07da      	lsls	r2, r3, #31
 8006e78:	d402      	bmi.n	8006e80 <__lo0bits+0x4e>
 8006e7a:	085b      	lsrs	r3, r3, #1
 8006e7c:	d006      	beq.n	8006e8c <__lo0bits+0x5a>
 8006e7e:	3001      	adds	r0, #1
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	4770      	bx	lr
 8006e84:	4610      	mov	r0, r2
 8006e86:	e7e9      	b.n	8006e5c <__lo0bits+0x2a>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	4770      	bx	lr
 8006e8c:	2020      	movs	r0, #32
 8006e8e:	4770      	bx	lr

08006e90 <__i2b>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	460c      	mov	r4, r1
 8006e94:	2101      	movs	r1, #1
 8006e96:	f7ff fee9 	bl	8006c6c <_Balloc>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	6144      	str	r4, [r0, #20]
 8006e9e:	6102      	str	r2, [r0, #16]
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <__multiply>:
 8006ea2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	690a      	ldr	r2, [r1, #16]
 8006eaa:	6923      	ldr	r3, [r4, #16]
 8006eac:	4688      	mov	r8, r1
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	bfbe      	ittt	lt
 8006eb2:	460b      	movlt	r3, r1
 8006eb4:	46a0      	movlt	r8, r4
 8006eb6:	461c      	movlt	r4, r3
 8006eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ebc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ec0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ec8:	eb07 0609 	add.w	r6, r7, r9
 8006ecc:	42b3      	cmp	r3, r6
 8006ece:	bfb8      	it	lt
 8006ed0:	3101      	addlt	r1, #1
 8006ed2:	f7ff fecb 	bl	8006c6c <_Balloc>
 8006ed6:	f100 0514 	add.w	r5, r0, #20
 8006eda:	462b      	mov	r3, r5
 8006edc:	2200      	movs	r2, #0
 8006ede:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ee2:	4573      	cmp	r3, lr
 8006ee4:	d316      	bcc.n	8006f14 <__multiply+0x72>
 8006ee6:	f104 0214 	add.w	r2, r4, #20
 8006eea:	f108 0114 	add.w	r1, r8, #20
 8006eee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006ef2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	9b00      	ldr	r3, [sp, #0]
 8006efa:	9201      	str	r2, [sp, #4]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d80c      	bhi.n	8006f1a <__multiply+0x78>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	dd03      	ble.n	8006f0c <__multiply+0x6a>
 8006f04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05d      	beq.n	8006fc8 <__multiply+0x126>
 8006f0c:	6106      	str	r6, [r0, #16]
 8006f0e:	b003      	add	sp, #12
 8006f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f14:	f843 2b04 	str.w	r2, [r3], #4
 8006f18:	e7e3      	b.n	8006ee2 <__multiply+0x40>
 8006f1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f1e:	f1bb 0f00 	cmp.w	fp, #0
 8006f22:	d023      	beq.n	8006f6c <__multiply+0xca>
 8006f24:	4689      	mov	r9, r1
 8006f26:	46ac      	mov	ip, r5
 8006f28:	f04f 0800 	mov.w	r8, #0
 8006f2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f30:	f8dc a000 	ldr.w	sl, [ip]
 8006f34:	b2a3      	uxth	r3, r4
 8006f36:	fa1f fa8a 	uxth.w	sl, sl
 8006f3a:	fb0b a303 	mla	r3, fp, r3, sl
 8006f3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f42:	f8dc 4000 	ldr.w	r4, [ip]
 8006f46:	4443      	add	r3, r8
 8006f48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f4c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f50:	46e2      	mov	sl, ip
 8006f52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f5c:	454f      	cmp	r7, r9
 8006f5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f62:	f84a 3b04 	str.w	r3, [sl], #4
 8006f66:	d82b      	bhi.n	8006fc0 <__multiply+0x11e>
 8006f68:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	3204      	adds	r2, #4
 8006f70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f74:	f1ba 0f00 	cmp.w	sl, #0
 8006f78:	d020      	beq.n	8006fbc <__multiply+0x11a>
 8006f7a:	4689      	mov	r9, r1
 8006f7c:	46a8      	mov	r8, r5
 8006f7e:	f04f 0b00 	mov.w	fp, #0
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f88:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f92:	46c4      	mov	ip, r8
 8006f94:	445c      	add	r4, fp
 8006f96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fa2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	fb0a b303 	mla	r3, sl, r3, fp
 8006fac:	454f      	cmp	r7, r9
 8006fae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fb2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006fb6:	d805      	bhi.n	8006fc4 <__multiply+0x122>
 8006fb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8006fbc:	3504      	adds	r5, #4
 8006fbe:	e79b      	b.n	8006ef8 <__multiply+0x56>
 8006fc0:	46d4      	mov	ip, sl
 8006fc2:	e7b3      	b.n	8006f2c <__multiply+0x8a>
 8006fc4:	46e0      	mov	r8, ip
 8006fc6:	e7dd      	b.n	8006f84 <__multiply+0xe2>
 8006fc8:	3e01      	subs	r6, #1
 8006fca:	e799      	b.n	8006f00 <__multiply+0x5e>

08006fcc <__pow5mult>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4615      	mov	r5, r2
 8006fd2:	f012 0203 	ands.w	r2, r2, #3
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	460f      	mov	r7, r1
 8006fda:	d007      	beq.n	8006fec <__pow5mult+0x20>
 8006fdc:	4c21      	ldr	r4, [pc, #132]	; (8007064 <__pow5mult+0x98>)
 8006fde:	3a01      	subs	r2, #1
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe6:	f7ff fe8c 	bl	8006d02 <__multadd>
 8006fea:	4607      	mov	r7, r0
 8006fec:	10ad      	asrs	r5, r5, #2
 8006fee:	d035      	beq.n	800705c <__pow5mult+0x90>
 8006ff0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ff2:	b93c      	cbnz	r4, 8007004 <__pow5mult+0x38>
 8006ff4:	2010      	movs	r0, #16
 8006ff6:	f7ff fe11 	bl	8006c1c <malloc>
 8006ffa:	6270      	str	r0, [r6, #36]	; 0x24
 8006ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007000:	6004      	str	r4, [r0, #0]
 8007002:	60c4      	str	r4, [r0, #12]
 8007004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800700c:	b94c      	cbnz	r4, 8007022 <__pow5mult+0x56>
 800700e:	f240 2171 	movw	r1, #625	; 0x271
 8007012:	4630      	mov	r0, r6
 8007014:	f7ff ff3c 	bl	8006e90 <__i2b>
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	f04f 0800 	mov.w	r8, #0
 8007026:	07eb      	lsls	r3, r5, #31
 8007028:	d50a      	bpl.n	8007040 <__pow5mult+0x74>
 800702a:	4639      	mov	r1, r7
 800702c:	4622      	mov	r2, r4
 800702e:	4630      	mov	r0, r6
 8007030:	f7ff ff37 	bl	8006ea2 <__multiply>
 8007034:	4681      	mov	r9, r0
 8007036:	4639      	mov	r1, r7
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff fe4b 	bl	8006cd4 <_Bfree>
 800703e:	464f      	mov	r7, r9
 8007040:	106d      	asrs	r5, r5, #1
 8007042:	d00b      	beq.n	800705c <__pow5mult+0x90>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	b938      	cbnz	r0, 8007058 <__pow5mult+0x8c>
 8007048:	4622      	mov	r2, r4
 800704a:	4621      	mov	r1, r4
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff ff28 	bl	8006ea2 <__multiply>
 8007052:	6020      	str	r0, [r4, #0]
 8007054:	f8c0 8000 	str.w	r8, [r0]
 8007058:	4604      	mov	r4, r0
 800705a:	e7e4      	b.n	8007026 <__pow5mult+0x5a>
 800705c:	4638      	mov	r0, r7
 800705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007062:	bf00      	nop
 8007064:	080090b0 	.word	0x080090b0

08007068 <__lshift>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	4607      	mov	r7, r0
 8007070:	4616      	mov	r6, r2
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007078:	eb0a 0903 	add.w	r9, sl, r3
 800707c:	6849      	ldr	r1, [r1, #4]
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	f109 0501 	add.w	r5, r9, #1
 8007084:	42ab      	cmp	r3, r5
 8007086:	db32      	blt.n	80070ee <__lshift+0x86>
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff fdef 	bl	8006c6c <_Balloc>
 800708e:	2300      	movs	r3, #0
 8007090:	4680      	mov	r8, r0
 8007092:	461a      	mov	r2, r3
 8007094:	f100 0114 	add.w	r1, r0, #20
 8007098:	4553      	cmp	r3, sl
 800709a:	db2b      	blt.n	80070f4 <__lshift+0x8c>
 800709c:	6920      	ldr	r0, [r4, #16]
 800709e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070a2:	f104 0314 	add.w	r3, r4, #20
 80070a6:	f016 021f 	ands.w	r2, r6, #31
 80070aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070b2:	d025      	beq.n	8007100 <__lshift+0x98>
 80070b4:	2000      	movs	r0, #0
 80070b6:	f1c2 0e20 	rsb	lr, r2, #32
 80070ba:	468a      	mov	sl, r1
 80070bc:	681e      	ldr	r6, [r3, #0]
 80070be:	4096      	lsls	r6, r2
 80070c0:	4330      	orrs	r0, r6
 80070c2:	f84a 0b04 	str.w	r0, [sl], #4
 80070c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80070ca:	459c      	cmp	ip, r3
 80070cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80070d0:	d814      	bhi.n	80070fc <__lshift+0x94>
 80070d2:	6048      	str	r0, [r1, #4]
 80070d4:	b108      	cbz	r0, 80070da <__lshift+0x72>
 80070d6:	f109 0502 	add.w	r5, r9, #2
 80070da:	3d01      	subs	r5, #1
 80070dc:	4638      	mov	r0, r7
 80070de:	f8c8 5010 	str.w	r5, [r8, #16]
 80070e2:	4621      	mov	r1, r4
 80070e4:	f7ff fdf6 	bl	8006cd4 <_Bfree>
 80070e8:	4640      	mov	r0, r8
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	3101      	adds	r1, #1
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	e7c7      	b.n	8007084 <__lshift+0x1c>
 80070f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070f8:	3301      	adds	r3, #1
 80070fa:	e7cd      	b.n	8007098 <__lshift+0x30>
 80070fc:	4651      	mov	r1, sl
 80070fe:	e7dc      	b.n	80070ba <__lshift+0x52>
 8007100:	3904      	subs	r1, #4
 8007102:	f853 2b04 	ldr.w	r2, [r3], #4
 8007106:	459c      	cmp	ip, r3
 8007108:	f841 2f04 	str.w	r2, [r1, #4]!
 800710c:	d8f9      	bhi.n	8007102 <__lshift+0x9a>
 800710e:	e7e4      	b.n	80070da <__lshift+0x72>

08007110 <__mcmp>:
 8007110:	6903      	ldr	r3, [r0, #16]
 8007112:	690a      	ldr	r2, [r1, #16]
 8007114:	b530      	push	{r4, r5, lr}
 8007116:	1a9b      	subs	r3, r3, r2
 8007118:	d10c      	bne.n	8007134 <__mcmp+0x24>
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	3014      	adds	r0, #20
 800711e:	3114      	adds	r1, #20
 8007120:	1884      	adds	r4, r0, r2
 8007122:	4411      	add	r1, r2
 8007124:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007128:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800712c:	4295      	cmp	r5, r2
 800712e:	d003      	beq.n	8007138 <__mcmp+0x28>
 8007130:	d305      	bcc.n	800713e <__mcmp+0x2e>
 8007132:	2301      	movs	r3, #1
 8007134:	4618      	mov	r0, r3
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	42a0      	cmp	r0, r4
 800713a:	d3f3      	bcc.n	8007124 <__mcmp+0x14>
 800713c:	e7fa      	b.n	8007134 <__mcmp+0x24>
 800713e:	f04f 33ff 	mov.w	r3, #4294967295
 8007142:	e7f7      	b.n	8007134 <__mcmp+0x24>

08007144 <__mdiff>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	460d      	mov	r5, r1
 800714a:	4607      	mov	r7, r0
 800714c:	4611      	mov	r1, r2
 800714e:	4628      	mov	r0, r5
 8007150:	4614      	mov	r4, r2
 8007152:	f7ff ffdd 	bl	8007110 <__mcmp>
 8007156:	1e06      	subs	r6, r0, #0
 8007158:	d108      	bne.n	800716c <__mdiff+0x28>
 800715a:	4631      	mov	r1, r6
 800715c:	4638      	mov	r0, r7
 800715e:	f7ff fd85 	bl	8006c6c <_Balloc>
 8007162:	2301      	movs	r3, #1
 8007164:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	bfa4      	itt	ge
 800716e:	4623      	movge	r3, r4
 8007170:	462c      	movge	r4, r5
 8007172:	4638      	mov	r0, r7
 8007174:	6861      	ldr	r1, [r4, #4]
 8007176:	bfa6      	itte	ge
 8007178:	461d      	movge	r5, r3
 800717a:	2600      	movge	r6, #0
 800717c:	2601      	movlt	r6, #1
 800717e:	f7ff fd75 	bl	8006c6c <_Balloc>
 8007182:	f04f 0e00 	mov.w	lr, #0
 8007186:	60c6      	str	r6, [r0, #12]
 8007188:	692b      	ldr	r3, [r5, #16]
 800718a:	6926      	ldr	r6, [r4, #16]
 800718c:	f104 0214 	add.w	r2, r4, #20
 8007190:	f105 0914 	add.w	r9, r5, #20
 8007194:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007198:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800719c:	f100 0114 	add.w	r1, r0, #20
 80071a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80071a4:	f859 5b04 	ldr.w	r5, [r9], #4
 80071a8:	fa1f f38a 	uxth.w	r3, sl
 80071ac:	4473      	add	r3, lr
 80071ae:	b2ac      	uxth	r4, r5
 80071b0:	1b1b      	subs	r3, r3, r4
 80071b2:	0c2c      	lsrs	r4, r5, #16
 80071b4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80071b8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80071c2:	45c8      	cmp	r8, r9
 80071c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80071c8:	4694      	mov	ip, r2
 80071ca:	f841 4b04 	str.w	r4, [r1], #4
 80071ce:	d8e7      	bhi.n	80071a0 <__mdiff+0x5c>
 80071d0:	45bc      	cmp	ip, r7
 80071d2:	d304      	bcc.n	80071de <__mdiff+0x9a>
 80071d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071d8:	b183      	cbz	r3, 80071fc <__mdiff+0xb8>
 80071da:	6106      	str	r6, [r0, #16]
 80071dc:	e7c4      	b.n	8007168 <__mdiff+0x24>
 80071de:	f85c 4b04 	ldr.w	r4, [ip], #4
 80071e2:	b2a2      	uxth	r2, r4
 80071e4:	4472      	add	r2, lr
 80071e6:	1413      	asrs	r3, r2, #16
 80071e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80071ec:	b292      	uxth	r2, r2
 80071ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071f2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80071f6:	f841 2b04 	str.w	r2, [r1], #4
 80071fa:	e7e9      	b.n	80071d0 <__mdiff+0x8c>
 80071fc:	3e01      	subs	r6, #1
 80071fe:	e7e9      	b.n	80071d4 <__mdiff+0x90>

08007200 <__ulp>:
 8007200:	4b10      	ldr	r3, [pc, #64]	; (8007244 <__ulp+0x44>)
 8007202:	400b      	ands	r3, r1
 8007204:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007208:	2b00      	cmp	r3, #0
 800720a:	dd02      	ble.n	8007212 <__ulp+0x12>
 800720c:	2000      	movs	r0, #0
 800720e:	4619      	mov	r1, r3
 8007210:	4770      	bx	lr
 8007212:	425b      	negs	r3, r3
 8007214:	151b      	asrs	r3, r3, #20
 8007216:	2b13      	cmp	r3, #19
 8007218:	f04f 0000 	mov.w	r0, #0
 800721c:	f04f 0100 	mov.w	r1, #0
 8007220:	dc04      	bgt.n	800722c <__ulp+0x2c>
 8007222:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007226:	fa42 f103 	asr.w	r1, r2, r3
 800722a:	4770      	bx	lr
 800722c:	2201      	movs	r2, #1
 800722e:	3b14      	subs	r3, #20
 8007230:	2b1e      	cmp	r3, #30
 8007232:	bfce      	itee	gt
 8007234:	4613      	movgt	r3, r2
 8007236:	f1c3 031f 	rsble	r3, r3, #31
 800723a:	fa02 f303 	lslle.w	r3, r2, r3
 800723e:	4618      	mov	r0, r3
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	7ff00000 	.word	0x7ff00000

08007248 <__b2d>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	6907      	ldr	r7, [r0, #16]
 800724e:	f100 0914 	add.w	r9, r0, #20
 8007252:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007256:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800725a:	f1a7 0804 	sub.w	r8, r7, #4
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff fdc8 	bl	8006df4 <__hi0bits>
 8007264:	f1c0 0320 	rsb	r3, r0, #32
 8007268:	280a      	cmp	r0, #10
 800726a:	600b      	str	r3, [r1, #0]
 800726c:	491e      	ldr	r1, [pc, #120]	; (80072e8 <__b2d+0xa0>)
 800726e:	dc17      	bgt.n	80072a0 <__b2d+0x58>
 8007270:	45c1      	cmp	r9, r8
 8007272:	bf28      	it	cs
 8007274:	2200      	movcs	r2, #0
 8007276:	f1c0 0c0b 	rsb	ip, r0, #11
 800727a:	fa26 f30c 	lsr.w	r3, r6, ip
 800727e:	bf38      	it	cc
 8007280:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007284:	ea43 0501 	orr.w	r5, r3, r1
 8007288:	f100 0315 	add.w	r3, r0, #21
 800728c:	fa06 f303 	lsl.w	r3, r6, r3
 8007290:	fa22 f20c 	lsr.w	r2, r2, ip
 8007294:	ea43 0402 	orr.w	r4, r3, r2
 8007298:	4620      	mov	r0, r4
 800729a:	4629      	mov	r1, r5
 800729c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a0:	45c1      	cmp	r9, r8
 80072a2:	bf3a      	itte	cc
 80072a4:	f1a7 0808 	subcc.w	r8, r7, #8
 80072a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80072ac:	2200      	movcs	r2, #0
 80072ae:	f1b0 030b 	subs.w	r3, r0, #11
 80072b2:	d015      	beq.n	80072e0 <__b2d+0x98>
 80072b4:	409e      	lsls	r6, r3
 80072b6:	f1c3 0720 	rsb	r7, r3, #32
 80072ba:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80072be:	fa22 f107 	lsr.w	r1, r2, r7
 80072c2:	45c8      	cmp	r8, r9
 80072c4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80072c8:	ea46 0501 	orr.w	r5, r6, r1
 80072cc:	bf94      	ite	ls
 80072ce:	2100      	movls	r1, #0
 80072d0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80072d4:	fa02 f003 	lsl.w	r0, r2, r3
 80072d8:	40f9      	lsrs	r1, r7
 80072da:	ea40 0401 	orr.w	r4, r0, r1
 80072de:	e7db      	b.n	8007298 <__b2d+0x50>
 80072e0:	ea46 0501 	orr.w	r5, r6, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	e7d7      	b.n	8007298 <__b2d+0x50>
 80072e8:	3ff00000 	.word	0x3ff00000

080072ec <__d2b>:
 80072ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80072f0:	461c      	mov	r4, r3
 80072f2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80072f6:	2101      	movs	r1, #1
 80072f8:	4690      	mov	r8, r2
 80072fa:	f7ff fcb7 	bl	8006c6c <_Balloc>
 80072fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007302:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007306:	4607      	mov	r7, r0
 8007308:	bb34      	cbnz	r4, 8007358 <__d2b+0x6c>
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	f1b8 0200 	subs.w	r2, r8, #0
 8007310:	d027      	beq.n	8007362 <__d2b+0x76>
 8007312:	a802      	add	r0, sp, #8
 8007314:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007318:	f7ff fd8b 	bl	8006e32 <__lo0bits>
 800731c:	9900      	ldr	r1, [sp, #0]
 800731e:	b1f0      	cbz	r0, 800735e <__d2b+0x72>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	f1c0 0320 	rsb	r3, r0, #32
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	430b      	orrs	r3, r1
 800732c:	40c2      	lsrs	r2, r0
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	9201      	str	r2, [sp, #4]
 8007332:	9b01      	ldr	r3, [sp, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2102      	movne	r1, #2
 800733a:	2101      	moveq	r1, #1
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	6139      	str	r1, [r7, #16]
 8007340:	b1c4      	cbz	r4, 8007374 <__d2b+0x88>
 8007342:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007346:	4404      	add	r4, r0
 8007348:	6034      	str	r4, [r6, #0]
 800734a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800734e:	6028      	str	r0, [r5, #0]
 8007350:	4638      	mov	r0, r7
 8007352:	b002      	add	sp, #8
 8007354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007358:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800735c:	e7d5      	b.n	800730a <__d2b+0x1e>
 800735e:	6179      	str	r1, [r7, #20]
 8007360:	e7e7      	b.n	8007332 <__d2b+0x46>
 8007362:	a801      	add	r0, sp, #4
 8007364:	f7ff fd65 	bl	8006e32 <__lo0bits>
 8007368:	2101      	movs	r1, #1
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	6139      	str	r1, [r7, #16]
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	3020      	adds	r0, #32
 8007372:	e7e5      	b.n	8007340 <__d2b+0x54>
 8007374:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007378:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800737c:	6030      	str	r0, [r6, #0]
 800737e:	6918      	ldr	r0, [r3, #16]
 8007380:	f7ff fd38 	bl	8006df4 <__hi0bits>
 8007384:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007388:	e7e1      	b.n	800734e <__d2b+0x62>

0800738a <__ratio>:
 800738a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738e:	4688      	mov	r8, r1
 8007390:	4669      	mov	r1, sp
 8007392:	4681      	mov	r9, r0
 8007394:	f7ff ff58 	bl	8007248 <__b2d>
 8007398:	468b      	mov	fp, r1
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	4640      	mov	r0, r8
 80073a0:	a901      	add	r1, sp, #4
 80073a2:	f7ff ff51 	bl	8007248 <__b2d>
 80073a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80073ae:	460d      	mov	r5, r1
 80073b0:	eba3 0c02 	sub.w	ip, r3, r2
 80073b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bfd5      	itete	le
 80073c2:	460a      	movle	r2, r1
 80073c4:	463a      	movgt	r2, r7
 80073c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80073ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80073ce:	bfd8      	it	le
 80073d0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80073d4:	462b      	mov	r3, r5
 80073d6:	4602      	mov	r2, r0
 80073d8:	4659      	mov	r1, fp
 80073da:	4630      	mov	r0, r6
 80073dc:	f7f9 f9a6 	bl	800072c <__aeabi_ddiv>
 80073e0:	b003      	add	sp, #12
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073e6 <__copybits>:
 80073e6:	3901      	subs	r1, #1
 80073e8:	b510      	push	{r4, lr}
 80073ea:	1149      	asrs	r1, r1, #5
 80073ec:	6914      	ldr	r4, [r2, #16]
 80073ee:	3101      	adds	r1, #1
 80073f0:	f102 0314 	add.w	r3, r2, #20
 80073f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	4602      	mov	r2, r0
 8007400:	d303      	bcc.n	800740a <__copybits+0x24>
 8007402:	2300      	movs	r3, #0
 8007404:	428a      	cmp	r2, r1
 8007406:	d305      	bcc.n	8007414 <__copybits+0x2e>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	f853 2b04 	ldr.w	r2, [r3], #4
 800740e:	f840 2b04 	str.w	r2, [r0], #4
 8007412:	e7f3      	b.n	80073fc <__copybits+0x16>
 8007414:	f842 3b04 	str.w	r3, [r2], #4
 8007418:	e7f4      	b.n	8007404 <__copybits+0x1e>

0800741a <__any_on>:
 800741a:	f100 0214 	add.w	r2, r0, #20
 800741e:	6900      	ldr	r0, [r0, #16]
 8007420:	114b      	asrs	r3, r1, #5
 8007422:	4298      	cmp	r0, r3
 8007424:	b510      	push	{r4, lr}
 8007426:	db11      	blt.n	800744c <__any_on+0x32>
 8007428:	dd0a      	ble.n	8007440 <__any_on+0x26>
 800742a:	f011 011f 	ands.w	r1, r1, #31
 800742e:	d007      	beq.n	8007440 <__any_on+0x26>
 8007430:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007434:	fa24 f001 	lsr.w	r0, r4, r1
 8007438:	fa00 f101 	lsl.w	r1, r0, r1
 800743c:	428c      	cmp	r4, r1
 800743e:	d10b      	bne.n	8007458 <__any_on+0x3e>
 8007440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007444:	4293      	cmp	r3, r2
 8007446:	d803      	bhi.n	8007450 <__any_on+0x36>
 8007448:	2000      	movs	r0, #0
 800744a:	bd10      	pop	{r4, pc}
 800744c:	4603      	mov	r3, r0
 800744e:	e7f7      	b.n	8007440 <__any_on+0x26>
 8007450:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007454:	2900      	cmp	r1, #0
 8007456:	d0f5      	beq.n	8007444 <__any_on+0x2a>
 8007458:	2001      	movs	r0, #1
 800745a:	e7f6      	b.n	800744a <__any_on+0x30>

0800745c <_calloc_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	fb02 f401 	mul.w	r4, r2, r1
 8007462:	4621      	mov	r1, r4
 8007464:	f000 f854 	bl	8007510 <_malloc_r>
 8007468:	4605      	mov	r5, r0
 800746a:	b118      	cbz	r0, 8007474 <_calloc_r+0x18>
 800746c:	4622      	mov	r2, r4
 800746e:	2100      	movs	r1, #0
 8007470:	f7fc fba6 	bl	8003bc0 <memset>
 8007474:	4628      	mov	r0, r5
 8007476:	bd38      	pop	{r3, r4, r5, pc}

08007478 <_free_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4605      	mov	r5, r0
 800747c:	2900      	cmp	r1, #0
 800747e:	d043      	beq.n	8007508 <_free_r+0x90>
 8007480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007484:	1f0c      	subs	r4, r1, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	bfb8      	it	lt
 800748a:	18e4      	addlt	r4, r4, r3
 800748c:	f001 f938 	bl	8008700 <__malloc_lock>
 8007490:	4a1e      	ldr	r2, [pc, #120]	; (800750c <_free_r+0x94>)
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	4610      	mov	r0, r2
 8007496:	b933      	cbnz	r3, 80074a6 <_free_r+0x2e>
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6014      	str	r4, [r2, #0]
 800749c:	4628      	mov	r0, r5
 800749e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a2:	f001 b92e 	b.w	8008702 <__malloc_unlock>
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	d90b      	bls.n	80074c2 <_free_r+0x4a>
 80074aa:	6821      	ldr	r1, [r4, #0]
 80074ac:	1862      	adds	r2, r4, r1
 80074ae:	4293      	cmp	r3, r2
 80074b0:	bf01      	itttt	eq
 80074b2:	681a      	ldreq	r2, [r3, #0]
 80074b4:	685b      	ldreq	r3, [r3, #4]
 80074b6:	1852      	addeq	r2, r2, r1
 80074b8:	6022      	streq	r2, [r4, #0]
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	6004      	str	r4, [r0, #0]
 80074be:	e7ed      	b.n	800749c <_free_r+0x24>
 80074c0:	4613      	mov	r3, r2
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	b10a      	cbz	r2, 80074ca <_free_r+0x52>
 80074c6:	42a2      	cmp	r2, r4
 80074c8:	d9fa      	bls.n	80074c0 <_free_r+0x48>
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	1858      	adds	r0, r3, r1
 80074ce:	42a0      	cmp	r0, r4
 80074d0:	d10b      	bne.n	80074ea <_free_r+0x72>
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	4401      	add	r1, r0
 80074d6:	1858      	adds	r0, r3, r1
 80074d8:	4282      	cmp	r2, r0
 80074da:	6019      	str	r1, [r3, #0]
 80074dc:	d1de      	bne.n	800749c <_free_r+0x24>
 80074de:	6810      	ldr	r0, [r2, #0]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	4401      	add	r1, r0
 80074e4:	6019      	str	r1, [r3, #0]
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	e7d8      	b.n	800749c <_free_r+0x24>
 80074ea:	d902      	bls.n	80074f2 <_free_r+0x7a>
 80074ec:	230c      	movs	r3, #12
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	e7d4      	b.n	800749c <_free_r+0x24>
 80074f2:	6820      	ldr	r0, [r4, #0]
 80074f4:	1821      	adds	r1, r4, r0
 80074f6:	428a      	cmp	r2, r1
 80074f8:	bf01      	itttt	eq
 80074fa:	6811      	ldreq	r1, [r2, #0]
 80074fc:	6852      	ldreq	r2, [r2, #4]
 80074fe:	1809      	addeq	r1, r1, r0
 8007500:	6021      	streq	r1, [r4, #0]
 8007502:	6062      	str	r2, [r4, #4]
 8007504:	605c      	str	r4, [r3, #4]
 8007506:	e7c9      	b.n	800749c <_free_r+0x24>
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	bf00      	nop
 800750c:	20000614 	.word	0x20000614

08007510 <_malloc_r>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	1ccd      	adds	r5, r1, #3
 8007514:	f025 0503 	bic.w	r5, r5, #3
 8007518:	3508      	adds	r5, #8
 800751a:	2d0c      	cmp	r5, #12
 800751c:	bf38      	it	cc
 800751e:	250c      	movcc	r5, #12
 8007520:	2d00      	cmp	r5, #0
 8007522:	4606      	mov	r6, r0
 8007524:	db01      	blt.n	800752a <_malloc_r+0x1a>
 8007526:	42a9      	cmp	r1, r5
 8007528:	d903      	bls.n	8007532 <_malloc_r+0x22>
 800752a:	230c      	movs	r3, #12
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	2000      	movs	r0, #0
 8007530:	bd70      	pop	{r4, r5, r6, pc}
 8007532:	f001 f8e5 	bl	8008700 <__malloc_lock>
 8007536:	4a21      	ldr	r2, [pc, #132]	; (80075bc <_malloc_r+0xac>)
 8007538:	6814      	ldr	r4, [r2, #0]
 800753a:	4621      	mov	r1, r4
 800753c:	b991      	cbnz	r1, 8007564 <_malloc_r+0x54>
 800753e:	4c20      	ldr	r4, [pc, #128]	; (80075c0 <_malloc_r+0xb0>)
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	b91b      	cbnz	r3, 800754c <_malloc_r+0x3c>
 8007544:	4630      	mov	r0, r6
 8007546:	f000 fde1 	bl	800810c <_sbrk_r>
 800754a:	6020      	str	r0, [r4, #0]
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f000 fddc 	bl	800810c <_sbrk_r>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d124      	bne.n	80075a2 <_malloc_r+0x92>
 8007558:	230c      	movs	r3, #12
 800755a:	4630      	mov	r0, r6
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	f001 f8d0 	bl	8008702 <__malloc_unlock>
 8007562:	e7e4      	b.n	800752e <_malloc_r+0x1e>
 8007564:	680b      	ldr	r3, [r1, #0]
 8007566:	1b5b      	subs	r3, r3, r5
 8007568:	d418      	bmi.n	800759c <_malloc_r+0x8c>
 800756a:	2b0b      	cmp	r3, #11
 800756c:	d90f      	bls.n	800758e <_malloc_r+0x7e>
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	18cc      	adds	r4, r1, r3
 8007572:	50cd      	str	r5, [r1, r3]
 8007574:	4630      	mov	r0, r6
 8007576:	f001 f8c4 	bl	8008702 <__malloc_unlock>
 800757a:	f104 000b 	add.w	r0, r4, #11
 800757e:	1d23      	adds	r3, r4, #4
 8007580:	f020 0007 	bic.w	r0, r0, #7
 8007584:	1ac3      	subs	r3, r0, r3
 8007586:	d0d3      	beq.n	8007530 <_malloc_r+0x20>
 8007588:	425a      	negs	r2, r3
 800758a:	50e2      	str	r2, [r4, r3]
 800758c:	e7d0      	b.n	8007530 <_malloc_r+0x20>
 800758e:	684b      	ldr	r3, [r1, #4]
 8007590:	428c      	cmp	r4, r1
 8007592:	bf16      	itet	ne
 8007594:	6063      	strne	r3, [r4, #4]
 8007596:	6013      	streq	r3, [r2, #0]
 8007598:	460c      	movne	r4, r1
 800759a:	e7eb      	b.n	8007574 <_malloc_r+0x64>
 800759c:	460c      	mov	r4, r1
 800759e:	6849      	ldr	r1, [r1, #4]
 80075a0:	e7cc      	b.n	800753c <_malloc_r+0x2c>
 80075a2:	1cc4      	adds	r4, r0, #3
 80075a4:	f024 0403 	bic.w	r4, r4, #3
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d005      	beq.n	80075b8 <_malloc_r+0xa8>
 80075ac:	1a21      	subs	r1, r4, r0
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 fdac 	bl	800810c <_sbrk_r>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d0cf      	beq.n	8007558 <_malloc_r+0x48>
 80075b8:	6025      	str	r5, [r4, #0]
 80075ba:	e7db      	b.n	8007574 <_malloc_r+0x64>
 80075bc:	20000614 	.word	0x20000614
 80075c0:	20000618 	.word	0x20000618

080075c4 <__ssputs_r>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	688e      	ldr	r6, [r1, #8]
 80075ca:	4682      	mov	sl, r0
 80075cc:	429e      	cmp	r6, r3
 80075ce:	460c      	mov	r4, r1
 80075d0:	4690      	mov	r8, r2
 80075d2:	4699      	mov	r9, r3
 80075d4:	d837      	bhi.n	8007646 <__ssputs_r+0x82>
 80075d6:	898a      	ldrh	r2, [r1, #12]
 80075d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075dc:	d031      	beq.n	8007642 <__ssputs_r+0x7e>
 80075de:	2302      	movs	r3, #2
 80075e0:	6825      	ldr	r5, [r4, #0]
 80075e2:	6909      	ldr	r1, [r1, #16]
 80075e4:	1a6f      	subs	r7, r5, r1
 80075e6:	6965      	ldr	r5, [r4, #20]
 80075e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80075f0:	f109 0301 	add.w	r3, r9, #1
 80075f4:	443b      	add	r3, r7
 80075f6:	429d      	cmp	r5, r3
 80075f8:	bf38      	it	cc
 80075fa:	461d      	movcc	r5, r3
 80075fc:	0553      	lsls	r3, r2, #21
 80075fe:	d530      	bpl.n	8007662 <__ssputs_r+0x9e>
 8007600:	4629      	mov	r1, r5
 8007602:	f7ff ff85 	bl	8007510 <_malloc_r>
 8007606:	4606      	mov	r6, r0
 8007608:	b950      	cbnz	r0, 8007620 <__ssputs_r+0x5c>
 800760a:	230c      	movs	r3, #12
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	f8ca 3000 	str.w	r3, [sl]
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	463a      	mov	r2, r7
 8007622:	6921      	ldr	r1, [r4, #16]
 8007624:	f7fc faa8 	bl	8003b78 <memcpy>
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800762e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007632:	81a3      	strh	r3, [r4, #12]
 8007634:	6126      	str	r6, [r4, #16]
 8007636:	443e      	add	r6, r7
 8007638:	6026      	str	r6, [r4, #0]
 800763a:	464e      	mov	r6, r9
 800763c:	6165      	str	r5, [r4, #20]
 800763e:	1bed      	subs	r5, r5, r7
 8007640:	60a5      	str	r5, [r4, #8]
 8007642:	454e      	cmp	r6, r9
 8007644:	d900      	bls.n	8007648 <__ssputs_r+0x84>
 8007646:	464e      	mov	r6, r9
 8007648:	4632      	mov	r2, r6
 800764a:	4641      	mov	r1, r8
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	f7fc fa9e 	bl	8003b8e <memmove>
 8007652:	68a3      	ldr	r3, [r4, #8]
 8007654:	2000      	movs	r0, #0
 8007656:	1b9b      	subs	r3, r3, r6
 8007658:	60a3      	str	r3, [r4, #8]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	441e      	add	r6, r3
 800765e:	6026      	str	r6, [r4, #0]
 8007660:	e7dc      	b.n	800761c <__ssputs_r+0x58>
 8007662:	462a      	mov	r2, r5
 8007664:	f001 f84e 	bl	8008704 <_realloc_r>
 8007668:	4606      	mov	r6, r0
 800766a:	2800      	cmp	r0, #0
 800766c:	d1e2      	bne.n	8007634 <__ssputs_r+0x70>
 800766e:	6921      	ldr	r1, [r4, #16]
 8007670:	4650      	mov	r0, sl
 8007672:	f7ff ff01 	bl	8007478 <_free_r>
 8007676:	e7c8      	b.n	800760a <__ssputs_r+0x46>

08007678 <_svfiprintf_r>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	461d      	mov	r5, r3
 800767e:	898b      	ldrh	r3, [r1, #12]
 8007680:	b09d      	sub	sp, #116	; 0x74
 8007682:	061f      	lsls	r7, r3, #24
 8007684:	4680      	mov	r8, r0
 8007686:	460c      	mov	r4, r1
 8007688:	4616      	mov	r6, r2
 800768a:	d50f      	bpl.n	80076ac <_svfiprintf_r+0x34>
 800768c:	690b      	ldr	r3, [r1, #16]
 800768e:	b96b      	cbnz	r3, 80076ac <_svfiprintf_r+0x34>
 8007690:	2140      	movs	r1, #64	; 0x40
 8007692:	f7ff ff3d 	bl	8007510 <_malloc_r>
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	6120      	str	r0, [r4, #16]
 800769a:	b928      	cbnz	r0, 80076a8 <_svfiprintf_r+0x30>
 800769c:	230c      	movs	r3, #12
 800769e:	f8c8 3000 	str.w	r3, [r8]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295
 80076a6:	e0c8      	b.n	800783a <_svfiprintf_r+0x1c2>
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	6163      	str	r3, [r4, #20]
 80076ac:	2300      	movs	r3, #0
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	2320      	movs	r3, #32
 80076b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076b6:	2330      	movs	r3, #48	; 0x30
 80076b8:	f04f 0b01 	mov.w	fp, #1
 80076bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076c0:	9503      	str	r5, [sp, #12]
 80076c2:	4637      	mov	r7, r6
 80076c4:	463d      	mov	r5, r7
 80076c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ca:	b10b      	cbz	r3, 80076d0 <_svfiprintf_r+0x58>
 80076cc:	2b25      	cmp	r3, #37	; 0x25
 80076ce:	d13e      	bne.n	800774e <_svfiprintf_r+0xd6>
 80076d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80076d4:	d00b      	beq.n	80076ee <_svfiprintf_r+0x76>
 80076d6:	4653      	mov	r3, sl
 80076d8:	4632      	mov	r2, r6
 80076da:	4621      	mov	r1, r4
 80076dc:	4640      	mov	r0, r8
 80076de:	f7ff ff71 	bl	80075c4 <__ssputs_r>
 80076e2:	3001      	adds	r0, #1
 80076e4:	f000 80a4 	beq.w	8007830 <_svfiprintf_r+0x1b8>
 80076e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ea:	4453      	add	r3, sl
 80076ec:	9309      	str	r3, [sp, #36]	; 0x24
 80076ee:	783b      	ldrb	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 809d 	beq.w	8007830 <_svfiprintf_r+0x1b8>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007700:	9304      	str	r3, [sp, #16]
 8007702:	9307      	str	r3, [sp, #28]
 8007704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007708:	931a      	str	r3, [sp, #104]	; 0x68
 800770a:	462f      	mov	r7, r5
 800770c:	2205      	movs	r2, #5
 800770e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007712:	4850      	ldr	r0, [pc, #320]	; (8007854 <_svfiprintf_r+0x1dc>)
 8007714:	f7ff fa9c 	bl	8006c50 <memchr>
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	b9d0      	cbnz	r0, 8007752 <_svfiprintf_r+0xda>
 800771c:	06d9      	lsls	r1, r3, #27
 800771e:	bf44      	itt	mi
 8007720:	2220      	movmi	r2, #32
 8007722:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007726:	071a      	lsls	r2, r3, #28
 8007728:	bf44      	itt	mi
 800772a:	222b      	movmi	r2, #43	; 0x2b
 800772c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007730:	782a      	ldrb	r2, [r5, #0]
 8007732:	2a2a      	cmp	r2, #42	; 0x2a
 8007734:	d015      	beq.n	8007762 <_svfiprintf_r+0xea>
 8007736:	462f      	mov	r7, r5
 8007738:	2000      	movs	r0, #0
 800773a:	250a      	movs	r5, #10
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4639      	mov	r1, r7
 8007740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007744:	3b30      	subs	r3, #48	; 0x30
 8007746:	2b09      	cmp	r3, #9
 8007748:	d94d      	bls.n	80077e6 <_svfiprintf_r+0x16e>
 800774a:	b1b8      	cbz	r0, 800777c <_svfiprintf_r+0x104>
 800774c:	e00f      	b.n	800776e <_svfiprintf_r+0xf6>
 800774e:	462f      	mov	r7, r5
 8007750:	e7b8      	b.n	80076c4 <_svfiprintf_r+0x4c>
 8007752:	4a40      	ldr	r2, [pc, #256]	; (8007854 <_svfiprintf_r+0x1dc>)
 8007754:	463d      	mov	r5, r7
 8007756:	1a80      	subs	r0, r0, r2
 8007758:	fa0b f000 	lsl.w	r0, fp, r0
 800775c:	4318      	orrs	r0, r3
 800775e:	9004      	str	r0, [sp, #16]
 8007760:	e7d3      	b.n	800770a <_svfiprintf_r+0x92>
 8007762:	9a03      	ldr	r2, [sp, #12]
 8007764:	1d11      	adds	r1, r2, #4
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	9103      	str	r1, [sp, #12]
 800776a:	2a00      	cmp	r2, #0
 800776c:	db01      	blt.n	8007772 <_svfiprintf_r+0xfa>
 800776e:	9207      	str	r2, [sp, #28]
 8007770:	e004      	b.n	800777c <_svfiprintf_r+0x104>
 8007772:	4252      	negs	r2, r2
 8007774:	f043 0302 	orr.w	r3, r3, #2
 8007778:	9207      	str	r2, [sp, #28]
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	783b      	ldrb	r3, [r7, #0]
 800777e:	2b2e      	cmp	r3, #46	; 0x2e
 8007780:	d10c      	bne.n	800779c <_svfiprintf_r+0x124>
 8007782:	787b      	ldrb	r3, [r7, #1]
 8007784:	2b2a      	cmp	r3, #42	; 0x2a
 8007786:	d133      	bne.n	80077f0 <_svfiprintf_r+0x178>
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	3702      	adds	r7, #2
 800778c:	1d1a      	adds	r2, r3, #4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	9203      	str	r2, [sp, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	bfb8      	it	lt
 8007796:	f04f 33ff 	movlt.w	r3, #4294967295
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	4d2e      	ldr	r5, [pc, #184]	; (8007858 <_svfiprintf_r+0x1e0>)
 800779e:	2203      	movs	r2, #3
 80077a0:	7839      	ldrb	r1, [r7, #0]
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7ff fa54 	bl	8006c50 <memchr>
 80077a8:	b138      	cbz	r0, 80077ba <_svfiprintf_r+0x142>
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	1b40      	subs	r0, r0, r5
 80077ae:	fa03 f000 	lsl.w	r0, r3, r0
 80077b2:	9b04      	ldr	r3, [sp, #16]
 80077b4:	3701      	adds	r7, #1
 80077b6:	4303      	orrs	r3, r0
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	7839      	ldrb	r1, [r7, #0]
 80077bc:	2206      	movs	r2, #6
 80077be:	4827      	ldr	r0, [pc, #156]	; (800785c <_svfiprintf_r+0x1e4>)
 80077c0:	1c7e      	adds	r6, r7, #1
 80077c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c6:	f7ff fa43 	bl	8006c50 <memchr>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d038      	beq.n	8007840 <_svfiprintf_r+0x1c8>
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <_svfiprintf_r+0x1e8>)
 80077d0:	bb13      	cbnz	r3, 8007818 <_svfiprintf_r+0x1a0>
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	3307      	adds	r3, #7
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	3308      	adds	r3, #8
 80077dc:	9303      	str	r3, [sp, #12]
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	444b      	add	r3, r9
 80077e2:	9309      	str	r3, [sp, #36]	; 0x24
 80077e4:	e76d      	b.n	80076c2 <_svfiprintf_r+0x4a>
 80077e6:	fb05 3202 	mla	r2, r5, r2, r3
 80077ea:	2001      	movs	r0, #1
 80077ec:	460f      	mov	r7, r1
 80077ee:	e7a6      	b.n	800773e <_svfiprintf_r+0xc6>
 80077f0:	2300      	movs	r3, #0
 80077f2:	250a      	movs	r5, #10
 80077f4:	4619      	mov	r1, r3
 80077f6:	3701      	adds	r7, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4638      	mov	r0, r7
 80077fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007800:	3a30      	subs	r2, #48	; 0x30
 8007802:	2a09      	cmp	r2, #9
 8007804:	d903      	bls.n	800780e <_svfiprintf_r+0x196>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0c8      	beq.n	800779c <_svfiprintf_r+0x124>
 800780a:	9105      	str	r1, [sp, #20]
 800780c:	e7c6      	b.n	800779c <_svfiprintf_r+0x124>
 800780e:	fb05 2101 	mla	r1, r5, r1, r2
 8007812:	2301      	movs	r3, #1
 8007814:	4607      	mov	r7, r0
 8007816:	e7f0      	b.n	80077fa <_svfiprintf_r+0x182>
 8007818:	ab03      	add	r3, sp, #12
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	4622      	mov	r2, r4
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <_svfiprintf_r+0x1ec>)
 8007820:	a904      	add	r1, sp, #16
 8007822:	4640      	mov	r0, r8
 8007824:	f7fc fa66 	bl	8003cf4 <_printf_float>
 8007828:	f1b0 3fff 	cmp.w	r0, #4294967295
 800782c:	4681      	mov	r9, r0
 800782e:	d1d6      	bne.n	80077de <_svfiprintf_r+0x166>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	065b      	lsls	r3, r3, #25
 8007834:	f53f af35 	bmi.w	80076a2 <_svfiprintf_r+0x2a>
 8007838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800783a:	b01d      	add	sp, #116	; 0x74
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	ab03      	add	r3, sp, #12
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	4622      	mov	r2, r4
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <_svfiprintf_r+0x1ec>)
 8007848:	a904      	add	r1, sp, #16
 800784a:	4640      	mov	r0, r8
 800784c:	f7fc fcfe 	bl	800424c <_printf_i>
 8007850:	e7ea      	b.n	8007828 <_svfiprintf_r+0x1b0>
 8007852:	bf00      	nop
 8007854:	080090bc 	.word	0x080090bc
 8007858:	080090c2 	.word	0x080090c2
 800785c:	080090c6 	.word	0x080090c6
 8007860:	08003cf5 	.word	0x08003cf5
 8007864:	080075c5 	.word	0x080075c5

08007868 <_sungetc_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	1c4b      	adds	r3, r1, #1
 800786c:	4614      	mov	r4, r2
 800786e:	d103      	bne.n	8007878 <_sungetc_r+0x10>
 8007870:	f04f 35ff 	mov.w	r5, #4294967295
 8007874:	4628      	mov	r0, r5
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	8993      	ldrh	r3, [r2, #12]
 800787a:	b2cd      	uxtb	r5, r1
 800787c:	f023 0320 	bic.w	r3, r3, #32
 8007880:	8193      	strh	r3, [r2, #12]
 8007882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007884:	6852      	ldr	r2, [r2, #4]
 8007886:	b18b      	cbz	r3, 80078ac <_sungetc_r+0x44>
 8007888:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800788a:	4293      	cmp	r3, r2
 800788c:	dd08      	ble.n	80078a0 <_sungetc_r+0x38>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	6022      	str	r2, [r4, #0]
 8007894:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007898:	6863      	ldr	r3, [r4, #4]
 800789a:	3301      	adds	r3, #1
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	e7e9      	b.n	8007874 <_sungetc_r+0xc>
 80078a0:	4621      	mov	r1, r4
 80078a2:	f000 fd13 	bl	80082cc <__submore>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d0f1      	beq.n	800788e <_sungetc_r+0x26>
 80078aa:	e7e1      	b.n	8007870 <_sungetc_r+0x8>
 80078ac:	6921      	ldr	r1, [r4, #16]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	b151      	cbz	r1, 80078c8 <_sungetc_r+0x60>
 80078b2:	4299      	cmp	r1, r3
 80078b4:	d208      	bcs.n	80078c8 <_sungetc_r+0x60>
 80078b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80078ba:	42a9      	cmp	r1, r5
 80078bc:	d104      	bne.n	80078c8 <_sungetc_r+0x60>
 80078be:	3b01      	subs	r3, #1
 80078c0:	3201      	adds	r2, #1
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	6062      	str	r2, [r4, #4]
 80078c6:	e7d5      	b.n	8007874 <_sungetc_r+0xc>
 80078c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80078cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d0:	6363      	str	r3, [r4, #52]	; 0x34
 80078d2:	2303      	movs	r3, #3
 80078d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80078d6:	4623      	mov	r3, r4
 80078d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	2301      	movs	r3, #1
 80078e0:	e7dc      	b.n	800789c <_sungetc_r+0x34>

080078e2 <__ssrefill_r>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80078e8:	b169      	cbz	r1, 8007906 <__ssrefill_r+0x24>
 80078ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078ee:	4299      	cmp	r1, r3
 80078f0:	d001      	beq.n	80078f6 <__ssrefill_r+0x14>
 80078f2:	f7ff fdc1 	bl	8007478 <_free_r>
 80078f6:	2000      	movs	r0, #0
 80078f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078fa:	6360      	str	r0, [r4, #52]	; 0x34
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	b113      	cbz	r3, 8007906 <__ssrefill_r+0x24>
 8007900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	bd10      	pop	{r4, pc}
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	2300      	movs	r3, #0
 8007910:	6063      	str	r3, [r4, #4]
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f043 0320 	orr.w	r3, r3, #32
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	e7f3      	b.n	8007904 <__ssrefill_r+0x22>

0800791c <__ssvfiscanf_r>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	460c      	mov	r4, r1
 8007922:	2100      	movs	r1, #0
 8007924:	4606      	mov	r6, r0
 8007926:	4692      	mov	sl, r2
 8007928:	270a      	movs	r7, #10
 800792a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800792e:	9144      	str	r1, [sp, #272]	; 0x110
 8007930:	9145      	str	r1, [sp, #276]	; 0x114
 8007932:	499e      	ldr	r1, [pc, #632]	; (8007bac <__ssvfiscanf_r+0x290>)
 8007934:	f10d 0804 	add.w	r8, sp, #4
 8007938:	91a0      	str	r1, [sp, #640]	; 0x280
 800793a:	499d      	ldr	r1, [pc, #628]	; (8007bb0 <__ssvfiscanf_r+0x294>)
 800793c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8007bb4 <__ssvfiscanf_r+0x298>
 8007940:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007944:	91a1      	str	r1, [sp, #644]	; 0x284
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	f89a 3000 	ldrb.w	r3, [sl]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 812a 	beq.w	8007ba6 <__ssvfiscanf_r+0x28a>
 8007952:	4655      	mov	r5, sl
 8007954:	f7ff f932 	bl	8006bbc <__locale_ctype_ptr>
 8007958:	f815 bb01 	ldrb.w	fp, [r5], #1
 800795c:	4458      	add	r0, fp
 800795e:	7843      	ldrb	r3, [r0, #1]
 8007960:	f013 0308 	ands.w	r3, r3, #8
 8007964:	d01c      	beq.n	80079a0 <__ssvfiscanf_r+0x84>
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	dd12      	ble.n	8007992 <__ssvfiscanf_r+0x76>
 800796c:	f7ff f926 	bl	8006bbc <__locale_ctype_ptr>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	4410      	add	r0, r2
 8007976:	7842      	ldrb	r2, [r0, #1]
 8007978:	0712      	lsls	r2, r2, #28
 800797a:	d401      	bmi.n	8007980 <__ssvfiscanf_r+0x64>
 800797c:	46aa      	mov	sl, r5
 800797e:	e7e3      	b.n	8007948 <__ssvfiscanf_r+0x2c>
 8007980:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007982:	3301      	adds	r3, #1
 8007984:	3201      	adds	r2, #1
 8007986:	9245      	str	r2, [sp, #276]	; 0x114
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	3a01      	subs	r2, #1
 800798e:	6062      	str	r2, [r4, #4]
 8007990:	e7e9      	b.n	8007966 <__ssvfiscanf_r+0x4a>
 8007992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007994:	4621      	mov	r1, r4
 8007996:	4630      	mov	r0, r6
 8007998:	4798      	blx	r3
 800799a:	2800      	cmp	r0, #0
 800799c:	d0e6      	beq.n	800796c <__ssvfiscanf_r+0x50>
 800799e:	e7ed      	b.n	800797c <__ssvfiscanf_r+0x60>
 80079a0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80079a4:	f040 8082 	bne.w	8007aac <__ssvfiscanf_r+0x190>
 80079a8:	9343      	str	r3, [sp, #268]	; 0x10c
 80079aa:	9341      	str	r3, [sp, #260]	; 0x104
 80079ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80079b0:	2b2a      	cmp	r3, #42	; 0x2a
 80079b2:	d103      	bne.n	80079bc <__ssvfiscanf_r+0xa0>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f10a 0502 	add.w	r5, sl, #2
 80079ba:	9341      	str	r3, [sp, #260]	; 0x104
 80079bc:	46aa      	mov	sl, r5
 80079be:	f815 1b01 	ldrb.w	r1, [r5], #1
 80079c2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80079c6:	2a09      	cmp	r2, #9
 80079c8:	d922      	bls.n	8007a10 <__ssvfiscanf_r+0xf4>
 80079ca:	2203      	movs	r2, #3
 80079cc:	4879      	ldr	r0, [pc, #484]	; (8007bb4 <__ssvfiscanf_r+0x298>)
 80079ce:	f7ff f93f 	bl	8006c50 <memchr>
 80079d2:	b138      	cbz	r0, 80079e4 <__ssvfiscanf_r+0xc8>
 80079d4:	eba0 0309 	sub.w	r3, r0, r9
 80079d8:	2001      	movs	r0, #1
 80079da:	46aa      	mov	sl, r5
 80079dc:	4098      	lsls	r0, r3
 80079de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079e0:	4318      	orrs	r0, r3
 80079e2:	9041      	str	r0, [sp, #260]	; 0x104
 80079e4:	f89a 3000 	ldrb.w	r3, [sl]
 80079e8:	f10a 0501 	add.w	r5, sl, #1
 80079ec:	2b67      	cmp	r3, #103	; 0x67
 80079ee:	d82b      	bhi.n	8007a48 <__ssvfiscanf_r+0x12c>
 80079f0:	2b65      	cmp	r3, #101	; 0x65
 80079f2:	f080 809f 	bcs.w	8007b34 <__ssvfiscanf_r+0x218>
 80079f6:	2b47      	cmp	r3, #71	; 0x47
 80079f8:	d810      	bhi.n	8007a1c <__ssvfiscanf_r+0x100>
 80079fa:	2b45      	cmp	r3, #69	; 0x45
 80079fc:	f080 809a 	bcs.w	8007b34 <__ssvfiscanf_r+0x218>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d06c      	beq.n	8007ade <__ssvfiscanf_r+0x1c2>
 8007a04:	2b25      	cmp	r3, #37	; 0x25
 8007a06:	d051      	beq.n	8007aac <__ssvfiscanf_r+0x190>
 8007a08:	2303      	movs	r3, #3
 8007a0a:	9742      	str	r7, [sp, #264]	; 0x108
 8007a0c:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a0e:	e027      	b.n	8007a60 <__ssvfiscanf_r+0x144>
 8007a10:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007a12:	fb07 1303 	mla	r3, r7, r3, r1
 8007a16:	3b30      	subs	r3, #48	; 0x30
 8007a18:	9343      	str	r3, [sp, #268]	; 0x10c
 8007a1a:	e7cf      	b.n	80079bc <__ssvfiscanf_r+0xa0>
 8007a1c:	2b5b      	cmp	r3, #91	; 0x5b
 8007a1e:	d06a      	beq.n	8007af6 <__ssvfiscanf_r+0x1da>
 8007a20:	d80c      	bhi.n	8007a3c <__ssvfiscanf_r+0x120>
 8007a22:	2b58      	cmp	r3, #88	; 0x58
 8007a24:	d1f0      	bne.n	8007a08 <__ssvfiscanf_r+0xec>
 8007a26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2c:	9241      	str	r2, [sp, #260]	; 0x104
 8007a2e:	2210      	movs	r2, #16
 8007a30:	9242      	str	r2, [sp, #264]	; 0x108
 8007a32:	2b6e      	cmp	r3, #110	; 0x6e
 8007a34:	bf8c      	ite	hi
 8007a36:	2304      	movhi	r3, #4
 8007a38:	2303      	movls	r3, #3
 8007a3a:	e010      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007a3c:	2b63      	cmp	r3, #99	; 0x63
 8007a3e:	d065      	beq.n	8007b0c <__ssvfiscanf_r+0x1f0>
 8007a40:	2b64      	cmp	r3, #100	; 0x64
 8007a42:	d1e1      	bne.n	8007a08 <__ssvfiscanf_r+0xec>
 8007a44:	9742      	str	r7, [sp, #264]	; 0x108
 8007a46:	e7f4      	b.n	8007a32 <__ssvfiscanf_r+0x116>
 8007a48:	2b70      	cmp	r3, #112	; 0x70
 8007a4a:	d04b      	beq.n	8007ae4 <__ssvfiscanf_r+0x1c8>
 8007a4c:	d826      	bhi.n	8007a9c <__ssvfiscanf_r+0x180>
 8007a4e:	2b6e      	cmp	r3, #110	; 0x6e
 8007a50:	d062      	beq.n	8007b18 <__ssvfiscanf_r+0x1fc>
 8007a52:	d84c      	bhi.n	8007aee <__ssvfiscanf_r+0x1d2>
 8007a54:	2b69      	cmp	r3, #105	; 0x69
 8007a56:	d1d7      	bne.n	8007a08 <__ssvfiscanf_r+0xec>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9342      	str	r3, [sp, #264]	; 0x108
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	dd68      	ble.n	8007b38 <__ssvfiscanf_r+0x21c>
 8007a66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007a68:	0659      	lsls	r1, r3, #25
 8007a6a:	d407      	bmi.n	8007a7c <__ssvfiscanf_r+0x160>
 8007a6c:	f7ff f8a6 	bl	8006bbc <__locale_ctype_ptr>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	4410      	add	r0, r2
 8007a76:	7842      	ldrb	r2, [r0, #1]
 8007a78:	0712      	lsls	r2, r2, #28
 8007a7a:	d464      	bmi.n	8007b46 <__ssvfiscanf_r+0x22a>
 8007a7c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	dc73      	bgt.n	8007b6a <__ssvfiscanf_r+0x24e>
 8007a82:	466b      	mov	r3, sp
 8007a84:	4622      	mov	r2, r4
 8007a86:	a941      	add	r1, sp, #260	; 0x104
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 f9d5 	bl	8007e38 <_scanf_chars>
 8007a8e:	2801      	cmp	r0, #1
 8007a90:	f000 8089 	beq.w	8007ba6 <__ssvfiscanf_r+0x28a>
 8007a94:	2802      	cmp	r0, #2
 8007a96:	f47f af71 	bne.w	800797c <__ssvfiscanf_r+0x60>
 8007a9a:	e01d      	b.n	8007ad8 <__ssvfiscanf_r+0x1bc>
 8007a9c:	2b75      	cmp	r3, #117	; 0x75
 8007a9e:	d0d1      	beq.n	8007a44 <__ssvfiscanf_r+0x128>
 8007aa0:	2b78      	cmp	r3, #120	; 0x78
 8007aa2:	d0c0      	beq.n	8007a26 <__ssvfiscanf_r+0x10a>
 8007aa4:	2b73      	cmp	r3, #115	; 0x73
 8007aa6:	d1af      	bne.n	8007a08 <__ssvfiscanf_r+0xec>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e7d8      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007aac:	6863      	ldr	r3, [r4, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd0c      	ble.n	8007acc <__ssvfiscanf_r+0x1b0>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	455a      	cmp	r2, fp
 8007ab8:	d175      	bne.n	8007ba6 <__ssvfiscanf_r+0x28a>
 8007aba:	3301      	adds	r3, #1
 8007abc:	6862      	ldr	r2, [r4, #4]
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007ac2:	3a01      	subs	r2, #1
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	6062      	str	r2, [r4, #4]
 8007ac8:	9345      	str	r3, [sp, #276]	; 0x114
 8007aca:	e757      	b.n	800797c <__ssvfiscanf_r+0x60>
 8007acc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4798      	blx	r3
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d0ec      	beq.n	8007ab2 <__ssvfiscanf_r+0x196>
 8007ad8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d159      	bne.n	8007b92 <__ssvfiscanf_r+0x276>
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae2:	e05c      	b.n	8007b9e <__ssvfiscanf_r+0x282>
 8007ae4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ae6:	f042 0220 	orr.w	r2, r2, #32
 8007aea:	9241      	str	r2, [sp, #260]	; 0x104
 8007aec:	e79b      	b.n	8007a26 <__ssvfiscanf_r+0x10a>
 8007aee:	2308      	movs	r3, #8
 8007af0:	9342      	str	r3, [sp, #264]	; 0x108
 8007af2:	2304      	movs	r3, #4
 8007af4:	e7b3      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007af6:	4629      	mov	r1, r5
 8007af8:	4640      	mov	r0, r8
 8007afa:	f000 fb17 	bl	800812c <__sccl>
 8007afe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b00:	4605      	mov	r5, r0
 8007b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b06:	9341      	str	r3, [sp, #260]	; 0x104
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7a8      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007b0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b12:	9341      	str	r3, [sp, #260]	; 0x104
 8007b14:	2300      	movs	r3, #0
 8007b16:	e7a2      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007b18:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007b1a:	06c3      	lsls	r3, r0, #27
 8007b1c:	f53f af2e 	bmi.w	800797c <__ssvfiscanf_r+0x60>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	9100      	str	r1, [sp, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	07c0      	lsls	r0, r0, #31
 8007b2c:	bf4c      	ite	mi
 8007b2e:	801a      	strhmi	r2, [r3, #0]
 8007b30:	601a      	strpl	r2, [r3, #0]
 8007b32:	e723      	b.n	800797c <__ssvfiscanf_r+0x60>
 8007b34:	2305      	movs	r3, #5
 8007b36:	e792      	b.n	8007a5e <__ssvfiscanf_r+0x142>
 8007b38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4798      	blx	r3
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d090      	beq.n	8007a66 <__ssvfiscanf_r+0x14a>
 8007b44:	e7c8      	b.n	8007ad8 <__ssvfiscanf_r+0x1bc>
 8007b46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b48:	3201      	adds	r2, #1
 8007b4a:	9245      	str	r2, [sp, #276]	; 0x114
 8007b4c:	6862      	ldr	r2, [r4, #4]
 8007b4e:	3a01      	subs	r2, #1
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	6062      	str	r2, [r4, #4]
 8007b54:	dd02      	ble.n	8007b5c <__ssvfiscanf_r+0x240>
 8007b56:	3301      	adds	r3, #1
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	e787      	b.n	8007a6c <__ssvfiscanf_r+0x150>
 8007b5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4630      	mov	r0, r6
 8007b62:	4798      	blx	r3
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d081      	beq.n	8007a6c <__ssvfiscanf_r+0x150>
 8007b68:	e7b6      	b.n	8007ad8 <__ssvfiscanf_r+0x1bc>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	dc06      	bgt.n	8007b7c <__ssvfiscanf_r+0x260>
 8007b6e:	466b      	mov	r3, sp
 8007b70:	4622      	mov	r2, r4
 8007b72:	a941      	add	r1, sp, #260	; 0x104
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f9c1 	bl	8007efc <_scanf_i>
 8007b7a:	e788      	b.n	8007a8e <__ssvfiscanf_r+0x172>
 8007b7c:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <__ssvfiscanf_r+0x29c>)
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f43f aefc 	beq.w	800797c <__ssvfiscanf_r+0x60>
 8007b84:	466b      	mov	r3, sp
 8007b86:	4622      	mov	r2, r4
 8007b88:	a941      	add	r1, sp, #260	; 0x104
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7fc fc70 	bl	8004470 <_scanf_float>
 8007b90:	e77d      	b.n	8007a8e <__ssvfiscanf_r+0x172>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b98:	bf18      	it	ne
 8007b9a:	f04f 30ff 	movne.w	r0, #4294967295
 8007b9e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ba8:	e7f9      	b.n	8007b9e <__ssvfiscanf_r+0x282>
 8007baa:	bf00      	nop
 8007bac:	08007869 	.word	0x08007869
 8007bb0:	080078e3 	.word	0x080078e3
 8007bb4:	080090c2 	.word	0x080090c2
 8007bb8:	08004471 	.word	0x08004471

08007bbc <__sfputc_r>:
 8007bbc:	6893      	ldr	r3, [r2, #8]
 8007bbe:	b410      	push	{r4}
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	6093      	str	r3, [r2, #8]
 8007bc6:	da07      	bge.n	8007bd8 <__sfputc_r+0x1c>
 8007bc8:	6994      	ldr	r4, [r2, #24]
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	db01      	blt.n	8007bd2 <__sfputc_r+0x16>
 8007bce:	290a      	cmp	r1, #10
 8007bd0:	d102      	bne.n	8007bd8 <__sfputc_r+0x1c>
 8007bd2:	bc10      	pop	{r4}
 8007bd4:	f000 bbb2 	b.w	800833c <__swbuf_r>
 8007bd8:	6813      	ldr	r3, [r2, #0]
 8007bda:	1c58      	adds	r0, r3, #1
 8007bdc:	6010      	str	r0, [r2, #0]
 8007bde:	7019      	strb	r1, [r3, #0]
 8007be0:	4608      	mov	r0, r1
 8007be2:	bc10      	pop	{r4}
 8007be4:	4770      	bx	lr

08007be6 <__sfputs_r>:
 8007be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be8:	4606      	mov	r6, r0
 8007bea:	460f      	mov	r7, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	18d5      	adds	r5, r2, r3
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	d101      	bne.n	8007bf8 <__sfputs_r+0x12>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e007      	b.n	8007c08 <__sfputs_r+0x22>
 8007bf8:	463a      	mov	r2, r7
 8007bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ffdc 	bl	8007bbc <__sfputc_r>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d1f3      	bne.n	8007bf0 <__sfputs_r+0xa>
 8007c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c0c <_vfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	460c      	mov	r4, r1
 8007c12:	b09d      	sub	sp, #116	; 0x74
 8007c14:	4617      	mov	r7, r2
 8007c16:	461d      	mov	r5, r3
 8007c18:	4606      	mov	r6, r0
 8007c1a:	b118      	cbz	r0, 8007c24 <_vfiprintf_r+0x18>
 8007c1c:	6983      	ldr	r3, [r0, #24]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <_vfiprintf_r+0x18>
 8007c20:	f7fe fc16 	bl	8006450 <__sinit>
 8007c24:	4b7c      	ldr	r3, [pc, #496]	; (8007e18 <_vfiprintf_r+0x20c>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d158      	bne.n	8007cdc <_vfiprintf_r+0xd0>
 8007c2a:	6874      	ldr	r4, [r6, #4]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	0718      	lsls	r0, r3, #28
 8007c30:	d55e      	bpl.n	8007cf0 <_vfiprintf_r+0xe4>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d05b      	beq.n	8007cf0 <_vfiprintf_r+0xe4>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c42:	2330      	movs	r3, #48	; 0x30
 8007c44:	f04f 0b01 	mov.w	fp, #1
 8007c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4c:	9503      	str	r5, [sp, #12]
 8007c4e:	46b8      	mov	r8, r7
 8007c50:	4645      	mov	r5, r8
 8007c52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007c56:	b10b      	cbz	r3, 8007c5c <_vfiprintf_r+0x50>
 8007c58:	2b25      	cmp	r3, #37	; 0x25
 8007c5a:	d154      	bne.n	8007d06 <_vfiprintf_r+0xfa>
 8007c5c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007c60:	d00b      	beq.n	8007c7a <_vfiprintf_r+0x6e>
 8007c62:	4653      	mov	r3, sl
 8007c64:	463a      	mov	r2, r7
 8007c66:	4621      	mov	r1, r4
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f7ff ffbc 	bl	8007be6 <__sfputs_r>
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f000 80c2 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c76:	4453      	add	r3, sl
 8007c78:	9309      	str	r3, [sp, #36]	; 0x24
 8007c7a:	f898 3000 	ldrb.w	r3, [r8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80ba 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007c84:	2300      	movs	r3, #0
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	9307      	str	r3, [sp, #28]
 8007c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c96:	931a      	str	r3, [sp, #104]	; 0x68
 8007c98:	46a8      	mov	r8, r5
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007ca0:	485e      	ldr	r0, [pc, #376]	; (8007e1c <_vfiprintf_r+0x210>)
 8007ca2:	f7fe ffd5 	bl	8006c50 <memchr>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	bb78      	cbnz	r0, 8007d0a <_vfiprintf_r+0xfe>
 8007caa:	06d9      	lsls	r1, r3, #27
 8007cac:	bf44      	itt	mi
 8007cae:	2220      	movmi	r2, #32
 8007cb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cb4:	071a      	lsls	r2, r3, #28
 8007cb6:	bf44      	itt	mi
 8007cb8:	222b      	movmi	r2, #43	; 0x2b
 8007cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cbe:	782a      	ldrb	r2, [r5, #0]
 8007cc0:	2a2a      	cmp	r2, #42	; 0x2a
 8007cc2:	d02a      	beq.n	8007d1a <_vfiprintf_r+0x10e>
 8007cc4:	46a8      	mov	r8, r5
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	250a      	movs	r5, #10
 8007cca:	9a07      	ldr	r2, [sp, #28]
 8007ccc:	4641      	mov	r1, r8
 8007cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cd2:	3b30      	subs	r3, #48	; 0x30
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d969      	bls.n	8007dac <_vfiprintf_r+0x1a0>
 8007cd8:	b360      	cbz	r0, 8007d34 <_vfiprintf_r+0x128>
 8007cda:	e024      	b.n	8007d26 <_vfiprintf_r+0x11a>
 8007cdc:	4b50      	ldr	r3, [pc, #320]	; (8007e20 <_vfiprintf_r+0x214>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d101      	bne.n	8007ce6 <_vfiprintf_r+0xda>
 8007ce2:	68b4      	ldr	r4, [r6, #8]
 8007ce4:	e7a2      	b.n	8007c2c <_vfiprintf_r+0x20>
 8007ce6:	4b4f      	ldr	r3, [pc, #316]	; (8007e24 <_vfiprintf_r+0x218>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	bf08      	it	eq
 8007cec:	68f4      	ldreq	r4, [r6, #12]
 8007cee:	e79d      	b.n	8007c2c <_vfiprintf_r+0x20>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 fb82 	bl	80083fc <__swsetup_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d09d      	beq.n	8007c38 <_vfiprintf_r+0x2c>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	b01d      	add	sp, #116	; 0x74
 8007d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d06:	46a8      	mov	r8, r5
 8007d08:	e7a2      	b.n	8007c50 <_vfiprintf_r+0x44>
 8007d0a:	4a44      	ldr	r2, [pc, #272]	; (8007e1c <_vfiprintf_r+0x210>)
 8007d0c:	4645      	mov	r5, r8
 8007d0e:	1a80      	subs	r0, r0, r2
 8007d10:	fa0b f000 	lsl.w	r0, fp, r0
 8007d14:	4318      	orrs	r0, r3
 8007d16:	9004      	str	r0, [sp, #16]
 8007d18:	e7be      	b.n	8007c98 <_vfiprintf_r+0x8c>
 8007d1a:	9a03      	ldr	r2, [sp, #12]
 8007d1c:	1d11      	adds	r1, r2, #4
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	9103      	str	r1, [sp, #12]
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	db01      	blt.n	8007d2a <_vfiprintf_r+0x11e>
 8007d26:	9207      	str	r2, [sp, #28]
 8007d28:	e004      	b.n	8007d34 <_vfiprintf_r+0x128>
 8007d2a:	4252      	negs	r2, r2
 8007d2c:	f043 0302 	orr.w	r3, r3, #2
 8007d30:	9207      	str	r2, [sp, #28]
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	f898 3000 	ldrb.w	r3, [r8]
 8007d38:	2b2e      	cmp	r3, #46	; 0x2e
 8007d3a:	d10e      	bne.n	8007d5a <_vfiprintf_r+0x14e>
 8007d3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d40:	2b2a      	cmp	r3, #42	; 0x2a
 8007d42:	d138      	bne.n	8007db6 <_vfiprintf_r+0x1aa>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	f108 0802 	add.w	r8, r8, #2
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	9203      	str	r2, [sp, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfb8      	it	lt
 8007d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	4d33      	ldr	r5, [pc, #204]	; (8007e28 <_vfiprintf_r+0x21c>)
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	f898 1000 	ldrb.w	r1, [r8]
 8007d62:	4628      	mov	r0, r5
 8007d64:	f7fe ff74 	bl	8006c50 <memchr>
 8007d68:	b140      	cbz	r0, 8007d7c <_vfiprintf_r+0x170>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	1b40      	subs	r0, r0, r5
 8007d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	f108 0801 	add.w	r8, r8, #1
 8007d78:	4303      	orrs	r3, r0
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	f898 1000 	ldrb.w	r1, [r8]
 8007d80:	2206      	movs	r2, #6
 8007d82:	482a      	ldr	r0, [pc, #168]	; (8007e2c <_vfiprintf_r+0x220>)
 8007d84:	f108 0701 	add.w	r7, r8, #1
 8007d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d8c:	f7fe ff60 	bl	8006c50 <memchr>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d037      	beq.n	8007e04 <_vfiprintf_r+0x1f8>
 8007d94:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <_vfiprintf_r+0x224>)
 8007d96:	bb1b      	cbnz	r3, 8007de0 <_vfiprintf_r+0x1d4>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	3307      	adds	r3, #7
 8007d9c:	f023 0307 	bic.w	r3, r3, #7
 8007da0:	3308      	adds	r3, #8
 8007da2:	9303      	str	r3, [sp, #12]
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	444b      	add	r3, r9
 8007da8:	9309      	str	r3, [sp, #36]	; 0x24
 8007daa:	e750      	b.n	8007c4e <_vfiprintf_r+0x42>
 8007dac:	fb05 3202 	mla	r2, r5, r2, r3
 8007db0:	2001      	movs	r0, #1
 8007db2:	4688      	mov	r8, r1
 8007db4:	e78a      	b.n	8007ccc <_vfiprintf_r+0xc0>
 8007db6:	2300      	movs	r3, #0
 8007db8:	250a      	movs	r5, #10
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f108 0801 	add.w	r8, r8, #1
 8007dc0:	9305      	str	r3, [sp, #20]
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dc8:	3a30      	subs	r2, #48	; 0x30
 8007dca:	2a09      	cmp	r2, #9
 8007dcc:	d903      	bls.n	8007dd6 <_vfiprintf_r+0x1ca>
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0c3      	beq.n	8007d5a <_vfiprintf_r+0x14e>
 8007dd2:	9105      	str	r1, [sp, #20]
 8007dd4:	e7c1      	b.n	8007d5a <_vfiprintf_r+0x14e>
 8007dd6:	fb05 2101 	mla	r1, r5, r1, r2
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4680      	mov	r8, r0
 8007dde:	e7f0      	b.n	8007dc2 <_vfiprintf_r+0x1b6>
 8007de0:	ab03      	add	r3, sp, #12
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	4622      	mov	r2, r4
 8007de6:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <_vfiprintf_r+0x228>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7fb ff82 	bl	8003cf4 <_printf_float>
 8007df0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007df4:	4681      	mov	r9, r0
 8007df6:	d1d5      	bne.n	8007da4 <_vfiprintf_r+0x198>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	065b      	lsls	r3, r3, #25
 8007dfc:	f53f af7e 	bmi.w	8007cfc <_vfiprintf_r+0xf0>
 8007e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e02:	e77d      	b.n	8007d00 <_vfiprintf_r+0xf4>
 8007e04:	ab03      	add	r3, sp, #12
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <_vfiprintf_r+0x228>)
 8007e0c:	a904      	add	r1, sp, #16
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7fc fa1c 	bl	800424c <_printf_i>
 8007e14:	e7ec      	b.n	8007df0 <_vfiprintf_r+0x1e4>
 8007e16:	bf00      	nop
 8007e18:	08008f70 	.word	0x08008f70
 8007e1c:	080090bc 	.word	0x080090bc
 8007e20:	08008f90 	.word	0x08008f90
 8007e24:	08008f50 	.word	0x08008f50
 8007e28:	080090c2 	.word	0x080090c2
 8007e2c:	080090c6 	.word	0x080090c6
 8007e30:	08003cf5 	.word	0x08003cf5
 8007e34:	08007be7 	.word	0x08007be7

08007e38 <_scanf_chars>:
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	688a      	ldr	r2, [r1, #8]
 8007e40:	4680      	mov	r8, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b932      	cbnz	r2, 8007e54 <_scanf_chars+0x1c>
 8007e46:	698a      	ldr	r2, [r1, #24]
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	bf14      	ite	ne
 8007e4c:	f04f 32ff 	movne.w	r2, #4294967295
 8007e50:	2201      	moveq	r2, #1
 8007e52:	608a      	str	r2, [r1, #8]
 8007e54:	2600      	movs	r6, #0
 8007e56:	6822      	ldr	r2, [r4, #0]
 8007e58:	06d1      	lsls	r1, r2, #27
 8007e5a:	bf5f      	itttt	pl
 8007e5c:	681a      	ldrpl	r2, [r3, #0]
 8007e5e:	1d11      	addpl	r1, r2, #4
 8007e60:	6019      	strpl	r1, [r3, #0]
 8007e62:	6817      	ldrpl	r7, [r2, #0]
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	b1db      	cbz	r3, 8007ea0 <_scanf_chars+0x68>
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d107      	bne.n	8007e7c <_scanf_chars+0x44>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	6962      	ldr	r2, [r4, #20]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	5cd3      	ldrb	r3, [r2, r3]
 8007e74:	b9a3      	cbnz	r3, 8007ea0 <_scanf_chars+0x68>
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	d131      	bne.n	8007ede <_scanf_chars+0xa6>
 8007e7a:	e006      	b.n	8007e8a <_scanf_chars+0x52>
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d007      	beq.n	8007e90 <_scanf_chars+0x58>
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d12c      	bne.n	8007ede <_scanf_chars+0xa6>
 8007e84:	69a3      	ldr	r3, [r4, #24]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d129      	bne.n	8007ede <_scanf_chars+0xa6>
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	f7fe fe94 	bl	8006bbc <__locale_ctype_ptr>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4418      	add	r0, r3
 8007e9a:	7843      	ldrb	r3, [r0, #1]
 8007e9c:	071b      	lsls	r3, r3, #28
 8007e9e:	d4ef      	bmi.n	8007e80 <_scanf_chars+0x48>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	06da      	lsls	r2, r3, #27
 8007ea6:	bf5e      	ittt	pl
 8007ea8:	682b      	ldrpl	r3, [r5, #0]
 8007eaa:	781b      	ldrbpl	r3, [r3, #0]
 8007eac:	703b      	strbpl	r3, [r7, #0]
 8007eae:	682a      	ldr	r2, [r5, #0]
 8007eb0:	686b      	ldr	r3, [r5, #4]
 8007eb2:	f102 0201 	add.w	r2, r2, #1
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	68a2      	ldr	r2, [r4, #8]
 8007eba:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ebe:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ec2:	606b      	str	r3, [r5, #4]
 8007ec4:	bf58      	it	pl
 8007ec6:	3701      	addpl	r7, #1
 8007ec8:	60a2      	str	r2, [r4, #8]
 8007eca:	b142      	cbz	r2, 8007ede <_scanf_chars+0xa6>
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dcc9      	bgt.n	8007e64 <_scanf_chars+0x2c>
 8007ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4798      	blx	r3
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d0c2      	beq.n	8007e64 <_scanf_chars+0x2c>
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f013 0310 	ands.w	r3, r3, #16
 8007ee4:	d105      	bne.n	8007ef2 <_scanf_chars+0xba>
 8007ee6:	68e2      	ldr	r2, [r4, #12]
 8007ee8:	3201      	adds	r2, #1
 8007eea:	60e2      	str	r2, [r4, #12]
 8007eec:	69a2      	ldr	r2, [r4, #24]
 8007eee:	b102      	cbz	r2, 8007ef2 <_scanf_chars+0xba>
 8007ef0:	703b      	strb	r3, [r7, #0]
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	441e      	add	r6, r3
 8007ef8:	6126      	str	r6, [r4, #16]
 8007efa:	e7c7      	b.n	8007e8c <_scanf_chars+0x54>

08007efc <_scanf_i>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	460c      	mov	r4, r1
 8007f02:	469a      	mov	sl, r3
 8007f04:	4b74      	ldr	r3, [pc, #464]	; (80080d8 <_scanf_i+0x1dc>)
 8007f06:	b087      	sub	sp, #28
 8007f08:	4683      	mov	fp, r0
 8007f0a:	4616      	mov	r6, r2
 8007f0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f10:	ab03      	add	r3, sp, #12
 8007f12:	68a7      	ldr	r7, [r4, #8]
 8007f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f18:	4b70      	ldr	r3, [pc, #448]	; (80080dc <_scanf_i+0x1e0>)
 8007f1a:	69a1      	ldr	r1, [r4, #24]
 8007f1c:	4a70      	ldr	r2, [pc, #448]	; (80080e0 <_scanf_i+0x1e4>)
 8007f1e:	f104 091c 	add.w	r9, r4, #28
 8007f22:	2903      	cmp	r1, #3
 8007f24:	bf08      	it	eq
 8007f26:	461a      	moveq	r2, r3
 8007f28:	1e7b      	subs	r3, r7, #1
 8007f2a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007f2e:	bf84      	itt	hi
 8007f30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f34:	60a3      	strhi	r3, [r4, #8]
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	bf88      	it	hi
 8007f3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f3e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007f42:	6023      	str	r3, [r4, #0]
 8007f44:	bf98      	it	ls
 8007f46:	2700      	movls	r7, #0
 8007f48:	464b      	mov	r3, r9
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	9200      	str	r2, [sp, #0]
 8007f50:	bf88      	it	hi
 8007f52:	197f      	addhi	r7, r7, r5
 8007f54:	6831      	ldr	r1, [r6, #0]
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	ab03      	add	r3, sp, #12
 8007f5a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	7809      	ldrb	r1, [r1, #0]
 8007f62:	f7fe fe75 	bl	8006c50 <memchr>
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	b330      	cbz	r0, 8007fb8 <_scanf_i+0xbc>
 8007f6a:	f1b8 0f01 	cmp.w	r8, #1
 8007f6e:	d15a      	bne.n	8008026 <_scanf_i+0x12a>
 8007f70:	6862      	ldr	r2, [r4, #4]
 8007f72:	b92a      	cbnz	r2, 8007f80 <_scanf_i+0x84>
 8007f74:	2108      	movs	r1, #8
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	6061      	str	r1, [r4, #4]
 8007f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007f86:	6022      	str	r2, [r4, #0]
 8007f88:	68a2      	ldr	r2, [r4, #8]
 8007f8a:	1e51      	subs	r1, r2, #1
 8007f8c:	60a1      	str	r1, [r4, #8]
 8007f8e:	b19a      	cbz	r2, 8007fb8 <_scanf_i+0xbc>
 8007f90:	6832      	ldr	r2, [r6, #0]
 8007f92:	1c5d      	adds	r5, r3, #1
 8007f94:	1c51      	adds	r1, r2, #1
 8007f96:	6031      	str	r1, [r6, #0]
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	6873      	ldr	r3, [r6, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	6073      	str	r3, [r6, #4]
 8007fa4:	dc07      	bgt.n	8007fb6 <_scanf_i+0xba>
 8007fa6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007faa:	4631      	mov	r1, r6
 8007fac:	4658      	mov	r0, fp
 8007fae:	4798      	blx	r3
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f040 8087 	bne.w	80080c4 <_scanf_i+0x1c8>
 8007fb6:	462b      	mov	r3, r5
 8007fb8:	f108 0801 	add.w	r8, r8, #1
 8007fbc:	f1b8 0f03 	cmp.w	r8, #3
 8007fc0:	d1c8      	bne.n	8007f54 <_scanf_i+0x58>
 8007fc2:	6862      	ldr	r2, [r4, #4]
 8007fc4:	b90a      	cbnz	r2, 8007fca <_scanf_i+0xce>
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	6062      	str	r2, [r4, #4]
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	4945      	ldr	r1, [pc, #276]	; (80080e4 <_scanf_i+0x1e8>)
 8007fce:	6960      	ldr	r0, [r4, #20]
 8007fd0:	1a89      	subs	r1, r1, r2
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	f000 f8aa 	bl	800812c <__sccl>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	f04f 0800 	mov.w	r8, #0
 8007fde:	461d      	mov	r5, r3
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d03b      	beq.n	8008060 <_scanf_i+0x164>
 8007fe8:	6831      	ldr	r1, [r6, #0]
 8007fea:	6960      	ldr	r0, [r4, #20]
 8007fec:	f891 c000 	ldrb.w	ip, [r1]
 8007ff0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d033      	beq.n	8008060 <_scanf_i+0x164>
 8007ff8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007ffc:	d121      	bne.n	8008042 <_scanf_i+0x146>
 8007ffe:	0510      	lsls	r0, r2, #20
 8008000:	d51f      	bpl.n	8008042 <_scanf_i+0x146>
 8008002:	f108 0801 	add.w	r8, r8, #1
 8008006:	b117      	cbz	r7, 800800e <_scanf_i+0x112>
 8008008:	3301      	adds	r3, #1
 800800a:	3f01      	subs	r7, #1
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	6873      	ldr	r3, [r6, #4]
 8008010:	3b01      	subs	r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	6073      	str	r3, [r6, #4]
 8008016:	dd1c      	ble.n	8008052 <_scanf_i+0x156>
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	3301      	adds	r3, #1
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	3b01      	subs	r3, #1
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	e7dc      	b.n	8007fe0 <_scanf_i+0xe4>
 8008026:	f1b8 0f02 	cmp.w	r8, #2
 800802a:	d1ad      	bne.n	8007f88 <_scanf_i+0x8c>
 800802c:	6822      	ldr	r2, [r4, #0]
 800802e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008032:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008036:	d1bf      	bne.n	8007fb8 <_scanf_i+0xbc>
 8008038:	2110      	movs	r1, #16
 800803a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800803e:	6061      	str	r1, [r4, #4]
 8008040:	e7a1      	b.n	8007f86 <_scanf_i+0x8a>
 8008042:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	780b      	ldrb	r3, [r1, #0]
 800804a:	3501      	adds	r5, #1
 800804c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8008050:	e7dd      	b.n	800800e <_scanf_i+0x112>
 8008052:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008056:	4631      	mov	r1, r6
 8008058:	4658      	mov	r0, fp
 800805a:	4798      	blx	r3
 800805c:	2800      	cmp	r0, #0
 800805e:	d0de      	beq.n	800801e <_scanf_i+0x122>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	05d9      	lsls	r1, r3, #23
 8008064:	d50c      	bpl.n	8008080 <_scanf_i+0x184>
 8008066:	454d      	cmp	r5, r9
 8008068:	d908      	bls.n	800807c <_scanf_i+0x180>
 800806a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800806e:	1e6f      	subs	r7, r5, #1
 8008070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008074:	4632      	mov	r2, r6
 8008076:	4658      	mov	r0, fp
 8008078:	4798      	blx	r3
 800807a:	463d      	mov	r5, r7
 800807c:	454d      	cmp	r5, r9
 800807e:	d029      	beq.n	80080d4 <_scanf_i+0x1d8>
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	f012 0210 	ands.w	r2, r2, #16
 8008086:	d113      	bne.n	80080b0 <_scanf_i+0x1b4>
 8008088:	702a      	strb	r2, [r5, #0]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4649      	mov	r1, r9
 800808e:	4658      	mov	r0, fp
 8008090:	9e00      	ldr	r6, [sp, #0]
 8008092:	47b0      	blx	r6
 8008094:	f8da 3000 	ldr.w	r3, [sl]
 8008098:	6821      	ldr	r1, [r4, #0]
 800809a:	1d1a      	adds	r2, r3, #4
 800809c:	f8ca 2000 	str.w	r2, [sl]
 80080a0:	f011 0f20 	tst.w	r1, #32
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	d010      	beq.n	80080ca <_scanf_i+0x1ce>
 80080a8:	6018      	str	r0, [r3, #0]
 80080aa:	68e3      	ldr	r3, [r4, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60e3      	str	r3, [r4, #12]
 80080b0:	2000      	movs	r0, #0
 80080b2:	eba5 0509 	sub.w	r5, r5, r9
 80080b6:	44a8      	add	r8, r5
 80080b8:	6925      	ldr	r5, [r4, #16]
 80080ba:	4445      	add	r5, r8
 80080bc:	6125      	str	r5, [r4, #16]
 80080be:	b007      	add	sp, #28
 80080c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c4:	f04f 0800 	mov.w	r8, #0
 80080c8:	e7ca      	b.n	8008060 <_scanf_i+0x164>
 80080ca:	07ca      	lsls	r2, r1, #31
 80080cc:	bf4c      	ite	mi
 80080ce:	8018      	strhmi	r0, [r3, #0]
 80080d0:	6018      	strpl	r0, [r3, #0]
 80080d2:	e7ea      	b.n	80080aa <_scanf_i+0x1ae>
 80080d4:	2001      	movs	r0, #1
 80080d6:	e7f2      	b.n	80080be <_scanf_i+0x1c2>
 80080d8:	080087d0 	.word	0x080087d0
 80080dc:	080056e1 	.word	0x080056e1
 80080e0:	080082a9 	.word	0x080082a9
 80080e4:	080090dd 	.word	0x080090dd

080080e8 <_read_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	2200      	movs	r2, #0
 80080f2:	4c05      	ldr	r4, [pc, #20]	; (8008108 <_read_r+0x20>)
 80080f4:	6022      	str	r2, [r4, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7fb fc94 	bl	8003a24 <_read>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_read_r+0x1e>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	b103      	cbz	r3, 8008106 <_read_r+0x1e>
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	200008c0 	.word	0x200008c0

0800810c <_sbrk_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	2300      	movs	r3, #0
 8008110:	4c05      	ldr	r4, [pc, #20]	; (8008128 <_sbrk_r+0x1c>)
 8008112:	4605      	mov	r5, r0
 8008114:	4608      	mov	r0, r1
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	f7fb fc92 	bl	8003a40 <_sbrk>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_sbrk_r+0x1a>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	b103      	cbz	r3, 8008126 <_sbrk_r+0x1a>
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	200008c0 	.word	0x200008c0

0800812c <__sccl>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	780b      	ldrb	r3, [r1, #0]
 8008130:	1e44      	subs	r4, r0, #1
 8008132:	2b5e      	cmp	r3, #94	; 0x5e
 8008134:	bf13      	iteet	ne
 8008136:	1c4a      	addne	r2, r1, #1
 8008138:	1c8a      	addeq	r2, r1, #2
 800813a:	784b      	ldrbeq	r3, [r1, #1]
 800813c:	2100      	movne	r1, #0
 800813e:	bf08      	it	eq
 8008140:	2101      	moveq	r1, #1
 8008142:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008146:	f804 1f01 	strb.w	r1, [r4, #1]!
 800814a:	42ac      	cmp	r4, r5
 800814c:	d1fb      	bne.n	8008146 <__sccl+0x1a>
 800814e:	b913      	cbnz	r3, 8008156 <__sccl+0x2a>
 8008150:	3a01      	subs	r2, #1
 8008152:	4610      	mov	r0, r2
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	f081 0401 	eor.w	r4, r1, #1
 800815a:	54c4      	strb	r4, [r0, r3]
 800815c:	1c51      	adds	r1, r2, #1
 800815e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008162:	1e4e      	subs	r6, r1, #1
 8008164:	2d2d      	cmp	r5, #45	; 0x2d
 8008166:	460a      	mov	r2, r1
 8008168:	d006      	beq.n	8008178 <__sccl+0x4c>
 800816a:	2d5d      	cmp	r5, #93	; 0x5d
 800816c:	d0f1      	beq.n	8008152 <__sccl+0x26>
 800816e:	b90d      	cbnz	r5, 8008174 <__sccl+0x48>
 8008170:	4632      	mov	r2, r6
 8008172:	e7ee      	b.n	8008152 <__sccl+0x26>
 8008174:	462b      	mov	r3, r5
 8008176:	e7f0      	b.n	800815a <__sccl+0x2e>
 8008178:	780e      	ldrb	r6, [r1, #0]
 800817a:	2e5d      	cmp	r6, #93	; 0x5d
 800817c:	d0fa      	beq.n	8008174 <__sccl+0x48>
 800817e:	42b3      	cmp	r3, r6
 8008180:	dcf8      	bgt.n	8008174 <__sccl+0x48>
 8008182:	3301      	adds	r3, #1
 8008184:	429e      	cmp	r6, r3
 8008186:	54c4      	strb	r4, [r0, r3]
 8008188:	dcfb      	bgt.n	8008182 <__sccl+0x56>
 800818a:	3102      	adds	r1, #2
 800818c:	e7e7      	b.n	800815e <__sccl+0x32>

0800818e <strncmp>:
 800818e:	b510      	push	{r4, lr}
 8008190:	b16a      	cbz	r2, 80081ae <strncmp+0x20>
 8008192:	3901      	subs	r1, #1
 8008194:	1884      	adds	r4, r0, r2
 8008196:	f810 3b01 	ldrb.w	r3, [r0], #1
 800819a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800819e:	4293      	cmp	r3, r2
 80081a0:	d103      	bne.n	80081aa <strncmp+0x1c>
 80081a2:	42a0      	cmp	r0, r4
 80081a4:	d001      	beq.n	80081aa <strncmp+0x1c>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f5      	bne.n	8008196 <strncmp+0x8>
 80081aa:	1a98      	subs	r0, r3, r2
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	4610      	mov	r0, r2
 80081b0:	e7fc      	b.n	80081ac <strncmp+0x1e>

080081b2 <_strtoul_l.isra.0>:
 80081b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b6:	4680      	mov	r8, r0
 80081b8:	4689      	mov	r9, r1
 80081ba:	4692      	mov	sl, r2
 80081bc:	461e      	mov	r6, r3
 80081be:	460f      	mov	r7, r1
 80081c0:	463d      	mov	r5, r7
 80081c2:	9808      	ldr	r0, [sp, #32]
 80081c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081c8:	f7fe fcf4 	bl	8006bb4 <__locale_ctype_ptr_l>
 80081cc:	4420      	add	r0, r4
 80081ce:	7843      	ldrb	r3, [r0, #1]
 80081d0:	f013 0308 	ands.w	r3, r3, #8
 80081d4:	d130      	bne.n	8008238 <_strtoul_l.isra.0+0x86>
 80081d6:	2c2d      	cmp	r4, #45	; 0x2d
 80081d8:	d130      	bne.n	800823c <_strtoul_l.isra.0+0x8a>
 80081da:	2101      	movs	r1, #1
 80081dc:	787c      	ldrb	r4, [r7, #1]
 80081de:	1cbd      	adds	r5, r7, #2
 80081e0:	2e00      	cmp	r6, #0
 80081e2:	d05c      	beq.n	800829e <_strtoul_l.isra.0+0xec>
 80081e4:	2e10      	cmp	r6, #16
 80081e6:	d109      	bne.n	80081fc <_strtoul_l.isra.0+0x4a>
 80081e8:	2c30      	cmp	r4, #48	; 0x30
 80081ea:	d107      	bne.n	80081fc <_strtoul_l.isra.0+0x4a>
 80081ec:	782b      	ldrb	r3, [r5, #0]
 80081ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081f2:	2b58      	cmp	r3, #88	; 0x58
 80081f4:	d14e      	bne.n	8008294 <_strtoul_l.isra.0+0xe2>
 80081f6:	2610      	movs	r6, #16
 80081f8:	786c      	ldrb	r4, [r5, #1]
 80081fa:	3502      	adds	r5, #2
 80081fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008200:	fbb2 f2f6 	udiv	r2, r2, r6
 8008204:	2300      	movs	r3, #0
 8008206:	fb06 fc02 	mul.w	ip, r6, r2
 800820a:	4618      	mov	r0, r3
 800820c:	ea6f 0c0c 	mvn.w	ip, ip
 8008210:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008214:	2f09      	cmp	r7, #9
 8008216:	d817      	bhi.n	8008248 <_strtoul_l.isra.0+0x96>
 8008218:	463c      	mov	r4, r7
 800821a:	42a6      	cmp	r6, r4
 800821c:	dd23      	ble.n	8008266 <_strtoul_l.isra.0+0xb4>
 800821e:	2b00      	cmp	r3, #0
 8008220:	db1e      	blt.n	8008260 <_strtoul_l.isra.0+0xae>
 8008222:	4282      	cmp	r2, r0
 8008224:	d31c      	bcc.n	8008260 <_strtoul_l.isra.0+0xae>
 8008226:	d101      	bne.n	800822c <_strtoul_l.isra.0+0x7a>
 8008228:	45a4      	cmp	ip, r4
 800822a:	db19      	blt.n	8008260 <_strtoul_l.isra.0+0xae>
 800822c:	2301      	movs	r3, #1
 800822e:	fb00 4006 	mla	r0, r0, r6, r4
 8008232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008236:	e7eb      	b.n	8008210 <_strtoul_l.isra.0+0x5e>
 8008238:	462f      	mov	r7, r5
 800823a:	e7c1      	b.n	80081c0 <_strtoul_l.isra.0+0xe>
 800823c:	2c2b      	cmp	r4, #43	; 0x2b
 800823e:	bf04      	itt	eq
 8008240:	1cbd      	addeq	r5, r7, #2
 8008242:	787c      	ldrbeq	r4, [r7, #1]
 8008244:	4619      	mov	r1, r3
 8008246:	e7cb      	b.n	80081e0 <_strtoul_l.isra.0+0x2e>
 8008248:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800824c:	2f19      	cmp	r7, #25
 800824e:	d801      	bhi.n	8008254 <_strtoul_l.isra.0+0xa2>
 8008250:	3c37      	subs	r4, #55	; 0x37
 8008252:	e7e2      	b.n	800821a <_strtoul_l.isra.0+0x68>
 8008254:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008258:	2f19      	cmp	r7, #25
 800825a:	d804      	bhi.n	8008266 <_strtoul_l.isra.0+0xb4>
 800825c:	3c57      	subs	r4, #87	; 0x57
 800825e:	e7dc      	b.n	800821a <_strtoul_l.isra.0+0x68>
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
 8008264:	e7e5      	b.n	8008232 <_strtoul_l.isra.0+0x80>
 8008266:	2b00      	cmp	r3, #0
 8008268:	da09      	bge.n	800827e <_strtoul_l.isra.0+0xcc>
 800826a:	2322      	movs	r3, #34	; 0x22
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	f8c8 3000 	str.w	r3, [r8]
 8008274:	f1ba 0f00 	cmp.w	sl, #0
 8008278:	d107      	bne.n	800828a <_strtoul_l.isra.0+0xd8>
 800827a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827e:	b101      	cbz	r1, 8008282 <_strtoul_l.isra.0+0xd0>
 8008280:	4240      	negs	r0, r0
 8008282:	f1ba 0f00 	cmp.w	sl, #0
 8008286:	d0f8      	beq.n	800827a <_strtoul_l.isra.0+0xc8>
 8008288:	b10b      	cbz	r3, 800828e <_strtoul_l.isra.0+0xdc>
 800828a:	f105 39ff 	add.w	r9, r5, #4294967295
 800828e:	f8ca 9000 	str.w	r9, [sl]
 8008292:	e7f2      	b.n	800827a <_strtoul_l.isra.0+0xc8>
 8008294:	2430      	movs	r4, #48	; 0x30
 8008296:	2e00      	cmp	r6, #0
 8008298:	d1b0      	bne.n	80081fc <_strtoul_l.isra.0+0x4a>
 800829a:	2608      	movs	r6, #8
 800829c:	e7ae      	b.n	80081fc <_strtoul_l.isra.0+0x4a>
 800829e:	2c30      	cmp	r4, #48	; 0x30
 80082a0:	d0a4      	beq.n	80081ec <_strtoul_l.isra.0+0x3a>
 80082a2:	260a      	movs	r6, #10
 80082a4:	e7aa      	b.n	80081fc <_strtoul_l.isra.0+0x4a>
	...

080082a8 <_strtoul_r>:
 80082a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082aa:	4c06      	ldr	r4, [pc, #24]	; (80082c4 <_strtoul_r+0x1c>)
 80082ac:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_strtoul_r+0x20>)
 80082ae:	6824      	ldr	r4, [r4, #0]
 80082b0:	6a24      	ldr	r4, [r4, #32]
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	bf08      	it	eq
 80082b6:	462c      	moveq	r4, r5
 80082b8:	9400      	str	r4, [sp, #0]
 80082ba:	f7ff ff7a 	bl	80081b2 <_strtoul_l.isra.0>
 80082be:	b003      	add	sp, #12
 80082c0:	bd30      	pop	{r4, r5, pc}
 80082c2:	bf00      	nop
 80082c4:	20000014 	.word	0x20000014
 80082c8:	20000078 	.word	0x20000078

080082cc <__submore>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	460c      	mov	r4, r1
 80082d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d8:	4299      	cmp	r1, r3
 80082da:	d11b      	bne.n	8008314 <__submore+0x48>
 80082dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082e0:	f7ff f916 	bl	8007510 <_malloc_r>
 80082e4:	b918      	cbnz	r0, 80082ee <__submore+0x22>
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80082f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80082f8:	6360      	str	r0, [r4, #52]	; 0x34
 80082fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80082fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008302:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008306:	7043      	strb	r3, [r0, #1]
 8008308:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800830c:	7003      	strb	r3, [r0, #0]
 800830e:	6020      	str	r0, [r4, #0]
 8008310:	2000      	movs	r0, #0
 8008312:	e7ea      	b.n	80082ea <__submore+0x1e>
 8008314:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008316:	0077      	lsls	r7, r6, #1
 8008318:	463a      	mov	r2, r7
 800831a:	f000 f9f3 	bl	8008704 <_realloc_r>
 800831e:	4605      	mov	r5, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d0e0      	beq.n	80082e6 <__submore+0x1a>
 8008324:	eb00 0806 	add.w	r8, r0, r6
 8008328:	4601      	mov	r1, r0
 800832a:	4632      	mov	r2, r6
 800832c:	4640      	mov	r0, r8
 800832e:	f7fb fc23 	bl	8003b78 <memcpy>
 8008332:	f8c4 8000 	str.w	r8, [r4]
 8008336:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800833a:	e7e9      	b.n	8008310 <__submore+0x44>

0800833c <__swbuf_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	4614      	mov	r4, r2
 8008342:	4605      	mov	r5, r0
 8008344:	b118      	cbz	r0, 800834e <__swbuf_r+0x12>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <__swbuf_r+0x12>
 800834a:	f7fe f881 	bl	8006450 <__sinit>
 800834e:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <__swbuf_r+0x98>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d12a      	bne.n	80083aa <__swbuf_r+0x6e>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	d52e      	bpl.n	80083be <__swbuf_r+0x82>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b363      	cbz	r3, 80083be <__swbuf_r+0x82>
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	b2f6      	uxtb	r6, r6
 800836a:	1ac0      	subs	r0, r0, r3
 800836c:	6963      	ldr	r3, [r4, #20]
 800836e:	4637      	mov	r7, r6
 8008370:	4283      	cmp	r3, r0
 8008372:	dc04      	bgt.n	800837e <__swbuf_r+0x42>
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f000 f934 	bl	80085e4 <_fflush_r>
 800837c:	bb28      	cbnz	r0, 80083ca <__swbuf_r+0x8e>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3001      	adds	r0, #1
 8008382:	3b01      	subs	r3, #1
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	701e      	strb	r6, [r3, #0]
 800838e:	6963      	ldr	r3, [r4, #20]
 8008390:	4283      	cmp	r3, r0
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x62>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d519      	bpl.n	80083ce <__swbuf_r+0x92>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d117      	bne.n	80083ce <__swbuf_r+0x92>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 f91f 	bl	80085e4 <_fflush_r>
 80083a6:	b190      	cbz	r0, 80083ce <__swbuf_r+0x92>
 80083a8:	e00f      	b.n	80083ca <__swbuf_r+0x8e>
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <__swbuf_r+0x9c>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	d101      	bne.n	80083b4 <__swbuf_r+0x78>
 80083b0:	68ac      	ldr	r4, [r5, #8]
 80083b2:	e7d0      	b.n	8008356 <__swbuf_r+0x1a>
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__swbuf_r+0xa0>)
 80083b6:	429c      	cmp	r4, r3
 80083b8:	bf08      	it	eq
 80083ba:	68ec      	ldreq	r4, [r5, #12]
 80083bc:	e7cb      	b.n	8008356 <__swbuf_r+0x1a>
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f81b 	bl	80083fc <__swsetup_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d0cc      	beq.n	8008364 <__swbuf_r+0x28>
 80083ca:	f04f 37ff 	mov.w	r7, #4294967295
 80083ce:	4638      	mov	r0, r7
 80083d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d2:	bf00      	nop
 80083d4:	08008f70 	.word	0x08008f70
 80083d8:	08008f90 	.word	0x08008f90
 80083dc:	08008f50 	.word	0x08008f50

080083e0 <__ascii_wctomb>:
 80083e0:	b149      	cbz	r1, 80083f6 <__ascii_wctomb+0x16>
 80083e2:	2aff      	cmp	r2, #255	; 0xff
 80083e4:	bf8b      	itete	hi
 80083e6:	238a      	movhi	r3, #138	; 0x8a
 80083e8:	700a      	strbls	r2, [r1, #0]
 80083ea:	6003      	strhi	r3, [r0, #0]
 80083ec:	2001      	movls	r0, #1
 80083ee:	bf88      	it	hi
 80083f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80083f4:	4770      	bx	lr
 80083f6:	4608      	mov	r0, r1
 80083f8:	4770      	bx	lr
	...

080083fc <__swsetup_r>:
 80083fc:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <__swsetup_r+0xcc>)
 80083fe:	b570      	push	{r4, r5, r6, lr}
 8008400:	681d      	ldr	r5, [r3, #0]
 8008402:	4606      	mov	r6, r0
 8008404:	460c      	mov	r4, r1
 8008406:	b125      	cbz	r5, 8008412 <__swsetup_r+0x16>
 8008408:	69ab      	ldr	r3, [r5, #24]
 800840a:	b913      	cbnz	r3, 8008412 <__swsetup_r+0x16>
 800840c:	4628      	mov	r0, r5
 800840e:	f7fe f81f 	bl	8006450 <__sinit>
 8008412:	4b2e      	ldr	r3, [pc, #184]	; (80084cc <__swsetup_r+0xd0>)
 8008414:	429c      	cmp	r4, r3
 8008416:	d10f      	bne.n	8008438 <__swsetup_r+0x3c>
 8008418:	686c      	ldr	r4, [r5, #4]
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	b29a      	uxth	r2, r3
 8008420:	0715      	lsls	r5, r2, #28
 8008422:	d42c      	bmi.n	800847e <__swsetup_r+0x82>
 8008424:	06d0      	lsls	r0, r2, #27
 8008426:	d411      	bmi.n	800844c <__swsetup_r+0x50>
 8008428:	2209      	movs	r2, #9
 800842a:	6032      	str	r2, [r6, #0]
 800842c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	e03e      	b.n	80084b6 <__swsetup_r+0xba>
 8008438:	4b25      	ldr	r3, [pc, #148]	; (80084d0 <__swsetup_r+0xd4>)
 800843a:	429c      	cmp	r4, r3
 800843c:	d101      	bne.n	8008442 <__swsetup_r+0x46>
 800843e:	68ac      	ldr	r4, [r5, #8]
 8008440:	e7eb      	b.n	800841a <__swsetup_r+0x1e>
 8008442:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <__swsetup_r+0xd8>)
 8008444:	429c      	cmp	r4, r3
 8008446:	bf08      	it	eq
 8008448:	68ec      	ldreq	r4, [r5, #12]
 800844a:	e7e6      	b.n	800841a <__swsetup_r+0x1e>
 800844c:	0751      	lsls	r1, r2, #29
 800844e:	d512      	bpl.n	8008476 <__swsetup_r+0x7a>
 8008450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008452:	b141      	cbz	r1, 8008466 <__swsetup_r+0x6a>
 8008454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008458:	4299      	cmp	r1, r3
 800845a:	d002      	beq.n	8008462 <__swsetup_r+0x66>
 800845c:	4630      	mov	r0, r6
 800845e:	f7ff f80b 	bl	8007478 <_free_r>
 8008462:	2300      	movs	r3, #0
 8008464:	6363      	str	r3, [r4, #52]	; 0x34
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	2300      	movs	r3, #0
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f043 0308 	orr.w	r3, r3, #8
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	b94b      	cbnz	r3, 8008496 <__swsetup_r+0x9a>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848c:	d003      	beq.n	8008496 <__swsetup_r+0x9a>
 800848e:	4621      	mov	r1, r4
 8008490:	4630      	mov	r0, r6
 8008492:	f000 f8f5 	bl	8008680 <__smakebuf_r>
 8008496:	89a2      	ldrh	r2, [r4, #12]
 8008498:	f012 0301 	ands.w	r3, r2, #1
 800849c:	d00c      	beq.n	80084b8 <__swsetup_r+0xbc>
 800849e:	2300      	movs	r3, #0
 80084a0:	60a3      	str	r3, [r4, #8]
 80084a2:	6963      	ldr	r3, [r4, #20]
 80084a4:	425b      	negs	r3, r3
 80084a6:	61a3      	str	r3, [r4, #24]
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	b953      	cbnz	r3, 80084c2 <__swsetup_r+0xc6>
 80084ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80084b4:	d1ba      	bne.n	800842c <__swsetup_r+0x30>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	0792      	lsls	r2, r2, #30
 80084ba:	bf58      	it	pl
 80084bc:	6963      	ldrpl	r3, [r4, #20]
 80084be:	60a3      	str	r3, [r4, #8]
 80084c0:	e7f2      	b.n	80084a8 <__swsetup_r+0xac>
 80084c2:	2000      	movs	r0, #0
 80084c4:	e7f7      	b.n	80084b6 <__swsetup_r+0xba>
 80084c6:	bf00      	nop
 80084c8:	20000014 	.word	0x20000014
 80084cc:	08008f70 	.word	0x08008f70
 80084d0:	08008f90 	.word	0x08008f90
 80084d4:	08008f50 	.word	0x08008f50

080084d8 <__sflush_r>:
 80084d8:	898a      	ldrh	r2, [r1, #12]
 80084da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084de:	4605      	mov	r5, r0
 80084e0:	0710      	lsls	r0, r2, #28
 80084e2:	460c      	mov	r4, r1
 80084e4:	d458      	bmi.n	8008598 <__sflush_r+0xc0>
 80084e6:	684b      	ldr	r3, [r1, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dc05      	bgt.n	80084f8 <__sflush_r+0x20>
 80084ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	dc02      	bgt.n	80084f8 <__sflush_r+0x20>
 80084f2:	2000      	movs	r0, #0
 80084f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084fa:	2e00      	cmp	r6, #0
 80084fc:	d0f9      	beq.n	80084f2 <__sflush_r+0x1a>
 80084fe:	2300      	movs	r3, #0
 8008500:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008504:	682f      	ldr	r7, [r5, #0]
 8008506:	6a21      	ldr	r1, [r4, #32]
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	d032      	beq.n	8008572 <__sflush_r+0x9a>
 800850c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	075a      	lsls	r2, r3, #29
 8008512:	d505      	bpl.n	8008520 <__sflush_r+0x48>
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	1ac0      	subs	r0, r0, r3
 8008518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800851a:	b10b      	cbz	r3, 8008520 <__sflush_r+0x48>
 800851c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800851e:	1ac0      	subs	r0, r0, r3
 8008520:	2300      	movs	r3, #0
 8008522:	4602      	mov	r2, r0
 8008524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008526:	6a21      	ldr	r1, [r4, #32]
 8008528:	4628      	mov	r0, r5
 800852a:	47b0      	blx	r6
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	d106      	bne.n	8008540 <__sflush_r+0x68>
 8008532:	6829      	ldr	r1, [r5, #0]
 8008534:	291d      	cmp	r1, #29
 8008536:	d848      	bhi.n	80085ca <__sflush_r+0xf2>
 8008538:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <__sflush_r+0x108>)
 800853a:	40ca      	lsrs	r2, r1
 800853c:	07d6      	lsls	r6, r2, #31
 800853e:	d544      	bpl.n	80085ca <__sflush_r+0xf2>
 8008540:	2200      	movs	r2, #0
 8008542:	6062      	str	r2, [r4, #4]
 8008544:	6922      	ldr	r2, [r4, #16]
 8008546:	04d9      	lsls	r1, r3, #19
 8008548:	6022      	str	r2, [r4, #0]
 800854a:	d504      	bpl.n	8008556 <__sflush_r+0x7e>
 800854c:	1c42      	adds	r2, r0, #1
 800854e:	d101      	bne.n	8008554 <__sflush_r+0x7c>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b903      	cbnz	r3, 8008556 <__sflush_r+0x7e>
 8008554:	6560      	str	r0, [r4, #84]	; 0x54
 8008556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008558:	602f      	str	r7, [r5, #0]
 800855a:	2900      	cmp	r1, #0
 800855c:	d0c9      	beq.n	80084f2 <__sflush_r+0x1a>
 800855e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008562:	4299      	cmp	r1, r3
 8008564:	d002      	beq.n	800856c <__sflush_r+0x94>
 8008566:	4628      	mov	r0, r5
 8008568:	f7fe ff86 	bl	8007478 <_free_r>
 800856c:	2000      	movs	r0, #0
 800856e:	6360      	str	r0, [r4, #52]	; 0x34
 8008570:	e7c0      	b.n	80084f4 <__sflush_r+0x1c>
 8008572:	2301      	movs	r3, #1
 8008574:	4628      	mov	r0, r5
 8008576:	47b0      	blx	r6
 8008578:	1c41      	adds	r1, r0, #1
 800857a:	d1c8      	bne.n	800850e <__sflush_r+0x36>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0c5      	beq.n	800850e <__sflush_r+0x36>
 8008582:	2b1d      	cmp	r3, #29
 8008584:	d001      	beq.n	800858a <__sflush_r+0xb2>
 8008586:	2b16      	cmp	r3, #22
 8008588:	d101      	bne.n	800858e <__sflush_r+0xb6>
 800858a:	602f      	str	r7, [r5, #0]
 800858c:	e7b1      	b.n	80084f2 <__sflush_r+0x1a>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008594:	81a3      	strh	r3, [r4, #12]
 8008596:	e7ad      	b.n	80084f4 <__sflush_r+0x1c>
 8008598:	690f      	ldr	r7, [r1, #16]
 800859a:	2f00      	cmp	r7, #0
 800859c:	d0a9      	beq.n	80084f2 <__sflush_r+0x1a>
 800859e:	0793      	lsls	r3, r2, #30
 80085a0:	bf18      	it	ne
 80085a2:	2300      	movne	r3, #0
 80085a4:	680e      	ldr	r6, [r1, #0]
 80085a6:	bf08      	it	eq
 80085a8:	694b      	ldreq	r3, [r1, #20]
 80085aa:	eba6 0807 	sub.w	r8, r6, r7
 80085ae:	600f      	str	r7, [r1, #0]
 80085b0:	608b      	str	r3, [r1, #8]
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	dd9c      	ble.n	80084f2 <__sflush_r+0x1a>
 80085b8:	4643      	mov	r3, r8
 80085ba:	463a      	mov	r2, r7
 80085bc:	6a21      	ldr	r1, [r4, #32]
 80085be:	4628      	mov	r0, r5
 80085c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085c2:	47b0      	blx	r6
 80085c4:	2800      	cmp	r0, #0
 80085c6:	dc06      	bgt.n	80085d6 <__sflush_r+0xfe>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	e78e      	b.n	80084f4 <__sflush_r+0x1c>
 80085d6:	4407      	add	r7, r0
 80085d8:	eba8 0800 	sub.w	r8, r8, r0
 80085dc:	e7e9      	b.n	80085b2 <__sflush_r+0xda>
 80085de:	bf00      	nop
 80085e0:	20400001 	.word	0x20400001

080085e4 <_fflush_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	690b      	ldr	r3, [r1, #16]
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	b1db      	cbz	r3, 8008626 <_fflush_r+0x42>
 80085ee:	b118      	cbz	r0, 80085f8 <_fflush_r+0x14>
 80085f0:	6983      	ldr	r3, [r0, #24]
 80085f2:	b90b      	cbnz	r3, 80085f8 <_fflush_r+0x14>
 80085f4:	f7fd ff2c 	bl	8006450 <__sinit>
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <_fflush_r+0x48>)
 80085fa:	429c      	cmp	r4, r3
 80085fc:	d109      	bne.n	8008612 <_fflush_r+0x2e>
 80085fe:	686c      	ldr	r4, [r5, #4]
 8008600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008604:	b17b      	cbz	r3, 8008626 <_fflush_r+0x42>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860e:	f7ff bf63 	b.w	80084d8 <__sflush_r>
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <_fflush_r+0x4c>)
 8008614:	429c      	cmp	r4, r3
 8008616:	d101      	bne.n	800861c <_fflush_r+0x38>
 8008618:	68ac      	ldr	r4, [r5, #8]
 800861a:	e7f1      	b.n	8008600 <_fflush_r+0x1c>
 800861c:	4b05      	ldr	r3, [pc, #20]	; (8008634 <_fflush_r+0x50>)
 800861e:	429c      	cmp	r4, r3
 8008620:	bf08      	it	eq
 8008622:	68ec      	ldreq	r4, [r5, #12]
 8008624:	e7ec      	b.n	8008600 <_fflush_r+0x1c>
 8008626:	2000      	movs	r0, #0
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	bf00      	nop
 800862c:	08008f70 	.word	0x08008f70
 8008630:	08008f90 	.word	0x08008f90
 8008634:	08008f50 	.word	0x08008f50

08008638 <__swhatbuf_r>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	460e      	mov	r6, r1
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	b096      	sub	sp, #88	; 0x58
 8008642:	2900      	cmp	r1, #0
 8008644:	4614      	mov	r4, r2
 8008646:	461d      	mov	r5, r3
 8008648:	da07      	bge.n	800865a <__swhatbuf_r+0x22>
 800864a:	2300      	movs	r3, #0
 800864c:	602b      	str	r3, [r5, #0]
 800864e:	89b3      	ldrh	r3, [r6, #12]
 8008650:	061a      	lsls	r2, r3, #24
 8008652:	d410      	bmi.n	8008676 <__swhatbuf_r+0x3e>
 8008654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008658:	e00e      	b.n	8008678 <__swhatbuf_r+0x40>
 800865a:	466a      	mov	r2, sp
 800865c:	f000 f878 	bl	8008750 <_fstat_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	dbf2      	blt.n	800864a <__swhatbuf_r+0x12>
 8008664:	9a01      	ldr	r2, [sp, #4]
 8008666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800866a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800866e:	425a      	negs	r2, r3
 8008670:	415a      	adcs	r2, r3
 8008672:	602a      	str	r2, [r5, #0]
 8008674:	e7ee      	b.n	8008654 <__swhatbuf_r+0x1c>
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	2000      	movs	r0, #0
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	b016      	add	sp, #88	; 0x58
 800867e:	bd70      	pop	{r4, r5, r6, pc}

08008680 <__smakebuf_r>:
 8008680:	898b      	ldrh	r3, [r1, #12]
 8008682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008684:	079d      	lsls	r5, r3, #30
 8008686:	4606      	mov	r6, r0
 8008688:	460c      	mov	r4, r1
 800868a:	d507      	bpl.n	800869c <__smakebuf_r+0x1c>
 800868c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	2301      	movs	r3, #1
 8008696:	6163      	str	r3, [r4, #20]
 8008698:	b002      	add	sp, #8
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	ab01      	add	r3, sp, #4
 800869e:	466a      	mov	r2, sp
 80086a0:	f7ff ffca 	bl	8008638 <__swhatbuf_r>
 80086a4:	9900      	ldr	r1, [sp, #0]
 80086a6:	4605      	mov	r5, r0
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7fe ff31 	bl	8007510 <_malloc_r>
 80086ae:	b948      	cbnz	r0, 80086c4 <__smakebuf_r+0x44>
 80086b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b4:	059a      	lsls	r2, r3, #22
 80086b6:	d4ef      	bmi.n	8008698 <__smakebuf_r+0x18>
 80086b8:	f023 0303 	bic.w	r3, r3, #3
 80086bc:	f043 0302 	orr.w	r3, r3, #2
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	e7e3      	b.n	800868c <__smakebuf_r+0xc>
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <__smakebuf_r+0x7c>)
 80086c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	6020      	str	r0, [r4, #0]
 80086cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	9b00      	ldr	r3, [sp, #0]
 80086d4:	6120      	str	r0, [r4, #16]
 80086d6:	6163      	str	r3, [r4, #20]
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	b15b      	cbz	r3, 80086f4 <__smakebuf_r+0x74>
 80086dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f847 	bl	8008774 <_isatty_r>
 80086e6:	b128      	cbz	r0, 80086f4 <__smakebuf_r+0x74>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	431d      	orrs	r5, r3
 80086f8:	81a5      	strh	r5, [r4, #12]
 80086fa:	e7cd      	b.n	8008698 <__smakebuf_r+0x18>
 80086fc:	08006419 	.word	0x08006419

08008700 <__malloc_lock>:
 8008700:	4770      	bx	lr

08008702 <__malloc_unlock>:
 8008702:	4770      	bx	lr

08008704 <_realloc_r>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	4607      	mov	r7, r0
 8008708:	4614      	mov	r4, r2
 800870a:	460e      	mov	r6, r1
 800870c:	b921      	cbnz	r1, 8008718 <_realloc_r+0x14>
 800870e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008712:	4611      	mov	r1, r2
 8008714:	f7fe befc 	b.w	8007510 <_malloc_r>
 8008718:	b922      	cbnz	r2, 8008724 <_realloc_r+0x20>
 800871a:	f7fe fead 	bl	8007478 <_free_r>
 800871e:	4625      	mov	r5, r4
 8008720:	4628      	mov	r0, r5
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	f000 f836 	bl	8008794 <_malloc_usable_size_r>
 8008728:	42a0      	cmp	r0, r4
 800872a:	d20f      	bcs.n	800874c <_realloc_r+0x48>
 800872c:	4621      	mov	r1, r4
 800872e:	4638      	mov	r0, r7
 8008730:	f7fe feee 	bl	8007510 <_malloc_r>
 8008734:	4605      	mov	r5, r0
 8008736:	2800      	cmp	r0, #0
 8008738:	d0f2      	beq.n	8008720 <_realloc_r+0x1c>
 800873a:	4631      	mov	r1, r6
 800873c:	4622      	mov	r2, r4
 800873e:	f7fb fa1b 	bl	8003b78 <memcpy>
 8008742:	4631      	mov	r1, r6
 8008744:	4638      	mov	r0, r7
 8008746:	f7fe fe97 	bl	8007478 <_free_r>
 800874a:	e7e9      	b.n	8008720 <_realloc_r+0x1c>
 800874c:	4635      	mov	r5, r6
 800874e:	e7e7      	b.n	8008720 <_realloc_r+0x1c>

08008750 <_fstat_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	2300      	movs	r3, #0
 8008754:	4c06      	ldr	r4, [pc, #24]	; (8008770 <_fstat_r+0x20>)
 8008756:	4605      	mov	r5, r0
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	f7fb f98c 	bl	8003a7a <_fstat>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d102      	bne.n	800876c <_fstat_r+0x1c>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	b103      	cbz	r3, 800876c <_fstat_r+0x1c>
 800876a:	602b      	str	r3, [r5, #0]
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	bf00      	nop
 8008770:	200008c0 	.word	0x200008c0

08008774 <_isatty_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	2300      	movs	r3, #0
 8008778:	4c05      	ldr	r4, [pc, #20]	; (8008790 <_isatty_r+0x1c>)
 800877a:	4605      	mov	r5, r0
 800877c:	4608      	mov	r0, r1
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	f7fb f980 	bl	8003a84 <_isatty>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_isatty_r+0x1a>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	b103      	cbz	r3, 800878e <_isatty_r+0x1a>
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	200008c0 	.word	0x200008c0

08008794 <_malloc_usable_size_r>:
 8008794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008798:	1f18      	subs	r0, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	bfbc      	itt	lt
 800879e:	580b      	ldrlt	r3, [r1, r0]
 80087a0:	18c0      	addlt	r0, r0, r3
 80087a2:	4770      	bx	lr

080087a4 <_init>:
 80087a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a6:	bf00      	nop
 80087a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087aa:	bc08      	pop	{r3}
 80087ac:	469e      	mov	lr, r3
 80087ae:	4770      	bx	lr

080087b0 <_fini>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr
